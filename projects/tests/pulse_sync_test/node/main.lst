   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 341               		.section	.rodata.str1.1,"aMS",@progbits,1
 342               	.LC0:
 343 0000 7761 6974 		.string	"waiting to receive PulseSync flood\r"
 343      696E 6720 
 343      746F 2072 
 343      6563 6569 
 343      7665 2050 
 344               		.text
 346               	.global	test_task
 348               	test_task:
 349               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *	Lab 3 - Build Your Own Sensor Network (Gateway)
   3:main.c        **** *	Madhav Iyengar
   4:main.c        **** *	Miguel Sotolongo
   5:main.c        **** *	Nathaniel Jeffries
   6:main.c        **** -------------------------------------------------------------------------------
   7:main.c        **** *
   8:main.c        **** *Nano-RK, a real-time operating system for sensor networks.
   9:main.c        **** *Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
  10:main.c        **** *All rights reserved.
  11:main.c        **** *
  12:main.c        **** *This is the Open Source Version of Nano-RK included as part of a Dual
  13:main.c        **** *Licensing Model. If you are unsure which license to use please refer to:
  14:main.c        **** *http://www.nanork.org/nano-RK/wiki/Licensing
  15:main.c        **** *
  16:main.c        **** *This program is free software: you can redistribute it and/or modify
  17:main.c        **** *it under the terms of the GNU General Public License as published by
  18:main.c        **** *the Free Software Foundation, version 2.0 of the License.
  19:main.c        **** *
  20:main.c        **** *This program is distributed in the hope that it will be useful,
  21:main.c        **** *but WITHOUT ANY WARRANTY; without even the implied warranty of
  22:main.c        **** *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
  23:main.c        **** *GNU General Public License for more details.
  24:main.c        **** *
  25:main.c        **** *You should have received a copy of the GNU General Public License
  26:main.c        **** *along with this program.If not, see <http://www.gnu.org/licenses/>.
  27:main.c        **** *
  28:main.c        **** *******************************************************************************/
  29:main.c        **** 
  30:main.c        **** #include <include.h>
  31:main.c        **** #include <ulib.h>
  32:main.c        **** #include <stdio.h>
  33:main.c        **** #include <avr/sleep.h>
  34:main.c        **** 
  35:main.c        **** #include <nrk.h>
  36:main.c        **** #include <nrk_error.h>
  37:main.c        **** 
  38:main.c        **** #include <hal.h>
  39:main.c        **** #include <string.h>
  40:main.c        **** #include <pulse_sync.h>
  41:main.c        **** 
  42:main.c        **** #define UART_BUF_SIZE	16
  43:main.c        **** 
  44:main.c        **** nrk_task_type TEST_TASK;
  45:main.c        **** NRK_STK test_task_stack[NRK_APP_STACKSIZE];
  46:main.c        **** void test_task(void);
  47:main.c        **** 
  48:main.c        **** void nrk_create_taskset();
  49:main.c        **** 
  50:main.c        **** void nrk_register_drivers();
  51:main.c        **** 
  52:main.c        **** int main() {
  53:main.c        **** 	nrk_setup_ports();
  54:main.c        **** 	nrk_setup_uart(UART_BAUDRATE_115K2);
  55:main.c        **** 	
  56:main.c        **** 	nrk_init();
  57:main.c        **** 	
  58:main.c        **** 	nrk_led_clr(0);
  59:main.c        **** 	nrk_led_clr(1);
  60:main.c        **** 	nrk_led_clr(2);
  61:main.c        **** 	nrk_led_clr(3);
  62:main.c        **** 	
  63:main.c        **** 	nrk_time_set(0, 0);
  64:main.c        **** 
  65:main.c        **** 	psync_init(2, 0, 13);
  66:main.c        **** 
  67:main.c        **** 	nrk_create_taskset();
  68:main.c        **** 	nrk_start();
  69:main.c        **** 	
  70:main.c        **** 	return 0;
  71:main.c        **** }
  72:main.c        **** 
  73:main.c        **** void test_task() {
 351               	.LM0:
 352               	.LFBB1:
 353               	/* prologue: function */
 354               	/* frame size = 0 */
 355               	/* stack size = 0 */
 356               	.L__stack_usage = 0
  74:main.c        **** 	printf("waiting to receive PulseSync flood\r\n");
 358               	.LM1:
 359 0000 80E0      		ldi r24,lo8(.LC0)
 360 0002 90E0      		ldi r25,hi8(.LC0)
 361 0004 0E94 0000 		call puts
 362               	.L2:
  75:main.c        **** 
  76:main.c        **** 	// loop receiving to measure determinacy in sync floods
  77:main.c        **** 	while (1) {
  78:main.c        **** 		psync_flood_wait(NULL);
 364               	.LM2:
 365 0008 80E0      		ldi r24,0
 366 000a 90E0      		ldi r25,0
 367 000c 0E94 0000 		call psync_flood_wait
  79:main.c        **** 	}
 369               	.LM3:
 370 0010 00C0      		rjmp .L2
 372               	.Lscope1:
 374               		.stabd	78,0,0
 376               	.global	nrk_create_taskset
 378               	nrk_create_taskset:
 379               		.stabd	46,0,0
  80:main.c        **** }
  81:main.c        **** 
  82:main.c        **** void nrk_create_taskset() {
 381               	.LM4:
 382               	.LFBB2:
 383 0012 CF93      		push r28
 384 0014 DF93      		push r29
 385               	/* prologue: function */
 386               	/* frame size = 0 */
 387               	/* stack size = 2 */
 388               	.L__stack_usage = 2
  83:main.c        **** 	TEST_TASK.task = test_task;
 390               	.LM5:
 391 0016 C0E0      		ldi r28,lo8(TEST_TASK)
 392 0018 D0E0      		ldi r29,hi8(TEST_TASK)
 393 001a 80E0      		ldi r24,lo8(gs(test_task))
 394 001c 90E0      		ldi r25,hi8(gs(test_task))
 395 001e 9E83      		std Y+6,r25
 396 0020 8D83      		std Y+5,r24
  84:main.c        **** 	nrk_task_set_stk(&TEST_TASK, test_task_stack, NRK_APP_STACKSIZE);
 398               	.LM6:
 399 0022 40E0      		ldi r20,0
 400 0024 51E0      		ldi r21,lo8(1)
 401 0026 60E0      		ldi r22,lo8(test_task_stack)
 402 0028 70E0      		ldi r23,hi8(test_task_stack)
 403 002a CE01      		movw r24,r28
 404 002c 0E94 0000 		call nrk_task_set_stk
  85:main.c        **** 	TEST_TASK.prio = 2;
 406               	.LM7:
 407 0030 82E0      		ldi r24,lo8(2)
 408 0032 8887      		std Y+8,r24
  86:main.c        **** 	TEST_TASK.FirstActivation = TRUE;
 410               	.LM8:
 411 0034 81E0      		ldi r24,lo8(1)
 412 0036 8F83      		std Y+7,r24
  87:main.c        **** 	TEST_TASK.Type = BASIC_TASK;
 414               	.LM9:
 415 0038 8987      		std Y+9,r24
  88:main.c        **** 	TEST_TASK.SchType = PREEMPTIVE;
 417               	.LM10:
 418 003a 8A87      		std Y+10,r24
  89:main.c        **** 	TEST_TASK.period.secs = 10;
 420               	.LM11:
 421 003c 8AE0      		ldi r24,lo8(10)
 422 003e 90E0      		ldi r25,0
 423 0040 A0E0      		ldi r26,0
 424 0042 B0E0      		ldi r27,0
 425 0044 8B87      		std Y+11,r24
 426 0046 9C87      		std Y+12,r25
 427 0048 AD87      		std Y+13,r26
 428 004a BE87      		std Y+14,r27
  90:main.c        **** 	TEST_TASK.period.nano_secs = 0;
 430               	.LM12:
 431 004c 1F86      		std Y+15,__zero_reg__
 432 004e 188A      		std Y+16,__zero_reg__
 433 0050 198A      		std Y+17,__zero_reg__
 434 0052 1A8A      		std Y+18,__zero_reg__
  91:main.c        **** 	TEST_TASK.cpu_reserve.secs = 0;
 436               	.LM13:
 437 0054 1B8A      		std Y+19,__zero_reg__
 438 0056 1C8A      		std Y+20,__zero_reg__
 439 0058 1D8A      		std Y+21,__zero_reg__
 440 005a 1E8A      		std Y+22,__zero_reg__
  92:main.c        **** 	TEST_TASK.cpu_reserve.nano_secs = 0;
 442               	.LM14:
 443 005c 1F8A      		std Y+23,__zero_reg__
 444 005e 188E      		std Y+24,__zero_reg__
 445 0060 198E      		std Y+25,__zero_reg__
 446 0062 1A8E      		std Y+26,__zero_reg__
  93:main.c        **** 	TEST_TASK.offset.secs = 0;
 448               	.LM15:
 449 0064 1B8E      		std Y+27,__zero_reg__
 450 0066 1C8E      		std Y+28,__zero_reg__
 451 0068 1D8E      		std Y+29,__zero_reg__
 452 006a 1E8E      		std Y+30,__zero_reg__
  94:main.c        **** 	TEST_TASK.offset.nano_secs = 0;
 454               	.LM16:
 455 006c 1F8E      		std Y+31,__zero_reg__
 456 006e 18A2      		std Y+32,__zero_reg__
 457 0070 19A2      		std Y+33,__zero_reg__
 458 0072 1AA2      		std Y+34,__zero_reg__
  95:main.c        **** 
  96:main.c        **** 	nrk_activate_task(&TEST_TASK);
 460               	.LM17:
 461 0074 CE01      		movw r24,r28
 462               	/* epilogue start */
  97:main.c        **** }
 464               	.LM18:
 465 0076 DF91      		pop r29
 466 0078 CF91      		pop r28
  96:main.c        **** }
 468               	.LM19:
 469 007a 0C94 0000 		jmp nrk_activate_task
 471               	.Lscope2:
 473               		.stabd	78,0,0
 474               		.section	.text.startup,"ax",@progbits
 476               	.global	main
 478               	main:
 479               		.stabd	46,0,0
  52:main.c        **** 	nrk_setup_ports();
 481               	.LM20:
 482               	.LFBB3:
 483               	/* prologue: function */
 484               	/* frame size = 0 */
 485               	/* stack size = 0 */
 486               	.L__stack_usage = 0
  53:main.c        **** 	nrk_setup_uart(UART_BAUDRATE_115K2);
 488               	.LM21:
 489 0000 0E94 0000 		call nrk_setup_ports
  54:main.c        **** 	
 491               	.LM22:
 492 0004 80E1      		ldi r24,lo8(16)
 493 0006 90E0      		ldi r25,0
 494 0008 0E94 0000 		call nrk_setup_uart
  56:main.c        **** 	
 496               	.LM23:
 497 000c 0E94 0000 		call nrk_init
  58:main.c        **** 	nrk_led_clr(1);
 499               	.LM24:
 500 0010 80E0      		ldi r24,0
 501 0012 90E0      		ldi r25,0
 502 0014 0E94 0000 		call nrk_led_clr
  59:main.c        **** 	nrk_led_clr(2);
 504               	.LM25:
 505 0018 81E0      		ldi r24,lo8(1)
 506 001a 90E0      		ldi r25,0
 507 001c 0E94 0000 		call nrk_led_clr
  60:main.c        **** 	nrk_led_clr(3);
 509               	.LM26:
 510 0020 82E0      		ldi r24,lo8(2)
 511 0022 90E0      		ldi r25,0
 512 0024 0E94 0000 		call nrk_led_clr
  61:main.c        **** 	
 514               	.LM27:
 515 0028 83E0      		ldi r24,lo8(3)
 516 002a 90E0      		ldi r25,0
 517 002c 0E94 0000 		call nrk_led_clr
  63:main.c        **** 
 519               	.LM28:
 520 0030 20E0      		ldi r18,0
 521 0032 30E0      		ldi r19,0
 522 0034 A901      		movw r20,r18
 523 0036 60E0      		ldi r22,0
 524 0038 70E0      		ldi r23,0
 525 003a CB01      		movw r24,r22
 526 003c 0E94 0000 		call nrk_time_set
  65:main.c        **** 
 528               	.LM29:
 529 0040 4DE0      		ldi r20,lo8(13)
 530 0042 60E0      		ldi r22,0
 531 0044 82E0      		ldi r24,lo8(2)
 532 0046 0E94 0000 		call psync_init
  67:main.c        **** 	nrk_start();
 534               	.LM30:
 535 004a 0E94 0000 		call nrk_create_taskset
  68:main.c        **** 	
 537               	.LM31:
 538 004e 0E94 0000 		call nrk_start
  71:main.c        **** 
 540               	.LM32:
 541 0052 80E0      		ldi r24,0
 542 0054 90E0      		ldi r25,0
 543 0056 0895      		ret
 545               	.Lscope3:
 547               		.stabd	78,0,0
 548               		.comm	test_task_stack,256,1
 549               		.comm	TEST_TASK,35,1
 550               		.comm	off_sq_sum,8,1
 551               		.comm	loc_sq_sum,8,1
 552               		.comm	flash_tx_pkt_done_signal,1,1
 553               		.comm	app_timer0_prescale,1,1
 554               		.comm	app_timer0_callback,2,1
 555               		.comm	_nrk_time_trigger,1,1
 556               		.comm	_nrk_prev_timer_val,1,1
 557               		.comm	error_num,1,1
 558               		.comm	error_task,1,1
 559               		.comm	nrk_kernel_stk_ptr,2,1
 560               		.comm	nrk_idle_task_stk,128,1
 561               		.comm	_nrk_signal_list,4,1
 576               		.text
 578               	.Letext0:
 579               		.ident	"GCC: (GNU) 4.9.2 20141224 (prerelease)"
 580               	.global __do_copy_data
 581               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccNf35ST.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccNf35ST.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccNf35ST.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccNf35ST.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccNf35ST.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccNf35ST.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccNf35ST.s:348    .text:0000000000000000 test_task
     /tmp/ccNf35ST.s:378    .text:0000000000000012 nrk_create_taskset
                            *COM*:0000000000000023 TEST_TASK
                            *COM*:0000000000000100 test_task_stack
     /tmp/ccNf35ST.s:478    .text.startup:0000000000000000 main
                            *COM*:0000000000000008 off_sq_sum
                            *COM*:0000000000000008 loc_sq_sum
                            *COM*:0000000000000001 flash_tx_pkt_done_signal
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
puts
psync_flood_wait
nrk_task_set_stk
nrk_activate_task
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_led_clr
nrk_time_set
psync_init
nrk_start
__do_copy_data
__do_clear_bss
