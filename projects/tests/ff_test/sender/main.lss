
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000190  00800200  000050a8  0000513c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000050a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000319  00800390  00800390  000052cc  2**0
                  ALLOC
  3 .stab         0000ff6c  00000000  00000000  000052cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008e08  00000000  00000000  00015238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0001e040  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  0001e051  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  0001f1b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00020223  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 14 02 	jmp	0x428	; 0x428 <__ctors_end>
       4:	0c 94 b9 21 	jmp	0x4372	; 0x4372 <__vector_1>
       8:	0c 94 eb 21 	jmp	0x43d6	; 0x43d6 <__vector_2>
       c:	0c 94 1d 22 	jmp	0x443a	; 0x443a <__vector_3>
      10:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      14:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      18:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      1c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      20:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      24:	0c 94 87 21 	jmp	0x430e	; 0x430e <__vector_9>
      28:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      2c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      30:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      34:	0c 94 e6 1f 	jmp	0x3fcc	; 0x3fcc <__vector_13>
      38:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      3c:	0c 94 e6 1f 	jmp	0x3fcc	; 0x3fcc <__vector_13>
      40:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      44:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      48:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      4c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      50:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      54:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      58:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      5c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      60:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      64:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__vector_25>
      68:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      6c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      70:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      74:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      78:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      7c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      80:	0c 94 19 20 	jmp	0x4032	; 0x4032 <__vector_32>
      84:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      88:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      8c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      90:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      94:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      98:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      9c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      a0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      a4:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      a8:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      ac:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      b0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      b4:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      b8:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      bc:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      c0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      c4:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      c8:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      cc:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      d0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      d4:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      d8:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      dc:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      e0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      e4:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__vector_57>
      e8:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__vector_58>
      ec:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__vector_59>
      f0:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__vector_60>
      f4:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__vector_61>
      f8:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__vector_62>
      fc:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__vector_63>
     100:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__vector_64>
     104:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     108:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     10c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     110:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     114:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     118:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     11c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     120:	a7 08       	sbc	r10, r7
     122:	b4 08       	sbc	r11, r4
     124:	c1 08       	sbc	r12, r1
     126:	ce 08       	sbc	r12, r14
     128:	db 08       	sbc	r13, r11
     12a:	e8 08       	sbc	r14, r8
     12c:	f5 08       	sbc	r15, r5
     12e:	18 09       	sbc	r17, r8
     130:	26 09       	sbc	r18, r6
     132:	34 09       	sbc	r19, r4
     134:	42 09       	sbc	r20, r2
     136:	50 09       	sbc	r21, r0
     138:	5e 09       	sbc	r21, r14
     13a:	6c 09       	sbc	r22, r12
     13c:	8f 09       	sbc	r24, r15
     13e:	91 09       	sbc	r25, r1
     140:	93 09       	sbc	r25, r3
     142:	95 09       	sbc	r25, r5
     144:	97 09       	sbc	r25, r7
     146:	99 09       	sbc	r25, r9
     148:	9b 09       	sbc	r25, r11
     14a:	ba 09       	sbc	r27, r10
     14c:	dd 09       	sbc	r29, r13
     14e:	01 0a       	sbc	r0, r17
     150:	24 0a       	sbc	r2, r20
     152:	47 0a       	sbc	r4, r23
     154:	6a 0a       	sbc	r6, r26
     156:	8d 0a       	sbc	r8, r29
     158:	c7 0a       	sbc	r12, r23
     15a:	d4 0a       	sbc	r13, r20
     15c:	e1 0a       	sbc	r14, r17
     15e:	ee 0a       	sbc	r14, r30
     160:	fb 0a       	sbc	r15, r27
     162:	08 0b       	sbc	r16, r24
     164:	15 0b       	sbc	r17, r21
     166:	2e 0b       	sbc	r18, r30
     168:	3b 0b       	sbc	r19, r27
     16a:	48 0b       	sbc	r20, r24
     16c:	55 0b       	sbc	r21, r21
     16e:	62 0b       	sbc	r22, r18
     170:	6f 0b       	sbc	r22, r31
     172:	7c 0b       	sbc	r23, r28
     174:	50 0f       	add	r21, r16
     176:	53 0f       	add	r21, r19
     178:	5e 0f       	add	r21, r30
     17a:	63 0f       	add	r22, r19
     17c:	6a 0f       	add	r22, r26
     17e:	73 0f       	add	r23, r19
     180:	76 0f       	add	r23, r22
     182:	7b 0f       	add	r23, r27
     184:	82 0f       	add	r24, r18
     186:	8b 0f       	add	r24, r27
     188:	e1 0f       	add	r30, r17
     18a:	e7 0f       	add	r30, r23
     18c:	ea 0f       	add	r30, r26
     18e:	ed 0f       	add	r30, r29
     190:	f0 0f       	add	r31, r16
     192:	f3 0f       	add	r31, r19
     194:	f9 0f       	add	r31, r25
     196:	f6 0f       	add	r31, r22
     198:	fc 0f       	add	r31, r28
     19a:	ff 0f       	add	r31, r31
     19c:	02 10       	cpse	r0, r2
     19e:	0b 10       	cpse	r0, r11
     1a0:	0e 10       	cpse	r0, r14
     1a2:	11 10       	cpse	r1, r1
     1a4:	14 10       	cpse	r1, r4
     1a6:	08 10       	cpse	r0, r8
     1a8:	de 0f       	add	r29, r30
     1aa:	e4 0f       	add	r30, r20
     1ac:	17 10       	cpse	r1, r7
     1ae:	1a 10       	cpse	r1, r10
     1b0:	05 10       	cpse	r0, r5
     1b2:	db 0f       	add	r29, r27

000001b4 <__trampolines_end>:
     1b4:	75 61       	ori	r23, 0x15	; 21
     1b6:	72 74       	andi	r23, 0x42	; 66
     1b8:	20 72       	andi	r18, 0x20	; 32
     1ba:	78 20       	and	r7, r8
     1bc:	73 69       	ori	r23, 0x93	; 147
     1be:	67 20       	and	r6, r7
     1c0:	66 61       	ori	r22, 0x16	; 22
     1c2:	69 6c       	ori	r22, 0xC9	; 201
     1c4:	65 64       	ori	r22, 0x45	; 69
     1c6:	0d 0a       	sbc	r0, r29
	...

000001c9 <__c.3388>:
     1c9:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000001d0 <__c.3385>:
     1d0:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000001df <__c.3382>:
     1df:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000001f0 <__c.3379>:
     1f0:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     200:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

0000020b <__c.3376>:
     20b:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     21b:	20 53 69 67 6e 61 6c 00                              Signal.

00000223 <__c.3373>:
     223:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     233:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000243 <__c.3370>:
     243:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     253:	72 6f 72 00                                         ror.

00000257 <__c.3367>:
     257:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000268 <__c.3364>:
     268:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     278:	61 72 74 00                                         art.

0000027c <__c.3361>:
     27c:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

0000028b <__c.3358>:
     28b:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     29b:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

000002a6 <__c.3355>:
     2a6:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

000002b2 <__c.3352>:
     2b2:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     2c2:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     2d2:	20 6f 6b 3f 00                                       ok?.

000002d7 <__c.3349>:
     2d7:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2e7:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002f5 <__c.3346>:
     2f5:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     305:	72 74 00                                            rt.

00000308 <__c.3343>:
     308:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     318:	49 44 00                                            ID.

0000031b <__c.3340>:
     31b:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     32b:	20 57 61 6b 65 75 70 00                              Wakeup.

00000333 <__c.3337>:
     333:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     343:	6c 61 74 65 64 00                                   lated.

00000349 <__c.3334>:
     349:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     359:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000364 <__c.3331>:
     364:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     374:	69 6e 74 65 72 00                                   inter.

0000037a <__c.3328>:
     37a:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     38a:	6c 6f 77 00                                         low.

0000038e <__c.3325>:
     38e:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     39e:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     3ae:	6e 6f 75 67 68 21 00                                nough!.

000003b5 <__c.3321>:
     3b5:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     3c5:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     3d5:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     3e5:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

000003f1 <__c.3318>:
     3f1:	29 3a 20 00                                         ): .

000003f5 <__c.3316>:
     3f5:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000401 <__c.3246>:
     401:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000410 <__c.2228>:
     410:	45 46 47 65 66 67 00                                EFGefg.

00000417 <__c.2222>:
     417:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

00000428 <__ctors_end>:
     428:	11 24       	eor	r1, r1
     42a:	1f be       	out	0x3f, r1	; 63
     42c:	cf ef       	ldi	r28, 0xFF	; 255
     42e:	d1 e4       	ldi	r29, 0x41	; 65
     430:	de bf       	out	0x3e, r29	; 62
     432:	cd bf       	out	0x3d, r28	; 61

00000434 <__do_copy_data>:
     434:	13 e0       	ldi	r17, 0x03	; 3
     436:	a0 e0       	ldi	r26, 0x00	; 0
     438:	b2 e0       	ldi	r27, 0x02	; 2
     43a:	e8 ea       	ldi	r30, 0xA8	; 168
     43c:	f0 e5       	ldi	r31, 0x50	; 80
     43e:	00 e0       	ldi	r16, 0x00	; 0
     440:	0b bf       	out	0x3b, r16	; 59
     442:	02 c0       	rjmp	.+4      	; 0x448 <__do_copy_data+0x14>
     444:	07 90       	elpm	r0, Z+
     446:	0d 92       	st	X+, r0
     448:	a0 39       	cpi	r26, 0x90	; 144
     44a:	b1 07       	cpc	r27, r17
     44c:	d9 f7       	brne	.-10     	; 0x444 <__do_copy_data+0x10>

0000044e <__do_clear_bss>:
     44e:	16 e0       	ldi	r17, 0x06	; 6
     450:	a0 e9       	ldi	r26, 0x90	; 144
     452:	b3 e0       	ldi	r27, 0x03	; 3
     454:	01 c0       	rjmp	.+2      	; 0x458 <.do_clear_bss_start>

00000456 <.do_clear_bss_loop>:
     456:	1d 92       	st	X+, r1

00000458 <.do_clear_bss_start>:
     458:	a9 3a       	cpi	r26, 0xA9	; 169
     45a:	b1 07       	cpc	r27, r17
     45c:	e1 f7       	brne	.-8      	; 0x456 <.do_clear_bss_loop>
     45e:	0e 94 32 23 	call	0x4664	; 0x4664 <main>
     462:	0c 94 52 28 	jmp	0x50a4	; 0x50a4 <_exit>

00000466 <__bad_interrupt>:
     466:	0c 94 dc 1f 	jmp	0x3fb8	; 0x3fb8 <__vector_default>

0000046a <rf_cmd>:
}


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
     46a:	cf 93       	push	r28
     46c:	c8 2f       	mov	r28, r24
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     46e:	90 91 41 01 	lds	r25, 0x0141
     472:	9f 71       	andi	r25, 0x1F	; 31
     474:	9f 31       	cpi	r25, 0x1F	; 31
     476:	d9 f3       	breq	.-10     	; 0x46e <rf_cmd+0x4>
		continue;
	// added for accessing buffer immediately before transmission for Flash implementation
	if ((cmd == 0x2) && tx_start_func)
     478:	c2 30       	cpi	r28, 0x02	; 2
     47a:	79 f4       	brne	.+30     	; 0x49a <rf_cmd+0x30>
     47c:	e0 91 91 03 	lds	r30, 0x0391
     480:	f0 91 92 03 	lds	r31, 0x0392
     484:	30 97       	sbiw	r30, 0x00	; 0
     486:	49 f0       	breq	.+18     	; 0x49a <rf_cmd+0x30>
		tx_start_func(tx_len, tx_buf);
     488:	60 91 00 02 	lds	r22, 0x0200
     48c:	70 91 01 02 	lds	r23, 0x0201
     490:	80 91 eb 04 	lds	r24, 0x04EB
     494:	90 91 ec 04 	lds	r25, 0x04EC
     498:	09 95       	icall
	TRX_STATE = cmd;
     49a:	c0 93 42 01 	sts	0x0142, r28
}
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <set_wireless_prog>:
uint8_t reset_val[] = {0x43, 0x15, 0xa6, 0xd9, 0x3d, 0x31, 0x82, 0xf1, 0x8c, 0xa7, 0x4f, 0xc5, 0x99, 0x97, 0x04, 0xac};


void set_wireless_prog(uint8_t val)
{
   wireless_prog = val;
     4a2:	80 93 90 03 	sts	0x0390, r24
     4a6:	08 95       	ret

000004a8 <rf_enable_glossy>:
}

void rf_enable_glossy()
{
	use_glossy = 1;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	80 93 b7 04 	sts	0x04B7, r24
     4ae:	08 95       	ret

000004b0 <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
     4b0:	10 92 b7 04 	sts	0x04B7, r1
     4b4:	08 95       	ret

000004b6 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     4b6:	80 91 41 01 	lds	r24, 0x0141
     4ba:	8f 71       	andi	r24, 0x1F	; 31
     4bc:	8f 31       	cpi	r24, 0x1F	; 31
     4be:	d9 f3       	breq	.-10     	; 0x4b6 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     4c0:	80 91 41 01 	lds	r24, 0x0141
     4c4:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
     4c6:	e1 f0       	breq	.+56     	; 0x500 <rf_power_down+0x4a>
     4c8:	8f 30       	cpi	r24, 0x0F	; 15
     4ca:	d1 f0       	breq	.+52     	; 0x500 <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
     4cc:	80 91 41 01 	lds	r24, 0x0141
     4d0:	8f 71       	andi	r24, 0x1F	; 31
     4d2:	88 30       	cpi	r24, 0x08	; 8
     4d4:	31 f4       	brne	.+12     	; 0x4e2 <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
     4d6:	80 91 39 01 	lds	r24, 0x0139
     4da:	82 60       	ori	r24, 0x02	; 2
     4dc:	80 93 39 01 	sts	0x0139, r24
     4e0:	0b c0       	rjmp	.+22     	; 0x4f8 <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
     4e2:	88 e0       	ldi	r24, 0x08	; 8
     4e4:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
     4e8:	80 91 41 01 	lds	r24, 0x0141
     4ec:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
     4ee:	88 30       	cpi	r24, 0x08	; 8
     4f0:	d9 f7       	brne	.-10     	; 0x4e8 <rf_power_down+0x32>
     4f2:	f1 cf       	rjmp	.-30     	; 0x4d6 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
     4f4:	8f 30       	cpi	r24, 0x0F	; 15
     4f6:	21 f0       	breq	.+8      	; 0x500 <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
     4f8:	80 91 41 01 	lds	r24, 0x0141
     4fc:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
     4fe:	d1 f7       	brne	.-12     	; 0x4f4 <rf_power_down+0x3e>
     500:	08 95       	ret

00000502 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     502:	80 91 41 01 	lds	r24, 0x0141
     506:	8f 71       	andi	r24, 0x1F	; 31
     508:	8f 31       	cpi	r24, 0x1F	; 31
     50a:	d9 f3       	breq	.-10     	; 0x502 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     50c:	80 91 41 01 	lds	r24, 0x0141
     510:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
     512:	11 f0       	breq	.+4      	; 0x518 <rf_power_up+0x16>
     514:	8f 30       	cpi	r24, 0x0F	; 15
     516:	51 f4       	brne	.+20     	; 0x52c <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
     518:	80 91 39 01 	lds	r24, 0x0139
     51c:	8d 7f       	andi	r24, 0xFD	; 253
     51e:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
     522:	80 91 41 01 	lds	r24, 0x0141
     526:	8f 71       	andi	r24, 0x1F	; 31
     528:	88 30       	cpi	r24, 0x08	; 8
     52a:	d9 f7       	brne	.-10     	; 0x522 <rf_power_up+0x20>
     52c:	08 95       	ret

0000052e <rf_pll_on>:
	TRX_STATE = cmd;
}

void rf_pll_on()
{
   rf_cmd(PLL_ON);
     52e:	89 e0       	ldi	r24, 0x09	; 9
     530:	0c 94 35 02 	jmp	0x46a	; 0x46a <rf_cmd>

00000534 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
     534:	e5 e4       	ldi	r30, 0x45	; 69
     536:	f1 e0       	ldi	r31, 0x01	; 1
     538:	90 81       	ld	r25, Z
     53a:	90 7f       	andi	r25, 0xF0	; 240
     53c:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
     53e:	90 81       	ld	r25, Z
     540:	8f 70       	andi	r24, 0x0F	; 15
     542:	98 2b       	or	r25, r24
     544:	90 83       	st	Z, r25
     546:	08 95       	ret

00000548 <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
     548:	e7 e5       	ldi	r30, 0x57	; 87
     54a:	f1 e0       	ldi	r31, 0x01	; 1
     54c:	80 81       	ld	r24, Z
     54e:	8d 7f       	andi	r24, 0xFD	; 253
     550:	80 83       	st	Z, r24
     552:	08 95       	ret

00000554 <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
     554:	e7 e5       	ldi	r30, 0x57	; 87
     556:	f1 e0       	ldi	r31, 0x01	; 1
     558:	80 81       	ld	r24, Z
     55a:	82 60       	ori	r24, 0x02	; 2
     55c:	80 83       	st	Z, r24
     55e:	08 95       	ret

00000560 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
     560:	ee e6       	ldi	r30, 0x6E	; 110
     562:	f1 e0       	ldi	r31, 0x01	; 1
     564:	80 81       	ld	r24, Z
     566:	8f 7e       	andi	r24, 0xEF	; 239
     568:	80 83       	st	Z, r24
     56a:	08 95       	ret

0000056c <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
     56c:	ee e6       	ldi	r30, 0x6E	; 110
     56e:	f1 e0       	ldi	r31, 0x01	; 1
     570:	80 81       	ld	r24, Z
     572:	80 61       	ori	r24, 0x10	; 16
     574:	80 83       	st	Z, r24
     576:	08 95       	ret

00000578 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
     578:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
     57c:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
     580:	90 93 c1 04 	sts	0x04C1, r25
     584:	80 93 c0 04 	sts	0x04C0, r24
     588:	08 95       	ret

0000058a <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
     58a:	90 93 bb 04 	sts	0x04BB, r25
     58e:	80 93 ba 04 	sts	0x04BA, r24
	PHY_CC_CCA &= ~(0x1F);
     592:	e8 e4       	ldi	r30, 0x48	; 72
     594:	f1 e0       	ldi	r31, 0x01	; 1
     596:	80 81       	ld	r24, Z
     598:	80 7e       	andi	r24, 0xE0	; 224
     59a:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
     59c:	80 81       	ld	r24, Z
     59e:	68 2b       	or	r22, r24
     5a0:	60 83       	st	Z, r22
     5a2:	08 95       	ret

000005a4 <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
     5a4:	90 93 96 03 	sts	0x0396, r25
     5a8:	80 93 95 03 	sts	0x0395, r24
     5ac:	08 95       	ret

000005ae <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
     5ae:	90 93 94 03 	sts	0x0394, r25
     5b2:	80 93 93 03 	sts	0x0393, r24
     5b6:	08 95       	ret

000005b8 <tx_start_callback>:
}

void tx_start_callback(void (*func)(uint16_t, uint8_t*)) {
	tx_start_func = func;
     5b8:	90 93 92 03 	sts	0x0392, r25
     5bc:	80 93 91 03 	sts	0x0391, r24
     5c0:	08 95       	ret

000005c2 <rf_init>:
}

void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	fc 01       	movw	r30, r24
     5cc:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
     5ce:	80 e2       	ldi	r24, 0x20	; 32
     5d0:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
     5d4:	80 ec       	ldi	r24, 0xC0	; 192
     5d6:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
     5da:	60 62       	ori	r22, 0x20	; 32
     5dc:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
     5e0:	85 ec       	ldi	r24, 0xC5	; 197
     5e2:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
     5e6:	87 ea       	ldi	r24, 0xA7	; 167
     5e8:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
     5ec:	80 e8       	ldi	r24, 0x80	; 128
     5ee:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
     5f2:	20 93 60 01 	sts	0x0160, r18
     5f6:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
     5fa:	40 93 62 01 	sts	0x0162, r20
     5fe:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     602:	c6 e4       	ldi	r28, 0x46	; 70
     604:	d1 e0       	ldi	r29, 0x01	; 1
     606:	08 81       	ld	r16, Y
     608:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     60a:	98 81       	ld	r25, Y
     60c:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     60e:	30 2f       	mov	r19, r16
     610:	32 95       	swap	r19
     612:	36 95       	lsr	r19
     614:	37 70       	andi	r19, 0x07	; 7
     616:	60 e4       	ldi	r22, 0x40	; 64
     618:	36 9f       	mul	r19, r22
     61a:	80 01       	movw	r16, r0
     61c:	11 24       	eor	r1, r1
     61e:	22 95       	swap	r18
     620:	26 95       	lsr	r18
     622:	23 70       	andi	r18, 0x03	; 3
     624:	62 2f       	mov	r22, r18
     626:	60 2b       	or	r22, r16
     628:	82 95       	swap	r24
     62a:	86 95       	lsr	r24
     62c:	83 70       	andi	r24, 0x03	; 3
     62e:	70 e1       	ldi	r23, 0x10	; 16
     630:	87 9f       	mul	r24, r23
     632:	90 01       	movw	r18, r0
     634:	11 24       	eor	r1, r1
     636:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     638:	92 95       	swap	r25
     63a:	96 95       	lsr	r25
     63c:	93 70       	andi	r25, 0x03	; 3
     63e:	84 e0       	ldi	r24, 0x04	; 4
     640:	98 9f       	mul	r25, r24
     642:	b0 01       	movw	r22, r0
     644:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     646:	62 2b       	or	r22, r18
     648:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     64c:	88 81       	ld	r24, Y
     64e:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     650:	92 95       	swap	r25
     652:	96 95       	lsr	r25
     654:	93 70       	andi	r25, 0x03	; 3
     656:	39 2f       	mov	r19, r25
     658:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     65a:	98 2f       	mov	r25, r24
     65c:	92 95       	swap	r25
     65e:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     660:	93 2b       	or	r25, r19
     662:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
     666:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
   
   /* Enable all radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
     66a:	8f ef       	ldi	r24, 0xFF	; 255
     66c:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
     670:	ca eb       	ldi	r28, 0xBA	; 186
     672:	d4 e0       	ldi	r29, 0x04	; 4
     674:	f9 83       	std	Y+1, r31	; 0x01
     676:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
     678:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
     67a:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
     67c:	5d 83       	std	Y+5, r21	; 0x05
     67e:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
     680:	bf 83       	std	Y+7, r27	; 0x07
     682:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
     684:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	80 93 d4 04 	sts	0x04D4, r24
   rx_ready = 0;
     68c:	10 92 ed 04 	sts	0x04ED, r1
   tx_done = 0;
     690:	10 92 c3 04 	sts	0x04C3, r1

	use_glossy = 0;
     694:	10 92 b7 04 	sts	0x04B7, r1

} // rf_init() 
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	1f 91       	pop	r17
     69e:	0f 91       	pop	r16
     6a0:	08 95       	ret

000006a2 <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
     6a2:	86 e1       	ldi	r24, 0x16	; 22
     6a4:	0c 94 35 02 	jmp	0x46a	; 0x46a <rf_cmd>

000006a8 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
     6a8:	86 e1       	ldi	r24, 0x16	; 22
     6aa:	0c 94 35 02 	jmp	0x46a	; 0x46a <rf_cmd>

000006ae <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
   rf_cmd(TRX_OFF);
     6ae:	88 e0       	ldi	r24, 0x08	; 8
     6b0:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>
   rx_ready = 0;
     6b4:	10 92 ed 04 	sts	0x04ED, r1
     6b8:	08 95       	ret

000006ba <rf_tx_packet>:
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------


uint8_t rf_tx_packet(RF_TX_INFO *pRTI)
{
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	ec 01       	movw	r28, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
     6c2:	80 91 d4 04 	lds	r24, 0x04D4
     6c6:	81 11       	cpse	r24, r1
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <rf_tx_packet+0x14>
		return NRK_ERROR;
     6ca:	8f ef       	ldi	r24, 0xFF	; 255
     6cc:	ba c0       	rjmp	.+372    	; 0x842 <rf_tx_packet+0x188>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
     6ce:	2e 81       	ldd	r18, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     6d0:	80 91 bc 04 	lds	r24, 0x04BC
     6d4:	8f 5f       	subi	r24, 0xFF	; 255
     6d6:	80 93 bc 04 	sts	0x04BC, r24
	machead->fcf = fcf;
     6da:	90 91 81 01 	lds	r25, 0x0181
     6de:	90 7e       	andi	r25, 0xE0	; 224
     6e0:	91 60       	ori	r25, 0x01	; 1
     6e2:	20 fb       	bst	r18, 0
     6e4:	95 f9       	bld	r25, 5
     6e6:	9f 73       	andi	r25, 0x3F	; 63
     6e8:	90 64       	ori	r25, 0x40	; 64
     6ea:	90 93 81 01 	sts	0x0181, r25
     6ee:	88 e8       	ldi	r24, 0x88	; 136
     6f0:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
     6f4:	80 91 b7 04 	lds	r24, 0x04B7
     6f8:	88 23       	and	r24, r24
     6fa:	61 f0       	breq	.+24     	; 0x714 <rf_tx_packet+0x5a>
		machead->seq_num = 0xFF;
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
     702:	8a ea       	ldi	r24, 0xAA	; 170
     704:	9a ea       	ldi	r25, 0xAA	; 170
     706:	90 93 89 01 	sts	0x0189, r25
     70a:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
     70e:	8f ef       	ldi	r24, 0xFF	; 255
     710:	9f ef       	ldi	r25, 0xFF	; 255
     712:	10 c0       	rjmp	.+32     	; 0x734 <rf_tx_packet+0x7a>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
     714:	80 91 bc 04 	lds	r24, 0x04BC
     718:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
     71c:	20 91 61 01 	lds	r18, 0x0161
     720:	80 91 60 01 	lds	r24, 0x0160
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	92 2b       	or	r25, r18
     728:	90 93 89 01 	sts	0x0189, r25
     72c:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = pRTI->destAddr;
     730:	88 81       	ld	r24, Y
     732:	99 81       	ldd	r25, Y+1	; 0x01
     734:	90 93 87 01 	sts	0x0187, r25
     738:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
     73c:	20 91 63 01 	lds	r18, 0x0163
     740:	80 91 62 01 	lds	r24, 0x0162
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	92 2b       	or	r25, r18
     748:	90 93 85 01 	sts	0x0185, r25
     74c:	80 93 84 01 	sts	0x0184, r24
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
     750:	4a 81       	ldd	r20, Y+2	; 0x02
     752:	55 27       	eor	r21, r21
     754:	47 fd       	sbrc	r20, 7
     756:	50 95       	com	r21
     758:	6b 81       	ldd	r22, Y+3	; 0x03
     75a:	7c 81       	ldd	r23, Y+4	; 0x04
     75c:	8a e8       	ldi	r24, 0x8A	; 138
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
     764:	8a 81       	ldd	r24, Y+2	; 0x02
     766:	85 5f       	subi	r24, 0xF5	; 245
     768:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     76c:	80 91 41 01 	lds	r24, 0x0141
     770:	18 2f       	mov	r17, r24
     772:	1f 71       	andi	r17, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     774:	9f ef       	ldi	r25, 0xFF	; 255
     776:	91 0f       	add	r25, r17
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     778:	92 30       	cpi	r25, 0x02	; 2
     77a:	c0 f3       	brcs	.-16     	; 0x76c <rf_tx_packet+0xb2>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     77c:	11 31       	cpi	r17, 0x11	; 17
     77e:	b1 f3       	breq	.-20     	; 0x76c <rf_tx_packet+0xb2>
     780:	12 31       	cpi	r17, 0x12	; 18
     782:	a1 f3       	breq	.-24     	; 0x76c <rf_tx_packet+0xb2>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     784:	1f 31       	cpi	r17, 0x1F	; 31
     786:	91 f3       	breq	.-28     	; 0x76c <rf_tx_packet+0xb2>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     788:	98 ef       	ldi	r25, 0xF8	; 248
     78a:	91 0f       	add	r25, r17
     78c:	92 30       	cpi	r25, 0x02	; 2
     78e:	20 f0       	brcs	.+8      	; 0x798 <rf_tx_packet+0xde>
     790:	8f 70       	andi	r24, 0x0F	; 15
     792:	86 30       	cpi	r24, 0x06	; 6
     794:	09 f0       	breq	.+2      	; 0x798 <rf_tx_packet+0xde>
     796:	99 cf       	rjmp	.-206    	; 0x6ca <rf_tx_packet+0x10>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
     798:	86 e1       	ldi	r24, 0x16	; 22
     79a:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
     79e:	8d 81       	ldd	r24, Y+5	; 0x05
     7a0:	81 11       	cpse	r24, r1
     7a2:	0a c0       	rjmp	.+20     	; 0x7b8 <rf_tx_packet+0xfe>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
     7a4:	89 e0       	ldi	r24, 0x09	; 9
     7a6:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>
	if(pRTI->ackRequest)
     7aa:	8e 81       	ldd	r24, Y+6	; 0x06
     7ac:	88 23       	and	r24, r24
     7ae:	91 f0       	breq	.+36     	; 0x7d4 <rf_tx_packet+0x11a>
		rf_cmd(TX_ARET_ON);
     7b0:	89 e1       	ldi	r24, 0x19	; 25
     7b2:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>
     7b6:	0e c0       	rjmp	.+28     	; 0x7d4 <rf_tx_packet+0x11a>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
     7b8:	80 91 48 01 	lds	r24, 0x0148
     7bc:	80 68       	ori	r24, 0x80	; 128
     7be:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
     7c2:	80 91 41 01 	lds	r24, 0x0141
     7c6:	87 ff       	sbrs	r24, 7
     7c8:	fc cf       	rjmp	.-8      	; 0x7c2 <rf_tx_packet+0x108>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
     7ca:	80 91 41 01 	lds	r24, 0x0141
     7ce:	86 ff       	sbrs	r24, 6
     7d0:	7c cf       	rjmp	.-264    	; 0x6ca <rf_tx_packet+0x10>
     7d2:	e8 cf       	rjmp	.-48     	; 0x7a4 <rf_tx_packet+0xea>
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

	// set arguments for calling tx_start_func
	if (tx_start_func) {
     7d4:	80 91 91 03 	lds	r24, 0x0391
     7d8:	90 91 92 03 	lds	r25, 0x0392
     7dc:	89 2b       	or	r24, r25
     7de:	71 f0       	breq	.+28     	; 0x7fc <rf_tx_packet+0x142>
		tx_len = pRTI->length;
     7e0:	8a 81       	ldd	r24, Y+2	; 0x02
     7e2:	99 27       	eor	r25, r25
     7e4:	87 fd       	sbrc	r24, 7
     7e6:	90 95       	com	r25
     7e8:	90 93 ec 04 	sts	0x04EC, r25
     7ec:	80 93 eb 04 	sts	0x04EB, r24
		tx_buf = data_start;
     7f0:	8a e8       	ldi	r24, 0x8A	; 138
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	90 93 01 02 	sts	0x0201, r25
     7f8:	80 93 00 02 	sts	0x0200, r24
	}

   tx_done = 0;
     7fc:	10 92 c3 04 	sts	0x04C3, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>
   for(i=0; (i<65000) && !tx_done; i++){
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	20 91 c3 04 	lds	r18, 0x04C3
     80e:	21 11       	cpse	r18, r1
     810:	05 c0       	rjmp	.+10     	; 0x81c <rf_tx_packet+0x162>
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	88 3e       	cpi	r24, 0xE8	; 232
     816:	2d ef       	ldi	r18, 0xFD	; 253
     818:	92 07       	cpc	r25, r18
     81a:	b9 f7       	brne	.-18     	; 0x80a <rf_tx_packet+0x150>
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     81c:	2e 81       	ldd	r18, Y+6	; 0x06
     81e:	22 23       	and	r18, r18
     820:	31 f0       	breq	.+12     	; 0x82e <rf_tx_packet+0x174>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
     822:	20 91 42 01 	lds	r18, 0x0142
     826:	22 95       	swap	r18
     828:	26 95       	lsr	r18
     82a:	27 70       	andi	r18, 0x07	; 7
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     82c:	29 f4       	brne	.+10     	; 0x838 <rf_tx_packet+0x17e>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
     82e:	88 3e       	cpi	r24, 0xE8	; 232
     830:	9d 4f       	sbci	r25, 0xFD	; 253
     832:	11 f0       	breq	.+4      	; 0x838 <rf_tx_packet+0x17e>
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     834:	c1 e0       	ldi	r28, 0x01	; 1
     836:	01 c0       	rjmp	.+2      	; 0x83a <rf_tx_packet+0x180>
     838:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
     83a:	81 2f       	mov	r24, r17
     83c:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
     840:	8c 2f       	mov	r24, r28
}
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	08 95       	ret

0000084a <rf_tx_pkt_blocking>:

uint8_t rf_tx_pkt_blocking(RF_TX_INFO *pRTI)
{
	uint16_t count = 0;
	rf_tx_packet(pRTI);
     84a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <rf_tx_packet>
	while (!tx_done){
     84e:	89 e8       	ldi	r24, 0x89	; 137
     850:	93 e1       	ldi	r25, 0x13	; 19
     852:	20 91 c3 04 	lds	r18, 0x04C3
     856:	21 11       	cpse	r18, r1
     858:	04 c0       	rjmp	.+8      	; 0x862 <rf_tx_pkt_blocking+0x18>
     85a:	01 97       	sbiw	r24, 0x01	; 1
		count += 1;
		if (count > 5000)//~1ms timeout
     85c:	d1 f7       	brne	.-12     	; 0x852 <rf_tx_pkt_blocking+0x8>
			return NRK_ERROR;
     85e:	8f ef       	ldi	r24, 0xFF	; 255
	}
	return NRK_OK;
}
     860:	08 95       	ret
	while (!tx_done){
		count += 1;
		if (count > 5000)//~1ms timeout
			return NRK_ERROR;
	}
	return NRK_OK;
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	08 95       	ret

00000866 <rf_tx_packet_resend>:
uint8_t rf_tx_packet_resend()
{
   uint8_t trx_error;
   uint16_t i;

   tx_done = 0;
     866:	10 92 c3 04 	sts	0x04C3, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
     86a:	82 e0       	ldi	r24, 0x02	; 2
     86c:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>
     870:	88 ee       	ldi	r24, 0xE8	; 232
     872:	9d ef       	ldi	r25, 0xFD	; 253
   for(i=0; (i<65000) && !tx_done; i++)
     874:	20 91 c3 04 	lds	r18, 0x04C3
     878:	21 11       	cpse	r18, r1
     87a:	04 c0       	rjmp	.+8      	; 0x884 <rf_tx_packet_resend+0x1e>
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	d1 f7       	brne	.-12     	; 0x874 <rf_tx_packet_resend+0xe>
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
     880:	8f ef       	ldi	r24, 0xFF	; 255

   return trx_error;
}
     882:	08 95       	ret
   tx_done = 0;
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
   for(i=0; (i<65000) && !tx_done; i++)
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	08 95       	ret

00000888 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
     88c:	80 91 d4 04 	lds	r24, 0x04D4
     890:	88 23       	and	r24, r24
     892:	41 f1       	breq	.+80     	; 0x8e4 <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     894:	80 91 41 01 	lds	r24, 0x0141
     898:	c8 2f       	mov	r28, r24
     89a:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     89c:	9f ef       	ldi	r25, 0xFF	; 255
     89e:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     8a0:	92 30       	cpi	r25, 0x02	; 2
     8a2:	c0 f3       	brcs	.-16     	; 0x894 <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     8a4:	c1 31       	cpi	r28, 0x11	; 17
     8a6:	b1 f3       	breq	.-20     	; 0x894 <rf_cca_check+0xc>
     8a8:	c2 31       	cpi	r28, 0x12	; 18
     8aa:	a1 f3       	breq	.-24     	; 0x894 <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     8ac:	cf 31       	cpi	r28, 0x1F	; 31
     8ae:	91 f3       	breq	.-28     	; 0x894 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     8b0:	c8 30       	cpi	r28, 0x08	; 8
     8b2:	19 f0       	breq	.+6      	; 0x8ba <rf_cca_check+0x32>
     8b4:	8f 70       	andi	r24, 0x0F	; 15
     8b6:	86 30       	cpi	r24, 0x06	; 6
     8b8:	a9 f4       	brne	.+42     	; 0x8e4 <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
     8ba:	86 e1       	ldi	r24, 0x16	; 22
     8bc:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
     8c0:	80 91 48 01 	lds	r24, 0x0148
     8c4:	80 68       	ori	r24, 0x80	; 128
     8c6:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
     8ca:	80 91 41 01 	lds	r24, 0x0141
     8ce:	87 ff       	sbrs	r24, 7
     8d0:	fc cf       	rjmp	.-8      	; 0x8ca <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     8d2:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
     8d6:	8c 2f       	mov	r24, r28
     8d8:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     8dc:	d6 fb       	bst	r29, 6
     8de:	88 27       	eor	r24, r24
     8e0:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
     8e2:	01 c0       	rjmp	.+2      	; 0x8e6 <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
     8e4:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready){
     8ec:	80 91 d4 04 	lds	r24, 0x04D4
     8f0:	81 11       	cpse	r24, r1
     8f2:	03 c0       	rjmp	.+6      	; 0x8fa <rf_rx_packet_nonblock+0xe>
		printf("rf not ready\r\n");
     8f4:	81 e7       	ldi	r24, 0x71	; 113
     8f6:	92 e0       	ldi	r25, 0x02	; 2
     8f8:	1b c0       	rjmp	.+54     	; 0x930 <rf_rx_packet_nonblock+0x44>
		return NRK_ERROR;
	}
   if(!rx_ready){
     8fa:	80 91 ed 04 	lds	r24, 0x04ED
     8fe:	81 11       	cpse	r24, r1
     900:	06 c0       	rjmp	.+12     	; 0x90e <rf_rx_packet_nonblock+0x22>
	   printf("rx not ready\r\n");
     902:	8f e7       	ldi	r24, 0x7F	; 127
     904:	92 e0       	ldi	r25, 0x02	; 2
     906:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <puts>
      return 0;
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	08 95       	ret
   }
   else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length){
     90e:	80 91 7b 01 	lds	r24, 0x017B
     912:	e0 91 ba 04 	lds	r30, 0x04BA
     916:	f0 91 bb 04 	lds	r31, 0x04BB
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	02 97       	sbiw	r24, 0x02	; 2
     91e:	24 81       	ldd	r18, Z+4	; 0x04
     920:	33 27       	eor	r19, r19
     922:	27 fd       	sbrc	r18, 7
     924:	30 95       	com	r19
     926:	28 17       	cp	r18, r24
     928:	39 07       	cpc	r19, r25
     92a:	34 f4       	brge	.+12     	; 0x938 <rf_rx_packet_nonblock+0x4c>
	   	printf("length too great\r\n");
     92c:	8d e8       	ldi	r24, 0x8D	; 141
     92e:	92 e0       	ldi	r25, 0x02	; 2
     930:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <puts>
		return NRK_ERROR;
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	08 95       	ret
	}

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
     938:	e0 91 ba 04 	lds	r30, 0x04BA
     93c:	f0 91 bb 04 	lds	r31, 0x04BB
     940:	80 91 82 01 	lds	r24, 0x0182
     944:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
     946:	e0 91 ba 04 	lds	r30, 0x04BA
     94a:	f0 91 bb 04 	lds	r31, 0x04BB
     94e:	80 91 87 01 	lds	r24, 0x0187
     952:	90 91 88 01 	lds	r25, 0x0188
     956:	92 83       	std	Z+2, r25	; 0x02
     958:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
     95a:	e0 91 ba 04 	lds	r30, 0x04BA
     95e:	f0 91 bb 04 	lds	r31, 0x04BB
     962:	80 91 7b 01 	lds	r24, 0x017B
     966:	8b 50       	subi	r24, 0x0B	; 11
     968:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
     96a:	a0 91 ba 04 	lds	r26, 0x04BA
     96e:	b0 91 bb 04 	lds	r27, 0x04BB
     972:	e0 91 ba 04 	lds	r30, 0x04BA
     976:	f0 91 bb 04 	lds	r31, 0x04BB
     97a:	13 96       	adiw	r26, 0x03	; 3
     97c:	9c 91       	ld	r25, X
     97e:	84 81       	ldd	r24, Z+4	; 0x04
     980:	89 17       	cp	r24, r25
     982:	3c f0       	brlt	.+14     	; 0x992 <rf_rx_packet_nonblock+0xa6>
			|| (rfSettings.pRxInfo->length < 0)){
     984:	e0 91 ba 04 	lds	r30, 0x04BA
     988:	f0 91 bb 04 	lds	r31, 0x04BB
     98c:	83 81       	ldd	r24, Z+3	; 0x03
     98e:	87 ff       	sbrs	r24, 7
     990:	0f c0       	rjmp	.+30     	; 0x9b0 <rf_rx_packet_nonblock+0xc4>
		rx_ready = 0;
     992:	10 92 ed 04 	sts	0x04ED, r1
      	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     996:	80 91 4c 01 	lds	r24, 0x014C
     99a:	8f 77       	andi	r24, 0x7F	; 127
     99c:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     9a0:	80 91 4c 01 	lds	r24, 0x014C
     9a4:	80 68       	ori	r24, 0x80	; 128
     9a6:	80 93 4c 01 	sts	0x014C, r24
		printf("incorrect length setting in rf settings\r\n");
     9aa:	8f e9       	ldi	r24, 0x9F	; 159
     9ac:	92 e0       	ldi	r25, 0x02	; 2
     9ae:	c0 cf       	rjmp	.-128    	; 0x930 <rf_rx_packet_nonblock+0x44>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
     9b0:	a0 91 ba 04 	lds	r26, 0x04BA
     9b4:	b0 91 bb 04 	lds	r27, 0x04BB
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		printf("incorrect length setting in rf settings\r\n");
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
     9b8:	e0 91 ba 04 	lds	r30, 0x04BA
     9bc:	f0 91 bb 04 	lds	r31, 0x04BB
     9c0:	13 96       	adiw	r26, 0x03	; 3
     9c2:	4c 91       	ld	r20, X
     9c4:	55 27       	eor	r21, r21
     9c6:	47 fd       	sbrc	r20, 7
     9c8:	50 95       	com	r21
     9ca:	69 e8       	ldi	r22, 0x89	; 137
     9cc:	71 e0       	ldi	r23, 0x01	; 1
     9ce:	85 81       	ldd	r24, Z+5	; 0x05
     9d0:	96 81       	ldd	r25, Z+6	; 0x06
     9d2:	0e 94 7a 25 	call	0x4af4	; 0x4af4 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);

   /* if reset packet received, perform reset */
   if(wireless_prog && (rfSettings.pRxInfo->length == 16)){
     9d6:	80 91 90 03 	lds	r24, 0x0390
     9da:	88 23       	and	r24, r24
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <rf_rx_packet_nonblock+0xf4>
     9de:	3e c0       	rjmp	.+124    	; 0xa5c <rf_rx_packet_nonblock+0x170>
     9e0:	e0 91 ba 04 	lds	r30, 0x04BA
     9e4:	f0 91 bb 04 	lds	r31, 0x04BB
     9e8:	83 81       	ldd	r24, Z+3	; 0x03
     9ea:	80 31       	cpi	r24, 0x10	; 16
     9ec:	b9 f5       	brne	.+110    	; 0xa5c <rf_rx_packet_nonblock+0x170>
      if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 4) == 0){
     9ee:	e0 91 ba 04 	lds	r30, 0x04BA
     9f2:	f0 91 bb 04 	lds	r31, 0x04BB
     9f6:	65 81       	ldd	r22, Z+5	; 0x05
     9f8:	76 81       	ldd	r23, Z+6	; 0x06
     9fa:	44 e0       	ldi	r20, 0x04	; 4
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	0e 94 83 25 	call	0x4b06	; 0x4b06 <strncmp>
     a06:	89 2b       	or	r24, r25
     a08:	49 f5       	brne	.+82     	; 0xa5c <rf_rx_packet_nonblock+0x170>
         if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 16) == 0){
     a0a:	e0 91 ba 04 	lds	r30, 0x04BA
     a0e:	f0 91 bb 04 	lds	r31, 0x04BB
     a12:	65 81       	ldd	r22, Z+5	; 0x05
     a14:	76 81       	ldd	r23, Z+6	; 0x06
     a16:	40 e1       	ldi	r20, 0x10	; 16
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	0e 94 83 25 	call	0x4b06	; 0x4b06 <strncmp>
     a22:	89 2b       	or	r24, r25
     a24:	d9 f4       	brne	.+54     	; 0xa5c <rf_rx_packet_nonblock+0x170>
            wdt_enable(WDTO_500MS);
     a26:	9d e0       	ldi	r25, 0x0D	; 13
     a28:	88 e1       	ldi	r24, 0x18	; 24
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	a8 95       	wdr
     a30:	80 93 60 00 	sts	0x0060, r24
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	90 93 60 00 	sts	0x0060, r25
            nrk_led_set(0);
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nrk_led_set>
            nrk_led_set(1);
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nrk_led_set>
            nrk_led_set(2);
     a4a:	82 e0       	ldi	r24, 0x02	; 2
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nrk_led_set>
            nrk_led_set(3);
     a52:	83 e0       	ldi	r24, 0x03	; 3
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nrk_led_set>
            while(1)
               continue;
     a5a:	ff cf       	rjmp	.-2      	; 0xa5a <rf_rx_packet_nonblock+0x16e>
      }
   }

	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
     a5c:	e0 91 ba 04 	lds	r30, 0x04BA
     a60:	f0 91 bb 04 	lds	r31, 0x04BB
     a64:	80 91 80 01 	lds	r24, 0x0180
     a68:	85 fb       	bst	r24, 5
     a6a:	88 27       	eor	r24, r24
     a6c:	80 f9       	bld	r24, 0
     a6e:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
     a70:	e0 91 ba 04 	lds	r30, 0x04BA
     a74:	f0 91 bb 04 	lds	r31, 0x04BB
     a78:	80 91 47 01 	lds	r24, 0x0147
     a7c:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
     a7e:	e0 91 ba 04 	lds	r30, 0x04BA
     a82:	f0 91 bb 04 	lds	r31, 0x04BB
     a86:	80 91 46 01 	lds	r24, 0x0146
     a8a:	86 95       	lsr	r24
     a8c:	86 95       	lsr	r24
     a8e:	86 95       	lsr	r24
     a90:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
     a92:	e0 91 ba 04 	lds	r30, 0x04BA
     a96:	f0 91 bb 04 	lds	r31, 0x04BB
     a9a:	80 91 47 01 	lds	r24, 0x0147
     a9e:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
     aa0:	a0 91 ba 04 	lds	r26, 0x04BA
     aa4:	b0 91 bb 04 	lds	r27, 0x04BB
     aa8:	e0 91 7b 01 	lds	r30, 0x017B
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	e0 58       	subi	r30, 0x80	; 128
     ab0:	fe 4f       	sbci	r31, 0xFE	; 254
     ab2:	80 81       	ld	r24, Z
     ab4:	1b 96       	adiw	r26, 0x0b	; 11
     ab6:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
     ab8:	10 92 ed 04 	sts	0x04ED, r1
   TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     abc:	80 91 4c 01 	lds	r24, 0x014C
     ac0:	8f 77       	andi	r24, 0x7F	; 127
     ac2:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     ac6:	80 91 4c 01 	lds	r24, 0x014C
     aca:	80 68       	ori	r24, 0x80	; 128
     acc:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
}
     ad2:	08 95       	ret

00000ad4 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	0f 92       	push	r0
     adc:	11 24       	eor	r1, r1
     ade:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
     ae0:	80 e8       	ldi	r24, 0x80	; 128
     ae2:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     ae6:	8f 91       	pop	r24
     ae8:	0f 90       	pop	r0
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	0f 90       	pop	r0
     aee:	1f 90       	pop	r1
     af0:	18 95       	reti

00000af2 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
     af2:	1f 92       	push	r1
     af4:	0f 92       	push	r0
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	0f 92       	push	r0
     afa:	11 24       	eor	r1, r1
     afc:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	80 93 c3 04 	sts	0x04C3, r24
   IRQ_STATUS = (1 << TX_END);
     b04:	80 e4       	ldi	r24, 0x40	; 64
     b06:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
     b0a:	8f 91       	pop	r24
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	0f 90       	pop	r0
     b12:	1f 90       	pop	r1
     b14:	18 95       	reti

00000b16 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
     b16:	1f 92       	push	r1
     b18:	0f 92       	push	r0
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	0f 92       	push	r0
     b1e:	11 24       	eor	r1, r1
     b20:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
     b22:	80 e2       	ldi	r24, 0x20	; 32
     b24:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     b28:	8f 91       	pop	r24
     b2a:	0f 90       	pop	r0
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	0f 90       	pop	r0
     b30:	1f 90       	pop	r1
     b32:	18 95       	reti

00000b34 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
     b34:	1f 92       	push	r1
     b36:	0f 92       	push	r0
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	0f 92       	push	r0
     b3c:	11 24       	eor	r1, r1
     b3e:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
     b40:	80 e1       	ldi	r24, 0x10	; 16
     b42:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     b46:	8f 91       	pop	r24
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	0f 90       	pop	r0
     b4e:	1f 90       	pop	r1
     b50:	18 95       	reti

00000b52 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
     b52:	1f 92       	push	r1
     b54:	0f 92       	push	r0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	0f 92       	push	r0
     b5a:	11 24       	eor	r1, r1
     b5c:	0b b6       	in	r0, 0x3b	; 59
     b5e:	0f 92       	push	r0
     b60:	2f 93       	push	r18
     b62:	3f 93       	push	r19
     b64:	4f 93       	push	r20
     b66:	5f 93       	push	r21
     b68:	6f 93       	push	r22
     b6a:	7f 93       	push	r23
     b6c:	8f 93       	push	r24
     b6e:	9f 93       	push	r25
     b70:	af 93       	push	r26
     b72:	bf 93       	push	r27
     b74:	ef 93       	push	r30
     b76:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
     b78:	84 e0       	ldi	r24, 0x04	; 4
     b7a:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
     b7e:	e0 91 95 03 	lds	r30, 0x0395
     b82:	f0 91 96 03 	lds	r31, 0x0396
     b86:	30 97       	sbiw	r30, 0x00	; 0
     b88:	09 f0       	breq	.+2      	; 0xb8c <__vector_59+0x3a>
		rx_start_func();
     b8a:	09 95       	icall

	return;
}
     b8c:	ff 91       	pop	r31
     b8e:	ef 91       	pop	r30
     b90:	bf 91       	pop	r27
     b92:	af 91       	pop	r26
     b94:	9f 91       	pop	r25
     b96:	8f 91       	pop	r24
     b98:	7f 91       	pop	r23
     b9a:	6f 91       	pop	r22
     b9c:	5f 91       	pop	r21
     b9e:	4f 91       	pop	r20
     ba0:	3f 91       	pop	r19
     ba2:	2f 91       	pop	r18
     ba4:	0f 90       	pop	r0
     ba6:	0b be       	out	0x3b, r0	; 59
     ba8:	0f 90       	pop	r0
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	0f 90       	pop	r0
     bae:	1f 90       	pop	r1
     bb0:	18 95       	reti

00000bb2 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
     bb2:	1f 92       	push	r1
     bb4:	0f 92       	push	r0
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	0f 92       	push	r0
     bba:	11 24       	eor	r1, r1
     bbc:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
     bbe:	82 e0       	ldi	r24, 0x02	; 2
     bc0:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     bc4:	8f 91       	pop	r24
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f 90       	pop	r0
     bcc:	1f 90       	pop	r1
     bce:	18 95       	reti

00000bd0 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	0f 92       	push	r0
     bd8:	11 24       	eor	r1, r1
     bda:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     be2:	8f 91       	pop	r24
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f 90       	pop	r0
     bea:	1f 90       	pop	r1
     bec:	18 95       	reti

00000bee <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
     bee:	e9 e4       	ldi	r30, 0x49	; 73
     bf0:	f1 e0       	ldi	r31, 0x01	; 1
     bf2:	90 81       	ld	r25, Z
     bf4:	90 7f       	andi	r25, 0xF0	; 240
     bf6:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
     bf8:	90 81       	ld	r25, Z
     bfa:	8f 70       	andi	r24, 0x0F	; 15
     bfc:	98 2b       	or	r25, r24
     bfe:	90 83       	st	Z, r25
     c00:	08 95       	ret

00000c02 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
     c02:	8f ef       	ldi	r24, 0xFF	; 255
     c04:	08 95       	ret

00000c06 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
     c06:	08 95       	ret

00000c08 <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
     c08:	08 95       	ret

00000c0a <rf_security_disable>:
}



void rf_security_disable()
{
     c0a:	08 95       	ret

00000c0c <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	08 95       	ret

00000c10 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
     c10:	80 91 b5 04 	lds	r24, 0x04B5
     c14:	90 91 b6 04 	lds	r25, 0x04B6
     c18:	08 95       	ret

00000c1a <rf_flush_rx_fifo>:



inline void rf_flush_rx_fifo()
{
     c1a:	08 95       	ret

00000c1c <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	08 95       	ret

00000c20 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	08 95       	ret

00000c24 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	08 95       	ret

00000c28 <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
     c28:	08 95       	ret

00000c2a <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
     c2a:	08 95       	ret

00000c2c <rf_test_mode>:
}



void rf_test_mode()
{
     c2c:	08 95       	ret

00000c2e <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
     c2e:	08 95       	ret

00000c30 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
     c30:	08 95       	ret

00000c32 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
     c32:	08 95       	ret

00000c34 <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
     c34:	08 95       	ret

00000c36 <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
     c36:	08 95       	ret

00000c38 <rf_cc2591_tx_on>:
	PORTG	|= 0x1;
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	
	DDRG	&= ~(0x1);  // Set RXTX as input
     c38:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
     c3a:	8d b1       	in	r24, 0x0d	; 13
     c3c:	80 6e       	ori	r24, 0xE0	; 224
     c3e:	8d b9       	out	0x0d, r24	; 13
	// PAEN=1  EN=0  HGM=x RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0xA0;
     c40:	8e b1       	in	r24, 0x0e	; 14
     c42:	80 6a       	ori	r24, 0xA0	; 160
     c44:	8e b9       	out	0x0e, r24	; 14
     c46:	08 95       	ret

00000c48 <rf_cc2591_rx_on>:
	DDRG	|= 0x1;
	PORTG	&= ~(0x1);
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	DDRG	&= ~(0x1);  // Set RXTX as input
     c48:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
     c4a:	8d b1       	in	r24, 0x0d	; 13
     c4c:	80 6e       	ori	r24, 0xE0	; 224
     c4e:	8d b9       	out	0x0d, r24	; 13
	// PAEN=0  EN=1  HGM=1 RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0x60;
     c50:	8e b1       	in	r24, 0x0e	; 14
     c52:	80 66       	ori	r24, 0x60	; 96
     c54:	8e b9       	out	0x0e, r24	; 14
     c56:	08 95       	ret

00000c58 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
     c58:	cf 92       	push	r12
     c5a:	df 92       	push	r13
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	27 97       	sbiw	r28, 0x07	; 7
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	f8 94       	cli
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
     c78:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
     c7c:	e0 91 ba 04 	lds	r30, 0x04BA
     c80:	f0 91 bb 04 	lds	r31, 0x04BB
     c84:	c0 80       	ld	r12, Z
     c86:	d3 80       	ldd	r13, Z+3	; 0x03
     c88:	e5 80       	ldd	r14, Z+5	; 0x05
     c8a:	f6 80       	ldd	r15, Z+6	; 0x06
     c8c:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
     c8e:	0e 94 76 04 	call	0x8ec	; 0x8ec <rf_rx_packet_nonblock>
	if (err < 1) {
     c92:	18 16       	cp	r1, r24
     c94:	1c f0       	brlt	.+6      	; 0xc9c <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
     c96:	88 ec       	ldi	r24, 0xC8	; 200
     c98:	92 e0       	ldi	r25, 0x02	; 2
     c9a:	06 c0       	rjmp	.+12     	; 0xca8 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
     c9c:	f7 01       	movw	r30, r14
     c9e:	10 81       	ld	r17, Z
	if (ttl == 0) {
     ca0:	11 11       	cpse	r17, r1
     ca2:	07 c0       	rjmp	.+14     	; 0xcb2 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
     ca4:	87 ee       	ldi	r24, 0xE7	; 231
     ca6:	92 e0       	ldi	r25, 0x02	; 2
     ca8:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <puts>
#endif
		nrk_int_enable();
     cac:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nrk_int_enable>
		return;
     cb0:	31 c0       	rjmp	.+98     	; 0xd14 <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
     cb2:	15 30       	cpi	r17, 0x05	; 5
     cb4:	21 f4       	brne	.+8      	; 0xcbe <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
     cb6:	8a e0       	ldi	r24, 0x0A	; 10
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 28 26 	call	0x4c50	; 0x4c50 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
     cbe:	c7 01       	movw	r24, r14
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	9f 93       	push	r25
     cc4:	8f 93       	push	r24
     cc6:	80 2f       	mov	r24, r16
     cc8:	99 27       	eor	r25, r25
     cca:	87 fd       	sbrc	r24, 7
     ccc:	90 95       	com	r25
     cce:	9f 93       	push	r25
     cd0:	0f 93       	push	r16
     cd2:	1f 92       	push	r1
     cd4:	1f 93       	push	r17
     cd6:	1f 92       	push	r1
     cd8:	cf 92       	push	r12
     cda:	89 e0       	ldi	r24, 0x09	; 9
     cdc:	93 e0       	ldi	r25, 0x03	; 3
     cde:	9f 93       	push	r25
     ce0:	8f 93       	push	r24
     ce2:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
     ce6:	fd 82       	std	Y+5, r15	; 0x05
     ce8:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
     cea:	11 50       	subi	r17, 0x01	; 1
     cec:	f7 01       	movw	r30, r14
     cee:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
     cf0:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
     cf2:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
     cf4:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	9f ef       	ldi	r25, 0xFF	; 255
     cfa:	9a 83       	std	Y+2, r25	; 0x02
     cfc:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
     cfe:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
     d02:	ce 01       	movw	r24, r28
     d04:	01 96       	adiw	r24, 0x01	; 1
     d06:	0e 94 5d 03 	call	0x6ba	; 0x6ba <rf_tx_packet>
#endif
	return;
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
}
     d14:	27 96       	adiw	r28, 0x07	; 7
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	ff 90       	pop	r15
     d2a:	ef 90       	pop	r14
     d2c:	df 90       	pop	r13
     d2e:	cf 90       	pop	r12
     d30:	08 95       	ret

00000d32 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
     d32:	1f 92       	push	r1
     d34:	0f 92       	push	r0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	0f 92       	push	r0
     d3a:	11 24       	eor	r1, r1
     d3c:	0b b6       	in	r0, 0x3b	; 59
     d3e:	0f 92       	push	r0
     d40:	2f 93       	push	r18
     d42:	3f 93       	push	r19
     d44:	4f 93       	push	r20
     d46:	5f 93       	push	r21
     d48:	6f 93       	push	r22
     d4a:	7f 93       	push	r23
     d4c:	8f 93       	push	r24
     d4e:	9f 93       	push	r25
     d50:	af 93       	push	r26
     d52:	bf 93       	push	r27
     d54:	ef 93       	push	r30
     d56:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 91 7b 01 	lds	r25, 0x017B
     d5e:	89 17       	cp	r24, r25
     d60:	10 f4       	brcc	.+4      	; 0xd66 <__vector_60+0x34>
     d62:	8f 5f       	subi	r24, 0xFF	; 255
     d64:	fa cf       	rjmp	.-12     	; 0xd5a <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

   if((PHY_RSSI >> RX_CRC_VALID) & 0x1){
     d66:	80 91 46 01 	lds	r24, 0x0146
     d6a:	87 ff       	sbrs	r24, 7
     d6c:	04 c0       	rjmp	.+8      	; 0xd76 <__vector_60+0x44>
      rx_ready = 1;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	80 93 ed 04 	sts	0x04ED, r24
     d74:	04 c0       	rjmp	.+8      	; 0xd7e <__vector_60+0x4c>
   } else {
      printf("RX end failed checksum!\r\n");
     d76:	82 e3       	ldi	r24, 0x32	; 50
     d78:	93 e0       	ldi	r25, 0x03	; 3
     d7a:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <puts>
   }
   IRQ_STATUS = (1 << RX_END);
     d7e:	88 e0       	ldi	r24, 0x08	; 8
     d80:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
     d84:	80 91 46 01 	lds	r24, 0x0146
     d88:	87 ff       	sbrs	r24, 7
     d8a:	05 c0       	rjmp	.+10     	; 0xd96 <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
     d8c:	80 91 b7 04 	lds	r24, 0x04B7
     d90:	81 11       	cpse	r24, r1
     d92:	0e 94 2c 06 	call	0xc58	; 0xc58 <rf_glossy_interrupt>
	}

	if(rx_end_func)
     d96:	e0 91 93 03 	lds	r30, 0x0393
     d9a:	f0 91 94 03 	lds	r31, 0x0394
     d9e:	30 97       	sbiw	r30, 0x00	; 0
     da0:	09 f0       	breq	.+2      	; 0xda4 <__vector_60+0x72>
		rx_end_func();
     da2:	09 95       	icall

	return;
}
     da4:	ff 91       	pop	r31
     da6:	ef 91       	pop	r30
     da8:	bf 91       	pop	r27
     daa:	af 91       	pop	r26
     dac:	9f 91       	pop	r25
     dae:	8f 91       	pop	r24
     db0:	7f 91       	pop	r23
     db2:	6f 91       	pop	r22
     db4:	5f 91       	pop	r21
     db6:	4f 91       	pop	r20
     db8:	3f 91       	pop	r19
     dba:	2f 91       	pop	r18
     dbc:	0f 90       	pop	r0
     dbe:	0b be       	out	0x3b, r0	; 59
     dc0:	0f 90       	pop	r0
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	0f 90       	pop	r0
     dc6:	1f 90       	pop	r1
     dc8:	18 95       	reti

00000dca <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
     dca:	a4 ec       	ldi	r26, 0xC4	; 196
     dcc:	b4 e0       	ldi	r27, 0x04	; 4
     dce:	fc 01       	movw	r30, r24
     dd0:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
     dd2:	20 81       	ld	r18, Z
     dd4:	2d 93       	st	X+, r18
      AES_KEY = key[i];
     dd6:	21 91       	ld	r18, Z+
     dd8:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
     ddc:	e8 17       	cp	r30, r24
     dde:	f9 07       	cpc	r31, r25
     de0:	c1 f7       	brne	.-16     	; 0xdd2 <aes_setkey+0x8>
     de2:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
     de4:	10 92 3e 01 	sts	0x013E, r1
     de8:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
     dea:	e1 f7       	brne	.-8      	; 0xde4 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
     dec:	80 e8       	ldi	r24, 0x80	; 128
     dee:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
     df2:	80 91 3d 01 	lds	r24, 0x013D
     df6:	80 ff       	sbrs	r24, 0
     df8:	fc cf       	rjmp	.-8      	; 0xdf2 <aes_setkey+0x28>
     dfa:	e5 ed       	ldi	r30, 0xD5	; 213
     dfc:	f4 e0       	ldi	r31, 0x04	; 4
     dfe:	80 e1       	ldi	r24, 0x10	; 16
     e00:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
     e02:	90 91 3f 01 	lds	r25, 0x013F
     e06:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
     e08:	8e 13       	cpse	r24, r30
     e0a:	fb cf       	rjmp	.-10     	; 0xe02 <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
     e0c:	08 95       	ret

00000e0e <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
     e12:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
     e14:	66 23       	and	r22, r22
     e16:	09 f4       	brne	.+2      	; 0xe1a <aes_encrypt+0xc>
     e18:	45 c0       	rjmp	.+138    	; 0xea4 <aes_encrypt+0x96>
     e1a:	86 2f       	mov	r24, r22
     e1c:	8f 70       	andi	r24, 0x0F	; 15
     e1e:	09 f0       	breq	.+2      	; 0xe22 <aes_encrypt+0x14>
     e20:	41 c0       	rjmp	.+130    	; 0xea4 <aes_encrypt+0x96>
     e22:	e4 ec       	ldi	r30, 0xC4	; 196
     e24:	f4 e0       	ldi	r31, 0x04	; 4
     e26:	90 e1       	ldi	r25, 0x10	; 16
     e28:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
     e2a:	21 91       	ld	r18, Z+
     e2c:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
     e30:	9e 13       	cpse	r25, r30
     e32:	fb cf       	rjmp	.-10     	; 0xe2a <aes_encrypt+0x1c>
     e34:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     e36:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
     e38:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     e3a:	40 e1       	ldi	r20, 0x10	; 16
     e3c:	94 9f       	mul	r25, r20
     e3e:	90 01       	movw	r18, r0
     e40:	11 24       	eor	r1, r1
     e42:	26 17       	cp	r18, r22
     e44:	37 07       	cpc	r19, r23
     e46:	7c f5       	brge	.+94     	; 0xea6 <aes_encrypt+0x98>
      if(i==0)
     e48:	91 11       	cpse	r25, r1
     e4a:	03 c0       	rjmp	.+6      	; 0xe52 <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
     e4c:	10 92 3c 01 	sts	0x013C, r1
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
     e52:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
     e56:	40 e0       	ldi	r20, 0x00	; 0
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	2a 0f       	add	r18, r26
     e5c:	3b 1f       	adc	r19, r27
     e5e:	e9 01       	movw	r28, r18
     e60:	c4 0f       	add	r28, r20
     e62:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
     e64:	f8 81       	ld	r31, Y
     e66:	f0 93 3e 01 	sts	0x013E, r31
     e6a:	4f 5f       	subi	r20, 0xFF	; 255
     e6c:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
     e6e:	40 31       	cpi	r20, 0x10	; 16
     e70:	51 05       	cpc	r21, r1
     e72:	a9 f7       	brne	.-22     	; 0xe5e <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
     e74:	40 91 3c 01 	lds	r20, 0x013C
     e78:	40 68       	ori	r20, 0x80	; 128
     e7a:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
     e7e:	40 91 3d 01 	lds	r20, 0x013D
     e82:	40 ff       	sbrs	r20, 0
     e84:	fc cf       	rjmp	.-8      	; 0xe7e <aes_encrypt+0x70>
     e86:	40 e0       	ldi	r20, 0x00	; 0
     e88:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
     e8a:	f0 91 3e 01 	lds	r31, 0x013E
     e8e:	e9 01       	movw	r28, r18
     e90:	c4 0f       	add	r28, r20
     e92:	d5 1f       	adc	r29, r21
     e94:	f8 83       	st	Y, r31
     e96:	4f 5f       	subi	r20, 0xFF	; 255
     e98:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
     e9a:	40 31       	cpi	r20, 0x10	; 16
     e9c:	51 05       	cpc	r21, r1
     e9e:	a9 f7       	brne	.-22     	; 0xe8a <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     ea0:	9f 5f       	subi	r25, 0xFF	; 255
     ea2:	cb cf       	rjmp	.-106    	; 0xe3a <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	08 95       	ret

00000eac <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
     eb6:	61 30       	cpi	r22, 0x01	; 1
     eb8:	09 f4       	brne	.+2      	; 0xebc <aes_decrypt+0x10>
     eba:	58 c0       	rjmp	.+176    	; 0xf6c <aes_decrypt+0xc0>
     ebc:	86 2f       	mov	r24, r22
     ebe:	8f 70       	andi	r24, 0x0F	; 15
     ec0:	09 f0       	breq	.+2      	; 0xec4 <aes_decrypt+0x18>
     ec2:	54 c0       	rjmp	.+168    	; 0xf6c <aes_decrypt+0xc0>
     ec4:	e5 ed       	ldi	r30, 0xD5	; 213
     ec6:	f4 e0       	ldi	r31, 0x04	; 4
     ec8:	90 e1       	ldi	r25, 0x10	; 16
     eca:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
     ecc:	21 91       	ld	r18, Z+
     ece:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
     ed2:	9e 13       	cpse	r25, r30
     ed4:	fb cf       	rjmp	.-10     	; 0xecc <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
     ed6:	62 95       	swap	r22
     ed8:	6f 70       	andi	r22, 0x0F	; 15
     eda:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
     edc:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
     ede:	6f 3f       	cpi	r22, 0xFF	; 255
     ee0:	09 f4       	brne	.+2      	; 0xee4 <aes_decrypt+0x38>
     ee2:	45 c0       	rjmp	.+138    	; 0xf6e <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
     ee4:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
     ee8:	46 2f       	mov	r20, r22
     eea:	55 27       	eor	r21, r21
     eec:	47 fd       	sbrc	r20, 7
     eee:	50 95       	com	r21
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	ed 01       	movw	r28, r26
     ef6:	90 e1       	ldi	r25, 0x10	; 16
     ef8:	69 02       	muls	r22, r25
     efa:	c0 0d       	add	r28, r0
     efc:	d1 1d       	adc	r29, r1
     efe:	11 24       	eor	r1, r1
     f00:	fe 01       	movw	r30, r28
     f02:	e2 0f       	add	r30, r18
     f04:	f3 1f       	adc	r31, r19
     f06:	90 81       	ld	r25, Z
     f08:	90 93 3e 01 	sts	0x013E, r25
     f0c:	2f 5f       	subi	r18, 0xFF	; 255
     f0e:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
     f10:	20 31       	cpi	r18, 0x10	; 16
     f12:	31 05       	cpc	r19, r1
     f14:	a9 f7       	brne	.-22     	; 0xf00 <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
     f16:	90 91 3c 01 	lds	r25, 0x013C
     f1a:	90 68       	ori	r25, 0x80	; 128
     f1c:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
     f20:	90 91 3d 01 	lds	r25, 0x013D
     f24:	90 ff       	sbrs	r25, 0
     f26:	fc cf       	rjmp	.-8      	; 0xf20 <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
     f28:	41 50       	subi	r20, 0x01	; 1
     f2a:	51 09       	sbc	r21, r1
     f2c:	94 e0       	ldi	r25, 0x04	; 4
     f2e:	44 0f       	add	r20, r20
     f30:	55 1f       	adc	r21, r21
     f32:	9a 95       	dec	r25
     f34:	e1 f7       	brne	.-8      	; 0xf2e <aes_decrypt+0x82>
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
     f3a:	90 91 3e 01 	lds	r25, 0x013E
     f3e:	8e 01       	movw	r16, r28
     f40:	02 0f       	add	r16, r18
     f42:	13 1f       	adc	r17, r19
     f44:	f8 01       	movw	r30, r16
     f46:	90 83       	st	Z, r25
         if(i!=0)
     f48:	66 23       	and	r22, r22
     f4a:	49 f0       	breq	.+18     	; 0xf5e <aes_decrypt+0xb2>
     f4c:	f9 01       	movw	r30, r18
     f4e:	e4 0f       	add	r30, r20
     f50:	f5 1f       	adc	r31, r21
     f52:	ea 0f       	add	r30, r26
     f54:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
     f56:	e0 81       	ld	r30, Z
     f58:	9e 27       	eor	r25, r30
     f5a:	f8 01       	movw	r30, r16
     f5c:	90 83       	st	Z, r25
     f5e:	2f 5f       	subi	r18, 0xFF	; 255
     f60:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
     f62:	20 31       	cpi	r18, 0x10	; 16
     f64:	31 05       	cpc	r19, r1
     f66:	49 f7       	brne	.-46     	; 0xf3a <aes_decrypt+0x8e>
     f68:	61 50       	subi	r22, 0x01	; 1
     f6a:	b9 cf       	rjmp	.-142    	; 0xede <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	08 95       	ret

00000f78 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
     f78:	90 91 c0 00 	lds	r25, 0x00C0
     f7c:	95 ff       	sbrs	r25, 5
     f7e:	fc cf       	rjmp	.-8      	; 0xf78 <putc0>
     f80:	90 91 c0 00 	lds	r25, 0x00C0
     f84:	9f 7d       	andi	r25, 0xDF	; 223
     f86:	90 93 c0 00 	sts	0x00C0, r25
     f8a:	80 93 c6 00 	sts	0x00C6, r24
     f8e:	08 95       	ret

00000f90 <__vector_25>:
static uint16_t uart_rx_buf_start,uart_rx_buf_end;
static char uart_rx_buf[MAX_RX_UART_BUF];
static nrk_sig_t uart_rx_signal;

SIGNAL(USART0_RX_vect)
{
     f90:	1f 92       	push	r1
     f92:	0f 92       	push	r0
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	0f 92       	push	r0
     f98:	11 24       	eor	r1, r1
     f9a:	0b b6       	in	r0, 0x3b	; 59
     f9c:	0f 92       	push	r0
     f9e:	2f 93       	push	r18
     fa0:	3f 93       	push	r19
     fa2:	4f 93       	push	r20
     fa4:	5f 93       	push	r21
     fa6:	6f 93       	push	r22
     fa8:	7f 93       	push	r23
     faa:	8f 93       	push	r24
     fac:	9f 93       	push	r25
     fae:	af 93       	push	r26
     fb0:	bf 93       	push	r27
     fb2:	ef 93       	push	r30
     fb4:	ff 93       	push	r31
char c;
uint8_t sig;
nrk_int_disable();
     fb6:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <nrk_int_disable>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
     fba:	80 91 c0 00 	lds	r24, 0x00C0
     fbe:	87 ff       	sbrs	r24, 7
     fc0:	fc cf       	rjmp	.-8      	; 0xfba <__vector_25+0x2a>
     fc2:	80 91 c0 00 	lds	r24, 0x00C0
     fc6:	8f 77       	andi	r24, 0x7F	; 127
     fc8:	80 93 c0 00 	sts	0x00C0, r24
     fcc:	20 91 c6 00 	lds	r18, 0x00C6
   uart_rx_buf[uart_rx_buf_end]=c;
     fd0:	80 91 a8 03 	lds	r24, 0x03A8
     fd4:	90 91 a9 03 	lds	r25, 0x03A9
     fd8:	fc 01       	movw	r30, r24
     fda:	e8 56       	subi	r30, 0x68	; 104
     fdc:	fc 4f       	sbci	r31, 0xFC	; 252
     fde:	20 83       	st	Z, r18
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
     fe0:	01 96       	adiw	r24, 0x01	; 1
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
     fe2:	80 31       	cpi	r24, 0x10	; 16
     fe4:	91 05       	cpc	r25, r1
     fe6:	29 f0       	breq	.+10     	; 0xff2 <__vector_25+0x62>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
     fe8:	90 93 a9 03 	sts	0x03A9, r25
     fec:	80 93 a8 03 	sts	0x03A8, r24
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <__vector_25+0x6a>
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
	   uart_rx_buf_end=0;
     ff2:	10 92 a9 03 	sts	0x03A9, r1
     ff6:	10 92 a8 03 	sts	0x03A8, r1
		   }
   //if(uart_rx_buf_end==uart_rx_buf_start) nrk_kprintf(PSTR("Buf overflow!\r\n" ));
   nrk_event_signal(uart_rx_signal);
     ffa:	80 91 97 03 	lds	r24, 0x0397
     ffe:	0e 94 bd 12 	call	0x257a	; 0x257a <nrk_event_signal>
CLEAR_UART0_RX_INT();
    1002:	80 91 c0 00 	lds	r24, 0x00C0
    1006:	8f 77       	andi	r24, 0x7F	; 127
    1008:	80 93 c0 00 	sts	0x00C0, r24
//ENABLE_UART0_RX_INT();
// sei();
nrk_int_enable();
    100c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nrk_int_enable>
}
    1010:	ff 91       	pop	r31
    1012:	ef 91       	pop	r30
    1014:	bf 91       	pop	r27
    1016:	af 91       	pop	r26
    1018:	9f 91       	pop	r25
    101a:	8f 91       	pop	r24
    101c:	7f 91       	pop	r23
    101e:	6f 91       	pop	r22
    1020:	5f 91       	pop	r21
    1022:	4f 91       	pop	r20
    1024:	3f 91       	pop	r19
    1026:	2f 91       	pop	r18
    1028:	0f 90       	pop	r0
    102a:	0b be       	out	0x3b, r0	; 59
    102c:	0f 90       	pop	r0
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	0f 90       	pop	r0
    1032:	1f 90       	pop	r1
    1034:	18 95       	reti

00001036 <nrk_uart_data_ready>:
   return tmp;
}

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    1036:	81 11       	cpse	r24, r1
    1038:	0d c0       	rjmp	.+26     	; 0x1054 <nrk_uart_data_ready+0x1e>
        {
        //if( UCSR0A & BM(RXC0) ) return 1;
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	40 91 aa 03 	lds	r20, 0x03AA
    1040:	50 91 ab 03 	lds	r21, 0x03AB
    1044:	20 91 a8 03 	lds	r18, 0x03A8
    1048:	30 91 a9 03 	lds	r19, 0x03A9
    104c:	42 17       	cp	r20, r18
    104e:	53 07       	cpc	r21, r19
    1050:	51 f4       	brne	.+20     	; 0x1066 <nrk_uart_data_ready+0x30>
    1052:	08 c0       	rjmp	.+16     	; 0x1064 <nrk_uart_data_ready+0x2e>
        }
if(uart_num==1)
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	31 f4       	brne	.+12     	; 0x1064 <nrk_uart_data_ready+0x2e>
	{
        if( UCSR1A & BM(RXC1) ) return 1;
    1058:	80 91 c8 00 	lds	r24, 0x00C8
    105c:	88 1f       	adc	r24, r24
    105e:	88 27       	eor	r24, r24
    1060:	88 1f       	adc	r24, r24
    1062:	08 95       	ret
	//if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
    1064:	80 e0       	ldi	r24, 0x00	; 0
}
    1066:	08 95       	ret

00001068 <nrk_uart_rx_signal_get>:

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    1068:	80 91 97 03 	lds	r24, 0x0397
    106c:	8f 3f       	cpi	r24, 0xFF	; 255
    106e:	19 f4       	brne	.+6      	; 0x1076 <nrk_uart_rx_signal_get+0xe>
    1070:	8e e0       	ldi	r24, 0x0E	; 14
    1072:	0e 94 77 10 	call	0x20ee	; 0x20ee <nrk_error_add>
   return uart_rx_signal;
}
    1076:	80 91 97 03 	lds	r24, 0x0397
    107a:	08 95       	ret

0000107c <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    1080:	fc 01       	movw	r30, r24
    1082:	24 91       	lpm	r18, Z
    1084:	ec 01       	movw	r28, r24
    1086:	21 96       	adiw	r28, 0x01	; 1
    1088:	22 23       	and	r18, r18
    108a:	51 f0       	breq	.+20     	; 0x10a0 <nrk_kprintf+0x24>
        putchar(c);
    108c:	60 91 a1 06 	lds	r22, 0x06A1
    1090:	70 91 a2 06 	lds	r23, 0x06A2
    1094:	82 2f       	mov	r24, r18
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <fputc>
    109c:	ce 01       	movw	r24, r28
    109e:	f0 cf       	rjmp	.-32     	; 0x1080 <nrk_kprintf+0x4>
}
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	08 95       	ret

000010a6 <getc0>:
char getc0()
{
char tmp;
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
    10a6:	20 91 aa 03 	lds	r18, 0x03AA
    10aa:	30 91 ab 03 	lds	r19, 0x03AB
    10ae:	80 91 a8 03 	lds	r24, 0x03A8
    10b2:	90 91 a9 03 	lds	r25, 0x03A9
    10b6:	28 17       	cp	r18, r24
    10b8:	39 07       	cpc	r19, r25
    10ba:	69 f4       	brne	.+26     	; 0x10d6 <getc0+0x30>
    10bc:	80 91 97 03 	lds	r24, 0x0397
    10c0:	0e 94 8b 12 	call	0x2516	; 0x2516 <nrk_signal_register>
    10c4:	60 91 97 03 	lds	r22, 0x0397
    10c8:	77 27       	eor	r23, r23
    10ca:	67 fd       	sbrc	r22, 7
    10cc:	70 95       	com	r23
    10ce:	87 2f       	mov	r24, r23
    10d0:	97 2f       	mov	r25, r23
    10d2:	0e 94 2e 13 	call	0x265c	; 0x265c <nrk_event_wait>
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
    10d6:	6f 3f       	cpi	r22, 0xFF	; 255
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <getc0+0x3c>
    10da:	84 eb       	ldi	r24, 0xB4	; 180
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	0e 94 3e 08 	call	0x107c	; 0x107c <nrk_kprintf>
   tmp=uart_rx_buf[uart_rx_buf_start];
    10e2:	20 91 aa 03 	lds	r18, 0x03AA
    10e6:	30 91 ab 03 	lds	r19, 0x03AB
    10ea:	f9 01       	movw	r30, r18
    10ec:	e8 56       	subi	r30, 0x68	; 104
    10ee:	fc 4f       	sbci	r31, 0xFC	; 252
    10f0:	80 81       	ld	r24, Z
   uart_rx_buf_start++;
    10f2:	2f 5f       	subi	r18, 0xFF	; 255
    10f4:	3f 4f       	sbci	r19, 0xFF	; 255
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    10f6:	20 31       	cpi	r18, 0x10	; 16
    10f8:	31 05       	cpc	r19, r1
    10fa:	28 f4       	brcc	.+10     	; 0x1106 <getc0+0x60>
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
   tmp=uart_rx_buf[uart_rx_buf_start];
   uart_rx_buf_start++;
    10fc:	30 93 ab 03 	sts	0x03AB, r19
    1100:	20 93 aa 03 	sts	0x03AA, r18
    1104:	08 95       	ret
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    1106:	10 92 ab 03 	sts	0x03AB, r1
    110a:	10 92 aa 03 	sts	0x03AA, r1

   return tmp;
}
    110e:	08 95       	ret

00001110 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    1110:	86 e0       	ldi	r24, 0x06	; 6
    1112:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    1114:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    1116:	88 ef       	ldi	r24, 0xF8	; 248
    1118:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    111a:	80 ef       	ldi	r24, 0xF0	; 240
    111c:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    111e:	82 e0       	ldi	r24, 0x02	; 2
    1120:	8d b9       	out	0x0d, r24	; 13
    1122:	08 95       	ret

00001124 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    1124:	0c 94 88 08 	jmp	0x1110	; 0x1110 <PORT_INIT>

00001128 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1128:	8f 3f       	cpi	r24, 0xFF	; 255
    112a:	09 f4       	brne	.+2      	; 0x112e <nrk_gpio_set+0x6>
    112c:	6c c0       	rjmp	.+216    	; 0x1206 <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    112e:	e8 2f       	mov	r30, r24
    1130:	e7 70       	andi	r30, 0x07	; 7
    1132:	4e 2f       	mov	r20, r30
    1134:	50 e0       	ldi	r21, 0x00	; 0
    1136:	47 30       	cpi	r20, 0x07	; 7
    1138:	51 05       	cpc	r21, r1
    113a:	08 f0       	brcs	.+2      	; 0x113e <nrk_gpio_set+0x16>
    113c:	64 c0       	rjmp	.+200    	; 0x1206 <nrk_gpio_set+0xde>
    113e:	fa 01       	movw	r30, r20
    1140:	e0 57       	subi	r30, 0x70	; 112
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	86 95       	lsr	r24
    1146:	86 95       	lsr	r24
    1148:	86 95       	lsr	r24
    114a:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    114e:	42 b1       	in	r20, 0x02	; 2
    1150:	21 e0       	ldi	r18, 0x01	; 1
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	b9 01       	movw	r22, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <nrk_gpio_set+0x34>
    1158:	66 0f       	add	r22, r22
    115a:	77 1f       	adc	r23, r23
    115c:	8a 95       	dec	r24
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <nrk_gpio_set+0x30>
    1160:	cb 01       	movw	r24, r22
    1162:	84 2b       	or	r24, r20
    1164:	82 b9       	out	0x02, r24	; 2
    1166:	4d c0       	rjmp	.+154    	; 0x1202 <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1168:	45 b1       	in	r20, 0x05	; 5
    116a:	21 e0       	ldi	r18, 0x01	; 1
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	b9 01       	movw	r22, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <nrk_gpio_set+0x4e>
    1172:	66 0f       	add	r22, r22
    1174:	77 1f       	adc	r23, r23
    1176:	8a 95       	dec	r24
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <nrk_gpio_set+0x4a>
    117a:	cb 01       	movw	r24, r22
    117c:	84 2b       	or	r24, r20
    117e:	85 b9       	out	0x05, r24	; 5
    1180:	40 c0       	rjmp	.+128    	; 0x1202 <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1182:	48 b1       	in	r20, 0x08	; 8
    1184:	21 e0       	ldi	r18, 0x01	; 1
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	b9 01       	movw	r22, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <nrk_gpio_set+0x68>
    118c:	66 0f       	add	r22, r22
    118e:	77 1f       	adc	r23, r23
    1190:	8a 95       	dec	r24
    1192:	e2 f7       	brpl	.-8      	; 0x118c <nrk_gpio_set+0x64>
    1194:	cb 01       	movw	r24, r22
    1196:	84 2b       	or	r24, r20
    1198:	88 b9       	out	0x08, r24	; 8
    119a:	33 c0       	rjmp	.+102    	; 0x1202 <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    119c:	4b b1       	in	r20, 0x0b	; 11
    119e:	21 e0       	ldi	r18, 0x01	; 1
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	b9 01       	movw	r22, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <nrk_gpio_set+0x82>
    11a6:	66 0f       	add	r22, r22
    11a8:	77 1f       	adc	r23, r23
    11aa:	8a 95       	dec	r24
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <nrk_gpio_set+0x7e>
    11ae:	cb 01       	movw	r24, r22
    11b0:	84 2b       	or	r24, r20
    11b2:	8b b9       	out	0x0b, r24	; 11
    11b4:	26 c0       	rjmp	.+76     	; 0x1202 <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    11b6:	4e b1       	in	r20, 0x0e	; 14
    11b8:	21 e0       	ldi	r18, 0x01	; 1
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	b9 01       	movw	r22, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <nrk_gpio_set+0x9c>
    11c0:	66 0f       	add	r22, r22
    11c2:	77 1f       	adc	r23, r23
    11c4:	8a 95       	dec	r24
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <nrk_gpio_set+0x98>
    11c8:	cb 01       	movw	r24, r22
    11ca:	84 2b       	or	r24, r20
    11cc:	8e b9       	out	0x0e, r24	; 14
    11ce:	19 c0       	rjmp	.+50     	; 0x1202 <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    11d0:	41 b3       	in	r20, 0x11	; 17
    11d2:	21 e0       	ldi	r18, 0x01	; 1
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	b9 01       	movw	r22, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <nrk_gpio_set+0xb6>
    11da:	66 0f       	add	r22, r22
    11dc:	77 1f       	adc	r23, r23
    11de:	8a 95       	dec	r24
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <nrk_gpio_set+0xb2>
    11e2:	cb 01       	movw	r24, r22
    11e4:	84 2b       	or	r24, r20
    11e6:	81 bb       	out	0x11, r24	; 17
    11e8:	0c c0       	rjmp	.+24     	; 0x1202 <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    11ea:	44 b3       	in	r20, 0x14	; 20
    11ec:	21 e0       	ldi	r18, 0x01	; 1
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	b9 01       	movw	r22, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <nrk_gpio_set+0xd0>
    11f4:	66 0f       	add	r22, r22
    11f6:	77 1f       	adc	r23, r23
    11f8:	8a 95       	dec	r24
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <nrk_gpio_set+0xcc>
    11fc:	cb 01       	movw	r24, r22
    11fe:	84 2b       	or	r24, r20
    1200:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    1202:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1204:	08 95       	ret
                default: return -1;
    1206:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1208:	08 95       	ret

0000120a <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    120a:	8f 3f       	cpi	r24, 0xFF	; 255
    120c:	09 f4       	brne	.+2      	; 0x1210 <nrk_gpio_clr+0x6>
    120e:	73 c0       	rjmp	.+230    	; 0x12f6 <nrk_gpio_clr+0xec>
        switch (pin & 0x07) {
    1210:	e8 2f       	mov	r30, r24
    1212:	e7 70       	andi	r30, 0x07	; 7
    1214:	4e 2f       	mov	r20, r30
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	47 30       	cpi	r20, 0x07	; 7
    121a:	51 05       	cpc	r21, r1
    121c:	08 f0       	brcs	.+2      	; 0x1220 <nrk_gpio_clr+0x16>
    121e:	6b c0       	rjmp	.+214    	; 0x12f6 <nrk_gpio_clr+0xec>
    1220:	fa 01       	movw	r30, r20
    1222:	e9 56       	subi	r30, 0x69	; 105
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	86 95       	lsr	r24
    1228:	86 95       	lsr	r24
    122a:	86 95       	lsr	r24
    122c:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1230:	42 b1       	in	r20, 0x02	; 2
    1232:	21 e0       	ldi	r18, 0x01	; 1
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	b9 01       	movw	r22, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <nrk_gpio_clr+0x34>
    123a:	66 0f       	add	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	8a 95       	dec	r24
    1240:	e2 f7       	brpl	.-8      	; 0x123a <nrk_gpio_clr+0x30>
    1242:	cb 01       	movw	r24, r22
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	82 b9       	out	0x02, r24	; 2
    124a:	53 c0       	rjmp	.+166    	; 0x12f2 <nrk_gpio_clr+0xe8>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    124c:	45 b1       	in	r20, 0x05	; 5
    124e:	21 e0       	ldi	r18, 0x01	; 1
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	b9 01       	movw	r22, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <nrk_gpio_clr+0x50>
    1256:	66 0f       	add	r22, r22
    1258:	77 1f       	adc	r23, r23
    125a:	8a 95       	dec	r24
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <nrk_gpio_clr+0x4c>
    125e:	cb 01       	movw	r24, r22
    1260:	80 95       	com	r24
    1262:	84 23       	and	r24, r20
    1264:	85 b9       	out	0x05, r24	; 5
    1266:	45 c0       	rjmp	.+138    	; 0x12f2 <nrk_gpio_clr+0xe8>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1268:	48 b1       	in	r20, 0x08	; 8
    126a:	21 e0       	ldi	r18, 0x01	; 1
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	b9 01       	movw	r22, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <nrk_gpio_clr+0x6c>
    1272:	66 0f       	add	r22, r22
    1274:	77 1f       	adc	r23, r23
    1276:	8a 95       	dec	r24
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <nrk_gpio_clr+0x68>
    127a:	cb 01       	movw	r24, r22
    127c:	80 95       	com	r24
    127e:	84 23       	and	r24, r20
    1280:	88 b9       	out	0x08, r24	; 8
    1282:	37 c0       	rjmp	.+110    	; 0x12f2 <nrk_gpio_clr+0xe8>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1284:	4b b1       	in	r20, 0x0b	; 11
    1286:	21 e0       	ldi	r18, 0x01	; 1
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	b9 01       	movw	r22, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <nrk_gpio_clr+0x88>
    128e:	66 0f       	add	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	8a 95       	dec	r24
    1294:	e2 f7       	brpl	.-8      	; 0x128e <nrk_gpio_clr+0x84>
    1296:	cb 01       	movw	r24, r22
    1298:	80 95       	com	r24
    129a:	84 23       	and	r24, r20
    129c:	8b b9       	out	0x0b, r24	; 11
    129e:	29 c0       	rjmp	.+82     	; 0x12f2 <nrk_gpio_clr+0xe8>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    12a0:	4e b1       	in	r20, 0x0e	; 14
    12a2:	21 e0       	ldi	r18, 0x01	; 1
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	b9 01       	movw	r22, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <nrk_gpio_clr+0xa4>
    12aa:	66 0f       	add	r22, r22
    12ac:	77 1f       	adc	r23, r23
    12ae:	8a 95       	dec	r24
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <nrk_gpio_clr+0xa0>
    12b2:	cb 01       	movw	r24, r22
    12b4:	80 95       	com	r24
    12b6:	84 23       	and	r24, r20
    12b8:	8e b9       	out	0x0e, r24	; 14
    12ba:	1b c0       	rjmp	.+54     	; 0x12f2 <nrk_gpio_clr+0xe8>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    12bc:	41 b3       	in	r20, 0x11	; 17
    12be:	21 e0       	ldi	r18, 0x01	; 1
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	b9 01       	movw	r22, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <nrk_gpio_clr+0xc0>
    12c6:	66 0f       	add	r22, r22
    12c8:	77 1f       	adc	r23, r23
    12ca:	8a 95       	dec	r24
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <nrk_gpio_clr+0xbc>
    12ce:	cb 01       	movw	r24, r22
    12d0:	80 95       	com	r24
    12d2:	84 23       	and	r24, r20
    12d4:	81 bb       	out	0x11, r24	; 17
    12d6:	0d c0       	rjmp	.+26     	; 0x12f2 <nrk_gpio_clr+0xe8>
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    12d8:	44 b3       	in	r20, 0x14	; 20
    12da:	21 e0       	ldi	r18, 0x01	; 1
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	b9 01       	movw	r22, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <nrk_gpio_clr+0xdc>
    12e2:	66 0f       	add	r22, r22
    12e4:	77 1f       	adc	r23, r23
    12e6:	8a 95       	dec	r24
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <nrk_gpio_clr+0xd8>
    12ea:	cb 01       	movw	r24, r22
    12ec:	80 95       	com	r24
    12ee:	84 23       	and	r24, r20
    12f0:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    12f4:	08 95       	ret
                default: return -1;
    12f6:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    12f8:	08 95       	ret

000012fa <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    12fa:	8f 3f       	cpi	r24, 0xFF	; 255
    12fc:	31 f1       	breq	.+76     	; 0x134a <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    12fe:	e8 2f       	mov	r30, r24
    1300:	e7 70       	andi	r30, 0x07	; 7
    1302:	4e 2f       	mov	r20, r30
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	47 30       	cpi	r20, 0x07	; 7
    1308:	51 05       	cpc	r21, r1
    130a:	f8 f4       	brcc	.+62     	; 0x134a <nrk_gpio_get+0x50>
    130c:	fa 01       	movw	r30, r20
    130e:	e2 56       	subi	r30, 0x62	; 98
    1310:	ff 4f       	sbci	r31, 0xFF	; 255
    1312:	28 2f       	mov	r18, r24
    1314:	26 95       	lsr	r18
    1316:	26 95       	lsr	r18
    1318:	26 95       	lsr	r18
    131a:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    131e:	90 b1       	in	r25, 0x00	; 0
    1320:	0b c0       	rjmp	.+22     	; 0x1338 <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    1322:	93 b1       	in	r25, 0x03	; 3
    1324:	09 c0       	rjmp	.+18     	; 0x1338 <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    1326:	96 b1       	in	r25, 0x06	; 6
    1328:	07 c0       	rjmp	.+14     	; 0x1338 <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    132a:	99 b1       	in	r25, 0x09	; 9
    132c:	05 c0       	rjmp	.+10     	; 0x1338 <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    132e:	9c b1       	in	r25, 0x0c	; 12
    1330:	03 c0       	rjmp	.+6      	; 0x1338 <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    1332:	9f b1       	in	r25, 0x0f	; 15
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    1336:	92 b3       	in	r25, 0x12	; 18
    1338:	89 2f       	mov	r24, r25
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <nrk_gpio_get+0x48>
    133e:	95 95       	asr	r25
    1340:	87 95       	ror	r24
    1342:	2a 95       	dec	r18
    1344:	e2 f7       	brpl	.-8      	; 0x133e <nrk_gpio_get+0x44>
    1346:	81 70       	andi	r24, 0x01	; 1
    1348:	08 95       	ret
                default: return -1;
    134a:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    134c:	08 95       	ret

0000134e <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    134e:	8f 3f       	cpi	r24, 0xFF	; 255
    1350:	09 f4       	brne	.+2      	; 0x1354 <nrk_gpio_toggle+0x6>
    1352:	06 c1       	rjmp	.+524    	; 0x1560 <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    1354:	e8 2f       	mov	r30, r24
    1356:	e7 70       	andi	r30, 0x07	; 7
    1358:	4e 2f       	mov	r20, r30
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	47 30       	cpi	r20, 0x07	; 7
    135e:	51 05       	cpc	r21, r1
    1360:	08 f0       	brcs	.+2      	; 0x1364 <nrk_gpio_toggle+0x16>
    1362:	fe c0       	rjmp	.+508    	; 0x1560 <nrk_gpio_toggle+0x212>
    1364:	fa 01       	movw	r30, r20
    1366:	eb 55       	subi	r30, 0x5B	; 91
    1368:	ff 4f       	sbci	r31, 0xFF	; 255
    136a:	86 95       	lsr	r24
    136c:	86 95       	lsr	r24
    136e:	86 95       	lsr	r24
    1370:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    1374:	20 b1       	in	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	08 2e       	mov	r0, r24
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <nrk_gpio_toggle+0x32>
    137c:	35 95       	asr	r19
    137e:	27 95       	ror	r18
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    1384:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    1386:	20 fd       	sbrc	r18, 0
    1388:	0b c0       	rjmp	.+22     	; 0x13a0 <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    138a:	21 e0       	ldi	r18, 0x01	; 1
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	b9 01       	movw	r22, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <nrk_gpio_toggle+0x48>
    1392:	66 0f       	add	r22, r22
    1394:	77 1f       	adc	r23, r23
    1396:	8a 95       	dec	r24
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <nrk_gpio_toggle+0x44>
    139a:	cb 01       	movw	r24, r22
    139c:	84 2b       	or	r24, r20
    139e:	0b c0       	rjmp	.+22     	; 0x13b6 <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    13a0:	21 e0       	ldi	r18, 0x01	; 1
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	b9 01       	movw	r22, r18
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <nrk_gpio_toggle+0x5e>
    13a8:	66 0f       	add	r22, r22
    13aa:	77 1f       	adc	r23, r23
    13ac:	8a 95       	dec	r24
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <nrk_gpio_toggle+0x5a>
    13b0:	cb 01       	movw	r24, r22
    13b2:	80 95       	com	r24
    13b4:	84 23       	and	r24, r20
    13b6:	82 b9       	out	0x02, r24	; 2
    13b8:	16 c0       	rjmp	.+44     	; 0x13e6 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    13ba:	23 b1       	in	r18, 0x03	; 3
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	08 2e       	mov	r0, r24
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <nrk_gpio_toggle+0x78>
    13c2:	35 95       	asr	r19
    13c4:	27 95       	ror	r18
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    13ca:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    13cc:	20 fd       	sbrc	r18, 0
    13ce:	0d c0       	rjmp	.+26     	; 0x13ea <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    13d0:	21 e0       	ldi	r18, 0x01	; 1
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	b9 01       	movw	r22, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <nrk_gpio_toggle+0x8e>
    13d8:	66 0f       	add	r22, r22
    13da:	77 1f       	adc	r23, r23
    13dc:	8a 95       	dec	r24
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <nrk_gpio_toggle+0x8a>
    13e0:	cb 01       	movw	r24, r22
    13e2:	84 2b       	or	r24, r20
    13e4:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    13ea:	21 e0       	ldi	r18, 0x01	; 1
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	b9 01       	movw	r22, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <nrk_gpio_toggle+0xa8>
    13f2:	66 0f       	add	r22, r22
    13f4:	77 1f       	adc	r23, r23
    13f6:	8a 95       	dec	r24
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <nrk_gpio_toggle+0xa4>
    13fa:	cb 01       	movw	r24, r22
    13fc:	80 95       	com	r24
    13fe:	84 23       	and	r24, r20
    1400:	f1 cf       	rjmp	.-30     	; 0x13e4 <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1402:	26 b1       	in	r18, 0x06	; 6
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	08 2e       	mov	r0, r24
    1408:	02 c0       	rjmp	.+4      	; 0x140e <nrk_gpio_toggle+0xc0>
    140a:	35 95       	asr	r19
    140c:	27 95       	ror	r18
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1412:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1414:	20 fd       	sbrc	r18, 0
    1416:	0b c0       	rjmp	.+22     	; 0x142e <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1418:	21 e0       	ldi	r18, 0x01	; 1
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	b9 01       	movw	r22, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <nrk_gpio_toggle+0xd6>
    1420:	66 0f       	add	r22, r22
    1422:	77 1f       	adc	r23, r23
    1424:	8a 95       	dec	r24
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <nrk_gpio_toggle+0xd2>
    1428:	cb 01       	movw	r24, r22
    142a:	84 2b       	or	r24, r20
    142c:	0b c0       	rjmp	.+22     	; 0x1444 <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    142e:	21 e0       	ldi	r18, 0x01	; 1
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	b9 01       	movw	r22, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <nrk_gpio_toggle+0xec>
    1436:	66 0f       	add	r22, r22
    1438:	77 1f       	adc	r23, r23
    143a:	8a 95       	dec	r24
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <nrk_gpio_toggle+0xe8>
    143e:	cb 01       	movw	r24, r22
    1440:	80 95       	com	r24
    1442:	84 23       	and	r24, r20
    1444:	88 b9       	out	0x08, r24	; 8
    1446:	cf cf       	rjmp	.-98     	; 0x13e6 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    1448:	29 b1       	in	r18, 0x09	; 9
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	08 2e       	mov	r0, r24
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <nrk_gpio_toggle+0x106>
    1450:	35 95       	asr	r19
    1452:	27 95       	ror	r18
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    1458:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    145a:	20 fd       	sbrc	r18, 0
    145c:	0b c0       	rjmp	.+22     	; 0x1474 <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    145e:	21 e0       	ldi	r18, 0x01	; 1
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	b9 01       	movw	r22, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <nrk_gpio_toggle+0x11c>
    1466:	66 0f       	add	r22, r22
    1468:	77 1f       	adc	r23, r23
    146a:	8a 95       	dec	r24
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <nrk_gpio_toggle+0x118>
    146e:	cb 01       	movw	r24, r22
    1470:	84 2b       	or	r24, r20
    1472:	0b c0       	rjmp	.+22     	; 0x148a <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    1474:	21 e0       	ldi	r18, 0x01	; 1
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	b9 01       	movw	r22, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <nrk_gpio_toggle+0x132>
    147c:	66 0f       	add	r22, r22
    147e:	77 1f       	adc	r23, r23
    1480:	8a 95       	dec	r24
    1482:	e2 f7       	brpl	.-8      	; 0x147c <nrk_gpio_toggle+0x12e>
    1484:	cb 01       	movw	r24, r22
    1486:	80 95       	com	r24
    1488:	84 23       	and	r24, r20
    148a:	8b b9       	out	0x0b, r24	; 11
    148c:	ac cf       	rjmp	.-168    	; 0x13e6 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    148e:	2c b1       	in	r18, 0x0c	; 12
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	08 2e       	mov	r0, r24
    1494:	02 c0       	rjmp	.+4      	; 0x149a <nrk_gpio_toggle+0x14c>
    1496:	35 95       	asr	r19
    1498:	27 95       	ror	r18
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    149e:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    14a0:	20 fd       	sbrc	r18, 0
    14a2:	0b c0       	rjmp	.+22     	; 0x14ba <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    14a4:	21 e0       	ldi	r18, 0x01	; 1
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	b9 01       	movw	r22, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <nrk_gpio_toggle+0x162>
    14ac:	66 0f       	add	r22, r22
    14ae:	77 1f       	adc	r23, r23
    14b0:	8a 95       	dec	r24
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <nrk_gpio_toggle+0x15e>
    14b4:	cb 01       	movw	r24, r22
    14b6:	84 2b       	or	r24, r20
    14b8:	0b c0       	rjmp	.+22     	; 0x14d0 <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    14ba:	21 e0       	ldi	r18, 0x01	; 1
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	b9 01       	movw	r22, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <nrk_gpio_toggle+0x178>
    14c2:	66 0f       	add	r22, r22
    14c4:	77 1f       	adc	r23, r23
    14c6:	8a 95       	dec	r24
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <nrk_gpio_toggle+0x174>
    14ca:	cb 01       	movw	r24, r22
    14cc:	80 95       	com	r24
    14ce:	84 23       	and	r24, r20
    14d0:	8e b9       	out	0x0e, r24	; 14
    14d2:	89 cf       	rjmp	.-238    	; 0x13e6 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    14d4:	2f b1       	in	r18, 0x0f	; 15
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	08 2e       	mov	r0, r24
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <nrk_gpio_toggle+0x192>
    14dc:	35 95       	asr	r19
    14de:	27 95       	ror	r18
    14e0:	0a 94       	dec	r0
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    14e4:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    14e6:	20 fd       	sbrc	r18, 0
    14e8:	0b c0       	rjmp	.+22     	; 0x1500 <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    14ea:	21 e0       	ldi	r18, 0x01	; 1
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	b9 01       	movw	r22, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <nrk_gpio_toggle+0x1a8>
    14f2:	66 0f       	add	r22, r22
    14f4:	77 1f       	adc	r23, r23
    14f6:	8a 95       	dec	r24
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <nrk_gpio_toggle+0x1a4>
    14fa:	cb 01       	movw	r24, r22
    14fc:	84 2b       	or	r24, r20
    14fe:	0b c0       	rjmp	.+22     	; 0x1516 <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    1500:	21 e0       	ldi	r18, 0x01	; 1
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	b9 01       	movw	r22, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <nrk_gpio_toggle+0x1be>
    1508:	66 0f       	add	r22, r22
    150a:	77 1f       	adc	r23, r23
    150c:	8a 95       	dec	r24
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <nrk_gpio_toggle+0x1ba>
    1510:	cb 01       	movw	r24, r22
    1512:	80 95       	com	r24
    1514:	84 23       	and	r24, r20
    1516:	81 bb       	out	0x11, r24	; 17
    1518:	66 cf       	rjmp	.-308    	; 0x13e6 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    151a:	22 b3       	in	r18, 0x12	; 18
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	08 2e       	mov	r0, r24
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <nrk_gpio_toggle+0x1d8>
    1522:	35 95       	asr	r19
    1524:	27 95       	ror	r18
    1526:	0a 94       	dec	r0
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    152a:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    152c:	20 fd       	sbrc	r18, 0
    152e:	0b c0       	rjmp	.+22     	; 0x1546 <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    1530:	21 e0       	ldi	r18, 0x01	; 1
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	b9 01       	movw	r22, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <nrk_gpio_toggle+0x1ee>
    1538:	66 0f       	add	r22, r22
    153a:	77 1f       	adc	r23, r23
    153c:	8a 95       	dec	r24
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <nrk_gpio_toggle+0x1ea>
    1540:	cb 01       	movw	r24, r22
    1542:	84 2b       	or	r24, r20
    1544:	0b c0       	rjmp	.+22     	; 0x155c <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    1546:	21 e0       	ldi	r18, 0x01	; 1
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	b9 01       	movw	r22, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <nrk_gpio_toggle+0x204>
    154e:	66 0f       	add	r22, r22
    1550:	77 1f       	adc	r23, r23
    1552:	8a 95       	dec	r24
    1554:	e2 f7       	brpl	.-8      	; 0x154e <nrk_gpio_toggle+0x200>
    1556:	cb 01       	movw	r24, r22
    1558:	80 95       	com	r24
    155a:	84 23       	and	r24, r20
    155c:	84 bb       	out	0x14, r24	; 20
    155e:	43 cf       	rjmp	.-378    	; 0x13e6 <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    1560:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1562:	08 95       	ret

00001564 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1564:	8f 3f       	cpi	r24, 0xFF	; 255
    1566:	09 f4       	brne	.+2      	; 0x156a <nrk_gpio_direction+0x6>
    1568:	d5 c0       	rjmp	.+426    	; 0x1714 <nrk_gpio_direction+0x1b0>
    156a:	e8 2f       	mov	r30, r24
    156c:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    156e:	4e 2f       	mov	r20, r30
    1570:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    1572:	61 11       	cpse	r22, r1
    1574:	67 c0       	rjmp	.+206    	; 0x1644 <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    1576:	47 30       	cpi	r20, 0x07	; 7
    1578:	51 05       	cpc	r21, r1
    157a:	08 f0       	brcs	.+2      	; 0x157e <nrk_gpio_direction+0x1a>
    157c:	cb c0       	rjmp	.+406    	; 0x1714 <nrk_gpio_direction+0x1b0>
    157e:	fa 01       	movw	r30, r20
    1580:	e4 55       	subi	r30, 0x54	; 84
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	86 95       	lsr	r24
    1586:	86 95       	lsr	r24
    1588:	86 95       	lsr	r24
    158a:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    158e:	41 b1       	in	r20, 0x01	; 1
    1590:	21 e0       	ldi	r18, 0x01	; 1
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	b9 01       	movw	r22, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <nrk_gpio_direction+0x38>
    1598:	66 0f       	add	r22, r22
    159a:	77 1f       	adc	r23, r23
    159c:	8a 95       	dec	r24
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <nrk_gpio_direction+0x34>
    15a0:	cb 01       	movw	r24, r22
    15a2:	80 95       	com	r24
    15a4:	84 23       	and	r24, r20
    15a6:	65 c0       	rjmp	.+202    	; 0x1672 <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    15a8:	44 b1       	in	r20, 0x04	; 4
    15aa:	21 e0       	ldi	r18, 0x01	; 1
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	b9 01       	movw	r22, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <nrk_gpio_direction+0x52>
    15b2:	66 0f       	add	r22, r22
    15b4:	77 1f       	adc	r23, r23
    15b6:	8a 95       	dec	r24
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <nrk_gpio_direction+0x4e>
    15ba:	cb 01       	movw	r24, r22
    15bc:	80 95       	com	r24
    15be:	84 23       	and	r24, r20
    15c0:	65 c0       	rjmp	.+202    	; 0x168c <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    15c2:	47 b1       	in	r20, 0x07	; 7
    15c4:	21 e0       	ldi	r18, 0x01	; 1
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	b9 01       	movw	r22, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <nrk_gpio_direction+0x6c>
    15cc:	66 0f       	add	r22, r22
    15ce:	77 1f       	adc	r23, r23
    15d0:	8a 95       	dec	r24
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <nrk_gpio_direction+0x68>
    15d4:	cb 01       	movw	r24, r22
    15d6:	80 95       	com	r24
    15d8:	84 23       	and	r24, r20
    15da:	65 c0       	rjmp	.+202    	; 0x16a6 <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    15dc:	4a b1       	in	r20, 0x0a	; 10
    15de:	21 e0       	ldi	r18, 0x01	; 1
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	b9 01       	movw	r22, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <nrk_gpio_direction+0x86>
    15e6:	66 0f       	add	r22, r22
    15e8:	77 1f       	adc	r23, r23
    15ea:	8a 95       	dec	r24
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <nrk_gpio_direction+0x82>
    15ee:	cb 01       	movw	r24, r22
    15f0:	80 95       	com	r24
    15f2:	84 23       	and	r24, r20
    15f4:	65 c0       	rjmp	.+202    	; 0x16c0 <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    15f6:	4d b1       	in	r20, 0x0d	; 13
    15f8:	21 e0       	ldi	r18, 0x01	; 1
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	b9 01       	movw	r22, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <nrk_gpio_direction+0xa0>
    1600:	66 0f       	add	r22, r22
    1602:	77 1f       	adc	r23, r23
    1604:	8a 95       	dec	r24
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <nrk_gpio_direction+0x9c>
    1608:	cb 01       	movw	r24, r22
    160a:	80 95       	com	r24
    160c:	84 23       	and	r24, r20
    160e:	65 c0       	rjmp	.+202    	; 0x16da <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    1610:	40 b3       	in	r20, 0x10	; 16
    1612:	21 e0       	ldi	r18, 0x01	; 1
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	b9 01       	movw	r22, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <nrk_gpio_direction+0xba>
    161a:	66 0f       	add	r22, r22
    161c:	77 1f       	adc	r23, r23
    161e:	8a 95       	dec	r24
    1620:	e2 f7       	brpl	.-8      	; 0x161a <nrk_gpio_direction+0xb6>
    1622:	cb 01       	movw	r24, r22
    1624:	80 95       	com	r24
    1626:	84 23       	and	r24, r20
    1628:	65 c0       	rjmp	.+202    	; 0x16f4 <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    162a:	43 b3       	in	r20, 0x13	; 19
    162c:	21 e0       	ldi	r18, 0x01	; 1
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	b9 01       	movw	r22, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <nrk_gpio_direction+0xd4>
    1634:	66 0f       	add	r22, r22
    1636:	77 1f       	adc	r23, r23
    1638:	8a 95       	dec	r24
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <nrk_gpio_direction+0xd0>
    163c:	cb 01       	movw	r24, r22
    163e:	80 95       	com	r24
    1640:	84 23       	and	r24, r20
    1642:	65 c0       	rjmp	.+202    	; 0x170e <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    1644:	47 30       	cpi	r20, 0x07	; 7
    1646:	51 05       	cpc	r21, r1
    1648:	08 f0       	brcs	.+2      	; 0x164c <nrk_gpio_direction+0xe8>
    164a:	64 c0       	rjmp	.+200    	; 0x1714 <nrk_gpio_direction+0x1b0>
    164c:	fa 01       	movw	r30, r20
    164e:	ed 54       	subi	r30, 0x4D	; 77
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	86 95       	lsr	r24
    1654:	86 95       	lsr	r24
    1656:	86 95       	lsr	r24
    1658:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    165c:	41 b1       	in	r20, 0x01	; 1
    165e:	21 e0       	ldi	r18, 0x01	; 1
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	b9 01       	movw	r22, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <nrk_gpio_direction+0x106>
    1666:	66 0f       	add	r22, r22
    1668:	77 1f       	adc	r23, r23
    166a:	8a 95       	dec	r24
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <nrk_gpio_direction+0x102>
    166e:	cb 01       	movw	r24, r22
    1670:	84 2b       	or	r24, r20
    1672:	81 b9       	out	0x01, r24	; 1
    1674:	4d c0       	rjmp	.+154    	; 0x1710 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    1676:	44 b1       	in	r20, 0x04	; 4
    1678:	21 e0       	ldi	r18, 0x01	; 1
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	b9 01       	movw	r22, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <nrk_gpio_direction+0x120>
    1680:	66 0f       	add	r22, r22
    1682:	77 1f       	adc	r23, r23
    1684:	8a 95       	dec	r24
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <nrk_gpio_direction+0x11c>
    1688:	cb 01       	movw	r24, r22
    168a:	84 2b       	or	r24, r20
    168c:	84 b9       	out	0x04, r24	; 4
    168e:	40 c0       	rjmp	.+128    	; 0x1710 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    1690:	47 b1       	in	r20, 0x07	; 7
    1692:	21 e0       	ldi	r18, 0x01	; 1
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	b9 01       	movw	r22, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <nrk_gpio_direction+0x13a>
    169a:	66 0f       	add	r22, r22
    169c:	77 1f       	adc	r23, r23
    169e:	8a 95       	dec	r24
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <nrk_gpio_direction+0x136>
    16a2:	cb 01       	movw	r24, r22
    16a4:	84 2b       	or	r24, r20
    16a6:	87 b9       	out	0x07, r24	; 7
    16a8:	33 c0       	rjmp	.+102    	; 0x1710 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    16aa:	4a b1       	in	r20, 0x0a	; 10
    16ac:	21 e0       	ldi	r18, 0x01	; 1
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	b9 01       	movw	r22, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <nrk_gpio_direction+0x154>
    16b4:	66 0f       	add	r22, r22
    16b6:	77 1f       	adc	r23, r23
    16b8:	8a 95       	dec	r24
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <nrk_gpio_direction+0x150>
    16bc:	cb 01       	movw	r24, r22
    16be:	84 2b       	or	r24, r20
    16c0:	8a b9       	out	0x0a, r24	; 10
    16c2:	26 c0       	rjmp	.+76     	; 0x1710 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    16c4:	4d b1       	in	r20, 0x0d	; 13
    16c6:	21 e0       	ldi	r18, 0x01	; 1
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	b9 01       	movw	r22, r18
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <nrk_gpio_direction+0x16e>
    16ce:	66 0f       	add	r22, r22
    16d0:	77 1f       	adc	r23, r23
    16d2:	8a 95       	dec	r24
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <nrk_gpio_direction+0x16a>
    16d6:	cb 01       	movw	r24, r22
    16d8:	84 2b       	or	r24, r20
    16da:	8d b9       	out	0x0d, r24	; 13
    16dc:	19 c0       	rjmp	.+50     	; 0x1710 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    16de:	40 b3       	in	r20, 0x10	; 16
    16e0:	21 e0       	ldi	r18, 0x01	; 1
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	b9 01       	movw	r22, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <nrk_gpio_direction+0x188>
    16e8:	66 0f       	add	r22, r22
    16ea:	77 1f       	adc	r23, r23
    16ec:	8a 95       	dec	r24
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <nrk_gpio_direction+0x184>
    16f0:	cb 01       	movw	r24, r22
    16f2:	84 2b       	or	r24, r20
    16f4:	80 bb       	out	0x10, r24	; 16
    16f6:	0c c0       	rjmp	.+24     	; 0x1710 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    16f8:	43 b3       	in	r20, 0x13	; 19
    16fa:	21 e0       	ldi	r18, 0x01	; 1
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	b9 01       	movw	r22, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <nrk_gpio_direction+0x1a2>
    1702:	66 0f       	add	r22, r22
    1704:	77 1f       	adc	r23, r23
    1706:	8a 95       	dec	r24
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <nrk_gpio_direction+0x19e>
    170a:	cb 01       	movw	r24, r22
    170c:	84 2b       	or	r24, r20
    170e:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    1710:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    1712:	08 95       	ret
                        default: return -1;
    1714:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    1716:	08 95       	ret

00001718 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    1718:	81 11       	cpse	r24, r1
    171a:	06 c0       	rjmp	.+12     	; 0x1728 <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    171c:	80 b1       	in	r24, 0x00	; 0
    171e:	86 95       	lsr	r24
    1720:	81 70       	andi	r24, 0x01	; 1
    1722:	91 e0       	ldi	r25, 0x01	; 1
    1724:	89 27       	eor	r24, r25
    1726:	08 95       	ret
	} 
return -1;
    1728:	8f ef       	ldi	r24, 0xFF	; 255
}
    172a:	08 95       	ret

0000172c <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	11 f4       	brne	.+4      	; 0x1734 <nrk_led_toggle+0x8>
    1730:	83 e2       	ldi	r24, 0x23	; 35
    1732:	0d c0       	rjmp	.+26     	; 0x174e <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	91 05       	cpc	r25, r1
    1738:	11 f4       	brne	.+4      	; 0x173e <nrk_led_toggle+0x12>
    173a:	8b e2       	ldi	r24, 0x2B	; 43
    173c:	08 c0       	rjmp	.+16     	; 0x174e <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    173e:	82 30       	cpi	r24, 0x02	; 2
    1740:	91 05       	cpc	r25, r1
    1742:	11 f4       	brne	.+4      	; 0x1748 <nrk_led_toggle+0x1c>
    1744:	83 e3       	ldi	r24, 0x33	; 51
    1746:	03 c0       	rjmp	.+6      	; 0x174e <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    1748:	03 97       	sbiw	r24, 0x03	; 3
    174a:	29 f4       	brne	.+10     	; 0x1756 <nrk_led_toggle+0x2a>
    174c:	8b e3       	ldi	r24, 0x3B	; 59
    174e:	0e 94 a7 09 	call	0x134e	; 0x134e <nrk_gpio_toggle>
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	08 95       	ret
return -1;
    1756:	8f ef       	ldi	r24, 0xFF	; 255
}
    1758:	08 95       	ret

0000175a <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	11 f4       	brne	.+4      	; 0x1762 <nrk_led_clr+0x8>
    175e:	83 e2       	ldi	r24, 0x23	; 35
    1760:	0d c0       	rjmp	.+26     	; 0x177c <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    1762:	81 30       	cpi	r24, 0x01	; 1
    1764:	91 05       	cpc	r25, r1
    1766:	11 f4       	brne	.+4      	; 0x176c <nrk_led_clr+0x12>
    1768:	8b e2       	ldi	r24, 0x2B	; 43
    176a:	08 c0       	rjmp	.+16     	; 0x177c <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    176c:	82 30       	cpi	r24, 0x02	; 2
    176e:	91 05       	cpc	r25, r1
    1770:	11 f4       	brne	.+4      	; 0x1776 <nrk_led_clr+0x1c>
    1772:	83 e3       	ldi	r24, 0x33	; 51
    1774:	03 c0       	rjmp	.+6      	; 0x177c <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    1776:	03 97       	sbiw	r24, 0x03	; 3
    1778:	29 f4       	brne	.+10     	; 0x1784 <nrk_led_clr+0x2a>
    177a:	8b e3       	ldi	r24, 0x3B	; 59
    177c:	0e 94 94 08 	call	0x1128	; 0x1128 <nrk_gpio_set>
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	08 95       	ret
return -1;
    1784:	8f ef       	ldi	r24, 0xFF	; 255
}
    1786:	08 95       	ret

00001788 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	11 f4       	brne	.+4      	; 0x1790 <nrk_led_set+0x8>
    178c:	83 e2       	ldi	r24, 0x23	; 35
    178e:	0d c0       	rjmp	.+26     	; 0x17aa <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	91 05       	cpc	r25, r1
    1794:	11 f4       	brne	.+4      	; 0x179a <nrk_led_set+0x12>
    1796:	8b e2       	ldi	r24, 0x2B	; 43
    1798:	08 c0       	rjmp	.+16     	; 0x17aa <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    179a:	82 30       	cpi	r24, 0x02	; 2
    179c:	91 05       	cpc	r25, r1
    179e:	11 f4       	brne	.+4      	; 0x17a4 <nrk_led_set+0x1c>
    17a0:	83 e3       	ldi	r24, 0x33	; 51
    17a2:	03 c0       	rjmp	.+6      	; 0x17aa <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    17a4:	03 97       	sbiw	r24, 0x03	; 3
    17a6:	29 f4       	brne	.+10     	; 0x17b2 <nrk_led_set+0x2a>
    17a8:	8b e3       	ldi	r24, 0x3B	; 59
    17aa:	0e 94 05 09 	call	0x120a	; 0x120a <nrk_gpio_clr>
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	08 95       	ret
return -1;
    17b2:	8f ef       	ldi	r24, 0xFF	; 255
}
    17b4:	08 95       	ret

000017b6 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    17b6:	88 23       	and	r24, r24
    17b8:	19 f0       	breq	.+6      	; 0x17c0 <nrk_gpio_pullups+0xa>
    17ba:	85 b7       	in	r24, 0x35	; 53
    17bc:	8f 7e       	andi	r24, 0xEF	; 239
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    17c0:	85 b7       	in	r24, 0x35	; 53
    17c2:	80 61       	ori	r24, 0x10	; 16
    17c4:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	08 95       	ret

000017ca <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    17ca:	90 91 c8 00 	lds	r25, 0x00C8
    17ce:	95 ff       	sbrs	r25, 5
    17d0:	fc cf       	rjmp	.-8      	; 0x17ca <putc1>
    17d2:	80 93 ce 00 	sts	0x00CE, r24
    17d6:	08 95       	ret

000017d8 <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    17d8:	90 93 c5 00 	sts	0x00C5, r25
    17dc:	80 93 c4 00 	sts	0x00C4, r24
    17e0:	86 e0       	ldi	r24, 0x06	; 6
    17e2:	80 93 c2 00 	sts	0x00C2, r24
    17e6:	e1 ec       	ldi	r30, 0xC1	; 193
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	8b 7f       	andi	r24, 0xFB	; 251
    17ee:	80 83       	st	Z, r24
    17f0:	a0 ec       	ldi	r26, 0xC0	; 192
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	8c 91       	ld	r24, X
    17f6:	82 60       	ori	r24, 0x02	; 2
    17f8:	8c 93       	st	X, r24
ENABLE_UART0();
    17fa:	80 81       	ld	r24, Z
    17fc:	88 61       	ori	r24, 0x18	; 24
    17fe:	80 83       	st	Z, r24
    1800:	08 95       	ret

00001802 <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    1802:	90 93 cd 00 	sts	0x00CD, r25
    1806:	80 93 cc 00 	sts	0x00CC, r24
    180a:	86 e0       	ldi	r24, 0x06	; 6
    180c:	80 93 ca 00 	sts	0x00CA, r24
    1810:	e9 ec       	ldi	r30, 0xC9	; 201
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	8b 7f       	andi	r24, 0xFB	; 251
    1818:	80 83       	st	Z, r24
    181a:	a8 ec       	ldi	r26, 0xC8	; 200
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	8c 91       	ld	r24, X
    1820:	82 60       	ori	r24, 0x02	; 2
    1822:	8c 93       	st	X, r24
ENABLE_UART1();
    1824:	80 81       	ld	r24, Z
    1826:	88 61       	ori	r24, 0x18	; 24
    1828:	80 83       	st	Z, r24
    182a:	08 95       	ret

0000182c <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    182c:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    1830:	63 e5       	ldi	r22, 0x53	; 83
    1832:	78 e0       	ldi	r23, 0x08	; 8
    1834:	8c eb       	ldi	r24, 0xBC	; 188
    1836:	97 e0       	ldi	r25, 0x07	; 7
    1838:	0e 94 91 25 	call	0x4b22	; 0x4b22 <fdevopen>
    183c:	90 93 a2 06 	sts	0x06A2, r25
    1840:	80 93 a1 06 	sts	0x06A1, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    1844:	63 e5       	ldi	r22, 0x53	; 83
    1846:	78 e0       	ldi	r23, 0x08	; 8
    1848:	8c eb       	ldi	r24, 0xBC	; 188
    184a:	97 e0       	ldi	r25, 0x07	; 7
    184c:	0e 94 91 25 	call	0x4b22	; 0x4b22 <fdevopen>
    1850:	90 93 a0 06 	sts	0x06A0, r25
    1854:	80 93 9f 06 	sts	0x069F, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    1858:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <nrk_signal_create>
    185c:	80 93 97 03 	sts	0x0397, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    1860:	8f 3f       	cpi	r24, 0xFF	; 255
    1862:	19 f4       	brne	.+6      	; 0x186a <nrk_setup_uart+0x3e>
    1864:	8e e0       	ldi	r24, 0x0E	; 14
    1866:	0e 94 77 10 	call	0x20ee	; 0x20ee <nrk_error_add>
   uart_rx_buf_start=0;
    186a:	10 92 ab 03 	sts	0x03AB, r1
    186e:	10 92 aa 03 	sts	0x03AA, r1
   uart_rx_buf_end=0;
    1872:	10 92 a9 03 	sts	0x03A9, r1
    1876:	10 92 a8 03 	sts	0x03A8, r1
   ENABLE_UART0_RX_INT();
    187a:	80 91 c1 00 	lds	r24, 0x00C1
    187e:	80 68       	ori	r24, 0x80	; 128
    1880:	80 93 c1 00 	sts	0x00C1, r24
    1884:	08 95       	ret

00001886 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    1886:	80 91 c8 00 	lds	r24, 0x00C8
    188a:	87 ff       	sbrs	r24, 7
    188c:	fc cf       	rjmp	.-8      	; 0x1886 <getc1>
    188e:	80 91 c8 00 	lds	r24, 0x00C8
    1892:	8f 77       	andi	r24, 0x7F	; 127
    1894:	80 93 c8 00 	sts	0x00C8, r24
    1898:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    189c:	08 95       	ret

0000189e <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	d1 f7       	brne	.-12     	; 0x189e <halWait>

} // halWait
    18aa:	08 95       	ret

000018ac <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    18ac:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <__eerd_byte_m128rfa1>

000018b0 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    18b0:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <__eewr_byte_m128rfa1>
}
    18b4:	08 95       	ret

000018b6 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    18b6:	ef 92       	push	r14
    18b8:	ff 92       	push	r15
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__eerd_byte_m128rfa1>
    18cc:	18 2f       	mov	r17, r24
    18ce:	f7 01       	movw	r30, r14
    18d0:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__eerd_byte_m128rfa1>
    18da:	08 2f       	mov	r16, r24
    18dc:	f7 01       	movw	r30, r14
    18de:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__eerd_byte_m128rfa1>
    18e8:	d8 2f       	mov	r29, r24
    18ea:	f7 01       	movw	r30, r14
    18ec:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    18ee:	83 e0       	ldi	r24, 0x03	; 3
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__eerd_byte_m128rfa1>
    18f6:	c8 2f       	mov	r28, r24
    18f8:	f7 01       	movw	r30, r14
    18fa:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    18fc:	84 e0       	ldi	r24, 0x04	; 4
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__eerd_byte_m128rfa1>
    1904:	10 0f       	add	r17, r16
    1906:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    1908:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    190a:	8c 17       	cp	r24, r28
    190c:	11 f0       	breq	.+4      	; 0x1912 <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    190e:	8f ef       	ldi	r24, 0xFF	; 255
    1910:	01 c0       	rjmp	.+2      	; 0x1914 <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    1912:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	ff 90       	pop	r15
    191e:	ef 90       	pop	r14
    1920:	08 95       	ret

00001922 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    1928:	85 e0       	ldi	r24, 0x05	; 5
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__eerd_byte_m128rfa1>
    1930:	88 83       	st	Y, r24
return NRK_OK;
}
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	08 95       	ret

0000193a <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    193a:	fc 01       	movw	r30, r24
    193c:	60 81       	ld	r22, Z
    193e:	86 e0       	ldi	r24, 0x06	; 6
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	08 95       	ret

0000194a <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    1950:	86 e0       	ldi	r24, 0x06	; 6
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__eerd_byte_m128rfa1>
    1958:	88 83       	st	Y, r24
  return NRK_OK;
}
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	08 95       	ret

00001962 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	8c 01       	movw	r16, r24
    196c:	c0 e0       	ldi	r28, 0x00	; 0
    196e:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    1970:	ce 01       	movw	r24, r28
    1972:	08 96       	adiw	r24, 0x08	; 8
    1974:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__eerd_byte_m128rfa1>
    1978:	f8 01       	movw	r30, r16
    197a:	81 93       	st	Z+, r24
    197c:	8f 01       	movw	r16, r30
    197e:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    1980:	c0 31       	cpi	r28, 0x10	; 16
    1982:	d1 05       	cpc	r29, r1
    1984:	a9 f7       	brne	.-22     	; 0x1970 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
    1990:	08 95       	ret

00001992 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	8c 01       	movw	r16, r24
    199c:	c0 e0       	ldi	r28, 0x00	; 0
    199e:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    19a0:	f8 01       	movw	r30, r16
    19a2:	61 91       	ld	r22, Z+
    19a4:	8f 01       	movw	r16, r30
    19a6:	ce 01       	movw	r24, r28
    19a8:	08 96       	adiw	r24, 0x08	; 8
    19aa:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <__eewr_byte_m128rfa1>
    19ae:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    19b0:	c0 31       	cpi	r28, 0x10	; 16
    19b2:	d1 05       	cpc	r29, r1
    19b4:	a9 f7       	brne	.-22     	; 0x19a0 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	08 95       	ret

000019c2 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    19c8:	87 e0       	ldi	r24, 0x07	; 7
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <__eerd_byte_m128rfa1>
    19d0:	88 83       	st	Y, r24
  return NRK_OK;
}
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	08 95       	ret

000019da <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    19da:	fc 01       	movw	r30, r24
    19dc:	60 81       	ld	r22, Z
    19de:	87 e0       	ldi	r24, 0x07	; 7
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	08 95       	ret

000019ea <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    19ea:	f8 94       	cli
    19ec:	08 95       	ret

000019ee <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    19ee:	78 94       	sei
    19f0:	08 95       	ret

000019f2 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    19f2:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <nrk_int_disable>
while(1);
    19f6:	ff cf       	rjmp	.-2      	; 0x19f6 <nrk_halt+0x4>

000019f8 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	a3 97       	sbiw	r28, 0x23	; 35
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    1a0c:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <nrk_signal_create>
    1a10:	80 93 01 06 	sts	0x0601, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    1a14:	8f 3f       	cpi	r24, 0xFF	; 255
    1a16:	21 f4       	brne	.+8      	; 0x1a20 <nrk_init+0x28>
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	8e e0       	ldi	r24, 0x0E	; 14
    1a1c:	0e 94 85 10 	call	0x210a	; 0x210a <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    1a20:	0e 94 55 20 	call	0x40aa	; 0x40aa <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    1a24:	80 ff       	sbrs	r24, 0
    1a26:	04 c0       	rjmp	.+8      	; 0x1a30 <nrk_init+0x38>
    1a28:	60 e0       	ldi	r22, 0x00	; 0
    1a2a:	86 e0       	ldi	r24, 0x06	; 6
    1a2c:	0e 94 85 10 	call	0x210a	; 0x210a <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    1a30:	10 92 04 06 	sts	0x0604, r1
    nrk_cur_task_TCB = NULL;
    1a34:	10 92 12 06 	sts	0x0612, r1
    1a38:	10 92 11 06 	sts	0x0611, r1
    
    nrk_high_ready_TCB = NULL;
    1a3c:	10 92 03 06 	sts	0x0603, r1
    1a40:	10 92 02 06 	sts	0x0602, r1
    nrk_high_ready_prio = 0; 
    1a44:	10 92 13 06 	sts	0x0613, r1
	nrk_stats_reset();
   #endif

    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    1a48:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <_nrk_reserve_init>
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    1a4c:	10 92 10 06 	sts	0x0610, r1
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    1a54:	2f ef       	ldi	r18, 0xFF	; 255
    1a56:	fc 01       	movw	r30, r24
    1a58:	ec 50       	subi	r30, 0x0C	; 12
    1a5a:	fa 4f       	sbci	r31, 0xFA	; 250
    1a5c:	20 83       	st	Z, r18
    nrk_sem_list[i].value=-1;
    1a5e:	22 83       	std	Z+2, r18	; 0x02
    nrk_sem_list[i].resource_ceiling=-1;
    1a60:	21 83       	std	Z+1, r18	; 0x01
    1a62:	03 96       	adiw	r24, 0x03	; 3
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    1a64:	8c 30       	cpi	r24, 0x0C	; 12
    1a66:	91 05       	cpc	r25, r1
    1a68:	b1 f7       	brne	.-20     	; 0x1a56 <nrk_init+0x5e>
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1a6e:	33 e6       	ldi	r19, 0x63	; 99
        nrk_task_TCB[i].task_ID = -1; 
    1a70:	2f ef       	ldi	r18, 0xFF	; 255
    1a72:	fc 01       	movw	r30, r24
    1a74:	e0 51       	subi	r30, 0x10	; 16
    1a76:	fb 4f       	sbci	r31, 0xFB	; 251
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1a78:	32 87       	std	Z+10, r19	; 0x0a
        nrk_task_TCB[i].task_ID = -1; 
    1a7a:	20 87       	std	Z+8, r18	; 0x08
    1a7c:	8b 96       	adiw	r24, 0x2b	; 43
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    1a7e:	82 30       	cpi	r24, 0x02	; 2
    1a80:	41 e0       	ldi	r20, 0x01	; 1
    1a82:	94 07       	cpc	r25, r20
    1a84:	b1 f7       	brne	.-20     	; 0x1a72 <nrk_init+0x7a>
    1a86:	e4 e1       	ldi	r30, 0x14	; 20
    1a88:	f6 e0       	ldi	r31, 0x06	; 6
    1a8a:	cf 01       	movw	r24, r30
    1a8c:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1a8e:	94 83       	std	Z+4, r25	; 0x04
    1a90:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1a92:	f7 83       	std	Z+7, r31	; 0x07
    1a94:	e6 83       	std	Z+6, r30	; 0x06
    1a96:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    1a98:	86 e0       	ldi	r24, 0x06	; 6
    1a9a:	e2 33       	cpi	r30, 0x32	; 50
    1a9c:	f8 07       	cpc	r31, r24
    1a9e:	a9 f7       	brne	.-22     	; 0x1a8a <nrk_init+0x92>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    1aa0:	10 92 16 06 	sts	0x0616, r1
    1aa4:	10 92 15 06 	sts	0x0615, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    1aa8:	10 92 36 06 	sts	0x0636, r1
    1aac:	10 92 35 06 	sts	0x0635, r1
	_head_node = NULL;
    1ab0:	10 92 07 06 	sts	0x0607, r1
    1ab4:	10 92 06 06 	sts	0x0606, r1
	_free_node = &_nrk_readyQ[0];
    1ab8:	84 e1       	ldi	r24, 0x14	; 20
    1aba:	96 e0       	ldi	r25, 0x06	; 6
    1abc:	90 93 ef 04 	sts	0x04EF, r25
    1ac0:	80 93 ee 04 	sts	0x04EE, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    1ac4:	6c e6       	ldi	r22, 0x6C	; 108
    1ac6:	7a e1       	ldi	r23, 0x1A	; 26
    1ac8:	ce 01       	movw	r24, r28
    1aca:	01 96       	adiw	r24, 0x01	; 1
    1acc:	0e 94 8d 22 	call	0x451a	; 0x451a <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    1ad0:	40 e8       	ldi	r20, 0x80	; 128
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	61 e3       	ldi	r22, 0x31	; 49
    1ad6:	74 e0       	ldi	r23, 0x04	; 4
    1ad8:	ce 01       	movw	r24, r28
    1ada:	01 96       	adiw	r24, 0x01	; 1
    1adc:	0e 94 91 22 	call	0x4522	; 0x4522 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    1ae0:	85 e5       	ldi	r24, 0x55	; 85
    1ae2:	80 93 31 04 	sts	0x0431, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    1ae6:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    1ae8:	1c 86       	std	Y+12, r1	; 0x0c
    1aea:	1d 86       	std	Y+13, r1	; 0x0d
    1aec:	1e 86       	std	Y+14, r1	; 0x0e
    1aee:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    1af0:	18 8a       	std	Y+16, r1	; 0x10
    1af2:	19 8a       	std	Y+17, r1	; 0x11
    1af4:	1a 8a       	std	Y+18, r1	; 0x12
    1af6:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    1af8:	1c 8a       	std	Y+20, r1	; 0x14
    1afa:	1d 8a       	std	Y+21, r1	; 0x15
    1afc:	1e 8a       	std	Y+22, r1	; 0x16
    1afe:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    1b00:	18 8e       	std	Y+24, r1	; 0x18
    1b02:	19 8e       	std	Y+25, r1	; 0x19
    1b04:	1a 8e       	std	Y+26, r1	; 0x1a
    1b06:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    1b08:	1c 8e       	std	Y+28, r1	; 0x1c
    1b0a:	1d 8e       	std	Y+29, r1	; 0x1d
    1b0c:	1e 8e       	std	Y+30, r1	; 0x1e
    1b0e:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    1b10:	18 a2       	std	Y+32, r1	; 0x20
    1b12:	19 a2       	std	Y+33, r1	; 0x21
    1b14:	1a a2       	std	Y+34, r1	; 0x22
    1b16:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    1b1c:	92 e0       	ldi	r25, 0x02	; 2
    1b1e:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    1b20:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    1b22:	ce 01       	movw	r24, r28
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <nrk_activate_task>
	
}
    1b2a:	a3 96       	adiw	r28, 0x23	; 35
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	f8 94       	cli
    1b30:	de bf       	out	0x3e, r29	; 62
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	cd bf       	out	0x3d, r28	; 61
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	08 95       	ret

00001b3c <nrk_start>:




void nrk_start (void)
{
    1b3c:	08 ef       	ldi	r16, 0xF8	; 248
    1b3e:	14 e0       	ldi	r17, 0x04	; 4
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1b40:	c0 e0       	ldi	r28, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    1b42:	f8 01       	movw	r30, r16
    1b44:	d0 80       	ld	r13, Z
	// only check activated tasks
	if(task_ID!=-1)
    1b46:	ff ef       	ldi	r31, 0xFF	; 255
    1b48:	df 12       	cpse	r13, r31
    1b4a:	22 c0       	rjmp	.+68     	; 0x1b90 <nrk_start+0x54>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1b4c:	cf 5f       	subi	r28, 0xFF	; 255
    1b4e:	05 5d       	subi	r16, 0xD5	; 213
    1b50:	1f 4f       	sbci	r17, 0xFF	; 255
    1b52:	c6 30       	cpi	r28, 0x06	; 6
    1b54:	b1 f7       	brne	.-20     	; 0x1b42 <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    1b56:	0e 94 9c 14 	call	0x2938	; 0x2938 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    1b5a:	2b e2       	ldi	r18, 0x2B	; 43
    1b5c:	82 02       	muls	r24, r18
    1b5e:	c0 01       	movw	r24, r0
    1b60:	11 24       	eor	r1, r1
    1b62:	fc 01       	movw	r30, r24
    1b64:	e0 51       	subi	r30, 0x10	; 16
    1b66:	fb 4f       	sbci	r31, 0xFB	; 251
    1b68:	82 85       	ldd	r24, Z+10	; 0x0a
    1b6a:	80 93 13 06 	sts	0x0613, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    1b6e:	f0 93 12 06 	sts	0x0612, r31
    1b72:	e0 93 11 06 	sts	0x0611, r30
    1b76:	f0 93 03 06 	sts	0x0603, r31
    1b7a:	e0 93 02 06 	sts	0x0602, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    1b7e:	80 93 04 06 	sts	0x0604, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    1b82:	0e 94 03 23 	call	0x4606	; 0x4606 <nrk_target_start>
    nrk_stack_pointer_init(); 
    1b86:	0e 94 ed 22 	call	0x45da	; 0x45da <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    1b8a:	0e 94 07 23 	call	0x460e	; 0x460e <nrk_start_high_ready_task>
    1b8e:	16 c0       	rjmp	.+44     	; 0x1bbc <nrk_start+0x80>
    1b90:	88 ef       	ldi	r24, 0xF8	; 248
    1b92:	e8 2e       	mov	r14, r24
    1b94:	84 e0       	ldi	r24, 0x04	; 4
    1b96:	f8 2e       	mov	r15, r24
    1b98:	d0 e0       	ldi	r29, 0x00	; 0
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    1b9a:	cd 17       	cp	r28, r29
    1b9c:	41 f0       	breq	.+16     	; 0x1bae <nrk_start+0x72>
    1b9e:	f7 01       	movw	r30, r14
    1ba0:	80 81       	ld	r24, Z
    1ba2:	d8 12       	cpse	r13, r24
    1ba4:	04 c0       	rjmp	.+8      	; 0x1bae <nrk_start+0x72>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    1ba6:	6d 2d       	mov	r22, r13
    1ba8:	85 e0       	ldi	r24, 0x05	; 5
    1baa:	0e 94 85 10 	call	0x210a	; 0x210a <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    1bae:	df 5f       	subi	r29, 0xFF	; 255
    1bb0:	fb e2       	ldi	r31, 0x2B	; 43
    1bb2:	ef 0e       	add	r14, r31
    1bb4:	f1 1c       	adc	r15, r1
    1bb6:	d6 30       	cpi	r29, 0x06	; 6
    1bb8:	81 f7       	brne	.-32     	; 0x1b9a <nrk_start+0x5e>
    1bba:	c8 cf       	rjmp	.-112    	; 0x1b4c <nrk_start+0x10>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    1bbc:	ff cf       	rjmp	.-2      	; 0x1bbc <nrk_start+0x80>

00001bbe <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    1bbe:	cf 92       	push	r12
    1bc0:	df 92       	push	r13
    1bc2:	ef 92       	push	r14
    1bc4:	ff 92       	push	r15
    1bc6:	0f 93       	push	r16
    1bc8:	1f 93       	push	r17
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	ec 01       	movw	r28, r24
    1bd0:	8b 01       	movw	r16, r22
    1bd2:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    1bd4:	89 85       	ldd	r24, Y+9	; 0x09
    1bd6:	82 30       	cpi	r24, 0x02	; 2
    1bd8:	21 f0       	breq	.+8      	; 0x1be2 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    1bda:	80 91 00 06 	lds	r24, 0x0600
    1bde:	88 83       	st	Y, r24
    1be0:	01 c0       	rjmp	.+2      	; 0x1be4 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    1be2:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    1be4:	80 91 00 06 	lds	r24, 0x0600
    1be8:	86 30       	cpi	r24, 0x06	; 6
    1bea:	20 f0       	brcs	.+8      	; 0x1bf4 <nrk_TCB_init+0x36>
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	87 e0       	ldi	r24, 0x07	; 7
    1bf0:	0e 94 85 10 	call	0x210a	; 0x210a <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    1bf4:	89 85       	ldd	r24, Y+9	; 0x09
    1bf6:	82 30       	cpi	r24, 0x02	; 2
    1bf8:	29 f0       	breq	.+10     	; 0x1c04 <nrk_TCB_init+0x46>
    1bfa:	80 91 00 06 	lds	r24, 0x0600
    1bfe:	8f 5f       	subi	r24, 0xFF	; 255
    1c00:	80 93 00 06 	sts	0x0600, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    1c04:	80 91 00 06 	lds	r24, 0x0600
    1c08:	81 11       	cpse	r24, r1
    1c0a:	03 c0       	rjmp	.+6      	; 0x1c12 <nrk_TCB_init+0x54>
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	80 93 00 06 	sts	0x0600, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    1c12:	38 81       	ld	r19, Y
    1c14:	2b e2       	ldi	r18, 0x2B	; 43
    1c16:	32 03       	mulsu	r19, r18
    1c18:	f0 01       	movw	r30, r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	e0 51       	subi	r30, 0x10	; 16
    1c1e:	fb 4f       	sbci	r31, 0xFB	; 251
    1c20:	11 83       	std	Z+1, r17	; 0x01
    1c22:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    1c24:	88 85       	ldd	r24, Y+8	; 0x08
    1c26:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    1c28:	38 81       	ld	r19, Y
    1c2a:	32 03       	mulsu	r19, r18
    1c2c:	f0 01       	movw	r30, r0
    1c2e:	11 24       	eor	r1, r1
    1c30:	e0 51       	subi	r30, 0x10	; 16
    1c32:	fb 4f       	sbci	r31, 0xFB	; 251
    1c34:	83 e0       	ldi	r24, 0x03	; 3
    1c36:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    1c38:	38 81       	ld	r19, Y
    1c3a:	32 03       	mulsu	r19, r18
    1c3c:	f0 01       	movw	r30, r0
    1c3e:	11 24       	eor	r1, r1
    1c40:	e0 51       	subi	r30, 0x10	; 16
    1c42:	fb 4f       	sbci	r31, 0xFB	; 251
    1c44:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    1c46:	08 81       	ld	r16, Y
    1c48:	02 03       	mulsu	r16, r18
    1c4a:	80 01       	movw	r16, r0
    1c4c:	11 24       	eor	r1, r1
    1c4e:	00 51       	subi	r16, 0x10	; 16
    1c50:	1b 4f       	sbci	r17, 0xFB	; 251
    1c52:	f8 01       	movw	r30, r16
    1c54:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    1c56:	ce 01       	movw	r24, r28
    1c58:	0b 96       	adiw	r24, 0x0b	; 11
    1c5a:	0e 94 02 1a 	call	0x3404	; 0x3404 <_nrk_time_to_ticks_long>
    1c5e:	f8 01       	movw	r30, r16
    1c60:	61 a3       	std	Z+33, r22	; 0x21
    1c62:	72 a3       	std	Z+34, r23	; 0x22
    1c64:	83 a3       	std	Z+35, r24	; 0x23
    1c66:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    1c68:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c6a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c6c:	ad 85       	ldd	r26, Y+13	; 0x0d
    1c6e:	be 85       	ldd	r27, Y+14	; 0x0e
    1c70:	88 33       	cpi	r24, 0x38	; 56
    1c72:	99 48       	sbci	r25, 0x89	; 137
    1c74:	a1 44       	sbci	r26, 0x41	; 65
    1c76:	b1 05       	cpc	r27, r1
    1c78:	20 f0       	brcs	.+8      	; 0x1c82 <nrk_TCB_init+0xc4>
    1c7a:	68 81       	ld	r22, Y
    1c7c:	86 e1       	ldi	r24, 0x16	; 22
    1c7e:	0e 94 85 10 	call	0x210a	; 0x210a <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    1c82:	c8 80       	ld	r12, Y
    1c84:	dd 24       	eor	r13, r13
    1c86:	c7 fc       	sbrc	r12, 7
    1c88:	d0 94       	com	r13
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	4b 96       	adiw	r24, 0x1b	; 27
    1c8e:	0e 94 02 1a 	call	0x3404	; 0x3404 <_nrk_time_to_ticks_long>
    1c92:	1b e2       	ldi	r17, 0x2B	; 43
    1c94:	1c 9d       	mul	r17, r12
    1c96:	f0 01       	movw	r30, r0
    1c98:	1d 9d       	mul	r17, r13
    1c9a:	f0 0d       	add	r31, r0
    1c9c:	11 24       	eor	r1, r1
    1c9e:	e0 51       	subi	r30, 0x10	; 16
    1ca0:	fb 4f       	sbci	r31, 0xFB	; 251
    1ca2:	65 8b       	std	Z+21, r22	; 0x15
    1ca4:	76 8b       	std	Z+22, r23	; 0x16
    1ca6:	87 8b       	std	Z+23, r24	; 0x17
    1ca8:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    1caa:	28 81       	ld	r18, Y
    1cac:	21 03       	mulsu	r18, r17
    1cae:	c0 01       	movw	r24, r0
    1cb0:	11 24       	eor	r1, r1
    1cb2:	9c 01       	movw	r18, r24
    1cb4:	20 51       	subi	r18, 0x10	; 16
    1cb6:	3b 4f       	sbci	r19, 0xFB	; 251
    1cb8:	69 01       	movw	r12, r18
    1cba:	f9 01       	movw	r30, r18
    1cbc:	45 89       	ldd	r20, Z+21	; 0x15
    1cbe:	56 89       	ldd	r21, Z+22	; 0x16
    1cc0:	67 89       	ldd	r22, Z+23	; 0x17
    1cc2:	70 8d       	ldd	r23, Z+24	; 0x18
    1cc4:	81 a1       	ldd	r24, Z+33	; 0x21
    1cc6:	92 a1       	ldd	r25, Z+34	; 0x22
    1cc8:	a3 a1       	ldd	r26, Z+35	; 0x23
    1cca:	b4 a1       	ldd	r27, Z+36	; 0x24
    1ccc:	84 0f       	add	r24, r20
    1cce:	95 1f       	adc	r25, r21
    1cd0:	a6 1f       	adc	r26, r22
    1cd2:	b7 1f       	adc	r27, r23
    1cd4:	81 8f       	std	Z+25, r24	; 0x19
    1cd6:	92 8f       	std	Z+26, r25	; 0x1a
    1cd8:	a3 8f       	std	Z+27, r26	; 0x1b
    1cda:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    1cdc:	ce 01       	movw	r24, r28
    1cde:	43 96       	adiw	r24, 0x13	; 19
    1ce0:	0e 94 02 1a 	call	0x3404	; 0x3404 <_nrk_time_to_ticks_long>
    1ce4:	f6 01       	movw	r30, r12
    1ce6:	65 a3       	std	Z+37, r22	; 0x25
    1ce8:	76 a3       	std	Z+38, r23	; 0x26
    1cea:	87 a3       	std	Z+39, r24	; 0x27
    1cec:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    1cee:	28 81       	ld	r18, Y
    1cf0:	21 03       	mulsu	r18, r17
    1cf2:	f0 01       	movw	r30, r0
    1cf4:	11 24       	eor	r1, r1
    1cf6:	e0 51       	subi	r30, 0x10	; 16
    1cf8:	fb 4f       	sbci	r31, 0xFB	; 251
    1cfa:	85 a1       	ldd	r24, Z+37	; 0x25
    1cfc:	96 a1       	ldd	r25, Z+38	; 0x26
    1cfe:	a7 a1       	ldd	r26, Z+39	; 0x27
    1d00:	b0 a5       	ldd	r27, Z+40	; 0x28
    1d02:	85 8f       	std	Z+29, r24	; 0x1d
    1d04:	96 8f       	std	Z+30, r25	; 0x1e
    1d06:	a7 8f       	std	Z+31, r26	; 0x1f
    1d08:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	92 a7       	std	Z+42, r25	; 0x2a
    1d10:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    1d12:	f3 82       	std	Z+3, r15	; 0x03
    1d14:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    1d16:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	1f 91       	pop	r17
    1d1e:	0f 91       	pop	r16
    1d20:	ff 90       	pop	r15
    1d22:	ef 90       	pop	r14
    1d24:	df 90       	pop	r13
    1d26:	cf 90       	pop	r12
    1d28:	08 95       	ret

00001d2a <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    1d2a:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <_nrk_scheduler>

00001d2e <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    1d2e:	85 e6       	ldi	r24, 0x65	; 101
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	08 95       	ret

00001d34 <_nrk_errno_set>:
    1d34:	e0 91 11 06 	lds	r30, 0x0611
    1d38:	f0 91 12 06 	lds	r31, 0x0612
    1d3c:	84 87       	std	Z+12, r24	; 0x0c
    1d3e:	08 95       	ret

00001d40 <nrk_errno_get>:
    nrk_cur_task_TCB->errno = error_code;
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    1d40:	e0 91 11 06 	lds	r30, 0x0611
    1d44:	f0 91 12 06 	lds	r31, 0x0612
}
    1d48:	84 85       	ldd	r24, Z+12	; 0x0c
    1d4a:	08 95       	ret

00001d4c <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    1d4c:	fc 01       	movw	r30, r24
    if (error_num == 0)
    1d4e:	80 91 30 04 	lds	r24, 0x0430
    1d52:	88 23       	and	r24, r24
    1d54:	31 f0       	breq	.+12     	; 0x1d62 <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    1d56:	db 01       	movw	r26, r22
    1d58:	8c 93       	st	X, r24
    *task_id = error_task;
    1d5a:	80 91 af 03 	lds	r24, 0x03AF
    1d5e:	80 83       	st	Z, r24
    return 1;
    1d60:	81 e0       	ldi	r24, 0x01	; 1
}
    1d62:	08 95       	ret

00001d64 <nrk_error_handle>:
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    1d64:	10 92 30 04 	sts	0x0430, r1
    1d68:	08 95       	ret

00001d6a <clear_regs>:
}

inline void clear_regs()
{

        GTCCR=0;
    1d6a:	13 bc       	out	0x23, r1	; 35
        ASSR=0;
    1d6c:	10 92 b6 00 	sts	0x00B6, r1

        OCR0B=0;
    1d70:	18 bc       	out	0x28, r1	; 40
        OCR0A=0;
    1d72:	17 bc       	out	0x27, r1	; 39
        TCNT0=0;
    1d74:	16 bc       	out	0x26, r1	; 38
        TCCR0B=0;
    1d76:	15 bc       	out	0x25, r1	; 37
        TCCR0A=0;
    1d78:	14 bc       	out	0x24, r1	; 36

        EIMSK=0;
    1d7a:	1d ba       	out	0x1d, r1	; 29
        EIFR=0;
    1d7c:	1c ba       	out	0x1c, r1	; 28
        PCIFR=0;
    1d7e:	1b ba       	out	0x1b, r1	; 27


        OCR3B =0;
    1d80:	10 92 9b 00 	sts	0x009B, r1
    1d84:	10 92 9a 00 	sts	0x009A, r1
        OCR3A =0;
    1d88:	10 92 99 00 	sts	0x0099, r1
    1d8c:	10 92 98 00 	sts	0x0098, r1
        TCNT3 =0;
    1d90:	10 92 95 00 	sts	0x0095, r1
    1d94:	10 92 94 00 	sts	0x0094, r1
        TCCR3B=0;
    1d98:	10 92 91 00 	sts	0x0091, r1
        TCCR3A=0;
    1d9c:	10 92 90 00 	sts	0x0090, r1
        TIFR3=0;
    1da0:	18 ba       	out	0x18, r1	; 24
        TIMSK3=0;
    1da2:	10 92 71 00 	sts	0x0071, r1


        OCR2B =0;
    1da6:	10 92 b4 00 	sts	0x00B4, r1
        OCR2A =0;
    1daa:	10 92 b3 00 	sts	0x00B3, r1
        TCNT2 =0;
    1dae:	10 92 b2 00 	sts	0x00B2, r1
        TCCR2B=0;
    1db2:	10 92 b1 00 	sts	0x00B1, r1
        TCCR2A=0;
    1db6:	e0 eb       	ldi	r30, 0xB0	; 176
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	10 82       	st	Z, r1
        TCCR2A=0;
    1dbc:	10 82       	st	Z, r1
        TIFR2=0;
    1dbe:	17 ba       	out	0x17, r1	; 23
        TIMSK2=0;
    1dc0:	10 92 70 00 	sts	0x0070, r1


	// set all bits to 1 in order to clear
	MCUSR=0xff;
    1dc4:	8f ef       	ldi	r24, 0xFF	; 255
    1dc6:	84 bf       	out	0x34, r24	; 52
    1dc8:	08 95       	ret

00001dca <pause>:
    }

}

void pause()
{
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	1f 92       	push	r1
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1dd4:	19 82       	std	Y+1, r1	; 0x01
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	84 36       	cpi	r24, 0x64	; 100
    1dda:	40 f4       	brcc	.+16     	; 0x1dec <pause+0x22>
        nrk_spin_wait_us (2000);
    1ddc:	80 ed       	ldi	r24, 0xD0	; 208
    1dde:	97 e0       	ldi	r25, 0x07	; 7
    1de0:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	8f 5f       	subi	r24, 0xFF	; 255
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	f5 cf       	rjmp	.-22     	; 0x1dd6 <pause+0xc>
        nrk_spin_wait_us (2000);
}
    1dec:	0f 90       	pop	r0
    1dee:	df 91       	pop	r29
    1df0:	cf 91       	pop	r28
    1df2:	08 95       	ret

00001df4 <blink_dash>:

}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nrk_led_set>
    pause();
    1dfc:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <pause>
    pause();
    1e00:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <pause>
    pause();
    1e04:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <pause>
    nrk_led_clr(GREEN_LED);
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	0e 94 ad 0b 	call	0x175a	; 0x175a <nrk_led_clr>
    pause();
    1e10:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <pause>

00001e14 <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nrk_led_set>
    pause();
    1e1c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <pause>
    nrk_led_clr(GREEN_LED);
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	0e 94 ad 0b 	call	0x175a	; 0x175a <nrk_led_clr>
    pause();
    1e28:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <pause>

00001e2c <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    1e2c:	ff 92       	push	r15
    1e2e:	0f 93       	push	r16
    1e30:	1f 93       	push	r17
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <blink_morse_code_error+0xc>
    1e38:	1f 92       	push	r1
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    1e3e:	1f 92       	push	r1
    1e40:	8f 93       	push	r24
    1e42:	8b e4       	ldi	r24, 0x4B	; 75
    1e44:	93 e0       	ldi	r25, 0x03	; 3
    1e46:	9f 93       	push	r25
    1e48:	8f 93       	push	r24
    1e4a:	8e 01       	movw	r16, r28
    1e4c:	0f 5f       	subi	r16, 0xFF	; 255
    1e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e50:	1f 93       	push	r17
    1e52:	0f 93       	push	r16
    1e54:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <sprintf>

    for(i=0; i<strlen(str); i++ )
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	f1 2c       	mov	r15, r1
    1e66:	f8 01       	movw	r30, r16
    1e68:	01 90       	ld	r0, Z+
    1e6a:	00 20       	and	r0, r0
    1e6c:	e9 f7       	brne	.-6      	; 0x1e68 <blink_morse_code_error+0x3c>
    1e6e:	31 97       	sbiw	r30, 0x01	; 1
    1e70:	e0 1b       	sub	r30, r16
    1e72:	f1 0b       	sbc	r31, r17
    1e74:	8f 2d       	mov	r24, r15
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	8e 17       	cp	r24, r30
    1e7a:	9f 07       	cpc	r25, r31
    1e7c:	08 f0       	brcs	.+2      	; 0x1e80 <blink_morse_code_error+0x54>
    1e7e:	5d c0       	rjmp	.+186    	; 0x1f3a <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    1e80:	f8 01       	movw	r30, r16
    1e82:	e8 0f       	add	r30, r24
    1e84:	f9 1f       	adc	r31, r25
    1e86:	e0 81       	ld	r30, Z
    1e88:	8e 2f       	mov	r24, r30
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	f0 97       	sbiw	r30, 0x30	; 48
    1e90:	ea 30       	cpi	r30, 0x0A	; 10
    1e92:	f1 05       	cpc	r31, r1
    1e94:	08 f0       	brcs	.+2      	; 0x1e98 <blink_morse_code_error+0x6c>
    1e96:	49 c0       	rjmp	.+146    	; 0x1f2a <blink_morse_code_error+0xfe>
    1e98:	e6 54       	subi	r30, 0x46	; 70
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__tablejump2__>
        {
        case '0':
            blink_dash();
    1ea0:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <blink_dash>
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    1ea6:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <blink_dot>
            blink_dash();
    1eaa:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <blink_dash>
            blink_dash();
    1eae:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <blink_dash>
            blink_dash();
    1eb2:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <blink_dash>
            blink_dash();
    1eb6:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <blink_dash>
            break;
    1eba:	37 c0       	rjmp	.+110    	; 0x1f2a <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    1ebc:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <blink_dot>
            blink_dot();
    1ec0:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <blink_dot>
    1ec4:	f4 cf       	rjmp	.-24     	; 0x1eae <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    1ec6:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <blink_dot>
            blink_dot();
    1eca:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <blink_dot>
            blink_dot();
    1ece:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <blink_dot>
    1ed2:	ef cf       	rjmp	.-34     	; 0x1eb2 <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    1ed4:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <blink_dot>
            blink_dot();
    1ed8:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <blink_dot>
            blink_dot();
    1edc:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <blink_dot>
            blink_dot();
    1ee0:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <blink_dot>
    1ee4:	e8 cf       	rjmp	.-48     	; 0x1eb6 <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    1ee6:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <blink_dot>
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    1eec:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <blink_dash>
            blink_dot();
    1ef0:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <blink_dot>
    1ef4:	04 c0       	rjmp	.+8      	; 0x1efe <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    1ef6:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <blink_dash>
            blink_dash();
    1efa:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <blink_dash>
            blink_dot();
    1efe:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <blink_dot>
    1f02:	06 c0       	rjmp	.+12     	; 0x1f10 <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    1f04:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <blink_dash>
            blink_dash();
    1f08:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <blink_dash>
            blink_dash();
    1f0c:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <blink_dash>
            blink_dot();
    1f10:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <blink_dot>
    1f14:	08 c0       	rjmp	.+16     	; 0x1f26 <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    1f16:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <blink_dash>
            blink_dash();
    1f1a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <blink_dash>
            blink_dash();
    1f1e:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <blink_dash>
            blink_dash();
    1f22:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <blink_dash>
            blink_dot();
    1f26:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <blink_dot>
            break;
        }
        pause();
    1f2a:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <pause>
        pause();
    1f2e:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <pause>
        pause();
    1f32:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    1f36:	f3 94       	inc	r15
    1f38:	96 cf       	rjmp	.-212    	; 0x1e66 <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	ff 90       	pop	r15
    1f4a:	08 95       	ret

00001f4c <nrk_error_print>:

}


inline int8_t nrk_error_print ()
{
    1f4c:	0f 93       	push	r16
    1f4e:	1f 93       	push	r17
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
uint8_t i,t;




    if (error_num == 0)
    1f54:	80 91 30 04 	lds	r24, 0x0430
    1f58:	88 23       	and	r24, r24
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <nrk_error_print+0x12>
    1f5c:	c2 c0       	rjmp	.+388    	; 0x20e2 <nrk_error_print+0x196>
        return 0;


// If looping, we need to disable the watchdog and interrupts
#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        nrk_int_disable ();
    1f5e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <nrk_int_disable>
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
        printf ("%d", error_task);
    1f62:	0b e4       	ldi	r16, 0x4B	; 75
    1f64:	13 e0       	ldi	r17, 0x03	; 3
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    1f66:	85 ef       	ldi	r24, 0xF5	; 245
    1f68:	93 e0       	ldi	r25, 0x03	; 3
    1f6a:	0e 94 3e 08 	call	0x107c	; 0x107c <nrk_kprintf>
        printf ("%d", error_task);
    1f6e:	80 91 af 03 	lds	r24, 0x03AF
    1f72:	1f 92       	push	r1
    1f74:	8f 93       	push	r24
    1f76:	1f 93       	push	r17
    1f78:	0f 93       	push	r16
    1f7a:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>
        nrk_kprintf (PSTR ("): "));
    1f7e:	81 ef       	ldi	r24, 0xF1	; 241
    1f80:	93 e0       	ldi	r25, 0x03	; 3
    1f82:	0e 94 3e 08 	call	0x107c	; 0x107c <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	80 91 30 04 	lds	r24, 0x0430
    1f92:	88 31       	cpi	r24, 0x18	; 24
    1f94:	10 f0       	brcs	.+4      	; 0x1f9a <nrk_error_print+0x4e>
            error_num = NRK_UNKOWN;
    1f96:	10 92 30 04 	sts	0x0430, r1
        switch (error_num)
    1f9a:	e0 91 30 04 	lds	r30, 0x0430
    1f9e:	8e 2f       	mov	r24, r30
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	31 97       	sbiw	r30, 0x01	; 1
    1fa6:	e6 31       	cpi	r30, 0x16	; 22
    1fa8:	f1 05       	cpc	r31, r1
    1faa:	08 f0       	brcs	.+2      	; 0x1fae <nrk_error_print+0x62>
    1fac:	46 c0       	rjmp	.+140    	; 0x203a <nrk_error_print+0xee>
    1fae:	ec 53       	subi	r30, 0x3C	; 60
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    1fb6:	85 eb       	ldi	r24, 0xB5	; 181
    1fb8:	93 e0       	ldi	r25, 0x03	; 3
    1fba:	41 c0       	rjmp	.+130    	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    1fbc:	8e e8       	ldi	r24, 0x8E	; 142
    1fbe:	93 e0       	ldi	r25, 0x03	; 3
    1fc0:	3e c0       	rjmp	.+124    	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    1fc2:	8a e7       	ldi	r24, 0x7A	; 122
    1fc4:	93 e0       	ldi	r25, 0x03	; 3
    1fc6:	3b c0       	rjmp	.+118    	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    1fc8:	84 e6       	ldi	r24, 0x64	; 100
    1fca:	93 e0       	ldi	r25, 0x03	; 3
    1fcc:	38 c0       	rjmp	.+112    	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    1fce:	89 e4       	ldi	r24, 0x49	; 73
    1fd0:	93 e0       	ldi	r25, 0x03	; 3
    1fd2:	35 c0       	rjmp	.+106    	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    1fd4:	83 e3       	ldi	r24, 0x33	; 51
    1fd6:	93 e0       	ldi	r25, 0x03	; 3
    1fd8:	32 c0       	rjmp	.+100    	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    1fda:	8b e1       	ldi	r24, 0x1B	; 27
    1fdc:	93 e0       	ldi	r25, 0x03	; 3
    1fde:	2f c0       	rjmp	.+94     	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    1fe0:	88 e0       	ldi	r24, 0x08	; 8
    1fe2:	93 e0       	ldi	r25, 0x03	; 3
    1fe4:	2c c0       	rjmp	.+88     	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    1fe6:	85 ef       	ldi	r24, 0xF5	; 245
    1fe8:	92 e0       	ldi	r25, 0x02	; 2
    1fea:	29 c0       	rjmp	.+82     	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    1fec:	87 ed       	ldi	r24, 0xD7	; 215
    1fee:	92 e0       	ldi	r25, 0x02	; 2
    1ff0:	26 c0       	rjmp	.+76     	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    1ff2:	82 eb       	ldi	r24, 0xB2	; 178
    1ff4:	92 e0       	ldi	r25, 0x02	; 2
    1ff6:	23 c0       	rjmp	.+70     	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    1ff8:	86 ea       	ldi	r24, 0xA6	; 166
    1ffa:	92 e0       	ldi	r25, 0x02	; 2
    1ffc:	20 c0       	rjmp	.+64     	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    1ffe:	8b e8       	ldi	r24, 0x8B	; 139
    2000:	92 e0       	ldi	r25, 0x02	; 2
    2002:	1d c0       	rjmp	.+58     	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    2004:	8c e7       	ldi	r24, 0x7C	; 124
    2006:	92 e0       	ldi	r25, 0x02	; 2
    2008:	1a c0       	rjmp	.+52     	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    200a:	88 e6       	ldi	r24, 0x68	; 104
    200c:	92 e0       	ldi	r25, 0x02	; 2
    200e:	17 c0       	rjmp	.+46     	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    2010:	87 e5       	ldi	r24, 0x57	; 87
    2012:	92 e0       	ldi	r25, 0x02	; 2
    2014:	14 c0       	rjmp	.+40     	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    2016:	83 e4       	ldi	r24, 0x43	; 67
    2018:	92 e0       	ldi	r25, 0x02	; 2
    201a:	11 c0       	rjmp	.+34     	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    201c:	83 e2       	ldi	r24, 0x23	; 35
    201e:	92 e0       	ldi	r25, 0x02	; 2
    2020:	0e c0       	rjmp	.+28     	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    2022:	8b e0       	ldi	r24, 0x0B	; 11
    2024:	92 e0       	ldi	r25, 0x02	; 2
    2026:	0b c0       	rjmp	.+22     	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    2028:	80 ef       	ldi	r24, 0xF0	; 240
    202a:	91 e0       	ldi	r25, 0x01	; 1
    202c:	08 c0       	rjmp	.+16     	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    202e:	8f ed       	ldi	r24, 0xDF	; 223
    2030:	91 e0       	ldi	r25, 0x01	; 1
    2032:	05 c0       	rjmp	.+10     	; 0x203e <nrk_error_print+0xf2>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    2034:	80 ed       	ldi	r24, 0xD0	; 208
    2036:	91 e0       	ldi	r25, 0x01	; 1
    2038:	02 c0       	rjmp	.+4      	; 0x203e <nrk_error_print+0xf2>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    203a:	89 ec       	ldi	r24, 0xC9	; 201
    203c:	91 e0       	ldi	r25, 0x01	; 1
    203e:	0e 94 3e 08 	call	0x107c	; 0x107c <nrk_kprintf>
        }
        putchar ('\r');
    2042:	60 91 a1 06 	lds	r22, 0x06A1
    2046:	70 91 a2 06 	lds	r23, 0x06A2
    204a:	8d e0       	ldi	r24, 0x0D	; 13
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <fputc>
        putchar ('\n');
    2052:	60 91 a1 06 	lds	r22, 0x06A1
    2056:	70 91 a2 06 	lds	r23, 0x06A2
    205a:	8a e0       	ldi	r24, 0x0A	; 10
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <fputc>
    2062:	c4 e1       	ldi	r28, 0x14	; 20


#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
    2064:	82 e0       	ldi	r24, 0x02	; 2
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nrk_led_set>
            nrk_led_clr (3);
    206c:	83 e0       	ldi	r24, 0x03	; 3
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	0e 94 ad 0b 	call	0x175a	; 0x175a <nrk_led_clr>
    2074:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2076:	88 ee       	ldi	r24, 0xE8	; 232
    2078:	93 e0       	ldi	r25, 0x03	; 3
    207a:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <nrk_spin_wait_us>
    207e:	d1 50       	subi	r29, 0x01	; 1
#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    2080:	d1 f7       	brne	.-12     	; 0x2076 <nrk_error_print+0x12a>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    2082:	83 e0       	ldi	r24, 0x03	; 3
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nrk_led_set>
            nrk_led_clr (2);
    208a:	82 e0       	ldi	r24, 0x02	; 2
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	0e 94 ad 0b 	call	0x175a	; 0x175a <nrk_led_clr>
    2092:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2094:	88 ee       	ldi	r24, 0xE8	; 232
    2096:	93 e0       	ldi	r25, 0x03	; 3
    2098:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <nrk_spin_wait_us>
    209c:	d1 50       	subi	r29, 0x01	; 1
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    209e:	d1 f7       	brne	.-12     	; 0x2094 <nrk_error_print+0x148>
    20a0:	c1 50       	subi	r28, 0x01	; 1
        putchar ('\r');
        putchar ('\n');


#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
    20a2:	01 f7       	brne	.-64     	; 0x2064 <nrk_error_print+0x118>
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }

        nrk_led_clr(2);
    20a4:	82 e0       	ldi	r24, 0x02	; 2
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 ad 0b 	call	0x175a	; 0x175a <nrk_led_clr>
        nrk_led_clr(3);
    20ac:	83 e0       	ldi	r24, 0x03	; 3
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	0e 94 ad 0b 	call	0x175a	; 0x175a <nrk_led_clr>
        blink_morse_code_error( error_task );
    20b4:	80 91 af 03 	lds	r24, 0x03AF
    20b8:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <blink_morse_code_error>
        pause();
    20bc:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <pause>
        nrk_led_set(2);
    20c0:	82 e0       	ldi	r24, 0x02	; 2
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	0e 94 c4 0b 	call	0x1788	; 0x1788 <nrk_led_set>
        pause();
    20c8:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <pause>
        nrk_led_clr(2);
    20cc:	82 e0       	ldi	r24, 0x02	; 2
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	0e 94 ad 0b 	call	0x175a	; 0x175a <nrk_led_clr>
        pause();
    20d4:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <pause>
        blink_morse_code_error( error_num);
    20d8:	80 91 30 04 	lds	r24, 0x0430
    20dc:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <blink_morse_code_error>
}
    20e0:	42 cf       	rjmp	.-380    	; 0x1f66 <nrk_error_print+0x1a>


#endif

    return error_num;
}
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	1f 91       	pop	r17
    20ea:	0f 91       	pop	r16
    20ec:	08 95       	ret

000020ee <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    20ee:	80 93 30 04 	sts	0x0430, r24
    error_task = nrk_cur_task_TCB->task_ID;
    20f2:	e0 91 11 06 	lds	r30, 0x0611
    20f6:	f0 91 12 06 	lds	r31, 0x0612
    20fa:	80 85       	ldd	r24, Z+8	; 0x08
    20fc:	80 93 af 03 	sts	0x03AF, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2100:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <nrk_error_print>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    2104:	10 92 30 04 	sts	0x0430, r1
    2108:	08 95       	ret

0000210a <nrk_kernel_error_add>:

}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    210a:	80 93 30 04 	sts	0x0430, r24
    error_task = task;
    210e:	60 93 af 03 	sts	0x03AF, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2112:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <nrk_error_print>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    2116:	10 92 30 04 	sts	0x0430, r1
    211a:	08 95       	ret

0000211c <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    211c:	6f 92       	push	r6
    211e:	7f 92       	push	r7
    2120:	8f 92       	push	r8
    2122:	9f 92       	push	r9
    2124:	af 92       	push	r10
    2126:	bf 92       	push	r11
    2128:	cf 92       	push	r12
    212a:	df 92       	push	r13
    212c:	ef 92       	push	r14
    212e:	ff 92       	push	r15
    2130:	0f 93       	push	r16
    2132:	1f 93       	push	r17
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	94 e0       	ldi	r25, 0x04	; 4
    213c:	0e 94 3e 08 	call	0x107c	; 0x107c <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    2140:	e0 91 11 06 	lds	r30, 0x0611
    2144:	f0 91 12 06 	lds	r31, 0x0612
    2148:	80 85       	ldd	r24, Z+8	; 0x08
    214a:	28 2f       	mov	r18, r24
    214c:	33 27       	eor	r19, r19
    214e:	27 fd       	sbrc	r18, 7
    2150:	30 95       	com	r19
    2152:	3f 93       	push	r19
    2154:	8f 93       	push	r24
    2156:	8e e4       	ldi	r24, 0x4E	; 78
    2158:	93 e0       	ldi	r25, 0x03	; 3
    215a:	9f 93       	push	r25
    215c:	8f 93       	push	r24
    215e:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    2162:	e0 91 11 06 	lds	r30, 0x0611
    2166:	f0 91 12 06 	lds	r31, 0x0612
    216a:	c2 81       	ldd	r28, Z+2	; 0x02
    216c:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	82 e8       	ldi	r24, 0x82	; 130
    2174:	93 e0       	ldi	r25, 0x03	; 3
    2176:	9f 93       	push	r25
    2178:	8f 93       	push	r24
    217a:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>
    printf( "canary = %x ",*stkc );
    217e:	88 81       	ld	r24, Y
    2180:	1f 92       	push	r1
    2182:	8f 93       	push	r24
    2184:	87 e5       	ldi	r24, 0x57	; 87
    2186:	93 e0       	ldi	r25, 0x03	; 3
    2188:	9f 93       	push	r25
    218a:	8f 93       	push	r24
    218c:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    2190:	e0 91 11 06 	lds	r30, 0x0611
    2194:	f0 91 12 06 	lds	r31, 0x0612
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    2198:	81 81       	ldd	r24, Z+1	; 0x01
    219a:	8f 93       	push	r24
    219c:	80 81       	ld	r24, Z
    219e:	8f 93       	push	r24
    21a0:	84 e6       	ldi	r24, 0x64	; 100
    21a2:	93 e0       	ldi	r25, 0x03	; 3
    21a4:	9f 93       	push	r25
    21a6:	8f 93       	push	r24
    21a8:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    21ac:	80 91 12 06 	lds	r24, 0x0612
    21b0:	8f 93       	push	r24
    21b2:	80 91 11 06 	lds	r24, 0x0611
    21b6:	8f 93       	push	r24
    21b8:	8e e6       	ldi	r24, 0x6E	; 110
    21ba:	93 e0       	ldi	r25, 0x03	; 3
    21bc:	9f 93       	push	r25
    21be:	8f 93       	push	r24
    21c0:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>
    21c4:	c0 ef       	ldi	r28, 0xF0	; 240
    21c6:	d4 e0       	ldi	r29, 0x04	; 4
    21c8:	ed b7       	in	r30, 0x3d	; 61
    21ca:	fe b7       	in	r31, 0x3e	; 62
    21cc:	74 96       	adiw	r30, 0x14	; 20
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	fe bf       	out	0x3e, r31	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	ed bf       	out	0x3d, r30	; 61
    21d8:	00 e0       	ldi	r16, 0x00	; 0
    21da:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    21dc:	8e e7       	ldi	r24, 0x7E	; 126
    21de:	68 2e       	mov	r6, r24
    21e0:	83 e0       	ldi	r24, 0x03	; 3
    21e2:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    21e4:	97 e5       	ldi	r25, 0x57	; 87
    21e6:	89 2e       	mov	r8, r25
    21e8:	93 e0       	ldi	r25, 0x03	; 3
    21ea:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    21ec:	24 e6       	ldi	r18, 0x64	; 100
    21ee:	a2 2e       	mov	r10, r18
    21f0:	23 e0       	ldi	r18, 0x03	; 3
    21f2:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    21f4:	3e e6       	ldi	r19, 0x6E	; 110
    21f6:	c3 2e       	mov	r12, r19
    21f8:	33 e0       	ldi	r19, 0x03	; 3
    21fa:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    21fc:	ea 80       	ldd	r14, Y+2	; 0x02
    21fe:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2200:	ff 92       	push	r15
    2202:	ef 92       	push	r14
    2204:	1f 93       	push	r17
    2206:	0f 93       	push	r16
    2208:	7f 92       	push	r7
    220a:	6f 92       	push	r6
    220c:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>
        printf( "canary = %x ",*stkc );
    2210:	f7 01       	movw	r30, r14
    2212:	80 81       	ld	r24, Z
    2214:	1f 92       	push	r1
    2216:	8f 93       	push	r24
    2218:	9f 92       	push	r9
    221a:	8f 92       	push	r8
    221c:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	8f 93       	push	r24
    2224:	88 81       	ld	r24, Y
    2226:	8f 93       	push	r24
    2228:	bf 92       	push	r11
    222a:	af 92       	push	r10
    222c:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	df 92       	push	r13
    2236:	cf 92       	push	r12
    2238:	0e 94 14 26 	call	0x4c28	; 0x4c28 <printf>
    223c:	0f 5f       	subi	r16, 0xFF	; 255
    223e:	1f 4f       	sbci	r17, 0xFF	; 255
    2240:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    2242:	ed b7       	in	r30, 0x3d	; 61
    2244:	fe b7       	in	r31, 0x3e	; 62
    2246:	72 96       	adiw	r30, 0x12	; 18
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	fe bf       	out	0x3e, r31	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	ed bf       	out	0x3d, r30	; 61
    2252:	06 30       	cpi	r16, 0x06	; 6
    2254:	11 05       	cpc	r17, r1
    2256:	91 f6       	brne	.-92     	; 0x21fc <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    2258:	df 91       	pop	r29
    225a:	cf 91       	pop	r28
    225c:	1f 91       	pop	r17
    225e:	0f 91       	pop	r16
    2260:	ff 90       	pop	r15
    2262:	ef 90       	pop	r14
    2264:	df 90       	pop	r13
    2266:	cf 90       	pop	r12
    2268:	bf 90       	pop	r11
    226a:	af 90       	pop	r10
    226c:	9f 90       	pop	r9
    226e:	8f 90       	pop	r8
    2270:	7f 90       	pop	r7
    2272:	6f 90       	pop	r6
    2274:	08 95       	ret

00002276 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    2276:	cf 93       	push	r28
    2278:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    227a:	e0 91 11 06 	lds	r30, 0x0611
    227e:	f0 91 12 06 	lds	r31, 0x0612
    2282:	c2 81       	ldd	r28, Z+2	; 0x02
    2284:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2286:	88 81       	ld	r24, Y
    2288:	85 35       	cpi	r24, 0x55	; 85
    228a:	39 f0       	breq	.+14     	; 0x229a <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    228c:	0e 94 8e 10 	call	0x211c	; 0x211c <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	0e 94 77 10 	call	0x20ee	; 0x20ee <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    2296:	85 e5       	ldi	r24, 0x55	; 85
    2298:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    229a:	e0 91 11 06 	lds	r30, 0x0611
    229e:	f0 91 12 06 	lds	r31, 0x0612
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    22a2:	80 81       	ld	r24, Z
    22a4:	91 81       	ldd	r25, Z+1	; 0x01
    22a6:	81 15       	cp	r24, r1
    22a8:	92 44       	sbci	r25, 0x42	; 66
    22aa:	38 f0       	brcs	.+14     	; 0x22ba <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    22ac:	0e 94 8e 10 	call	0x211c	; 0x211c <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    22b0:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    22b2:	df 91       	pop	r29
    22b4:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    22b6:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <nrk_error_add>




#endif
}
    22ba:	df 91       	pop	r29
    22bc:	cf 91       	pop	r28
    22be:	08 95       	ret

000022c0 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    22c0:	2b e2       	ldi	r18, 0x2B	; 43
    22c2:	82 02       	muls	r24, r18
    22c4:	c0 01       	movw	r24, r0
    22c6:	11 24       	eor	r1, r1
    22c8:	fc 01       	movw	r30, r24
    22ca:	e0 51       	subi	r30, 0x10	; 16
    22cc:	fb 4f       	sbci	r31, 0xFB	; 251
    22ce:	a2 81       	ldd	r26, Z+2	; 0x02
    22d0:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    22d2:	8c 91       	ld	r24, X
    22d4:	85 35       	cpi	r24, 0x55	; 85
    22d6:	19 f0       	breq	.+6      	; 0x22de <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    22d8:	85 e5       	ldi	r24, 0x55	; 85
    22da:	8c 93       	st	X, r24
    22dc:	08 c0       	rjmp	.+16     	; 0x22ee <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    22de:	80 81       	ld	r24, Z
    22e0:	91 81       	ldd	r25, Z+1	; 0x01
    22e2:	81 15       	cp	r24, r1
    22e4:	92 44       	sbci	r25, 0x42	; 66
    22e6:	28 f0       	brcs	.+10     	; 0x22f2 <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    22e8:	82 e1       	ldi	r24, 0x12	; 18
    22ea:	0e 94 77 10 	call	0x20ee	; 0x20ee <nrk_error_add>
        return NRK_ERROR;
    22ee:	8f ef       	ldi	r24, 0xFF	; 255
    22f0:	08 95       	ret
    }
#endif
    return NRK_OK;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
}
    22f4:	08 95       	ret

000022f6 <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    22fa:	40 91 b1 03 	lds	r20, 0x03B1
    22fe:	50 91 b2 03 	lds	r21, 0x03B2
    2302:	60 91 b3 03 	lds	r22, 0x03B3
    2306:	70 91 b4 03 	lds	r23, 0x03B4
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	8a 01       	movw	r16, r20
    2310:	9b 01       	movw	r18, r22
    2312:	08 2e       	mov	r0, r24
    2314:	04 c0       	rjmp	.+8      	; 0x231e <nrk_signal_create+0x28>
    2316:	36 95       	lsr	r19
    2318:	27 95       	ror	r18
    231a:	17 95       	ror	r17
    231c:	07 95       	ror	r16
    231e:	0a 94       	dec	r0
    2320:	d2 f7       	brpl	.-12     	; 0x2316 <nrk_signal_create+0x20>
    2322:	00 fd       	sbrc	r16, 0
    2324:	19 c0       	rjmp	.+50     	; 0x2358 <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    2326:	01 e0       	ldi	r16, 0x01	; 1
    2328:	10 e0       	ldi	r17, 0x00	; 0
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	08 2e       	mov	r0, r24
    2330:	04 c0       	rjmp	.+8      	; 0x233a <nrk_signal_create+0x44>
    2332:	00 0f       	add	r16, r16
    2334:	11 1f       	adc	r17, r17
    2336:	22 1f       	adc	r18, r18
    2338:	33 1f       	adc	r19, r19
    233a:	0a 94       	dec	r0
    233c:	d2 f7       	brpl	.-12     	; 0x2332 <nrk_signal_create+0x3c>
    233e:	40 2b       	or	r20, r16
    2340:	51 2b       	or	r21, r17
    2342:	62 2b       	or	r22, r18
    2344:	73 2b       	or	r23, r19
    2346:	40 93 b1 03 	sts	0x03B1, r20
    234a:	50 93 b2 03 	sts	0x03B2, r21
    234e:	60 93 b3 03 	sts	0x03B3, r22
    2352:	70 93 b4 03 	sts	0x03B4, r23
			return i;
    2356:	05 c0       	rjmp	.+10     	; 0x2362 <nrk_signal_create+0x6c>
    2358:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    235a:	80 32       	cpi	r24, 0x20	; 32
    235c:	91 05       	cpc	r25, r1
    235e:	b9 f6       	brne	.-82     	; 0x230e <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    2360:	8f ef       	ldi	r24, 0xFF	; 255


}
    2362:	1f 91       	pop	r17
    2364:	0f 91       	pop	r16
    2366:	08 95       	ret

00002368 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    2368:	e0 91 11 06 	lds	r30, 0x0611
    236c:	f0 91 12 06 	lds	r31, 0x0612
    2370:	65 85       	ldd	r22, Z+13	; 0x0d
    2372:	76 85       	ldd	r23, Z+14	; 0x0e
    2374:	87 85       	ldd	r24, Z+15	; 0x0f
    2376:	90 89       	ldd	r25, Z+16	; 0x10
}
    2378:	08 95       	ret

0000237a <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    237a:	cf 92       	push	r12
    237c:	df 92       	push	r13
    237e:	ef 92       	push	r14
    2380:	ff 92       	push	r15
    2382:	0f 93       	push	r16
    2384:	1f 93       	push	r17
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    238a:	c1 2c       	mov	r12, r1
    238c:	d1 2c       	mov	r13, r1
    238e:	76 01       	movw	r14, r12
    2390:	c3 94       	inc	r12
    2392:	08 2e       	mov	r0, r24
    2394:	04 c0       	rjmp	.+8      	; 0x239e <nrk_signal_delete+0x24>
    2396:	cc 0c       	add	r12, r12
    2398:	dd 1c       	adc	r13, r13
    239a:	ee 1c       	adc	r14, r14
    239c:	ff 1c       	adc	r15, r15
    239e:	0a 94       	dec	r0
    23a0:	d2 f7       	brpl	.-12     	; 0x2396 <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    23a2:	40 91 b1 03 	lds	r20, 0x03B1
    23a6:	50 91 b2 03 	lds	r21, 0x03B2
    23aa:	60 91 b3 03 	lds	r22, 0x03B3
    23ae:	70 91 b4 03 	lds	r23, 0x03B4
    23b2:	4c 21       	and	r20, r12
    23b4:	5d 21       	and	r21, r13
    23b6:	6e 21       	and	r22, r14
    23b8:	7f 21       	and	r23, r15
    23ba:	45 2b       	or	r20, r21
    23bc:	46 2b       	or	r20, r22
    23be:	47 2b       	or	r20, r23
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <nrk_signal_delete+0x4a>
    23c2:	60 c0       	rjmp	.+192    	; 0x2484 <nrk_signal_delete+0x10a>
    23c4:	08 2f       	mov	r16, r24

	nrk_int_disable();
    23c6:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <nrk_int_disable>
    23ca:	e9 ef       	ldi	r30, 0xF9	; 249
    23cc:	f4 e0       	ldi	r31, 0x04	; 4
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    23ce:	b7 01       	movw	r22, r14
    23d0:	a6 01       	movw	r20, r12
    23d2:	40 95       	com	r20
    23d4:	50 95       	com	r21
    23d6:	60 95       	com	r22
    23d8:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    23da:	13 e0       	ldi	r17, 0x03	; 3
    23dc:	df 01       	movw	r26, r30
    23de:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    23e0:	8c 91       	ld	r24, X
    23e2:	8f 3f       	cpi	r24, 0xFF	; 255
    23e4:	39 f1       	breq	.+78     	; 0x2434 <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    23e6:	84 81       	ldd	r24, Z+4	; 0x04
    23e8:	95 81       	ldd	r25, Z+5	; 0x05
    23ea:	a6 81       	ldd	r26, Z+6	; 0x06
    23ec:	b7 81       	ldd	r27, Z+7	; 0x07
    23ee:	8c 15       	cp	r24, r12
    23f0:	9d 05       	cpc	r25, r13
    23f2:	ae 05       	cpc	r26, r14
    23f4:	bf 05       	cpc	r27, r15
    23f6:	51 f4       	brne	.+20     	; 0x240c <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    23f8:	10 86       	std	Z+8, r1	; 0x08
    23fa:	11 86       	std	Z+9, r1	; 0x09
    23fc:	12 86       	std	Z+10, r1	; 0x0a
    23fe:	13 86       	std	Z+11, r1	; 0x0b
    2400:	9f 01       	movw	r18, r30
    2402:	22 50       	subi	r18, 0x02	; 2
    2404:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    2406:	e9 01       	movw	r28, r18
    2408:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    240a:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    240c:	84 23       	and	r24, r20
    240e:	95 23       	and	r25, r21
    2410:	a6 23       	and	r26, r22
    2412:	b7 23       	and	r27, r23
    2414:	84 83       	std	Z+4, r24	; 0x04
    2416:	95 83       	std	Z+5, r25	; 0x05
    2418:	a6 83       	std	Z+6, r26	; 0x06
    241a:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    241c:	80 85       	ldd	r24, Z+8	; 0x08
    241e:	91 85       	ldd	r25, Z+9	; 0x09
    2420:	a2 85       	ldd	r26, Z+10	; 0x0a
    2422:	b3 85       	ldd	r27, Z+11	; 0x0b
    2424:	84 23       	and	r24, r20
    2426:	95 23       	and	r25, r21
    2428:	a6 23       	and	r26, r22
    242a:	b7 23       	and	r27, r23
    242c:	80 87       	std	Z+8, r24	; 0x08
    242e:	91 87       	std	Z+9, r25	; 0x09
    2430:	a2 87       	std	Z+10, r26	; 0x0a
    2432:	b3 87       	std	Z+11, r27	; 0x0b
    2434:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2436:	d5 e0       	ldi	r29, 0x05	; 5
    2438:	eb 3f       	cpi	r30, 0xFB	; 251
    243a:	fd 07       	cpc	r31, r29
    243c:	79 f6       	brne	.-98     	; 0x23dc <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    243e:	8e ef       	ldi	r24, 0xFE	; 254
    2440:	9f ef       	ldi	r25, 0xFF	; 255
    2442:	af ef       	ldi	r26, 0xFF	; 255
    2444:	bf ef       	ldi	r27, 0xFF	; 255
    2446:	04 c0       	rjmp	.+8      	; 0x2450 <nrk_signal_delete+0xd6>
    2448:	88 0f       	add	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	aa 1f       	adc	r26, r26
    244e:	bb 1f       	adc	r27, r27
    2450:	0a 95       	dec	r16
    2452:	d2 f7       	brpl	.-12     	; 0x2448 <nrk_signal_delete+0xce>
    2454:	40 91 b1 03 	lds	r20, 0x03B1
    2458:	50 91 b2 03 	lds	r21, 0x03B2
    245c:	60 91 b3 03 	lds	r22, 0x03B3
    2460:	70 91 b4 03 	lds	r23, 0x03B4
    2464:	84 23       	and	r24, r20
    2466:	95 23       	and	r25, r21
    2468:	a6 23       	and	r26, r22
    246a:	b7 23       	and	r27, r23
    246c:	80 93 b1 03 	sts	0x03B1, r24
    2470:	90 93 b2 03 	sts	0x03B2, r25
    2474:	a0 93 b3 03 	sts	0x03B3, r26
    2478:	b0 93 b4 03 	sts	0x03B4, r27
	nrk_int_enable();
    247c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nrk_int_enable>

	return NRK_OK;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	01 c0       	rjmp	.+2      	; 0x2486 <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2484:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    2486:	df 91       	pop	r29
    2488:	cf 91       	pop	r28
    248a:	1f 91       	pop	r17
    248c:	0f 91       	pop	r16
    248e:	ff 90       	pop	r15
    2490:	ef 90       	pop	r14
    2492:	df 90       	pop	r13
    2494:	cf 90       	pop	r12
    2496:	08 95       	ret

00002498 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    2498:	0f 93       	push	r16
    249a:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    249c:	41 e0       	ldi	r20, 0x01	; 1
    249e:	50 e0       	ldi	r21, 0x00	; 0
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	70 e0       	ldi	r23, 0x00	; 0
    24a4:	8a 01       	movw	r16, r20
    24a6:	9b 01       	movw	r18, r22
    24a8:	04 c0       	rjmp	.+8      	; 0x24b2 <nrk_signal_unregister+0x1a>
    24aa:	00 0f       	add	r16, r16
    24ac:	11 1f       	adc	r17, r17
    24ae:	22 1f       	adc	r18, r18
    24b0:	33 1f       	adc	r19, r19
    24b2:	8a 95       	dec	r24
    24b4:	d2 f7       	brpl	.-12     	; 0x24aa <nrk_signal_unregister+0x12>
    24b6:	d9 01       	movw	r26, r18
    24b8:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    24ba:	e0 91 11 06 	lds	r30, 0x0611
    24be:	f0 91 12 06 	lds	r31, 0x0612
    24c2:	45 85       	ldd	r20, Z+13	; 0x0d
    24c4:	56 85       	ldd	r21, Z+14	; 0x0e
    24c6:	67 85       	ldd	r22, Z+15	; 0x0f
    24c8:	70 89       	ldd	r23, Z+16	; 0x10
    24ca:	04 23       	and	r16, r20
    24cc:	15 23       	and	r17, r21
    24ce:	26 23       	and	r18, r22
    24d0:	37 23       	and	r19, r23
    24d2:	01 2b       	or	r16, r17
    24d4:	02 2b       	or	r16, r18
    24d6:	03 2b       	or	r16, r19
    24d8:	d1 f0       	breq	.+52     	; 0x250e <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    24da:	80 95       	com	r24
    24dc:	90 95       	com	r25
    24de:	a0 95       	com	r26
    24e0:	b0 95       	com	r27
    24e2:	48 23       	and	r20, r24
    24e4:	59 23       	and	r21, r25
    24e6:	6a 23       	and	r22, r26
    24e8:	7b 23       	and	r23, r27
    24ea:	45 87       	std	Z+13, r20	; 0x0d
    24ec:	56 87       	std	Z+14, r21	; 0x0e
    24ee:	67 87       	std	Z+15, r22	; 0x0f
    24f0:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    24f2:	41 89       	ldd	r20, Z+17	; 0x11
    24f4:	52 89       	ldd	r21, Z+18	; 0x12
    24f6:	63 89       	ldd	r22, Z+19	; 0x13
    24f8:	74 89       	ldd	r23, Z+20	; 0x14
    24fa:	84 23       	and	r24, r20
    24fc:	95 23       	and	r25, r21
    24fe:	a6 23       	and	r26, r22
    2500:	b7 23       	and	r27, r23
    2502:	81 8b       	std	Z+17, r24	; 0x11
    2504:	92 8b       	std	Z+18, r25	; 0x12
    2506:	a3 8b       	std	Z+19, r26	; 0x13
    2508:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	01 c0       	rjmp	.+2      	; 0x2510 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    250e:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    2510:	1f 91       	pop	r17
    2512:	0f 91       	pop	r16
    2514:	08 95       	ret

00002516 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    2516:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    2518:	40 91 b1 03 	lds	r20, 0x03B1
    251c:	50 91 b2 03 	lds	r21, 0x03B2
    2520:	60 91 b3 03 	lds	r22, 0x03B3
    2524:	70 91 b4 03 	lds	r23, 0x03B4
    2528:	08 2e       	mov	r0, r24
    252a:	04 c0       	rjmp	.+8      	; 0x2534 <nrk_signal_register+0x1e>
    252c:	76 95       	lsr	r23
    252e:	67 95       	ror	r22
    2530:	57 95       	ror	r21
    2532:	47 95       	ror	r20
    2534:	0a 94       	dec	r0
    2536:	d2 f7       	brpl	.-12     	; 0x252c <nrk_signal_register+0x16>
    2538:	40 ff       	sbrs	r20, 0
    253a:	1d c0       	rjmp	.+58     	; 0x2576 <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    253c:	e0 91 11 06 	lds	r30, 0x0611
    2540:	f0 91 12 06 	lds	r31, 0x0612
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	a0 e0       	ldi	r26, 0x00	; 0
    254a:	b0 e0       	ldi	r27, 0x00	; 0
    254c:	04 c0       	rjmp	.+8      	; 0x2556 <nrk_signal_register+0x40>
    254e:	88 0f       	add	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	aa 1f       	adc	r26, r26
    2554:	bb 1f       	adc	r27, r27
    2556:	2a 95       	dec	r18
    2558:	d2 f7       	brpl	.-12     	; 0x254e <nrk_signal_register+0x38>
    255a:	45 85       	ldd	r20, Z+13	; 0x0d
    255c:	56 85       	ldd	r21, Z+14	; 0x0e
    255e:	67 85       	ldd	r22, Z+15	; 0x0f
    2560:	70 89       	ldd	r23, Z+16	; 0x10
    2562:	84 2b       	or	r24, r20
    2564:	95 2b       	or	r25, r21
    2566:	a6 2b       	or	r26, r22
    2568:	b7 2b       	or	r27, r23
    256a:	85 87       	std	Z+13, r24	; 0x0d
    256c:	96 87       	std	Z+14, r25	; 0x0e
    256e:	a7 87       	std	Z+15, r26	; 0x0f
    2570:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	08 95       	ret
	}
            
	return NRK_ERROR;
    2576:	8f ef       	ldi	r24, 0xFF	; 255
}
    2578:	08 95       	ret

0000257a <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    257a:	cf 92       	push	r12
    257c:	df 92       	push	r13
    257e:	ef 92       	push	r14
    2580:	ff 92       	push	r15
    2582:	cf 93       	push	r28
	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;
    uint8_t timer;

	sig_mask=SIG(sig_id);
    2584:	c1 2c       	mov	r12, r1
    2586:	d1 2c       	mov	r13, r1
    2588:	76 01       	movw	r14, r12
    258a:	c3 94       	inc	r12
    258c:	04 c0       	rjmp	.+8      	; 0x2596 <nrk_event_signal+0x1c>
    258e:	cc 0c       	add	r12, r12
    2590:	dd 1c       	adc	r13, r13
    2592:	ee 1c       	adc	r14, r14
    2594:	ff 1c       	adc	r15, r15
    2596:	8a 95       	dec	r24
    2598:	d2 f7       	brpl	.-12     	; 0x258e <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    259a:	80 91 b1 03 	lds	r24, 0x03B1
    259e:	90 91 b2 03 	lds	r25, 0x03B2
    25a2:	a0 91 b3 03 	lds	r26, 0x03B3
    25a6:	b0 91 b4 03 	lds	r27, 0x03B4
    25aa:	8c 21       	and	r24, r12
    25ac:	9d 21       	and	r25, r13
    25ae:	ae 21       	and	r26, r14
    25b0:	bf 21       	and	r27, r15
    25b2:	89 2b       	or	r24, r25
    25b4:	8a 2b       	or	r24, r26
    25b6:	8b 2b       	or	r24, r27
    25b8:	11 f4       	brne	.+4      	; 0x25be <nrk_event_signal+0x44>
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	44 c0       	rjmp	.+136    	; 0x2646 <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    25be:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <nrk_int_disable>
    25c2:	e7 ef       	ldi	r30, 0xF7	; 247
    25c4:	f4 e0       	ldi	r31, 0x04	; 4
    25c6:	a9 ef       	ldi	r26, 0xF9	; 249
    25c8:	b4 e0       	ldi	r27, 0x04	; 4

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    25ca:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    25cc:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    25ce:	90 81       	ld	r25, Z
    25d0:	91 30       	cpi	r25, 0x01	; 1
    25d2:	b9 f4       	brne	.+46     	; 0x2602 <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    25d4:	42 85       	ldd	r20, Z+10	; 0x0a
    25d6:	53 85       	ldd	r21, Z+11	; 0x0b
    25d8:	64 85       	ldd	r22, Z+12	; 0x0c
    25da:	75 85       	ldd	r23, Z+13	; 0x0d
    25dc:	4c 21       	and	r20, r12
    25de:	5d 21       	and	r21, r13
    25e0:	6e 21       	and	r22, r14
    25e2:	7f 21       	and	r23, r15
    25e4:	45 2b       	or	r20, r21
    25e6:	46 2b       	or	r20, r22
    25e8:	47 2b       	or	r20, r23
    25ea:	59 f0       	breq	.+22     	; 0x2602 <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    25ec:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    25ee:	16 86       	std	Z+14, r1	; 0x0e
    25f0:	17 86       	std	Z+15, r1	; 0x0f
    25f2:	10 8a       	std	Z+16, r1	; 0x10
    25f4:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    25f6:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    25f8:	c2 86       	std	Z+10, r12	; 0x0a
    25fa:	d3 86       	std	Z+11, r13	; 0x0b
    25fc:	e4 86       	std	Z+12, r14	; 0x0c
    25fe:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    2600:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2602:	90 81       	ld	r25, Z
    2604:	92 30       	cpi	r25, 0x02	; 2
    2606:	a1 f4       	brne	.+40     	; 0x2630 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    2608:	42 85       	ldd	r20, Z+10	; 0x0a
    260a:	53 85       	ldd	r21, Z+11	; 0x0b
    260c:	64 85       	ldd	r22, Z+12	; 0x0c
    260e:	75 85       	ldd	r23, Z+13	; 0x0d
    2610:	4c 15       	cp	r20, r12
    2612:	5d 05       	cpc	r21, r13
    2614:	6e 05       	cpc	r22, r14
    2616:	7f 05       	cpc	r23, r15
    2618:	59 f4       	brne	.+22     	; 0x2630 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    261a:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    261c:	16 86       	std	Z+14, r1	; 0x0e
    261e:	17 86       	std	Z+15, r1	; 0x0f
    2620:	10 8a       	std	Z+16, r1	; 0x10
    2622:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    2624:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2626:	12 86       	std	Z+10, r1	; 0x0a
    2628:	13 86       	std	Z+11, r1	; 0x0b
    262a:	14 86       	std	Z+12, r1	; 0x0c
    262c:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    262e:	c1 e0       	ldi	r28, 0x01	; 1
    2630:	bb 96       	adiw	r30, 0x2b	; 43
    2632:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2634:	95 e0       	ldi	r25, 0x05	; 5
    2636:	e9 3f       	cpi	r30, 0xF9	; 249
    2638:	f9 07       	cpc	r31, r25
    263a:	49 f6       	brne	.-110    	; 0x25ce <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    263c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nrk_int_enable>
	if(event_occured)
    2640:	c1 11       	cpse	r28, r1
    2642:	05 c0       	rjmp	.+10     	; 0x264e <nrk_event_signal+0xd4>
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    2644:	82 e0       	ldi	r24, 0x02	; 2
    2646:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <_nrk_errno_set>
	return NRK_ERROR;
    264a:	8f ef       	ldi	r24, 0xFF	; 255
    264c:	01 c0       	rjmp	.+2      	; 0x2650 <nrk_event_signal+0xd6>
            			_nrk_set_next_wakeup (timer);
			}	
		else
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
    264e:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    2650:	cf 91       	pop	r28
    2652:	ff 90       	pop	r15
    2654:	ef 90       	pop	r14
    2656:	df 90       	pop	r13
    2658:	cf 90       	pop	r12
    265a:	08 95       	ret

0000265c <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    265c:	0f 93       	push	r16
    265e:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    2660:	e0 91 11 06 	lds	r30, 0x0611
    2664:	f0 91 12 06 	lds	r31, 0x0612
    2668:	05 85       	ldd	r16, Z+13	; 0x0d
    266a:	16 85       	ldd	r17, Z+14	; 0x0e
    266c:	27 85       	ldd	r18, Z+15	; 0x0f
    266e:	30 89       	ldd	r19, Z+16	; 0x10
    2670:	06 23       	and	r16, r22
    2672:	17 23       	and	r17, r23
    2674:	28 23       	and	r18, r24
    2676:	39 23       	and	r19, r25
    2678:	01 15       	cp	r16, r1
    267a:	11 05       	cpc	r17, r1
    267c:	21 05       	cpc	r18, r1
    267e:	31 05       	cpc	r19, r1
    2680:	11 f1       	breq	.+68     	; 0x26c6 <nrk_event_wait+0x6a>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    2686:	81 8b       	std	Z+17, r24	; 0x11
    2688:	92 8b       	std	Z+18, r25	; 0x12
    268a:	a3 8b       	std	Z+19, r26	; 0x13
    268c:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    268e:	21 e0       	ldi	r18, 0x01	; 1
    2690:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    2692:	00 90 01 06 	lds	r0, 0x0601
    2696:	04 c0       	rjmp	.+8      	; 0x26a0 <nrk_event_wait+0x44>
    2698:	b6 95       	lsr	r27
    269a:	a7 95       	ror	r26
    269c:	97 95       	ror	r25
    269e:	87 95       	ror	r24
    26a0:	0a 94       	dec	r0
    26a2:	d2 f7       	brpl	.-12     	; 0x2698 <nrk_event_wait+0x3c>
    26a4:	80 ff       	sbrs	r24, 0
    26a6:	03 c0       	rjmp	.+6      	; 0x26ae <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    26a8:	0e 94 11 17 	call	0x2e22	; 0x2e22 <nrk_wait_until_nw>
    26ac:	04 c0       	rjmp	.+8      	; 0x26b6 <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    26b6:	e0 91 11 06 	lds	r30, 0x0611
    26ba:	f0 91 12 06 	lds	r31, 0x0612
    26be:	01 89       	ldd	r16, Z+17	; 0x11
    26c0:	12 89       	ldd	r17, Z+18	; 0x12
    26c2:	23 89       	ldd	r18, Z+19	; 0x13
    26c4:	34 89       	ldd	r19, Z+20	; 0x14
}
    26c6:	c9 01       	movw	r24, r18
    26c8:	b8 01       	movw	r22, r16
    26ca:	1f 91       	pop	r17
    26cc:	0f 91       	pop	r16
    26ce:	08 95       	ret

000026d0 <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    26d0:	90 91 10 06 	lds	r25, 0x0610
    26d4:	93 30       	cpi	r25, 0x03	; 3
    26d6:	d0 f4       	brcc	.+52     	; 0x270c <nrk_sem_create+0x3c>
    26d8:	a4 ef       	ldi	r26, 0xF4	; 244
    26da:	b5 e0       	ldi	r27, 0x05	; 5
    26dc:	e0 e0       	ldi	r30, 0x00	; 0
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    26de:	2c 91       	ld	r18, X
    26e0:	2f 3f       	cpi	r18, 0xFF	; 255
    26e2:	21 f0       	breq	.+8      	; 0x26ec <nrk_sem_create+0x1c>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    26e4:	ef 5f       	subi	r30, 0xFF	; 255
    26e6:	13 96       	adiw	r26, 0x03	; 3
    26e8:	e4 30       	cpi	r30, 0x04	; 4
    26ea:	c9 f7       	brne	.-14     	; 0x26de <nrk_sem_create+0xe>
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	9f 01       	movw	r18, r30
    26f0:	22 0f       	add	r18, r18
    26f2:	33 1f       	adc	r19, r19
    26f4:	e2 0f       	add	r30, r18
    26f6:	f3 1f       	adc	r31, r19
    26f8:	ec 50       	subi	r30, 0x0C	; 12
    26fa:	fa 4f       	sbci	r31, 0xFA	; 250
    26fc:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    26fe:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    2700:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    2702:	9f 5f       	subi	r25, 0xFF	; 255
    2704:	90 93 10 06 	sts	0x0610, r25
	return	&nrk_sem_list[i];
    2708:	cf 01       	movw	r24, r30
    270a:	08 95       	ret

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	90 e0       	ldi	r25, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    2710:	08 95       	ret

00002712 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    2712:	25 e0       	ldi	r18, 0x05	; 5
    2714:	84 3f       	cpi	r24, 0xF4	; 244
    2716:	92 07       	cpc	r25, r18
    2718:	69 f0       	breq	.+26     	; 0x2734 <nrk_get_resource_index+0x22>
    271a:	25 e0       	ldi	r18, 0x05	; 5
    271c:	87 3f       	cpi	r24, 0xF7	; 247
    271e:	92 07       	cpc	r25, r18
    2720:	59 f0       	breq	.+22     	; 0x2738 <nrk_get_resource_index+0x26>
    2722:	25 e0       	ldi	r18, 0x05	; 5
    2724:	8a 3f       	cpi	r24, 0xFA	; 250
    2726:	92 07       	cpc	r25, r18
    2728:	49 f0       	breq	.+18     	; 0x273c <nrk_get_resource_index+0x2a>
    272a:	8d 5f       	subi	r24, 0xFD	; 253
    272c:	95 40       	sbci	r25, 0x05	; 5
    272e:	41 f4       	brne	.+16     	; 0x2740 <nrk_get_resource_index+0x2e>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    2730:	83 e0       	ldi	r24, 0x03	; 3
    2732:	08 95       	ret
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	08 95       	ret
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	08 95       	ret
    273c:	82 e0       	ldi	r24, 0x02	; 2
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
    273e:	08 95       	ret
	return NRK_ERROR;
    2740:	8f ef       	ldi	r24, 0xFF	; 255
}
    2742:	08 95       	ret

00002744 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2744:	0e 94 89 13 	call	0x2712	; 0x2712 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2748:	8f 3f       	cpi	r24, 0xFF	; 255
    274a:	11 f4       	brne	.+4      	; 0x2750 <nrk_sem_query+0xc>
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	03 c0       	rjmp	.+6      	; 0x2756 <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2750:	84 30       	cpi	r24, 0x04	; 4
    2752:	29 f4       	brne	.+10     	; 0x275e <nrk_sem_query+0x1a>
    2754:	82 e0       	ldi	r24, 0x02	; 2
    2756:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <_nrk_errno_set>
    275a:	8f ef       	ldi	r24, 0xFF	; 255
    275c:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    275e:	99 27       	eor	r25, r25
    2760:	87 fd       	sbrc	r24, 7
    2762:	90 95       	com	r25
    2764:	fc 01       	movw	r30, r24
    2766:	ee 0f       	add	r30, r30
    2768:	ff 1f       	adc	r31, r31
    276a:	8e 0f       	add	r24, r30
    276c:	9f 1f       	adc	r25, r31
    276e:	fc 01       	movw	r30, r24
    2770:	ec 50       	subi	r30, 0x0C	; 12
    2772:	fa 4f       	sbci	r31, 0xFA	; 250
    2774:	82 81       	ldd	r24, Z+2	; 0x02
}
    2776:	08 95       	ret

00002778 <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    2778:	ef 92       	push	r14
    277a:	ff 92       	push	r15
    277c:	0f 93       	push	r16
    277e:	1f 93       	push	r17
    2780:	cf 93       	push	r28
    2782:	df 93       	push	r29
    2784:	1f 92       	push	r1
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    278a:	0e 94 89 13 	call	0x2712	; 0x2712 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    278e:	8f 3f       	cpi	r24, 0xFF	; 255
    2790:	11 f4       	brne	.+4      	; 0x2796 <nrk_sem_pend+0x1e>
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	03 c0       	rjmp	.+6      	; 0x279c <nrk_sem_pend+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2796:	84 30       	cpi	r24, 0x04	; 4
    2798:	29 f4       	brne	.+10     	; 0x27a4 <nrk_sem_pend+0x2c>
    279a:	82 e0       	ldi	r24, 0x02	; 2
    279c:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <_nrk_errno_set>
    27a0:	8f ef       	ldi	r24, 0xFF	; 255
    27a2:	41 c0       	rjmp	.+130    	; 0x2826 <nrk_sem_pend+0xae>
	
	nrk_int_disable();
    27a4:	89 83       	std	Y+1, r24	; 0x01
    27a6:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	e8 2e       	mov	r14, r24
    27ae:	ff 24       	eor	r15, r15
    27b0:	e7 fc       	sbrc	r14, 7
    27b2:	f0 94       	com	r15
    27b4:	87 01       	movw	r16, r14
    27b6:	00 0f       	add	r16, r16
    27b8:	11 1f       	adc	r17, r17
    27ba:	f8 01       	movw	r30, r16
    27bc:	ee 0d       	add	r30, r14
    27be:	ff 1d       	adc	r31, r15
    27c0:	ec 50       	subi	r30, 0x0C	; 12
    27c2:	fa 4f       	sbci	r31, 0xFA	; 250
    27c4:	92 81       	ldd	r25, Z+2	; 0x02
    27c6:	91 11       	cpse	r25, r1
    27c8:	16 c0       	rjmp	.+44     	; 0x27f6 <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    27ca:	e0 91 11 06 	lds	r30, 0x0611
    27ce:	f0 91 12 06 	lds	r31, 0x0612
    27d2:	97 81       	ldd	r25, Z+7	; 0x07
    27d4:	92 60       	ori	r25, 0x02	; 2
    27d6:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    27d8:	99 27       	eor	r25, r25
    27da:	87 fd       	sbrc	r24, 7
    27dc:	90 95       	com	r25
    27de:	a9 2f       	mov	r26, r25
    27e0:	b9 2f       	mov	r27, r25
    27e2:	81 8b       	std	Z+17, r24	; 0x11
    27e4:	92 8b       	std	Z+18, r25	; 0x12
    27e6:	a3 8b       	std	Z+19, r26	; 0x13
    27e8:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    27ea:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nrk_int_enable>
		nrk_wait_until_ticks(0);
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    27f6:	0e 0d       	add	r16, r14
    27f8:	1f 1d       	adc	r17, r15
    27fa:	d8 01       	movw	r26, r16
    27fc:	ac 50       	subi	r26, 0x0C	; 12
    27fe:	ba 4f       	sbci	r27, 0xFA	; 250
    2800:	12 96       	adiw	r26, 0x02	; 2
    2802:	8c 91       	ld	r24, X
    2804:	12 97       	sbiw	r26, 0x02	; 2
    2806:	81 50       	subi	r24, 0x01	; 1
    2808:	12 96       	adiw	r26, 0x02	; 2
    280a:	8c 93       	st	X, r24
    280c:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    280e:	e0 91 11 06 	lds	r30, 0x0611
    2812:	f0 91 12 06 	lds	r31, 0x0612
    2816:	11 96       	adiw	r26, 0x01	; 1
    2818:	8c 91       	ld	r24, X
    281a:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    2820:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nrk_int_enable>

	return NRK_OK;
    2824:	81 e0       	ldi	r24, 0x01	; 1
}
    2826:	0f 90       	pop	r0
    2828:	df 91       	pop	r29
    282a:	cf 91       	pop	r28
    282c:	1f 91       	pop	r17
    282e:	0f 91       	pop	r16
    2830:	ff 90       	pop	r15
    2832:	ef 90       	pop	r14
    2834:	08 95       	ret

00002836 <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	1f 92       	push	r1
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    2844:	0e 94 89 13 	call	0x2712	; 0x2712 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2848:	8f 3f       	cpi	r24, 0xFF	; 255
    284a:	11 f4       	brne	.+4      	; 0x2850 <nrk_sem_post+0x1a>
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	03 c0       	rjmp	.+6      	; 0x2856 <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2850:	84 30       	cpi	r24, 0x04	; 4
    2852:	29 f4       	brne	.+10     	; 0x285e <nrk_sem_post+0x28>
    2854:	82 e0       	ldi	r24, 0x02	; 2
    2856:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <_nrk_errno_set>
    285a:	8f ef       	ldi	r24, 0xFF	; 255
    285c:	44 c0       	rjmp	.+136    	; 0x28e6 <nrk_sem_post+0xb0>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    285e:	48 2f       	mov	r20, r24
    2860:	55 27       	eor	r21, r21
    2862:	47 fd       	sbrc	r20, 7
    2864:	50 95       	com	r21
    2866:	9a 01       	movw	r18, r20
    2868:	22 0f       	add	r18, r18
    286a:	33 1f       	adc	r19, r19
    286c:	24 0f       	add	r18, r20
    286e:	35 1f       	adc	r19, r21
    2870:	89 01       	movw	r16, r18
    2872:	0c 50       	subi	r16, 0x0C	; 12
    2874:	1a 4f       	sbci	r17, 0xFA	; 250
    2876:	f8 01       	movw	r30, r16
    2878:	22 81       	ldd	r18, Z+2	; 0x02
    287a:	90 81       	ld	r25, Z
    287c:	29 17       	cp	r18, r25
    287e:	94 f5       	brge	.+100    	; 0x28e4 <nrk_sem_post+0xae>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    2880:	89 83       	std	Y+1, r24	; 0x01
    2882:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <nrk_int_disable>

		nrk_sem_list[id].value++;
    2886:	f8 01       	movw	r30, r16
    2888:	92 81       	ldd	r25, Z+2	; 0x02
    288a:	9f 5f       	subi	r25, 0xFF	; 255
    288c:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    288e:	e0 91 11 06 	lds	r30, 0x0611
    2892:	f0 91 12 06 	lds	r31, 0x0612
    2896:	14 82       	std	Z+4, r1	; 0x04
    2898:	e7 ef       	ldi	r30, 0xF7	; 247
    289a:	f4 e0       	ldi	r31, 0x04	; 4

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	99 27       	eor	r25, r25
    28a0:	87 fd       	sbrc	r24, 7
    28a2:	90 95       	com	r25
    28a4:	a9 2f       	mov	r26, r25
    28a6:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    28a8:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    28aa:	30 81       	ld	r19, Z
    28ac:	32 30       	cpi	r19, 0x02	; 2
    28ae:	99 f4       	brne	.+38     	; 0x28d6 <nrk_sem_post+0xa0>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    28b0:	42 85       	ldd	r20, Z+10	; 0x0a
    28b2:	53 85       	ldd	r21, Z+11	; 0x0b
    28b4:	64 85       	ldd	r22, Z+12	; 0x0c
    28b6:	75 85       	ldd	r23, Z+13	; 0x0d
    28b8:	48 17       	cp	r20, r24
    28ba:	59 07       	cpc	r21, r25
    28bc:	6a 07       	cpc	r22, r26
    28be:	7b 07       	cpc	r23, r27
    28c0:	51 f4       	brne	.+20     	; 0x28d6 <nrk_sem_post+0xa0>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    28c2:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    28c4:	16 86       	std	Z+14, r1	; 0x0e
    28c6:	17 86       	std	Z+15, r1	; 0x0f
    28c8:	10 8a       	std	Z+16, r1	; 0x10
    28ca:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    28cc:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    28ce:	12 86       	std	Z+10, r1	; 0x0a
    28d0:	13 86       	std	Z+11, r1	; 0x0b
    28d2:	14 86       	std	Z+12, r1	; 0x0c
    28d4:	15 86       	std	Z+13, r1	; 0x0d
    28d6:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    28d8:	35 e0       	ldi	r19, 0x05	; 5
    28da:	e9 3f       	cpi	r30, 0xF9	; 249
    28dc:	f3 07       	cpc	r31, r19
    28de:	29 f7       	brne	.-54     	; 0x28aa <nrk_sem_post+0x74>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    28e0:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nrk_int_enable>
	}
		
return NRK_OK;
    28e4:	81 e0       	ldi	r24, 0x01	; 1
}
    28e6:	0f 90       	pop	r0
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	1f 91       	pop	r17
    28ee:	0f 91       	pop	r16
    28f0:	08 95       	ret

000028f2 <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    28f2:	0e 94 89 13 	call	0x2712	; 0x2712 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    28f6:	8f 3f       	cpi	r24, 0xFF	; 255
    28f8:	11 f4       	brne	.+4      	; 0x28fe <nrk_sem_delete+0xc>
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	03 c0       	rjmp	.+6      	; 0x2904 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    28fe:	84 30       	cpi	r24, 0x04	; 4
    2900:	29 f4       	brne	.+10     	; 0x290c <nrk_sem_delete+0x1a>
    2902:	82 e0       	ldi	r24, 0x02	; 2
    2904:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <_nrk_errno_set>
    2908:	8f ef       	ldi	r24, 0xFF	; 255
    290a:	08 95       	ret

	nrk_sem_list[id].count=-1;
    290c:	99 27       	eor	r25, r25
    290e:	87 fd       	sbrc	r24, 7
    2910:	90 95       	com	r25
    2912:	fc 01       	movw	r30, r24
    2914:	ee 0f       	add	r30, r30
    2916:	ff 1f       	adc	r31, r31
    2918:	8e 0f       	add	r24, r30
    291a:	9f 1f       	adc	r25, r31
    291c:	fc 01       	movw	r30, r24
    291e:	ec 50       	subi	r30, 0x0C	; 12
    2920:	fa 4f       	sbci	r31, 0xFA	; 250
    2922:	8f ef       	ldi	r24, 0xFF	; 255
    2924:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    2926:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    2928:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    292a:	80 91 10 06 	lds	r24, 0x0610
    292e:	81 50       	subi	r24, 0x01	; 1
    2930:	80 93 10 06 	sts	0x0610, r24
return NRK_OK;
    2934:	81 e0       	ldi	r24, 0x01	; 1
}
    2936:	08 95       	ret

00002938 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    2938:	e0 91 06 06 	lds	r30, 0x0606
    293c:	f0 91 07 06 	lds	r31, 0x0607
}
    2940:	80 81       	ld	r24, Z
    2942:	08 95       	ret

00002944 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    2944:	e0 91 06 06 	lds	r30, 0x0606
    2948:	f0 91 07 06 	lds	r31, 0x0607
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    294c:	30 97       	sbiw	r30, 0x00	; 0
    294e:	21 f0       	breq	.+8      	; 0x2958 <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    2950:	03 80       	ldd	r0, Z+3	; 0x03
    2952:	f4 81       	ldd	r31, Z+4	; 0x04
    2954:	e0 2d       	mov	r30, r0
    2956:	fa cf       	rjmp	.-12     	; 0x294c <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    2958:	08 95       	ret

0000295a <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    295a:	af 92       	push	r10
    295c:	bf 92       	push	r11
    295e:	cf 92       	push	r12
    2960:	df 92       	push	r13
    2962:	ef 92       	push	r14
    2964:	ff 92       	push	r15
    2966:	0f 93       	push	r16
    2968:	1f 93       	push	r17
    296a:	cf 93       	push	r28
    296c:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    296e:	e0 91 ee 04 	lds	r30, 0x04EE
    2972:	f0 91 ef 04 	lds	r31, 0x04EF
    2976:	30 97       	sbiw	r30, 0x00	; 0
    2978:	09 f4       	brne	.+2      	; 0x297c <nrk_add_to_readyQ+0x22>
    297a:	90 c0       	rjmp	.+288    	; 0x2a9c <nrk_add_to_readyQ+0x142>
    {
        return;
    }


    NextNode = _head_node;
    297c:	00 91 06 06 	lds	r16, 0x0606
    2980:	10 91 07 06 	lds	r17, 0x0607
    CurNode = _free_node;

    if (_head_node != NULL)
    2984:	01 15       	cp	r16, r1
    2986:	11 05       	cpc	r17, r1
    2988:	09 f4       	brne	.+2      	; 0x298c <nrk_add_to_readyQ+0x32>
    298a:	4c c0       	rjmp	.+152    	; 0x2a24 <nrk_add_to_readyQ+0xca>
    298c:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    298e:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    2990:	58 2f       	mov	r21, r24
    2992:	54 03       	mulsu	r21, r20
    2994:	90 01       	movw	r18, r0
    2996:	11 24       	eor	r1, r1
    2998:	20 51       	subi	r18, 0x10	; 16
    299a:	3b 4f       	sbci	r19, 0xFB	; 251
    299c:	79 01       	movw	r14, r18
    299e:	9a e0       	ldi	r25, 0x0A	; 10
    29a0:	e9 0e       	add	r14, r25
    29a2:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    29a4:	69 01       	movw	r12, r18
    29a6:	c4 e0       	ldi	r28, 0x04	; 4
    29a8:	cc 0e       	add	r12, r28
    29aa:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    29ac:	59 01       	movw	r10, r18
    29ae:	db e0       	ldi	r29, 0x0B	; 11
    29b0:	ad 0e       	add	r10, r29
    29b2:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    29b4:	2c 91       	ld	r18, X
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	42 9f       	mul	r20, r18
    29ba:	b0 01       	movw	r22, r0
    29bc:	43 9f       	mul	r20, r19
    29be:	70 0d       	add	r23, r0
    29c0:	11 24       	eor	r1, r1
    29c2:	60 51       	subi	r22, 0x10	; 16
    29c4:	7b 4f       	sbci	r23, 0xFB	; 251
    29c6:	eb 01       	movw	r28, r22
    29c8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ca:	99 23       	and	r25, r25
    29cc:	29 f0       	breq	.+10     	; 0x29d8 <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    29ce:	5b 85       	ldd	r21, Y+11	; 0x0b
    29d0:	e7 01       	movw	r28, r14
    29d2:	98 81       	ld	r25, Y
    29d4:	59 17       	cp	r21, r25
    29d6:	40 f1       	brcs	.+80     	; 0x2a28 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    29d8:	e6 01       	movw	r28, r12
    29da:	98 81       	ld	r25, Y
    29dc:	99 23       	and	r25, r25
    29de:	69 f0       	breq	.+26     	; 0x29fa <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    29e0:	42 9f       	mul	r20, r18
    29e2:	b0 01       	movw	r22, r0
    29e4:	43 9f       	mul	r20, r19
    29e6:	70 0d       	add	r23, r0
    29e8:	11 24       	eor	r1, r1
    29ea:	60 51       	subi	r22, 0x10	; 16
    29ec:	7b 4f       	sbci	r23, 0xFB	; 251
    29ee:	eb 01       	movw	r28, r22
    29f0:	5a 85       	ldd	r21, Y+10	; 0x0a
    29f2:	e5 01       	movw	r28, r10
    29f4:	98 81       	ld	r25, Y
    29f6:	59 17       	cp	r21, r25
    29f8:	b8 f0       	brcs	.+46     	; 0x2a28 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    29fa:	42 9f       	mul	r20, r18
    29fc:	b0 01       	movw	r22, r0
    29fe:	43 9f       	mul	r20, r19
    2a00:	70 0d       	add	r23, r0
    2a02:	11 24       	eor	r1, r1
    2a04:	9b 01       	movw	r18, r22
    2a06:	20 51       	subi	r18, 0x10	; 16
    2a08:	3b 4f       	sbci	r19, 0xFB	; 251
    2a0a:	e9 01       	movw	r28, r18
    2a0c:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a0e:	e7 01       	movw	r28, r14
    2a10:	98 81       	ld	r25, Y
    2a12:	29 17       	cp	r18, r25
    2a14:	48 f0       	brcs	.+18     	; 0x2a28 <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    2a16:	13 96       	adiw	r26, 0x03	; 3
    2a18:	0d 90       	ld	r0, X+
    2a1a:	bc 91       	ld	r27, X
    2a1c:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    2a1e:	10 97       	sbiw	r26, 0x00	; 0
    2a20:	49 f6       	brne	.-110    	; 0x29b4 <nrk_add_to_readyQ+0x5a>
    2a22:	02 c0       	rjmp	.+4      	; 0x2a28 <nrk_add_to_readyQ+0xce>
    2a24:	a0 e0       	ldi	r26, 0x00	; 0
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    2a28:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    2a2a:	c3 81       	ldd	r28, Z+3	; 0x03
    2a2c:	d4 81       	ldd	r29, Z+4	; 0x04
    2a2e:	d0 93 ef 04 	sts	0x04EF, r29
    2a32:	c0 93 ee 04 	sts	0x04EE, r28

    if (NextNode == _head_node)
    2a36:	a0 17       	cp	r26, r16
    2a38:	b1 07       	cpc	r27, r17
    2a3a:	b1 f4       	brne	.+44     	; 0x2a68 <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    2a3c:	10 97       	sbiw	r26, 0x00	; 0
    2a3e:	49 f0       	breq	.+18     	; 0x2a52 <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    2a40:	b4 83       	std	Z+4, r27	; 0x04
    2a42:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    2a44:	12 82       	std	Z+2, r1	; 0x02
    2a46:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    2a48:	12 96       	adiw	r26, 0x02	; 2
    2a4a:	fc 93       	st	X, r31
    2a4c:	ee 93       	st	-X, r30
    2a4e:	11 97       	sbiw	r26, 0x01	; 1
    2a50:	06 c0       	rjmp	.+12     	; 0x2a5e <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    2a52:	14 82       	std	Z+4, r1	; 0x04
    2a54:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    2a56:	12 82       	std	Z+2, r1	; 0x02
    2a58:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    2a5a:	fa 83       	std	Y+2, r31	; 0x02
    2a5c:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    2a5e:	f0 93 07 06 	sts	0x0607, r31
    2a62:	e0 93 06 06 	sts	0x0606, r30
    2a66:	1a c0       	rjmp	.+52     	; 0x2a9c <nrk_add_to_readyQ+0x142>
    2a68:	11 96       	adiw	r26, 0x01	; 1
    2a6a:	8d 91       	ld	r24, X+
    2a6c:	9c 91       	ld	r25, X
    2a6e:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    2a70:	ac 17       	cp	r26, r28
    2a72:	bd 07       	cpc	r27, r29
    2a74:	59 f0       	breq	.+22     	; 0x2a8c <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    2a76:	92 83       	std	Z+2, r25	; 0x02
    2a78:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    2a7a:	b4 83       	std	Z+4, r27	; 0x04
    2a7c:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    2a7e:	11 96       	adiw	r26, 0x01	; 1
    2a80:	cd 91       	ld	r28, X+
    2a82:	dc 91       	ld	r29, X
    2a84:	12 97       	sbiw	r26, 0x02	; 2
    2a86:	fc 83       	std	Y+4, r31	; 0x04
    2a88:	eb 83       	std	Y+3, r30	; 0x03
    2a8a:	04 c0       	rjmp	.+8      	; 0x2a94 <nrk_add_to_readyQ+0x13a>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    2a8c:	14 82       	std	Z+4, r1	; 0x04
    2a8e:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    2a90:	92 83       	std	Z+2, r25	; 0x02
    2a92:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    2a94:	12 96       	adiw	r26, 0x02	; 2
    2a96:	fc 93       	st	X, r31
    2a98:	ee 93       	st	-X, r30
    2a9a:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	1f 91       	pop	r17
    2aa2:	0f 91       	pop	r16
    2aa4:	ff 90       	pop	r15
    2aa6:	ef 90       	pop	r14
    2aa8:	df 90       	pop	r13
    2aaa:	cf 90       	pop	r12
    2aac:	bf 90       	pop	r11
    2aae:	af 90       	pop	r10
    2ab0:	08 95       	ret

00002ab2 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    2ab2:	cf 93       	push	r28
    2ab4:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    2ab6:	e0 91 06 06 	lds	r30, 0x0606
    2aba:	f0 91 07 06 	lds	r31, 0x0607
    2abe:	30 97       	sbiw	r30, 0x00	; 0
    2ac0:	09 f4       	brne	.+2      	; 0x2ac4 <nrk_rem_from_readyQ+0x12>
    2ac2:	44 c0       	rjmp	.+136    	; 0x2b4c <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    2ac4:	99 27       	eor	r25, r25
    2ac6:	87 fd       	sbrc	r24, 7
    2ac8:	90 95       	com	r25
    2aca:	20 81       	ld	r18, Z
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	28 17       	cp	r18, r24
    2ad0:	39 07       	cpc	r19, r25
    2ad2:	81 f4       	brne	.+32     	; 0x2af4 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    2ad4:	a3 81       	ldd	r26, Z+3	; 0x03
    2ad6:	b4 81       	ldd	r27, Z+4	; 0x04
    2ad8:	b0 93 07 06 	sts	0x0607, r27
    2adc:	a0 93 06 06 	sts	0x0606, r26
        _head_node->Prev = NULL;
    2ae0:	12 96       	adiw	r26, 0x02	; 2
    2ae2:	1c 92       	st	X, r1
    2ae4:	1e 92       	st	-X, r1
    2ae6:	11 97       	sbiw	r26, 0x01	; 1
    2ae8:	18 c0       	rjmp	.+48     	; 0x2b1a <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    2aea:	03 80       	ldd	r0, Z+3	; 0x03
    2aec:	f4 81       	ldd	r31, Z+4	; 0x04
    2aee:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    2af0:	30 97       	sbiw	r30, 0x00	; 0
    2af2:	61 f1       	breq	.+88     	; 0x2b4c <nrk_rem_from_readyQ+0x9a>
    2af4:	20 81       	ld	r18, Z
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	28 17       	cp	r18, r24
    2afa:	39 07       	cpc	r19, r25
    2afc:	b1 f7       	brne	.-20     	; 0x2aea <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    2afe:	c1 81       	ldd	r28, Z+1	; 0x01
    2b00:	d2 81       	ldd	r29, Z+2	; 0x02
    2b02:	83 81       	ldd	r24, Z+3	; 0x03
    2b04:	94 81       	ldd	r25, Z+4	; 0x04
    2b06:	9c 83       	std	Y+4, r25	; 0x04
    2b08:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    2b0a:	a3 81       	ldd	r26, Z+3	; 0x03
    2b0c:	b4 81       	ldd	r27, Z+4	; 0x04
    2b0e:	10 97       	sbiw	r26, 0x00	; 0
    2b10:	21 f0       	breq	.+8      	; 0x2b1a <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    2b12:	12 96       	adiw	r26, 0x02	; 2
    2b14:	dc 93       	st	X, r29
    2b16:	ce 93       	st	-X, r28
    2b18:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    2b1a:	a0 91 ee 04 	lds	r26, 0x04EE
    2b1e:	b0 91 ef 04 	lds	r27, 0x04EF
    2b22:	10 97       	sbiw	r26, 0x00	; 0
    2b24:	39 f4       	brne	.+14     	; 0x2b34 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    2b26:	f0 93 ef 04 	sts	0x04EF, r31
    2b2a:	e0 93 ee 04 	sts	0x04EE, r30
        _free_node->Next = NULL;
    2b2e:	14 82       	std	Z+4, r1	; 0x04
    2b30:	13 82       	std	Z+3, r1	; 0x03
    2b32:	0a c0       	rjmp	.+20     	; 0x2b48 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    2b34:	b4 83       	std	Z+4, r27	; 0x04
    2b36:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    2b38:	12 96       	adiw	r26, 0x02	; 2
    2b3a:	fc 93       	st	X, r31
    2b3c:	ee 93       	st	-X, r30
    2b3e:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    2b40:	f0 93 ef 04 	sts	0x04EF, r31
    2b44:	e0 93 ee 04 	sts	0x04EE, r30
    }
    _free_node->Prev = NULL;
    2b48:	12 82       	std	Z+2, r1	; 0x02
    2b4a:	11 82       	std	Z+1, r1	; 0x01
}
    2b4c:	df 91       	pop	r29
    2b4e:	cf 91       	pop	r28
    2b50:	08 95       	ret

00002b52 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    2b52:	ef 92       	push	r14
    2b54:	ff 92       	push	r15
    2b56:	0f 93       	push	r16
    2b58:	1f 93       	push	r17
    2b5a:	cf 93       	push	r28
    2b5c:	df 93       	push	r29
    2b5e:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    2b60:	4b 81       	ldd	r20, Y+3	; 0x03
    2b62:	5c 81       	ldd	r21, Y+4	; 0x04
    2b64:	69 81       	ldd	r22, Y+1	; 0x01
    2b66:	7a 81       	ldd	r23, Y+2	; 0x02
    2b68:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6c:	0e 94 af 22 	call	0x455e	; 0x455e <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    2b70:	2f 81       	ldd	r18, Y+7	; 0x07
    2b72:	22 23       	and	r18, r18
    2b74:	71 f0       	breq	.+28     	; 0x2b92 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    2b76:	4b 81       	ldd	r20, Y+3	; 0x03
    2b78:	5c 81       	ldd	r21, Y+4	; 0x04
    2b7a:	e1 2c       	mov	r14, r1
    2b7c:	f1 2c       	mov	r15, r1
    2b7e:	00 e0       	ldi	r16, 0x00	; 0
    2b80:	10 e0       	ldi	r17, 0x00	; 0
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	bc 01       	movw	r22, r24
    2b88:	ce 01       	movw	r24, r28
    2b8a:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    2b8e:	1f 82       	std	Y+7, r1	; 0x07
    2b90:	0c c0       	rjmp	.+24     	; 0x2baa <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    2b92:	e8 81       	ld	r30, Y
    2b94:	2b e2       	ldi	r18, 0x2B	; 43
    2b96:	e2 02       	muls	r30, r18
    2b98:	f0 01       	movw	r30, r0
    2b9a:	11 24       	eor	r1, r1
    2b9c:	e0 51       	subi	r30, 0x10	; 16
    2b9e:	fb 4f       	sbci	r31, 0xFB	; 251
    2ba0:	21 85       	ldd	r18, Z+9	; 0x09
    2ba2:	23 30       	cpi	r18, 0x03	; 3
    2ba4:	b9 f4       	brne	.+46     	; 0x2bd4 <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    2ba6:	91 83       	std	Z+1, r25	; 0x01
    2ba8:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    2baa:	e8 81       	ld	r30, Y
    2bac:	8b e2       	ldi	r24, 0x2B	; 43
    2bae:	e8 02       	muls	r30, r24
    2bb0:	f0 01       	movw	r30, r0
    2bb2:	11 24       	eor	r1, r1
    2bb4:	e0 51       	subi	r30, 0x10	; 16
    2bb6:	fb 4f       	sbci	r31, 0xFB	; 251
    2bb8:	85 89       	ldd	r24, Z+21	; 0x15
    2bba:	96 89       	ldd	r25, Z+22	; 0x16
    2bbc:	a7 89       	ldd	r26, Z+23	; 0x17
    2bbe:	b0 8d       	ldd	r27, Z+24	; 0x18
    2bc0:	89 2b       	or	r24, r25
    2bc2:	8a 2b       	or	r24, r26
    2bc4:	8b 2b       	or	r24, r27
    2bc6:	41 f4       	brne	.+16     	; 0x2bd8 <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    2bc8:	82 e0       	ldi	r24, 0x02	; 2
    2bca:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    2bcc:	88 81       	ld	r24, Y
    2bce:	0e 94 ad 14 	call	0x295a	; 0x295a <nrk_add_to_readyQ>
    2bd2:	02 c0       	rjmp	.+4      	; 0x2bd8 <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    2bd4:	8f ef       	ldi	r24, 0xFF	; 255
    2bd6:	01 c0       	rjmp	.+2      	; 0x2bda <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
}
    2bda:	df 91       	pop	r29
    2bdc:	cf 91       	pop	r28
    2bde:	1f 91       	pop	r17
    2be0:	0f 91       	pop	r16
    2be2:	ff 90       	pop	r15
    2be4:	ef 90       	pop	r14
    2be6:	08 95       	ret

00002be8 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    2be8:	1f 93       	push	r17
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
    2bf2:	28 97       	sbiw	r28, 0x08	; 8
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	f8 94       	cli
    2bf8:	de bf       	out	0x3e, r29	; 62
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	cd bf       	out	0x3d, r28	; 61
    2bfe:	29 83       	std	Y+1, r18	; 0x01
    2c00:	3a 83       	std	Y+2, r19	; 0x02
    2c02:	4b 83       	std	Y+3, r20	; 0x03
    2c04:	5c 83       	std	Y+4, r21	; 0x04
    2c06:	6d 83       	std	Y+5, r22	; 0x05
    2c08:	7e 83       	std	Y+6, r23	; 0x06
    2c0a:	8f 83       	std	Y+7, r24	; 0x07
    2c0c:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    2c0e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    2c12:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <_nrk_os_timer_get>
    2c16:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    2c18:	ce 01       	movw	r24, r28
    2c1a:	01 96       	adiw	r24, 0x01	; 1
    2c1c:	0e 94 02 1a 	call	0x3404	; 0x3404 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    2c20:	63 30       	cpi	r22, 0x03	; 3
    2c22:	71 05       	cpc	r23, r1
    2c24:	98 f0       	brcs	.+38     	; 0x2c4c <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2c26:	e0 91 11 06 	lds	r30, 0x0611
    2c2a:	f0 91 12 06 	lds	r31, 0x0612
    2c2e:	21 2f       	mov	r18, r17
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	62 0f       	add	r22, r18
    2c34:	73 1f       	adc	r23, r19
    2c36:	cb 01       	movw	r24, r22
    2c38:	a0 e0       	ldi	r26, 0x00	; 0
    2c3a:	b0 e0       	ldi	r27, 0x00	; 0
    2c3c:	85 8b       	std	Z+21, r24	; 0x15
    2c3e:	96 8b       	std	Z+22, r25	; 0x16
    2c40:	a7 8b       	std	Z+23, r26	; 0x17
    2c42:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    2c44:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nrk_int_enable>

    return NRK_OK;
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	01 c0       	rjmp	.+2      	; 0x2c4e <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    2c4c:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    2c4e:	28 96       	adiw	r28, 0x08	; 8
    2c50:	0f b6       	in	r0, 0x3f	; 63
    2c52:	f8 94       	cli
    2c54:	de bf       	out	0x3e, r29	; 62
    2c56:	0f be       	out	0x3f, r0	; 63
    2c58:	cd bf       	out	0x3d, r28	; 61
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	1f 91       	pop	r17
    2c60:	08 95       	ret

00002c62 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    2c62:	0e 94 82 22 	call	0x4504	; 0x4504 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    2c66:	e0 91 11 06 	lds	r30, 0x0611
    2c6a:	f0 91 12 06 	lds	r31, 0x0612
    2c6e:	85 81       	ldd	r24, Z+5	; 0x05
    2c70:	81 11       	cpse	r24, r1
    2c72:	f7 cf       	rjmp	.-18     	; 0x2c62 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    2c74:	08 95       	ret

00002c76 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    2c76:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    2c78:	0e 94 3b 11 	call	0x2276	; 0x2276 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2c7c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    2c80:	e0 91 11 06 	lds	r30, 0x0611
    2c84:	f0 91 12 06 	lds	r31, 0x0612
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	92 a7       	std	Z+42, r25	; 0x2a
    2c8e:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    2c90:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2c92:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <_nrk_os_timer_get>
    2c96:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2c98:	88 3f       	cpi	r24, 0xF8	; 248
    2c9a:	80 f4       	brcc	.+32     	; 0x2cbc <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2c9c:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <_nrk_get_next_wakeup>
    2ca0:	2c 2f       	mov	r18, r28
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	2f 5f       	subi	r18, 0xFF	; 255
    2ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	28 17       	cp	r18, r24
    2cac:	39 07       	cpc	r19, r25
    2cae:	34 f4       	brge	.+12     	; 0x2cbc <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    2cb0:	82 e0       	ldi	r24, 0x02	; 2
    2cb2:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    2cb4:	80 93 23 04 	sts	0x0423, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2cb8:	0e 94 77 1f 	call	0x3eee	; 0x3eee <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2cbc:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2cc0:	0e 94 31 16 	call	0x2c62	; 0x2c62 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	cf 91       	pop	r28
    2cc8:	08 95       	ret

00002cca <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    2cca:	e0 91 11 06 	lds	r30, 0x0611
    2cce:	f0 91 12 06 	lds	r31, 0x0612
    2cd2:	80 85       	ldd	r24, Z+8	; 0x08
    2cd4:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    2cd8:	e0 91 11 06 	lds	r30, 0x0611
    2cdc:	f0 91 12 06 	lds	r31, 0x0612
    2ce0:	84 e0       	ldi	r24, 0x04	; 4
    2ce2:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    2ce4:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <nrk_wait_until_next_period>
    return NRK_OK;
}
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	08 95       	ret

00002cec <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    2cec:	cf 93       	push	r28
    2cee:	df 93       	push	r29
    2cf0:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    2cf2:	0e 94 3b 11 	call	0x2276	; 0x2276 <nrk_stack_check>

    if (p == 0)
    2cf6:	20 97       	sbiw	r28, 0x00	; 0
    2cf8:	11 f4       	brne	.+4      	; 0x2cfe <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    2cfa:	c1 e0       	ldi	r28, 0x01	; 1
    2cfc:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2cfe:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2d02:	e0 91 11 06 	lds	r30, 0x0611
    2d06:	f0 91 12 06 	lds	r31, 0x0612
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    2d0e:	d2 a7       	std	Z+42, r29	; 0x2a
    2d10:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    2d12:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <_nrk_os_timer_get>
    2d16:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    2d18:	88 3f       	cpi	r24, 0xF8	; 248
    2d1a:	80 f4       	brcc	.+32     	; 0x2d3c <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2d1c:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <_nrk_get_next_wakeup>
    2d20:	2c 2f       	mov	r18, r28
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	2f 5f       	subi	r18, 0xFF	; 255
    2d26:	3f 4f       	sbci	r19, 0xFF	; 255
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	28 17       	cp	r18, r24
    2d2c:	39 07       	cpc	r19, r25
    2d2e:	34 f4       	brge	.+12     	; 0x2d3c <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    2d30:	82 e0       	ldi	r24, 0x02	; 2
    2d32:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2d34:	80 93 23 04 	sts	0x0423, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2d38:	0e 94 77 1f 	call	0x3eee	; 0x3eee <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2d3c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2d40:	0e 94 31 16 	call	0x2c62	; 0x2c62 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	df 91       	pop	r29
    2d48:	cf 91       	pop	r28
    2d4a:	08 95       	ret

00002d4c <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    2d4c:	ef 92       	push	r14
    2d4e:	ff 92       	push	r15
    2d50:	0f 93       	push	r16
    2d52:	1f 93       	push	r17
    2d54:	cf 93       	push	r28
    2d56:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    2d58:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2d5c:	e0 91 11 06 	lds	r30, 0x0611
    2d60:	f0 91 12 06 	lds	r31, 0x0612
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2d68:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <_nrk_os_timer_get>
    2d6c:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    2d6e:	e0 91 11 06 	lds	r30, 0x0611
    2d72:	f0 91 12 06 	lds	r31, 0x0612
    2d76:	e8 2e       	mov	r14, r24
    2d78:	f1 2c       	mov	r15, r1
    2d7a:	c7 01       	movw	r24, r14
    2d7c:	80 0f       	add	r24, r16
    2d7e:	91 1f       	adc	r25, r17
    2d80:	a0 e0       	ldi	r26, 0x00	; 0
    2d82:	b0 e0       	ldi	r27, 0x00	; 0
    2d84:	85 8b       	std	Z+21, r24	; 0x15
    2d86:	96 8b       	std	Z+22, r25	; 0x16
    2d88:	a7 8b       	std	Z+23, r26	; 0x17
    2d8a:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2d8c:	c8 3f       	cpi	r28, 0xF8	; 248
    2d8e:	78 f4       	brcc	.+30     	; 0x2dae <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2d90:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <_nrk_get_next_wakeup>
    2d94:	9f ef       	ldi	r25, 0xFF	; 255
    2d96:	e9 1a       	sub	r14, r25
    2d98:	f9 0a       	sbc	r15, r25
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	e8 16       	cp	r14, r24
    2d9e:	f9 06       	cpc	r15, r25
    2da0:	34 f4       	brge	.+12     	; 0x2dae <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    2da2:	82 e0       	ldi	r24, 0x02	; 2
    2da4:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2da6:	80 93 23 04 	sts	0x0423, r24
            _nrk_set_next_wakeup (timer);
    2daa:	0e 94 77 1f 	call	0x3eee	; 0x3eee <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2dae:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2db2:	0e 94 31 16 	call	0x2c62	; 0x2c62 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	cf 91       	pop	r28
    2dba:	1f 91       	pop	r17
    2dbc:	0f 91       	pop	r16
    2dbe:	ff 90       	pop	r15
    2dc0:	ef 90       	pop	r14
    2dc2:	08 95       	ret

00002dc4 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    2dc4:	cf 93       	push	r28
    2dc6:	df 93       	push	r29
    2dc8:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    2dca:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2dce:	e0 91 11 06 	lds	r30, 0x0611
    2dd2:	f0 91 12 06 	lds	r31, 0x0612
    2dd6:	21 e0       	ldi	r18, 0x01	; 1
    2dd8:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    2dda:	ce 01       	movw	r24, r28
    2ddc:	a0 e0       	ldi	r26, 0x00	; 0
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	85 8b       	std	Z+21, r24	; 0x15
    2de2:	96 8b       	std	Z+22, r25	; 0x16
    2de4:	a7 8b       	std	Z+23, r26	; 0x17
    2de6:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    2de8:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <_nrk_os_timer_get>
    2dec:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2dee:	88 3f       	cpi	r24, 0xF8	; 248
    2df0:	80 f4       	brcc	.+32     	; 0x2e12 <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2df2:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <_nrk_get_next_wakeup>
    2df6:	2c 2f       	mov	r18, r28
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	2f 5f       	subi	r18, 0xFF	; 255
    2dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	28 17       	cp	r18, r24
    2e02:	39 07       	cpc	r19, r25
    2e04:	34 f4       	brge	.+12     	; 0x2e12 <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    2e06:	82 e0       	ldi	r24, 0x02	; 2
    2e08:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2e0a:	80 93 23 04 	sts	0x0423, r24
            _nrk_set_next_wakeup (timer);
    2e0e:	0e 94 77 1f 	call	0x3eee	; 0x3eee <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2e12:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2e16:	0e 94 31 16 	call	0x2c62	; 0x2c62 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	df 91       	pop	r29
    2e1e:	cf 91       	pop	r28
    2e20:	08 95       	ret

00002e22 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    2e22:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    2e24:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2e28:	e0 91 11 06 	lds	r30, 0x0611
    2e2c:	f0 91 12 06 	lds	r31, 0x0612
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    2e34:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    2e36:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <_nrk_os_timer_get>
    2e3a:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2e3c:	88 3f       	cpi	r24, 0xF8	; 248
    2e3e:	80 f4       	brcc	.+32     	; 0x2e60 <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2e40:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <_nrk_get_next_wakeup>
    2e44:	2c 2f       	mov	r18, r28
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	2f 5f       	subi	r18, 0xFF	; 255
    2e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	28 17       	cp	r18, r24
    2e50:	39 07       	cpc	r19, r25
    2e52:	34 f4       	brge	.+12     	; 0x2e60 <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    2e54:	82 e0       	ldi	r24, 0x02	; 2
    2e56:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2e58:	80 93 23 04 	sts	0x0423, r24
            _nrk_set_next_wakeup (timer);
    2e5c:	0e 94 77 1f 	call	0x3eee	; 0x3eee <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2e60:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2e64:	0e 94 31 16 	call	0x2c62	; 0x2c62 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	cf 91       	pop	r28
    2e6c:	08 95       	ret

00002e6e <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    2e6e:	1f 93       	push	r17
    2e70:	cf 93       	push	r28
    2e72:	df 93       	push	r29
    2e74:	cd b7       	in	r28, 0x3d	; 61
    2e76:	de b7       	in	r29, 0x3e	; 62
    2e78:	28 97       	sbiw	r28, 0x08	; 8
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	de bf       	out	0x3e, r29	; 62
    2e80:	0f be       	out	0x3f, r0	; 63
    2e82:	cd bf       	out	0x3d, r28	; 61
    2e84:	29 83       	std	Y+1, r18	; 0x01
    2e86:	3a 83       	std	Y+2, r19	; 0x02
    2e88:	4b 83       	std	Y+3, r20	; 0x03
    2e8a:	5c 83       	std	Y+4, r21	; 0x04
    2e8c:	6d 83       	std	Y+5, r22	; 0x05
    2e8e:	7e 83       	std	Y+6, r23	; 0x06
    2e90:	8f 83       	std	Y+7, r24	; 0x07
    2e92:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    2e94:	0e 94 3b 11 	call	0x2276	; 0x2276 <nrk_stack_check>

    nrk_int_disable ();
    2e98:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2e9c:	e0 91 11 06 	lds	r30, 0x0611
    2ea0:	f0 91 12 06 	lds	r31, 0x0612
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	92 a7       	std	Z+42, r25	; 0x2a
    2eae:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    2eb0:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <_nrk_os_timer_get>
    2eb4:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    2eb6:	ce 01       	movw	r24, r28
    2eb8:	01 96       	adiw	r24, 0x01	; 1
    2eba:	0e 94 02 1a 	call	0x3404	; 0x3404 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2ebe:	e0 91 11 06 	lds	r30, 0x0611
    2ec2:	f0 91 12 06 	lds	r31, 0x0612
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	81 0f       	add	r24, r17
    2ecc:	91 1d       	adc	r25, r1
    2ece:	a1 1d       	adc	r26, r1
    2ed0:	b1 1d       	adc	r27, r1
    2ed2:	85 8b       	std	Z+21, r24	; 0x15
    2ed4:	96 8b       	std	Z+22, r25	; 0x16
    2ed6:	a7 8b       	std	Z+23, r26	; 0x17
    2ed8:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2eda:	18 3f       	cpi	r17, 0xF8	; 248
    2edc:	80 f4       	brcc	.+32     	; 0x2efe <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2ede:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <_nrk_get_next_wakeup>
    2ee2:	21 2f       	mov	r18, r17
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	2f 5f       	subi	r18, 0xFF	; 255
    2ee8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	28 17       	cp	r18, r24
    2eee:	39 07       	cpc	r19, r25
    2ef0:	34 f4       	brge	.+12     	; 0x2efe <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    2ef6:	80 93 23 04 	sts	0x0423, r24
            _nrk_set_next_wakeup (timer);
    2efa:	0e 94 77 1f 	call	0x3eee	; 0x3eee <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    2efe:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    2f02:	0e 94 31 16 	call	0x2c62	; 0x2c62 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	28 96       	adiw	r28, 0x08	; 8
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	f8 94       	cli
    2f0e:	de bf       	out	0x3e, r29	; 62
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	cd bf       	out	0x3d, r28	; 61
    2f14:	df 91       	pop	r29
    2f16:	cf 91       	pop	r28
    2f18:	1f 91       	pop	r17
    2f1a:	08 95       	ret

00002f1c <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    2f1c:	8f 92       	push	r8
    2f1e:	9f 92       	push	r9
    2f20:	af 92       	push	r10
    2f22:	bf 92       	push	r11
    2f24:	cf 92       	push	r12
    2f26:	df 92       	push	r13
    2f28:	ef 92       	push	r14
    2f2a:	ff 92       	push	r15
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	cf 93       	push	r28
    2f32:	df 93       	push	r29
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	60 97       	sbiw	r28, 0x10	; 16
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	f8 94       	cli
    2f3e:	de bf       	out	0x3e, r29	; 62
    2f40:	0f be       	out	0x3f, r0	; 63
    2f42:	cd bf       	out	0x3d, r28	; 61
    2f44:	29 87       	std	Y+9, r18	; 0x09
    2f46:	3a 87       	std	Y+10, r19	; 0x0a
    2f48:	4b 87       	std	Y+11, r20	; 0x0b
    2f4a:	5c 87       	std	Y+12, r21	; 0x0c
    2f4c:	6d 87       	std	Y+13, r22	; 0x0d
    2f4e:	7e 87       	std	Y+14, r23	; 0x0e
    2f50:	8f 87       	std	Y+15, r24	; 0x0f
    2f52:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    2f54:	ce 01       	movw	r24, r28
    2f56:	01 96       	adiw	r24, 0x01	; 1
    2f58:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    2f5c:	89 80       	ldd	r8, Y+1	; 0x01
    2f5e:	9a 80       	ldd	r9, Y+2	; 0x02
    2f60:	ab 80       	ldd	r10, Y+3	; 0x03
    2f62:	bc 80       	ldd	r11, Y+4	; 0x04
    2f64:	cd 80       	ldd	r12, Y+5	; 0x05
    2f66:	de 80       	ldd	r13, Y+6	; 0x06
    2f68:	ef 80       	ldd	r14, Y+7	; 0x07
    2f6a:	f8 84       	ldd	r15, Y+8	; 0x08
    2f6c:	09 85       	ldd	r16, Y+9	; 0x09
    2f6e:	1a 85       	ldd	r17, Y+10	; 0x0a
    2f70:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f72:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f74:	4d 85       	ldd	r20, Y+13	; 0x0d
    2f76:	5e 85       	ldd	r21, Y+14	; 0x0e
    2f78:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f7a:	78 89       	ldd	r23, Y+16	; 0x10
    2f7c:	ce 01       	movw	r24, r28
    2f7e:	09 96       	adiw	r24, 0x09	; 9
    2f80:	0e 94 47 18 	call	0x308e	; 0x308e <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    2f84:	8f 3f       	cpi	r24, 0xFF	; 255
    2f86:	61 f0       	breq	.+24     	; 0x2fa0 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    2f88:	29 85       	ldd	r18, Y+9	; 0x09
    2f8a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f8c:	4b 85       	ldd	r20, Y+11	; 0x0b
    2f8e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2f90:	6d 85       	ldd	r22, Y+13	; 0x0d
    2f92:	7e 85       	ldd	r23, Y+14	; 0x0e
    2f94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f96:	98 89       	ldd	r25, Y+16	; 0x10
    2f98:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <nrk_wait>

    return NRK_OK;
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	01 c0       	rjmp	.+2      	; 0x2fa2 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    2fa0:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    2fa2:	60 96       	adiw	r28, 0x10	; 16
    2fa4:	0f b6       	in	r0, 0x3f	; 63
    2fa6:	f8 94       	cli
    2fa8:	de bf       	out	0x3e, r29	; 62
    2faa:	0f be       	out	0x3f, r0	; 63
    2fac:	cd bf       	out	0x3d, r28	; 61
    2fae:	df 91       	pop	r29
    2fb0:	cf 91       	pop	r28
    2fb2:	1f 91       	pop	r17
    2fb4:	0f 91       	pop	r16
    2fb6:	ff 90       	pop	r15
    2fb8:	ef 90       	pop	r14
    2fba:	df 90       	pop	r13
    2fbc:	cf 90       	pop	r12
    2fbe:	bf 90       	pop	r11
    2fc0:	af 90       	pop	r10
    2fc2:	9f 90       	pop	r9
    2fc4:	8f 90       	pop	r8
    2fc6:	08 95       	ret

00002fc8 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    2fc8:	e0 91 11 06 	lds	r30, 0x0611
    2fcc:	f0 91 12 06 	lds	r31, 0x0612
}
    2fd0:	80 85       	ldd	r24, Z+8	; 0x08
    2fd2:	08 95       	ret

00002fd4 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    2fd4:	0f 93       	push	r16
    2fd6:	1f 93       	push	r17
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    2fde:	1c 82       	std	Y+4, r1	; 0x04
    2fe0:	1d 82       	std	Y+5, r1	; 0x05
    2fe2:	1e 82       	std	Y+6, r1	; 0x06
    2fe4:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    2fe6:	80 91 08 06 	lds	r24, 0x0608
    2fea:	90 91 09 06 	lds	r25, 0x0609
    2fee:	a0 91 0a 06 	lds	r26, 0x060A
    2ff2:	b0 91 0b 06 	lds	r27, 0x060B
    2ff6:	88 83       	st	Y, r24
    2ff8:	99 83       	std	Y+1, r25	; 0x01
    2ffa:	aa 83       	std	Y+2, r26	; 0x02
    2ffc:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    2ffe:	80 91 0c 06 	lds	r24, 0x060C
    3002:	90 91 0d 06 	lds	r25, 0x060D
    3006:	a0 91 0e 06 	lds	r26, 0x060E
    300a:	b0 91 0f 06 	lds	r27, 0x060F
    300e:	8c 83       	std	Y+4, r24	; 0x04
    3010:	9d 83       	std	Y+5, r25	; 0x05
    3012:	ae 83       	std	Y+6, r26	; 0x06
    3014:	bf 83       	std	Y+7, r27	; 0x07
 
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    3016:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <_nrk_os_timer_get>
    301a:	a8 2f       	mov	r26, r24
    301c:	b0 e0       	ldi	r27, 0x00	; 0
    301e:	23 eb       	ldi	r18, 0xB3	; 179
    3020:	36 ee       	ldi	r19, 0xE6	; 230
    3022:	4e e0       	ldi	r20, 0x0E	; 14
    3024:	50 e0       	ldi	r21, 0x00	; 0
    3026:	0e 94 bb 24 	call	0x4976	; 0x4976 <__muluhisi3>
    302a:	0c 81       	ldd	r16, Y+4	; 0x04
    302c:	1d 81       	ldd	r17, Y+5	; 0x05
    302e:	2e 81       	ldd	r18, Y+6	; 0x06
    3030:	3f 81       	ldd	r19, Y+7	; 0x07
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	80 0f       	add	r24, r16
    3038:	91 1f       	adc	r25, r17
    303a:	a2 1f       	adc	r26, r18
    303c:	b3 1f       	adc	r27, r19
    303e:	8c 83       	std	Y+4, r24	; 0x04
    3040:	9d 83       	std	Y+5, r25	; 0x05
    3042:	ae 83       	std	Y+6, r26	; 0x06
    3044:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3046:	8c 81       	ldd	r24, Y+4	; 0x04
    3048:	9d 81       	ldd	r25, Y+5	; 0x05
    304a:	ae 81       	ldd	r26, Y+6	; 0x06
    304c:	bf 81       	ldd	r27, Y+7	; 0x07
    304e:	81 15       	cp	r24, r1
    3050:	2a ec       	ldi	r18, 0xCA	; 202
    3052:	92 07       	cpc	r25, r18
    3054:	2a e9       	ldi	r18, 0x9A	; 154
    3056:	a2 07       	cpc	r26, r18
    3058:	2b e3       	ldi	r18, 0x3B	; 59
    305a:	b2 07       	cpc	r27, r18
    305c:	98 f0       	brcs	.+38     	; 0x3084 <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    305e:	9a 5c       	subi	r25, 0xCA	; 202
    3060:	aa 49       	sbci	r26, 0x9A	; 154
    3062:	bb 43       	sbci	r27, 0x3B	; 59
    3064:	8c 83       	std	Y+4, r24	; 0x04
    3066:	9d 83       	std	Y+5, r25	; 0x05
    3068:	ae 83       	std	Y+6, r26	; 0x06
    306a:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    306c:	88 81       	ld	r24, Y
    306e:	99 81       	ldd	r25, Y+1	; 0x01
    3070:	aa 81       	ldd	r26, Y+2	; 0x02
    3072:	bb 81       	ldd	r27, Y+3	; 0x03
    3074:	01 96       	adiw	r24, 0x01	; 1
    3076:	a1 1d       	adc	r26, r1
    3078:	b1 1d       	adc	r27, r1
    307a:	88 83       	st	Y, r24
    307c:	99 83       	std	Y+1, r25	; 0x01
    307e:	aa 83       	std	Y+2, r26	; 0x02
    3080:	bb 83       	std	Y+3, r27	; 0x03
    3082:	e1 cf       	rjmp	.-62     	; 0x3046 <nrk_time_get+0x72>
    }

}
    3084:	df 91       	pop	r29
    3086:	cf 91       	pop	r28
    3088:	1f 91       	pop	r17
    308a:	0f 91       	pop	r16
    308c:	08 95       	ret

0000308e <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    308e:	8f 92       	push	r8
    3090:	9f 92       	push	r9
    3092:	af 92       	push	r10
    3094:	bf 92       	push	r11
    3096:	cf 92       	push	r12
    3098:	df 92       	push	r13
    309a:	ef 92       	push	r14
    309c:	ff 92       	push	r15
    309e:	0f 93       	push	r16
    30a0:	1f 93       	push	r17
    30a2:	cf 93       	push	r28
    30a4:	df 93       	push	r29
    30a6:	cd b7       	in	r28, 0x3d	; 61
    30a8:	de b7       	in	r29, 0x3e	; 62
    30aa:	60 97       	sbiw	r28, 0x10	; 16
    30ac:	0f b6       	in	r0, 0x3f	; 63
    30ae:	f8 94       	cli
    30b0:	de bf       	out	0x3e, r29	; 62
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	cd bf       	out	0x3d, r28	; 61
    30b6:	fc 01       	movw	r30, r24
    30b8:	09 83       	std	Y+1, r16	; 0x01
    30ba:	1a 83       	std	Y+2, r17	; 0x02
    30bc:	2b 83       	std	Y+3, r18	; 0x03
    30be:	3c 83       	std	Y+4, r19	; 0x04
    30c0:	4d 83       	std	Y+5, r20	; 0x05
    30c2:	5e 83       	std	Y+6, r21	; 0x06
    30c4:	6f 83       	std	Y+7, r22	; 0x07
    30c6:	78 87       	std	Y+8, r23	; 0x08
    30c8:	89 86       	std	Y+9, r8	; 0x09
    30ca:	9a 86       	std	Y+10, r9	; 0x0a
    30cc:	ab 86       	std	Y+11, r10	; 0x0b
    30ce:	bc 86       	std	Y+12, r11	; 0x0c
    30d0:	cd 86       	std	Y+13, r12	; 0x0d
    30d2:	de 86       	std	Y+14, r13	; 0x0e
    30d4:	ef 86       	std	Y+15, r14	; 0x0f
    30d6:	f8 8a       	std	Y+16, r15	; 0x10
    30d8:	09 81       	ldd	r16, Y+1	; 0x01
    30da:	1a 81       	ldd	r17, Y+2	; 0x02
    30dc:	2b 81       	ldd	r18, Y+3	; 0x03
    30de:	3c 81       	ldd	r19, Y+4	; 0x04
    30e0:	4d 81       	ldd	r20, Y+5	; 0x05
    30e2:	5e 81       	ldd	r21, Y+6	; 0x06
    30e4:	6f 81       	ldd	r22, Y+7	; 0x07
    30e6:	78 85       	ldd	r23, Y+8	; 0x08
    30e8:	c9 84       	ldd	r12, Y+9	; 0x09
    30ea:	da 84       	ldd	r13, Y+10	; 0x0a
    30ec:	eb 84       	ldd	r14, Y+11	; 0x0b
    30ee:	fc 84       	ldd	r15, Y+12	; 0x0c
    30f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30f4:	af 85       	ldd	r26, Y+15	; 0x0f
    30f6:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    30f8:	0c 15       	cp	r16, r12
    30fa:	1d 05       	cpc	r17, r13
    30fc:	2e 05       	cpc	r18, r14
    30fe:	3f 05       	cpc	r19, r15
    3100:	f0 f1       	brcs	.+124    	; 0x317e <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    3102:	c0 16       	cp	r12, r16
    3104:	d1 06       	cpc	r13, r17
    3106:	e2 06       	cpc	r14, r18
    3108:	f3 06       	cpc	r15, r19
    310a:	91 f4       	brne	.+36     	; 0x3130 <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    310c:	48 17       	cp	r20, r24
    310e:	59 07       	cpc	r21, r25
    3110:	6a 07       	cpc	r22, r26
    3112:	7b 07       	cpc	r23, r27
    3114:	a0 f1       	brcs	.+104    	; 0x317e <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    3116:	48 1b       	sub	r20, r24
    3118:	59 0b       	sbc	r21, r25
    311a:	6a 0b       	sbc	r22, r26
    311c:	7b 0b       	sbc	r23, r27
    311e:	44 83       	std	Z+4, r20	; 0x04
    3120:	55 83       	std	Z+5, r21	; 0x05
    3122:	66 83       	std	Z+6, r22	; 0x06
    3124:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    3126:	10 82       	st	Z, r1
    3128:	11 82       	std	Z+1, r1	; 0x01
    312a:	12 82       	std	Z+2, r1	; 0x02
    312c:	13 82       	std	Z+3, r1	; 0x03
    312e:	25 c0       	rjmp	.+74     	; 0x317a <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    3130:	48 17       	cp	r20, r24
    3132:	59 07       	cpc	r21, r25
    3134:	6a 07       	cpc	r22, r26
    3136:	7b 07       	cpc	r23, r27
    3138:	80 f4       	brcc	.+32     	; 0x315a <nrk_time_sub+0xcc>
{
	high.secs--;
    313a:	01 50       	subi	r16, 0x01	; 1
    313c:	11 09       	sbc	r17, r1
    313e:	21 09       	sbc	r18, r1
    3140:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    3142:	0c 19       	sub	r16, r12
    3144:	1d 09       	sbc	r17, r13
    3146:	2e 09       	sbc	r18, r14
    3148:	3f 09       	sbc	r19, r15
    314a:	00 83       	st	Z, r16
    314c:	11 83       	std	Z+1, r17	; 0x01
    314e:	22 83       	std	Z+2, r18	; 0x02
    3150:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    3152:	56 53       	subi	r21, 0x36	; 54
    3154:	65 46       	sbci	r22, 0x65	; 101
    3156:	74 4c       	sbci	r23, 0xC4	; 196
    3158:	08 c0       	rjmp	.+16     	; 0x316a <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    315a:	0c 19       	sub	r16, r12
    315c:	1d 09       	sbc	r17, r13
    315e:	2e 09       	sbc	r18, r14
    3160:	3f 09       	sbc	r19, r15
    3162:	00 83       	st	Z, r16
    3164:	11 83       	std	Z+1, r17	; 0x01
    3166:	22 83       	std	Z+2, r18	; 0x02
    3168:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    316a:	48 1b       	sub	r20, r24
    316c:	59 0b       	sbc	r21, r25
    316e:	6a 0b       	sbc	r22, r26
    3170:	7b 0b       	sbc	r23, r27
    3172:	44 83       	std	Z+4, r20	; 0x04
    3174:	55 83       	std	Z+5, r21	; 0x05
    3176:	66 83       	std	Z+6, r22	; 0x06
    3178:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	01 c0       	rjmp	.+2      	; 0x3180 <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    317e:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    3180:	60 96       	adiw	r28, 0x10	; 16
    3182:	0f b6       	in	r0, 0x3f	; 63
    3184:	f8 94       	cli
    3186:	de bf       	out	0x3e, r29	; 62
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	cd bf       	out	0x3d, r28	; 61
    318c:	df 91       	pop	r29
    318e:	cf 91       	pop	r28
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	ff 90       	pop	r15
    3196:	ef 90       	pop	r14
    3198:	df 90       	pop	r13
    319a:	cf 90       	pop	r12
    319c:	bf 90       	pop	r11
    319e:	af 90       	pop	r10
    31a0:	9f 90       	pop	r9
    31a2:	8f 90       	pop	r8
    31a4:	08 95       	ret

000031a6 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    31a6:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    31a8:	44 81       	ldd	r20, Z+4	; 0x04
    31aa:	55 81       	ldd	r21, Z+5	; 0x05
    31ac:	66 81       	ldd	r22, Z+6	; 0x06
    31ae:	77 81       	ldd	r23, Z+7	; 0x07
    31b0:	41 15       	cp	r20, r1
    31b2:	8a ec       	ldi	r24, 0xCA	; 202
    31b4:	58 07       	cpc	r21, r24
    31b6:	8a e9       	ldi	r24, 0x9A	; 154
    31b8:	68 07       	cpc	r22, r24
    31ba:	8b e3       	ldi	r24, 0x3B	; 59
    31bc:	78 07       	cpc	r23, r24
    31be:	98 f0       	brcs	.+38     	; 0x31e6 <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    31c0:	5a 5c       	subi	r21, 0xCA	; 202
    31c2:	6a 49       	sbci	r22, 0x9A	; 154
    31c4:	7b 43       	sbci	r23, 0x3B	; 59
    31c6:	44 83       	std	Z+4, r20	; 0x04
    31c8:	55 83       	std	Z+5, r21	; 0x05
    31ca:	66 83       	std	Z+6, r22	; 0x06
    31cc:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    31ce:	80 81       	ld	r24, Z
    31d0:	91 81       	ldd	r25, Z+1	; 0x01
    31d2:	a2 81       	ldd	r26, Z+2	; 0x02
    31d4:	b3 81       	ldd	r27, Z+3	; 0x03
    31d6:	01 96       	adiw	r24, 0x01	; 1
    31d8:	a1 1d       	adc	r26, r1
    31da:	b1 1d       	adc	r27, r1
    31dc:	80 83       	st	Z, r24
    31de:	91 83       	std	Z+1, r25	; 0x01
    31e0:	a2 83       	std	Z+2, r26	; 0x02
    31e2:	b3 83       	std	Z+3, r27	; 0x03
    31e4:	e1 cf       	rjmp	.-62     	; 0x31a8 <nrk_time_compact_nanos+0x2>
    }
}
    31e6:	08 95       	ret

000031e8 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    31e8:	8f 92       	push	r8
    31ea:	9f 92       	push	r9
    31ec:	af 92       	push	r10
    31ee:	bf 92       	push	r11
    31f0:	cf 92       	push	r12
    31f2:	df 92       	push	r13
    31f4:	ef 92       	push	r14
    31f6:	ff 92       	push	r15
    31f8:	0f 93       	push	r16
    31fa:	1f 93       	push	r17
    31fc:	cf 93       	push	r28
    31fe:	df 93       	push	r29
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
    3204:	60 97       	sbiw	r28, 0x10	; 16
    3206:	0f b6       	in	r0, 0x3f	; 63
    3208:	f8 94       	cli
    320a:	de bf       	out	0x3e, r29	; 62
    320c:	0f be       	out	0x3f, r0	; 63
    320e:	cd bf       	out	0x3d, r28	; 61
    3210:	09 83       	std	Y+1, r16	; 0x01
    3212:	1a 83       	std	Y+2, r17	; 0x02
    3214:	2b 83       	std	Y+3, r18	; 0x03
    3216:	3c 83       	std	Y+4, r19	; 0x04
    3218:	4d 83       	std	Y+5, r20	; 0x05
    321a:	5e 83       	std	Y+6, r21	; 0x06
    321c:	6f 83       	std	Y+7, r22	; 0x07
    321e:	78 87       	std	Y+8, r23	; 0x08
    3220:	89 86       	std	Y+9, r8	; 0x09
    3222:	9a 86       	std	Y+10, r9	; 0x0a
    3224:	ab 86       	std	Y+11, r10	; 0x0b
    3226:	bc 86       	std	Y+12, r11	; 0x0c
    3228:	cd 86       	std	Y+13, r12	; 0x0d
    322a:	de 86       	std	Y+14, r13	; 0x0e
    322c:	ef 86       	std	Y+15, r14	; 0x0f
    322e:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    3230:	09 85       	ldd	r16, Y+9	; 0x09
    3232:	1a 85       	ldd	r17, Y+10	; 0x0a
    3234:	2b 85       	ldd	r18, Y+11	; 0x0b
    3236:	3c 85       	ldd	r19, Y+12	; 0x0c
    3238:	49 81       	ldd	r20, Y+1	; 0x01
    323a:	5a 81       	ldd	r21, Y+2	; 0x02
    323c:	6b 81       	ldd	r22, Y+3	; 0x03
    323e:	7c 81       	ldd	r23, Y+4	; 0x04
    3240:	40 0f       	add	r20, r16
    3242:	51 1f       	adc	r21, r17
    3244:	62 1f       	adc	r22, r18
    3246:	73 1f       	adc	r23, r19
    3248:	fc 01       	movw	r30, r24
    324a:	40 83       	st	Z, r20
    324c:	51 83       	std	Z+1, r21	; 0x01
    324e:	62 83       	std	Z+2, r22	; 0x02
    3250:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    3252:	0d 85       	ldd	r16, Y+13	; 0x0d
    3254:	1e 85       	ldd	r17, Y+14	; 0x0e
    3256:	2f 85       	ldd	r18, Y+15	; 0x0f
    3258:	38 89       	ldd	r19, Y+16	; 0x10
    325a:	4d 81       	ldd	r20, Y+5	; 0x05
    325c:	5e 81       	ldd	r21, Y+6	; 0x06
    325e:	6f 81       	ldd	r22, Y+7	; 0x07
    3260:	78 85       	ldd	r23, Y+8	; 0x08
    3262:	40 0f       	add	r20, r16
    3264:	51 1f       	adc	r21, r17
    3266:	62 1f       	adc	r22, r18
    3268:	73 1f       	adc	r23, r19
    326a:	44 83       	std	Z+4, r20	; 0x04
    326c:	55 83       	std	Z+5, r21	; 0x05
    326e:	66 83       	std	Z+6, r22	; 0x06
    3270:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    3272:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <nrk_time_compact_nanos>
return NRK_OK;
}
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	60 96       	adiw	r28, 0x10	; 16
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	f8 94       	cli
    327e:	de bf       	out	0x3e, r29	; 62
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	cd bf       	out	0x3d, r28	; 61
    3284:	df 91       	pop	r29
    3286:	cf 91       	pop	r28
    3288:	1f 91       	pop	r17
    328a:	0f 91       	pop	r16
    328c:	ff 90       	pop	r15
    328e:	ef 90       	pop	r14
    3290:	df 90       	pop	r13
    3292:	cf 90       	pop	r12
    3294:	bf 90       	pop	r11
    3296:	af 90       	pop	r10
    3298:	9f 90       	pop	r9
    329a:	8f 90       	pop	r8
    329c:	08 95       	ret

0000329e <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    329e:	e8 e0       	ldi	r30, 0x08	; 8
    32a0:	f6 e0       	ldi	r31, 0x06	; 6
    32a2:	60 83       	st	Z, r22
    32a4:	71 83       	std	Z+1, r23	; 0x01
    32a6:	82 83       	std	Z+2, r24	; 0x02
    32a8:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    32aa:	24 83       	std	Z+4, r18	; 0x04
    32ac:	35 83       	std	Z+5, r19	; 0x05
    32ae:	46 83       	std	Z+6, r20	; 0x06
    32b0:	57 83       	std	Z+7, r21	; 0x07
    32b2:	08 95       	ret

000032b4 <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    32b4:	2f 92       	push	r2
    32b6:	3f 92       	push	r3
    32b8:	4f 92       	push	r4
    32ba:	5f 92       	push	r5
    32bc:	6f 92       	push	r6
    32be:	7f 92       	push	r7
    32c0:	8f 92       	push	r8
    32c2:	9f 92       	push	r9
    32c4:	af 92       	push	r10
    32c6:	bf 92       	push	r11
    32c8:	cf 92       	push	r12
    32ca:	df 92       	push	r13
    32cc:	ef 92       	push	r14
    32ce:	ff 92       	push	r15
    32d0:	0f 93       	push	r16
    32d2:	1f 93       	push	r17
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    32d4:	fc 01       	movw	r30, r24
    32d6:	c0 80       	ld	r12, Z
    32d8:	d1 80       	ldd	r13, Z+1	; 0x01
    32da:	e2 80       	ldd	r14, Z+2	; 0x02
    32dc:	f3 80       	ldd	r15, Z+3	; 0x03
    32de:	64 81       	ldd	r22, Z+4	; 0x04
    32e0:	75 81       	ldd	r23, Z+5	; 0x05
    32e2:	86 81       	ldd	r24, Z+6	; 0x06
    32e4:	97 81       	ldd	r25, Z+7	; 0x07
    32e6:	c1 14       	cp	r12, r1
    32e8:	d1 04       	cpc	r13, r1
    32ea:	e1 04       	cpc	r14, r1
    32ec:	f1 04       	cpc	r15, r1
    32ee:	c1 f1       	breq	.+112    	; 0x3360 <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    32f0:	f2 e4       	ldi	r31, 0x42	; 66
    32f2:	cf 16       	cp	r12, r31
    32f4:	d1 04       	cpc	r13, r1
    32f6:	e1 04       	cpc	r14, r1
    32f8:	f1 04       	cpc	r15, r1
    32fa:	d0 f5       	brcc	.+116    	; 0x3370 <_nrk_time_to_ticks+0xbc>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    32fc:	1b 01       	movw	r2, r22
    32fe:	2c 01       	movw	r4, r24
    3300:	61 2c       	mov	r6, r1
    3302:	71 2c       	mov	r7, r1
    3304:	43 01       	movw	r8, r6
    3306:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3308:	8e 2f       	mov	r24, r30
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	a0 e0       	ldi	r26, 0x00	; 0
    330e:	b0 e0       	ldi	r27, 0x00	; 0
    3310:	8c 15       	cp	r24, r12
    3312:	9d 05       	cpc	r25, r13
    3314:	ae 05       	cpc	r26, r14
    3316:	bf 05       	cpc	r27, r15
    3318:	88 f4       	brcc	.+34     	; 0x333c <_nrk_time_to_ticks+0x88>
    331a:	91 01       	movw	r18, r2
    331c:	a2 01       	movw	r20, r4
    331e:	b3 01       	movw	r22, r6
    3320:	c4 01       	movw	r24, r8
    3322:	36 53       	subi	r19, 0x36	; 54
    3324:	45 46       	sbci	r20, 0x65	; 101
    3326:	54 4c       	sbci	r21, 0xC4	; 196
    3328:	6f 4f       	sbci	r22, 0xFF	; 255
    332a:	7f 4f       	sbci	r23, 0xFF	; 255
    332c:	8f 4f       	sbci	r24, 0xFF	; 255
    332e:	9f 4f       	sbci	r25, 0xFF	; 255
    3330:	19 01       	movw	r2, r18
    3332:	2a 01       	movw	r4, r20
    3334:	3b 01       	movw	r6, r22
    3336:	4c 01       	movw	r8, r24
    3338:	ef 5f       	subi	r30, 0xFF	; 255
    333a:	e6 cf       	rjmp	.-52     	; 0x3308 <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    333c:	83 eb       	ldi	r24, 0xB3	; 179
    333e:	a8 2e       	mov	r10, r24
    3340:	96 ee       	ldi	r25, 0xE6	; 230
    3342:	b9 2e       	mov	r11, r25
    3344:	2e e0       	ldi	r18, 0x0E	; 14
    3346:	c2 2e       	mov	r12, r18
    3348:	d1 2c       	mov	r13, r1
    334a:	e1 2c       	mov	r14, r1
    334c:	f1 2c       	mov	r15, r1
    334e:	00 e0       	ldi	r16, 0x00	; 0
    3350:	10 e0       	ldi	r17, 0x00	; 0
    3352:	91 01       	movw	r18, r2
    3354:	a2 01       	movw	r20, r4
    3356:	b3 01       	movw	r22, r6
    3358:	c4 01       	movw	r24, r8
    335a:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <__udivdi3>
    335e:	06 c0       	rjmp	.+12     	; 0x336c <_nrk_time_to_ticks+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    3360:	23 eb       	ldi	r18, 0xB3	; 179
    3362:	36 ee       	ldi	r19, 0xE6	; 230
    3364:	4e e0       	ldi	r20, 0x0E	; 14
    3366:	50 e0       	ldi	r21, 0x00	; 0
    3368:	0e 94 d6 24 	call	0x49ac	; 0x49ac <__udivmodsi4>
    336c:	c9 01       	movw	r24, r18
    336e:	02 c0       	rjmp	.+4      	; 0x3374 <_nrk_time_to_ticks+0xc0>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3370:	80 e0       	ldi	r24, 0x00	; 0
    3372:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    3374:	1f 91       	pop	r17
    3376:	0f 91       	pop	r16
    3378:	ff 90       	pop	r15
    337a:	ef 90       	pop	r14
    337c:	df 90       	pop	r13
    337e:	cf 90       	pop	r12
    3380:	bf 90       	pop	r11
    3382:	af 90       	pop	r10
    3384:	9f 90       	pop	r9
    3386:	8f 90       	pop	r8
    3388:	7f 90       	pop	r7
    338a:	6f 90       	pop	r6
    338c:	5f 90       	pop	r5
    338e:	4f 90       	pop	r4
    3390:	3f 90       	pop	r3
    3392:	2f 90       	pop	r2
    3394:	08 95       	ret

00003396 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3396:	cf 92       	push	r12
    3398:	df 92       	push	r13
    339a:	ef 92       	push	r14
    339c:	ff 92       	push	r15
    339e:	cf 93       	push	r28
    33a0:	df 93       	push	r29
    33a2:	cd b7       	in	r28, 0x3d	; 61
    33a4:	de b7       	in	r29, 0x3e	; 62
    33a6:	28 97       	sbiw	r28, 0x08	; 8
    33a8:	0f b6       	in	r0, 0x3f	; 63
    33aa:	f8 94       	cli
    33ac:	de bf       	out	0x3e, r29	; 62
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    33b2:	6b 01       	movw	r12, r22
    33b4:	7c 01       	movw	r14, r24
    33b6:	2a e0       	ldi	r18, 0x0A	; 10
    33b8:	f6 94       	lsr	r15
    33ba:	e7 94       	ror	r14
    33bc:	d7 94       	ror	r13
    33be:	c7 94       	ror	r12
    33c0:	2a 95       	dec	r18
    33c2:	d1 f7       	brne	.-12     	; 0x33b8 <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    33c4:	c9 82       	std	Y+1, r12	; 0x01
    33c6:	da 82       	std	Y+2, r13	; 0x02
    33c8:	eb 82       	std	Y+3, r14	; 0x03
    33ca:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    33cc:	9b 01       	movw	r18, r22
    33ce:	ac 01       	movw	r20, r24
    33d0:	33 70       	andi	r19, 0x03	; 3
    33d2:	44 27       	eor	r20, r20
    33d4:	55 27       	eor	r21, r21
    33d6:	63 eb       	ldi	r22, 0xB3	; 179
    33d8:	76 ee       	ldi	r23, 0xE6	; 230
    33da:	8e e0       	ldi	r24, 0x0E	; 14
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	0e 94 c6 24 	call	0x498c	; 0x498c <__mulsi3>

return t;
    33e2:	2c 2d       	mov	r18, r12
    33e4:	3a 81       	ldd	r19, Y+2	; 0x02
    33e6:	4b 81       	ldd	r20, Y+3	; 0x03
    33e8:	5c 81       	ldd	r21, Y+4	; 0x04
}
    33ea:	28 96       	adiw	r28, 0x08	; 8
    33ec:	0f b6       	in	r0, 0x3f	; 63
    33ee:	f8 94       	cli
    33f0:	de bf       	out	0x3e, r29	; 62
    33f2:	0f be       	out	0x3f, r0	; 63
    33f4:	cd bf       	out	0x3d, r28	; 61
    33f6:	df 91       	pop	r29
    33f8:	cf 91       	pop	r28
    33fa:	ff 90       	pop	r15
    33fc:	ef 90       	pop	r14
    33fe:	df 90       	pop	r13
    3400:	cf 90       	pop	r12
    3402:	08 95       	ret

00003404 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    3404:	2f 92       	push	r2
    3406:	3f 92       	push	r3
    3408:	4f 92       	push	r4
    340a:	5f 92       	push	r5
    340c:	6f 92       	push	r6
    340e:	7f 92       	push	r7
    3410:	8f 92       	push	r8
    3412:	9f 92       	push	r9
    3414:	af 92       	push	r10
    3416:	bf 92       	push	r11
    3418:	cf 92       	push	r12
    341a:	df 92       	push	r13
    341c:	ef 92       	push	r14
    341e:	ff 92       	push	r15
    3420:	0f 93       	push	r16
    3422:	1f 93       	push	r17
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3424:	fc 01       	movw	r30, r24
    3426:	c0 80       	ld	r12, Z
    3428:	d1 80       	ldd	r13, Z+1	; 0x01
    342a:	e2 80       	ldd	r14, Z+2	; 0x02
    342c:	f3 80       	ldd	r15, Z+3	; 0x03
    342e:	64 81       	ldd	r22, Z+4	; 0x04
    3430:	75 81       	ldd	r23, Z+5	; 0x05
    3432:	86 81       	ldd	r24, Z+6	; 0x06
    3434:	97 81       	ldd	r25, Z+7	; 0x07
    3436:	c1 14       	cp	r12, r1
    3438:	d1 04       	cpc	r13, r1
    343a:	e1 04       	cpc	r14, r1
    343c:	f1 04       	cpc	r15, r1
    343e:	99 f1       	breq	.+102    	; 0x34a6 <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    3440:	1b 01       	movw	r2, r22
    3442:	2c 01       	movw	r4, r24
    3444:	61 2c       	mov	r6, r1
    3446:	71 2c       	mov	r7, r1
    3448:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    344a:	e0 e0       	ldi	r30, 0x00	; 0
    344c:	8e 2f       	mov	r24, r30
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	a0 e0       	ldi	r26, 0x00	; 0
    3452:	b0 e0       	ldi	r27, 0x00	; 0
    3454:	8c 15       	cp	r24, r12
    3456:	9d 05       	cpc	r25, r13
    3458:	ae 05       	cpc	r26, r14
    345a:	bf 05       	cpc	r27, r15
    345c:	88 f4       	brcc	.+34     	; 0x3480 <_nrk_time_to_ticks_long+0x7c>
    345e:	91 01       	movw	r18, r2
    3460:	a2 01       	movw	r20, r4
    3462:	b3 01       	movw	r22, r6
    3464:	c4 01       	movw	r24, r8
    3466:	36 53       	subi	r19, 0x36	; 54
    3468:	45 46       	sbci	r20, 0x65	; 101
    346a:	54 4c       	sbci	r21, 0xC4	; 196
    346c:	6f 4f       	sbci	r22, 0xFF	; 255
    346e:	7f 4f       	sbci	r23, 0xFF	; 255
    3470:	8f 4f       	sbci	r24, 0xFF	; 255
    3472:	9f 4f       	sbci	r25, 0xFF	; 255
    3474:	19 01       	movw	r2, r18
    3476:	2a 01       	movw	r4, r20
    3478:	3b 01       	movw	r6, r22
    347a:	4c 01       	movw	r8, r24
    347c:	ef 5f       	subi	r30, 0xFF	; 255
    347e:	e6 cf       	rjmp	.-52     	; 0x344c <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3480:	83 eb       	ldi	r24, 0xB3	; 179
    3482:	a8 2e       	mov	r10, r24
    3484:	96 ee       	ldi	r25, 0xE6	; 230
    3486:	b9 2e       	mov	r11, r25
    3488:	2e e0       	ldi	r18, 0x0E	; 14
    348a:	c2 2e       	mov	r12, r18
    348c:	d1 2c       	mov	r13, r1
    348e:	e1 2c       	mov	r14, r1
    3490:	f1 2c       	mov	r15, r1
    3492:	00 e0       	ldi	r16, 0x00	; 0
    3494:	10 e0       	ldi	r17, 0x00	; 0
    3496:	91 01       	movw	r18, r2
    3498:	a2 01       	movw	r20, r4
    349a:	b3 01       	movw	r22, r6
    349c:	c4 01       	movw	r24, r8
    349e:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <__udivdi3>
    34a2:	ca 01       	movw	r24, r20
    34a4:	07 c0       	rjmp	.+14     	; 0x34b4 <_nrk_time_to_ticks_long+0xb0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    34a6:	23 eb       	ldi	r18, 0xB3	; 179
    34a8:	36 ee       	ldi	r19, 0xE6	; 230
    34aa:	4e e0       	ldi	r20, 0x0E	; 14
    34ac:	50 e0       	ldi	r21, 0x00	; 0
    34ae:	0e 94 d6 24 	call	0x49ac	; 0x49ac <__udivmodsi4>
    34b2:	ca 01       	movw	r24, r20
}
return ticks;
}
    34b4:	b9 01       	movw	r22, r18
    34b6:	1f 91       	pop	r17
    34b8:	0f 91       	pop	r16
    34ba:	ff 90       	pop	r15
    34bc:	ef 90       	pop	r14
    34be:	df 90       	pop	r13
    34c0:	cf 90       	pop	r12
    34c2:	bf 90       	pop	r11
    34c4:	af 90       	pop	r10
    34c6:	9f 90       	pop	r9
    34c8:	8f 90       	pop	r8
    34ca:	7f 90       	pop	r7
    34cc:	6f 90       	pop	r6
    34ce:	5f 90       	pop	r5
    34d0:	4f 90       	pop	r4
    34d2:	3f 90       	pop	r3
    34d4:	2f 90       	pop	r2
    34d6:	08 95       	ret

000034d8 <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    34d8:	c2 e0       	ldi	r28, 0x02	; 2
{
  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    34da:	d1 e0       	ldi	r29, 0x01	; 1
{
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{
  nrk_stack_check(); 
    34dc:	0e 94 3b 11 	call	0x2276	; 0x2276 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    34e0:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <_nrk_get_next_wakeup>
    34e4:	84 30       	cpi	r24, 0x04	; 4
    34e6:	28 f4       	brcc	.+10     	; 0x34f2 <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    34e8:	d0 93 05 06 	sts	0x0605, r29
	    nrk_idle();
    34ec:	0e 94 82 22 	call	0x4504	; 0x4504 <nrk_idle>
    34f0:	08 c0       	rjmp	.+16     	; 0x3502 <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    34f2:	8a e0       	ldi	r24, 0x0A	; 10
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    34fa:	c0 93 05 06 	sts	0x0605, r28
	    nrk_sleep();
    34fe:	0e 94 76 22 	call	0x44ec	; 0x44ec <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3502:	80 91 31 04 	lds	r24, 0x0431
    3506:	85 35       	cpi	r24, 0x55	; 85
    3508:	19 f0       	breq	.+6      	; 0x3510 <nrk_idle_task+0x38>
    350a:	88 e0       	ldi	r24, 0x08	; 8
    350c:	0e 94 77 10 	call	0x20ee	; 0x20ee <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3510:	80 91 fe 3f 	lds	r24, 0x3FFE
    3514:	85 35       	cpi	r24, 0x55	; 85
    3516:	11 f3       	breq	.-60     	; 0x34dc <nrk_idle_task+0x4>
    3518:	88 e0       	ldi	r24, 0x08	; 8
    351a:	0e 94 77 10 	call	0x20ee	; 0x20ee <nrk_error_add>
    351e:	de cf       	rjmp	.-68     	; 0x34dc <nrk_idle_task+0x4>

00003520 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    3520:	2f 92       	push	r2
    3522:	3f 92       	push	r3
    3524:	4f 92       	push	r4
    3526:	5f 92       	push	r5
    3528:	6f 92       	push	r6
    352a:	7f 92       	push	r7
    352c:	8f 92       	push	r8
    352e:	9f 92       	push	r9
    3530:	af 92       	push	r10
    3532:	bf 92       	push	r11
    3534:	cf 92       	push	r12
    3536:	df 92       	push	r13
    3538:	ef 92       	push	r14
    353a:	ff 92       	push	r15
    353c:	0f 93       	push	r16
    353e:	1f 93       	push	r17
    3540:	cf 93       	push	r28
    3542:	df 93       	push	r29
    3544:	00 d0       	rcall	.+0      	; 0x3546 <_nrk_scheduler+0x26>
    3546:	00 d0       	rcall	.+0      	; 0x3548 <_nrk_scheduler+0x28>
    3548:	1f 92       	push	r1
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62

    //nrk_int_enable();   // this should be removed...  Not needed


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_precision_os_timer_reset();
    354e:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <_nrk_precision_os_timer_reset>
    _nrk_high_speed_timer_reset();
    3552:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    3556:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <_nrk_high_speed_timer_get>
    355a:	9b 83       	std	Y+3, r25	; 0x03
    355c:	8a 83       	std	Y+2, r24	; 0x02
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    355e:	8a ef       	ldi	r24, 0xFA	; 250
    3560:	0e 94 77 1f 	call	0x3eee	; 0x3eee <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    3564:	a0 91 23 04 	lds	r26, 0x0423
    3568:	b0 e0       	ldi	r27, 0x00	; 0
    356a:	23 eb       	ldi	r18, 0xB3	; 179
    356c:	36 ee       	ldi	r19, 0xE6	; 230
    356e:	4e e0       	ldi	r20, 0x0E	; 14
    3570:	50 e0       	ldi	r21, 0x00	; 0
    3572:	0e 94 bb 24 	call	0x4976	; 0x4976 <__muluhisi3>
    3576:	00 91 0c 06 	lds	r16, 0x060C
    357a:	10 91 0d 06 	lds	r17, 0x060D
    357e:	20 91 0e 06 	lds	r18, 0x060E
    3582:	30 91 0f 06 	lds	r19, 0x060F
    3586:	6b 01       	movw	r12, r22
    3588:	7c 01       	movw	r14, r24
    358a:	c0 0e       	add	r12, r16
    358c:	d1 1e       	adc	r13, r17
    358e:	e2 1e       	adc	r14, r18
    3590:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3592:	c7 01       	movw	r24, r14
    3594:	b6 01       	movw	r22, r12
    3596:	23 eb       	ldi	r18, 0xB3	; 179
    3598:	36 ee       	ldi	r19, 0xE6	; 230
    359a:	4e e0       	ldi	r20, 0x0E	; 14
    359c:	50 e0       	ldi	r21, 0x00	; 0
    359e:	0e 94 d6 24 	call	0x49ac	; 0x49ac <__udivmodsi4>
    35a2:	26 01       	movw	r4, r12
    35a4:	37 01       	movw	r6, r14
    35a6:	46 1a       	sub	r4, r22
    35a8:	57 0a       	sbc	r5, r23
    35aa:	68 0a       	sbc	r6, r24
    35ac:	79 0a       	sbc	r7, r25
    35ae:	d3 01       	movw	r26, r6
    35b0:	c2 01       	movw	r24, r4
    35b2:	00 91 08 06 	lds	r16, 0x0608
    35b6:	10 91 09 06 	lds	r17, 0x0609
    35ba:	20 91 0a 06 	lds	r18, 0x060A
    35be:	30 91 0b 06 	lds	r19, 0x060B

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    35c2:	43 eb       	ldi	r20, 0xB3	; 179
    35c4:	84 2e       	mov	r8, r20
    35c6:	46 ee       	ldi	r20, 0xE6	; 230
    35c8:	94 2e       	mov	r9, r20
    35ca:	4e e0       	ldi	r20, 0x0E	; 14
    35cc:	a4 2e       	mov	r10, r20
    35ce:	b1 2c       	mov	r11, r1
    35d0:	68 01       	movw	r12, r16
    35d2:	79 01       	movw	r14, r18
    35d4:	4f ef       	ldi	r20, 0xFF	; 255
    35d6:	c4 1a       	sub	r12, r20
    35d8:	d4 0a       	sbc	r13, r20
    35da:	e4 0a       	sbc	r14, r20
    35dc:	f4 0a       	sbc	r15, r20
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    35de:	81 15       	cp	r24, r1
    35e0:	5a ec       	ldi	r21, 0xCA	; 202
    35e2:	95 07       	cpc	r25, r21
    35e4:	5a e9       	ldi	r21, 0x9A	; 154
    35e6:	a5 07       	cpc	r26, r21
    35e8:	5b e3       	ldi	r21, 0x3B	; 59
    35ea:	b5 07       	cpc	r27, r21
    35ec:	c8 f0       	brcs	.+50     	; 0x3620 <_nrk_scheduler+0x100>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    35ee:	2c 01       	movw	r4, r24
    35f0:	3d 01       	movw	r6, r26
    35f2:	2a ec       	ldi	r18, 0xCA	; 202
    35f4:	52 1a       	sub	r5, r18
    35f6:	2a e9       	ldi	r18, 0x9A	; 154
    35f8:	62 0a       	sbc	r6, r18
    35fa:	2b e3       	ldi	r18, 0x3B	; 59
    35fc:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    35fe:	c3 01       	movw	r24, r6
    3600:	b2 01       	movw	r22, r4
    3602:	a5 01       	movw	r20, r10
    3604:	94 01       	movw	r18, r8
    3606:	0e 94 d6 24 	call	0x49ac	; 0x49ac <__udivmodsi4>
    360a:	a3 01       	movw	r20, r6
    360c:	92 01       	movw	r18, r4
    360e:	26 1b       	sub	r18, r22
    3610:	37 0b       	sbc	r19, r23
    3612:	48 0b       	sbc	r20, r24
    3614:	59 0b       	sbc	r21, r25
    3616:	da 01       	movw	r26, r20
    3618:	c9 01       	movw	r24, r18
    361a:	97 01       	movw	r18, r14
    361c:	86 01       	movw	r16, r12
    361e:	d8 cf       	rjmp	.-80     	; 0x35d0 <_nrk_scheduler+0xb0>
    3620:	80 93 0c 06 	sts	0x060C, r24
    3624:	90 93 0d 06 	sts	0x060D, r25
    3628:	a0 93 0e 06 	sts	0x060E, r26
    362c:	b0 93 0f 06 	sts	0x060F, r27
    3630:	00 93 08 06 	sts	0x0608, r16
    3634:	10 93 09 06 	sts	0x0609, r17
    3638:	20 93 0a 06 	sts	0x060A, r18
    363c:	30 93 0b 06 	sts	0x060B, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    3640:	e0 91 11 06 	lds	r30, 0x0611
    3644:	f0 91 12 06 	lds	r31, 0x0612
    3648:	85 81       	ldd	r24, Z+5	; 0x05
    364a:	88 23       	and	r24, r24
    364c:	39 f1       	breq	.+78     	; 0x369c <_nrk_scheduler+0x17c>
    364e:	81 85       	ldd	r24, Z+9	; 0x09
    3650:	84 30       	cpi	r24, 0x04	; 4
    3652:	21 f1       	breq	.+72     	; 0x369c <_nrk_scheduler+0x17c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    3654:	87 81       	ldd	r24, Z+7	; 0x07
    3656:	82 30       	cpi	r24, 0x02	; 2
    3658:	29 f0       	breq	.+10     	; 0x3664 <_nrk_scheduler+0x144>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    365a:	88 23       	and	r24, r24
    365c:	41 f0       	breq	.+16     	; 0x366e <_nrk_scheduler+0x14e>
    365e:	86 81       	ldd	r24, Z+6	; 0x06
    3660:	81 11       	cpse	r24, r1
    3662:	02 c0       	rjmp	.+4      	; 0x3668 <_nrk_scheduler+0x148>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    3664:	85 e0       	ldi	r24, 0x05	; 5
    3666:	01 c0       	rjmp	.+2      	; 0x366a <_nrk_scheduler+0x14a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3668:	83 e0       	ldi	r24, 0x03	; 3
    366a:	81 87       	std	Z+9, r24	; 0x09
    366c:	14 c0       	rjmp	.+40     	; 0x3696 <_nrk_scheduler+0x176>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    366e:	83 e0       	ldi	r24, 0x03	; 3
    3670:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    3672:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    3674:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    3676:	85 89       	ldd	r24, Z+21	; 0x15
    3678:	96 89       	ldd	r25, Z+22	; 0x16
    367a:	a7 89       	ldd	r26, Z+23	; 0x17
    367c:	b0 8d       	ldd	r27, Z+24	; 0x18
    367e:	89 2b       	or	r24, r25
    3680:	8a 2b       	or	r24, r26
    3682:	8b 2b       	or	r24, r27
    3684:	41 f4       	brne	.+16     	; 0x3696 <_nrk_scheduler+0x176>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    3686:	81 8d       	ldd	r24, Z+25	; 0x19
    3688:	92 8d       	ldd	r25, Z+26	; 0x1a
    368a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    368c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    368e:	85 8b       	std	Z+21, r24	; 0x15
    3690:	96 8b       	std	Z+22, r25	; 0x16
    3692:	a7 8b       	std	Z+23, r26	; 0x17
    3694:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    3696:	80 85       	ldd	r24, Z+8	; 0x08
    3698:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    369c:	e0 91 11 06 	lds	r30, 0x0611
    36a0:	f0 91 12 06 	lds	r31, 0x0612
    36a4:	85 a1       	ldd	r24, Z+37	; 0x25
    36a6:	96 a1       	ldd	r25, Z+38	; 0x26
    36a8:	a7 a1       	ldd	r26, Z+39	; 0x27
    36aa:	b0 a5       	ldd	r27, Z+40	; 0x28
    36ac:	89 2b       	or	r24, r25
    36ae:	8a 2b       	or	r24, r26
    36b0:	8b 2b       	or	r24, r27
    36b2:	09 f4       	brne	.+2      	; 0x36b6 <_nrk_scheduler+0x196>
    36b4:	44 c0       	rjmp	.+136    	; 0x373e <_nrk_scheduler+0x21e>
    36b6:	20 85       	ldd	r18, Z+8	; 0x08
    36b8:	22 23       	and	r18, r18
    36ba:	09 f4       	brne	.+2      	; 0x36be <_nrk_scheduler+0x19e>
    36bc:	40 c0       	rjmp	.+128    	; 0x373e <_nrk_scheduler+0x21e>
    36be:	81 85       	ldd	r24, Z+9	; 0x09
    36c0:	84 30       	cpi	r24, 0x04	; 4
    36c2:	e9 f1       	breq	.+122    	; 0x373e <_nrk_scheduler+0x21e>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    36c4:	85 8d       	ldd	r24, Z+29	; 0x1d
    36c6:	96 8d       	ldd	r25, Z+30	; 0x1e
    36c8:	a7 8d       	ldd	r26, Z+31	; 0x1f
    36ca:	b0 a1       	ldd	r27, Z+32	; 0x20
    36cc:	40 91 23 04 	lds	r20, 0x0423
    36d0:	50 e0       	ldi	r21, 0x00	; 0
    36d2:	60 e0       	ldi	r22, 0x00	; 0
    36d4:	70 e0       	ldi	r23, 0x00	; 0
    36d6:	84 17       	cp	r24, r20
    36d8:	95 07       	cpc	r25, r21
    36da:	a6 07       	cpc	r26, r22
    36dc:	b7 07       	cpc	r27, r23
    36de:	68 f4       	brcc	.+26     	; 0x36fa <_nrk_scheduler+0x1da>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    36e0:	62 2f       	mov	r22, r18
    36e2:	82 e0       	ldi	r24, 0x02	; 2
    36e4:	0e 94 85 10 	call	0x210a	; 0x210a <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    36e8:	e0 91 11 06 	lds	r30, 0x0611
    36ec:	f0 91 12 06 	lds	r31, 0x0612
    36f0:	15 8e       	std	Z+29, r1	; 0x1d
    36f2:	16 8e       	std	Z+30, r1	; 0x1e
    36f4:	17 8e       	std	Z+31, r1	; 0x1f
    36f6:	10 a2       	std	Z+32, r1	; 0x20
    36f8:	08 c0       	rjmp	.+16     	; 0x370a <_nrk_scheduler+0x1ea>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    36fa:	84 1b       	sub	r24, r20
    36fc:	95 0b       	sbc	r25, r21
    36fe:	a6 0b       	sbc	r26, r22
    3700:	b7 0b       	sbc	r27, r23
    3702:	85 8f       	std	Z+29, r24	; 0x1d
    3704:	96 8f       	std	Z+30, r25	; 0x1e
    3706:	a7 8f       	std	Z+31, r26	; 0x1f
    3708:	b0 a3       	std	Z+32, r27	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    370a:	e0 91 11 06 	lds	r30, 0x0611
    370e:	f0 91 12 06 	lds	r31, 0x0612
    3712:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    3714:	85 8d       	ldd	r24, Z+29	; 0x1d
    3716:	96 8d       	ldd	r25, Z+30	; 0x1e
    3718:	a7 8d       	ldd	r26, Z+31	; 0x1f
    371a:	b0 a1       	ldd	r27, Z+32	; 0x20
    371c:	89 2b       	or	r24, r25
    371e:	8a 2b       	or	r24, r26
    3720:	8b 2b       	or	r24, r27
    3722:	69 f4       	brne	.+26     	; 0x373e <_nrk_scheduler+0x21e>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    3724:	61 2f       	mov	r22, r17
    3726:	83 e0       	ldi	r24, 0x03	; 3
    3728:	0e 94 85 10 	call	0x210a	; 0x210a <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    372c:	e0 91 11 06 	lds	r30, 0x0611
    3730:	f0 91 12 06 	lds	r31, 0x0612
    3734:	83 e0       	ldi	r24, 0x03	; 3
    3736:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    3738:	81 2f       	mov	r24, r17
    373a:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <nrk_rem_from_readyQ>
    373e:	89 ef       	ldi	r24, 0xF9	; 249
    3740:	94 e0       	ldi	r25, 0x04	; 4
    3742:	9d 83       	std	Y+5, r25	; 0x05
    3744:	8c 83       	std	Y+4, r24	; 0x04

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3746:	00 e6       	ldi	r16, 0x60	; 96
    3748:	1a ee       	ldi	r17, 0xEA	; 234
    374a:	31 2c       	mov	r3, r1
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    374c:	9a ef       	ldi	r25, 0xFA	; 250
    374e:	c9 2e       	mov	r12, r25
    3750:	d1 2c       	mov	r13, r1
    3752:	e1 2c       	mov	r14, r1
    3754:	f1 2c       	mov	r15, r1
                nrk_task_TCB[task_ID].nw_flag=0;
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    nrk_task_TCB[task_ID].task_state = READY;
    3756:	22 e0       	ldi	r18, 0x02	; 2
    3758:	22 2e       	mov	r2, r18
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    375a:	81 2c       	mov	r8, r1
    375c:	91 2c       	mov	r9, r1
    375e:	54 01       	movw	r10, r8
    3760:	83 94       	inc	r8
    3762:	ec 81       	ldd	r30, Y+4	; 0x04
    3764:	fd 81       	ldd	r31, Y+5	; 0x05
    3766:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    3768:	80 81       	ld	r24, Z
    376a:	8f 3f       	cpi	r24, 0xFF	; 255
    376c:	09 f4       	brne	.+2      	; 0x3770 <_nrk_scheduler+0x250>
    376e:	ff c0       	rjmp	.+510    	; 0x396e <_nrk_scheduler+0x44e>
    3770:	ec 81       	ldd	r30, Y+4	; 0x04
    3772:	fd 81       	ldd	r31, Y+5	; 0x05
    3774:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    3776:	10 82       	st	Z, r1
    3778:	ec 81       	ldd	r30, Y+4	; 0x04
    377a:	fd 81       	ldd	r31, Y+5	; 0x05
    377c:	f0 81       	ld	r31, Z
    377e:	f9 83       	std	Y+1, r31	; 0x01
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    3780:	88 23       	and	r24, r24
    3782:	09 f4       	brne	.+2      	; 0x3786 <_nrk_scheduler+0x266>
    3784:	68 c0       	rjmp	.+208    	; 0x3856 <_nrk_scheduler+0x336>
    3786:	f4 30       	cpi	r31, 0x04	; 4
    3788:	09 f4       	brne	.+2      	; 0x378c <_nrk_scheduler+0x26c>
    378a:	f1 c0       	rjmp	.+482    	; 0x396e <_nrk_scheduler+0x44e>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    378c:	ec 81       	ldd	r30, Y+4	; 0x04
    378e:	fd 81       	ldd	r31, Y+5	; 0x05
    3790:	44 84       	ldd	r4, Z+12	; 0x0c
    3792:	55 84       	ldd	r5, Z+13	; 0x0d
    3794:	66 84       	ldd	r6, Z+14	; 0x0e
    3796:	77 84       	ldd	r7, Z+15	; 0x0f
    3798:	60 91 23 04 	lds	r22, 0x0423
    379c:	70 e0       	ldi	r23, 0x00	; 0
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	46 16       	cp	r4, r22
    37a4:	57 06       	cpc	r5, r23
    37a6:	68 06       	cpc	r6, r24
    37a8:	79 06       	cpc	r7, r25
    37aa:	48 f0       	brcs	.+18     	; 0x37be <_nrk_scheduler+0x29e>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    37ac:	46 1a       	sub	r4, r22
    37ae:	57 0a       	sbc	r5, r23
    37b0:	68 0a       	sbc	r6, r24
    37b2:	79 0a       	sbc	r7, r25
    37b4:	44 86       	std	Z+12, r4	; 0x0c
    37b6:	55 86       	std	Z+13, r5	; 0x0d
    37b8:	66 86       	std	Z+14, r6	; 0x0e
    37ba:	77 86       	std	Z+15, r7	; 0x0f
    37bc:	06 c0       	rjmp	.+12     	; 0x37ca <_nrk_scheduler+0x2aa>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    37be:	ec 81       	ldd	r30, Y+4	; 0x04
    37c0:	fd 81       	ldd	r31, Y+5	; 0x05
    37c2:	14 86       	std	Z+12, r1	; 0x0c
    37c4:	15 86       	std	Z+13, r1	; 0x0d
    37c6:	16 86       	std	Z+14, r1	; 0x0e
    37c8:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    37ca:	ec 81       	ldd	r30, Y+4	; 0x04
    37cc:	fd 81       	ldd	r31, Y+5	; 0x05
    37ce:	40 88       	ldd	r4, Z+16	; 0x10
    37d0:	51 88       	ldd	r5, Z+17	; 0x11
    37d2:	62 88       	ldd	r6, Z+18	; 0x12
    37d4:	73 88       	ldd	r7, Z+19	; 0x13
    37d6:	46 16       	cp	r4, r22
    37d8:	57 06       	cpc	r5, r23
    37da:	68 06       	cpc	r6, r24
    37dc:	79 06       	cpc	r7, r25
    37de:	48 f0       	brcs	.+18     	; 0x37f2 <_nrk_scheduler+0x2d2>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    37e0:	a3 01       	movw	r20, r6
    37e2:	92 01       	movw	r18, r4
    37e4:	26 1b       	sub	r18, r22
    37e6:	37 0b       	sbc	r19, r23
    37e8:	48 0b       	sbc	r20, r24
    37ea:	59 0b       	sbc	r21, r25
    37ec:	da 01       	movw	r26, r20
    37ee:	c9 01       	movw	r24, r18
    37f0:	13 c0       	rjmp	.+38     	; 0x3818 <_nrk_scheduler+0x2f8>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    37f2:	ec 81       	ldd	r30, Y+4	; 0x04
    37f4:	fd 81       	ldd	r31, Y+5	; 0x05
    37f6:	20 8d       	ldd	r18, Z+24	; 0x18
    37f8:	31 8d       	ldd	r19, Z+25	; 0x19
    37fa:	42 8d       	ldd	r20, Z+26	; 0x1a
    37fc:	53 8d       	ldd	r21, Z+27	; 0x1b
    37fe:	62 17       	cp	r22, r18
    3800:	73 07       	cpc	r23, r19
    3802:	84 07       	cpc	r24, r20
    3804:	95 07       	cpc	r25, r21
    3806:	68 f4       	brcc	.+26     	; 0x3822 <_nrk_scheduler+0x302>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    3808:	29 01       	movw	r4, r18
    380a:	3a 01       	movw	r6, r20
    380c:	46 1a       	sub	r4, r22
    380e:	57 0a       	sbc	r5, r23
    3810:	68 0a       	sbc	r6, r24
    3812:	79 0a       	sbc	r7, r25
    3814:	d3 01       	movw	r26, r6
    3816:	c2 01       	movw	r24, r4
    3818:	80 8b       	std	Z+16, r24	; 0x10
    381a:	91 8b       	std	Z+17, r25	; 0x11
    381c:	a2 8b       	std	Z+18, r26	; 0x12
    381e:	b3 8b       	std	Z+19, r27	; 0x13
    3820:	08 c0       	rjmp	.+16     	; 0x3832 <_nrk_scheduler+0x312>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    3822:	0e 94 d6 24 	call	0x49ac	; 0x49ac <__udivmodsi4>
    3826:	ec 81       	ldd	r30, Y+4	; 0x04
    3828:	fd 81       	ldd	r31, Y+5	; 0x05
    382a:	60 8b       	std	Z+16, r22	; 0x10
    382c:	71 8b       	std	Z+17, r23	; 0x11
    382e:	82 8b       	std	Z+18, r24	; 0x12
    3830:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    3832:	ec 81       	ldd	r30, Y+4	; 0x04
    3834:	fd 81       	ldd	r31, Y+5	; 0x05
    3836:	80 89       	ldd	r24, Z+16	; 0x10
    3838:	91 89       	ldd	r25, Z+17	; 0x11
    383a:	a2 89       	ldd	r26, Z+18	; 0x12
    383c:	b3 89       	ldd	r27, Z+19	; 0x13
    383e:	89 2b       	or	r24, r25
    3840:	8a 2b       	or	r24, r26
    3842:	8b 2b       	or	r24, r27
    3844:	41 f4       	brne	.+16     	; 0x3856 <_nrk_scheduler+0x336>
    3846:	80 8d       	ldd	r24, Z+24	; 0x18
    3848:	91 8d       	ldd	r25, Z+25	; 0x19
    384a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    384c:	b3 8d       	ldd	r27, Z+27	; 0x1b
    384e:	80 8b       	std	Z+16, r24	; 0x10
    3850:	91 8b       	std	Z+17, r25	; 0x11
    3852:	a2 8b       	std	Z+18, r26	; 0x12
    3854:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    3856:	f9 81       	ldd	r31, Y+1	; 0x01
    3858:	f3 30       	cpi	r31, 0x03	; 3
    385a:	09 f0       	breq	.+2      	; 0x385e <_nrk_scheduler+0x33e>
    385c:	88 c0       	rjmp	.+272    	; 0x396e <_nrk_scheduler+0x44e>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    385e:	ec 81       	ldd	r30, Y+4	; 0x04
    3860:	fd 81       	ldd	r31, Y+5	; 0x05
    3862:	84 85       	ldd	r24, Z+12	; 0x0c
    3864:	95 85       	ldd	r25, Z+13	; 0x0d
    3866:	a6 85       	ldd	r26, Z+14	; 0x0e
    3868:	b7 85       	ldd	r27, Z+15	; 0x0f
    386a:	89 2b       	or	r24, r25
    386c:	8a 2b       	or	r24, r26
    386e:	8b 2b       	or	r24, r27
    3870:	09 f0       	breq	.+2      	; 0x3874 <_nrk_scheduler+0x354>
    3872:	6a c0       	rjmp	.+212    	; 0x3948 <_nrk_scheduler+0x428>
    3874:	df 01       	movw	r26, r30
    3876:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    3878:	8c 91       	ld	r24, X
    387a:	9f 01       	movw	r18, r30
    387c:	23 50       	subi	r18, 0x03	; 3
    387e:	31 09       	sbc	r19, r1
    3880:	88 23       	and	r24, r24
    3882:	a9 f0       	breq	.+42     	; 0x38ae <_nrk_scheduler+0x38e>
    3884:	f9 01       	movw	r30, r18
    3886:	80 81       	ld	r24, Z
    3888:	88 23       	and	r24, r24
    388a:	89 f0       	breq	.+34     	; 0x38ae <_nrk_scheduler+0x38e>
    388c:	b5 01       	movw	r22, r10
    388e:	a4 01       	movw	r20, r8
    3890:	00 90 01 06 	lds	r0, 0x0601
    3894:	04 c0       	rjmp	.+8      	; 0x389e <_nrk_scheduler+0x37e>
    3896:	44 0f       	add	r20, r20
    3898:	55 1f       	adc	r21, r21
    389a:	66 1f       	adc	r22, r22
    389c:	77 1f       	adc	r23, r23
    389e:	0a 94       	dec	r0
    38a0:	d2 f7       	brpl	.-12     	; 0x3896 <_nrk_scheduler+0x376>
    38a2:	ec 81       	ldd	r30, Y+4	; 0x04
    38a4:	fd 81       	ldd	r31, Y+5	; 0x05
    38a6:	40 87       	std	Z+8, r20	; 0x08
    38a8:	51 87       	std	Z+9, r21	; 0x09
    38aa:	62 87       	std	Z+10, r22	; 0x0a
    38ac:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    38ae:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    38b0:	f9 01       	movw	r30, r18
    38b2:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    38b4:	ec 81       	ldd	r30, Y+4	; 0x04
    38b6:	fd 81       	ldd	r31, Y+5	; 0x05
    38b8:	a0 a1       	ldd	r26, Z+32	; 0x20
    38ba:	b1 a1       	ldd	r27, Z+33	; 0x21
    38bc:	40 8c       	ldd	r4, Z+24	; 0x18
    38be:	51 8c       	ldd	r5, Z+25	; 0x19
    38c0:	62 8c       	ldd	r6, Z+26	; 0x1a
    38c2:	73 8c       	ldd	r7, Z+27	; 0x1b
    38c4:	44 8d       	ldd	r20, Z+28	; 0x1c
    38c6:	55 8d       	ldd	r21, Z+29	; 0x1d
    38c8:	66 8d       	ldd	r22, Z+30	; 0x1e
    38ca:	77 8d       	ldd	r23, Z+31	; 0x1f
    38cc:	a1 30       	cpi	r26, 0x01	; 1
    38ce:	b1 05       	cpc	r27, r1
    38d0:	c9 f4       	brne	.+50     	; 0x3904 <_nrk_scheduler+0x3e4>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    38d2:	44 8b       	std	Z+20, r20	; 0x14
    38d4:	55 8b       	std	Z+21, r21	; 0x15
    38d6:	66 8b       	std	Z+22, r22	; 0x16
    38d8:	77 8b       	std	Z+23, r23	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    38da:	20 82       	st	Z, r2
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    38dc:	80 89       	ldd	r24, Z+16	; 0x10
    38de:	91 89       	ldd	r25, Z+17	; 0x11
    38e0:	a2 89       	ldd	r26, Z+18	; 0x12
    38e2:	b3 89       	ldd	r27, Z+19	; 0x13
    38e4:	84 87       	std	Z+12, r24	; 0x0c
    38e6:	95 87       	std	Z+13, r25	; 0x0d
    38e8:	a6 87       	std	Z+14, r26	; 0x0e
    38ea:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    38ec:	45 28       	or	r4, r5
    38ee:	46 28       	or	r4, r6
    38f0:	47 28       	or	r4, r7
    38f2:	21 f4       	brne	.+8      	; 0x38fc <_nrk_scheduler+0x3dc>
    38f4:	c4 86       	std	Z+12, r12	; 0x0c
    38f6:	d5 86       	std	Z+13, r13	; 0x0d
    38f8:	e6 86       	std	Z+14, r14	; 0x0e
    38fa:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    38fc:	83 2d       	mov	r24, r3
    38fe:	0e 94 ad 14 	call	0x295a	; 0x295a <nrk_add_to_readyQ>
    3902:	22 c0       	rjmp	.+68     	; 0x3948 <_nrk_scheduler+0x428>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    3904:	ec 81       	ldd	r30, Y+4	; 0x04
    3906:	fd 81       	ldd	r31, Y+5	; 0x05
    3908:	44 8b       	std	Z+20, r20	; 0x14
    390a:	55 8b       	std	Z+21, r21	; 0x15
    390c:	66 8b       	std	Z+22, r22	; 0x16
    390e:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3910:	11 97       	sbiw	r26, 0x01	; 1
    3912:	a3 01       	movw	r20, r6
    3914:	92 01       	movw	r18, r4
    3916:	0e 94 bb 24 	call	0x4976	; 0x4976 <__muluhisi3>
    391a:	64 87       	std	Z+12, r22	; 0x0c
    391c:	75 87       	std	Z+13, r23	; 0x0d
    391e:	86 87       	std	Z+14, r24	; 0x0e
    3920:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3922:	60 8b       	std	Z+16, r22	; 0x10
    3924:	71 8b       	std	Z+17, r23	; 0x11
    3926:	82 8b       	std	Z+18, r24	; 0x12
    3928:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    392a:	45 28       	or	r4, r5
    392c:	46 28       	or	r4, r6
    392e:	47 28       	or	r4, r7
    3930:	21 f4       	brne	.+8      	; 0x393a <_nrk_scheduler+0x41a>
    3932:	c4 86       	std	Z+12, r12	; 0x0c
    3934:	d5 86       	std	Z+13, r13	; 0x0d
    3936:	e6 86       	std	Z+14, r14	; 0x0e
    3938:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    393a:	44 24       	eor	r4, r4
    393c:	43 94       	inc	r4
    393e:	51 2c       	mov	r5, r1
    3940:	ec 81       	ldd	r30, Y+4	; 0x04
    3942:	fd 81       	ldd	r31, Y+5	; 0x05
    3944:	51 a2       	std	Z+33, r5	; 0x21
    3946:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    3948:	ec 81       	ldd	r30, Y+4	; 0x04
    394a:	fd 81       	ldd	r31, Y+5	; 0x05
    394c:	84 85       	ldd	r24, Z+12	; 0x0c
    394e:	95 85       	ldd	r25, Z+13	; 0x0d
    3950:	a6 85       	ldd	r26, Z+14	; 0x0e
    3952:	b7 85       	ldd	r27, Z+15	; 0x0f
    3954:	00 97       	sbiw	r24, 0x00	; 0
    3956:	a1 05       	cpc	r26, r1
    3958:	b1 05       	cpc	r27, r1
    395a:	49 f0       	breq	.+18     	; 0x396e <_nrk_scheduler+0x44e>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    395c:	a8 01       	movw	r20, r16
    395e:	60 e0       	ldi	r22, 0x00	; 0
    3960:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    3962:	84 17       	cp	r24, r20
    3964:	95 07       	cpc	r25, r21
    3966:	a6 07       	cpc	r26, r22
    3968:	b7 07       	cpc	r27, r23
    396a:	08 f4       	brcc	.+2      	; 0x396e <_nrk_scheduler+0x44e>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    396c:	8c 01       	movw	r16, r24
    396e:	33 94       	inc	r3
    3970:	2c 81       	ldd	r18, Y+4	; 0x04
    3972:	3d 81       	ldd	r19, Y+5	; 0x05
    3974:	25 5d       	subi	r18, 0xD5	; 213
    3976:	3f 4f       	sbci	r19, 0xFF	; 255
    3978:	3d 83       	std	Y+5, r19	; 0x05
    397a:	2c 83       	std	Y+4, r18	; 0x04

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    397c:	36 e0       	ldi	r19, 0x06	; 6
    397e:	33 12       	cpse	r3, r19
    3980:	f0 ce       	rjmp	.-544    	; 0x3762 <_nrk_scheduler+0x242>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    3982:	0e 94 9c 14 	call	0x2938	; 0x2938 <nrk_get_high_ready_task_ID>
    3986:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3988:	4b e2       	ldi	r20, 0x2B	; 43
    398a:	84 02       	muls	r24, r20
    398c:	f0 01       	movw	r30, r0
    398e:	11 24       	eor	r1, r1
    3990:	e0 51       	subi	r30, 0x10	; 16
    3992:	fb 4f       	sbci	r31, 0xFB	; 251
    3994:	22 85       	ldd	r18, Z+10	; 0x0a
    3996:	20 93 13 06 	sts	0x0613, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    399a:	f0 93 03 06 	sts	0x0603, r31
    399e:	e0 93 02 06 	sts	0x0602, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    39a2:	88 23       	and	r24, r24
    39a4:	f9 f0       	breq	.+62     	; 0x39e4 <_nrk_scheduler+0x4c4>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    39a6:	85 a1       	ldd	r24, Z+37	; 0x25
    39a8:	96 a1       	ldd	r25, Z+38	; 0x26
    39aa:	a7 a1       	ldd	r26, Z+39	; 0x27
    39ac:	b0 a5       	ldd	r27, Z+40	; 0x28
    39ae:	89 2b       	or	r24, r25
    39b0:	8a 2b       	or	r24, r26
    39b2:	8b 2b       	or	r24, r27
    39b4:	99 f0       	breq	.+38     	; 0x39dc <_nrk_scheduler+0x4bc>
    39b6:	85 8d       	ldd	r24, Z+29	; 0x1d
    39b8:	96 8d       	ldd	r25, Z+30	; 0x1e
    39ba:	a7 8d       	ldd	r26, Z+31	; 0x1f
    39bc:	b0 a1       	ldd	r27, Z+32	; 0x20
    39be:	8a 3f       	cpi	r24, 0xFA	; 250
    39c0:	91 05       	cpc	r25, r1
    39c2:	a1 05       	cpc	r26, r1
    39c4:	b1 05       	cpc	r27, r1
    39c6:	50 f4       	brcc	.+20     	; 0x39dc <_nrk_scheduler+0x4bc>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    39c8:	a8 01       	movw	r20, r16
    39ca:	60 e0       	ldi	r22, 0x00	; 0
    39cc:	70 e0       	ldi	r23, 0x00	; 0
    39ce:	84 17       	cp	r24, r20
    39d0:	95 07       	cpc	r25, r21
    39d2:	a6 07       	cpc	r26, r22
    39d4:	b7 07       	cpc	r27, r23
    39d6:	e8 f4       	brcc	.+58     	; 0x3a12 <_nrk_scheduler+0x4f2>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    39d8:	8c 01       	movw	r16, r24
    39da:	1b c0       	rjmp	.+54     	; 0x3a12 <_nrk_scheduler+0x4f2>
    39dc:	0b 3f       	cpi	r16, 0xFB	; 251
    39de:	11 05       	cpc	r17, r1
    39e0:	c0 f0       	brcs	.+48     	; 0x3a12 <_nrk_scheduler+0x4f2>
    39e2:	12 c0       	rjmp	.+36     	; 0x3a08 <_nrk_scheduler+0x4e8>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    39e4:	04 30       	cpi	r16, 0x04	; 4
    39e6:	11 05       	cpc	r17, r1
    39e8:	a0 f0       	brcs	.+40     	; 0x3a12 <_nrk_scheduler+0x4f2>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    39ea:	c8 01       	movw	r24, r16
    39ec:	03 97       	sbiw	r24, 0x03	; 3
    39ee:	8a 3f       	cpi	r24, 0xFA	; 250
    39f0:	91 05       	cpc	r25, r1
    39f2:	38 f4       	brcc	.+14     	; 0x3a02 <_nrk_scheduler+0x4e2>
    39f4:	8c 01       	movw	r16, r24
    39f6:	82 30       	cpi	r24, 0x02	; 2
    39f8:	91 05       	cpc	r25, r1
    39fa:	58 f4       	brcc	.+22     	; 0x3a12 <_nrk_scheduler+0x4f2>
    39fc:	02 e0       	ldi	r16, 0x02	; 2
    39fe:	10 e0       	ldi	r17, 0x00	; 0
    3a00:	08 c0       	rjmp	.+16     	; 0x3a12 <_nrk_scheduler+0x4f2>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    3a02:	0d 3f       	cpi	r16, 0xFD	; 253
    3a04:	11 05       	cpc	r17, r1
    3a06:	19 f0       	breq	.+6      	; 0x3a0e <_nrk_scheduler+0x4ee>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    3a08:	0a ef       	ldi	r16, 0xFA	; 250
    3a0a:	10 e0       	ldi	r17, 0x00	; 0
    3a0c:	02 c0       	rjmp	.+4      	; 0x3a12 <_nrk_scheduler+0x4f2>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    3a0e:	07 ef       	ldi	r16, 0xF7	; 247
    3a10:	10 e0       	ldi	r17, 0x00	; 0
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    3a12:	20 93 04 06 	sts	0x0604, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    3a16:	f0 93 12 06 	sts	0x0612, r31
    3a1a:	e0 93 11 06 	sts	0x0611, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    3a1e:	00 93 23 04 	sts	0x0423, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    3a22:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <_nrk_os_timer_get>
    3a26:	28 2f       	mov	r18, r24
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	2f 5f       	subi	r18, 0xFF	; 255
    3a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a2e:	20 17       	cp	r18, r16
    3a30:	31 07       	cpc	r19, r17
    3a32:	40 f0       	brcs	.+16     	; 0x3a44 <_nrk_scheduler+0x524>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    3a34:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <_nrk_os_timer_get>
    3a38:	08 2f       	mov	r16, r24
    3a3a:	10 e0       	ldi	r17, 0x00	; 0
    3a3c:	0e 5f       	subi	r16, 0xFE	; 254
    3a3e:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    3a40:	00 93 23 04 	sts	0x0423, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    3a44:	f1 10       	cpse	r15, r1
    3a46:	10 92 05 06 	sts	0x0605, r1

    _nrk_set_next_wakeup(next_wake);
    3a4a:	80 2f       	mov	r24, r16
    3a4c:	0e 94 77 1f 	call	0x3eee	; 0x3eee <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    3a50:	6c ed       	ldi	r22, 0xDC	; 220
    3a52:	75 e0       	ldi	r23, 0x05	; 5
    3a54:	8a 81       	ldd	r24, Y+2	; 0x02
    3a56:	9b 81       	ldd	r25, Y+3	; 0x03
    3a58:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    3a5c:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    3a60:	0f 90       	pop	r0
    3a62:	0f 90       	pop	r0
    3a64:	0f 90       	pop	r0
    3a66:	0f 90       	pop	r0
    3a68:	0f 90       	pop	r0
    3a6a:	df 91       	pop	r29
    3a6c:	cf 91       	pop	r28
    3a6e:	1f 91       	pop	r17
    3a70:	0f 91       	pop	r16
    3a72:	ff 90       	pop	r15
    3a74:	ef 90       	pop	r14
    3a76:	df 90       	pop	r13
    3a78:	cf 90       	pop	r12
    3a7a:	bf 90       	pop	r11
    3a7c:	af 90       	pop	r10
    3a7e:	9f 90       	pop	r9
    3a80:	8f 90       	pop	r8
    3a82:	7f 90       	pop	r7
    3a84:	6f 90       	pop	r6
    3a86:	5f 90       	pop	r5
    3a88:	4f 90       	pop	r4
    3a8a:	3f 90       	pop	r3
    3a8c:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    3a8e:	0c 94 07 23 	jmp	0x460e	; 0x460e <nrk_start_high_ready_task>

00003a92 <_nrk_reserve_init>:
    3a92:	e8 e3       	ldi	r30, 0x38	; 56
    3a94:	f6 e0       	ldi	r31, 0x06	; 6
    3a96:	8f ef       	ldi	r24, 0xFF	; 255
    3a98:	80 8b       	std	Z+16, r24	; 0x10
    3a9a:	83 a3       	std	Z+35, r24	; 0x23
    3a9c:	86 ab       	std	Z+54, r24	; 0x36
    3a9e:	80 93 81 06 	sts	0x0681, r24
    3aa2:	80 93 94 06 	sts	0x0694, r24
    3aa6:	08 95       	ret

00003aa8 <nrk_reserve_create>:
}

// This function returns the id of a free reserve
// This returns NRK_ERROR if there are no free reserves
int8_t nrk_reserve_create ()
{
    3aa8:	e8 e4       	ldi	r30, 0x48	; 72
    3aaa:	f6 e0       	ldi	r31, 0x06	; 6
    3aac:	80 e0       	ldi	r24, 0x00	; 0
    3aae:	90 e0       	ldi	r25, 0x00	; 0
  int8_t i;
  for (i = 0; i < NRK_MAX_RESERVES; i++) {
    if (_nrk_reserve[i].active == -1) {
    3ab0:	20 81       	ld	r18, Z
    3ab2:	2f 3f       	cpi	r18, 0xFF	; 255
    3ab4:	59 f4       	brne	.+22     	; 0x3acc <nrk_reserve_create+0x24>
      // Check and Accept
      _nrk_reserve[i].active = 1;
    3ab6:	23 e1       	ldi	r18, 0x13	; 19
    3ab8:	28 9f       	mul	r18, r24
    3aba:	f0 01       	movw	r30, r0
    3abc:	29 9f       	mul	r18, r25
    3abe:	f0 0d       	add	r31, r0
    3ac0:	11 24       	eor	r1, r1
    3ac2:	e8 5c       	subi	r30, 0xC8	; 200
    3ac4:	f9 4f       	sbci	r31, 0xF9	; 249
    3ac6:	91 e0       	ldi	r25, 0x01	; 1
    3ac8:	90 8b       	std	Z+16, r25	; 0x10
      return i;
    3aca:	08 95       	ret
    3acc:	01 96       	adiw	r24, 0x01	; 1
    3ace:	73 96       	adiw	r30, 0x13	; 19
// This function returns the id of a free reserve
// This returns NRK_ERROR if there are no free reserves
int8_t nrk_reserve_create ()
{
  int8_t i;
  for (i = 0; i < NRK_MAX_RESERVES; i++) {
    3ad0:	85 30       	cpi	r24, 0x05	; 5
    3ad2:	91 05       	cpc	r25, r1
    3ad4:	69 f7       	brne	.-38     	; 0x3ab0 <nrk_reserve_create+0x8>
      _nrk_reserve[i].active = 1;
      return i;
    }
  }

  return NRK_ERROR;
    3ad6:	8f ef       	ldi	r24, 0xFF	; 255
}
    3ad8:	08 95       	ret

00003ada <nrk_reserve_delete>:
// This function frees a current reserve
// This returns NRK_ERROR if the reserve does not exist
int8_t nrk_reserve_delete (uint8_t reserve_id)
{
  int8_t i;
  if (reserve_id >= 0 && reserve_id < NRK_MAX_RESERVES) {
    3ada:	85 30       	cpi	r24, 0x05	; 5
    3adc:	38 f4       	brcc	.+14     	; 0x3aec <nrk_reserve_delete+0x12>
    if (_nrk_reserve[i].active == 1) {
    3ade:	e8 e3       	ldi	r30, 0x38	; 56
    3ae0:	f6 e0       	ldi	r31, 0x06	; 6
    3ae2:	80 89       	ldd	r24, Z+16	; 0x10
    3ae4:	81 30       	cpi	r24, 0x01	; 1
    3ae6:	11 f4       	brne	.+4      	; 0x3aec <nrk_reserve_delete+0x12>
      _nrk_reserve[i].active = 0;
    3ae8:	10 8a       	std	Z+16, r1	; 0x10
      return NRK_OK;
    3aea:	08 95       	ret
    }
  }
  return NRK_ERROR;
    3aec:	8f ef       	ldi	r24, 0xFF	; 255
}
    3aee:	08 95       	ret

00003af0 <_nrk_reserve_update>:
  return (_nrk_reserve[reserve_id].set_access -
          _nrk_reserve[reserve_id].cur_access);
}

void _nrk_reserve_update (uint8_t reserve_id)
{
    3af0:	0f 93       	push	r16
    3af2:	1f 93       	push	r17
    3af4:	cf 93       	push	r28
    3af6:	df 93       	push	r29
    3af8:	cd b7       	in	r28, 0x3d	; 61
    3afa:	de b7       	in	r29, 0x3e	; 62
    3afc:	28 97       	sbiw	r28, 0x08	; 8
    3afe:	0f b6       	in	r0, 0x3f	; 63
    3b00:	f8 94       	cli
    3b02:	de bf       	out	0x3e, r29	; 62
    3b04:	0f be       	out	0x3f, r0	; 63
    3b06:	cd bf       	out	0x3d, r28	; 61
    3b08:	08 2f       	mov	r16, r24
  nrk_time_t t;

  nrk_int_disable ();
    3b0a:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <nrk_int_disable>
  nrk_time_get (&t);
    3b0e:	ce 01       	movw	r24, r28
    3b10:	01 96       	adiw	r24, 0x01	; 1
    3b12:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <nrk_time_get>

  _nrk_reserve[reserve_id].cur_time = (int32_t) _nrk_time_to_ticks_long (&t);
    3b16:	10 e0       	ldi	r17, 0x00	; 0
    3b18:	ce 01       	movw	r24, r28
    3b1a:	01 96       	adiw	r24, 0x01	; 1
    3b1c:	0e 94 02 1a 	call	0x3404	; 0x3404 <_nrk_time_to_ticks_long>
    3b20:	23 e1       	ldi	r18, 0x13	; 19
    3b22:	20 9f       	mul	r18, r16
    3b24:	f0 01       	movw	r30, r0
    3b26:	21 9f       	mul	r18, r17
    3b28:	f0 0d       	add	r31, r0
    3b2a:	11 24       	eor	r1, r1
    3b2c:	e8 5c       	subi	r30, 0xC8	; 200
    3b2e:	f9 4f       	sbci	r31, 0xF9	; 249
    3b30:	60 87       	std	Z+8, r22	; 0x08
    3b32:	71 87       	std	Z+9, r23	; 0x09
    3b34:	82 87       	std	Z+10, r24	; 0x0a
    3b36:	93 87       	std	Z+11, r25	; 0x0b
  if (_nrk_reserve[reserve_id].cur_time >= _nrk_reserve[reserve_id].set_time) {
    3b38:	04 81       	ldd	r16, Z+4	; 0x04
    3b3a:	15 81       	ldd	r17, Z+5	; 0x05
    3b3c:	26 81       	ldd	r18, Z+6	; 0x06
    3b3e:	37 81       	ldd	r19, Z+7	; 0x07
    3b40:	60 17       	cp	r22, r16
    3b42:	71 07       	cpc	r23, r17
    3b44:	82 07       	cpc	r24, r18
    3b46:	93 07       	cpc	r25, r19
    3b48:	80 f0       	brcs	.+32     	; 0x3b6a <_nrk_reserve_update+0x7a>
    // If the reserve is passed its period then replenish it
    _nrk_reserve[reserve_id].set_time =
      _nrk_reserve[reserve_id].cur_time +
    3b4a:	00 81       	ld	r16, Z
    3b4c:	11 81       	ldd	r17, Z+1	; 0x01
    3b4e:	22 81       	ldd	r18, Z+2	; 0x02
    3b50:	33 81       	ldd	r19, Z+3	; 0x03
    3b52:	dc 01       	movw	r26, r24
    3b54:	cb 01       	movw	r24, r22
    3b56:	80 0f       	add	r24, r16
    3b58:	91 1f       	adc	r25, r17
    3b5a:	a2 1f       	adc	r26, r18
    3b5c:	b3 1f       	adc	r27, r19
  nrk_time_get (&t);

  _nrk_reserve[reserve_id].cur_time = (int32_t) _nrk_time_to_ticks_long (&t);
  if (_nrk_reserve[reserve_id].cur_time >= _nrk_reserve[reserve_id].set_time) {
    // If the reserve is passed its period then replenish it
    _nrk_reserve[reserve_id].set_time =
    3b5e:	84 83       	std	Z+4, r24	; 0x04
    3b60:	95 83       	std	Z+5, r25	; 0x05
    3b62:	a6 83       	std	Z+6, r26	; 0x06
    3b64:	b7 83       	std	Z+7, r27	; 0x07
      _nrk_reserve[reserve_id].cur_time +
      _nrk_reserve[reserve_id].period_ticks;
    _nrk_reserve[reserve_id].cur_access = 0;
    3b66:	17 86       	std	Z+15, r1	; 0x0f
    3b68:	16 86       	std	Z+14, r1	; 0x0e
  }
  nrk_int_enable ();
    3b6a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nrk_int_enable>

}
    3b6e:	28 96       	adiw	r28, 0x08	; 8
    3b70:	0f b6       	in	r0, 0x3f	; 63
    3b72:	f8 94       	cli
    3b74:	de bf       	out	0x3e, r29	; 62
    3b76:	0f be       	out	0x3f, r0	; 63
    3b78:	cd bf       	out	0x3d, r28	; 61
    3b7a:	df 91       	pop	r29
    3b7c:	cf 91       	pop	r28
    3b7e:	1f 91       	pop	r17
    3b80:	0f 91       	pop	r16
    3b82:	08 95       	ret

00003b84 <nrk_reserve_get>:




uint8_t nrk_reserve_get (uint8_t reserve_id)
{
    3b84:	cf 93       	push	r28
    3b86:	df 93       	push	r29

  if (reserve_id >= NRK_MAX_RESERVES) {
    3b88:	85 30       	cpi	r24, 0x05	; 5
    3b8a:	10 f0       	brcs	.+4      	; 0x3b90 <nrk_reserve_get+0xc>
    _nrk_errno_set (1);
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	0a c0       	rjmp	.+20     	; 0x3ba4 <nrk_reserve_get+0x20>
    return 0;
  }
  if (_nrk_reserve[reserve_id].active == -1) {
    3b90:	93 e1       	ldi	r25, 0x13	; 19
    3b92:	89 9f       	mul	r24, r25
    3b94:	e0 01       	movw	r28, r0
    3b96:	11 24       	eor	r1, r1
    3b98:	c8 5c       	subi	r28, 0xC8	; 200
    3b9a:	d9 4f       	sbci	r29, 0xF9	; 249
    3b9c:	98 89       	ldd	r25, Y+16	; 0x10
    3b9e:	9f 3f       	cpi	r25, 0xFF	; 255
    3ba0:	21 f4       	brne	.+8      	; 0x3baa <nrk_reserve_get+0x26>
    // Reserve isn't active 
    _nrk_errno_set (2);
    3ba2:	82 e0       	ldi	r24, 0x02	; 2
    3ba4:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <_nrk_errno_set>
    3ba8:	0b c0       	rjmp	.+22     	; 0x3bc0 <nrk_reserve_get+0x3c>
    return 0;
  }

  _nrk_reserve_update (reserve_id);
    3baa:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <_nrk_reserve_update>

  if (_nrk_reserve[reserve_id].cur_access >
    3bae:	2e 85       	ldd	r18, Y+14	; 0x0e
    3bb0:	3f 85       	ldd	r19, Y+15	; 0x0f
      _nrk_reserve[reserve_id].set_access)
    3bb2:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bb4:	9d 85       	ldd	r25, Y+13	; 0x0d
    return 0;
  }

  _nrk_reserve_update (reserve_id);

  if (_nrk_reserve[reserve_id].cur_access >
    3bb6:	82 17       	cp	r24, r18
    3bb8:	93 07       	cpc	r25, r19
    3bba:	14 f0       	brlt	.+4      	; 0x3bc0 <nrk_reserve_get+0x3c>
      _nrk_reserve[reserve_id].set_access)
    return 0;
  return (_nrk_reserve[reserve_id].set_access -
    3bbc:	82 1b       	sub	r24, r18
    3bbe:	01 c0       	rjmp	.+2      	; 0x3bc2 <nrk_reserve_get+0x3e>

  _nrk_reserve_update (reserve_id);

  if (_nrk_reserve[reserve_id].cur_access >
      _nrk_reserve[reserve_id].set_access)
    return 0;
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
  return (_nrk_reserve[reserve_id].set_access -
          _nrk_reserve[reserve_id].cur_access);
}
    3bc2:	df 91       	pop	r29
    3bc4:	cf 91       	pop	r28
    3bc6:	08 95       	ret

00003bc8 <nrk_reserve_consume>:
  nrk_int_enable ();

}

int8_t nrk_reserve_consume (uint8_t reserve_id)
{
    3bc8:	1f 93       	push	r17
    3bca:	cf 93       	push	r28
    3bcc:	df 93       	push	r29

  if (reserve_id >= NRK_MAX_RESERVES) {
    3bce:	85 30       	cpi	r24, 0x05	; 5
    3bd0:	20 f0       	brcs	.+8      	; 0x3bda <nrk_reserve_consume+0x12>
    _nrk_errno_set (1);
    3bd2:	81 e0       	ldi	r24, 0x01	; 1
    3bd4:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <_nrk_errno_set>
    3bd8:	23 c0       	rjmp	.+70     	; 0x3c20 <nrk_reserve_consume+0x58>
    return NRK_ERROR;
  }
  if (_nrk_reserve[reserve_id].active == -1) {
    3bda:	93 e1       	ldi	r25, 0x13	; 19
    3bdc:	89 9f       	mul	r24, r25
    3bde:	e0 01       	movw	r28, r0
    3be0:	11 24       	eor	r1, r1
    3be2:	c8 5c       	subi	r28, 0xC8	; 200
    3be4:	d9 4f       	sbci	r29, 0xF9	; 249
    3be6:	18 89       	ldd	r17, Y+16	; 0x10
    3be8:	1f 3f       	cpi	r17, 0xFF	; 255
    3bea:	21 f4       	brne	.+8      	; 0x3bf4 <nrk_reserve_consume+0x2c>
    _nrk_errno_set (2);
    3bec:	82 e0       	ldi	r24, 0x02	; 2
    3bee:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <_nrk_errno_set>
    return NRK_ERROR;
    3bf2:	17 c0       	rjmp	.+46     	; 0x3c22 <nrk_reserve_consume+0x5a>
  }

  _nrk_reserve_update (reserve_id);
    3bf4:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <_nrk_reserve_update>

  if ((_nrk_reserve[reserve_id].set_access <=
       _nrk_reserve[reserve_id].cur_access)) {
    3bf8:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bfa:	9f 85       	ldd	r25, Y+15	; 0x0f
    return NRK_ERROR;
  }

  _nrk_reserve_update (reserve_id);

  if ((_nrk_reserve[reserve_id].set_access <=
    3bfc:	2c 85       	ldd	r18, Y+12	; 0x0c
    3bfe:	3d 85       	ldd	r19, Y+13	; 0x0d
    3c00:	82 17       	cp	r24, r18
    3c02:	93 07       	cpc	r25, r19
    3c04:	44 f0       	brlt	.+16     	; 0x3c16 <nrk_reserve_consume+0x4e>
       _nrk_reserve[reserve_id].cur_access)) {
    // You violated your resource (like MJ after a little boy)
    nrk_int_enable ();
    3c06:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <nrk_int_enable>
    if (_nrk_reserve[reserve_id].error != NULL)
    3c0a:	e9 89       	ldd	r30, Y+17	; 0x11
    3c0c:	fa 89       	ldd	r31, Y+18	; 0x12
    3c0e:	30 97       	sbiw	r30, 0x00	; 0
    3c10:	39 f0       	breq	.+14     	; 0x3c20 <nrk_reserve_consume+0x58>
      _nrk_reserve[reserve_id].error ();
    3c12:	09 95       	icall
    3c14:	05 c0       	rjmp	.+10     	; 0x3c20 <nrk_reserve_consume+0x58>
    return NRK_ERROR;
  }
  else {
    // Reserve is fine. Take some of it.
    _nrk_reserve[reserve_id].cur_access++;
    3c16:	01 96       	adiw	r24, 0x01	; 1
    3c18:	9f 87       	std	Y+15, r25	; 0x0f
    3c1a:	8e 87       	std	Y+14, r24	; 0x0e
  }


  return NRK_OK;
    3c1c:	11 e0       	ldi	r17, 0x01	; 1
    3c1e:	01 c0       	rjmp	.+2      	; 0x3c22 <nrk_reserve_consume+0x5a>
       _nrk_reserve[reserve_id].cur_access)) {
    // You violated your resource (like MJ after a little boy)
    nrk_int_enable ();
    if (_nrk_reserve[reserve_id].error != NULL)
      _nrk_reserve[reserve_id].error ();
    return NRK_ERROR;
    3c20:	1f ef       	ldi	r17, 0xFF	; 255
    _nrk_reserve[reserve_id].cur_access++;
  }


  return NRK_OK;
}
    3c22:	81 2f       	mov	r24, r17
    3c24:	df 91       	pop	r29
    3c26:	cf 91       	pop	r28
    3c28:	1f 91       	pop	r17
    3c2a:	08 95       	ret

00003c2c <nrk_reserve_set>:

int8_t nrk_reserve_set (uint8_t id, nrk_time_t * period, int16_t access_count,
                        void *errhandler)
{
    3c2c:	8f 92       	push	r8
    3c2e:	9f 92       	push	r9
    3c30:	af 92       	push	r10
    3c32:	bf 92       	push	r11
    3c34:	cf 92       	push	r12
    3c36:	df 92       	push	r13
    3c38:	ef 92       	push	r14
    3c3a:	ff 92       	push	r15
    3c3c:	0f 93       	push	r16
    3c3e:	1f 93       	push	r17
    3c40:	cf 93       	push	r28
    3c42:	df 93       	push	r29
    3c44:	cd b7       	in	r28, 0x3d	; 61
    3c46:	de b7       	in	r29, 0x3e	; 62
    3c48:	28 97       	sbiw	r28, 0x08	; 8
    3c4a:	0f b6       	in	r0, 0x3f	; 63
    3c4c:	f8 94       	cli
    3c4e:	de bf       	out	0x3e, r29	; 62
    3c50:	0f be       	out	0x3f, r0	; 63
    3c52:	cd bf       	out	0x3d, r28	; 61
  nrk_time_t tmp_time;

  if (id >= NRK_MAX_RESERVES)
    3c54:	85 30       	cpi	r24, 0x05	; 5
    3c56:	08 f0       	brcs	.+2      	; 0x3c5a <nrk_reserve_set+0x2e>
    3c58:	4a c0       	rjmp	.+148    	; 0x3cee <nrk_reserve_set+0xc2>
    return NRK_ERROR;
  if (_nrk_reserve[id].active == -1)
    3c5a:	93 e1       	ldi	r25, 0x13	; 19
    3c5c:	89 9f       	mul	r24, r25
    3c5e:	80 01       	movw	r16, r0
    3c60:	11 24       	eor	r1, r1
    3c62:	08 5c       	subi	r16, 0xC8	; 200
    3c64:	19 4f       	sbci	r17, 0xF9	; 249
    3c66:	f8 01       	movw	r30, r16
    3c68:	80 89       	ldd	r24, Z+16	; 0x10
    3c6a:	8f 3f       	cpi	r24, 0xFF	; 255
    3c6c:	09 f4       	brne	.+2      	; 0x3c70 <nrk_reserve_set+0x44>
    3c6e:	40 c0       	rjmp	.+128    	; 0x3cf0 <nrk_reserve_set+0xc4>
    3c70:	79 01       	movw	r14, r18
    3c72:	6a 01       	movw	r12, r20
    3c74:	fb 01       	movw	r30, r22
    return NRK_ERROR;

  tmp_time.secs = period->secs;
    3c76:	80 81       	ld	r24, Z
    3c78:	91 81       	ldd	r25, Z+1	; 0x01
    3c7a:	a2 81       	ldd	r26, Z+2	; 0x02
    3c7c:	b3 81       	ldd	r27, Z+3	; 0x03
    3c7e:	89 83       	std	Y+1, r24	; 0x01
    3c80:	9a 83       	std	Y+2, r25	; 0x02
    3c82:	ab 83       	std	Y+3, r26	; 0x03
    3c84:	bc 83       	std	Y+4, r27	; 0x04
  tmp_time.nano_secs = period->nano_secs;
    3c86:	84 81       	ldd	r24, Z+4	; 0x04
    3c88:	95 81       	ldd	r25, Z+5	; 0x05
    3c8a:	a6 81       	ldd	r26, Z+6	; 0x06
    3c8c:	b7 81       	ldd	r27, Z+7	; 0x07
    3c8e:	8d 83       	std	Y+5, r24	; 0x05
    3c90:	9e 83       	std	Y+6, r25	; 0x06
    3c92:	af 83       	std	Y+7, r26	; 0x07
    3c94:	b8 87       	std	Y+8, r27	; 0x08
  _nrk_reserve[id].period_ticks = _nrk_time_to_ticks_long (&tmp_time);
    3c96:	ce 01       	movw	r24, r28
    3c98:	01 96       	adiw	r24, 0x01	; 1
    3c9a:	0e 94 02 1a 	call	0x3404	; 0x3404 <_nrk_time_to_ticks_long>
    3c9e:	f8 01       	movw	r30, r16
    3ca0:	60 83       	st	Z, r22
    3ca2:	71 83       	std	Z+1, r23	; 0x01
    3ca4:	82 83       	std	Z+2, r24	; 0x02
    3ca6:	93 83       	std	Z+3, r25	; 0x03
  _nrk_reserve[id].set_access = access_count;
    3ca8:	d5 86       	std	Z+13, r13	; 0x0d
    3caa:	c4 86       	std	Z+12, r12	; 0x0c
  _nrk_reserve[id].cur_access = 0;
    3cac:	17 86       	std	Z+15, r1	; 0x0f
    3cae:	16 86       	std	Z+14, r1	; 0x0e

  nrk_time_get (&tmp_time);
    3cb0:	ce 01       	movw	r24, r28
    3cb2:	01 96       	adiw	r24, 0x01	; 1
    3cb4:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <nrk_time_get>
  _nrk_reserve[id].cur_time = (uint32_t) _nrk_time_to_ticks_long (&tmp_time);
    3cb8:	ce 01       	movw	r24, r28
    3cba:	01 96       	adiw	r24, 0x01	; 1
    3cbc:	0e 94 02 1a 	call	0x3404	; 0x3404 <_nrk_time_to_ticks_long>
    3cc0:	f8 01       	movw	r30, r16
    3cc2:	60 87       	std	Z+8, r22	; 0x08
    3cc4:	71 87       	std	Z+9, r23	; 0x09
    3cc6:	82 87       	std	Z+10, r24	; 0x0a
    3cc8:	93 87       	std	Z+11, r25	; 0x0b
  _nrk_reserve[id].set_time =
    _nrk_reserve[id].cur_time + _nrk_reserve[id].period_ticks;
    3cca:	80 80       	ld	r8, Z
    3ccc:	91 80       	ldd	r9, Z+1	; 0x01
    3cce:	a2 80       	ldd	r10, Z+2	; 0x02
    3cd0:	b3 80       	ldd	r11, Z+3	; 0x03
    3cd2:	dc 01       	movw	r26, r24
    3cd4:	cb 01       	movw	r24, r22
    3cd6:	88 0d       	add	r24, r8
    3cd8:	99 1d       	adc	r25, r9
    3cda:	aa 1d       	adc	r26, r10
    3cdc:	bb 1d       	adc	r27, r11
  _nrk_reserve[id].set_access = access_count;
  _nrk_reserve[id].cur_access = 0;

  nrk_time_get (&tmp_time);
  _nrk_reserve[id].cur_time = (uint32_t) _nrk_time_to_ticks_long (&tmp_time);
  _nrk_reserve[id].set_time =
    3cde:	84 83       	std	Z+4, r24	; 0x04
    3ce0:	95 83       	std	Z+5, r25	; 0x05
    3ce2:	a6 83       	std	Z+6, r26	; 0x06
    3ce4:	b7 83       	std	Z+7, r27	; 0x07
    _nrk_reserve[id].cur_time + _nrk_reserve[id].period_ticks;
  _nrk_reserve[id].error = (void *) errhandler;
    3ce6:	f2 8a       	std	Z+18, r15	; 0x12
    3ce8:	e1 8a       	std	Z+17, r14	; 0x11

  return NRK_OK;
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	01 c0       	rjmp	.+2      	; 0x3cf0 <nrk_reserve_set+0xc4>
                        void *errhandler)
{
  nrk_time_t tmp_time;

  if (id >= NRK_MAX_RESERVES)
    return NRK_ERROR;
    3cee:	8f ef       	ldi	r24, 0xFF	; 255
  _nrk_reserve[id].set_time =
    _nrk_reserve[id].cur_time + _nrk_reserve[id].period_ticks;
  _nrk_reserve[id].error = (void *) errhandler;

  return NRK_OK;
}
    3cf0:	28 96       	adiw	r28, 0x08	; 8
    3cf2:	0f b6       	in	r0, 0x3f	; 63
    3cf4:	f8 94       	cli
    3cf6:	de bf       	out	0x3e, r29	; 62
    3cf8:	0f be       	out	0x3f, r0	; 63
    3cfa:	cd bf       	out	0x3d, r28	; 61
    3cfc:	df 91       	pop	r29
    3cfe:	cf 91       	pop	r28
    3d00:	1f 91       	pop	r17
    3d02:	0f 91       	pop	r16
    3d04:	ff 90       	pop	r15
    3d06:	ef 90       	pop	r14
    3d08:	df 90       	pop	r13
    3d0a:	cf 90       	pop	r12
    3d0c:	bf 90       	pop	r11
    3d0e:	af 90       	pop	r10
    3d10:	9f 90       	pop	r9
    3d12:	8f 90       	pop	r8
    3d14:	08 95       	ret

00003d16 <nrk_spin_wait_us>:
	...
    3d2e:	01 97       	sbiw	r24, 0x01	; 1
    3d30:	91 f7       	brne	.-28     	; 0x3d16 <nrk_spin_wait_us>
    3d32:	08 95       	ret

00003d34 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    3d34:	10 92 21 01 	sts	0x0121, r1
    3d38:	08 95       	ret

00003d3a <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    3d3a:	89 e0       	ldi	r24, 0x09	; 9
    3d3c:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    3d40:	8d e8       	ldi	r24, 0x8D	; 141
    3d42:	9c e3       	ldi	r25, 0x3C	; 60
    3d44:	90 93 29 01 	sts	0x0129, r25
    3d48:	80 93 28 01 	sts	0x0128, r24
    3d4c:	08 95       	ret

00003d4e <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3d4e:	10 92 25 01 	sts	0x0125, r1
    3d52:	10 92 24 01 	sts	0x0124, r1
    3d56:	08 95       	ret

00003d58 <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    3d58:	cf 93       	push	r28
    3d5a:	df 93       	push	r29
    3d5c:	00 d0       	rcall	.+0      	; 0x3d5e <_nrk_precision_os_timer_get+0x6>
    3d5e:	cd b7       	in	r28, 0x3d	; 61
    3d60:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    3d62:	80 91 24 01 	lds	r24, 0x0124
    3d66:	90 91 25 01 	lds	r25, 0x0125
    3d6a:	9a 83       	std	Y+2, r25	; 0x02
    3d6c:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    3d6e:	89 81       	ldd	r24, Y+1	; 0x01
    3d70:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3d72:	0f 90       	pop	r0
    3d74:	0f 90       	pop	r0
    3d76:	df 91       	pop	r29
    3d78:	cf 91       	pop	r28
    3d7a:	08 95       	ret

00003d7c <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    3d7c:	10 92 81 00 	sts	0x0081, r1
    3d80:	08 95       	ret

00003d82 <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	80 93 81 00 	sts	0x0081, r24
    3d88:	08 95       	ret

00003d8a <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3d8a:	83 b5       	in	r24, 0x23	; 35
    3d8c:	81 60       	ori	r24, 0x01	; 1
    3d8e:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    3d90:	10 92 85 00 	sts	0x0085, r1
    3d94:	10 92 84 00 	sts	0x0084, r1
    3d98:	08 95       	ret

00003d9a <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    3d9a:	cf 93       	push	r28
    3d9c:	df 93       	push	r29
    3d9e:	00 d0       	rcall	.+0      	; 0x3da0 <_nrk_high_speed_timer_get+0x6>
    3da0:	cd b7       	in	r28, 0x3d	; 61
    3da2:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    3da4:	80 91 84 00 	lds	r24, 0x0084
    3da8:	90 91 85 00 	lds	r25, 0x0085
    3dac:	9a 83       	std	Y+2, r25	; 0x02
    3dae:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    3db0:	89 81       	ldd	r24, Y+1	; 0x01
    3db2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3db4:	0f 90       	pop	r0
    3db6:	0f 90       	pop	r0
    3db8:	df 91       	pop	r29
    3dba:	cf 91       	pop	r28
    3dbc:	08 95       	ret

00003dbe <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    3dbe:	cf 92       	push	r12
    3dc0:	df 92       	push	r13
    3dc2:	ef 92       	push	r14
    3dc4:	ff 92       	push	r15
    3dc6:	cf 93       	push	r28
    3dc8:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    3dca:	ec 01       	movw	r28, r24
    3dcc:	cc 0f       	add	r28, r28
    3dce:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    3dd0:	c9 37       	cpi	r28, 0x79	; 121
    3dd2:	8f ef       	ldi	r24, 0xFF	; 255
    3dd4:	d8 07       	cpc	r29, r24
    3dd6:	10 f0       	brcs	.+4      	; 0x3ddc <nrk_high_speed_timer_wait+0x1e>
    3dd8:	c0 e0       	ldi	r28, 0x00	; 0
    3dda:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    3ddc:	6b 01       	movw	r12, r22
    3dde:	e1 2c       	mov	r14, r1
    3de0:	f1 2c       	mov	r15, r1
    3de2:	cc 0e       	add	r12, r28
    3de4:	dd 1e       	adc	r13, r29
    3de6:	e1 1c       	adc	r14, r1
    3de8:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	c8 16       	cp	r12, r24
    3dee:	d1 04       	cpc	r13, r1
    3df0:	e8 06       	cpc	r14, r24
    3df2:	f1 04       	cpc	r15, r1
    3df4:	40 f0       	brcs	.+16     	; 0x3e06 <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	e8 1a       	sub	r14, r24
    3dfa:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    3dfc:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <_nrk_high_speed_timer_get>
    3e00:	c8 17       	cp	r28, r24
    3e02:	d9 07       	cpc	r29, r25
    3e04:	d8 f3       	brcs	.-10     	; 0x3dfc <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    3e06:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <_nrk_high_speed_timer_get>
    3e0a:	8c 15       	cp	r24, r12
    3e0c:	9d 05       	cpc	r25, r13
    3e0e:	d8 f3       	brcs	.-10     	; 0x3e06 <nrk_high_speed_timer_wait+0x48>
}
    3e10:	df 91       	pop	r29
    3e12:	cf 91       	pop	r28
    3e14:	ff 90       	pop	r15
    3e16:	ef 90       	pop	r14
    3e18:	df 90       	pop	r13
    3e1a:	cf 90       	pop	r12
    3e1c:	08 95       	ret

00003e1e <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    3e1e:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    3e22:	e0 e7       	ldi	r30, 0x70	; 112
    3e24:	f0 e0       	ldi	r31, 0x00	; 0
    3e26:	80 81       	ld	r24, Z
    3e28:	8d 7f       	andi	r24, 0xFD	; 253
    3e2a:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    3e2c:	80 81       	ld	r24, Z
    3e2e:	8e 7f       	andi	r24, 0xFE	; 254
    3e30:	80 83       	st	Z, r24
    3e32:	08 95       	ret

00003e34 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    3e34:	80 93 b2 00 	sts	0x00B2, r24
    3e38:	08 95       	ret

00003e3a <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    3e3a:	e0 e7       	ldi	r30, 0x70	; 112
    3e3c:	f0 e0       	ldi	r31, 0x00	; 0
    3e3e:	80 81       	ld	r24, Z
    3e40:	83 60       	ori	r24, 0x03	; 3
    3e42:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    3e44:	83 e0       	ldi	r24, 0x03	; 3
    3e46:	80 93 b1 00 	sts	0x00B1, r24
    3e4a:	08 95       	ret

00003e4c <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    3e4c:	83 b5       	in	r24, 0x23	; 35
    3e4e:	82 60       	ori	r24, 0x02	; 2
    3e50:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    3e52:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    3e56:	10 92 b0 03 	sts	0x03B0, r1
    _nrk_prev_timer_val=0;
    3e5a:	10 92 23 04 	sts	0x0423, r1
    3e5e:	08 95       	ret

00003e60 <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    3e60:	cf 93       	push	r28
    3e62:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    3e64:	8e ef       	ldi	r24, 0xFE	; 254
    3e66:	80 93 23 04 	sts	0x0423, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    3e6a:	80 e2       	ldi	r24, 0x20	; 32
    3e6c:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    3e70:	80 91 23 04 	lds	r24, 0x0423
    3e74:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    3e78:	83 e0       	ldi	r24, 0x03	; 3
    3e7a:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    3e7c:	92 e0       	ldi	r25, 0x02	; 2
    3e7e:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    3e82:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    3e86:	93 b5       	in	r25, 0x23	; 35
    3e88:	92 60       	ori	r25, 0x02	; 2
    3e8a:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    3e8c:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    3e8e:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    3e90:	83 b5       	in	r24, 0x23	; 35
    3e92:	82 60       	ori	r24, 0x02	; 2
    3e94:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    3e96:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    3e9a:	81 e0       	ldi	r24, 0x01	; 1
    3e9c:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    3ea0:	10 92 85 00 	sts	0x0085, r1
    3ea4:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3ea8:	83 b5       	in	r24, 0x23	; 35
    3eaa:	82 60       	ori	r24, 0x02	; 2
    3eac:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3eae:	83 b5       	in	r24, 0x23	; 35
    3eb0:	81 60       	ori	r24, 0x01	; 1
    3eb2:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    3eb4:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    3eb8:	c4 e2       	ldi	r28, 0x24	; 36
    3eba:	d1 e0       	ldi	r29, 0x01	; 1
    3ebc:	19 82       	std	Y+1, r1	; 0x01
    3ebe:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3ec0:	83 b5       	in	r24, 0x23	; 35
    3ec2:	82 60       	ori	r24, 0x02	; 2
    3ec4:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3ec6:	83 b5       	in	r24, 0x23	; 35
    3ec8:	81 60       	ori	r24, 0x01	; 1
    3eca:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    3ecc:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3ed0:	19 82       	std	Y+1, r1	; 0x01
    3ed2:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    3ed4:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    3ed8:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    3edc:	10 92 b0 03 	sts	0x03B0, r1
}
    3ee0:	df 91       	pop	r29
    3ee2:	cf 91       	pop	r28
    3ee4:	08 95       	ret

00003ee6 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    3ee6:	80 91 b3 00 	lds	r24, 0x00B3
}
    3eea:	8f 5f       	subi	r24, 0xFF	; 255
    3eec:	08 95       	ret

00003eee <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    3eee:	81 50       	subi	r24, 0x01	; 1
    3ef0:	80 93 b3 00 	sts	0x00B3, r24
    3ef4:	08 95       	ret

00003ef6 <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3ef6:	81 11       	cpse	r24, r1
    3ef8:	02 c0       	rjmp	.+4      	; 0x3efe <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    3efa:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    3efe:	8f ef       	ldi	r24, 0xFF	; 255
    3f00:	08 95       	ret

00003f02 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3f02:	81 11       	cpse	r24, r1
    3f04:	06 c0       	rjmp	.+12     	; 0x3f12 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    3f06:	10 92 95 00 	sts	0x0095, r1
    3f0a:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    3f0e:	81 e0       	ldi	r24, 0x01	; 1
    3f10:	08 95       	ret
	}
return NRK_ERROR;
    3f12:	8f ef       	ldi	r24, 0xFF	; 255
}
    3f14:	08 95       	ret

00003f16 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3f16:	81 11       	cpse	r24, r1
    3f18:	05 c0       	rjmp	.+10     	; 0x3f24 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    3f1a:	80 91 94 00 	lds	r24, 0x0094
    3f1e:	90 91 95 00 	lds	r25, 0x0095
    3f22:	08 95       	ret
	}
return 0;
    3f24:	80 e0       	ldi	r24, 0x00	; 0
    3f26:	90 e0       	ldi	r25, 0x00	; 0

}
    3f28:	08 95       	ret

00003f2a <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    3f2a:	81 11       	cpse	r24, r1
    3f2c:	05 c0       	rjmp	.+10     	; 0x3f38 <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    3f2e:	82 e0       	ldi	r24, 0x02	; 2
    3f30:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	08 95       	ret
	}
return NRK_ERROR;
    3f38:	8f ef       	ldi	r24, 0xFF	; 255
}
    3f3a:	08 95       	ret

00003f3c <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    3f3c:	81 11       	cpse	r24, r1
    3f3e:	35 c0       	rjmp	.+106    	; 0x3faa <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    3f40:	cb 01       	movw	r24, r22
    3f42:	01 97       	sbiw	r24, 0x01	; 1
    3f44:	05 97       	sbiw	r24, 0x05	; 5
    3f46:	10 f4       	brcc	.+4      	; 0x3f4c <nrk_timer_int_configure+0x10>
    3f48:	60 93 22 04 	sts	0x0422, r22
	TCCR3A = 0;  
    3f4c:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    3f50:	88 e0       	ldi	r24, 0x08	; 8
    3f52:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    3f56:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    3f5a:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    3f5e:	30 93 ad 03 	sts	0x03AD, r19
    3f62:	20 93 ac 03 	sts	0x03AC, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    3f66:	80 91 22 04 	lds	r24, 0x0422
    3f6a:	81 30       	cpi	r24, 0x01	; 1
    3f6c:	21 f4       	brne	.+8      	; 0x3f76 <nrk_timer_int_configure+0x3a>
    3f6e:	80 91 91 00 	lds	r24, 0x0091
    3f72:	81 60       	ori	r24, 0x01	; 1
    3f74:	11 c0       	rjmp	.+34     	; 0x3f98 <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    3f76:	82 30       	cpi	r24, 0x02	; 2
    3f78:	21 f4       	brne	.+8      	; 0x3f82 <nrk_timer_int_configure+0x46>
    3f7a:	80 91 91 00 	lds	r24, 0x0091
    3f7e:	82 60       	ori	r24, 0x02	; 2
    3f80:	0b c0       	rjmp	.+22     	; 0x3f98 <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    3f82:	83 30       	cpi	r24, 0x03	; 3
    3f84:	21 f4       	brne	.+8      	; 0x3f8e <nrk_timer_int_configure+0x52>
    3f86:	80 91 91 00 	lds	r24, 0x0091
    3f8a:	83 60       	ori	r24, 0x03	; 3
    3f8c:	05 c0       	rjmp	.+10     	; 0x3f98 <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    3f8e:	84 30       	cpi	r24, 0x04	; 4
    3f90:	31 f4       	brne	.+12     	; 0x3f9e <nrk_timer_int_configure+0x62>
    3f92:	80 91 91 00 	lds	r24, 0x0091
    3f96:	84 60       	ori	r24, 0x04	; 4
    3f98:	80 93 91 00 	sts	0x0091, r24
    3f9c:	08 c0       	rjmp	.+16     	; 0x3fae <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    3f9e:	85 30       	cpi	r24, 0x05	; 5
    3fa0:	31 f4       	brne	.+12     	; 0x3fae <nrk_timer_int_configure+0x72>
    3fa2:	80 91 91 00 	lds	r24, 0x0091
    3fa6:	85 60       	ori	r24, 0x05	; 5
    3fa8:	f7 cf       	rjmp	.-18     	; 0x3f98 <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    3faa:	8f ef       	ldi	r24, 0xFF	; 255
    3fac:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    3fae:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    3fb0:	08 95       	ret

00003fb2 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    3fb2:	80 91 b2 00 	lds	r24, 0x00B2
}
    3fb6:	08 95       	ret

00003fb8 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    3fb8:	1f 92       	push	r1
    3fba:	0f 92       	push	r0
    3fbc:	0f b6       	in	r0, 0x3f	; 63
    3fbe:	0f 92       	push	r0
    3fc0:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3fc2:	60 e0       	ldi	r22, 0x00	; 0
    3fc4:	8a e0       	ldi	r24, 0x0A	; 10
    3fc6:	0e 94 85 10 	call	0x210a	; 0x210a <nrk_kernel_error_add>
	while(1);
    3fca:	ff cf       	rjmp	.-2      	; 0x3fca <__vector_default+0x12>

00003fcc <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    3fcc:	0f 92       	push	r0
    3fce:	0f b6       	in	r0, 0x3f	; 63
    3fd0:	0f 92       	push	r0
    3fd2:	1f 92       	push	r1
    3fd4:	2f 92       	push	r2
    3fd6:	3f 92       	push	r3
    3fd8:	4f 92       	push	r4
    3fda:	5f 92       	push	r5
    3fdc:	6f 92       	push	r6
    3fde:	7f 92       	push	r7
    3fe0:	8f 92       	push	r8
    3fe2:	9f 92       	push	r9
    3fe4:	af 92       	push	r10
    3fe6:	bf 92       	push	r11
    3fe8:	cf 92       	push	r12
    3fea:	df 92       	push	r13
    3fec:	ef 92       	push	r14
    3fee:	ff 92       	push	r15
    3ff0:	0f 93       	push	r16
    3ff2:	1f 93       	push	r17
    3ff4:	2f 93       	push	r18
    3ff6:	3f 93       	push	r19
    3ff8:	4f 93       	push	r20
    3ffa:	5f 93       	push	r21
    3ffc:	6f 93       	push	r22
    3ffe:	7f 93       	push	r23
    4000:	8f 93       	push	r24
    4002:	9f 93       	push	r25
    4004:	af 93       	push	r26
    4006:	bf 93       	push	r27
    4008:	cf 93       	push	r28
    400a:	df 93       	push	r29
    400c:	ef 93       	push	r30
    400e:	ff 93       	push	r31
    4010:	a0 91 11 06 	lds	r26, 0x0611
    4014:	b0 91 12 06 	lds	r27, 0x0612
    4018:	0d b6       	in	r0, 0x3d	; 61
    401a:	0d 92       	st	X+, r0
    401c:	0e b6       	in	r0, 0x3e	; 62
    401e:	0d 92       	st	X+, r0
    4020:	1f 92       	push	r1
    4022:	a0 91 bc 03 	lds	r26, 0x03BC
    4026:	b0 91 bd 03 	lds	r27, 0x03BD
    402a:	1e 90       	ld	r1, -X
    402c:	be bf       	out	0x3e, r27	; 62
    402e:	ad bf       	out	0x3d, r26	; 61
    4030:	08 95       	ret

00004032 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    4032:	1f 92       	push	r1
    4034:	0f 92       	push	r0
    4036:	0f b6       	in	r0, 0x3f	; 63
    4038:	0f 92       	push	r0
    403a:	11 24       	eor	r1, r1
    403c:	0b b6       	in	r0, 0x3b	; 59
    403e:	0f 92       	push	r0
    4040:	2f 93       	push	r18
    4042:	3f 93       	push	r19
    4044:	4f 93       	push	r20
    4046:	5f 93       	push	r21
    4048:	6f 93       	push	r22
    404a:	7f 93       	push	r23
    404c:	8f 93       	push	r24
    404e:	9f 93       	push	r25
    4050:	af 93       	push	r26
    4052:	bf 93       	push	r27
    4054:	ef 93       	push	r30
    4056:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    4058:	e0 91 ac 03 	lds	r30, 0x03AC
    405c:	f0 91 ad 03 	lds	r31, 0x03AD
    4060:	30 97       	sbiw	r30, 0x00	; 0
    4062:	11 f0       	breq	.+4      	; 0x4068 <__vector_32+0x36>
    4064:	09 95       	icall
    4066:	04 c0       	rjmp	.+8      	; 0x4070 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4068:	60 e0       	ldi	r22, 0x00	; 0
    406a:	8a e0       	ldi	r24, 0x0A	; 10
    406c:	0e 94 85 10 	call	0x210a	; 0x210a <nrk_kernel_error_add>
	return;  	
}
    4070:	ff 91       	pop	r31
    4072:	ef 91       	pop	r30
    4074:	bf 91       	pop	r27
    4076:	af 91       	pop	r26
    4078:	9f 91       	pop	r25
    407a:	8f 91       	pop	r24
    407c:	7f 91       	pop	r23
    407e:	6f 91       	pop	r22
    4080:	5f 91       	pop	r21
    4082:	4f 91       	pop	r20
    4084:	3f 91       	pop	r19
    4086:	2f 91       	pop	r18
    4088:	0f 90       	pop	r0
    408a:	0b be       	out	0x3b, r0	; 59
    408c:	0f 90       	pop	r0
    408e:	0f be       	out	0x3f, r0	; 63
    4090:	0f 90       	pop	r0
    4092:	1f 90       	pop	r1
    4094:	18 95       	reti

00004096 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    4096:	1f 92       	push	r1
    4098:	0f 92       	push	r0
    409a:	0f b6       	in	r0, 0x3f	; 63
    409c:	0f 92       	push	r0
    409e:	11 24       	eor	r1, r1

	return;  	
} 
    40a0:	0f 90       	pop	r0
    40a2:	0f be       	out	0x3f, r0	; 63
    40a4:	0f 90       	pop	r0
    40a6:	1f 90       	pop	r1
    40a8:	18 95       	reti

000040aa <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    40aa:	04 b6       	in	r0, 0x34	; 52
    40ac:	03 fe       	sbrs	r0, 3
    40ae:	02 c0       	rjmp	.+4      	; 0x40b4 <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    40b0:	80 e1       	ldi	r24, 0x10	; 16
    40b2:	01 c0       	rjmp	.+2      	; 0x40b6 <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    40b4:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    40b6:	04 b6       	in	r0, 0x34	; 52
    40b8:	02 fe       	sbrs	r0, 2
    40ba:	06 c0       	rjmp	.+12     	; 0x40c8 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    40bc:	94 b7       	in	r25, 0x34	; 52
    40be:	9b 7f       	andi	r25, 0xFB	; 251
    40c0:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    40c2:	04 b6       	in	r0, 0x34	; 52
    40c4:	00 fe       	sbrs	r0, 0
		error|=0x04;
    40c6:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    40c8:	04 b6       	in	r0, 0x34	; 52
    40ca:	01 fe       	sbrs	r0, 1
    40cc:	05 c0       	rjmp	.+10     	; 0x40d8 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    40ce:	94 b7       	in	r25, 0x34	; 52
    40d0:	9d 7f       	andi	r25, 0xFD	; 253
    40d2:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    40d4:	82 60       	ori	r24, 0x02	; 2
    40d6:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    40d8:	81 11       	cpse	r24, r1
    40da:	0c c0       	rjmp	.+24     	; 0x40f4 <_nrk_startup_error+0x4a>


// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    40dc:	04 b6       	in	r0, 0x34	; 52
    40de:	00 fe       	sbrs	r0, 0
    40e0:	04 c0       	rjmp	.+8      	; 0x40ea <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    40e2:	94 b7       	in	r25, 0x34	; 52
    40e4:	9e 7f       	andi	r25, 0xFE	; 254
    40e6:	94 bf       	out	0x34, r25	; 52
    40e8:	01 c0       	rjmp	.+2      	; 0x40ec <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    40ea:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    40ec:	90 91 b0 00 	lds	r25, 0x00B0
    40f0:	91 11       	cpse	r25, r1
    40f2:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    40f4:	08 95       	ret

000040f6 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    40f6:	81 11       	cpse	r24, r1
    40f8:	02 c0       	rjmp	.+4      	; 0x40fe <nrk_ext_int_enable+0x8>
    40fa:	e8 9a       	sbi	0x1d, 0	; 29
    40fc:	39 c0       	rjmp	.+114    	; 0x4170 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    40fe:	81 30       	cpi	r24, 0x01	; 1
    4100:	11 f4       	brne	.+4      	; 0x4106 <nrk_ext_int_enable+0x10>
    4102:	e9 9a       	sbi	0x1d, 1	; 29
    4104:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    4106:	82 30       	cpi	r24, 0x02	; 2
    4108:	11 f4       	brne	.+4      	; 0x410e <nrk_ext_int_enable+0x18>
    410a:	ea 9a       	sbi	0x1d, 2	; 29
    410c:	31 c0       	rjmp	.+98     	; 0x4170 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    410e:	83 30       	cpi	r24, 0x03	; 3
    4110:	21 f4       	brne	.+8      	; 0x411a <nrk_ext_int_enable+0x24>
    4112:	80 91 6b 00 	lds	r24, 0x006B
    4116:	81 60       	ori	r24, 0x01	; 1
    4118:	29 c0       	rjmp	.+82     	; 0x416c <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    411a:	84 30       	cpi	r24, 0x04	; 4
    411c:	21 f4       	brne	.+8      	; 0x4126 <nrk_ext_int_enable+0x30>
    411e:	80 91 6b 00 	lds	r24, 0x006B
    4122:	82 60       	ori	r24, 0x02	; 2
    4124:	23 c0       	rjmp	.+70     	; 0x416c <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    4126:	85 30       	cpi	r24, 0x05	; 5
    4128:	21 f4       	brne	.+8      	; 0x4132 <nrk_ext_int_enable+0x3c>
    412a:	80 91 6b 00 	lds	r24, 0x006B
    412e:	84 60       	ori	r24, 0x04	; 4
    4130:	1d c0       	rjmp	.+58     	; 0x416c <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    4132:	86 30       	cpi	r24, 0x06	; 6
    4134:	21 f4       	brne	.+8      	; 0x413e <nrk_ext_int_enable+0x48>
    4136:	80 91 6b 00 	lds	r24, 0x006B
    413a:	88 60       	ori	r24, 0x08	; 8
    413c:	17 c0       	rjmp	.+46     	; 0x416c <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    413e:	87 30       	cpi	r24, 0x07	; 7
    4140:	21 f4       	brne	.+8      	; 0x414a <nrk_ext_int_enable+0x54>
    4142:	80 91 6b 00 	lds	r24, 0x006B
    4146:	80 61       	ori	r24, 0x10	; 16
    4148:	11 c0       	rjmp	.+34     	; 0x416c <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    414a:	88 30       	cpi	r24, 0x08	; 8
    414c:	21 f4       	brne	.+8      	; 0x4156 <nrk_ext_int_enable+0x60>
    414e:	80 91 6b 00 	lds	r24, 0x006B
    4152:	80 62       	ori	r24, 0x20	; 32
    4154:	0b c0       	rjmp	.+22     	; 0x416c <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    4156:	89 30       	cpi	r24, 0x09	; 9
    4158:	21 f4       	brne	.+8      	; 0x4162 <nrk_ext_int_enable+0x6c>
    415a:	80 91 6b 00 	lds	r24, 0x006B
    415e:	80 64       	ori	r24, 0x40	; 64
    4160:	05 c0       	rjmp	.+10     	; 0x416c <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    4162:	8a 30       	cpi	r24, 0x0A	; 10
    4164:	39 f4       	brne	.+14     	; 0x4174 <nrk_ext_int_enable+0x7e>
    4166:	80 91 6b 00 	lds	r24, 0x006B
    416a:	80 68       	ori	r24, 0x80	; 128
    416c:	80 93 6b 00 	sts	0x006B, r24
    4170:	81 e0       	ldi	r24, 0x01	; 1
    4172:	08 95       	ret
return NRK_ERROR;
    4174:	8f ef       	ldi	r24, 0xFF	; 255
}
    4176:	08 95       	ret

00004178 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    4178:	81 11       	cpse	r24, r1
    417a:	02 c0       	rjmp	.+4      	; 0x4180 <nrk_ext_int_disable+0x8>
    417c:	e8 98       	cbi	0x1d, 0	; 29
    417e:	39 c0       	rjmp	.+114    	; 0x41f2 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4180:	81 30       	cpi	r24, 0x01	; 1
    4182:	11 f4       	brne	.+4      	; 0x4188 <nrk_ext_int_disable+0x10>
    4184:	e9 98       	cbi	0x1d, 1	; 29
    4186:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4188:	82 30       	cpi	r24, 0x02	; 2
    418a:	11 f4       	brne	.+4      	; 0x4190 <nrk_ext_int_disable+0x18>
    418c:	e9 98       	cbi	0x1d, 1	; 29
    418e:	31 c0       	rjmp	.+98     	; 0x41f2 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    4190:	83 30       	cpi	r24, 0x03	; 3
    4192:	21 f4       	brne	.+8      	; 0x419c <nrk_ext_int_disable+0x24>
    4194:	80 91 6b 00 	lds	r24, 0x006B
    4198:	8e 7f       	andi	r24, 0xFE	; 254
    419a:	29 c0       	rjmp	.+82     	; 0x41ee <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    419c:	84 30       	cpi	r24, 0x04	; 4
    419e:	21 f4       	brne	.+8      	; 0x41a8 <nrk_ext_int_disable+0x30>
    41a0:	80 91 6b 00 	lds	r24, 0x006B
    41a4:	8d 7f       	andi	r24, 0xFD	; 253
    41a6:	23 c0       	rjmp	.+70     	; 0x41ee <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    41a8:	85 30       	cpi	r24, 0x05	; 5
    41aa:	21 f4       	brne	.+8      	; 0x41b4 <nrk_ext_int_disable+0x3c>
    41ac:	80 91 6b 00 	lds	r24, 0x006B
    41b0:	8b 7f       	andi	r24, 0xFB	; 251
    41b2:	1d c0       	rjmp	.+58     	; 0x41ee <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    41b4:	86 30       	cpi	r24, 0x06	; 6
    41b6:	21 f4       	brne	.+8      	; 0x41c0 <nrk_ext_int_disable+0x48>
    41b8:	80 91 6b 00 	lds	r24, 0x006B
    41bc:	87 7f       	andi	r24, 0xF7	; 247
    41be:	17 c0       	rjmp	.+46     	; 0x41ee <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    41c0:	87 30       	cpi	r24, 0x07	; 7
    41c2:	21 f4       	brne	.+8      	; 0x41cc <nrk_ext_int_disable+0x54>
    41c4:	80 91 6b 00 	lds	r24, 0x006B
    41c8:	8f 7e       	andi	r24, 0xEF	; 239
    41ca:	11 c0       	rjmp	.+34     	; 0x41ee <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    41cc:	88 30       	cpi	r24, 0x08	; 8
    41ce:	21 f4       	brne	.+8      	; 0x41d8 <nrk_ext_int_disable+0x60>
    41d0:	80 91 6b 00 	lds	r24, 0x006B
    41d4:	8f 7d       	andi	r24, 0xDF	; 223
    41d6:	0b c0       	rjmp	.+22     	; 0x41ee <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    41d8:	89 30       	cpi	r24, 0x09	; 9
    41da:	21 f4       	brne	.+8      	; 0x41e4 <nrk_ext_int_disable+0x6c>
    41dc:	80 91 6b 00 	lds	r24, 0x006B
    41e0:	8f 7b       	andi	r24, 0xBF	; 191
    41e2:	05 c0       	rjmp	.+10     	; 0x41ee <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    41e4:	8a 30       	cpi	r24, 0x0A	; 10
    41e6:	39 f4       	brne	.+14     	; 0x41f6 <nrk_ext_int_disable+0x7e>
    41e8:	80 91 6b 00 	lds	r24, 0x006B
    41ec:	8f 77       	andi	r24, 0x7F	; 127
    41ee:	80 93 6b 00 	sts	0x006B, r24
    41f2:	81 e0       	ldi	r24, 0x01	; 1
    41f4:	08 95       	ret
return NRK_ERROR;
    41f6:	8f ef       	ldi	r24, 0xFF	; 255
}
    41f8:	08 95       	ret

000041fa <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    41fa:	81 11       	cpse	r24, r1
    41fc:	26 c0       	rjmp	.+76     	; 0x424a <__stack+0x4b>
	{
	ext_int0_callback=callback_func;
    41fe:	50 93 9a 06 	sts	0x069A, r21
    4202:	40 93 99 06 	sts	0x0699, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    4206:	61 11       	cpse	r22, r1
    4208:	04 c0       	rjmp	.+8      	; 0x4212 <__stack+0x13>
    420a:	80 91 69 00 	lds	r24, 0x0069
    420e:	8c 7f       	andi	r24, 0xFC	; 252
    4210:	3d c0       	rjmp	.+122    	; 0x428c <__stack+0x8d>
	if(mode==NRK_LEVEL_TRIGGER) 
    4212:	61 30       	cpi	r22, 0x01	; 1
    4214:	49 f4       	brne	.+18     	; 0x4228 <__stack+0x29>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    4216:	80 91 69 00 	lds	r24, 0x0069
    421a:	8d 7f       	andi	r24, 0xFD	; 253
    421c:	80 93 69 00 	sts	0x0069, r24
    4220:	80 91 69 00 	lds	r24, 0x0069
    4224:	81 60       	ori	r24, 0x01	; 1
    4226:	32 c0       	rjmp	.+100    	; 0x428c <__stack+0x8d>
	if(mode==NRK_FALLING_EDGE) 
    4228:	62 30       	cpi	r22, 0x02	; 2
    422a:	49 f4       	brne	.+18     	; 0x423e <__stack+0x3f>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    422c:	80 91 69 00 	lds	r24, 0x0069
    4230:	82 60       	ori	r24, 0x02	; 2
    4232:	80 93 69 00 	sts	0x0069, r24
    4236:	80 91 69 00 	lds	r24, 0x0069
    423a:	8e 7f       	andi	r24, 0xFE	; 254
    423c:	27 c0       	rjmp	.+78     	; 0x428c <__stack+0x8d>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    423e:	63 30       	cpi	r22, 0x03	; 3
    4240:	39 f5       	brne	.+78     	; 0x4290 <__stack+0x91>
    4242:	80 91 69 00 	lds	r24, 0x0069
    4246:	83 60       	ori	r24, 0x03	; 3
    4248:	21 c0       	rjmp	.+66     	; 0x428c <__stack+0x8d>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    424a:	81 30       	cpi	r24, 0x01	; 1
    424c:	49 f5       	brne	.+82     	; 0x42a0 <__stack+0xa1>
	{
	ext_int1_callback=callback_func;
    424e:	50 93 98 06 	sts	0x0698, r21
    4252:	40 93 97 06 	sts	0x0697, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    4256:	61 11       	cpse	r22, r1
    4258:	04 c0       	rjmp	.+8      	; 0x4262 <__stack+0x63>
    425a:	80 91 69 00 	lds	r24, 0x0069
    425e:	83 7f       	andi	r24, 0xF3	; 243
    4260:	15 c0       	rjmp	.+42     	; 0x428c <__stack+0x8d>
	if(mode==NRK_LEVEL_TRIGGER) 
    4262:	61 30       	cpi	r22, 0x01	; 1
    4264:	49 f4       	brne	.+18     	; 0x4278 <__stack+0x79>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    4266:	80 91 69 00 	lds	r24, 0x0069
    426a:	87 7f       	andi	r24, 0xF7	; 247
    426c:	80 93 69 00 	sts	0x0069, r24
    4270:	80 91 69 00 	lds	r24, 0x0069
    4274:	84 60       	ori	r24, 0x04	; 4
    4276:	0a c0       	rjmp	.+20     	; 0x428c <__stack+0x8d>
	if(mode==NRK_FALLING_EDGE) 
    4278:	62 30       	cpi	r22, 0x02	; 2
    427a:	61 f4       	brne	.+24     	; 0x4294 <__stack+0x95>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    427c:	80 91 69 00 	lds	r24, 0x0069
    4280:	88 60       	ori	r24, 0x08	; 8
    4282:	80 93 69 00 	sts	0x0069, r24
    4286:	80 91 69 00 	lds	r24, 0x0069
    428a:	8b 7f       	andi	r24, 0xFB	; 251
    428c:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    4294:	63 30       	cpi	r22, 0x03	; 3
    4296:	e1 f7       	brne	.-8      	; 0x4290 <__stack+0x91>
    4298:	80 91 69 00 	lds	r24, 0x0069
    429c:	8c 60       	ori	r24, 0x0C	; 12
    429e:	f6 cf       	rjmp	.-20     	; 0x428c <__stack+0x8d>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    42a0:	82 30       	cpi	r24, 0x02	; 2
    42a2:	31 f5       	brne	.+76     	; 0x42f0 <__stack+0xf1>
	{
	ext_int2_callback=callback_func;
    42a4:	50 93 9c 06 	sts	0x069C, r21
    42a8:	40 93 9b 06 	sts	0x069B, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    42ac:	61 11       	cpse	r22, r1
    42ae:	04 c0       	rjmp	.+8      	; 0x42b8 <__stack+0xb9>
    42b0:	80 91 69 00 	lds	r24, 0x0069
    42b4:	8f 7c       	andi	r24, 0xCF	; 207
    42b6:	ea cf       	rjmp	.-44     	; 0x428c <__stack+0x8d>
	if(mode==NRK_LEVEL_TRIGGER) 
    42b8:	61 30       	cpi	r22, 0x01	; 1
    42ba:	49 f4       	brne	.+18     	; 0x42ce <__stack+0xcf>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    42bc:	80 91 69 00 	lds	r24, 0x0069
    42c0:	8f 7d       	andi	r24, 0xDF	; 223
    42c2:	80 93 69 00 	sts	0x0069, r24
    42c6:	80 91 69 00 	lds	r24, 0x0069
    42ca:	80 61       	ori	r24, 0x10	; 16
    42cc:	df cf       	rjmp	.-66     	; 0x428c <__stack+0x8d>
	if(mode==NRK_FALLING_EDGE) 
    42ce:	62 30       	cpi	r22, 0x02	; 2
    42d0:	49 f4       	brne	.+18     	; 0x42e4 <__stack+0xe5>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    42d2:	80 91 69 00 	lds	r24, 0x0069
    42d6:	80 62       	ori	r24, 0x20	; 32
    42d8:	80 93 69 00 	sts	0x0069, r24
    42dc:	80 91 69 00 	lds	r24, 0x0069
    42e0:	8f 7e       	andi	r24, 0xEF	; 239
    42e2:	d4 cf       	rjmp	.-88     	; 0x428c <__stack+0x8d>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    42e4:	63 30       	cpi	r22, 0x03	; 3
    42e6:	a1 f6       	brne	.-88     	; 0x4290 <__stack+0x91>
    42e8:	80 91 69 00 	lds	r24, 0x0069
    42ec:	80 63       	ori	r24, 0x30	; 48
    42ee:	ce cf       	rjmp	.-100    	; 0x428c <__stack+0x8d>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    42f0:	83 50       	subi	r24, 0x03	; 3
    42f2:	88 30       	cpi	r24, 0x08	; 8
    42f4:	50 f4       	brcc	.+20     	; 0x430a <__stack+0x10b>
	PCICR |= BM(PCIE0);	
    42f6:	80 91 68 00 	lds	r24, 0x0068
    42fa:	81 60       	ori	r24, 0x01	; 1
    42fc:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    4300:	50 93 9e 06 	sts	0x069E, r21
    4304:	40 93 9d 06 	sts	0x069D, r20
    4308:	c3 cf       	rjmp	.-122    	; 0x4290 <__stack+0x91>
	return NRK_OK;
	}
return NRK_ERROR;
    430a:	8f ef       	ldi	r24, 0xFF	; 255
}
    430c:	08 95       	ret

0000430e <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    430e:	1f 92       	push	r1
    4310:	0f 92       	push	r0
    4312:	0f b6       	in	r0, 0x3f	; 63
    4314:	0f 92       	push	r0
    4316:	11 24       	eor	r1, r1
    4318:	0b b6       	in	r0, 0x3b	; 59
    431a:	0f 92       	push	r0
    431c:	2f 93       	push	r18
    431e:	3f 93       	push	r19
    4320:	4f 93       	push	r20
    4322:	5f 93       	push	r21
    4324:	6f 93       	push	r22
    4326:	7f 93       	push	r23
    4328:	8f 93       	push	r24
    432a:	9f 93       	push	r25
    432c:	af 93       	push	r26
    432e:	bf 93       	push	r27
    4330:	ef 93       	push	r30
    4332:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    4334:	e0 91 9d 06 	lds	r30, 0x069D
    4338:	f0 91 9e 06 	lds	r31, 0x069E
    433c:	30 97       	sbiw	r30, 0x00	; 0
    433e:	11 f0       	breq	.+4      	; 0x4344 <__vector_9+0x36>
    4340:	09 95       	icall
    4342:	04 c0       	rjmp	.+8      	; 0x434c <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4344:	60 e0       	ldi	r22, 0x00	; 0
    4346:	8a e0       	ldi	r24, 0x0A	; 10
    4348:	0e 94 85 10 	call	0x210a	; 0x210a <nrk_kernel_error_add>
	return;  	
}
    434c:	ff 91       	pop	r31
    434e:	ef 91       	pop	r30
    4350:	bf 91       	pop	r27
    4352:	af 91       	pop	r26
    4354:	9f 91       	pop	r25
    4356:	8f 91       	pop	r24
    4358:	7f 91       	pop	r23
    435a:	6f 91       	pop	r22
    435c:	5f 91       	pop	r21
    435e:	4f 91       	pop	r20
    4360:	3f 91       	pop	r19
    4362:	2f 91       	pop	r18
    4364:	0f 90       	pop	r0
    4366:	0b be       	out	0x3b, r0	; 59
    4368:	0f 90       	pop	r0
    436a:	0f be       	out	0x3f, r0	; 63
    436c:	0f 90       	pop	r0
    436e:	1f 90       	pop	r1
    4370:	18 95       	reti

00004372 <__vector_1>:


SIGNAL(INT0_vect) {
    4372:	1f 92       	push	r1
    4374:	0f 92       	push	r0
    4376:	0f b6       	in	r0, 0x3f	; 63
    4378:	0f 92       	push	r0
    437a:	11 24       	eor	r1, r1
    437c:	0b b6       	in	r0, 0x3b	; 59
    437e:	0f 92       	push	r0
    4380:	2f 93       	push	r18
    4382:	3f 93       	push	r19
    4384:	4f 93       	push	r20
    4386:	5f 93       	push	r21
    4388:	6f 93       	push	r22
    438a:	7f 93       	push	r23
    438c:	8f 93       	push	r24
    438e:	9f 93       	push	r25
    4390:	af 93       	push	r26
    4392:	bf 93       	push	r27
    4394:	ef 93       	push	r30
    4396:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    4398:	e0 91 99 06 	lds	r30, 0x0699
    439c:	f0 91 9a 06 	lds	r31, 0x069A
    43a0:	30 97       	sbiw	r30, 0x00	; 0
    43a2:	11 f0       	breq	.+4      	; 0x43a8 <__vector_1+0x36>
    43a4:	09 95       	icall
    43a6:	04 c0       	rjmp	.+8      	; 0x43b0 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    43a8:	60 e0       	ldi	r22, 0x00	; 0
    43aa:	8a e0       	ldi	r24, 0x0A	; 10
    43ac:	0e 94 85 10 	call	0x210a	; 0x210a <nrk_kernel_error_add>
	return;  	
}
    43b0:	ff 91       	pop	r31
    43b2:	ef 91       	pop	r30
    43b4:	bf 91       	pop	r27
    43b6:	af 91       	pop	r26
    43b8:	9f 91       	pop	r25
    43ba:	8f 91       	pop	r24
    43bc:	7f 91       	pop	r23
    43be:	6f 91       	pop	r22
    43c0:	5f 91       	pop	r21
    43c2:	4f 91       	pop	r20
    43c4:	3f 91       	pop	r19
    43c6:	2f 91       	pop	r18
    43c8:	0f 90       	pop	r0
    43ca:	0b be       	out	0x3b, r0	; 59
    43cc:	0f 90       	pop	r0
    43ce:	0f be       	out	0x3f, r0	; 63
    43d0:	0f 90       	pop	r0
    43d2:	1f 90       	pop	r1
    43d4:	18 95       	reti

000043d6 <__vector_2>:

SIGNAL(INT1_vect) {
    43d6:	1f 92       	push	r1
    43d8:	0f 92       	push	r0
    43da:	0f b6       	in	r0, 0x3f	; 63
    43dc:	0f 92       	push	r0
    43de:	11 24       	eor	r1, r1
    43e0:	0b b6       	in	r0, 0x3b	; 59
    43e2:	0f 92       	push	r0
    43e4:	2f 93       	push	r18
    43e6:	3f 93       	push	r19
    43e8:	4f 93       	push	r20
    43ea:	5f 93       	push	r21
    43ec:	6f 93       	push	r22
    43ee:	7f 93       	push	r23
    43f0:	8f 93       	push	r24
    43f2:	9f 93       	push	r25
    43f4:	af 93       	push	r26
    43f6:	bf 93       	push	r27
    43f8:	ef 93       	push	r30
    43fa:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    43fc:	e0 91 97 06 	lds	r30, 0x0697
    4400:	f0 91 98 06 	lds	r31, 0x0698
    4404:	30 97       	sbiw	r30, 0x00	; 0
    4406:	11 f0       	breq	.+4      	; 0x440c <__vector_2+0x36>
    4408:	09 95       	icall
    440a:	04 c0       	rjmp	.+8      	; 0x4414 <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    440c:	60 e0       	ldi	r22, 0x00	; 0
    440e:	8a e0       	ldi	r24, 0x0A	; 10
    4410:	0e 94 85 10 	call	0x210a	; 0x210a <nrk_kernel_error_add>
	return;  	
}
    4414:	ff 91       	pop	r31
    4416:	ef 91       	pop	r30
    4418:	bf 91       	pop	r27
    441a:	af 91       	pop	r26
    441c:	9f 91       	pop	r25
    441e:	8f 91       	pop	r24
    4420:	7f 91       	pop	r23
    4422:	6f 91       	pop	r22
    4424:	5f 91       	pop	r21
    4426:	4f 91       	pop	r20
    4428:	3f 91       	pop	r19
    442a:	2f 91       	pop	r18
    442c:	0f 90       	pop	r0
    442e:	0b be       	out	0x3b, r0	; 59
    4430:	0f 90       	pop	r0
    4432:	0f be       	out	0x3f, r0	; 63
    4434:	0f 90       	pop	r0
    4436:	1f 90       	pop	r1
    4438:	18 95       	reti

0000443a <__vector_3>:

SIGNAL(INT2_vect) {
    443a:	1f 92       	push	r1
    443c:	0f 92       	push	r0
    443e:	0f b6       	in	r0, 0x3f	; 63
    4440:	0f 92       	push	r0
    4442:	11 24       	eor	r1, r1
    4444:	0b b6       	in	r0, 0x3b	; 59
    4446:	0f 92       	push	r0
    4448:	2f 93       	push	r18
    444a:	3f 93       	push	r19
    444c:	4f 93       	push	r20
    444e:	5f 93       	push	r21
    4450:	6f 93       	push	r22
    4452:	7f 93       	push	r23
    4454:	8f 93       	push	r24
    4456:	9f 93       	push	r25
    4458:	af 93       	push	r26
    445a:	bf 93       	push	r27
    445c:	ef 93       	push	r30
    445e:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    4460:	e0 91 9b 06 	lds	r30, 0x069B
    4464:	f0 91 9c 06 	lds	r31, 0x069C
    4468:	30 97       	sbiw	r30, 0x00	; 0
    446a:	11 f0       	breq	.+4      	; 0x4470 <__vector_3+0x36>
    446c:	09 95       	icall
    446e:	04 c0       	rjmp	.+8      	; 0x4478 <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4470:	60 e0       	ldi	r22, 0x00	; 0
    4472:	8a e0       	ldi	r24, 0x0A	; 10
    4474:	0e 94 85 10 	call	0x210a	; 0x210a <nrk_kernel_error_add>
	return;  	
}
    4478:	ff 91       	pop	r31
    447a:	ef 91       	pop	r30
    447c:	bf 91       	pop	r27
    447e:	af 91       	pop	r26
    4480:	9f 91       	pop	r25
    4482:	8f 91       	pop	r24
    4484:	7f 91       	pop	r23
    4486:	6f 91       	pop	r22
    4488:	5f 91       	pop	r21
    448a:	4f 91       	pop	r20
    448c:	3f 91       	pop	r19
    448e:	2f 91       	pop	r18
    4490:	0f 90       	pop	r0
    4492:	0b be       	out	0x3b, r0	; 59
    4494:	0f 90       	pop	r0
    4496:	0f be       	out	0x3f, r0	; 63
    4498:	0f 90       	pop	r0
    449a:	1f 90       	pop	r1
    449c:	18 95       	reti

0000449e <nrk_watchdog_disable>:
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    449e:	a8 95       	wdr
#include <util/atomic.h>

void nrk_watchdog_disable()
{
nrk_watchdog_reset();
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    44a0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    44a2:	f8 94       	cli
{
	MCUSR &= ~(1<<WDRF);
    44a4:	84 b7       	in	r24, 0x34	; 52
    44a6:	87 7f       	andi	r24, 0xF7	; 247
    44a8:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE) | (1<<WDE);
    44aa:	e0 e6       	ldi	r30, 0x60	; 96
    44ac:	f0 e0       	ldi	r31, 0x00	; 0
    44ae:	80 81       	ld	r24, Z
    44b0:	88 61       	ori	r24, 0x18	; 24
    44b2:	80 83       	st	Z, r24
	WDTCSR = 0;
    44b4:	10 82       	st	Z, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    44b6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    44b8:	08 95       	ret

000044ba <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    44ba:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    44bc:	f8 94       	cli
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    44be:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
{
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    44c0:	84 b7       	in	r24, 0x34	; 52
    44c2:	87 7f       	andi	r24, 0xF7	; 247
    44c4:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    44c6:	e0 e6       	ldi	r30, 0x60	; 96
    44c8:	f0 e0       	ldi	r31, 0x00	; 0
    44ca:	80 81       	ld	r24, Z
    44cc:	88 61       	ori	r24, 0x18	; 24
    44ce:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    44d0:	8d e0       	ldi	r24, 0x0D	; 13
    44d2:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    44d4:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    44d6:	08 95       	ret

000044d8 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    44d8:	04 b6       	in	r0, 0x34	; 52
    44da:	03 fe       	sbrs	r0, 3
    44dc:	02 c0       	rjmp	.+4      	; 0x44e2 <nrk_watchdog_check+0xa>
return NRK_ERROR;
    44de:	8f ef       	ldi	r24, 0xFF	; 255
    44e0:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    44e2:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    44e4:	08 95       	ret

000044e6 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    44e6:	a8 95       	wdr
    44e8:	08 95       	ret

000044ea <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    44ea:	08 95       	ret

000044ec <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    44ec:	83 b7       	in	r24, 0x33	; 51
    44ee:	81 7f       	andi	r24, 0xF1	; 241
    44f0:	86 60       	ori	r24, 0x06	; 6
    44f2:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    44f4:	83 b7       	in	r24, 0x33	; 51
    44f6:	81 60       	ori	r24, 0x01	; 1
    44f8:	83 bf       	out	0x33, r24	; 51
    44fa:	88 95       	sleep
    44fc:	83 b7       	in	r24, 0x33	; 51
    44fe:	8e 7f       	andi	r24, 0xFE	; 254
    4500:	83 bf       	out	0x33, r24	; 51
    4502:	08 95       	ret

00004504 <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    4504:	83 b7       	in	r24, 0x33	; 51
    4506:	81 7f       	andi	r24, 0xF1	; 241
    4508:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    450a:	83 b7       	in	r24, 0x33	; 51
    450c:	81 60       	ori	r24, 0x01	; 1
    450e:	83 bf       	out	0x33, r24	; 51
    4510:	88 95       	sleep
    4512:	83 b7       	in	r24, 0x33	; 51
    4514:	8e 7f       	andi	r24, 0xFE	; 254
    4516:	83 bf       	out	0x33, r24	; 51
    4518:	08 95       	ret

0000451a <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    451a:	fc 01       	movw	r30, r24
    451c:	76 83       	std	Z+6, r23	; 0x06
    451e:	65 83       	std	Z+5, r22	; 0x05
    4520:	08 95       	ret

00004522 <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    4522:	ef 92       	push	r14
    4524:	ff 92       	push	r15
    4526:	0f 93       	push	r16
    4528:	1f 93       	push	r17
    452a:	cf 93       	push	r28
    452c:	df 93       	push	r29
    452e:	8c 01       	movw	r16, r24
    4530:	7b 01       	movw	r14, r22
    4532:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    4534:	40 32       	cpi	r20, 0x20	; 32
    4536:	51 05       	cpc	r21, r1
    4538:	18 f4       	brcc	.+6      	; 0x4540 <nrk_task_set_stk+0x1e>
    453a:	81 e1       	ldi	r24, 0x11	; 17
    453c:	0e 94 77 10 	call	0x20ee	; 0x20ee <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    4540:	21 97       	sbiw	r28, 0x01	; 1
    4542:	ce 0d       	add	r28, r14
    4544:	df 1d       	adc	r29, r15
    4546:	f8 01       	movw	r30, r16
    4548:	d2 83       	std	Z+2, r29	; 0x02
    454a:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    454c:	f4 82       	std	Z+4, r15	; 0x04
    454e:	e3 82       	std	Z+3, r14	; 0x03

}
    4550:	df 91       	pop	r29
    4552:	cf 91       	pop	r28
    4554:	1f 91       	pop	r17
    4556:	0f 91       	pop	r16
    4558:	ff 90       	pop	r15
    455a:	ef 90       	pop	r14
    455c:	08 95       	ret

0000455e <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    455e:	25 e5       	ldi	r18, 0x55	; 85
    4560:	fa 01       	movw	r30, r20
    4562:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    4564:	fb 01       	movw	r30, r22
    4566:	32 97       	sbiw	r30, 0x02	; 2
    4568:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    456a:	31 96       	adiw	r30, 0x01	; 1
    456c:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    456e:	33 97       	sbiw	r30, 0x03	; 3
    4570:	11 82       	std	Z+1, r1	; 0x01
    4572:	10 82       	st	Z, r1
    *(--stk) = 0;       
    4574:	32 97       	sbiw	r30, 0x02	; 2
    4576:	11 82       	std	Z+1, r1	; 0x01
    4578:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    457a:	32 97       	sbiw	r30, 0x02	; 2
    457c:	11 82       	std	Z+1, r1	; 0x01
    457e:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    4580:	32 97       	sbiw	r30, 0x02	; 2
    4582:	11 82       	std	Z+1, r1	; 0x01
    4584:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    4586:	32 97       	sbiw	r30, 0x02	; 2
    4588:	11 82       	std	Z+1, r1	; 0x01
    458a:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    458c:	32 97       	sbiw	r30, 0x02	; 2
    458e:	11 82       	std	Z+1, r1	; 0x01
    4590:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    4592:	32 97       	sbiw	r30, 0x02	; 2
    4594:	11 82       	std	Z+1, r1	; 0x01
    4596:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4598:	32 97       	sbiw	r30, 0x02	; 2
    459a:	11 82       	std	Z+1, r1	; 0x01
    459c:	10 82       	st	Z, r1

    *(--stk) = 0; 
    459e:	32 97       	sbiw	r30, 0x02	; 2
    45a0:	11 82       	std	Z+1, r1	; 0x01
    45a2:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45a4:	32 97       	sbiw	r30, 0x02	; 2
    45a6:	11 82       	std	Z+1, r1	; 0x01
    45a8:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45aa:	32 97       	sbiw	r30, 0x02	; 2
    45ac:	11 82       	std	Z+1, r1	; 0x01
    45ae:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45b0:	32 97       	sbiw	r30, 0x02	; 2
    45b2:	11 82       	std	Z+1, r1	; 0x01
    45b4:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45b6:	32 97       	sbiw	r30, 0x02	; 2
    45b8:	11 82       	std	Z+1, r1	; 0x01
    45ba:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45bc:	32 97       	sbiw	r30, 0x02	; 2
    45be:	11 82       	std	Z+1, r1	; 0x01
    45c0:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45c2:	32 97       	sbiw	r30, 0x02	; 2
    45c4:	11 82       	std	Z+1, r1	; 0x01
    45c6:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45c8:	32 97       	sbiw	r30, 0x02	; 2
    45ca:	11 82       	std	Z+1, r1	; 0x01
    45cc:	10 82       	st	Z, r1
    *(--stk) = 0;
    45ce:	cb 01       	movw	r24, r22
    45d0:	84 97       	sbiw	r24, 0x24	; 36
    45d2:	fc 01       	movw	r30, r24
    45d4:	11 82       	std	Z+1, r1	; 0x01
    45d6:	10 82       	st	Z, r1


    return ((void *)stk);
}
    45d8:	08 95       	ret

000045da <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    45da:	85 e5       	ldi	r24, 0x55	; 85
    45dc:	80 93 fe 3f 	sts	0x3FFE, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    45e0:	ee ef       	ldi	r30, 0xFE	; 254
    45e2:	f1 e4       	ldi	r31, 0x41	; 65
    45e4:	f0 93 bd 03 	sts	0x03BD, r31
    45e8:	e0 93 bc 03 	sts	0x03BC, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    45ec:	85 e9       	ldi	r24, 0x95	; 149
    45ee:	9e e0       	ldi	r25, 0x0E	; 14
    45f0:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    45f2:	80 93 ff 41 	sts	0x41FF, r24
    45f6:	08 95       	ret

000045f8 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    45f8:	85 e9       	ldi	r24, 0x95	; 149
    45fa:	9e e0       	ldi	r25, 0x0E	; 14
    45fc:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4600:	80 93 ff 41 	sts	0x41FF, r24
    4604:	08 95       	ret

00004606 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    4606:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <_nrk_setup_timer>
  nrk_int_enable();  
    460a:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <nrk_int_enable>

0000460e <nrk_start_high_ready_task>:
    460e:	a0 91 02 06 	lds	r26, 0x0602
    4612:	b0 91 03 06 	lds	r27, 0x0603
    4616:	cd 91       	ld	r28, X+
    4618:	cd bf       	out	0x3d, r28	; 61
    461a:	dd 91       	ld	r29, X+
    461c:	de bf       	out	0x3e, r29	; 62
    461e:	ff 91       	pop	r31
    4620:	ef 91       	pop	r30
    4622:	df 91       	pop	r29
    4624:	cf 91       	pop	r28
    4626:	bf 91       	pop	r27
    4628:	af 91       	pop	r26
    462a:	9f 91       	pop	r25
    462c:	8f 91       	pop	r24
    462e:	7f 91       	pop	r23
    4630:	6f 91       	pop	r22
    4632:	5f 91       	pop	r21
    4634:	4f 91       	pop	r20
    4636:	3f 91       	pop	r19
    4638:	2f 91       	pop	r18
    463a:	1f 91       	pop	r17
    463c:	0f 91       	pop	r16
    463e:	ff 90       	pop	r15
    4640:	ef 90       	pop	r14
    4642:	df 90       	pop	r13
    4644:	cf 90       	pop	r12
    4646:	bf 90       	pop	r11
    4648:	af 90       	pop	r10
    464a:	9f 90       	pop	r9
    464c:	8f 90       	pop	r8
    464e:	7f 90       	pop	r7
    4650:	6f 90       	pop	r6
    4652:	5f 90       	pop	r5
    4654:	4f 90       	pop	r4
    4656:	3f 90       	pop	r3
    4658:	2f 90       	pop	r2
    465a:	1f 90       	pop	r1
    465c:	0f 90       	pop	r0
    465e:	0f be       	out	0x3f, r0	; 63
    4660:	0f 90       	pop	r0
    4662:	18 95       	reti

00004664 <main>:

char buf[100];

void main(){
	
	nrk_setup_ports();
    4664:	0e 94 92 08 	call	0x1124	; 0x1124 <nrk_setup_ports>
	nrk_setup_uart(UART_BAUDRATE_115K2);
    4668:	80 e1       	ldi	r24, 0x10	; 16
    466a:	90 e0       	ldi	r25, 0x00	; 0
    466c:	0e 94 16 0c 	call	0x182c	; 0x182c <nrk_setup_uart>
	nrk_init();
    4670:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <nrk_init>
	pRRI.pPayload = buf;
    4674:	8e eb       	ldi	r24, 0xBE	; 190
    4676:	93 e0       	ldi	r25, 0x03	; 3
    4678:	90 93 2a 04 	sts	0x042A, r25
    467c:	80 93 29 04 	sts	0x0429, r24
	pRRI.ackRequest = 0;
    4680:	10 92 2b 04 	sts	0x042B, r1
	pRRI.max_length = 100;
    4684:	84 e6       	ldi	r24, 0x64	; 100
    4686:	80 93 28 04 	sts	0x0428, r24
	rf_power_up();
    468a:	0e 94 81 02 	call	0x502	; 0x502 <rf_power_up>
	rf_init(&pRRI, 13, 0xFFFF, 0x0);
    468e:	20 e0       	ldi	r18, 0x00	; 0
    4690:	30 e0       	ldi	r19, 0x00	; 0
    4692:	4f ef       	ldi	r20, 0xFF	; 255
    4694:	5f ef       	ldi	r21, 0xFF	; 255
    4696:	6d e0       	ldi	r22, 0x0D	; 13
    4698:	84 e2       	ldi	r24, 0x24	; 36
    469a:	94 e0       	ldi	r25, 0x04	; 4
    469c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <rf_init>
	send_pkt.length = 8;
    46a0:	88 e0       	ldi	r24, 0x08	; 8
    46a2:	80 93 b7 03 	sts	0x03B7, r24
	send_pkt.pPayload = tx_buf;
    46a6:	80 91 00 02 	lds	r24, 0x0200
    46aa:	90 91 01 02 	lds	r25, 0x0201
    46ae:	90 93 b9 03 	sts	0x03B9, r25
    46b2:	80 93 b8 03 	sts	0x03B8, r24
	send_pkt.cca = 0;
    46b6:	10 92 ba 03 	sts	0x03BA, r1
	send_pkt.destAddr = 0;
    46ba:	10 92 b6 03 	sts	0x03B6, r1
    46be:	10 92 b5 03 	sts	0x03B5, r1
	send_pkt.ackRequest = 0;
    46c2:	10 92 bb 03 	sts	0x03BB, r1
	while (1){
		nrk_led_toggle(GREEN_LED);
    46c6:	81 e0       	ldi	r24, 0x01	; 1
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	0e 94 96 0b 	call	0x172c	; 0x172c <nrk_led_toggle>
		rf_tx_packet(&send_pkt);
    46ce:	85 eb       	ldi	r24, 0xB5	; 181
    46d0:	93 e0       	ldi	r25, 0x03	; 3
    46d2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <rf_tx_packet>
    46d6:	c4 e1       	ldi	r28, 0x14	; 20
    46d8:	d0 e0       	ldi	r29, 0x00	; 0
		
		int i;
		for (i=0; i<20; i++){
			nrk_spin_wait_us(50000);
    46da:	80 e5       	ldi	r24, 0x50	; 80
    46dc:	93 ec       	ldi	r25, 0xC3	; 195
    46de:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <nrk_spin_wait_us>
    46e2:	21 97       	sbiw	r28, 0x01	; 1
	while (1){
		nrk_led_toggle(GREEN_LED);
		rf_tx_packet(&send_pkt);
		
		int i;
		for (i=0; i<20; i++){
    46e4:	d1 f7       	brne	.-12     	; 0x46da <main+0x76>
    46e6:	ef cf       	rjmp	.-34     	; 0x46c6 <main+0x62>

000046e8 <vfprintf>:
    46e8:	6f 92       	push	r6
    46ea:	7f 92       	push	r7
    46ec:	8f 92       	push	r8
    46ee:	9f 92       	push	r9
    46f0:	af 92       	push	r10
    46f2:	bf 92       	push	r11
    46f4:	cf 92       	push	r12
    46f6:	df 92       	push	r13
    46f8:	ef 92       	push	r14
    46fa:	ff 92       	push	r15
    46fc:	0f 93       	push	r16
    46fe:	1f 93       	push	r17
    4700:	cf 93       	push	r28
    4702:	df 93       	push	r29
    4704:	cd b7       	in	r28, 0x3d	; 61
    4706:	de b7       	in	r29, 0x3e	; 62
    4708:	2c 97       	sbiw	r28, 0x0c	; 12
    470a:	0f b6       	in	r0, 0x3f	; 63
    470c:	f8 94       	cli
    470e:	de bf       	out	0x3e, r29	; 62
    4710:	0f be       	out	0x3f, r0	; 63
    4712:	cd bf       	out	0x3d, r28	; 61
    4714:	6c 01       	movw	r12, r24
    4716:	5b 01       	movw	r10, r22
    4718:	7a 01       	movw	r14, r20
    471a:	fc 01       	movw	r30, r24
    471c:	17 82       	std	Z+7, r1	; 0x07
    471e:	16 82       	std	Z+6, r1	; 0x06
    4720:	83 81       	ldd	r24, Z+3	; 0x03
    4722:	81 ff       	sbrs	r24, 1
    4724:	0e c1       	rjmp	.+540    	; 0x4942 <vfprintf+0x25a>
    4726:	ce 01       	movw	r24, r28
    4728:	01 96       	adiw	r24, 0x01	; 1
    472a:	4c 01       	movw	r8, r24
    472c:	f6 01       	movw	r30, r12
    472e:	03 81       	ldd	r16, Z+3	; 0x03
    4730:	f5 01       	movw	r30, r10
    4732:	03 fd       	sbrc	r16, 3
    4734:	15 91       	lpm	r17, Z+
    4736:	03 ff       	sbrs	r16, 3
    4738:	11 91       	ld	r17, Z+
    473a:	5f 01       	movw	r10, r30
    473c:	11 23       	and	r17, r17
    473e:	09 f4       	brne	.+2      	; 0x4742 <vfprintf+0x5a>
    4740:	fc c0       	rjmp	.+504    	; 0x493a <vfprintf+0x252>
    4742:	15 32       	cpi	r17, 0x25	; 37
    4744:	49 f4       	brne	.+18     	; 0x4758 <vfprintf+0x70>
    4746:	03 fd       	sbrc	r16, 3
    4748:	15 91       	lpm	r17, Z+
    474a:	03 ff       	sbrs	r16, 3
    474c:	11 91       	ld	r17, Z+
    474e:	5f 01       	movw	r10, r30
    4750:	15 32       	cpi	r17, 0x25	; 37
    4752:	11 f0       	breq	.+4      	; 0x4758 <vfprintf+0x70>
    4754:	20 e0       	ldi	r18, 0x00	; 0
    4756:	1b c0       	rjmp	.+54     	; 0x478e <vfprintf+0xa6>
    4758:	b6 01       	movw	r22, r12
    475a:	81 2f       	mov	r24, r17
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <fputc>
    4762:	37 01       	movw	r6, r14
    4764:	73 01       	movw	r14, r6
    4766:	e2 cf       	rjmp	.-60     	; 0x472c <vfprintf+0x44>
    4768:	11 23       	and	r17, r17
    476a:	09 f4       	brne	.+2      	; 0x476e <vfprintf+0x86>
    476c:	e6 c0       	rjmp	.+460    	; 0x493a <vfprintf+0x252>
    476e:	61 2f       	mov	r22, r17
    4770:	70 e0       	ldi	r23, 0x00	; 0
    4772:	87 e1       	ldi	r24, 0x17	; 23
    4774:	94 e0       	ldi	r25, 0x04	; 4
    4776:	2c 87       	std	Y+12, r18	; 0x0c
    4778:	0e 94 6f 25 	call	0x4ade	; 0x4ade <strchr_P>
    477c:	2c 85       	ldd	r18, Y+12	; 0x0c
    477e:	89 2b       	or	r24, r25
    4780:	49 f0       	breq	.+18     	; 0x4794 <vfprintf+0xac>
    4782:	f5 01       	movw	r30, r10
    4784:	03 fd       	sbrc	r16, 3
    4786:	15 91       	lpm	r17, Z+
    4788:	03 ff       	sbrs	r16, 3
    478a:	11 91       	ld	r17, Z+
    478c:	5f 01       	movw	r10, r30
    478e:	27 ff       	sbrs	r18, 7
    4790:	eb cf       	rjmp	.-42     	; 0x4768 <vfprintf+0x80>
    4792:	09 c0       	rjmp	.+18     	; 0x47a6 <vfprintf+0xbe>
    4794:	13 32       	cpi	r17, 0x23	; 35
    4796:	29 f0       	breq	.+10     	; 0x47a2 <vfprintf+0xba>
    4798:	1c 36       	cpi	r17, 0x6C	; 108
    479a:	09 f0       	breq	.+2      	; 0x479e <vfprintf+0xb6>
    479c:	d5 c0       	rjmp	.+426    	; 0x4948 <vfprintf+0x260>
    479e:	20 68       	ori	r18, 0x80	; 128
    47a0:	f0 cf       	rjmp	.-32     	; 0x4782 <vfprintf+0x9a>
    47a2:	20 e1       	ldi	r18, 0x10	; 16
    47a4:	ee cf       	rjmp	.-36     	; 0x4782 <vfprintf+0x9a>
    47a6:	02 2f       	mov	r16, r18
    47a8:	11 23       	and	r17, r17
    47aa:	09 f4       	brne	.+2      	; 0x47ae <vfprintf+0xc6>
    47ac:	c6 c0       	rjmp	.+396    	; 0x493a <vfprintf+0x252>
    47ae:	61 2f       	mov	r22, r17
    47b0:	70 e0       	ldi	r23, 0x00	; 0
    47b2:	80 e1       	ldi	r24, 0x10	; 16
    47b4:	94 e0       	ldi	r25, 0x04	; 4
    47b6:	2c 87       	std	Y+12, r18	; 0x0c
    47b8:	0e 94 6f 25 	call	0x4ade	; 0x4ade <strchr_P>
    47bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    47be:	89 2b       	or	r24, r25
    47c0:	41 f0       	breq	.+16     	; 0x47d2 <vfprintf+0xea>
    47c2:	37 01       	movw	r6, r14
    47c4:	f4 e0       	ldi	r31, 0x04	; 4
    47c6:	6f 0e       	add	r6, r31
    47c8:	71 1c       	adc	r7, r1
    47ca:	b6 01       	movw	r22, r12
    47cc:	8f e3       	ldi	r24, 0x3F	; 63
    47ce:	90 e0       	ldi	r25, 0x00	; 0
    47d0:	11 c0       	rjmp	.+34     	; 0x47f4 <vfprintf+0x10c>
    47d2:	13 36       	cpi	r17, 0x63	; 99
    47d4:	39 f0       	breq	.+14     	; 0x47e4 <vfprintf+0xfc>
    47d6:	13 37       	cpi	r17, 0x73	; 115
    47d8:	81 f0       	breq	.+32     	; 0x47fa <vfprintf+0x112>
    47da:	13 35       	cpi	r17, 0x53	; 83
    47dc:	19 f5       	brne	.+70     	; 0x4824 <vfprintf+0x13c>
    47de:	02 2f       	mov	r16, r18
    47e0:	01 60       	ori	r16, 0x01	; 1
    47e2:	0b c0       	rjmp	.+22     	; 0x47fa <vfprintf+0x112>
    47e4:	37 01       	movw	r6, r14
    47e6:	82 e0       	ldi	r24, 0x02	; 2
    47e8:	68 0e       	add	r6, r24
    47ea:	71 1c       	adc	r7, r1
    47ec:	b6 01       	movw	r22, r12
    47ee:	f7 01       	movw	r30, r14
    47f0:	80 81       	ld	r24, Z
    47f2:	91 81       	ldd	r25, Z+1	; 0x01
    47f4:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <fputc>
    47f8:	b5 cf       	rjmp	.-150    	; 0x4764 <vfprintf+0x7c>
    47fa:	37 01       	movw	r6, r14
    47fc:	f2 e0       	ldi	r31, 0x02	; 2
    47fe:	6f 0e       	add	r6, r31
    4800:	71 1c       	adc	r7, r1
    4802:	f7 01       	movw	r30, r14
    4804:	e0 80       	ld	r14, Z
    4806:	f1 80       	ldd	r15, Z+1	; 0x01
    4808:	f7 01       	movw	r30, r14
    480a:	00 fd       	sbrc	r16, 0
    480c:	85 91       	lpm	r24, Z+
    480e:	00 ff       	sbrs	r16, 0
    4810:	81 91       	ld	r24, Z+
    4812:	7f 01       	movw	r14, r30
    4814:	88 23       	and	r24, r24
    4816:	09 f4       	brne	.+2      	; 0x481a <vfprintf+0x132>
    4818:	a5 cf       	rjmp	.-182    	; 0x4764 <vfprintf+0x7c>
    481a:	b6 01       	movw	r22, r12
    481c:	90 e0       	ldi	r25, 0x00	; 0
    481e:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <fputc>
    4822:	f2 cf       	rjmp	.-28     	; 0x4808 <vfprintf+0x120>
    4824:	14 36       	cpi	r17, 0x64	; 100
    4826:	11 f0       	breq	.+4      	; 0x482c <vfprintf+0x144>
    4828:	19 36       	cpi	r17, 0x69	; 105
    482a:	29 f5       	brne	.+74     	; 0x4876 <vfprintf+0x18e>
    482c:	37 01       	movw	r6, r14
    482e:	27 ff       	sbrs	r18, 7
    4830:	09 c0       	rjmp	.+18     	; 0x4844 <vfprintf+0x15c>
    4832:	f4 e0       	ldi	r31, 0x04	; 4
    4834:	6f 0e       	add	r6, r31
    4836:	71 1c       	adc	r7, r1
    4838:	f7 01       	movw	r30, r14
    483a:	60 81       	ld	r22, Z
    483c:	71 81       	ldd	r23, Z+1	; 0x01
    483e:	82 81       	ldd	r24, Z+2	; 0x02
    4840:	93 81       	ldd	r25, Z+3	; 0x03
    4842:	0a c0       	rjmp	.+20     	; 0x4858 <vfprintf+0x170>
    4844:	f2 e0       	ldi	r31, 0x02	; 2
    4846:	6f 0e       	add	r6, r31
    4848:	71 1c       	adc	r7, r1
    484a:	f7 01       	movw	r30, r14
    484c:	60 81       	ld	r22, Z
    484e:	71 81       	ldd	r23, Z+1	; 0x01
    4850:	88 27       	eor	r24, r24
    4852:	77 fd       	sbrc	r23, 7
    4854:	80 95       	com	r24
    4856:	98 2f       	mov	r25, r24
    4858:	02 2f       	mov	r16, r18
    485a:	0f 7e       	andi	r16, 0xEF	; 239
    485c:	97 ff       	sbrs	r25, 7
    485e:	08 c0       	rjmp	.+16     	; 0x4870 <vfprintf+0x188>
    4860:	90 95       	com	r25
    4862:	80 95       	com	r24
    4864:	70 95       	com	r23
    4866:	61 95       	neg	r22
    4868:	7f 4f       	sbci	r23, 0xFF	; 255
    486a:	8f 4f       	sbci	r24, 0xFF	; 255
    486c:	9f 4f       	sbci	r25, 0xFF	; 255
    486e:	00 64       	ori	r16, 0x40	; 64
    4870:	2a e0       	ldi	r18, 0x0A	; 10
    4872:	30 e0       	ldi	r19, 0x00	; 0
    4874:	33 c0       	rjmp	.+102    	; 0x48dc <vfprintf+0x1f4>
    4876:	10 37       	cpi	r17, 0x70	; 112
    4878:	99 f0       	breq	.+38     	; 0x48a0 <vfprintf+0x1b8>
    487a:	40 f4       	brcc	.+16     	; 0x488c <vfprintf+0x1a4>
    487c:	18 35       	cpi	r17, 0x58	; 88
    487e:	b1 f0       	breq	.+44     	; 0x48ac <vfprintf+0x1c4>
    4880:	1f 36       	cpi	r17, 0x6F	; 111
    4882:	09 f0       	breq	.+2      	; 0x4886 <vfprintf+0x19e>
    4884:	5a c0       	rjmp	.+180    	; 0x493a <vfprintf+0x252>
    4886:	28 e0       	ldi	r18, 0x08	; 8
    4888:	30 e0       	ldi	r19, 0x00	; 0
    488a:	14 c0       	rjmp	.+40     	; 0x48b4 <vfprintf+0x1cc>
    488c:	15 37       	cpi	r17, 0x75	; 117
    488e:	19 f0       	breq	.+6      	; 0x4896 <vfprintf+0x1ae>
    4890:	18 37       	cpi	r17, 0x78	; 120
    4892:	41 f0       	breq	.+16     	; 0x48a4 <vfprintf+0x1bc>
    4894:	52 c0       	rjmp	.+164    	; 0x493a <vfprintf+0x252>
    4896:	02 2f       	mov	r16, r18
    4898:	0f 7e       	andi	r16, 0xEF	; 239
    489a:	2a e0       	ldi	r18, 0x0A	; 10
    489c:	30 e0       	ldi	r19, 0x00	; 0
    489e:	0a c0       	rjmp	.+20     	; 0x48b4 <vfprintf+0x1cc>
    48a0:	02 2f       	mov	r16, r18
    48a2:	00 61       	ori	r16, 0x10	; 16
    48a4:	04 62       	ori	r16, 0x24	; 36
    48a6:	20 e1       	ldi	r18, 0x10	; 16
    48a8:	30 e0       	ldi	r19, 0x00	; 0
    48aa:	04 c0       	rjmp	.+8      	; 0x48b4 <vfprintf+0x1cc>
    48ac:	02 2f       	mov	r16, r18
    48ae:	04 60       	ori	r16, 0x04	; 4
    48b0:	20 e1       	ldi	r18, 0x10	; 16
    48b2:	32 e0       	ldi	r19, 0x02	; 2
    48b4:	37 01       	movw	r6, r14
    48b6:	07 ff       	sbrs	r16, 7
    48b8:	09 c0       	rjmp	.+18     	; 0x48cc <vfprintf+0x1e4>
    48ba:	f4 e0       	ldi	r31, 0x04	; 4
    48bc:	6f 0e       	add	r6, r31
    48be:	71 1c       	adc	r7, r1
    48c0:	f7 01       	movw	r30, r14
    48c2:	60 81       	ld	r22, Z
    48c4:	71 81       	ldd	r23, Z+1	; 0x01
    48c6:	82 81       	ldd	r24, Z+2	; 0x02
    48c8:	93 81       	ldd	r25, Z+3	; 0x03
    48ca:	08 c0       	rjmp	.+16     	; 0x48dc <vfprintf+0x1f4>
    48cc:	f2 e0       	ldi	r31, 0x02	; 2
    48ce:	6f 0e       	add	r6, r31
    48d0:	71 1c       	adc	r7, r1
    48d2:	f7 01       	movw	r30, r14
    48d4:	60 81       	ld	r22, Z
    48d6:	71 81       	ldd	r23, Z+1	; 0x01
    48d8:	80 e0       	ldi	r24, 0x00	; 0
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	a4 01       	movw	r20, r8
    48de:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <__ultoa_invert>
    48e2:	18 2f       	mov	r17, r24
    48e4:	18 19       	sub	r17, r8
    48e6:	06 ff       	sbrs	r16, 6
    48e8:	05 c0       	rjmp	.+10     	; 0x48f4 <vfprintf+0x20c>
    48ea:	b6 01       	movw	r22, r12
    48ec:	8d e2       	ldi	r24, 0x2D	; 45
    48ee:	90 e0       	ldi	r25, 0x00	; 0
    48f0:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <fputc>
    48f4:	04 ff       	sbrs	r16, 4
    48f6:	15 c0       	rjmp	.+42     	; 0x4922 <vfprintf+0x23a>
    48f8:	fe 01       	movw	r30, r28
    48fa:	e1 0f       	add	r30, r17
    48fc:	f1 1d       	adc	r31, r1
    48fe:	80 81       	ld	r24, Z
    4900:	80 33       	cpi	r24, 0x30	; 48
    4902:	79 f0       	breq	.+30     	; 0x4922 <vfprintf+0x23a>
    4904:	b6 01       	movw	r22, r12
    4906:	80 e3       	ldi	r24, 0x30	; 48
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <fputc>
    490e:	02 ff       	sbrs	r16, 2
    4910:	08 c0       	rjmp	.+16     	; 0x4922 <vfprintf+0x23a>
    4912:	00 72       	andi	r16, 0x20	; 32
    4914:	80 2f       	mov	r24, r16
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	b6 01       	movw	r22, r12
    491a:	88 5a       	subi	r24, 0xA8	; 168
    491c:	9f 4f       	sbci	r25, 0xFF	; 255
    491e:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <fputc>
    4922:	11 50       	subi	r17, 0x01	; 1
    4924:	f4 01       	movw	r30, r8
    4926:	e1 0f       	add	r30, r17
    4928:	f1 1d       	adc	r31, r1
    492a:	80 81       	ld	r24, Z
    492c:	b6 01       	movw	r22, r12
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	0e 94 dc 25 	call	0x4bb8	; 0x4bb8 <fputc>
    4934:	11 11       	cpse	r17, r1
    4936:	f5 cf       	rjmp	.-22     	; 0x4922 <vfprintf+0x23a>
    4938:	15 cf       	rjmp	.-470    	; 0x4764 <vfprintf+0x7c>
    493a:	f6 01       	movw	r30, r12
    493c:	86 81       	ldd	r24, Z+6	; 0x06
    493e:	97 81       	ldd	r25, Z+7	; 0x07
    4940:	05 c0       	rjmp	.+10     	; 0x494c <vfprintf+0x264>
    4942:	8f ef       	ldi	r24, 0xFF	; 255
    4944:	9f ef       	ldi	r25, 0xFF	; 255
    4946:	02 c0       	rjmp	.+4      	; 0x494c <vfprintf+0x264>
    4948:	02 2f       	mov	r16, r18
    494a:	31 cf       	rjmp	.-414    	; 0x47ae <vfprintf+0xc6>
    494c:	2c 96       	adiw	r28, 0x0c	; 12
    494e:	0f b6       	in	r0, 0x3f	; 63
    4950:	f8 94       	cli
    4952:	de bf       	out	0x3e, r29	; 62
    4954:	0f be       	out	0x3f, r0	; 63
    4956:	cd bf       	out	0x3d, r28	; 61
    4958:	df 91       	pop	r29
    495a:	cf 91       	pop	r28
    495c:	1f 91       	pop	r17
    495e:	0f 91       	pop	r16
    4960:	ff 90       	pop	r15
    4962:	ef 90       	pop	r14
    4964:	df 90       	pop	r13
    4966:	cf 90       	pop	r12
    4968:	bf 90       	pop	r11
    496a:	af 90       	pop	r10
    496c:	9f 90       	pop	r9
    496e:	8f 90       	pop	r8
    4970:	7f 90       	pop	r7
    4972:	6f 90       	pop	r6
    4974:	08 95       	ret

00004976 <__muluhisi3>:
    4976:	0e 94 60 25 	call	0x4ac0	; 0x4ac0 <__umulhisi3>
    497a:	a5 9f       	mul	r26, r21
    497c:	90 0d       	add	r25, r0
    497e:	b4 9f       	mul	r27, r20
    4980:	90 0d       	add	r25, r0
    4982:	a4 9f       	mul	r26, r20
    4984:	80 0d       	add	r24, r0
    4986:	91 1d       	adc	r25, r1
    4988:	11 24       	eor	r1, r1
    498a:	08 95       	ret

0000498c <__mulsi3>:
    498c:	db 01       	movw	r26, r22
    498e:	8f 93       	push	r24
    4990:	9f 93       	push	r25
    4992:	0e 94 bb 24 	call	0x4976	; 0x4976 <__muluhisi3>
    4996:	bf 91       	pop	r27
    4998:	af 91       	pop	r26
    499a:	a2 9f       	mul	r26, r18
    499c:	80 0d       	add	r24, r0
    499e:	91 1d       	adc	r25, r1
    49a0:	a3 9f       	mul	r26, r19
    49a2:	90 0d       	add	r25, r0
    49a4:	b2 9f       	mul	r27, r18
    49a6:	90 0d       	add	r25, r0
    49a8:	11 24       	eor	r1, r1
    49aa:	08 95       	ret

000049ac <__udivmodsi4>:
    49ac:	a1 e2       	ldi	r26, 0x21	; 33
    49ae:	1a 2e       	mov	r1, r26
    49b0:	aa 1b       	sub	r26, r26
    49b2:	bb 1b       	sub	r27, r27
    49b4:	fd 01       	movw	r30, r26
    49b6:	0d c0       	rjmp	.+26     	; 0x49d2 <__udivmodsi4_ep>

000049b8 <__udivmodsi4_loop>:
    49b8:	aa 1f       	adc	r26, r26
    49ba:	bb 1f       	adc	r27, r27
    49bc:	ee 1f       	adc	r30, r30
    49be:	ff 1f       	adc	r31, r31
    49c0:	a2 17       	cp	r26, r18
    49c2:	b3 07       	cpc	r27, r19
    49c4:	e4 07       	cpc	r30, r20
    49c6:	f5 07       	cpc	r31, r21
    49c8:	20 f0       	brcs	.+8      	; 0x49d2 <__udivmodsi4_ep>
    49ca:	a2 1b       	sub	r26, r18
    49cc:	b3 0b       	sbc	r27, r19
    49ce:	e4 0b       	sbc	r30, r20
    49d0:	f5 0b       	sbc	r31, r21

000049d2 <__udivmodsi4_ep>:
    49d2:	66 1f       	adc	r22, r22
    49d4:	77 1f       	adc	r23, r23
    49d6:	88 1f       	adc	r24, r24
    49d8:	99 1f       	adc	r25, r25
    49da:	1a 94       	dec	r1
    49dc:	69 f7       	brne	.-38     	; 0x49b8 <__udivmodsi4_loop>
    49de:	60 95       	com	r22
    49e0:	70 95       	com	r23
    49e2:	80 95       	com	r24
    49e4:	90 95       	com	r25
    49e6:	9b 01       	movw	r18, r22
    49e8:	ac 01       	movw	r20, r24
    49ea:	bd 01       	movw	r22, r26
    49ec:	cf 01       	movw	r24, r30
    49ee:	08 95       	ret

000049f0 <__umoddi3>:
    49f0:	68 94       	set
    49f2:	01 c0       	rjmp	.+2      	; 0x49f6 <__udivdi3_umoddi3>

000049f4 <__udivdi3>:
    49f4:	e8 94       	clt

000049f6 <__udivdi3_umoddi3>:
    49f6:	8f 92       	push	r8
    49f8:	9f 92       	push	r9
    49fa:	cf 93       	push	r28
    49fc:	df 93       	push	r29
    49fe:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <__udivmod64>
    4a02:	df 91       	pop	r29
    4a04:	cf 91       	pop	r28
    4a06:	9f 90       	pop	r9
    4a08:	8f 90       	pop	r8
    4a0a:	08 95       	ret

00004a0c <__udivmod64>:
    4a0c:	88 24       	eor	r8, r8
    4a0e:	99 24       	eor	r9, r9
    4a10:	f4 01       	movw	r30, r8
    4a12:	e4 01       	movw	r28, r8
    4a14:	b0 e4       	ldi	r27, 0x40	; 64
    4a16:	9f 93       	push	r25
    4a18:	aa 27       	eor	r26, r26
    4a1a:	9a 15       	cp	r25, r10
    4a1c:	8b 04       	cpc	r8, r11
    4a1e:	9c 04       	cpc	r9, r12
    4a20:	ed 05       	cpc	r30, r13
    4a22:	fe 05       	cpc	r31, r14
    4a24:	cf 05       	cpc	r28, r15
    4a26:	d0 07       	cpc	r29, r16
    4a28:	a1 07       	cpc	r26, r17
    4a2a:	98 f4       	brcc	.+38     	; 0x4a52 <__udivmod64+0x46>
    4a2c:	ad 2f       	mov	r26, r29
    4a2e:	dc 2f       	mov	r29, r28
    4a30:	cf 2f       	mov	r28, r31
    4a32:	fe 2f       	mov	r31, r30
    4a34:	e9 2d       	mov	r30, r9
    4a36:	98 2c       	mov	r9, r8
    4a38:	89 2e       	mov	r8, r25
    4a3a:	98 2f       	mov	r25, r24
    4a3c:	87 2f       	mov	r24, r23
    4a3e:	76 2f       	mov	r23, r22
    4a40:	65 2f       	mov	r22, r21
    4a42:	54 2f       	mov	r21, r20
    4a44:	43 2f       	mov	r20, r19
    4a46:	32 2f       	mov	r19, r18
    4a48:	22 27       	eor	r18, r18
    4a4a:	b8 50       	subi	r27, 0x08	; 8
    4a4c:	31 f7       	brne	.-52     	; 0x4a1a <__udivmod64+0xe>
    4a4e:	bf 91       	pop	r27
    4a50:	27 c0       	rjmp	.+78     	; 0x4aa0 <__udivmod64+0x94>
    4a52:	1b 2e       	mov	r1, r27
    4a54:	bf 91       	pop	r27
    4a56:	bb 27       	eor	r27, r27
    4a58:	22 0f       	add	r18, r18
    4a5a:	33 1f       	adc	r19, r19
    4a5c:	44 1f       	adc	r20, r20
    4a5e:	55 1f       	adc	r21, r21
    4a60:	66 1f       	adc	r22, r22
    4a62:	77 1f       	adc	r23, r23
    4a64:	88 1f       	adc	r24, r24
    4a66:	99 1f       	adc	r25, r25
    4a68:	88 1c       	adc	r8, r8
    4a6a:	99 1c       	adc	r9, r9
    4a6c:	ee 1f       	adc	r30, r30
    4a6e:	ff 1f       	adc	r31, r31
    4a70:	cc 1f       	adc	r28, r28
    4a72:	dd 1f       	adc	r29, r29
    4a74:	aa 1f       	adc	r26, r26
    4a76:	bb 1f       	adc	r27, r27
    4a78:	8a 14       	cp	r8, r10
    4a7a:	9b 04       	cpc	r9, r11
    4a7c:	ec 05       	cpc	r30, r12
    4a7e:	fd 05       	cpc	r31, r13
    4a80:	ce 05       	cpc	r28, r14
    4a82:	df 05       	cpc	r29, r15
    4a84:	a0 07       	cpc	r26, r16
    4a86:	b1 07       	cpc	r27, r17
    4a88:	48 f0       	brcs	.+18     	; 0x4a9c <__udivmod64+0x90>
    4a8a:	8a 18       	sub	r8, r10
    4a8c:	9b 08       	sbc	r9, r11
    4a8e:	ec 09       	sbc	r30, r12
    4a90:	fd 09       	sbc	r31, r13
    4a92:	ce 09       	sbc	r28, r14
    4a94:	df 09       	sbc	r29, r15
    4a96:	a0 0b       	sbc	r26, r16
    4a98:	b1 0b       	sbc	r27, r17
    4a9a:	21 60       	ori	r18, 0x01	; 1
    4a9c:	1a 94       	dec	r1
    4a9e:	e1 f6       	brne	.-72     	; 0x4a58 <__udivmod64+0x4c>
    4aa0:	2e f4       	brtc	.+10     	; 0x4aac <__udivmod64+0xa0>
    4aa2:	94 01       	movw	r18, r8
    4aa4:	af 01       	movw	r20, r30
    4aa6:	be 01       	movw	r22, r28
    4aa8:	cd 01       	movw	r24, r26
    4aaa:	00 0c       	add	r0, r0
    4aac:	08 95       	ret

00004aae <__tablejump2__>:
    4aae:	ee 0f       	add	r30, r30
    4ab0:	ff 1f       	adc	r31, r31
    4ab2:	00 24       	eor	r0, r0
    4ab4:	00 1c       	adc	r0, r0
    4ab6:	0b be       	out	0x3b, r0	; 59
    4ab8:	07 90       	elpm	r0, Z+
    4aba:	f6 91       	elpm	r31, Z
    4abc:	e0 2d       	mov	r30, r0
    4abe:	09 94       	ijmp

00004ac0 <__umulhisi3>:
    4ac0:	a2 9f       	mul	r26, r18
    4ac2:	b0 01       	movw	r22, r0
    4ac4:	b3 9f       	mul	r27, r19
    4ac6:	c0 01       	movw	r24, r0
    4ac8:	a3 9f       	mul	r26, r19
    4aca:	70 0d       	add	r23, r0
    4acc:	81 1d       	adc	r24, r1
    4ace:	11 24       	eor	r1, r1
    4ad0:	91 1d       	adc	r25, r1
    4ad2:	b2 9f       	mul	r27, r18
    4ad4:	70 0d       	add	r23, r0
    4ad6:	81 1d       	adc	r24, r1
    4ad8:	11 24       	eor	r1, r1
    4ada:	91 1d       	adc	r25, r1
    4adc:	08 95       	ret

00004ade <strchr_P>:
    4ade:	fc 01       	movw	r30, r24
    4ae0:	05 90       	lpm	r0, Z+
    4ae2:	06 16       	cp	r0, r22
    4ae4:	21 f0       	breq	.+8      	; 0x4aee <strchr_P+0x10>
    4ae6:	00 20       	and	r0, r0
    4ae8:	d9 f7       	brne	.-10     	; 0x4ae0 <strchr_P+0x2>
    4aea:	c0 01       	movw	r24, r0
    4aec:	08 95       	ret
    4aee:	31 97       	sbiw	r30, 0x01	; 1
    4af0:	cf 01       	movw	r24, r30
    4af2:	08 95       	ret

00004af4 <memcpy>:
    4af4:	fb 01       	movw	r30, r22
    4af6:	dc 01       	movw	r26, r24
    4af8:	02 c0       	rjmp	.+4      	; 0x4afe <memcpy+0xa>
    4afa:	01 90       	ld	r0, Z+
    4afc:	0d 92       	st	X+, r0
    4afe:	41 50       	subi	r20, 0x01	; 1
    4b00:	50 40       	sbci	r21, 0x00	; 0
    4b02:	d8 f7       	brcc	.-10     	; 0x4afa <memcpy+0x6>
    4b04:	08 95       	ret

00004b06 <strncmp>:
    4b06:	fb 01       	movw	r30, r22
    4b08:	dc 01       	movw	r26, r24
    4b0a:	41 50       	subi	r20, 0x01	; 1
    4b0c:	50 40       	sbci	r21, 0x00	; 0
    4b0e:	30 f0       	brcs	.+12     	; 0x4b1c <strncmp+0x16>
    4b10:	8d 91       	ld	r24, X+
    4b12:	01 90       	ld	r0, Z+
    4b14:	80 19       	sub	r24, r0
    4b16:	19 f4       	brne	.+6      	; 0x4b1e <strncmp+0x18>
    4b18:	00 20       	and	r0, r0
    4b1a:	b9 f7       	brne	.-18     	; 0x4b0a <strncmp+0x4>
    4b1c:	88 1b       	sub	r24, r24
    4b1e:	99 0b       	sbc	r25, r25
    4b20:	08 95       	ret

00004b22 <fdevopen>:
    4b22:	0f 93       	push	r16
    4b24:	1f 93       	push	r17
    4b26:	cf 93       	push	r28
    4b28:	df 93       	push	r29
    4b2a:	00 97       	sbiw	r24, 0x00	; 0
    4b2c:	31 f4       	brne	.+12     	; 0x4b3a <fdevopen+0x18>
    4b2e:	61 15       	cp	r22, r1
    4b30:	71 05       	cpc	r23, r1
    4b32:	19 f4       	brne	.+6      	; 0x4b3a <fdevopen+0x18>
    4b34:	80 e0       	ldi	r24, 0x00	; 0
    4b36:	90 e0       	ldi	r25, 0x00	; 0
    4b38:	3a c0       	rjmp	.+116    	; 0x4bae <fdevopen+0x8c>
    4b3a:	8b 01       	movw	r16, r22
    4b3c:	ec 01       	movw	r28, r24
    4b3e:	6e e0       	ldi	r22, 0x0E	; 14
    4b40:	70 e0       	ldi	r23, 0x00	; 0
    4b42:	81 e0       	ldi	r24, 0x01	; 1
    4b44:	90 e0       	ldi	r25, 0x00	; 0
    4b46:	0e 94 02 27 	call	0x4e04	; 0x4e04 <calloc>
    4b4a:	fc 01       	movw	r30, r24
    4b4c:	00 97       	sbiw	r24, 0x00	; 0
    4b4e:	91 f3       	breq	.-28     	; 0x4b34 <fdevopen+0x12>
    4b50:	80 e8       	ldi	r24, 0x80	; 128
    4b52:	83 83       	std	Z+3, r24	; 0x03
    4b54:	01 15       	cp	r16, r1
    4b56:	11 05       	cpc	r17, r1
    4b58:	71 f0       	breq	.+28     	; 0x4b76 <fdevopen+0x54>
    4b5a:	13 87       	std	Z+11, r17	; 0x0b
    4b5c:	02 87       	std	Z+10, r16	; 0x0a
    4b5e:	81 e8       	ldi	r24, 0x81	; 129
    4b60:	83 83       	std	Z+3, r24	; 0x03
    4b62:	80 91 9f 06 	lds	r24, 0x069F
    4b66:	90 91 a0 06 	lds	r25, 0x06A0
    4b6a:	89 2b       	or	r24, r25
    4b6c:	21 f4       	brne	.+8      	; 0x4b76 <fdevopen+0x54>
    4b6e:	f0 93 a0 06 	sts	0x06A0, r31
    4b72:	e0 93 9f 06 	sts	0x069F, r30
    4b76:	20 97       	sbiw	r28, 0x00	; 0
    4b78:	c9 f0       	breq	.+50     	; 0x4bac <fdevopen+0x8a>
    4b7a:	d1 87       	std	Z+9, r29	; 0x09
    4b7c:	c0 87       	std	Z+8, r28	; 0x08
    4b7e:	83 81       	ldd	r24, Z+3	; 0x03
    4b80:	82 60       	ori	r24, 0x02	; 2
    4b82:	83 83       	std	Z+3, r24	; 0x03
    4b84:	80 91 a1 06 	lds	r24, 0x06A1
    4b88:	90 91 a2 06 	lds	r25, 0x06A2
    4b8c:	89 2b       	or	r24, r25
    4b8e:	71 f4       	brne	.+28     	; 0x4bac <fdevopen+0x8a>
    4b90:	f0 93 a2 06 	sts	0x06A2, r31
    4b94:	e0 93 a1 06 	sts	0x06A1, r30
    4b98:	80 91 a3 06 	lds	r24, 0x06A3
    4b9c:	90 91 a4 06 	lds	r25, 0x06A4
    4ba0:	89 2b       	or	r24, r25
    4ba2:	21 f4       	brne	.+8      	; 0x4bac <fdevopen+0x8a>
    4ba4:	f0 93 a4 06 	sts	0x06A4, r31
    4ba8:	e0 93 a3 06 	sts	0x06A3, r30
    4bac:	cf 01       	movw	r24, r30
    4bae:	df 91       	pop	r29
    4bb0:	cf 91       	pop	r28
    4bb2:	1f 91       	pop	r17
    4bb4:	0f 91       	pop	r16
    4bb6:	08 95       	ret

00004bb8 <fputc>:
    4bb8:	0f 93       	push	r16
    4bba:	1f 93       	push	r17
    4bbc:	cf 93       	push	r28
    4bbe:	df 93       	push	r29
    4bc0:	fb 01       	movw	r30, r22
    4bc2:	23 81       	ldd	r18, Z+3	; 0x03
    4bc4:	21 fd       	sbrc	r18, 1
    4bc6:	03 c0       	rjmp	.+6      	; 0x4bce <fputc+0x16>
    4bc8:	8f ef       	ldi	r24, 0xFF	; 255
    4bca:	9f ef       	ldi	r25, 0xFF	; 255
    4bcc:	28 c0       	rjmp	.+80     	; 0x4c1e <fputc+0x66>
    4bce:	22 ff       	sbrs	r18, 2
    4bd0:	16 c0       	rjmp	.+44     	; 0x4bfe <fputc+0x46>
    4bd2:	46 81       	ldd	r20, Z+6	; 0x06
    4bd4:	57 81       	ldd	r21, Z+7	; 0x07
    4bd6:	24 81       	ldd	r18, Z+4	; 0x04
    4bd8:	35 81       	ldd	r19, Z+5	; 0x05
    4bda:	42 17       	cp	r20, r18
    4bdc:	53 07       	cpc	r21, r19
    4bde:	44 f4       	brge	.+16     	; 0x4bf0 <fputc+0x38>
    4be0:	a0 81       	ld	r26, Z
    4be2:	b1 81       	ldd	r27, Z+1	; 0x01
    4be4:	9d 01       	movw	r18, r26
    4be6:	2f 5f       	subi	r18, 0xFF	; 255
    4be8:	3f 4f       	sbci	r19, 0xFF	; 255
    4bea:	31 83       	std	Z+1, r19	; 0x01
    4bec:	20 83       	st	Z, r18
    4bee:	8c 93       	st	X, r24
    4bf0:	26 81       	ldd	r18, Z+6	; 0x06
    4bf2:	37 81       	ldd	r19, Z+7	; 0x07
    4bf4:	2f 5f       	subi	r18, 0xFF	; 255
    4bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf8:	37 83       	std	Z+7, r19	; 0x07
    4bfa:	26 83       	std	Z+6, r18	; 0x06
    4bfc:	10 c0       	rjmp	.+32     	; 0x4c1e <fputc+0x66>
    4bfe:	eb 01       	movw	r28, r22
    4c00:	09 2f       	mov	r16, r25
    4c02:	18 2f       	mov	r17, r24
    4c04:	00 84       	ldd	r0, Z+8	; 0x08
    4c06:	f1 85       	ldd	r31, Z+9	; 0x09
    4c08:	e0 2d       	mov	r30, r0
    4c0a:	09 95       	icall
    4c0c:	89 2b       	or	r24, r25
    4c0e:	e1 f6       	brne	.-72     	; 0x4bc8 <fputc+0x10>
    4c10:	8e 81       	ldd	r24, Y+6	; 0x06
    4c12:	9f 81       	ldd	r25, Y+7	; 0x07
    4c14:	01 96       	adiw	r24, 0x01	; 1
    4c16:	9f 83       	std	Y+7, r25	; 0x07
    4c18:	8e 83       	std	Y+6, r24	; 0x06
    4c1a:	81 2f       	mov	r24, r17
    4c1c:	90 2f       	mov	r25, r16
    4c1e:	df 91       	pop	r29
    4c20:	cf 91       	pop	r28
    4c22:	1f 91       	pop	r17
    4c24:	0f 91       	pop	r16
    4c26:	08 95       	ret

00004c28 <printf>:
    4c28:	cf 93       	push	r28
    4c2a:	df 93       	push	r29
    4c2c:	cd b7       	in	r28, 0x3d	; 61
    4c2e:	de b7       	in	r29, 0x3e	; 62
    4c30:	ae 01       	movw	r20, r28
    4c32:	4b 5f       	subi	r20, 0xFB	; 251
    4c34:	5f 4f       	sbci	r21, 0xFF	; 255
    4c36:	fa 01       	movw	r30, r20
    4c38:	61 91       	ld	r22, Z+
    4c3a:	71 91       	ld	r23, Z+
    4c3c:	af 01       	movw	r20, r30
    4c3e:	80 91 a1 06 	lds	r24, 0x06A1
    4c42:	90 91 a2 06 	lds	r25, 0x06A2
    4c46:	0e 94 74 23 	call	0x46e8	; 0x46e8 <vfprintf>
    4c4a:	df 91       	pop	r29
    4c4c:	cf 91       	pop	r28
    4c4e:	08 95       	ret

00004c50 <putchar>:
    4c50:	60 91 a1 06 	lds	r22, 0x06A1
    4c54:	70 91 a2 06 	lds	r23, 0x06A2
    4c58:	0c 94 dc 25 	jmp	0x4bb8	; 0x4bb8 <fputc>

00004c5c <puts>:
    4c5c:	0f 93       	push	r16
    4c5e:	1f 93       	push	r17
    4c60:	cf 93       	push	r28
    4c62:	df 93       	push	r29
    4c64:	e0 91 a1 06 	lds	r30, 0x06A1
    4c68:	f0 91 a2 06 	lds	r31, 0x06A2
    4c6c:	23 81       	ldd	r18, Z+3	; 0x03
    4c6e:	21 ff       	sbrs	r18, 1
    4c70:	1b c0       	rjmp	.+54     	; 0x4ca8 <puts+0x4c>
    4c72:	8c 01       	movw	r16, r24
    4c74:	d0 e0       	ldi	r29, 0x00	; 0
    4c76:	c0 e0       	ldi	r28, 0x00	; 0
    4c78:	f8 01       	movw	r30, r16
    4c7a:	81 91       	ld	r24, Z+
    4c7c:	8f 01       	movw	r16, r30
    4c7e:	60 91 a1 06 	lds	r22, 0x06A1
    4c82:	70 91 a2 06 	lds	r23, 0x06A2
    4c86:	db 01       	movw	r26, r22
    4c88:	18 96       	adiw	r26, 0x08	; 8
    4c8a:	ed 91       	ld	r30, X+
    4c8c:	fc 91       	ld	r31, X
    4c8e:	19 97       	sbiw	r26, 0x09	; 9
    4c90:	88 23       	and	r24, r24
    4c92:	31 f0       	breq	.+12     	; 0x4ca0 <puts+0x44>
    4c94:	09 95       	icall
    4c96:	89 2b       	or	r24, r25
    4c98:	79 f3       	breq	.-34     	; 0x4c78 <puts+0x1c>
    4c9a:	df ef       	ldi	r29, 0xFF	; 255
    4c9c:	cf ef       	ldi	r28, 0xFF	; 255
    4c9e:	ec cf       	rjmp	.-40     	; 0x4c78 <puts+0x1c>
    4ca0:	8a e0       	ldi	r24, 0x0A	; 10
    4ca2:	09 95       	icall
    4ca4:	89 2b       	or	r24, r25
    4ca6:	19 f0       	breq	.+6      	; 0x4cae <puts+0x52>
    4ca8:	8f ef       	ldi	r24, 0xFF	; 255
    4caa:	9f ef       	ldi	r25, 0xFF	; 255
    4cac:	02 c0       	rjmp	.+4      	; 0x4cb2 <puts+0x56>
    4cae:	8d 2f       	mov	r24, r29
    4cb0:	9c 2f       	mov	r25, r28
    4cb2:	df 91       	pop	r29
    4cb4:	cf 91       	pop	r28
    4cb6:	1f 91       	pop	r17
    4cb8:	0f 91       	pop	r16
    4cba:	08 95       	ret

00004cbc <sprintf>:
    4cbc:	0f 93       	push	r16
    4cbe:	1f 93       	push	r17
    4cc0:	cf 93       	push	r28
    4cc2:	df 93       	push	r29
    4cc4:	cd b7       	in	r28, 0x3d	; 61
    4cc6:	de b7       	in	r29, 0x3e	; 62
    4cc8:	2e 97       	sbiw	r28, 0x0e	; 14
    4cca:	0f b6       	in	r0, 0x3f	; 63
    4ccc:	f8 94       	cli
    4cce:	de bf       	out	0x3e, r29	; 62
    4cd0:	0f be       	out	0x3f, r0	; 63
    4cd2:	cd bf       	out	0x3d, r28	; 61
    4cd4:	0d 89       	ldd	r16, Y+21	; 0x15
    4cd6:	1e 89       	ldd	r17, Y+22	; 0x16
    4cd8:	86 e0       	ldi	r24, 0x06	; 6
    4cda:	8c 83       	std	Y+4, r24	; 0x04
    4cdc:	1a 83       	std	Y+2, r17	; 0x02
    4cde:	09 83       	std	Y+1, r16	; 0x01
    4ce0:	8f ef       	ldi	r24, 0xFF	; 255
    4ce2:	9f e7       	ldi	r25, 0x7F	; 127
    4ce4:	9e 83       	std	Y+6, r25	; 0x06
    4ce6:	8d 83       	std	Y+5, r24	; 0x05
    4ce8:	ae 01       	movw	r20, r28
    4cea:	47 5e       	subi	r20, 0xE7	; 231
    4cec:	5f 4f       	sbci	r21, 0xFF	; 255
    4cee:	6f 89       	ldd	r22, Y+23	; 0x17
    4cf0:	78 8d       	ldd	r23, Y+24	; 0x18
    4cf2:	ce 01       	movw	r24, r28
    4cf4:	01 96       	adiw	r24, 0x01	; 1
    4cf6:	0e 94 74 23 	call	0x46e8	; 0x46e8 <vfprintf>
    4cfa:	2f 81       	ldd	r18, Y+7	; 0x07
    4cfc:	38 85       	ldd	r19, Y+8	; 0x08
    4cfe:	f8 01       	movw	r30, r16
    4d00:	e2 0f       	add	r30, r18
    4d02:	f3 1f       	adc	r31, r19
    4d04:	10 82       	st	Z, r1
    4d06:	2e 96       	adiw	r28, 0x0e	; 14
    4d08:	0f b6       	in	r0, 0x3f	; 63
    4d0a:	f8 94       	cli
    4d0c:	de bf       	out	0x3e, r29	; 62
    4d0e:	0f be       	out	0x3f, r0	; 63
    4d10:	cd bf       	out	0x3d, r28	; 61
    4d12:	df 91       	pop	r29
    4d14:	cf 91       	pop	r28
    4d16:	1f 91       	pop	r17
    4d18:	0f 91       	pop	r16
    4d1a:	08 95       	ret

00004d1c <__ultoa_invert>:
    4d1c:	fa 01       	movw	r30, r20
    4d1e:	aa 27       	eor	r26, r26
    4d20:	28 30       	cpi	r18, 0x08	; 8
    4d22:	51 f1       	breq	.+84     	; 0x4d78 <__ultoa_invert+0x5c>
    4d24:	20 31       	cpi	r18, 0x10	; 16
    4d26:	81 f1       	breq	.+96     	; 0x4d88 <__ultoa_invert+0x6c>
    4d28:	e8 94       	clt
    4d2a:	6f 93       	push	r22
    4d2c:	6e 7f       	andi	r22, 0xFE	; 254
    4d2e:	6e 5f       	subi	r22, 0xFE	; 254
    4d30:	7f 4f       	sbci	r23, 0xFF	; 255
    4d32:	8f 4f       	sbci	r24, 0xFF	; 255
    4d34:	9f 4f       	sbci	r25, 0xFF	; 255
    4d36:	af 4f       	sbci	r26, 0xFF	; 255
    4d38:	b1 e0       	ldi	r27, 0x01	; 1
    4d3a:	3e d0       	rcall	.+124    	; 0x4db8 <__ultoa_invert+0x9c>
    4d3c:	b4 e0       	ldi	r27, 0x04	; 4
    4d3e:	3c d0       	rcall	.+120    	; 0x4db8 <__ultoa_invert+0x9c>
    4d40:	67 0f       	add	r22, r23
    4d42:	78 1f       	adc	r23, r24
    4d44:	89 1f       	adc	r24, r25
    4d46:	9a 1f       	adc	r25, r26
    4d48:	a1 1d       	adc	r26, r1
    4d4a:	68 0f       	add	r22, r24
    4d4c:	79 1f       	adc	r23, r25
    4d4e:	8a 1f       	adc	r24, r26
    4d50:	91 1d       	adc	r25, r1
    4d52:	a1 1d       	adc	r26, r1
    4d54:	6a 0f       	add	r22, r26
    4d56:	71 1d       	adc	r23, r1
    4d58:	81 1d       	adc	r24, r1
    4d5a:	91 1d       	adc	r25, r1
    4d5c:	a1 1d       	adc	r26, r1
    4d5e:	20 d0       	rcall	.+64     	; 0x4da0 <__ultoa_invert+0x84>
    4d60:	09 f4       	brne	.+2      	; 0x4d64 <__ultoa_invert+0x48>
    4d62:	68 94       	set
    4d64:	3f 91       	pop	r19
    4d66:	2a e0       	ldi	r18, 0x0A	; 10
    4d68:	26 9f       	mul	r18, r22
    4d6a:	11 24       	eor	r1, r1
    4d6c:	30 19       	sub	r19, r0
    4d6e:	30 5d       	subi	r19, 0xD0	; 208
    4d70:	31 93       	st	Z+, r19
    4d72:	de f6       	brtc	.-74     	; 0x4d2a <__ultoa_invert+0xe>
    4d74:	cf 01       	movw	r24, r30
    4d76:	08 95       	ret
    4d78:	46 2f       	mov	r20, r22
    4d7a:	47 70       	andi	r20, 0x07	; 7
    4d7c:	40 5d       	subi	r20, 0xD0	; 208
    4d7e:	41 93       	st	Z+, r20
    4d80:	b3 e0       	ldi	r27, 0x03	; 3
    4d82:	0f d0       	rcall	.+30     	; 0x4da2 <__ultoa_invert+0x86>
    4d84:	c9 f7       	brne	.-14     	; 0x4d78 <__ultoa_invert+0x5c>
    4d86:	f6 cf       	rjmp	.-20     	; 0x4d74 <__ultoa_invert+0x58>
    4d88:	46 2f       	mov	r20, r22
    4d8a:	4f 70       	andi	r20, 0x0F	; 15
    4d8c:	40 5d       	subi	r20, 0xD0	; 208
    4d8e:	4a 33       	cpi	r20, 0x3A	; 58
    4d90:	18 f0       	brcs	.+6      	; 0x4d98 <__ultoa_invert+0x7c>
    4d92:	49 5d       	subi	r20, 0xD9	; 217
    4d94:	31 fd       	sbrc	r19, 1
    4d96:	40 52       	subi	r20, 0x20	; 32
    4d98:	41 93       	st	Z+, r20
    4d9a:	02 d0       	rcall	.+4      	; 0x4da0 <__ultoa_invert+0x84>
    4d9c:	a9 f7       	brne	.-22     	; 0x4d88 <__ultoa_invert+0x6c>
    4d9e:	ea cf       	rjmp	.-44     	; 0x4d74 <__ultoa_invert+0x58>
    4da0:	b4 e0       	ldi	r27, 0x04	; 4
    4da2:	a6 95       	lsr	r26
    4da4:	97 95       	ror	r25
    4da6:	87 95       	ror	r24
    4da8:	77 95       	ror	r23
    4daa:	67 95       	ror	r22
    4dac:	ba 95       	dec	r27
    4dae:	c9 f7       	brne	.-14     	; 0x4da2 <__ultoa_invert+0x86>
    4db0:	00 97       	sbiw	r24, 0x00	; 0
    4db2:	61 05       	cpc	r22, r1
    4db4:	71 05       	cpc	r23, r1
    4db6:	08 95       	ret
    4db8:	9b 01       	movw	r18, r22
    4dba:	ac 01       	movw	r20, r24
    4dbc:	0a 2e       	mov	r0, r26
    4dbe:	06 94       	lsr	r0
    4dc0:	57 95       	ror	r21
    4dc2:	47 95       	ror	r20
    4dc4:	37 95       	ror	r19
    4dc6:	27 95       	ror	r18
    4dc8:	ba 95       	dec	r27
    4dca:	c9 f7       	brne	.-14     	; 0x4dbe <__ultoa_invert+0xa2>
    4dcc:	62 0f       	add	r22, r18
    4dce:	73 1f       	adc	r23, r19
    4dd0:	84 1f       	adc	r24, r20
    4dd2:	95 1f       	adc	r25, r21
    4dd4:	a0 1d       	adc	r26, r0
    4dd6:	08 95       	ret

00004dd8 <__eerd_byte_m128rfa1>:
    4dd8:	f9 99       	sbic	0x1f, 1	; 31
    4dda:	fe cf       	rjmp	.-4      	; 0x4dd8 <__eerd_byte_m128rfa1>
    4ddc:	92 bd       	out	0x22, r25	; 34
    4dde:	81 bd       	out	0x21, r24	; 33
    4de0:	f8 9a       	sbi	0x1f, 0	; 31
    4de2:	99 27       	eor	r25, r25
    4de4:	80 b5       	in	r24, 0x20	; 32
    4de6:	08 95       	ret

00004de8 <__eewr_byte_m128rfa1>:
    4de8:	26 2f       	mov	r18, r22

00004dea <__eewr_r18_m128rfa1>:
    4dea:	f9 99       	sbic	0x1f, 1	; 31
    4dec:	fe cf       	rjmp	.-4      	; 0x4dea <__eewr_r18_m128rfa1>
    4dee:	1f ba       	out	0x1f, r1	; 31
    4df0:	92 bd       	out	0x22, r25	; 34
    4df2:	81 bd       	out	0x21, r24	; 33
    4df4:	20 bd       	out	0x20, r18	; 32
    4df6:	0f b6       	in	r0, 0x3f	; 63
    4df8:	f8 94       	cli
    4dfa:	fa 9a       	sbi	0x1f, 2	; 31
    4dfc:	f9 9a       	sbi	0x1f, 1	; 31
    4dfe:	0f be       	out	0x3f, r0	; 63
    4e00:	01 96       	adiw	r24, 0x01	; 1
    4e02:	08 95       	ret

00004e04 <calloc>:
    4e04:	0f 93       	push	r16
    4e06:	1f 93       	push	r17
    4e08:	cf 93       	push	r28
    4e0a:	df 93       	push	r29
    4e0c:	86 9f       	mul	r24, r22
    4e0e:	80 01       	movw	r16, r0
    4e10:	87 9f       	mul	r24, r23
    4e12:	10 0d       	add	r17, r0
    4e14:	96 9f       	mul	r25, r22
    4e16:	10 0d       	add	r17, r0
    4e18:	11 24       	eor	r1, r1
    4e1a:	c8 01       	movw	r24, r16
    4e1c:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <malloc>
    4e20:	ec 01       	movw	r28, r24
    4e22:	00 97       	sbiw	r24, 0x00	; 0
    4e24:	29 f0       	breq	.+10     	; 0x4e30 <calloc+0x2c>
    4e26:	a8 01       	movw	r20, r16
    4e28:	60 e0       	ldi	r22, 0x00	; 0
    4e2a:	70 e0       	ldi	r23, 0x00	; 0
    4e2c:	0e 94 4b 28 	call	0x5096	; 0x5096 <memset>
    4e30:	ce 01       	movw	r24, r28
    4e32:	df 91       	pop	r29
    4e34:	cf 91       	pop	r28
    4e36:	1f 91       	pop	r17
    4e38:	0f 91       	pop	r16
    4e3a:	08 95       	ret

00004e3c <malloc>:
    4e3c:	cf 93       	push	r28
    4e3e:	df 93       	push	r29
    4e40:	82 30       	cpi	r24, 0x02	; 2
    4e42:	91 05       	cpc	r25, r1
    4e44:	10 f4       	brcc	.+4      	; 0x4e4a <malloc+0xe>
    4e46:	82 e0       	ldi	r24, 0x02	; 2
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	e0 91 a7 06 	lds	r30, 0x06A7
    4e4e:	f0 91 a8 06 	lds	r31, 0x06A8
    4e52:	20 e0       	ldi	r18, 0x00	; 0
    4e54:	30 e0       	ldi	r19, 0x00	; 0
    4e56:	c0 e0       	ldi	r28, 0x00	; 0
    4e58:	d0 e0       	ldi	r29, 0x00	; 0
    4e5a:	30 97       	sbiw	r30, 0x00	; 0
    4e5c:	11 f1       	breq	.+68     	; 0x4ea2 <malloc+0x66>
    4e5e:	40 81       	ld	r20, Z
    4e60:	51 81       	ldd	r21, Z+1	; 0x01
    4e62:	48 17       	cp	r20, r24
    4e64:	59 07       	cpc	r21, r25
    4e66:	c0 f0       	brcs	.+48     	; 0x4e98 <malloc+0x5c>
    4e68:	48 17       	cp	r20, r24
    4e6a:	59 07       	cpc	r21, r25
    4e6c:	61 f4       	brne	.+24     	; 0x4e86 <malloc+0x4a>
    4e6e:	82 81       	ldd	r24, Z+2	; 0x02
    4e70:	93 81       	ldd	r25, Z+3	; 0x03
    4e72:	20 97       	sbiw	r28, 0x00	; 0
    4e74:	19 f0       	breq	.+6      	; 0x4e7c <malloc+0x40>
    4e76:	9b 83       	std	Y+3, r25	; 0x03
    4e78:	8a 83       	std	Y+2, r24	; 0x02
    4e7a:	2b c0       	rjmp	.+86     	; 0x4ed2 <malloc+0x96>
    4e7c:	90 93 a8 06 	sts	0x06A8, r25
    4e80:	80 93 a7 06 	sts	0x06A7, r24
    4e84:	26 c0       	rjmp	.+76     	; 0x4ed2 <malloc+0x96>
    4e86:	21 15       	cp	r18, r1
    4e88:	31 05       	cpc	r19, r1
    4e8a:	19 f0       	breq	.+6      	; 0x4e92 <malloc+0x56>
    4e8c:	42 17       	cp	r20, r18
    4e8e:	53 07       	cpc	r21, r19
    4e90:	18 f4       	brcc	.+6      	; 0x4e98 <malloc+0x5c>
    4e92:	9a 01       	movw	r18, r20
    4e94:	be 01       	movw	r22, r28
    4e96:	df 01       	movw	r26, r30
    4e98:	ef 01       	movw	r28, r30
    4e9a:	02 80       	ldd	r0, Z+2	; 0x02
    4e9c:	f3 81       	ldd	r31, Z+3	; 0x03
    4e9e:	e0 2d       	mov	r30, r0
    4ea0:	dc cf       	rjmp	.-72     	; 0x4e5a <malloc+0x1e>
    4ea2:	21 15       	cp	r18, r1
    4ea4:	31 05       	cpc	r19, r1
    4ea6:	09 f1       	breq	.+66     	; 0x4eea <malloc+0xae>
    4ea8:	28 1b       	sub	r18, r24
    4eaa:	39 0b       	sbc	r19, r25
    4eac:	24 30       	cpi	r18, 0x04	; 4
    4eae:	31 05       	cpc	r19, r1
    4eb0:	90 f4       	brcc	.+36     	; 0x4ed6 <malloc+0x9a>
    4eb2:	12 96       	adiw	r26, 0x02	; 2
    4eb4:	8d 91       	ld	r24, X+
    4eb6:	9c 91       	ld	r25, X
    4eb8:	13 97       	sbiw	r26, 0x03	; 3
    4eba:	61 15       	cp	r22, r1
    4ebc:	71 05       	cpc	r23, r1
    4ebe:	21 f0       	breq	.+8      	; 0x4ec8 <malloc+0x8c>
    4ec0:	fb 01       	movw	r30, r22
    4ec2:	93 83       	std	Z+3, r25	; 0x03
    4ec4:	82 83       	std	Z+2, r24	; 0x02
    4ec6:	04 c0       	rjmp	.+8      	; 0x4ed0 <malloc+0x94>
    4ec8:	90 93 a8 06 	sts	0x06A8, r25
    4ecc:	80 93 a7 06 	sts	0x06A7, r24
    4ed0:	fd 01       	movw	r30, r26
    4ed2:	32 96       	adiw	r30, 0x02	; 2
    4ed4:	44 c0       	rjmp	.+136    	; 0x4f5e <malloc+0x122>
    4ed6:	fd 01       	movw	r30, r26
    4ed8:	e2 0f       	add	r30, r18
    4eda:	f3 1f       	adc	r31, r19
    4edc:	81 93       	st	Z+, r24
    4ede:	91 93       	st	Z+, r25
    4ee0:	22 50       	subi	r18, 0x02	; 2
    4ee2:	31 09       	sbc	r19, r1
    4ee4:	2d 93       	st	X+, r18
    4ee6:	3c 93       	st	X, r19
    4ee8:	3a c0       	rjmp	.+116    	; 0x4f5e <malloc+0x122>
    4eea:	20 91 a5 06 	lds	r18, 0x06A5
    4eee:	30 91 a6 06 	lds	r19, 0x06A6
    4ef2:	23 2b       	or	r18, r19
    4ef4:	41 f4       	brne	.+16     	; 0x4f06 <malloc+0xca>
    4ef6:	20 91 14 02 	lds	r18, 0x0214
    4efa:	30 91 15 02 	lds	r19, 0x0215
    4efe:	30 93 a6 06 	sts	0x06A6, r19
    4f02:	20 93 a5 06 	sts	0x06A5, r18
    4f06:	20 91 12 02 	lds	r18, 0x0212
    4f0a:	30 91 13 02 	lds	r19, 0x0213
    4f0e:	21 15       	cp	r18, r1
    4f10:	31 05       	cpc	r19, r1
    4f12:	41 f4       	brne	.+16     	; 0x4f24 <malloc+0xe8>
    4f14:	2d b7       	in	r18, 0x3d	; 61
    4f16:	3e b7       	in	r19, 0x3e	; 62
    4f18:	40 91 16 02 	lds	r20, 0x0216
    4f1c:	50 91 17 02 	lds	r21, 0x0217
    4f20:	24 1b       	sub	r18, r20
    4f22:	35 0b       	sbc	r19, r21
    4f24:	e0 91 a5 06 	lds	r30, 0x06A5
    4f28:	f0 91 a6 06 	lds	r31, 0x06A6
    4f2c:	e2 17       	cp	r30, r18
    4f2e:	f3 07       	cpc	r31, r19
    4f30:	a0 f4       	brcc	.+40     	; 0x4f5a <malloc+0x11e>
    4f32:	2e 1b       	sub	r18, r30
    4f34:	3f 0b       	sbc	r19, r31
    4f36:	28 17       	cp	r18, r24
    4f38:	39 07       	cpc	r19, r25
    4f3a:	78 f0       	brcs	.+30     	; 0x4f5a <malloc+0x11e>
    4f3c:	ac 01       	movw	r20, r24
    4f3e:	4e 5f       	subi	r20, 0xFE	; 254
    4f40:	5f 4f       	sbci	r21, 0xFF	; 255
    4f42:	24 17       	cp	r18, r20
    4f44:	35 07       	cpc	r19, r21
    4f46:	48 f0       	brcs	.+18     	; 0x4f5a <malloc+0x11e>
    4f48:	4e 0f       	add	r20, r30
    4f4a:	5f 1f       	adc	r21, r31
    4f4c:	50 93 a6 06 	sts	0x06A6, r21
    4f50:	40 93 a5 06 	sts	0x06A5, r20
    4f54:	81 93       	st	Z+, r24
    4f56:	91 93       	st	Z+, r25
    4f58:	02 c0       	rjmp	.+4      	; 0x4f5e <malloc+0x122>
    4f5a:	e0 e0       	ldi	r30, 0x00	; 0
    4f5c:	f0 e0       	ldi	r31, 0x00	; 0
    4f5e:	cf 01       	movw	r24, r30
    4f60:	df 91       	pop	r29
    4f62:	cf 91       	pop	r28
    4f64:	08 95       	ret

00004f66 <free>:
    4f66:	0f 93       	push	r16
    4f68:	1f 93       	push	r17
    4f6a:	cf 93       	push	r28
    4f6c:	df 93       	push	r29
    4f6e:	00 97       	sbiw	r24, 0x00	; 0
    4f70:	09 f4       	brne	.+2      	; 0x4f74 <free+0xe>
    4f72:	8c c0       	rjmp	.+280    	; 0x508c <free+0x126>
    4f74:	fc 01       	movw	r30, r24
    4f76:	32 97       	sbiw	r30, 0x02	; 2
    4f78:	13 82       	std	Z+3, r1	; 0x03
    4f7a:	12 82       	std	Z+2, r1	; 0x02
    4f7c:	00 91 a7 06 	lds	r16, 0x06A7
    4f80:	10 91 a8 06 	lds	r17, 0x06A8
    4f84:	01 15       	cp	r16, r1
    4f86:	11 05       	cpc	r17, r1
    4f88:	81 f4       	brne	.+32     	; 0x4faa <free+0x44>
    4f8a:	20 81       	ld	r18, Z
    4f8c:	31 81       	ldd	r19, Z+1	; 0x01
    4f8e:	82 0f       	add	r24, r18
    4f90:	93 1f       	adc	r25, r19
    4f92:	20 91 a5 06 	lds	r18, 0x06A5
    4f96:	30 91 a6 06 	lds	r19, 0x06A6
    4f9a:	28 17       	cp	r18, r24
    4f9c:	39 07       	cpc	r19, r25
    4f9e:	79 f5       	brne	.+94     	; 0x4ffe <free+0x98>
    4fa0:	f0 93 a6 06 	sts	0x06A6, r31
    4fa4:	e0 93 a5 06 	sts	0x06A5, r30
    4fa8:	71 c0       	rjmp	.+226    	; 0x508c <free+0x126>
    4faa:	d8 01       	movw	r26, r16
    4fac:	40 e0       	ldi	r20, 0x00	; 0
    4fae:	50 e0       	ldi	r21, 0x00	; 0
    4fb0:	ae 17       	cp	r26, r30
    4fb2:	bf 07       	cpc	r27, r31
    4fb4:	50 f4       	brcc	.+20     	; 0x4fca <free+0x64>
    4fb6:	12 96       	adiw	r26, 0x02	; 2
    4fb8:	2d 91       	ld	r18, X+
    4fba:	3c 91       	ld	r19, X
    4fbc:	13 97       	sbiw	r26, 0x03	; 3
    4fbe:	ad 01       	movw	r20, r26
    4fc0:	21 15       	cp	r18, r1
    4fc2:	31 05       	cpc	r19, r1
    4fc4:	09 f1       	breq	.+66     	; 0x5008 <free+0xa2>
    4fc6:	d9 01       	movw	r26, r18
    4fc8:	f3 cf       	rjmp	.-26     	; 0x4fb0 <free+0x4a>
    4fca:	9d 01       	movw	r18, r26
    4fcc:	da 01       	movw	r26, r20
    4fce:	33 83       	std	Z+3, r19	; 0x03
    4fd0:	22 83       	std	Z+2, r18	; 0x02
    4fd2:	60 81       	ld	r22, Z
    4fd4:	71 81       	ldd	r23, Z+1	; 0x01
    4fd6:	86 0f       	add	r24, r22
    4fd8:	97 1f       	adc	r25, r23
    4fda:	82 17       	cp	r24, r18
    4fdc:	93 07       	cpc	r25, r19
    4fde:	69 f4       	brne	.+26     	; 0x4ffa <free+0x94>
    4fe0:	ec 01       	movw	r28, r24
    4fe2:	28 81       	ld	r18, Y
    4fe4:	39 81       	ldd	r19, Y+1	; 0x01
    4fe6:	26 0f       	add	r18, r22
    4fe8:	37 1f       	adc	r19, r23
    4fea:	2e 5f       	subi	r18, 0xFE	; 254
    4fec:	3f 4f       	sbci	r19, 0xFF	; 255
    4fee:	31 83       	std	Z+1, r19	; 0x01
    4ff0:	20 83       	st	Z, r18
    4ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff4:	9b 81       	ldd	r25, Y+3	; 0x03
    4ff6:	93 83       	std	Z+3, r25	; 0x03
    4ff8:	82 83       	std	Z+2, r24	; 0x02
    4ffa:	45 2b       	or	r20, r21
    4ffc:	29 f4       	brne	.+10     	; 0x5008 <free+0xa2>
    4ffe:	f0 93 a8 06 	sts	0x06A8, r31
    5002:	e0 93 a7 06 	sts	0x06A7, r30
    5006:	42 c0       	rjmp	.+132    	; 0x508c <free+0x126>
    5008:	13 96       	adiw	r26, 0x03	; 3
    500a:	fc 93       	st	X, r31
    500c:	ee 93       	st	-X, r30
    500e:	12 97       	sbiw	r26, 0x02	; 2
    5010:	ed 01       	movw	r28, r26
    5012:	49 91       	ld	r20, Y+
    5014:	59 91       	ld	r21, Y+
    5016:	9e 01       	movw	r18, r28
    5018:	24 0f       	add	r18, r20
    501a:	35 1f       	adc	r19, r21
    501c:	e2 17       	cp	r30, r18
    501e:	f3 07       	cpc	r31, r19
    5020:	71 f4       	brne	.+28     	; 0x503e <free+0xd8>
    5022:	80 81       	ld	r24, Z
    5024:	91 81       	ldd	r25, Z+1	; 0x01
    5026:	84 0f       	add	r24, r20
    5028:	95 1f       	adc	r25, r21
    502a:	02 96       	adiw	r24, 0x02	; 2
    502c:	11 96       	adiw	r26, 0x01	; 1
    502e:	9c 93       	st	X, r25
    5030:	8e 93       	st	-X, r24
    5032:	82 81       	ldd	r24, Z+2	; 0x02
    5034:	93 81       	ldd	r25, Z+3	; 0x03
    5036:	13 96       	adiw	r26, 0x03	; 3
    5038:	9c 93       	st	X, r25
    503a:	8e 93       	st	-X, r24
    503c:	12 97       	sbiw	r26, 0x02	; 2
    503e:	e0 e0       	ldi	r30, 0x00	; 0
    5040:	f0 e0       	ldi	r31, 0x00	; 0
    5042:	d8 01       	movw	r26, r16
    5044:	12 96       	adiw	r26, 0x02	; 2
    5046:	8d 91       	ld	r24, X+
    5048:	9c 91       	ld	r25, X
    504a:	13 97       	sbiw	r26, 0x03	; 3
    504c:	00 97       	sbiw	r24, 0x00	; 0
    504e:	19 f0       	breq	.+6      	; 0x5056 <free+0xf0>
    5050:	f8 01       	movw	r30, r16
    5052:	8c 01       	movw	r16, r24
    5054:	f6 cf       	rjmp	.-20     	; 0x5042 <free+0xdc>
    5056:	8d 91       	ld	r24, X+
    5058:	9c 91       	ld	r25, X
    505a:	98 01       	movw	r18, r16
    505c:	2e 5f       	subi	r18, 0xFE	; 254
    505e:	3f 4f       	sbci	r19, 0xFF	; 255
    5060:	82 0f       	add	r24, r18
    5062:	93 1f       	adc	r25, r19
    5064:	20 91 a5 06 	lds	r18, 0x06A5
    5068:	30 91 a6 06 	lds	r19, 0x06A6
    506c:	28 17       	cp	r18, r24
    506e:	39 07       	cpc	r19, r25
    5070:	69 f4       	brne	.+26     	; 0x508c <free+0x126>
    5072:	30 97       	sbiw	r30, 0x00	; 0
    5074:	29 f4       	brne	.+10     	; 0x5080 <free+0x11a>
    5076:	10 92 a8 06 	sts	0x06A8, r1
    507a:	10 92 a7 06 	sts	0x06A7, r1
    507e:	02 c0       	rjmp	.+4      	; 0x5084 <free+0x11e>
    5080:	13 82       	std	Z+3, r1	; 0x03
    5082:	12 82       	std	Z+2, r1	; 0x02
    5084:	10 93 a6 06 	sts	0x06A6, r17
    5088:	00 93 a5 06 	sts	0x06A5, r16
    508c:	df 91       	pop	r29
    508e:	cf 91       	pop	r28
    5090:	1f 91       	pop	r17
    5092:	0f 91       	pop	r16
    5094:	08 95       	ret

00005096 <memset>:
    5096:	dc 01       	movw	r26, r24
    5098:	01 c0       	rjmp	.+2      	; 0x509c <memset+0x6>
    509a:	6d 93       	st	X+, r22
    509c:	41 50       	subi	r20, 0x01	; 1
    509e:	50 40       	sbci	r21, 0x00	; 0
    50a0:	e0 f7       	brcc	.-8      	; 0x509a <memset+0x4>
    50a2:	08 95       	ret

000050a4 <_exit>:
    50a4:	f8 94       	cli

000050a6 <__stop_program>:
    50a6:	ff cf       	rjmp	.-2      	; 0x50a6 <__stop_program>
