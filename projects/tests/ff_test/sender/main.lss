
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000190  00800200  0000505c  000050f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000505c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000314  00800390  00800390  00005280  2**0
                  ALLOC
  3 .stab         0000fe94  00000000  00000000  00005280  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008db1  00000000  00000000  00015114  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0001dec5  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  0001ded6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  0001f036  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 14 02 	jmp	0x428	; 0x428 <__ctors_end>
       4:	0c 94 93 21 	jmp	0x4326	; 0x4326 <__vector_1>
       8:	0c 94 c5 21 	jmp	0x438a	; 0x438a <__vector_2>
       c:	0c 94 f7 21 	jmp	0x43ee	; 0x43ee <__vector_3>
      10:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      14:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      18:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      1c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      20:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      24:	0c 94 61 21 	jmp	0x42c2	; 0x42c2 <__vector_9>
      28:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      2c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      30:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      34:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <__vector_13>
      38:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      3c:	0c 94 c0 1f 	jmp	0x3f80	; 0x3f80 <__vector_13>
      40:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      44:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      48:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      4c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      50:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      54:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      58:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      5c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      60:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      64:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__vector_25>
      68:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      6c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      70:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      74:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      78:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      7c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      80:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <__vector_32>
      84:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      88:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      8c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      90:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      94:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      98:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      9c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      a0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      a4:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      a8:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      ac:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      b0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      b4:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      b8:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      bc:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      c0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      c4:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      c8:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      cc:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      d0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      d4:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      d8:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      dc:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      e0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      e4:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__vector_57>
      e8:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__vector_58>
      ec:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__vector_59>
      f0:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__vector_60>
      f4:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__vector_61>
      f8:	0c 94 65 05 	jmp	0xaca	; 0xaca <__vector_62>
      fc:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__vector_63>
     100:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__vector_64>
     104:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     108:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     10c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     110:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     114:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     118:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     11c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     120:	81 08       	sbc	r8, r1
     122:	8e 08       	sbc	r8, r14
     124:	9b 08       	sbc	r9, r11
     126:	a8 08       	sbc	r10, r8
     128:	b5 08       	sbc	r11, r5
     12a:	c2 08       	sbc	r12, r2
     12c:	cf 08       	sbc	r12, r15
     12e:	f2 08       	sbc	r15, r2
     130:	00 09       	sbc	r16, r0
     132:	0e 09       	sbc	r16, r14
     134:	1c 09       	sbc	r17, r12
     136:	2a 09       	sbc	r18, r10
     138:	38 09       	sbc	r19, r8
     13a:	46 09       	sbc	r20, r6
     13c:	69 09       	sbc	r22, r9
     13e:	6b 09       	sbc	r22, r11
     140:	6d 09       	sbc	r22, r13
     142:	6f 09       	sbc	r22, r15
     144:	71 09       	sbc	r23, r1
     146:	73 09       	sbc	r23, r3
     148:	75 09       	sbc	r23, r5
     14a:	94 09       	sbc	r25, r4
     14c:	b7 09       	sbc	r27, r7
     14e:	db 09       	sbc	r29, r11
     150:	fe 09       	sbc	r31, r14
     152:	21 0a       	sbc	r2, r17
     154:	44 0a       	sbc	r4, r20
     156:	67 0a       	sbc	r6, r23
     158:	a1 0a       	sbc	r10, r17
     15a:	ae 0a       	sbc	r10, r30
     15c:	bb 0a       	sbc	r11, r27
     15e:	c8 0a       	sbc	r12, r24
     160:	d5 0a       	sbc	r13, r21
     162:	e2 0a       	sbc	r14, r18
     164:	ef 0a       	sbc	r14, r31
     166:	08 0b       	sbc	r16, r24
     168:	15 0b       	sbc	r17, r21
     16a:	22 0b       	sbc	r18, r18
     16c:	2f 0b       	sbc	r18, r31
     16e:	3c 0b       	sbc	r19, r28
     170:	49 0b       	sbc	r20, r25
     172:	56 0b       	sbc	r21, r22
     174:	2a 0f       	add	r18, r26
     176:	2d 0f       	add	r18, r29
     178:	38 0f       	add	r19, r24
     17a:	3d 0f       	add	r19, r29
     17c:	44 0f       	add	r20, r20
     17e:	4d 0f       	add	r20, r29
     180:	50 0f       	add	r21, r16
     182:	55 0f       	add	r21, r21
     184:	5c 0f       	add	r21, r28
     186:	65 0f       	add	r22, r21
     188:	bb 0f       	add	r27, r27
     18a:	c1 0f       	add	r28, r17
     18c:	c4 0f       	add	r28, r20
     18e:	c7 0f       	add	r28, r23
     190:	ca 0f       	add	r28, r26
     192:	cd 0f       	add	r28, r29
     194:	d3 0f       	add	r29, r19
     196:	d0 0f       	add	r29, r16
     198:	d6 0f       	add	r29, r22
     19a:	d9 0f       	add	r29, r25
     19c:	dc 0f       	add	r29, r28
     19e:	e5 0f       	add	r30, r21
     1a0:	e8 0f       	add	r30, r24
     1a2:	eb 0f       	add	r30, r27
     1a4:	ee 0f       	add	r30, r30
     1a6:	e2 0f       	add	r30, r18
     1a8:	b8 0f       	add	r27, r24
     1aa:	be 0f       	add	r27, r30
     1ac:	f1 0f       	add	r31, r17
     1ae:	f4 0f       	add	r31, r20
     1b0:	df 0f       	add	r29, r31
     1b2:	b5 0f       	add	r27, r21

000001b4 <__trampolines_end>:
     1b4:	75 61       	ori	r23, 0x15	; 21
     1b6:	72 74       	andi	r23, 0x42	; 66
     1b8:	20 72       	andi	r18, 0x20	; 32
     1ba:	78 20       	and	r7, r8
     1bc:	73 69       	ori	r23, 0x93	; 147
     1be:	67 20       	and	r6, r7
     1c0:	66 61       	ori	r22, 0x16	; 22
     1c2:	69 6c       	ori	r22, 0xC9	; 201
     1c4:	65 64       	ori	r22, 0x45	; 69
     1c6:	0d 0a       	sbc	r0, r29
	...

000001c9 <__c.3388>:
     1c9:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000001d0 <__c.3385>:
     1d0:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000001df <__c.3382>:
     1df:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000001f0 <__c.3379>:
     1f0:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     200:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

0000020b <__c.3376>:
     20b:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     21b:	20 53 69 67 6e 61 6c 00                              Signal.

00000223 <__c.3373>:
     223:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     233:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000243 <__c.3370>:
     243:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     253:	72 6f 72 00                                         ror.

00000257 <__c.3367>:
     257:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000268 <__c.3364>:
     268:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     278:	61 72 74 00                                         art.

0000027c <__c.3361>:
     27c:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

0000028b <__c.3358>:
     28b:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     29b:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

000002a6 <__c.3355>:
     2a6:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

000002b2 <__c.3352>:
     2b2:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     2c2:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     2d2:	20 6f 6b 3f 00                                       ok?.

000002d7 <__c.3349>:
     2d7:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2e7:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002f5 <__c.3346>:
     2f5:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     305:	72 74 00                                            rt.

00000308 <__c.3343>:
     308:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     318:	49 44 00                                            ID.

0000031b <__c.3340>:
     31b:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     32b:	20 57 61 6b 65 75 70 00                              Wakeup.

00000333 <__c.3337>:
     333:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     343:	6c 61 74 65 64 00                                   lated.

00000349 <__c.3334>:
     349:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     359:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000364 <__c.3331>:
     364:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     374:	69 6e 74 65 72 00                                   inter.

0000037a <__c.3328>:
     37a:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     38a:	6c 6f 77 00                                         low.

0000038e <__c.3325>:
     38e:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     39e:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     3ae:	6e 6f 75 67 68 21 00                                nough!.

000003b5 <__c.3321>:
     3b5:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     3c5:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     3d5:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     3e5:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

000003f1 <__c.3318>:
     3f1:	29 3a 20 00                                         ): .

000003f5 <__c.3316>:
     3f5:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000401 <__c.3246>:
     401:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000410 <__c.2228>:
     410:	45 46 47 65 66 67 00                                EFGefg.

00000417 <__c.2222>:
     417:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

00000428 <__ctors_end>:
     428:	11 24       	eor	r1, r1
     42a:	1f be       	out	0x3f, r1	; 63
     42c:	cf ef       	ldi	r28, 0xFF	; 255
     42e:	d1 e4       	ldi	r29, 0x41	; 65
     430:	de bf       	out	0x3e, r29	; 62
     432:	cd bf       	out	0x3d, r28	; 61

00000434 <__do_copy_data>:
     434:	13 e0       	ldi	r17, 0x03	; 3
     436:	a0 e0       	ldi	r26, 0x00	; 0
     438:	b2 e0       	ldi	r27, 0x02	; 2
     43a:	ec e5       	ldi	r30, 0x5C	; 92
     43c:	f0 e5       	ldi	r31, 0x50	; 80
     43e:	00 e0       	ldi	r16, 0x00	; 0
     440:	0b bf       	out	0x3b, r16	; 59
     442:	02 c0       	rjmp	.+4      	; 0x448 <__do_copy_data+0x14>
     444:	07 90       	elpm	r0, Z+
     446:	0d 92       	st	X+, r0
     448:	a0 39       	cpi	r26, 0x90	; 144
     44a:	b1 07       	cpc	r27, r17
     44c:	d9 f7       	brne	.-10     	; 0x444 <__do_copy_data+0x10>

0000044e <__do_clear_bss>:
     44e:	16 e0       	ldi	r17, 0x06	; 6
     450:	a0 e9       	ldi	r26, 0x90	; 144
     452:	b3 e0       	ldi	r27, 0x03	; 3
     454:	01 c0       	rjmp	.+2      	; 0x458 <.do_clear_bss_start>

00000456 <.do_clear_bss_loop>:
     456:	1d 92       	st	X+, r1

00000458 <.do_clear_bss_start>:
     458:	a4 3a       	cpi	r26, 0xA4	; 164
     45a:	b1 07       	cpc	r27, r17
     45c:	e1 f7       	brne	.-8      	; 0x456 <.do_clear_bss_loop>
     45e:	0e 94 0c 23 	call	0x4618	; 0x4618 <main>
     462:	0c 94 2c 28 	jmp	0x5058	; 0x5058 <_exit>

00000466 <__bad_interrupt>:
     466:	0c 94 b6 1f 	jmp	0x3f6c	; 0x3f6c <__vector_default>

0000046a <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     46a:	90 91 41 01 	lds	r25, 0x0141
     46e:	9f 71       	andi	r25, 0x1F	; 31
     470:	9f 31       	cpi	r25, 0x1F	; 31
     472:	d9 f3       	breq	.-10     	; 0x46a <rf_cmd>
		continue;
	TRX_STATE = cmd;
     474:	80 93 42 01 	sts	0x0142, r24
     478:	08 95       	ret

0000047a <set_wireless_prog>:
uint8_t reset_val[] = {0x43, 0x15, 0xa6, 0xd9, 0x3d, 0x31, 0x82, 0xf1, 0x8c, 0xa7, 0x4f, 0xc5, 0x99, 0x97, 0x04, 0xac};


void set_wireless_prog(uint8_t val)
{
   wireless_prog = val;
     47a:	80 93 90 03 	sts	0x0390, r24
     47e:	08 95       	ret

00000480 <rf_enable_glossy>:
}

void rf_enable_glossy()
{
	use_glossy = 1;
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	80 93 b4 04 	sts	0x04B4, r24
     486:	08 95       	ret

00000488 <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
     488:	10 92 b4 04 	sts	0x04B4, r1
     48c:	08 95       	ret

0000048e <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     48e:	80 91 41 01 	lds	r24, 0x0141
     492:	8f 71       	andi	r24, 0x1F	; 31
     494:	8f 31       	cpi	r24, 0x1F	; 31
     496:	d9 f3       	breq	.-10     	; 0x48e <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     498:	80 91 41 01 	lds	r24, 0x0141
     49c:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
     49e:	e1 f0       	breq	.+56     	; 0x4d8 <rf_power_down+0x4a>
     4a0:	8f 30       	cpi	r24, 0x0F	; 15
     4a2:	d1 f0       	breq	.+52     	; 0x4d8 <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
     4a4:	80 91 41 01 	lds	r24, 0x0141
     4a8:	8f 71       	andi	r24, 0x1F	; 31
     4aa:	88 30       	cpi	r24, 0x08	; 8
     4ac:	31 f4       	brne	.+12     	; 0x4ba <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
     4ae:	80 91 39 01 	lds	r24, 0x0139
     4b2:	82 60       	ori	r24, 0x02	; 2
     4b4:	80 93 39 01 	sts	0x0139, r24
     4b8:	0b c0       	rjmp	.+22     	; 0x4d0 <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
     4ba:	88 e0       	ldi	r24, 0x08	; 8
     4bc:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
     4c0:	80 91 41 01 	lds	r24, 0x0141
     4c4:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
     4c6:	88 30       	cpi	r24, 0x08	; 8
     4c8:	d9 f7       	brne	.-10     	; 0x4c0 <rf_power_down+0x32>
     4ca:	f1 cf       	rjmp	.-30     	; 0x4ae <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
     4cc:	8f 30       	cpi	r24, 0x0F	; 15
     4ce:	21 f0       	breq	.+8      	; 0x4d8 <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
     4d0:	80 91 41 01 	lds	r24, 0x0141
     4d4:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
     4d6:	d1 f7       	brne	.-12     	; 0x4cc <rf_power_down+0x3e>
     4d8:	08 95       	ret

000004da <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     4da:	80 91 41 01 	lds	r24, 0x0141
     4de:	8f 71       	andi	r24, 0x1F	; 31
     4e0:	8f 31       	cpi	r24, 0x1F	; 31
     4e2:	d9 f3       	breq	.-10     	; 0x4da <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     4e4:	80 91 41 01 	lds	r24, 0x0141
     4e8:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
     4ea:	11 f0       	breq	.+4      	; 0x4f0 <rf_power_up+0x16>
     4ec:	8f 30       	cpi	r24, 0x0F	; 15
     4ee:	51 f4       	brne	.+20     	; 0x504 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
     4f0:	80 91 39 01 	lds	r24, 0x0139
     4f4:	8d 7f       	andi	r24, 0xFD	; 253
     4f6:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
     4fa:	80 91 41 01 	lds	r24, 0x0141
     4fe:	8f 71       	andi	r24, 0x1F	; 31
     500:	88 30       	cpi	r24, 0x08	; 8
     502:	d9 f7       	brne	.-10     	; 0x4fa <rf_power_up+0x20>
     504:	08 95       	ret

00000506 <rf_pll_on>:
	TRX_STATE = cmd;
}

void rf_pll_on()
{
   rf_cmd(PLL_ON);
     506:	89 e0       	ldi	r24, 0x09	; 9
     508:	0c 94 35 02 	jmp	0x46a	; 0x46a <rf_cmd>

0000050c <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
     50c:	e5 e4       	ldi	r30, 0x45	; 69
     50e:	f1 e0       	ldi	r31, 0x01	; 1
     510:	90 81       	ld	r25, Z
     512:	90 7f       	andi	r25, 0xF0	; 240
     514:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
     516:	90 81       	ld	r25, Z
     518:	8f 70       	andi	r24, 0x0F	; 15
     51a:	98 2b       	or	r25, r24
     51c:	90 83       	st	Z, r25
     51e:	08 95       	ret

00000520 <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
     520:	e7 e5       	ldi	r30, 0x57	; 87
     522:	f1 e0       	ldi	r31, 0x01	; 1
     524:	80 81       	ld	r24, Z
     526:	8d 7f       	andi	r24, 0xFD	; 253
     528:	80 83       	st	Z, r24
     52a:	08 95       	ret

0000052c <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
     52c:	e7 e5       	ldi	r30, 0x57	; 87
     52e:	f1 e0       	ldi	r31, 0x01	; 1
     530:	80 81       	ld	r24, Z
     532:	82 60       	ori	r24, 0x02	; 2
     534:	80 83       	st	Z, r24
     536:	08 95       	ret

00000538 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
     538:	ee e6       	ldi	r30, 0x6E	; 110
     53a:	f1 e0       	ldi	r31, 0x01	; 1
     53c:	80 81       	ld	r24, Z
     53e:	8f 7e       	andi	r24, 0xEF	; 239
     540:	80 83       	st	Z, r24
     542:	08 95       	ret

00000544 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
     544:	ee e6       	ldi	r30, 0x6E	; 110
     546:	f1 e0       	ldi	r31, 0x01	; 1
     548:	80 81       	ld	r24, Z
     54a:	80 61       	ori	r24, 0x10	; 16
     54c:	80 83       	st	Z, r24
     54e:	08 95       	ret

00000550 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
     550:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
     554:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
     558:	90 93 be 04 	sts	0x04BE, r25
     55c:	80 93 bd 04 	sts	0x04BD, r24
     560:	08 95       	ret

00000562 <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
     562:	90 93 b8 04 	sts	0x04B8, r25
     566:	80 93 b7 04 	sts	0x04B7, r24
	PHY_CC_CCA &= ~(0x1F);
     56a:	e8 e4       	ldi	r30, 0x48	; 72
     56c:	f1 e0       	ldi	r31, 0x01	; 1
     56e:	80 81       	ld	r24, Z
     570:	80 7e       	andi	r24, 0xE0	; 224
     572:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
     574:	80 81       	ld	r24, Z
     576:	68 2b       	or	r22, r24
     578:	60 83       	st	Z, r22
     57a:	08 95       	ret

0000057c <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
     57c:	90 93 94 03 	sts	0x0394, r25
     580:	80 93 93 03 	sts	0x0393, r24
     584:	08 95       	ret

00000586 <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
     586:	90 93 92 03 	sts	0x0392, r25
     58a:	80 93 91 03 	sts	0x0391, r24
     58e:	08 95       	ret

00000590 <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	fc 01       	movw	r30, r24
     59a:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
     59c:	80 e2       	ldi	r24, 0x20	; 32
     59e:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
     5a2:	80 ec       	ldi	r24, 0xC0	; 192
     5a4:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
     5a8:	60 62       	ori	r22, 0x20	; 32
     5aa:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
     5ae:	85 ec       	ldi	r24, 0xC5	; 197
     5b0:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
     5b4:	87 ea       	ldi	r24, 0xA7	; 167
     5b6:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
     5ba:	80 e8       	ldi	r24, 0x80	; 128
     5bc:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
     5c0:	20 93 60 01 	sts	0x0160, r18
     5c4:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
     5c8:	40 93 62 01 	sts	0x0162, r20
     5cc:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     5d0:	c6 e4       	ldi	r28, 0x46	; 70
     5d2:	d1 e0       	ldi	r29, 0x01	; 1
     5d4:	08 81       	ld	r16, Y
     5d6:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     5d8:	98 81       	ld	r25, Y
     5da:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     5dc:	30 2f       	mov	r19, r16
     5de:	32 95       	swap	r19
     5e0:	36 95       	lsr	r19
     5e2:	37 70       	andi	r19, 0x07	; 7
     5e4:	60 e4       	ldi	r22, 0x40	; 64
     5e6:	36 9f       	mul	r19, r22
     5e8:	80 01       	movw	r16, r0
     5ea:	11 24       	eor	r1, r1
     5ec:	22 95       	swap	r18
     5ee:	26 95       	lsr	r18
     5f0:	23 70       	andi	r18, 0x03	; 3
     5f2:	62 2f       	mov	r22, r18
     5f4:	60 2b       	or	r22, r16
     5f6:	82 95       	swap	r24
     5f8:	86 95       	lsr	r24
     5fa:	83 70       	andi	r24, 0x03	; 3
     5fc:	70 e1       	ldi	r23, 0x10	; 16
     5fe:	87 9f       	mul	r24, r23
     600:	90 01       	movw	r18, r0
     602:	11 24       	eor	r1, r1
     604:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     606:	92 95       	swap	r25
     608:	96 95       	lsr	r25
     60a:	93 70       	andi	r25, 0x03	; 3
     60c:	84 e0       	ldi	r24, 0x04	; 4
     60e:	98 9f       	mul	r25, r24
     610:	b0 01       	movw	r22, r0
     612:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     614:	62 2b       	or	r22, r18
     616:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     61a:	88 81       	ld	r24, Y
     61c:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     61e:	92 95       	swap	r25
     620:	96 95       	lsr	r25
     622:	93 70       	andi	r25, 0x03	; 3
     624:	39 2f       	mov	r19, r25
     626:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     628:	98 2f       	mov	r25, r24
     62a:	92 95       	swap	r25
     62c:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     62e:	93 2b       	or	r25, r19
     630:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
     634:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
   
   /* Enable all radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
     63e:	c7 eb       	ldi	r28, 0xB7	; 183
     640:	d4 e0       	ldi	r29, 0x04	; 4
     642:	f9 83       	std	Y+1, r31	; 0x01
     644:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
     646:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
     648:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
     64a:	5d 83       	std	Y+5, r21	; 0x05
     64c:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
     64e:	bf 83       	std	Y+7, r27	; 0x07
     650:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
     652:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	80 93 d1 04 	sts	0x04D1, r24
   rx_ready = 0;
     65a:	10 92 e8 04 	sts	0x04E8, r1
   tx_done = 0;
     65e:	10 92 c0 04 	sts	0x04C0, r1

	use_glossy = 0;
     662:	10 92 b4 04 	sts	0x04B4, r1

} // rf_init() 
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	08 95       	ret

00000670 <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
     670:	86 e1       	ldi	r24, 0x16	; 22
     672:	0c 94 35 02 	jmp	0x46a	; 0x46a <rf_cmd>

00000676 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
     676:	86 e1       	ldi	r24, 0x16	; 22
     678:	0c 94 35 02 	jmp	0x46a	; 0x46a <rf_cmd>

0000067c <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
   rf_cmd(TRX_OFF);
     67c:	88 e0       	ldi	r24, 0x08	; 8
     67e:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>
   rx_ready = 0;
     682:	10 92 e8 04 	sts	0x04E8, r1
     686:	08 95       	ret

00000688 <rf_tx_packet>:
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------


uint8_t rf_tx_packet(RF_TX_INFO *pRTI)
{
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	fc 01       	movw	r30, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
     692:	80 91 d1 04 	lds	r24, 0x04D1
     696:	81 11       	cpse	r24, r1
     698:	02 c0       	rjmp	.+4      	; 0x69e <rf_tx_packet+0x16>
		return NRK_ERROR;
     69a:	8f ef       	ldi	r24, 0xFF	; 255
     69c:	ab c0       	rjmp	.+342    	; 0x7f4 <rf_tx_packet+0x16c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
     69e:	26 81       	ldd	r18, Z+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     6a0:	80 91 b9 04 	lds	r24, 0x04B9
     6a4:	8f 5f       	subi	r24, 0xFF	; 255
     6a6:	80 93 b9 04 	sts	0x04B9, r24
	machead->fcf = fcf;
     6aa:	90 91 81 01 	lds	r25, 0x0181
     6ae:	90 7e       	andi	r25, 0xE0	; 224
     6b0:	91 60       	ori	r25, 0x01	; 1
     6b2:	20 fb       	bst	r18, 0
     6b4:	95 f9       	bld	r25, 5
     6b6:	9f 73       	andi	r25, 0x3F	; 63
     6b8:	90 64       	ori	r25, 0x40	; 64
     6ba:	90 93 81 01 	sts	0x0181, r25
     6be:	88 e8       	ldi	r24, 0x88	; 136
     6c0:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
     6c4:	80 91 b4 04 	lds	r24, 0x04B4
     6c8:	88 23       	and	r24, r24
     6ca:	61 f0       	breq	.+24     	; 0x6e4 <rf_tx_packet+0x5c>
		machead->seq_num = 0xFF;
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
     6d2:	8a ea       	ldi	r24, 0xAA	; 170
     6d4:	9a ea       	ldi	r25, 0xAA	; 170
     6d6:	90 93 89 01 	sts	0x0189, r25
     6da:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
     6de:	8f ef       	ldi	r24, 0xFF	; 255
     6e0:	9f ef       	ldi	r25, 0xFF	; 255
     6e2:	10 c0       	rjmp	.+32     	; 0x704 <rf_tx_packet+0x7c>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
     6e4:	80 91 b9 04 	lds	r24, 0x04B9
     6e8:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
     6ec:	20 91 61 01 	lds	r18, 0x0161
     6f0:	80 91 60 01 	lds	r24, 0x0160
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	92 2b       	or	r25, r18
     6f8:	90 93 89 01 	sts	0x0189, r25
     6fc:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = pRTI->destAddr;
     700:	80 81       	ld	r24, Z
     702:	91 81       	ldd	r25, Z+1	; 0x01
     704:	90 93 87 01 	sts	0x0187, r25
     708:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
     70c:	20 91 63 01 	lds	r18, 0x0163
     710:	80 91 62 01 	lds	r24, 0x0162
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	92 2b       	or	r25, r18
     718:	90 93 85 01 	sts	0x0185, r25
     71c:	80 93 84 01 	sts	0x0184, r24
     720:	8f 01       	movw	r16, r30
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
     722:	42 81       	ldd	r20, Z+2	; 0x02
     724:	55 27       	eor	r21, r21
     726:	47 fd       	sbrc	r20, 7
     728:	50 95       	com	r21
     72a:	63 81       	ldd	r22, Z+3	; 0x03
     72c:	74 81       	ldd	r23, Z+4	; 0x04
     72e:	8a e8       	ldi	r24, 0x8A	; 138
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
     736:	f8 01       	movw	r30, r16
     738:	82 81       	ldd	r24, Z+2	; 0x02
     73a:	85 5f       	subi	r24, 0xF5	; 245
     73c:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     740:	80 91 41 01 	lds	r24, 0x0141
     744:	d8 2f       	mov	r29, r24
     746:	df 71       	andi	r29, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     748:	9f ef       	ldi	r25, 0xFF	; 255
     74a:	9d 0f       	add	r25, r29
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     74c:	92 30       	cpi	r25, 0x02	; 2
     74e:	c0 f3       	brcs	.-16     	; 0x740 <rf_tx_packet+0xb8>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     750:	d1 31       	cpi	r29, 0x11	; 17
     752:	b1 f3       	breq	.-20     	; 0x740 <rf_tx_packet+0xb8>
     754:	d2 31       	cpi	r29, 0x12	; 18
     756:	a1 f3       	breq	.-24     	; 0x740 <rf_tx_packet+0xb8>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     758:	df 31       	cpi	r29, 0x1F	; 31
     75a:	91 f3       	breq	.-28     	; 0x740 <rf_tx_packet+0xb8>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     75c:	98 ef       	ldi	r25, 0xF8	; 248
     75e:	9d 0f       	add	r25, r29
     760:	92 30       	cpi	r25, 0x02	; 2
     762:	20 f0       	brcs	.+8      	; 0x76c <rf_tx_packet+0xe4>
     764:	8f 70       	andi	r24, 0x0F	; 15
     766:	86 30       	cpi	r24, 0x06	; 6
     768:	09 f0       	breq	.+2      	; 0x76c <rf_tx_packet+0xe4>
     76a:	97 cf       	rjmp	.-210    	; 0x69a <rf_tx_packet+0x12>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
     76c:	86 e1       	ldi	r24, 0x16	; 22
     76e:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
     772:	f8 01       	movw	r30, r16
     774:	85 81       	ldd	r24, Z+5	; 0x05
     776:	81 11       	cpse	r24, r1
     778:	0b c0       	rjmp	.+22     	; 0x790 <rf_tx_packet+0x108>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
     77a:	89 e0       	ldi	r24, 0x09	; 9
     77c:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>
	if(pRTI->ackRequest)
     780:	f8 01       	movw	r30, r16
     782:	86 81       	ldd	r24, Z+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	91 f0       	breq	.+36     	; 0x7ac <rf_tx_packet+0x124>
		rf_cmd(TX_ARET_ON);
     788:	89 e1       	ldi	r24, 0x19	; 25
     78a:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>
     78e:	0e c0       	rjmp	.+28     	; 0x7ac <rf_tx_packet+0x124>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
     790:	80 91 48 01 	lds	r24, 0x0148
     794:	80 68       	ori	r24, 0x80	; 128
     796:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
     79a:	80 91 41 01 	lds	r24, 0x0141
     79e:	87 ff       	sbrs	r24, 7
     7a0:	fc cf       	rjmp	.-8      	; 0x79a <rf_tx_packet+0x112>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
     7a2:	80 91 41 01 	lds	r24, 0x0141
     7a6:	86 ff       	sbrs	r24, 6
     7a8:	78 cf       	rjmp	.-272    	; 0x69a <rf_tx_packet+0x12>
     7aa:	e7 cf       	rjmp	.-50     	; 0x77a <rf_tx_packet+0xf2>
	
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

   tx_done = 0;
     7ac:	10 92 c0 04 	sts	0x04C0, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>
   for(i=0; (i<65000) && !tx_done; i++){
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	20 91 c0 04 	lds	r18, 0x04C0
     7be:	21 11       	cpse	r18, r1
     7c0:	05 c0       	rjmp	.+10     	; 0x7cc <rf_tx_packet+0x144>
     7c2:	01 96       	adiw	r24, 0x01	; 1
     7c4:	88 3e       	cpi	r24, 0xE8	; 232
     7c6:	fd ef       	ldi	r31, 0xFD	; 253
     7c8:	9f 07       	cpc	r25, r31
     7ca:	b9 f7       	brne	.-18     	; 0x7ba <rf_tx_packet+0x132>
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     7cc:	f8 01       	movw	r30, r16
     7ce:	26 81       	ldd	r18, Z+6	; 0x06
     7d0:	22 23       	and	r18, r18
     7d2:	31 f0       	breq	.+12     	; 0x7e0 <rf_tx_packet+0x158>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
     7d4:	20 91 42 01 	lds	r18, 0x0142
     7d8:	22 95       	swap	r18
     7da:	26 95       	lsr	r18
     7dc:	27 70       	andi	r18, 0x07	; 7
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     7de:	29 f4       	brne	.+10     	; 0x7ea <rf_tx_packet+0x162>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
     7e0:	88 3e       	cpi	r24, 0xE8	; 232
     7e2:	9d 4f       	sbci	r25, 0xFD	; 253
     7e4:	11 f0       	breq	.+4      	; 0x7ea <rf_tx_packet+0x162>
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     7e6:	c1 e0       	ldi	r28, 0x01	; 1
     7e8:	01 c0       	rjmp	.+2      	; 0x7ec <rf_tx_packet+0x164>
     7ea:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
     7ec:	8d 2f       	mov	r24, r29
     7ee:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
     7f2:	8c 2f       	mov	r24, r28
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	08 95       	ret

000007fe <rf_tx_pkt_blocking>:

uint8_t rf_tx_pkt_blocking(RF_TX_INFO *pRTI)
{
	uint16_t count = 0;
	rf_tx_packet(pRTI);
     7fe:	0e 94 44 03 	call	0x688	; 0x688 <rf_tx_packet>
	while (!tx_done){
     802:	89 e8       	ldi	r24, 0x89	; 137
     804:	93 e1       	ldi	r25, 0x13	; 19
     806:	20 91 c0 04 	lds	r18, 0x04C0
     80a:	21 11       	cpse	r18, r1
     80c:	04 c0       	rjmp	.+8      	; 0x816 <rf_tx_pkt_blocking+0x18>
     80e:	01 97       	sbiw	r24, 0x01	; 1
		count += 1;
		if (count > 5000)//~1ms timeout
     810:	d1 f7       	brne	.-12     	; 0x806 <rf_tx_pkt_blocking+0x8>
			return NRK_ERROR;
     812:	8f ef       	ldi	r24, 0xFF	; 255
	}
	return NRK_OK;
}
     814:	08 95       	ret
	while (!tx_done){
		count += 1;
		if (count > 5000)//~1ms timeout
			return NRK_ERROR;
	}
	return NRK_OK;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	08 95       	ret

0000081a <rf_tx_packet_resend>:
uint8_t rf_tx_packet_resend()
{
   uint8_t trx_error;
   uint16_t i;

   tx_done = 0;
     81a:	10 92 c0 04 	sts	0x04C0, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>
     824:	88 ee       	ldi	r24, 0xE8	; 232
     826:	9d ef       	ldi	r25, 0xFD	; 253
   for(i=0; (i<65000) && !tx_done; i++)
     828:	20 91 c0 04 	lds	r18, 0x04C0
     82c:	21 11       	cpse	r18, r1
     82e:	04 c0       	rjmp	.+8      	; 0x838 <rf_tx_packet_resend+0x1e>
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	d1 f7       	brne	.-12     	; 0x828 <rf_tx_packet_resend+0xe>
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
     834:	8f ef       	ldi	r24, 0xFF	; 255

   return trx_error;
}
     836:	08 95       	ret
   tx_done = 0;
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
   for(i=0; (i<65000) && !tx_done; i++)
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	08 95       	ret

0000083c <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
     840:	80 91 d1 04 	lds	r24, 0x04D1
     844:	88 23       	and	r24, r24
     846:	41 f1       	breq	.+80     	; 0x898 <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     848:	80 91 41 01 	lds	r24, 0x0141
     84c:	c8 2f       	mov	r28, r24
     84e:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     850:	9f ef       	ldi	r25, 0xFF	; 255
     852:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     854:	92 30       	cpi	r25, 0x02	; 2
     856:	c0 f3       	brcs	.-16     	; 0x848 <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     858:	c1 31       	cpi	r28, 0x11	; 17
     85a:	b1 f3       	breq	.-20     	; 0x848 <rf_cca_check+0xc>
     85c:	c2 31       	cpi	r28, 0x12	; 18
     85e:	a1 f3       	breq	.-24     	; 0x848 <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     860:	cf 31       	cpi	r28, 0x1F	; 31
     862:	91 f3       	breq	.-28     	; 0x848 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     864:	c8 30       	cpi	r28, 0x08	; 8
     866:	19 f0       	breq	.+6      	; 0x86e <rf_cca_check+0x32>
     868:	8f 70       	andi	r24, 0x0F	; 15
     86a:	86 30       	cpi	r24, 0x06	; 6
     86c:	a9 f4       	brne	.+42     	; 0x898 <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
     86e:	86 e1       	ldi	r24, 0x16	; 22
     870:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
     874:	80 91 48 01 	lds	r24, 0x0148
     878:	80 68       	ori	r24, 0x80	; 128
     87a:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
     87e:	80 91 41 01 	lds	r24, 0x0141
     882:	87 ff       	sbrs	r24, 7
     884:	fc cf       	rjmp	.-8      	; 0x87e <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     886:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
     88a:	8c 2f       	mov	r24, r28
     88c:	0e 94 35 02 	call	0x46a	; 0x46a <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     890:	d6 fb       	bst	r29, 6
     892:	88 27       	eor	r24, r24
     894:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
     896:	01 c0       	rjmp	.+2      	; 0x89a <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
     898:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready){
     8a0:	80 91 d1 04 	lds	r24, 0x04D1
     8a4:	81 11       	cpse	r24, r1
     8a6:	03 c0       	rjmp	.+6      	; 0x8ae <rf_rx_packet_nonblock+0xe>
		printf("rf not ready\r\n");
     8a8:	81 e7       	ldi	r24, 0x71	; 113
     8aa:	92 e0       	ldi	r25, 0x02	; 2
     8ac:	1b c0       	rjmp	.+54     	; 0x8e4 <rf_rx_packet_nonblock+0x44>
		return NRK_ERROR;
	}
   if(!rx_ready){
     8ae:	80 91 e8 04 	lds	r24, 0x04E8
     8b2:	81 11       	cpse	r24, r1
     8b4:	06 c0       	rjmp	.+12     	; 0x8c2 <rf_rx_packet_nonblock+0x22>
	   printf("rx not ready\r\n");
     8b6:	8f e7       	ldi	r24, 0x7F	; 127
     8b8:	92 e0       	ldi	r25, 0x02	; 2
     8ba:	0e 94 08 26 	call	0x4c10	; 0x4c10 <puts>
      return 0;
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	08 95       	ret
   }
   else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length){
     8c2:	80 91 7b 01 	lds	r24, 0x017B
     8c6:	e0 91 b7 04 	lds	r30, 0x04B7
     8ca:	f0 91 b8 04 	lds	r31, 0x04B8
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	02 97       	sbiw	r24, 0x02	; 2
     8d2:	24 81       	ldd	r18, Z+4	; 0x04
     8d4:	33 27       	eor	r19, r19
     8d6:	27 fd       	sbrc	r18, 7
     8d8:	30 95       	com	r19
     8da:	28 17       	cp	r18, r24
     8dc:	39 07       	cpc	r19, r25
     8de:	34 f4       	brge	.+12     	; 0x8ec <rf_rx_packet_nonblock+0x4c>
	   	printf("length too great\r\n");
     8e0:	8d e8       	ldi	r24, 0x8D	; 141
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	0e 94 08 26 	call	0x4c10	; 0x4c10 <puts>
		return NRK_ERROR;
     8e8:	8f ef       	ldi	r24, 0xFF	; 255
     8ea:	08 95       	ret
	}

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
     8ec:	e0 91 b7 04 	lds	r30, 0x04B7
     8f0:	f0 91 b8 04 	lds	r31, 0x04B8
     8f4:	80 91 82 01 	lds	r24, 0x0182
     8f8:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
     8fa:	e0 91 b7 04 	lds	r30, 0x04B7
     8fe:	f0 91 b8 04 	lds	r31, 0x04B8
     902:	80 91 87 01 	lds	r24, 0x0187
     906:	90 91 88 01 	lds	r25, 0x0188
     90a:	92 83       	std	Z+2, r25	; 0x02
     90c:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
     90e:	e0 91 b7 04 	lds	r30, 0x04B7
     912:	f0 91 b8 04 	lds	r31, 0x04B8
     916:	80 91 7b 01 	lds	r24, 0x017B
     91a:	8b 50       	subi	r24, 0x0B	; 11
     91c:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
     91e:	a0 91 b7 04 	lds	r26, 0x04B7
     922:	b0 91 b8 04 	lds	r27, 0x04B8
     926:	e0 91 b7 04 	lds	r30, 0x04B7
     92a:	f0 91 b8 04 	lds	r31, 0x04B8
     92e:	13 96       	adiw	r26, 0x03	; 3
     930:	9c 91       	ld	r25, X
     932:	84 81       	ldd	r24, Z+4	; 0x04
     934:	89 17       	cp	r24, r25
     936:	3c f0       	brlt	.+14     	; 0x946 <rf_rx_packet_nonblock+0xa6>
			|| (rfSettings.pRxInfo->length < 0)){
     938:	e0 91 b7 04 	lds	r30, 0x04B7
     93c:	f0 91 b8 04 	lds	r31, 0x04B8
     940:	83 81       	ldd	r24, Z+3	; 0x03
     942:	87 ff       	sbrs	r24, 7
     944:	0f c0       	rjmp	.+30     	; 0x964 <rf_rx_packet_nonblock+0xc4>
		rx_ready = 0;
     946:	10 92 e8 04 	sts	0x04E8, r1
      	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     94a:	80 91 4c 01 	lds	r24, 0x014C
     94e:	8f 77       	andi	r24, 0x7F	; 127
     950:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     954:	80 91 4c 01 	lds	r24, 0x014C
     958:	80 68       	ori	r24, 0x80	; 128
     95a:	80 93 4c 01 	sts	0x014C, r24
		printf("incorrect length setting in rf settings\r\n");
     95e:	8f e9       	ldi	r24, 0x9F	; 159
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	c0 cf       	rjmp	.-128    	; 0x8e4 <rf_rx_packet_nonblock+0x44>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
     964:	a0 91 b7 04 	lds	r26, 0x04B7
     968:	b0 91 b8 04 	lds	r27, 0x04B8
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		printf("incorrect length setting in rf settings\r\n");
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
     96c:	e0 91 b7 04 	lds	r30, 0x04B7
     970:	f0 91 b8 04 	lds	r31, 0x04B8
     974:	13 96       	adiw	r26, 0x03	; 3
     976:	4c 91       	ld	r20, X
     978:	55 27       	eor	r21, r21
     97a:	47 fd       	sbrc	r20, 7
     97c:	50 95       	com	r21
     97e:	69 e8       	ldi	r22, 0x89	; 137
     980:	71 e0       	ldi	r23, 0x01	; 1
     982:	85 81       	ldd	r24, Z+5	; 0x05
     984:	96 81       	ldd	r25, Z+6	; 0x06
     986:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);

   /* if reset packet received, perform reset */
   if(wireless_prog && (rfSettings.pRxInfo->length == 16)){
     98a:	80 91 90 03 	lds	r24, 0x0390
     98e:	88 23       	and	r24, r24
     990:	09 f4       	brne	.+2      	; 0x994 <rf_rx_packet_nonblock+0xf4>
     992:	3e c0       	rjmp	.+124    	; 0xa10 <rf_rx_packet_nonblock+0x170>
     994:	e0 91 b7 04 	lds	r30, 0x04B7
     998:	f0 91 b8 04 	lds	r31, 0x04B8
     99c:	83 81       	ldd	r24, Z+3	; 0x03
     99e:	80 31       	cpi	r24, 0x10	; 16
     9a0:	b9 f5       	brne	.+110    	; 0xa10 <rf_rx_packet_nonblock+0x170>
      if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 4) == 0){
     9a2:	e0 91 b7 04 	lds	r30, 0x04B7
     9a6:	f0 91 b8 04 	lds	r31, 0x04B8
     9aa:	65 81       	ldd	r22, Z+5	; 0x05
     9ac:	76 81       	ldd	r23, Z+6	; 0x06
     9ae:	44 e0       	ldi	r20, 0x04	; 4
     9b0:	50 e0       	ldi	r21, 0x00	; 0
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	92 e0       	ldi	r25, 0x02	; 2
     9b6:	0e 94 5d 25 	call	0x4aba	; 0x4aba <strncmp>
     9ba:	89 2b       	or	r24, r25
     9bc:	49 f5       	brne	.+82     	; 0xa10 <rf_rx_packet_nonblock+0x170>
         if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 16) == 0){
     9be:	e0 91 b7 04 	lds	r30, 0x04B7
     9c2:	f0 91 b8 04 	lds	r31, 0x04B8
     9c6:	65 81       	ldd	r22, Z+5	; 0x05
     9c8:	76 81       	ldd	r23, Z+6	; 0x06
     9ca:	40 e1       	ldi	r20, 0x10	; 16
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	82 e0       	ldi	r24, 0x02	; 2
     9d0:	92 e0       	ldi	r25, 0x02	; 2
     9d2:	0e 94 5d 25 	call	0x4aba	; 0x4aba <strncmp>
     9d6:	89 2b       	or	r24, r25
     9d8:	d9 f4       	brne	.+54     	; 0xa10 <rf_rx_packet_nonblock+0x170>
            wdt_enable(WDTO_500MS);
     9da:	9d e0       	ldi	r25, 0x0D	; 13
     9dc:	88 e1       	ldi	r24, 0x18	; 24
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	a8 95       	wdr
     9e4:	80 93 60 00 	sts	0x0060, r24
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	90 93 60 00 	sts	0x0060, r25
            nrk_led_set(0);
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 9e 0b 	call	0x173c	; 0x173c <nrk_led_set>
            nrk_led_set(1);
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 9e 0b 	call	0x173c	; 0x173c <nrk_led_set>
            nrk_led_set(2);
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 9e 0b 	call	0x173c	; 0x173c <nrk_led_set>
            nrk_led_set(3);
     a06:	83 e0       	ldi	r24, 0x03	; 3
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 9e 0b 	call	0x173c	; 0x173c <nrk_led_set>
            while(1)
               continue;
     a0e:	ff cf       	rjmp	.-2      	; 0xa0e <rf_rx_packet_nonblock+0x16e>
      }
   }

	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
     a10:	e0 91 b7 04 	lds	r30, 0x04B7
     a14:	f0 91 b8 04 	lds	r31, 0x04B8
     a18:	80 91 80 01 	lds	r24, 0x0180
     a1c:	85 fb       	bst	r24, 5
     a1e:	88 27       	eor	r24, r24
     a20:	80 f9       	bld	r24, 0
     a22:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
     a24:	e0 91 b7 04 	lds	r30, 0x04B7
     a28:	f0 91 b8 04 	lds	r31, 0x04B8
     a2c:	80 91 47 01 	lds	r24, 0x0147
     a30:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
     a32:	e0 91 b7 04 	lds	r30, 0x04B7
     a36:	f0 91 b8 04 	lds	r31, 0x04B8
     a3a:	80 91 46 01 	lds	r24, 0x0146
     a3e:	86 95       	lsr	r24
     a40:	86 95       	lsr	r24
     a42:	86 95       	lsr	r24
     a44:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
     a46:	e0 91 b7 04 	lds	r30, 0x04B7
     a4a:	f0 91 b8 04 	lds	r31, 0x04B8
     a4e:	80 91 47 01 	lds	r24, 0x0147
     a52:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
     a54:	a0 91 b7 04 	lds	r26, 0x04B7
     a58:	b0 91 b8 04 	lds	r27, 0x04B8
     a5c:	e0 91 7b 01 	lds	r30, 0x017B
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	e0 58       	subi	r30, 0x80	; 128
     a64:	fe 4f       	sbci	r31, 0xFE	; 254
     a66:	80 81       	ld	r24, Z
     a68:	1b 96       	adiw	r26, 0x0b	; 11
     a6a:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
     a6c:	10 92 e8 04 	sts	0x04E8, r1
   TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     a70:	80 91 4c 01 	lds	r24, 0x014C
     a74:	8f 77       	andi	r24, 0x7F	; 127
     a76:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     a7a:	80 91 4c 01 	lds	r24, 0x014C
     a7e:	80 68       	ori	r24, 0x80	; 128
     a80:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
     a84:	81 e0       	ldi	r24, 0x01	; 1
}
     a86:	08 95       	ret

00000a88 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
     a88:	1f 92       	push	r1
     a8a:	0f 92       	push	r0
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	0f 92       	push	r0
     a90:	11 24       	eor	r1, r1
     a92:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
     a94:	80 e8       	ldi	r24, 0x80	; 128
     a96:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     a9a:	8f 91       	pop	r24
     a9c:	0f 90       	pop	r0
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	0f 90       	pop	r0
     aa2:	1f 90       	pop	r1
     aa4:	18 95       	reti

00000aa6 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
     aa6:	1f 92       	push	r1
     aa8:	0f 92       	push	r0
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	0f 92       	push	r0
     aae:	11 24       	eor	r1, r1
     ab0:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	80 93 c0 04 	sts	0x04C0, r24
   IRQ_STATUS = (1 << TX_END);
     ab8:	80 e4       	ldi	r24, 0x40	; 64
     aba:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
     abe:	8f 91       	pop	r24
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
     ad6:	80 e2       	ldi	r24, 0x20	; 32
     ad8:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     adc:	8f 91       	pop	r24
     ade:	0f 90       	pop	r0
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	0f 90       	pop	r0
     ae4:	1f 90       	pop	r1
     ae6:	18 95       	reti

00000ae8 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
     ae8:	1f 92       	push	r1
     aea:	0f 92       	push	r0
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	0f 92       	push	r0
     af0:	11 24       	eor	r1, r1
     af2:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
     af4:	80 e1       	ldi	r24, 0x10	; 16
     af6:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     afa:	8f 91       	pop	r24
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
     b06:	1f 92       	push	r1
     b08:	0f 92       	push	r0
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	0f 92       	push	r0
     b0e:	11 24       	eor	r1, r1
     b10:	0b b6       	in	r0, 0x3b	; 59
     b12:	0f 92       	push	r0
     b14:	2f 93       	push	r18
     b16:	3f 93       	push	r19
     b18:	4f 93       	push	r20
     b1a:	5f 93       	push	r21
     b1c:	6f 93       	push	r22
     b1e:	7f 93       	push	r23
     b20:	8f 93       	push	r24
     b22:	9f 93       	push	r25
     b24:	af 93       	push	r26
     b26:	bf 93       	push	r27
     b28:	ef 93       	push	r30
     b2a:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
     b2c:	84 e0       	ldi	r24, 0x04	; 4
     b2e:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
     b32:	e0 91 93 03 	lds	r30, 0x0393
     b36:	f0 91 94 03 	lds	r31, 0x0394
     b3a:	30 97       	sbiw	r30, 0x00	; 0
     b3c:	09 f0       	breq	.+2      	; 0xb40 <__vector_59+0x3a>
		rx_start_func();
     b3e:	09 95       	icall

	return;
}
     b40:	ff 91       	pop	r31
     b42:	ef 91       	pop	r30
     b44:	bf 91       	pop	r27
     b46:	af 91       	pop	r26
     b48:	9f 91       	pop	r25
     b4a:	8f 91       	pop	r24
     b4c:	7f 91       	pop	r23
     b4e:	6f 91       	pop	r22
     b50:	5f 91       	pop	r21
     b52:	4f 91       	pop	r20
     b54:	3f 91       	pop	r19
     b56:	2f 91       	pop	r18
     b58:	0f 90       	pop	r0
     b5a:	0b be       	out	0x3b, r0	; 59
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
     b66:	1f 92       	push	r1
     b68:	0f 92       	push	r0
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	0f 92       	push	r0
     b6e:	11 24       	eor	r1, r1
     b70:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     b78:	8f 91       	pop	r24
     b7a:	0f 90       	pop	r0
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	0f 90       	pop	r0
     b80:	1f 90       	pop	r1
     b82:	18 95       	reti

00000b84 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
     b84:	1f 92       	push	r1
     b86:	0f 92       	push	r0
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	0f 92       	push	r0
     b8c:	11 24       	eor	r1, r1
     b8e:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     b96:	8f 91       	pop	r24
     b98:	0f 90       	pop	r0
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	0f 90       	pop	r0
     b9e:	1f 90       	pop	r1
     ba0:	18 95       	reti

00000ba2 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
     ba2:	e9 e4       	ldi	r30, 0x49	; 73
     ba4:	f1 e0       	ldi	r31, 0x01	; 1
     ba6:	90 81       	ld	r25, Z
     ba8:	90 7f       	andi	r25, 0xF0	; 240
     baa:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
     bac:	90 81       	ld	r25, Z
     bae:	8f 70       	andi	r24, 0x0F	; 15
     bb0:	98 2b       	or	r25, r24
     bb2:	90 83       	st	Z, r25
     bb4:	08 95       	ret

00000bb6 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
     bb8:	08 95       	ret

00000bba <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
     bba:	08 95       	ret

00000bbc <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
     bbc:	08 95       	ret

00000bbe <rf_security_disable>:
}



void rf_security_disable()
{
     bbe:	08 95       	ret

00000bc0 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
     bc0:	8f ef       	ldi	r24, 0xFF	; 255
     bc2:	08 95       	ret

00000bc4 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
     bc4:	80 91 b2 04 	lds	r24, 0x04B2
     bc8:	90 91 b3 04 	lds	r25, 0x04B3
     bcc:	08 95       	ret

00000bce <rf_flush_rx_fifo>:



inline void rf_flush_rx_fifo()
{
     bce:	08 95       	ret

00000bd0 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	08 95       	ret

00000bd4 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	08 95       	ret

00000bd8 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	08 95       	ret

00000bdc <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
     bdc:	08 95       	ret

00000bde <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
     bde:	08 95       	ret

00000be0 <rf_test_mode>:
}



void rf_test_mode()
{
     be0:	08 95       	ret

00000be2 <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
     be2:	08 95       	ret

00000be4 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
     be4:	08 95       	ret

00000be6 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
     be6:	08 95       	ret

00000be8 <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
     be8:	08 95       	ret

00000bea <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
     bea:	08 95       	ret

00000bec <rf_cc2591_tx_on>:
	PORTG	|= 0x1;
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	
	DDRG	&= ~(0x1);  // Set RXTX as input
     bec:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
     bee:	8d b1       	in	r24, 0x0d	; 13
     bf0:	80 6e       	ori	r24, 0xE0	; 224
     bf2:	8d b9       	out	0x0d, r24	; 13
	// PAEN=1  EN=0  HGM=x RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0xA0;
     bf4:	8e b1       	in	r24, 0x0e	; 14
     bf6:	80 6a       	ori	r24, 0xA0	; 160
     bf8:	8e b9       	out	0x0e, r24	; 14
     bfa:	08 95       	ret

00000bfc <rf_cc2591_rx_on>:
	DDRG	|= 0x1;
	PORTG	&= ~(0x1);
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	DDRG	&= ~(0x1);  // Set RXTX as input
     bfc:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
     bfe:	8d b1       	in	r24, 0x0d	; 13
     c00:	80 6e       	ori	r24, 0xE0	; 224
     c02:	8d b9       	out	0x0d, r24	; 13
	// PAEN=0  EN=1  HGM=1 RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0x60;
     c04:	8e b1       	in	r24, 0x0e	; 14
     c06:	80 66       	ori	r24, 0x60	; 96
     c08:	8e b9       	out	0x0e, r24	; 14
     c0a:	08 95       	ret

00000c0c <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
     c0c:	cf 92       	push	r12
     c0e:	df 92       	push	r13
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	27 97       	sbiw	r28, 0x07	; 7
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
     c2c:	0e 94 cf 0c 	call	0x199e	; 0x199e <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
     c30:	e0 91 b7 04 	lds	r30, 0x04B7
     c34:	f0 91 b8 04 	lds	r31, 0x04B8
     c38:	c0 80       	ld	r12, Z
     c3a:	d3 80       	ldd	r13, Z+3	; 0x03
     c3c:	e5 80       	ldd	r14, Z+5	; 0x05
     c3e:	f6 80       	ldd	r15, Z+6	; 0x06
     c40:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
     c42:	0e 94 50 04 	call	0x8a0	; 0x8a0 <rf_rx_packet_nonblock>
	if (err < 1) {
     c46:	18 16       	cp	r1, r24
     c48:	1c f0       	brlt	.+6      	; 0xc50 <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
     c4a:	88 ec       	ldi	r24, 0xC8	; 200
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	06 c0       	rjmp	.+12     	; 0xc5c <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
     c50:	f7 01       	movw	r30, r14
     c52:	10 81       	ld	r17, Z
	if (ttl == 0) {
     c54:	11 11       	cpse	r17, r1
     c56:	07 c0       	rjmp	.+14     	; 0xc66 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
     c58:	87 ee       	ldi	r24, 0xE7	; 231
     c5a:	92 e0       	ldi	r25, 0x02	; 2
     c5c:	0e 94 08 26 	call	0x4c10	; 0x4c10 <puts>
#endif
		nrk_int_enable();
     c60:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <nrk_int_enable>
		return;
     c64:	31 c0       	rjmp	.+98     	; 0xcc8 <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
     c66:	15 30       	cpi	r17, 0x05	; 5
     c68:	21 f4       	brne	.+8      	; 0xc72 <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
     c6a:	8a e0       	ldi	r24, 0x0A	; 10
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 02 26 	call	0x4c04	; 0x4c04 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
     c72:	c7 01       	movw	r24, r14
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	9f 93       	push	r25
     c78:	8f 93       	push	r24
     c7a:	80 2f       	mov	r24, r16
     c7c:	99 27       	eor	r25, r25
     c7e:	87 fd       	sbrc	r24, 7
     c80:	90 95       	com	r25
     c82:	9f 93       	push	r25
     c84:	0f 93       	push	r16
     c86:	1f 92       	push	r1
     c88:	1f 93       	push	r17
     c8a:	1f 92       	push	r1
     c8c:	cf 92       	push	r12
     c8e:	89 e0       	ldi	r24, 0x09	; 9
     c90:	93 e0       	ldi	r25, 0x03	; 3
     c92:	9f 93       	push	r25
     c94:	8f 93       	push	r24
     c96:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
     c9a:	fd 82       	std	Y+5, r15	; 0x05
     c9c:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
     c9e:	11 50       	subi	r17, 0x01	; 1
     ca0:	f7 01       	movw	r30, r14
     ca2:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
     ca4:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
     ca6:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
     ca8:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	9f ef       	ldi	r25, 0xFF	; 255
     cae:	9a 83       	std	Y+2, r25	; 0x02
     cb0:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
     cb2:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
     cb6:	ce 01       	movw	r24, r28
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	0e 94 44 03 	call	0x688	; 0x688 <rf_tx_packet>
#endif
	return;
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
}
     cc8:	27 96       	adiw	r28, 0x07	; 7
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	de bf       	out	0x3e, r29	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	cd bf       	out	0x3d, r28	; 61
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	1f 91       	pop	r17
     cda:	0f 91       	pop	r16
     cdc:	ff 90       	pop	r15
     cde:	ef 90       	pop	r14
     ce0:	df 90       	pop	r13
     ce2:	cf 90       	pop	r12
     ce4:	08 95       	ret

00000ce6 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
     ce6:	1f 92       	push	r1
     ce8:	0f 92       	push	r0
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	0f 92       	push	r0
     cee:	11 24       	eor	r1, r1
     cf0:	0b b6       	in	r0, 0x3b	; 59
     cf2:	0f 92       	push	r0
     cf4:	2f 93       	push	r18
     cf6:	3f 93       	push	r19
     cf8:	4f 93       	push	r20
     cfa:	5f 93       	push	r21
     cfc:	6f 93       	push	r22
     cfe:	7f 93       	push	r23
     d00:	8f 93       	push	r24
     d02:	9f 93       	push	r25
     d04:	af 93       	push	r26
     d06:	bf 93       	push	r27
     d08:	ef 93       	push	r30
     d0a:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 91 7b 01 	lds	r25, 0x017B
     d12:	89 17       	cp	r24, r25
     d14:	10 f4       	brcc	.+4      	; 0xd1a <__vector_60+0x34>
     d16:	8f 5f       	subi	r24, 0xFF	; 255
     d18:	fa cf       	rjmp	.-12     	; 0xd0e <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

   if((PHY_RSSI >> RX_CRC_VALID) & 0x1){
     d1a:	80 91 46 01 	lds	r24, 0x0146
     d1e:	87 ff       	sbrs	r24, 7
     d20:	04 c0       	rjmp	.+8      	; 0xd2a <__vector_60+0x44>
      rx_ready = 1;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	80 93 e8 04 	sts	0x04E8, r24
     d28:	04 c0       	rjmp	.+8      	; 0xd32 <__vector_60+0x4c>
   } else {
      printf("RX end failed checksum!\r\n");
     d2a:	82 e3       	ldi	r24, 0x32	; 50
     d2c:	93 e0       	ldi	r25, 0x03	; 3
     d2e:	0e 94 08 26 	call	0x4c10	; 0x4c10 <puts>
   }
   IRQ_STATUS = (1 << RX_END);
     d32:	88 e0       	ldi	r24, 0x08	; 8
     d34:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
     d38:	80 91 46 01 	lds	r24, 0x0146
     d3c:	87 ff       	sbrs	r24, 7
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
     d40:	80 91 b4 04 	lds	r24, 0x04B4
     d44:	81 11       	cpse	r24, r1
     d46:	0e 94 06 06 	call	0xc0c	; 0xc0c <rf_glossy_interrupt>
	}

	if(rx_end_func)
     d4a:	e0 91 91 03 	lds	r30, 0x0391
     d4e:	f0 91 92 03 	lds	r31, 0x0392
     d52:	30 97       	sbiw	r30, 0x00	; 0
     d54:	09 f0       	breq	.+2      	; 0xd58 <__vector_60+0x72>
		rx_end_func();
     d56:	09 95       	icall

	return;
}
     d58:	ff 91       	pop	r31
     d5a:	ef 91       	pop	r30
     d5c:	bf 91       	pop	r27
     d5e:	af 91       	pop	r26
     d60:	9f 91       	pop	r25
     d62:	8f 91       	pop	r24
     d64:	7f 91       	pop	r23
     d66:	6f 91       	pop	r22
     d68:	5f 91       	pop	r21
     d6a:	4f 91       	pop	r20
     d6c:	3f 91       	pop	r19
     d6e:	2f 91       	pop	r18
     d70:	0f 90       	pop	r0
     d72:	0b be       	out	0x3b, r0	; 59
     d74:	0f 90       	pop	r0
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	0f 90       	pop	r0
     d7a:	1f 90       	pop	r1
     d7c:	18 95       	reti

00000d7e <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
     d7e:	a1 ec       	ldi	r26, 0xC1	; 193
     d80:	b4 e0       	ldi	r27, 0x04	; 4
     d82:	fc 01       	movw	r30, r24
     d84:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
     d86:	20 81       	ld	r18, Z
     d88:	2d 93       	st	X+, r18
      AES_KEY = key[i];
     d8a:	21 91       	ld	r18, Z+
     d8c:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
     d90:	e8 17       	cp	r30, r24
     d92:	f9 07       	cpc	r31, r25
     d94:	c1 f7       	brne	.-16     	; 0xd86 <aes_setkey+0x8>
     d96:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
     d98:	10 92 3e 01 	sts	0x013E, r1
     d9c:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
     d9e:	e1 f7       	brne	.-8      	; 0xd98 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
     da0:	80 e8       	ldi	r24, 0x80	; 128
     da2:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
     da6:	80 91 3d 01 	lds	r24, 0x013D
     daa:	80 ff       	sbrs	r24, 0
     dac:	fc cf       	rjmp	.-8      	; 0xda6 <aes_setkey+0x28>
     dae:	e2 ed       	ldi	r30, 0xD2	; 210
     db0:	f4 e0       	ldi	r31, 0x04	; 4
     db2:	80 e1       	ldi	r24, 0x10	; 16
     db4:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
     db6:	90 91 3f 01 	lds	r25, 0x013F
     dba:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
     dbc:	8e 13       	cpse	r24, r30
     dbe:	fb cf       	rjmp	.-10     	; 0xdb6 <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
     dc0:	08 95       	ret

00000dc2 <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
     dc8:	66 23       	and	r22, r22
     dca:	09 f4       	brne	.+2      	; 0xdce <aes_encrypt+0xc>
     dcc:	45 c0       	rjmp	.+138    	; 0xe58 <aes_encrypt+0x96>
     dce:	86 2f       	mov	r24, r22
     dd0:	8f 70       	andi	r24, 0x0F	; 15
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <aes_encrypt+0x14>
     dd4:	41 c0       	rjmp	.+130    	; 0xe58 <aes_encrypt+0x96>
     dd6:	e1 ec       	ldi	r30, 0xC1	; 193
     dd8:	f4 e0       	ldi	r31, 0x04	; 4
     dda:	90 e1       	ldi	r25, 0x10	; 16
     ddc:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
     dde:	21 91       	ld	r18, Z+
     de0:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
     de4:	9e 13       	cpse	r25, r30
     de6:	fb cf       	rjmp	.-10     	; 0xdde <aes_encrypt+0x1c>
     de8:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     dea:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
     dec:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     dee:	40 e1       	ldi	r20, 0x10	; 16
     df0:	94 9f       	mul	r25, r20
     df2:	90 01       	movw	r18, r0
     df4:	11 24       	eor	r1, r1
     df6:	26 17       	cp	r18, r22
     df8:	37 07       	cpc	r19, r23
     dfa:	7c f5       	brge	.+94     	; 0xe5a <aes_encrypt+0x98>
      if(i==0)
     dfc:	91 11       	cpse	r25, r1
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
     e00:	10 92 3c 01 	sts	0x013C, r1
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
     e06:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	2a 0f       	add	r18, r26
     e10:	3b 1f       	adc	r19, r27
     e12:	e9 01       	movw	r28, r18
     e14:	c4 0f       	add	r28, r20
     e16:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
     e18:	f8 81       	ld	r31, Y
     e1a:	f0 93 3e 01 	sts	0x013E, r31
     e1e:	4f 5f       	subi	r20, 0xFF	; 255
     e20:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
     e22:	40 31       	cpi	r20, 0x10	; 16
     e24:	51 05       	cpc	r21, r1
     e26:	a9 f7       	brne	.-22     	; 0xe12 <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
     e28:	40 91 3c 01 	lds	r20, 0x013C
     e2c:	40 68       	ori	r20, 0x80	; 128
     e2e:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
     e32:	40 91 3d 01 	lds	r20, 0x013D
     e36:	40 ff       	sbrs	r20, 0
     e38:	fc cf       	rjmp	.-8      	; 0xe32 <aes_encrypt+0x70>
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
     e3e:	f0 91 3e 01 	lds	r31, 0x013E
     e42:	e9 01       	movw	r28, r18
     e44:	c4 0f       	add	r28, r20
     e46:	d5 1f       	adc	r29, r21
     e48:	f8 83       	st	Y, r31
     e4a:	4f 5f       	subi	r20, 0xFF	; 255
     e4c:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
     e4e:	40 31       	cpi	r20, 0x10	; 16
     e50:	51 05       	cpc	r21, r1
     e52:	a9 f7       	brne	.-22     	; 0xe3e <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     e54:	9f 5f       	subi	r25, 0xFF	; 255
     e56:	cb cf       	rjmp	.-106    	; 0xdee <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
     e58:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret

00000e60 <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
     e6a:	61 30       	cpi	r22, 0x01	; 1
     e6c:	09 f4       	brne	.+2      	; 0xe70 <aes_decrypt+0x10>
     e6e:	58 c0       	rjmp	.+176    	; 0xf20 <aes_decrypt+0xc0>
     e70:	86 2f       	mov	r24, r22
     e72:	8f 70       	andi	r24, 0x0F	; 15
     e74:	09 f0       	breq	.+2      	; 0xe78 <aes_decrypt+0x18>
     e76:	54 c0       	rjmp	.+168    	; 0xf20 <aes_decrypt+0xc0>
     e78:	e2 ed       	ldi	r30, 0xD2	; 210
     e7a:	f4 e0       	ldi	r31, 0x04	; 4
     e7c:	90 e1       	ldi	r25, 0x10	; 16
     e7e:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
     e80:	21 91       	ld	r18, Z+
     e82:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
     e86:	9e 13       	cpse	r25, r30
     e88:	fb cf       	rjmp	.-10     	; 0xe80 <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
     e8a:	62 95       	swap	r22
     e8c:	6f 70       	andi	r22, 0x0F	; 15
     e8e:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
     e90:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
     e92:	6f 3f       	cpi	r22, 0xFF	; 255
     e94:	09 f4       	brne	.+2      	; 0xe98 <aes_decrypt+0x38>
     e96:	45 c0       	rjmp	.+138    	; 0xf22 <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
     e98:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
     e9c:	46 2f       	mov	r20, r22
     e9e:	55 27       	eor	r21, r21
     ea0:	47 fd       	sbrc	r20, 7
     ea2:	50 95       	com	r21
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	ed 01       	movw	r28, r26
     eaa:	90 e1       	ldi	r25, 0x10	; 16
     eac:	69 02       	muls	r22, r25
     eae:	c0 0d       	add	r28, r0
     eb0:	d1 1d       	adc	r29, r1
     eb2:	11 24       	eor	r1, r1
     eb4:	fe 01       	movw	r30, r28
     eb6:	e2 0f       	add	r30, r18
     eb8:	f3 1f       	adc	r31, r19
     eba:	90 81       	ld	r25, Z
     ebc:	90 93 3e 01 	sts	0x013E, r25
     ec0:	2f 5f       	subi	r18, 0xFF	; 255
     ec2:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
     ec4:	20 31       	cpi	r18, 0x10	; 16
     ec6:	31 05       	cpc	r19, r1
     ec8:	a9 f7       	brne	.-22     	; 0xeb4 <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
     eca:	90 91 3c 01 	lds	r25, 0x013C
     ece:	90 68       	ori	r25, 0x80	; 128
     ed0:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
     ed4:	90 91 3d 01 	lds	r25, 0x013D
     ed8:	90 ff       	sbrs	r25, 0
     eda:	fc cf       	rjmp	.-8      	; 0xed4 <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
     edc:	41 50       	subi	r20, 0x01	; 1
     ede:	51 09       	sbc	r21, r1
     ee0:	94 e0       	ldi	r25, 0x04	; 4
     ee2:	44 0f       	add	r20, r20
     ee4:	55 1f       	adc	r21, r21
     ee6:	9a 95       	dec	r25
     ee8:	e1 f7       	brne	.-8      	; 0xee2 <aes_decrypt+0x82>
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
     eee:	90 91 3e 01 	lds	r25, 0x013E
     ef2:	8e 01       	movw	r16, r28
     ef4:	02 0f       	add	r16, r18
     ef6:	13 1f       	adc	r17, r19
     ef8:	f8 01       	movw	r30, r16
     efa:	90 83       	st	Z, r25
         if(i!=0)
     efc:	66 23       	and	r22, r22
     efe:	49 f0       	breq	.+18     	; 0xf12 <aes_decrypt+0xb2>
     f00:	f9 01       	movw	r30, r18
     f02:	e4 0f       	add	r30, r20
     f04:	f5 1f       	adc	r31, r21
     f06:	ea 0f       	add	r30, r26
     f08:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
     f0a:	e0 81       	ld	r30, Z
     f0c:	9e 27       	eor	r25, r30
     f0e:	f8 01       	movw	r30, r16
     f10:	90 83       	st	Z, r25
     f12:	2f 5f       	subi	r18, 0xFF	; 255
     f14:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
     f16:	20 31       	cpi	r18, 0x10	; 16
     f18:	31 05       	cpc	r19, r1
     f1a:	49 f7       	brne	.-46     	; 0xeee <aes_decrypt+0x8e>
     f1c:	61 50       	subi	r22, 0x01	; 1
     f1e:	b9 cf       	rjmp	.-142    	; 0xe92 <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
     f20:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	08 95       	ret

00000f2c <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
     f2c:	90 91 c0 00 	lds	r25, 0x00C0
     f30:	95 ff       	sbrs	r25, 5
     f32:	fc cf       	rjmp	.-8      	; 0xf2c <putc0>
     f34:	90 91 c0 00 	lds	r25, 0x00C0
     f38:	9f 7d       	andi	r25, 0xDF	; 223
     f3a:	90 93 c0 00 	sts	0x00C0, r25
     f3e:	80 93 c6 00 	sts	0x00C6, r24
     f42:	08 95       	ret

00000f44 <__vector_25>:
static uint16_t uart_rx_buf_start,uart_rx_buf_end;
static char uart_rx_buf[MAX_RX_UART_BUF];
static nrk_sig_t uart_rx_signal;

SIGNAL(USART0_RX_vect)
{
     f44:	1f 92       	push	r1
     f46:	0f 92       	push	r0
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	0f 92       	push	r0
     f4c:	11 24       	eor	r1, r1
     f4e:	0b b6       	in	r0, 0x3b	; 59
     f50:	0f 92       	push	r0
     f52:	2f 93       	push	r18
     f54:	3f 93       	push	r19
     f56:	4f 93       	push	r20
     f58:	5f 93       	push	r21
     f5a:	6f 93       	push	r22
     f5c:	7f 93       	push	r23
     f5e:	8f 93       	push	r24
     f60:	9f 93       	push	r25
     f62:	af 93       	push	r26
     f64:	bf 93       	push	r27
     f66:	ef 93       	push	r30
     f68:	ff 93       	push	r31
char c;
uint8_t sig;
nrk_int_disable();
     f6a:	0e 94 cf 0c 	call	0x199e	; 0x199e <nrk_int_disable>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
     f6e:	80 91 c0 00 	lds	r24, 0x00C0
     f72:	87 ff       	sbrs	r24, 7
     f74:	fc cf       	rjmp	.-8      	; 0xf6e <__vector_25+0x2a>
     f76:	80 91 c0 00 	lds	r24, 0x00C0
     f7a:	8f 77       	andi	r24, 0x7F	; 127
     f7c:	80 93 c0 00 	sts	0x00C0, r24
     f80:	20 91 c6 00 	lds	r18, 0x00C6
   uart_rx_buf[uart_rx_buf_end]=c;
     f84:	80 91 a6 03 	lds	r24, 0x03A6
     f88:	90 91 a7 03 	lds	r25, 0x03A7
     f8c:	fc 01       	movw	r30, r24
     f8e:	ea 56       	subi	r30, 0x6A	; 106
     f90:	fc 4f       	sbci	r31, 0xFC	; 252
     f92:	20 83       	st	Z, r18
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
     f94:	01 96       	adiw	r24, 0x01	; 1
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
     f96:	80 31       	cpi	r24, 0x10	; 16
     f98:	91 05       	cpc	r25, r1
     f9a:	29 f0       	breq	.+10     	; 0xfa6 <__vector_25+0x62>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
     f9c:	90 93 a7 03 	sts	0x03A7, r25
     fa0:	80 93 a6 03 	sts	0x03A6, r24
     fa4:	04 c0       	rjmp	.+8      	; 0xfae <__vector_25+0x6a>
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
	   uart_rx_buf_end=0;
     fa6:	10 92 a7 03 	sts	0x03A7, r1
     faa:	10 92 a6 03 	sts	0x03A6, r1
		   }
   //if(uart_rx_buf_end==uart_rx_buf_start) nrk_kprintf(PSTR("Buf overflow!\r\n" ));
   nrk_event_signal(uart_rx_signal);
     fae:	80 91 95 03 	lds	r24, 0x0395
     fb2:	0e 94 97 12 	call	0x252e	; 0x252e <nrk_event_signal>
CLEAR_UART0_RX_INT();
     fb6:	80 91 c0 00 	lds	r24, 0x00C0
     fba:	8f 77       	andi	r24, 0x7F	; 127
     fbc:	80 93 c0 00 	sts	0x00C0, r24
//ENABLE_UART0_RX_INT();
// sei();
nrk_int_enable();
     fc0:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <nrk_int_enable>
}
     fc4:	ff 91       	pop	r31
     fc6:	ef 91       	pop	r30
     fc8:	bf 91       	pop	r27
     fca:	af 91       	pop	r26
     fcc:	9f 91       	pop	r25
     fce:	8f 91       	pop	r24
     fd0:	7f 91       	pop	r23
     fd2:	6f 91       	pop	r22
     fd4:	5f 91       	pop	r21
     fd6:	4f 91       	pop	r20
     fd8:	3f 91       	pop	r19
     fda:	2f 91       	pop	r18
     fdc:	0f 90       	pop	r0
     fde:	0b be       	out	0x3b, r0	; 59
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti

00000fea <nrk_uart_data_ready>:
   return tmp;
}

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
     fea:	81 11       	cpse	r24, r1
     fec:	0d c0       	rjmp	.+26     	; 0x1008 <nrk_uart_data_ready+0x1e>
        {
        //if( UCSR0A & BM(RXC0) ) return 1;
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	40 91 a8 03 	lds	r20, 0x03A8
     ff4:	50 91 a9 03 	lds	r21, 0x03A9
     ff8:	20 91 a6 03 	lds	r18, 0x03A6
     ffc:	30 91 a7 03 	lds	r19, 0x03A7
    1000:	42 17       	cp	r20, r18
    1002:	53 07       	cpc	r21, r19
    1004:	51 f4       	brne	.+20     	; 0x101a <nrk_uart_data_ready+0x30>
    1006:	08 c0       	rjmp	.+16     	; 0x1018 <nrk_uart_data_ready+0x2e>
        }
if(uart_num==1)
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	31 f4       	brne	.+12     	; 0x1018 <nrk_uart_data_ready+0x2e>
	{
        if( UCSR1A & BM(RXC1) ) return 1;
    100c:	80 91 c8 00 	lds	r24, 0x00C8
    1010:	88 1f       	adc	r24, r24
    1012:	88 27       	eor	r24, r24
    1014:	88 1f       	adc	r24, r24
    1016:	08 95       	ret
	//if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
    1018:	80 e0       	ldi	r24, 0x00	; 0
}
    101a:	08 95       	ret

0000101c <nrk_uart_rx_signal_get>:

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    101c:	80 91 95 03 	lds	r24, 0x0395
    1020:	8f 3f       	cpi	r24, 0xFF	; 255
    1022:	19 f4       	brne	.+6      	; 0x102a <nrk_uart_rx_signal_get+0xe>
    1024:	8e e0       	ldi	r24, 0x0E	; 14
    1026:	0e 94 51 10 	call	0x20a2	; 0x20a2 <nrk_error_add>
   return uart_rx_signal;
}
    102a:	80 91 95 03 	lds	r24, 0x0395
    102e:	08 95       	ret

00001030 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    1034:	fc 01       	movw	r30, r24
    1036:	24 91       	lpm	r18, Z
    1038:	ec 01       	movw	r28, r24
    103a:	21 96       	adiw	r28, 0x01	; 1
    103c:	22 23       	and	r18, r18
    103e:	51 f0       	breq	.+20     	; 0x1054 <nrk_kprintf+0x24>
        putchar(c);
    1040:	60 91 9c 06 	lds	r22, 0x069C
    1044:	70 91 9d 06 	lds	r23, 0x069D
    1048:	82 2f       	mov	r24, r18
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <fputc>
    1050:	ce 01       	movw	r24, r28
    1052:	f0 cf       	rjmp	.-32     	; 0x1034 <nrk_kprintf+0x4>
}
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	08 95       	ret

0000105a <getc0>:
char getc0()
{
char tmp;
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
    105a:	20 91 a8 03 	lds	r18, 0x03A8
    105e:	30 91 a9 03 	lds	r19, 0x03A9
    1062:	80 91 a6 03 	lds	r24, 0x03A6
    1066:	90 91 a7 03 	lds	r25, 0x03A7
    106a:	28 17       	cp	r18, r24
    106c:	39 07       	cpc	r19, r25
    106e:	69 f4       	brne	.+26     	; 0x108a <getc0+0x30>
    1070:	80 91 95 03 	lds	r24, 0x0395
    1074:	0e 94 65 12 	call	0x24ca	; 0x24ca <nrk_signal_register>
    1078:	60 91 95 03 	lds	r22, 0x0395
    107c:	77 27       	eor	r23, r23
    107e:	67 fd       	sbrc	r22, 7
    1080:	70 95       	com	r23
    1082:	87 2f       	mov	r24, r23
    1084:	97 2f       	mov	r25, r23
    1086:	0e 94 08 13 	call	0x2610	; 0x2610 <nrk_event_wait>
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
    108a:	6f 3f       	cpi	r22, 0xFF	; 255
    108c:	21 f4       	brne	.+8      	; 0x1096 <getc0+0x3c>
    108e:	84 eb       	ldi	r24, 0xB4	; 180
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	0e 94 18 08 	call	0x1030	; 0x1030 <nrk_kprintf>
   tmp=uart_rx_buf[uart_rx_buf_start];
    1096:	20 91 a8 03 	lds	r18, 0x03A8
    109a:	30 91 a9 03 	lds	r19, 0x03A9
    109e:	f9 01       	movw	r30, r18
    10a0:	ea 56       	subi	r30, 0x6A	; 106
    10a2:	fc 4f       	sbci	r31, 0xFC	; 252
    10a4:	80 81       	ld	r24, Z
   uart_rx_buf_start++;
    10a6:	2f 5f       	subi	r18, 0xFF	; 255
    10a8:	3f 4f       	sbci	r19, 0xFF	; 255
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    10aa:	20 31       	cpi	r18, 0x10	; 16
    10ac:	31 05       	cpc	r19, r1
    10ae:	28 f4       	brcc	.+10     	; 0x10ba <getc0+0x60>
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
   tmp=uart_rx_buf[uart_rx_buf_start];
   uart_rx_buf_start++;
    10b0:	30 93 a9 03 	sts	0x03A9, r19
    10b4:	20 93 a8 03 	sts	0x03A8, r18
    10b8:	08 95       	ret
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    10ba:	10 92 a9 03 	sts	0x03A9, r1
    10be:	10 92 a8 03 	sts	0x03A8, r1

   return tmp;
}
    10c2:	08 95       	ret

000010c4 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    10c4:	86 e0       	ldi	r24, 0x06	; 6
    10c6:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    10c8:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    10ca:	88 ef       	ldi	r24, 0xF8	; 248
    10cc:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    10ce:	80 ef       	ldi	r24, 0xF0	; 240
    10d0:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	8d b9       	out	0x0d, r24	; 13
    10d6:	08 95       	ret

000010d8 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    10d8:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <PORT_INIT>

000010dc <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    10dc:	8f 3f       	cpi	r24, 0xFF	; 255
    10de:	09 f4       	brne	.+2      	; 0x10e2 <nrk_gpio_set+0x6>
    10e0:	6c c0       	rjmp	.+216    	; 0x11ba <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    10e2:	e8 2f       	mov	r30, r24
    10e4:	e7 70       	andi	r30, 0x07	; 7
    10e6:	4e 2f       	mov	r20, r30
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	47 30       	cpi	r20, 0x07	; 7
    10ec:	51 05       	cpc	r21, r1
    10ee:	08 f0       	brcs	.+2      	; 0x10f2 <nrk_gpio_set+0x16>
    10f0:	64 c0       	rjmp	.+200    	; 0x11ba <nrk_gpio_set+0xde>
    10f2:	fa 01       	movw	r30, r20
    10f4:	e0 57       	subi	r30, 0x70	; 112
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	86 95       	lsr	r24
    10fa:	86 95       	lsr	r24
    10fc:	86 95       	lsr	r24
    10fe:	0c 94 31 25 	jmp	0x4a62	; 0x4a62 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1102:	42 b1       	in	r20, 0x02	; 2
    1104:	21 e0       	ldi	r18, 0x01	; 1
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	b9 01       	movw	r22, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <nrk_gpio_set+0x34>
    110c:	66 0f       	add	r22, r22
    110e:	77 1f       	adc	r23, r23
    1110:	8a 95       	dec	r24
    1112:	e2 f7       	brpl	.-8      	; 0x110c <nrk_gpio_set+0x30>
    1114:	cb 01       	movw	r24, r22
    1116:	84 2b       	or	r24, r20
    1118:	82 b9       	out	0x02, r24	; 2
    111a:	4d c0       	rjmp	.+154    	; 0x11b6 <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    111c:	45 b1       	in	r20, 0x05	; 5
    111e:	21 e0       	ldi	r18, 0x01	; 1
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	b9 01       	movw	r22, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <nrk_gpio_set+0x4e>
    1126:	66 0f       	add	r22, r22
    1128:	77 1f       	adc	r23, r23
    112a:	8a 95       	dec	r24
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <nrk_gpio_set+0x4a>
    112e:	cb 01       	movw	r24, r22
    1130:	84 2b       	or	r24, r20
    1132:	85 b9       	out	0x05, r24	; 5
    1134:	40 c0       	rjmp	.+128    	; 0x11b6 <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1136:	48 b1       	in	r20, 0x08	; 8
    1138:	21 e0       	ldi	r18, 0x01	; 1
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	b9 01       	movw	r22, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <nrk_gpio_set+0x68>
    1140:	66 0f       	add	r22, r22
    1142:	77 1f       	adc	r23, r23
    1144:	8a 95       	dec	r24
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <nrk_gpio_set+0x64>
    1148:	cb 01       	movw	r24, r22
    114a:	84 2b       	or	r24, r20
    114c:	88 b9       	out	0x08, r24	; 8
    114e:	33 c0       	rjmp	.+102    	; 0x11b6 <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1150:	4b b1       	in	r20, 0x0b	; 11
    1152:	21 e0       	ldi	r18, 0x01	; 1
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	b9 01       	movw	r22, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <nrk_gpio_set+0x82>
    115a:	66 0f       	add	r22, r22
    115c:	77 1f       	adc	r23, r23
    115e:	8a 95       	dec	r24
    1160:	e2 f7       	brpl	.-8      	; 0x115a <nrk_gpio_set+0x7e>
    1162:	cb 01       	movw	r24, r22
    1164:	84 2b       	or	r24, r20
    1166:	8b b9       	out	0x0b, r24	; 11
    1168:	26 c0       	rjmp	.+76     	; 0x11b6 <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    116a:	4e b1       	in	r20, 0x0e	; 14
    116c:	21 e0       	ldi	r18, 0x01	; 1
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	b9 01       	movw	r22, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <nrk_gpio_set+0x9c>
    1174:	66 0f       	add	r22, r22
    1176:	77 1f       	adc	r23, r23
    1178:	8a 95       	dec	r24
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <nrk_gpio_set+0x98>
    117c:	cb 01       	movw	r24, r22
    117e:	84 2b       	or	r24, r20
    1180:	8e b9       	out	0x0e, r24	; 14
    1182:	19 c0       	rjmp	.+50     	; 0x11b6 <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1184:	41 b3       	in	r20, 0x11	; 17
    1186:	21 e0       	ldi	r18, 0x01	; 1
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	b9 01       	movw	r22, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <nrk_gpio_set+0xb6>
    118e:	66 0f       	add	r22, r22
    1190:	77 1f       	adc	r23, r23
    1192:	8a 95       	dec	r24
    1194:	e2 f7       	brpl	.-8      	; 0x118e <nrk_gpio_set+0xb2>
    1196:	cb 01       	movw	r24, r22
    1198:	84 2b       	or	r24, r20
    119a:	81 bb       	out	0x11, r24	; 17
    119c:	0c c0       	rjmp	.+24     	; 0x11b6 <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    119e:	44 b3       	in	r20, 0x14	; 20
    11a0:	21 e0       	ldi	r18, 0x01	; 1
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	b9 01       	movw	r22, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <nrk_gpio_set+0xd0>
    11a8:	66 0f       	add	r22, r22
    11aa:	77 1f       	adc	r23, r23
    11ac:	8a 95       	dec	r24
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <nrk_gpio_set+0xcc>
    11b0:	cb 01       	movw	r24, r22
    11b2:	84 2b       	or	r24, r20
    11b4:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    11b8:	08 95       	ret
                default: return -1;
    11ba:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    11bc:	08 95       	ret

000011be <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    11be:	8f 3f       	cpi	r24, 0xFF	; 255
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <nrk_gpio_clr+0x6>
    11c2:	73 c0       	rjmp	.+230    	; 0x12aa <nrk_gpio_clr+0xec>
        switch (pin & 0x07) {
    11c4:	e8 2f       	mov	r30, r24
    11c6:	e7 70       	andi	r30, 0x07	; 7
    11c8:	4e 2f       	mov	r20, r30
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	47 30       	cpi	r20, 0x07	; 7
    11ce:	51 05       	cpc	r21, r1
    11d0:	08 f0       	brcs	.+2      	; 0x11d4 <nrk_gpio_clr+0x16>
    11d2:	6b c0       	rjmp	.+214    	; 0x12aa <nrk_gpio_clr+0xec>
    11d4:	fa 01       	movw	r30, r20
    11d6:	e9 56       	subi	r30, 0x69	; 105
    11d8:	ff 4f       	sbci	r31, 0xFF	; 255
    11da:	86 95       	lsr	r24
    11dc:	86 95       	lsr	r24
    11de:	86 95       	lsr	r24
    11e0:	0c 94 31 25 	jmp	0x4a62	; 0x4a62 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    11e4:	42 b1       	in	r20, 0x02	; 2
    11e6:	21 e0       	ldi	r18, 0x01	; 1
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	b9 01       	movw	r22, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <nrk_gpio_clr+0x34>
    11ee:	66 0f       	add	r22, r22
    11f0:	77 1f       	adc	r23, r23
    11f2:	8a 95       	dec	r24
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <nrk_gpio_clr+0x30>
    11f6:	cb 01       	movw	r24, r22
    11f8:	80 95       	com	r24
    11fa:	84 23       	and	r24, r20
    11fc:	82 b9       	out	0x02, r24	; 2
    11fe:	53 c0       	rjmp	.+166    	; 0x12a6 <nrk_gpio_clr+0xe8>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1200:	45 b1       	in	r20, 0x05	; 5
    1202:	21 e0       	ldi	r18, 0x01	; 1
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	b9 01       	movw	r22, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <nrk_gpio_clr+0x50>
    120a:	66 0f       	add	r22, r22
    120c:	77 1f       	adc	r23, r23
    120e:	8a 95       	dec	r24
    1210:	e2 f7       	brpl	.-8      	; 0x120a <nrk_gpio_clr+0x4c>
    1212:	cb 01       	movw	r24, r22
    1214:	80 95       	com	r24
    1216:	84 23       	and	r24, r20
    1218:	85 b9       	out	0x05, r24	; 5
    121a:	45 c0       	rjmp	.+138    	; 0x12a6 <nrk_gpio_clr+0xe8>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    121c:	48 b1       	in	r20, 0x08	; 8
    121e:	21 e0       	ldi	r18, 0x01	; 1
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	b9 01       	movw	r22, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <nrk_gpio_clr+0x6c>
    1226:	66 0f       	add	r22, r22
    1228:	77 1f       	adc	r23, r23
    122a:	8a 95       	dec	r24
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <nrk_gpio_clr+0x68>
    122e:	cb 01       	movw	r24, r22
    1230:	80 95       	com	r24
    1232:	84 23       	and	r24, r20
    1234:	88 b9       	out	0x08, r24	; 8
    1236:	37 c0       	rjmp	.+110    	; 0x12a6 <nrk_gpio_clr+0xe8>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1238:	4b b1       	in	r20, 0x0b	; 11
    123a:	21 e0       	ldi	r18, 0x01	; 1
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	b9 01       	movw	r22, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <nrk_gpio_clr+0x88>
    1242:	66 0f       	add	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	8a 95       	dec	r24
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <nrk_gpio_clr+0x84>
    124a:	cb 01       	movw	r24, r22
    124c:	80 95       	com	r24
    124e:	84 23       	and	r24, r20
    1250:	8b b9       	out	0x0b, r24	; 11
    1252:	29 c0       	rjmp	.+82     	; 0x12a6 <nrk_gpio_clr+0xe8>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1254:	4e b1       	in	r20, 0x0e	; 14
    1256:	21 e0       	ldi	r18, 0x01	; 1
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	b9 01       	movw	r22, r18
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <nrk_gpio_clr+0xa4>
    125e:	66 0f       	add	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	8a 95       	dec	r24
    1264:	e2 f7       	brpl	.-8      	; 0x125e <nrk_gpio_clr+0xa0>
    1266:	cb 01       	movw	r24, r22
    1268:	80 95       	com	r24
    126a:	84 23       	and	r24, r20
    126c:	8e b9       	out	0x0e, r24	; 14
    126e:	1b c0       	rjmp	.+54     	; 0x12a6 <nrk_gpio_clr+0xe8>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1270:	41 b3       	in	r20, 0x11	; 17
    1272:	21 e0       	ldi	r18, 0x01	; 1
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	b9 01       	movw	r22, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <nrk_gpio_clr+0xc0>
    127a:	66 0f       	add	r22, r22
    127c:	77 1f       	adc	r23, r23
    127e:	8a 95       	dec	r24
    1280:	e2 f7       	brpl	.-8      	; 0x127a <nrk_gpio_clr+0xbc>
    1282:	cb 01       	movw	r24, r22
    1284:	80 95       	com	r24
    1286:	84 23       	and	r24, r20
    1288:	81 bb       	out	0x11, r24	; 17
    128a:	0d c0       	rjmp	.+26     	; 0x12a6 <nrk_gpio_clr+0xe8>
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    128c:	44 b3       	in	r20, 0x14	; 20
    128e:	21 e0       	ldi	r18, 0x01	; 1
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	b9 01       	movw	r22, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <nrk_gpio_clr+0xdc>
    1296:	66 0f       	add	r22, r22
    1298:	77 1f       	adc	r23, r23
    129a:	8a 95       	dec	r24
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <nrk_gpio_clr+0xd8>
    129e:	cb 01       	movw	r24, r22
    12a0:	80 95       	com	r24
    12a2:	84 23       	and	r24, r20
    12a4:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    12a8:	08 95       	ret
                default: return -1;
    12aa:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    12ac:	08 95       	ret

000012ae <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    12ae:	8f 3f       	cpi	r24, 0xFF	; 255
    12b0:	31 f1       	breq	.+76     	; 0x12fe <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    12b2:	e8 2f       	mov	r30, r24
    12b4:	e7 70       	andi	r30, 0x07	; 7
    12b6:	4e 2f       	mov	r20, r30
    12b8:	50 e0       	ldi	r21, 0x00	; 0
    12ba:	47 30       	cpi	r20, 0x07	; 7
    12bc:	51 05       	cpc	r21, r1
    12be:	f8 f4       	brcc	.+62     	; 0x12fe <nrk_gpio_get+0x50>
    12c0:	fa 01       	movw	r30, r20
    12c2:	e2 56       	subi	r30, 0x62	; 98
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	28 2f       	mov	r18, r24
    12c8:	26 95       	lsr	r18
    12ca:	26 95       	lsr	r18
    12cc:	26 95       	lsr	r18
    12ce:	0c 94 31 25 	jmp	0x4a62	; 0x4a62 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    12d2:	90 b1       	in	r25, 0x00	; 0
    12d4:	0b c0       	rjmp	.+22     	; 0x12ec <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    12d6:	93 b1       	in	r25, 0x03	; 3
    12d8:	09 c0       	rjmp	.+18     	; 0x12ec <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    12da:	96 b1       	in	r25, 0x06	; 6
    12dc:	07 c0       	rjmp	.+14     	; 0x12ec <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    12de:	99 b1       	in	r25, 0x09	; 9
    12e0:	05 c0       	rjmp	.+10     	; 0x12ec <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    12e2:	9c b1       	in	r25, 0x0c	; 12
    12e4:	03 c0       	rjmp	.+6      	; 0x12ec <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    12e6:	9f b1       	in	r25, 0x0f	; 15
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    12ea:	92 b3       	in	r25, 0x12	; 18
    12ec:	89 2f       	mov	r24, r25
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <nrk_gpio_get+0x48>
    12f2:	95 95       	asr	r25
    12f4:	87 95       	ror	r24
    12f6:	2a 95       	dec	r18
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <nrk_gpio_get+0x44>
    12fa:	81 70       	andi	r24, 0x01	; 1
    12fc:	08 95       	ret
                default: return -1;
    12fe:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1300:	08 95       	ret

00001302 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1302:	8f 3f       	cpi	r24, 0xFF	; 255
    1304:	09 f4       	brne	.+2      	; 0x1308 <nrk_gpio_toggle+0x6>
    1306:	06 c1       	rjmp	.+524    	; 0x1514 <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    1308:	e8 2f       	mov	r30, r24
    130a:	e7 70       	andi	r30, 0x07	; 7
    130c:	4e 2f       	mov	r20, r30
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	47 30       	cpi	r20, 0x07	; 7
    1312:	51 05       	cpc	r21, r1
    1314:	08 f0       	brcs	.+2      	; 0x1318 <nrk_gpio_toggle+0x16>
    1316:	fe c0       	rjmp	.+508    	; 0x1514 <nrk_gpio_toggle+0x212>
    1318:	fa 01       	movw	r30, r20
    131a:	eb 55       	subi	r30, 0x5B	; 91
    131c:	ff 4f       	sbci	r31, 0xFF	; 255
    131e:	86 95       	lsr	r24
    1320:	86 95       	lsr	r24
    1322:	86 95       	lsr	r24
    1324:	0c 94 31 25 	jmp	0x4a62	; 0x4a62 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    1328:	20 b1       	in	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	08 2e       	mov	r0, r24
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <nrk_gpio_toggle+0x32>
    1330:	35 95       	asr	r19
    1332:	27 95       	ror	r18
    1334:	0a 94       	dec	r0
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    1338:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    133a:	20 fd       	sbrc	r18, 0
    133c:	0b c0       	rjmp	.+22     	; 0x1354 <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    133e:	21 e0       	ldi	r18, 0x01	; 1
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	b9 01       	movw	r22, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <nrk_gpio_toggle+0x48>
    1346:	66 0f       	add	r22, r22
    1348:	77 1f       	adc	r23, r23
    134a:	8a 95       	dec	r24
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <nrk_gpio_toggle+0x44>
    134e:	cb 01       	movw	r24, r22
    1350:	84 2b       	or	r24, r20
    1352:	0b c0       	rjmp	.+22     	; 0x136a <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    1354:	21 e0       	ldi	r18, 0x01	; 1
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	b9 01       	movw	r22, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <nrk_gpio_toggle+0x5e>
    135c:	66 0f       	add	r22, r22
    135e:	77 1f       	adc	r23, r23
    1360:	8a 95       	dec	r24
    1362:	e2 f7       	brpl	.-8      	; 0x135c <nrk_gpio_toggle+0x5a>
    1364:	cb 01       	movw	r24, r22
    1366:	80 95       	com	r24
    1368:	84 23       	and	r24, r20
    136a:	82 b9       	out	0x02, r24	; 2
    136c:	16 c0       	rjmp	.+44     	; 0x139a <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    136e:	23 b1       	in	r18, 0x03	; 3
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	08 2e       	mov	r0, r24
    1374:	02 c0       	rjmp	.+4      	; 0x137a <nrk_gpio_toggle+0x78>
    1376:	35 95       	asr	r19
    1378:	27 95       	ror	r18
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    137e:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1380:	20 fd       	sbrc	r18, 0
    1382:	0d c0       	rjmp	.+26     	; 0x139e <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1384:	21 e0       	ldi	r18, 0x01	; 1
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <nrk_gpio_toggle+0x8e>
    138c:	66 0f       	add	r22, r22
    138e:	77 1f       	adc	r23, r23
    1390:	8a 95       	dec	r24
    1392:	e2 f7       	brpl	.-8      	; 0x138c <nrk_gpio_toggle+0x8a>
    1394:	cb 01       	movw	r24, r22
    1396:	84 2b       	or	r24, r20
    1398:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    139e:	21 e0       	ldi	r18, 0x01	; 1
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	b9 01       	movw	r22, r18
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <nrk_gpio_toggle+0xa8>
    13a6:	66 0f       	add	r22, r22
    13a8:	77 1f       	adc	r23, r23
    13aa:	8a 95       	dec	r24
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <nrk_gpio_toggle+0xa4>
    13ae:	cb 01       	movw	r24, r22
    13b0:	80 95       	com	r24
    13b2:	84 23       	and	r24, r20
    13b4:	f1 cf       	rjmp	.-30     	; 0x1398 <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    13b6:	26 b1       	in	r18, 0x06	; 6
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	08 2e       	mov	r0, r24
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <nrk_gpio_toggle+0xc0>
    13be:	35 95       	asr	r19
    13c0:	27 95       	ror	r18
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    13c6:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    13c8:	20 fd       	sbrc	r18, 0
    13ca:	0b c0       	rjmp	.+22     	; 0x13e2 <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    13cc:	21 e0       	ldi	r18, 0x01	; 1
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	b9 01       	movw	r22, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <nrk_gpio_toggle+0xd6>
    13d4:	66 0f       	add	r22, r22
    13d6:	77 1f       	adc	r23, r23
    13d8:	8a 95       	dec	r24
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <nrk_gpio_toggle+0xd2>
    13dc:	cb 01       	movw	r24, r22
    13de:	84 2b       	or	r24, r20
    13e0:	0b c0       	rjmp	.+22     	; 0x13f8 <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    13e2:	21 e0       	ldi	r18, 0x01	; 1
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	b9 01       	movw	r22, r18
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <nrk_gpio_toggle+0xec>
    13ea:	66 0f       	add	r22, r22
    13ec:	77 1f       	adc	r23, r23
    13ee:	8a 95       	dec	r24
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <nrk_gpio_toggle+0xe8>
    13f2:	cb 01       	movw	r24, r22
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	88 b9       	out	0x08, r24	; 8
    13fa:	cf cf       	rjmp	.-98     	; 0x139a <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    13fc:	29 b1       	in	r18, 0x09	; 9
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	08 2e       	mov	r0, r24
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <nrk_gpio_toggle+0x106>
    1404:	35 95       	asr	r19
    1406:	27 95       	ror	r18
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    140c:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    140e:	20 fd       	sbrc	r18, 0
    1410:	0b c0       	rjmp	.+22     	; 0x1428 <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    1412:	21 e0       	ldi	r18, 0x01	; 1
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	b9 01       	movw	r22, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <nrk_gpio_toggle+0x11c>
    141a:	66 0f       	add	r22, r22
    141c:	77 1f       	adc	r23, r23
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <nrk_gpio_toggle+0x118>
    1422:	cb 01       	movw	r24, r22
    1424:	84 2b       	or	r24, r20
    1426:	0b c0       	rjmp	.+22     	; 0x143e <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    1428:	21 e0       	ldi	r18, 0x01	; 1
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	b9 01       	movw	r22, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <nrk_gpio_toggle+0x132>
    1430:	66 0f       	add	r22, r22
    1432:	77 1f       	adc	r23, r23
    1434:	8a 95       	dec	r24
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <nrk_gpio_toggle+0x12e>
    1438:	cb 01       	movw	r24, r22
    143a:	80 95       	com	r24
    143c:	84 23       	and	r24, r20
    143e:	8b b9       	out	0x0b, r24	; 11
    1440:	ac cf       	rjmp	.-168    	; 0x139a <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    1442:	2c b1       	in	r18, 0x0c	; 12
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	08 2e       	mov	r0, r24
    1448:	02 c0       	rjmp	.+4      	; 0x144e <nrk_gpio_toggle+0x14c>
    144a:	35 95       	asr	r19
    144c:	27 95       	ror	r18
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    1452:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    1454:	20 fd       	sbrc	r18, 0
    1456:	0b c0       	rjmp	.+22     	; 0x146e <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    1458:	21 e0       	ldi	r18, 0x01	; 1
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	b9 01       	movw	r22, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <nrk_gpio_toggle+0x162>
    1460:	66 0f       	add	r22, r22
    1462:	77 1f       	adc	r23, r23
    1464:	8a 95       	dec	r24
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <nrk_gpio_toggle+0x15e>
    1468:	cb 01       	movw	r24, r22
    146a:	84 2b       	or	r24, r20
    146c:	0b c0       	rjmp	.+22     	; 0x1484 <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    146e:	21 e0       	ldi	r18, 0x01	; 1
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	b9 01       	movw	r22, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <nrk_gpio_toggle+0x178>
    1476:	66 0f       	add	r22, r22
    1478:	77 1f       	adc	r23, r23
    147a:	8a 95       	dec	r24
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <nrk_gpio_toggle+0x174>
    147e:	cb 01       	movw	r24, r22
    1480:	80 95       	com	r24
    1482:	84 23       	and	r24, r20
    1484:	8e b9       	out	0x0e, r24	; 14
    1486:	89 cf       	rjmp	.-238    	; 0x139a <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    1488:	2f b1       	in	r18, 0x0f	; 15
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	08 2e       	mov	r0, r24
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <nrk_gpio_toggle+0x192>
    1490:	35 95       	asr	r19
    1492:	27 95       	ror	r18
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    1498:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    149a:	20 fd       	sbrc	r18, 0
    149c:	0b c0       	rjmp	.+22     	; 0x14b4 <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    149e:	21 e0       	ldi	r18, 0x01	; 1
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	b9 01       	movw	r22, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <nrk_gpio_toggle+0x1a8>
    14a6:	66 0f       	add	r22, r22
    14a8:	77 1f       	adc	r23, r23
    14aa:	8a 95       	dec	r24
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <nrk_gpio_toggle+0x1a4>
    14ae:	cb 01       	movw	r24, r22
    14b0:	84 2b       	or	r24, r20
    14b2:	0b c0       	rjmp	.+22     	; 0x14ca <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    14b4:	21 e0       	ldi	r18, 0x01	; 1
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	b9 01       	movw	r22, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <nrk_gpio_toggle+0x1be>
    14bc:	66 0f       	add	r22, r22
    14be:	77 1f       	adc	r23, r23
    14c0:	8a 95       	dec	r24
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <nrk_gpio_toggle+0x1ba>
    14c4:	cb 01       	movw	r24, r22
    14c6:	80 95       	com	r24
    14c8:	84 23       	and	r24, r20
    14ca:	81 bb       	out	0x11, r24	; 17
    14cc:	66 cf       	rjmp	.-308    	; 0x139a <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    14ce:	22 b3       	in	r18, 0x12	; 18
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	08 2e       	mov	r0, r24
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <nrk_gpio_toggle+0x1d8>
    14d6:	35 95       	asr	r19
    14d8:	27 95       	ror	r18
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    14de:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    14e0:	20 fd       	sbrc	r18, 0
    14e2:	0b c0       	rjmp	.+22     	; 0x14fa <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    14e4:	21 e0       	ldi	r18, 0x01	; 1
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	b9 01       	movw	r22, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <nrk_gpio_toggle+0x1ee>
    14ec:	66 0f       	add	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	8a 95       	dec	r24
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <nrk_gpio_toggle+0x1ea>
    14f4:	cb 01       	movw	r24, r22
    14f6:	84 2b       	or	r24, r20
    14f8:	0b c0       	rjmp	.+22     	; 0x1510 <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    14fa:	21 e0       	ldi	r18, 0x01	; 1
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	b9 01       	movw	r22, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <nrk_gpio_toggle+0x204>
    1502:	66 0f       	add	r22, r22
    1504:	77 1f       	adc	r23, r23
    1506:	8a 95       	dec	r24
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <nrk_gpio_toggle+0x200>
    150a:	cb 01       	movw	r24, r22
    150c:	80 95       	com	r24
    150e:	84 23       	and	r24, r20
    1510:	84 bb       	out	0x14, r24	; 20
    1512:	43 cf       	rjmp	.-378    	; 0x139a <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    1514:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1516:	08 95       	ret

00001518 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1518:	8f 3f       	cpi	r24, 0xFF	; 255
    151a:	09 f4       	brne	.+2      	; 0x151e <nrk_gpio_direction+0x6>
    151c:	d5 c0       	rjmp	.+426    	; 0x16c8 <nrk_gpio_direction+0x1b0>
    151e:	e8 2f       	mov	r30, r24
    1520:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    1522:	4e 2f       	mov	r20, r30
    1524:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    1526:	61 11       	cpse	r22, r1
    1528:	67 c0       	rjmp	.+206    	; 0x15f8 <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    152a:	47 30       	cpi	r20, 0x07	; 7
    152c:	51 05       	cpc	r21, r1
    152e:	08 f0       	brcs	.+2      	; 0x1532 <nrk_gpio_direction+0x1a>
    1530:	cb c0       	rjmp	.+406    	; 0x16c8 <nrk_gpio_direction+0x1b0>
    1532:	fa 01       	movw	r30, r20
    1534:	e4 55       	subi	r30, 0x54	; 84
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	86 95       	lsr	r24
    153a:	86 95       	lsr	r24
    153c:	86 95       	lsr	r24
    153e:	0c 94 31 25 	jmp	0x4a62	; 0x4a62 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    1542:	41 b1       	in	r20, 0x01	; 1
    1544:	21 e0       	ldi	r18, 0x01	; 1
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	b9 01       	movw	r22, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <nrk_gpio_direction+0x38>
    154c:	66 0f       	add	r22, r22
    154e:	77 1f       	adc	r23, r23
    1550:	8a 95       	dec	r24
    1552:	e2 f7       	brpl	.-8      	; 0x154c <nrk_gpio_direction+0x34>
    1554:	cb 01       	movw	r24, r22
    1556:	80 95       	com	r24
    1558:	84 23       	and	r24, r20
    155a:	65 c0       	rjmp	.+202    	; 0x1626 <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    155c:	44 b1       	in	r20, 0x04	; 4
    155e:	21 e0       	ldi	r18, 0x01	; 1
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	b9 01       	movw	r22, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <nrk_gpio_direction+0x52>
    1566:	66 0f       	add	r22, r22
    1568:	77 1f       	adc	r23, r23
    156a:	8a 95       	dec	r24
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <nrk_gpio_direction+0x4e>
    156e:	cb 01       	movw	r24, r22
    1570:	80 95       	com	r24
    1572:	84 23       	and	r24, r20
    1574:	65 c0       	rjmp	.+202    	; 0x1640 <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    1576:	47 b1       	in	r20, 0x07	; 7
    1578:	21 e0       	ldi	r18, 0x01	; 1
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	b9 01       	movw	r22, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <nrk_gpio_direction+0x6c>
    1580:	66 0f       	add	r22, r22
    1582:	77 1f       	adc	r23, r23
    1584:	8a 95       	dec	r24
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <nrk_gpio_direction+0x68>
    1588:	cb 01       	movw	r24, r22
    158a:	80 95       	com	r24
    158c:	84 23       	and	r24, r20
    158e:	65 c0       	rjmp	.+202    	; 0x165a <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    1590:	4a b1       	in	r20, 0x0a	; 10
    1592:	21 e0       	ldi	r18, 0x01	; 1
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	b9 01       	movw	r22, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <nrk_gpio_direction+0x86>
    159a:	66 0f       	add	r22, r22
    159c:	77 1f       	adc	r23, r23
    159e:	8a 95       	dec	r24
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <nrk_gpio_direction+0x82>
    15a2:	cb 01       	movw	r24, r22
    15a4:	80 95       	com	r24
    15a6:	84 23       	and	r24, r20
    15a8:	65 c0       	rjmp	.+202    	; 0x1674 <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    15aa:	4d b1       	in	r20, 0x0d	; 13
    15ac:	21 e0       	ldi	r18, 0x01	; 1
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	b9 01       	movw	r22, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <nrk_gpio_direction+0xa0>
    15b4:	66 0f       	add	r22, r22
    15b6:	77 1f       	adc	r23, r23
    15b8:	8a 95       	dec	r24
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <nrk_gpio_direction+0x9c>
    15bc:	cb 01       	movw	r24, r22
    15be:	80 95       	com	r24
    15c0:	84 23       	and	r24, r20
    15c2:	65 c0       	rjmp	.+202    	; 0x168e <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    15c4:	40 b3       	in	r20, 0x10	; 16
    15c6:	21 e0       	ldi	r18, 0x01	; 1
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	b9 01       	movw	r22, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <nrk_gpio_direction+0xba>
    15ce:	66 0f       	add	r22, r22
    15d0:	77 1f       	adc	r23, r23
    15d2:	8a 95       	dec	r24
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <nrk_gpio_direction+0xb6>
    15d6:	cb 01       	movw	r24, r22
    15d8:	80 95       	com	r24
    15da:	84 23       	and	r24, r20
    15dc:	65 c0       	rjmp	.+202    	; 0x16a8 <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    15de:	43 b3       	in	r20, 0x13	; 19
    15e0:	21 e0       	ldi	r18, 0x01	; 1
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	b9 01       	movw	r22, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <nrk_gpio_direction+0xd4>
    15e8:	66 0f       	add	r22, r22
    15ea:	77 1f       	adc	r23, r23
    15ec:	8a 95       	dec	r24
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <nrk_gpio_direction+0xd0>
    15f0:	cb 01       	movw	r24, r22
    15f2:	80 95       	com	r24
    15f4:	84 23       	and	r24, r20
    15f6:	65 c0       	rjmp	.+202    	; 0x16c2 <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    15f8:	47 30       	cpi	r20, 0x07	; 7
    15fa:	51 05       	cpc	r21, r1
    15fc:	08 f0       	brcs	.+2      	; 0x1600 <nrk_gpio_direction+0xe8>
    15fe:	64 c0       	rjmp	.+200    	; 0x16c8 <nrk_gpio_direction+0x1b0>
    1600:	fa 01       	movw	r30, r20
    1602:	ed 54       	subi	r30, 0x4D	; 77
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	86 95       	lsr	r24
    1608:	86 95       	lsr	r24
    160a:	86 95       	lsr	r24
    160c:	0c 94 31 25 	jmp	0x4a62	; 0x4a62 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    1610:	41 b1       	in	r20, 0x01	; 1
    1612:	21 e0       	ldi	r18, 0x01	; 1
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	b9 01       	movw	r22, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <nrk_gpio_direction+0x106>
    161a:	66 0f       	add	r22, r22
    161c:	77 1f       	adc	r23, r23
    161e:	8a 95       	dec	r24
    1620:	e2 f7       	brpl	.-8      	; 0x161a <nrk_gpio_direction+0x102>
    1622:	cb 01       	movw	r24, r22
    1624:	84 2b       	or	r24, r20
    1626:	81 b9       	out	0x01, r24	; 1
    1628:	4d c0       	rjmp	.+154    	; 0x16c4 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    162a:	44 b1       	in	r20, 0x04	; 4
    162c:	21 e0       	ldi	r18, 0x01	; 1
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	b9 01       	movw	r22, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <nrk_gpio_direction+0x120>
    1634:	66 0f       	add	r22, r22
    1636:	77 1f       	adc	r23, r23
    1638:	8a 95       	dec	r24
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <nrk_gpio_direction+0x11c>
    163c:	cb 01       	movw	r24, r22
    163e:	84 2b       	or	r24, r20
    1640:	84 b9       	out	0x04, r24	; 4
    1642:	40 c0       	rjmp	.+128    	; 0x16c4 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    1644:	47 b1       	in	r20, 0x07	; 7
    1646:	21 e0       	ldi	r18, 0x01	; 1
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	b9 01       	movw	r22, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <nrk_gpio_direction+0x13a>
    164e:	66 0f       	add	r22, r22
    1650:	77 1f       	adc	r23, r23
    1652:	8a 95       	dec	r24
    1654:	e2 f7       	brpl	.-8      	; 0x164e <nrk_gpio_direction+0x136>
    1656:	cb 01       	movw	r24, r22
    1658:	84 2b       	or	r24, r20
    165a:	87 b9       	out	0x07, r24	; 7
    165c:	33 c0       	rjmp	.+102    	; 0x16c4 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    165e:	4a b1       	in	r20, 0x0a	; 10
    1660:	21 e0       	ldi	r18, 0x01	; 1
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	b9 01       	movw	r22, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <nrk_gpio_direction+0x154>
    1668:	66 0f       	add	r22, r22
    166a:	77 1f       	adc	r23, r23
    166c:	8a 95       	dec	r24
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <nrk_gpio_direction+0x150>
    1670:	cb 01       	movw	r24, r22
    1672:	84 2b       	or	r24, r20
    1674:	8a b9       	out	0x0a, r24	; 10
    1676:	26 c0       	rjmp	.+76     	; 0x16c4 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    1678:	4d b1       	in	r20, 0x0d	; 13
    167a:	21 e0       	ldi	r18, 0x01	; 1
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	b9 01       	movw	r22, r18
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <nrk_gpio_direction+0x16e>
    1682:	66 0f       	add	r22, r22
    1684:	77 1f       	adc	r23, r23
    1686:	8a 95       	dec	r24
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <nrk_gpio_direction+0x16a>
    168a:	cb 01       	movw	r24, r22
    168c:	84 2b       	or	r24, r20
    168e:	8d b9       	out	0x0d, r24	; 13
    1690:	19 c0       	rjmp	.+50     	; 0x16c4 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    1692:	40 b3       	in	r20, 0x10	; 16
    1694:	21 e0       	ldi	r18, 0x01	; 1
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	b9 01       	movw	r22, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <nrk_gpio_direction+0x188>
    169c:	66 0f       	add	r22, r22
    169e:	77 1f       	adc	r23, r23
    16a0:	8a 95       	dec	r24
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <nrk_gpio_direction+0x184>
    16a4:	cb 01       	movw	r24, r22
    16a6:	84 2b       	or	r24, r20
    16a8:	80 bb       	out	0x10, r24	; 16
    16aa:	0c c0       	rjmp	.+24     	; 0x16c4 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    16ac:	43 b3       	in	r20, 0x13	; 19
    16ae:	21 e0       	ldi	r18, 0x01	; 1
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	b9 01       	movw	r22, r18
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <nrk_gpio_direction+0x1a2>
    16b6:	66 0f       	add	r22, r22
    16b8:	77 1f       	adc	r23, r23
    16ba:	8a 95       	dec	r24
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <nrk_gpio_direction+0x19e>
    16be:	cb 01       	movw	r24, r22
    16c0:	84 2b       	or	r24, r20
    16c2:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    16c4:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    16c6:	08 95       	ret
                        default: return -1;
    16c8:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    16ca:	08 95       	ret

000016cc <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    16cc:	81 11       	cpse	r24, r1
    16ce:	06 c0       	rjmp	.+12     	; 0x16dc <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    16d0:	80 b1       	in	r24, 0x00	; 0
    16d2:	86 95       	lsr	r24
    16d4:	81 70       	andi	r24, 0x01	; 1
    16d6:	91 e0       	ldi	r25, 0x01	; 1
    16d8:	89 27       	eor	r24, r25
    16da:	08 95       	ret
	} 
return -1;
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
}
    16de:	08 95       	ret

000016e0 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	11 f4       	brne	.+4      	; 0x16e8 <nrk_led_toggle+0x8>
    16e4:	83 e2       	ldi	r24, 0x23	; 35
    16e6:	0d c0       	rjmp	.+26     	; 0x1702 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	91 05       	cpc	r25, r1
    16ec:	11 f4       	brne	.+4      	; 0x16f2 <nrk_led_toggle+0x12>
    16ee:	8b e2       	ldi	r24, 0x2B	; 43
    16f0:	08 c0       	rjmp	.+16     	; 0x1702 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    16f2:	82 30       	cpi	r24, 0x02	; 2
    16f4:	91 05       	cpc	r25, r1
    16f6:	11 f4       	brne	.+4      	; 0x16fc <nrk_led_toggle+0x1c>
    16f8:	83 e3       	ldi	r24, 0x33	; 51
    16fa:	03 c0       	rjmp	.+6      	; 0x1702 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    16fc:	03 97       	sbiw	r24, 0x03	; 3
    16fe:	29 f4       	brne	.+10     	; 0x170a <nrk_led_toggle+0x2a>
    1700:	8b e3       	ldi	r24, 0x3B	; 59
    1702:	0e 94 81 09 	call	0x1302	; 0x1302 <nrk_gpio_toggle>
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	08 95       	ret
return -1;
    170a:	8f ef       	ldi	r24, 0xFF	; 255
}
    170c:	08 95       	ret

0000170e <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	11 f4       	brne	.+4      	; 0x1716 <nrk_led_clr+0x8>
    1712:	83 e2       	ldi	r24, 0x23	; 35
    1714:	0d c0       	rjmp	.+26     	; 0x1730 <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	91 05       	cpc	r25, r1
    171a:	11 f4       	brne	.+4      	; 0x1720 <nrk_led_clr+0x12>
    171c:	8b e2       	ldi	r24, 0x2B	; 43
    171e:	08 c0       	rjmp	.+16     	; 0x1730 <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    1720:	82 30       	cpi	r24, 0x02	; 2
    1722:	91 05       	cpc	r25, r1
    1724:	11 f4       	brne	.+4      	; 0x172a <nrk_led_clr+0x1c>
    1726:	83 e3       	ldi	r24, 0x33	; 51
    1728:	03 c0       	rjmp	.+6      	; 0x1730 <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    172a:	03 97       	sbiw	r24, 0x03	; 3
    172c:	29 f4       	brne	.+10     	; 0x1738 <nrk_led_clr+0x2a>
    172e:	8b e3       	ldi	r24, 0x3B	; 59
    1730:	0e 94 6e 08 	call	0x10dc	; 0x10dc <nrk_gpio_set>
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	08 95       	ret
return -1;
    1738:	8f ef       	ldi	r24, 0xFF	; 255
}
    173a:	08 95       	ret

0000173c <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	11 f4       	brne	.+4      	; 0x1744 <nrk_led_set+0x8>
    1740:	83 e2       	ldi	r24, 0x23	; 35
    1742:	0d c0       	rjmp	.+26     	; 0x175e <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    1744:	81 30       	cpi	r24, 0x01	; 1
    1746:	91 05       	cpc	r25, r1
    1748:	11 f4       	brne	.+4      	; 0x174e <nrk_led_set+0x12>
    174a:	8b e2       	ldi	r24, 0x2B	; 43
    174c:	08 c0       	rjmp	.+16     	; 0x175e <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    174e:	82 30       	cpi	r24, 0x02	; 2
    1750:	91 05       	cpc	r25, r1
    1752:	11 f4       	brne	.+4      	; 0x1758 <nrk_led_set+0x1c>
    1754:	83 e3       	ldi	r24, 0x33	; 51
    1756:	03 c0       	rjmp	.+6      	; 0x175e <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    1758:	03 97       	sbiw	r24, 0x03	; 3
    175a:	29 f4       	brne	.+10     	; 0x1766 <nrk_led_set+0x2a>
    175c:	8b e3       	ldi	r24, 0x3B	; 59
    175e:	0e 94 df 08 	call	0x11be	; 0x11be <nrk_gpio_clr>
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	08 95       	ret
return -1;
    1766:	8f ef       	ldi	r24, 0xFF	; 255
}
    1768:	08 95       	ret

0000176a <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    176a:	88 23       	and	r24, r24
    176c:	19 f0       	breq	.+6      	; 0x1774 <nrk_gpio_pullups+0xa>
    176e:	85 b7       	in	r24, 0x35	; 53
    1770:	8f 7e       	andi	r24, 0xEF	; 239
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    1774:	85 b7       	in	r24, 0x35	; 53
    1776:	80 61       	ori	r24, 0x10	; 16
    1778:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	08 95       	ret

0000177e <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    177e:	90 91 c8 00 	lds	r25, 0x00C8
    1782:	95 ff       	sbrs	r25, 5
    1784:	fc cf       	rjmp	.-8      	; 0x177e <putc1>
    1786:	80 93 ce 00 	sts	0x00CE, r24
    178a:	08 95       	ret

0000178c <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    178c:	90 93 c5 00 	sts	0x00C5, r25
    1790:	80 93 c4 00 	sts	0x00C4, r24
    1794:	86 e0       	ldi	r24, 0x06	; 6
    1796:	80 93 c2 00 	sts	0x00C2, r24
    179a:	e1 ec       	ldi	r30, 0xC1	; 193
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	8b 7f       	andi	r24, 0xFB	; 251
    17a2:	80 83       	st	Z, r24
    17a4:	a0 ec       	ldi	r26, 0xC0	; 192
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	8c 91       	ld	r24, X
    17aa:	82 60       	ori	r24, 0x02	; 2
    17ac:	8c 93       	st	X, r24
ENABLE_UART0();
    17ae:	80 81       	ld	r24, Z
    17b0:	88 61       	ori	r24, 0x18	; 24
    17b2:	80 83       	st	Z, r24
    17b4:	08 95       	ret

000017b6 <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    17b6:	90 93 cd 00 	sts	0x00CD, r25
    17ba:	80 93 cc 00 	sts	0x00CC, r24
    17be:	86 e0       	ldi	r24, 0x06	; 6
    17c0:	80 93 ca 00 	sts	0x00CA, r24
    17c4:	e9 ec       	ldi	r30, 0xC9	; 201
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	8b 7f       	andi	r24, 0xFB	; 251
    17cc:	80 83       	st	Z, r24
    17ce:	a8 ec       	ldi	r26, 0xC8	; 200
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	8c 91       	ld	r24, X
    17d4:	82 60       	ori	r24, 0x02	; 2
    17d6:	8c 93       	st	X, r24
ENABLE_UART1();
    17d8:	80 81       	ld	r24, Z
    17da:	88 61       	ori	r24, 0x18	; 24
    17dc:	80 83       	st	Z, r24
    17de:	08 95       	ret

000017e0 <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    17e0:	0e 94 c6 0b 	call	0x178c	; 0x178c <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    17e4:	6d e2       	ldi	r22, 0x2D	; 45
    17e6:	78 e0       	ldi	r23, 0x08	; 8
    17e8:	86 e9       	ldi	r24, 0x96	; 150
    17ea:	97 e0       	ldi	r25, 0x07	; 7
    17ec:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <fdevopen>
    17f0:	90 93 9d 06 	sts	0x069D, r25
    17f4:	80 93 9c 06 	sts	0x069C, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    17f8:	6d e2       	ldi	r22, 0x2D	; 45
    17fa:	78 e0       	ldi	r23, 0x08	; 8
    17fc:	86 e9       	ldi	r24, 0x96	; 150
    17fe:	97 e0       	ldi	r25, 0x07	; 7
    1800:	0e 94 6b 25 	call	0x4ad6	; 0x4ad6 <fdevopen>
    1804:	90 93 9b 06 	sts	0x069B, r25
    1808:	80 93 9a 06 	sts	0x069A, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    180c:	0e 94 55 11 	call	0x22aa	; 0x22aa <nrk_signal_create>
    1810:	80 93 95 03 	sts	0x0395, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    1814:	8f 3f       	cpi	r24, 0xFF	; 255
    1816:	19 f4       	brne	.+6      	; 0x181e <nrk_setup_uart+0x3e>
    1818:	8e e0       	ldi	r24, 0x0E	; 14
    181a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <nrk_error_add>
   uart_rx_buf_start=0;
    181e:	10 92 a9 03 	sts	0x03A9, r1
    1822:	10 92 a8 03 	sts	0x03A8, r1
   uart_rx_buf_end=0;
    1826:	10 92 a7 03 	sts	0x03A7, r1
    182a:	10 92 a6 03 	sts	0x03A6, r1
   ENABLE_UART0_RX_INT();
    182e:	80 91 c1 00 	lds	r24, 0x00C1
    1832:	80 68       	ori	r24, 0x80	; 128
    1834:	80 93 c1 00 	sts	0x00C1, r24
    1838:	08 95       	ret

0000183a <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    183a:	80 91 c8 00 	lds	r24, 0x00C8
    183e:	87 ff       	sbrs	r24, 7
    1840:	fc cf       	rjmp	.-8      	; 0x183a <getc1>
    1842:	80 91 c8 00 	lds	r24, 0x00C8
    1846:	8f 77       	andi	r24, 0x7F	; 127
    1848:	80 93 c8 00 	sts	0x00C8, r24
    184c:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    1850:	08 95       	ret

00001852 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	d1 f7       	brne	.-12     	; 0x1852 <halWait>

} // halWait
    185e:	08 95       	ret

00001860 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    1860:	0c 94 c6 26 	jmp	0x4d8c	; 0x4d8c <__eerd_byte_m128rfa1>

00001864 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    1864:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <__eewr_byte_m128rfa1>
}
    1868:	08 95       	ret

0000186a <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    186a:	ef 92       	push	r14
    186c:	ff 92       	push	r15
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <__eerd_byte_m128rfa1>
    1880:	18 2f       	mov	r17, r24
    1882:	f7 01       	movw	r30, r14
    1884:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <__eerd_byte_m128rfa1>
    188e:	08 2f       	mov	r16, r24
    1890:	f7 01       	movw	r30, r14
    1892:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <__eerd_byte_m128rfa1>
    189c:	d8 2f       	mov	r29, r24
    189e:	f7 01       	movw	r30, r14
    18a0:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    18a2:	83 e0       	ldi	r24, 0x03	; 3
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <__eerd_byte_m128rfa1>
    18aa:	c8 2f       	mov	r28, r24
    18ac:	f7 01       	movw	r30, r14
    18ae:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    18b0:	84 e0       	ldi	r24, 0x04	; 4
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <__eerd_byte_m128rfa1>
    18b8:	10 0f       	add	r17, r16
    18ba:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    18bc:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    18be:	8c 17       	cp	r24, r28
    18c0:	11 f0       	breq	.+4      	; 0x18c6 <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    18c2:	8f ef       	ldi	r24, 0xFF	; 255
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    18c6:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	1f 91       	pop	r17
    18ce:	0f 91       	pop	r16
    18d0:	ff 90       	pop	r15
    18d2:	ef 90       	pop	r14
    18d4:	08 95       	ret

000018d6 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    18d6:	cf 93       	push	r28
    18d8:	df 93       	push	r29
    18da:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    18dc:	85 e0       	ldi	r24, 0x05	; 5
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <__eerd_byte_m128rfa1>
    18e4:	88 83       	st	Y, r24
return NRK_OK;
}
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	08 95       	ret

000018ee <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    18ee:	fc 01       	movw	r30, r24
    18f0:	60 81       	ld	r22, Z
    18f2:	86 e0       	ldi	r24, 0x06	; 6
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	08 95       	ret

000018fe <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    1904:	86 e0       	ldi	r24, 0x06	; 6
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <__eerd_byte_m128rfa1>
    190c:	88 83       	st	Y, r24
  return NRK_OK;
}
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	08 95       	ret

00001916 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	8c 01       	movw	r16, r24
    1920:	c0 e0       	ldi	r28, 0x00	; 0
    1922:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    1924:	ce 01       	movw	r24, r28
    1926:	08 96       	adiw	r24, 0x08	; 8
    1928:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <__eerd_byte_m128rfa1>
    192c:	f8 01       	movw	r30, r16
    192e:	81 93       	st	Z+, r24
    1930:	8f 01       	movw	r16, r30
    1932:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    1934:	c0 31       	cpi	r28, 0x10	; 16
    1936:	d1 05       	cpc	r29, r1
    1938:	a9 f7       	brne	.-22     	; 0x1924 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	08 95       	ret

00001946 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	8c 01       	movw	r16, r24
    1950:	c0 e0       	ldi	r28, 0x00	; 0
    1952:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    1954:	f8 01       	movw	r30, r16
    1956:	61 91       	ld	r22, Z+
    1958:	8f 01       	movw	r16, r30
    195a:	ce 01       	movw	r24, r28
    195c:	08 96       	adiw	r24, 0x08	; 8
    195e:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <__eewr_byte_m128rfa1>
    1962:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    1964:	c0 31       	cpi	r28, 0x10	; 16
    1966:	d1 05       	cpc	r29, r1
    1968:	a9 f7       	brne	.-22     	; 0x1954 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	08 95       	ret

00001976 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    197c:	87 e0       	ldi	r24, 0x07	; 7
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <__eerd_byte_m128rfa1>
    1984:	88 83       	st	Y, r24
  return NRK_OK;
}
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	08 95       	ret

0000198e <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    198e:	fc 01       	movw	r30, r24
    1990:	60 81       	ld	r22, Z
    1992:	87 e0       	ldi	r24, 0x07	; 7
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	08 95       	ret

0000199e <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    199e:	f8 94       	cli
    19a0:	08 95       	ret

000019a2 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    19a2:	78 94       	sei
    19a4:	08 95       	ret

000019a6 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    19a6:	0e 94 cf 0c 	call	0x199e	; 0x199e <nrk_int_disable>
while(1);
    19aa:	ff cf       	rjmp	.-2      	; 0x19aa <nrk_halt+0x4>

000019ac <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	cd b7       	in	r28, 0x3d	; 61
    19b2:	de b7       	in	r29, 0x3e	; 62
    19b4:	a3 97       	sbiw	r28, 0x23	; 35
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    19c0:	0e 94 55 11 	call	0x22aa	; 0x22aa <nrk_signal_create>
    19c4:	80 93 fc 05 	sts	0x05FC, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    19c8:	8f 3f       	cpi	r24, 0xFF	; 255
    19ca:	21 f4       	brne	.+8      	; 0x19d4 <nrk_init+0x28>
    19cc:	60 e0       	ldi	r22, 0x00	; 0
    19ce:	8e e0       	ldi	r24, 0x0E	; 14
    19d0:	0e 94 5f 10 	call	0x20be	; 0x20be <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    19d4:	0e 94 2f 20 	call	0x405e	; 0x405e <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    19d8:	80 ff       	sbrs	r24, 0
    19da:	04 c0       	rjmp	.+8      	; 0x19e4 <nrk_init+0x38>
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	86 e0       	ldi	r24, 0x06	; 6
    19e0:	0e 94 5f 10 	call	0x20be	; 0x20be <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    19e4:	10 92 ff 05 	sts	0x05FF, r1
    nrk_cur_task_TCB = NULL;
    19e8:	10 92 0d 06 	sts	0x060D, r1
    19ec:	10 92 0c 06 	sts	0x060C, r1
    
    nrk_high_ready_TCB = NULL;
    19f0:	10 92 fe 05 	sts	0x05FE, r1
    19f4:	10 92 fd 05 	sts	0x05FD, r1
    nrk_high_ready_prio = 0; 
    19f8:	10 92 0e 06 	sts	0x060E, r1
	nrk_stats_reset();
   #endif

    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    19fc:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <_nrk_reserve_init>
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    1a00:	10 92 0b 06 	sts	0x060B, r1
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	90 e0       	ldi	r25, 0x00	; 0

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    1a08:	2f ef       	ldi	r18, 0xFF	; 255
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	e1 51       	subi	r30, 0x11	; 17
    1a0e:	fa 4f       	sbci	r31, 0xFA	; 250
    1a10:	20 83       	st	Z, r18
    nrk_sem_list[i].value=-1;
    1a12:	22 83       	std	Z+2, r18	; 0x02
    nrk_sem_list[i].resource_ceiling=-1;
    1a14:	21 83       	std	Z+1, r18	; 0x01
    1a16:	03 96       	adiw	r24, 0x03	; 3
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    1a18:	8c 30       	cpi	r24, 0x0C	; 12
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	b1 f7       	brne	.-20     	; 0x1a0a <nrk_init+0x5e>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1a22:	33 e6       	ldi	r19, 0x63	; 99
        nrk_task_TCB[i].task_ID = -1; 
    1a24:	2f ef       	ldi	r18, 0xFF	; 255
    1a26:	fc 01       	movw	r30, r24
    1a28:	e5 51       	subi	r30, 0x15	; 21
    1a2a:	fb 4f       	sbci	r31, 0xFB	; 251
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1a2c:	32 87       	std	Z+10, r19	; 0x0a
        nrk_task_TCB[i].task_ID = -1; 
    1a2e:	20 87       	std	Z+8, r18	; 0x08
    1a30:	8b 96       	adiw	r24, 0x2b	; 43
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    1a32:	82 30       	cpi	r24, 0x02	; 2
    1a34:	41 e0       	ldi	r20, 0x01	; 1
    1a36:	94 07       	cpc	r25, r20
    1a38:	b1 f7       	brne	.-20     	; 0x1a26 <nrk_init+0x7a>
    1a3a:	ef e0       	ldi	r30, 0x0F	; 15
    1a3c:	f6 e0       	ldi	r31, 0x06	; 6
    1a3e:	cf 01       	movw	r24, r30
    1a40:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1a42:	94 83       	std	Z+4, r25	; 0x04
    1a44:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1a46:	f7 83       	std	Z+7, r31	; 0x07
    1a48:	e6 83       	std	Z+6, r30	; 0x06
    1a4a:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    1a4c:	86 e0       	ldi	r24, 0x06	; 6
    1a4e:	ed 32       	cpi	r30, 0x2D	; 45
    1a50:	f8 07       	cpc	r31, r24
    1a52:	a9 f7       	brne	.-22     	; 0x1a3e <nrk_init+0x92>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    1a54:	10 92 11 06 	sts	0x0611, r1
    1a58:	10 92 10 06 	sts	0x0610, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    1a5c:	10 92 31 06 	sts	0x0631, r1
    1a60:	10 92 30 06 	sts	0x0630, r1
	_head_node = NULL;
    1a64:	10 92 02 06 	sts	0x0602, r1
    1a68:	10 92 01 06 	sts	0x0601, r1
	_free_node = &_nrk_readyQ[0];
    1a6c:	8f e0       	ldi	r24, 0x0F	; 15
    1a6e:	96 e0       	ldi	r25, 0x06	; 6
    1a70:	90 93 ea 04 	sts	0x04EA, r25
    1a74:	80 93 e9 04 	sts	0x04E9, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    1a78:	66 e4       	ldi	r22, 0x46	; 70
    1a7a:	7a e1       	ldi	r23, 0x1A	; 26
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	01 96       	adiw	r24, 0x01	; 1
    1a80:	0e 94 67 22 	call	0x44ce	; 0x44ce <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    1a84:	40 e8       	ldi	r20, 0x80	; 128
    1a86:	50 e0       	ldi	r21, 0x00	; 0
    1a88:	6e e2       	ldi	r22, 0x2E	; 46
    1a8a:	74 e0       	ldi	r23, 0x04	; 4
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	01 96       	adiw	r24, 0x01	; 1
    1a90:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    1a94:	85 e5       	ldi	r24, 0x55	; 85
    1a96:	80 93 2e 04 	sts	0x042E, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    1a9a:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    1a9c:	1c 86       	std	Y+12, r1	; 0x0c
    1a9e:	1d 86       	std	Y+13, r1	; 0x0d
    1aa0:	1e 86       	std	Y+14, r1	; 0x0e
    1aa2:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    1aa4:	18 8a       	std	Y+16, r1	; 0x10
    1aa6:	19 8a       	std	Y+17, r1	; 0x11
    1aa8:	1a 8a       	std	Y+18, r1	; 0x12
    1aaa:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    1aac:	1c 8a       	std	Y+20, r1	; 0x14
    1aae:	1d 8a       	std	Y+21, r1	; 0x15
    1ab0:	1e 8a       	std	Y+22, r1	; 0x16
    1ab2:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    1ab4:	18 8e       	std	Y+24, r1	; 0x18
    1ab6:	19 8e       	std	Y+25, r1	; 0x19
    1ab8:	1a 8e       	std	Y+26, r1	; 0x1a
    1aba:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    1abc:	1c 8e       	std	Y+28, r1	; 0x1c
    1abe:	1d 8e       	std	Y+29, r1	; 0x1d
    1ac0:	1e 8e       	std	Y+30, r1	; 0x1e
    1ac2:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    1ac4:	18 a2       	std	Y+32, r1	; 0x20
    1ac6:	19 a2       	std	Y+33, r1	; 0x21
    1ac8:	1a a2       	std	Y+34, r1	; 0x22
    1aca:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    1ad0:	92 e0       	ldi	r25, 0x02	; 2
    1ad2:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    1ad4:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    1ad6:	ce 01       	movw	r24, r28
    1ad8:	01 96       	adiw	r24, 0x01	; 1
    1ada:	0e 94 83 15 	call	0x2b06	; 0x2b06 <nrk_activate_task>
	
}
    1ade:	a3 96       	adiw	r28, 0x23	; 35
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	08 95       	ret

00001af0 <nrk_start>:




void nrk_start (void)
{
    1af0:	03 ef       	ldi	r16, 0xF3	; 243
    1af2:	14 e0       	ldi	r17, 0x04	; 4
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1af4:	c0 e0       	ldi	r28, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    1af6:	f8 01       	movw	r30, r16
    1af8:	d0 80       	ld	r13, Z
	// only check activated tasks
	if(task_ID!=-1)
    1afa:	ff ef       	ldi	r31, 0xFF	; 255
    1afc:	df 12       	cpse	r13, r31
    1afe:	22 c0       	rjmp	.+68     	; 0x1b44 <nrk_start+0x54>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1b00:	cf 5f       	subi	r28, 0xFF	; 255
    1b02:	05 5d       	subi	r16, 0xD5	; 213
    1b04:	1f 4f       	sbci	r17, 0xFF	; 255
    1b06:	c6 30       	cpi	r28, 0x06	; 6
    1b08:	b1 f7       	brne	.-20     	; 0x1af6 <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    1b0a:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    1b0e:	2b e2       	ldi	r18, 0x2B	; 43
    1b10:	82 02       	muls	r24, r18
    1b12:	c0 01       	movw	r24, r0
    1b14:	11 24       	eor	r1, r1
    1b16:	fc 01       	movw	r30, r24
    1b18:	e5 51       	subi	r30, 0x15	; 21
    1b1a:	fb 4f       	sbci	r31, 0xFB	; 251
    1b1c:	82 85       	ldd	r24, Z+10	; 0x0a
    1b1e:	80 93 0e 06 	sts	0x060E, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    1b22:	f0 93 0d 06 	sts	0x060D, r31
    1b26:	e0 93 0c 06 	sts	0x060C, r30
    1b2a:	f0 93 fe 05 	sts	0x05FE, r31
    1b2e:	e0 93 fd 05 	sts	0x05FD, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    1b32:	80 93 ff 05 	sts	0x05FF, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    1b36:	0e 94 dd 22 	call	0x45ba	; 0x45ba <nrk_target_start>
    nrk_stack_pointer_init(); 
    1b3a:	0e 94 c7 22 	call	0x458e	; 0x458e <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    1b3e:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <nrk_start_high_ready_task>
    1b42:	16 c0       	rjmp	.+44     	; 0x1b70 <nrk_start+0x80>
    1b44:	83 ef       	ldi	r24, 0xF3	; 243
    1b46:	e8 2e       	mov	r14, r24
    1b48:	84 e0       	ldi	r24, 0x04	; 4
    1b4a:	f8 2e       	mov	r15, r24
    1b4c:	d0 e0       	ldi	r29, 0x00	; 0
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    1b4e:	cd 17       	cp	r28, r29
    1b50:	41 f0       	breq	.+16     	; 0x1b62 <nrk_start+0x72>
    1b52:	f7 01       	movw	r30, r14
    1b54:	80 81       	ld	r24, Z
    1b56:	d8 12       	cpse	r13, r24
    1b58:	04 c0       	rjmp	.+8      	; 0x1b62 <nrk_start+0x72>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    1b5a:	6d 2d       	mov	r22, r13
    1b5c:	85 e0       	ldi	r24, 0x05	; 5
    1b5e:	0e 94 5f 10 	call	0x20be	; 0x20be <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    1b62:	df 5f       	subi	r29, 0xFF	; 255
    1b64:	fb e2       	ldi	r31, 0x2B	; 43
    1b66:	ef 0e       	add	r14, r31
    1b68:	f1 1c       	adc	r15, r1
    1b6a:	d6 30       	cpi	r29, 0x06	; 6
    1b6c:	81 f7       	brne	.-32     	; 0x1b4e <nrk_start+0x5e>
    1b6e:	c8 cf       	rjmp	.-112    	; 0x1b00 <nrk_start+0x10>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    1b70:	ff cf       	rjmp	.-2      	; 0x1b70 <nrk_start+0x80>

00001b72 <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    1b72:	cf 92       	push	r12
    1b74:	df 92       	push	r13
    1b76:	ef 92       	push	r14
    1b78:	ff 92       	push	r15
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	ec 01       	movw	r28, r24
    1b84:	8b 01       	movw	r16, r22
    1b86:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    1b88:	89 85       	ldd	r24, Y+9	; 0x09
    1b8a:	82 30       	cpi	r24, 0x02	; 2
    1b8c:	21 f0       	breq	.+8      	; 0x1b96 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    1b8e:	80 91 fb 05 	lds	r24, 0x05FB
    1b92:	88 83       	st	Y, r24
    1b94:	01 c0       	rjmp	.+2      	; 0x1b98 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    1b96:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    1b98:	80 91 fb 05 	lds	r24, 0x05FB
    1b9c:	86 30       	cpi	r24, 0x06	; 6
    1b9e:	20 f0       	brcs	.+8      	; 0x1ba8 <nrk_TCB_init+0x36>
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	87 e0       	ldi	r24, 0x07	; 7
    1ba4:	0e 94 5f 10 	call	0x20be	; 0x20be <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	82 30       	cpi	r24, 0x02	; 2
    1bac:	29 f0       	breq	.+10     	; 0x1bb8 <nrk_TCB_init+0x46>
    1bae:	80 91 fb 05 	lds	r24, 0x05FB
    1bb2:	8f 5f       	subi	r24, 0xFF	; 255
    1bb4:	80 93 fb 05 	sts	0x05FB, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    1bb8:	80 91 fb 05 	lds	r24, 0x05FB
    1bbc:	81 11       	cpse	r24, r1
    1bbe:	03 c0       	rjmp	.+6      	; 0x1bc6 <nrk_TCB_init+0x54>
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	80 93 fb 05 	sts	0x05FB, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    1bc6:	38 81       	ld	r19, Y
    1bc8:	2b e2       	ldi	r18, 0x2B	; 43
    1bca:	32 03       	mulsu	r19, r18
    1bcc:	f0 01       	movw	r30, r0
    1bce:	11 24       	eor	r1, r1
    1bd0:	e5 51       	subi	r30, 0x15	; 21
    1bd2:	fb 4f       	sbci	r31, 0xFB	; 251
    1bd4:	11 83       	std	Z+1, r17	; 0x01
    1bd6:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    1bd8:	88 85       	ldd	r24, Y+8	; 0x08
    1bda:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    1bdc:	38 81       	ld	r19, Y
    1bde:	32 03       	mulsu	r19, r18
    1be0:	f0 01       	movw	r30, r0
    1be2:	11 24       	eor	r1, r1
    1be4:	e5 51       	subi	r30, 0x15	; 21
    1be6:	fb 4f       	sbci	r31, 0xFB	; 251
    1be8:	83 e0       	ldi	r24, 0x03	; 3
    1bea:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    1bec:	38 81       	ld	r19, Y
    1bee:	32 03       	mulsu	r19, r18
    1bf0:	f0 01       	movw	r30, r0
    1bf2:	11 24       	eor	r1, r1
    1bf4:	e5 51       	subi	r30, 0x15	; 21
    1bf6:	fb 4f       	sbci	r31, 0xFB	; 251
    1bf8:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    1bfa:	08 81       	ld	r16, Y
    1bfc:	02 03       	mulsu	r16, r18
    1bfe:	80 01       	movw	r16, r0
    1c00:	11 24       	eor	r1, r1
    1c02:	05 51       	subi	r16, 0x15	; 21
    1c04:	1b 4f       	sbci	r17, 0xFB	; 251
    1c06:	f8 01       	movw	r30, r16
    1c08:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	0b 96       	adiw	r24, 0x0b	; 11
    1c0e:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <_nrk_time_to_ticks_long>
    1c12:	f8 01       	movw	r30, r16
    1c14:	61 a3       	std	Z+33, r22	; 0x21
    1c16:	72 a3       	std	Z+34, r23	; 0x22
    1c18:	83 a3       	std	Z+35, r24	; 0x23
    1c1a:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    1c1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c20:	ad 85       	ldd	r26, Y+13	; 0x0d
    1c22:	be 85       	ldd	r27, Y+14	; 0x0e
    1c24:	88 33       	cpi	r24, 0x38	; 56
    1c26:	99 48       	sbci	r25, 0x89	; 137
    1c28:	a1 44       	sbci	r26, 0x41	; 65
    1c2a:	b1 05       	cpc	r27, r1
    1c2c:	20 f0       	brcs	.+8      	; 0x1c36 <nrk_TCB_init+0xc4>
    1c2e:	68 81       	ld	r22, Y
    1c30:	86 e1       	ldi	r24, 0x16	; 22
    1c32:	0e 94 5f 10 	call	0x20be	; 0x20be <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    1c36:	c8 80       	ld	r12, Y
    1c38:	dd 24       	eor	r13, r13
    1c3a:	c7 fc       	sbrc	r12, 7
    1c3c:	d0 94       	com	r13
    1c3e:	ce 01       	movw	r24, r28
    1c40:	4b 96       	adiw	r24, 0x1b	; 27
    1c42:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <_nrk_time_to_ticks_long>
    1c46:	1b e2       	ldi	r17, 0x2B	; 43
    1c48:	1c 9d       	mul	r17, r12
    1c4a:	f0 01       	movw	r30, r0
    1c4c:	1d 9d       	mul	r17, r13
    1c4e:	f0 0d       	add	r31, r0
    1c50:	11 24       	eor	r1, r1
    1c52:	e5 51       	subi	r30, 0x15	; 21
    1c54:	fb 4f       	sbci	r31, 0xFB	; 251
    1c56:	65 8b       	std	Z+21, r22	; 0x15
    1c58:	76 8b       	std	Z+22, r23	; 0x16
    1c5a:	87 8b       	std	Z+23, r24	; 0x17
    1c5c:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    1c5e:	28 81       	ld	r18, Y
    1c60:	21 03       	mulsu	r18, r17
    1c62:	c0 01       	movw	r24, r0
    1c64:	11 24       	eor	r1, r1
    1c66:	9c 01       	movw	r18, r24
    1c68:	25 51       	subi	r18, 0x15	; 21
    1c6a:	3b 4f       	sbci	r19, 0xFB	; 251
    1c6c:	69 01       	movw	r12, r18
    1c6e:	f9 01       	movw	r30, r18
    1c70:	45 89       	ldd	r20, Z+21	; 0x15
    1c72:	56 89       	ldd	r21, Z+22	; 0x16
    1c74:	67 89       	ldd	r22, Z+23	; 0x17
    1c76:	70 8d       	ldd	r23, Z+24	; 0x18
    1c78:	81 a1       	ldd	r24, Z+33	; 0x21
    1c7a:	92 a1       	ldd	r25, Z+34	; 0x22
    1c7c:	a3 a1       	ldd	r26, Z+35	; 0x23
    1c7e:	b4 a1       	ldd	r27, Z+36	; 0x24
    1c80:	84 0f       	add	r24, r20
    1c82:	95 1f       	adc	r25, r21
    1c84:	a6 1f       	adc	r26, r22
    1c86:	b7 1f       	adc	r27, r23
    1c88:	81 8f       	std	Z+25, r24	; 0x19
    1c8a:	92 8f       	std	Z+26, r25	; 0x1a
    1c8c:	a3 8f       	std	Z+27, r26	; 0x1b
    1c8e:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    1c90:	ce 01       	movw	r24, r28
    1c92:	43 96       	adiw	r24, 0x13	; 19
    1c94:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <_nrk_time_to_ticks_long>
    1c98:	f6 01       	movw	r30, r12
    1c9a:	65 a3       	std	Z+37, r22	; 0x25
    1c9c:	76 a3       	std	Z+38, r23	; 0x26
    1c9e:	87 a3       	std	Z+39, r24	; 0x27
    1ca0:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    1ca2:	28 81       	ld	r18, Y
    1ca4:	21 03       	mulsu	r18, r17
    1ca6:	f0 01       	movw	r30, r0
    1ca8:	11 24       	eor	r1, r1
    1caa:	e5 51       	subi	r30, 0x15	; 21
    1cac:	fb 4f       	sbci	r31, 0xFB	; 251
    1cae:	85 a1       	ldd	r24, Z+37	; 0x25
    1cb0:	96 a1       	ldd	r25, Z+38	; 0x26
    1cb2:	a7 a1       	ldd	r26, Z+39	; 0x27
    1cb4:	b0 a5       	ldd	r27, Z+40	; 0x28
    1cb6:	85 8f       	std	Z+29, r24	; 0x1d
    1cb8:	96 8f       	std	Z+30, r25	; 0x1e
    1cba:	a7 8f       	std	Z+31, r26	; 0x1f
    1cbc:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	92 a7       	std	Z+42, r25	; 0x2a
    1cc4:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    1cc6:	f3 82       	std	Z+3, r15	; 0x03
    1cc8:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    1cca:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	1f 91       	pop	r17
    1cd2:	0f 91       	pop	r16
    1cd4:	ff 90       	pop	r15
    1cd6:	ef 90       	pop	r14
    1cd8:	df 90       	pop	r13
    1cda:	cf 90       	pop	r12
    1cdc:	08 95       	ret

00001cde <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    1cde:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <_nrk_scheduler>

00001ce2 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    1ce2:	85 e6       	ldi	r24, 0x65	; 101
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	08 95       	ret

00001ce8 <_nrk_errno_set>:
    1ce8:	e0 91 0c 06 	lds	r30, 0x060C
    1cec:	f0 91 0d 06 	lds	r31, 0x060D
    1cf0:	84 87       	std	Z+12, r24	; 0x0c
    1cf2:	08 95       	ret

00001cf4 <nrk_errno_get>:
    nrk_cur_task_TCB->errno = error_code;
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    1cf4:	e0 91 0c 06 	lds	r30, 0x060C
    1cf8:	f0 91 0d 06 	lds	r31, 0x060D
}
    1cfc:	84 85       	ldd	r24, Z+12	; 0x0c
    1cfe:	08 95       	ret

00001d00 <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    1d00:	fc 01       	movw	r30, r24
    if (error_num == 0)
    1d02:	80 91 2d 04 	lds	r24, 0x042D
    1d06:	88 23       	and	r24, r24
    1d08:	31 f0       	breq	.+12     	; 0x1d16 <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    1d0a:	db 01       	movw	r26, r22
    1d0c:	8c 93       	st	X, r24
    *task_id = error_task;
    1d0e:	80 91 ac 03 	lds	r24, 0x03AC
    1d12:	80 83       	st	Z, r24
    return 1;
    1d14:	81 e0       	ldi	r24, 0x01	; 1
}
    1d16:	08 95       	ret

00001d18 <nrk_error_handle>:
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    1d18:	10 92 2d 04 	sts	0x042D, r1
    1d1c:	08 95       	ret

00001d1e <clear_regs>:
}

inline void clear_regs()
{

        GTCCR=0;
    1d1e:	13 bc       	out	0x23, r1	; 35
        ASSR=0;
    1d20:	10 92 b6 00 	sts	0x00B6, r1

        OCR0B=0;
    1d24:	18 bc       	out	0x28, r1	; 40
        OCR0A=0;
    1d26:	17 bc       	out	0x27, r1	; 39
        TCNT0=0;
    1d28:	16 bc       	out	0x26, r1	; 38
        TCCR0B=0;
    1d2a:	15 bc       	out	0x25, r1	; 37
        TCCR0A=0;
    1d2c:	14 bc       	out	0x24, r1	; 36

        EIMSK=0;
    1d2e:	1d ba       	out	0x1d, r1	; 29
        EIFR=0;
    1d30:	1c ba       	out	0x1c, r1	; 28
        PCIFR=0;
    1d32:	1b ba       	out	0x1b, r1	; 27


        OCR3B =0;
    1d34:	10 92 9b 00 	sts	0x009B, r1
    1d38:	10 92 9a 00 	sts	0x009A, r1
        OCR3A =0;
    1d3c:	10 92 99 00 	sts	0x0099, r1
    1d40:	10 92 98 00 	sts	0x0098, r1
        TCNT3 =0;
    1d44:	10 92 95 00 	sts	0x0095, r1
    1d48:	10 92 94 00 	sts	0x0094, r1
        TCCR3B=0;
    1d4c:	10 92 91 00 	sts	0x0091, r1
        TCCR3A=0;
    1d50:	10 92 90 00 	sts	0x0090, r1
        TIFR3=0;
    1d54:	18 ba       	out	0x18, r1	; 24
        TIMSK3=0;
    1d56:	10 92 71 00 	sts	0x0071, r1


        OCR2B =0;
    1d5a:	10 92 b4 00 	sts	0x00B4, r1
        OCR2A =0;
    1d5e:	10 92 b3 00 	sts	0x00B3, r1
        TCNT2 =0;
    1d62:	10 92 b2 00 	sts	0x00B2, r1
        TCCR2B=0;
    1d66:	10 92 b1 00 	sts	0x00B1, r1
        TCCR2A=0;
    1d6a:	e0 eb       	ldi	r30, 0xB0	; 176
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	10 82       	st	Z, r1
        TCCR2A=0;
    1d70:	10 82       	st	Z, r1
        TIFR2=0;
    1d72:	17 ba       	out	0x17, r1	; 23
        TIMSK2=0;
    1d74:	10 92 70 00 	sts	0x0070, r1


	// set all bits to 1 in order to clear
	MCUSR=0xff;
    1d78:	8f ef       	ldi	r24, 0xFF	; 255
    1d7a:	84 bf       	out	0x34, r24	; 52
    1d7c:	08 95       	ret

00001d7e <pause>:
    }

}

void pause()
{
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	1f 92       	push	r1
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1d88:	19 82       	std	Y+1, r1	; 0x01
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	84 36       	cpi	r24, 0x64	; 100
    1d8e:	40 f4       	brcc	.+16     	; 0x1da0 <pause+0x22>
        nrk_spin_wait_us (2000);
    1d90:	80 ed       	ldi	r24, 0xD0	; 208
    1d92:	97 e0       	ldi	r25, 0x07	; 7
    1d94:	0e 94 65 1e 	call	0x3cca	; 0x3cca <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	8f 5f       	subi	r24, 0xFF	; 255
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	f5 cf       	rjmp	.-22     	; 0x1d8a <pause+0xc>
        nrk_spin_wait_us (2000);
}
    1da0:	0f 90       	pop	r0
    1da2:	df 91       	pop	r29
    1da4:	cf 91       	pop	r28
    1da6:	08 95       	ret

00001da8 <blink_dash>:

}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	0e 94 9e 0b 	call	0x173c	; 0x173c <nrk_led_set>
    pause();
    1db0:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <pause>
    pause();
    1db4:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <pause>
    pause();
    1db8:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <pause>
    nrk_led_clr(GREEN_LED);
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	0e 94 87 0b 	call	0x170e	; 0x170e <nrk_led_clr>
    pause();
    1dc4:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <pause>

00001dc8 <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	0e 94 9e 0b 	call	0x173c	; 0x173c <nrk_led_set>
    pause();
    1dd0:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <pause>
    nrk_led_clr(GREEN_LED);
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	0e 94 87 0b 	call	0x170e	; 0x170e <nrk_led_clr>
    pause();
    1ddc:	0c 94 bf 0e 	jmp	0x1d7e	; 0x1d7e <pause>

00001de0 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    1de0:	ff 92       	push	r15
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <blink_morse_code_error+0xc>
    1dec:	1f 92       	push	r1
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    1df2:	1f 92       	push	r1
    1df4:	8f 93       	push	r24
    1df6:	8b e4       	ldi	r24, 0x4B	; 75
    1df8:	93 e0       	ldi	r25, 0x03	; 3
    1dfa:	9f 93       	push	r25
    1dfc:	8f 93       	push	r24
    1dfe:	8e 01       	movw	r16, r28
    1e00:	0f 5f       	subi	r16, 0xFF	; 255
    1e02:	1f 4f       	sbci	r17, 0xFF	; 255
    1e04:	1f 93       	push	r17
    1e06:	0f 93       	push	r16
    1e08:	0e 94 38 26 	call	0x4c70	; 0x4c70 <sprintf>

    for(i=0; i<strlen(str); i++ )
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	f1 2c       	mov	r15, r1
    1e1a:	f8 01       	movw	r30, r16
    1e1c:	01 90       	ld	r0, Z+
    1e1e:	00 20       	and	r0, r0
    1e20:	e9 f7       	brne	.-6      	; 0x1e1c <blink_morse_code_error+0x3c>
    1e22:	31 97       	sbiw	r30, 0x01	; 1
    1e24:	e0 1b       	sub	r30, r16
    1e26:	f1 0b       	sbc	r31, r17
    1e28:	8f 2d       	mov	r24, r15
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	8e 17       	cp	r24, r30
    1e2e:	9f 07       	cpc	r25, r31
    1e30:	08 f0       	brcs	.+2      	; 0x1e34 <blink_morse_code_error+0x54>
    1e32:	5d c0       	rjmp	.+186    	; 0x1eee <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    1e34:	f8 01       	movw	r30, r16
    1e36:	e8 0f       	add	r30, r24
    1e38:	f9 1f       	adc	r31, r25
    1e3a:	e0 81       	ld	r30, Z
    1e3c:	8e 2f       	mov	r24, r30
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	fc 01       	movw	r30, r24
    1e42:	f0 97       	sbiw	r30, 0x30	; 48
    1e44:	ea 30       	cpi	r30, 0x0A	; 10
    1e46:	f1 05       	cpc	r31, r1
    1e48:	08 f0       	brcs	.+2      	; 0x1e4c <blink_morse_code_error+0x6c>
    1e4a:	49 c0       	rjmp	.+146    	; 0x1ede <blink_morse_code_error+0xfe>
    1e4c:	e6 54       	subi	r30, 0x46	; 70
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	0c 94 31 25 	jmp	0x4a62	; 0x4a62 <__tablejump2__>
        {
        case '0':
            blink_dash();
    1e54:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <blink_dash>
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    1e5a:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <blink_dot>
            blink_dash();
    1e5e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <blink_dash>
            blink_dash();
    1e62:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <blink_dash>
            blink_dash();
    1e66:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <blink_dash>
            blink_dash();
    1e6a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <blink_dash>
            break;
    1e6e:	37 c0       	rjmp	.+110    	; 0x1ede <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    1e70:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <blink_dot>
            blink_dot();
    1e74:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <blink_dot>
    1e78:	f4 cf       	rjmp	.-24     	; 0x1e62 <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    1e7a:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <blink_dot>
            blink_dot();
    1e7e:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <blink_dot>
            blink_dot();
    1e82:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <blink_dot>
    1e86:	ef cf       	rjmp	.-34     	; 0x1e66 <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    1e88:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <blink_dot>
            blink_dot();
    1e8c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <blink_dot>
            blink_dot();
    1e90:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <blink_dot>
            blink_dot();
    1e94:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <blink_dot>
    1e98:	e8 cf       	rjmp	.-48     	; 0x1e6a <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    1e9a:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <blink_dot>
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    1ea0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <blink_dash>
            blink_dot();
    1ea4:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <blink_dot>
    1ea8:	04 c0       	rjmp	.+8      	; 0x1eb2 <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    1eaa:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <blink_dash>
            blink_dash();
    1eae:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <blink_dash>
            blink_dot();
    1eb2:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <blink_dot>
    1eb6:	06 c0       	rjmp	.+12     	; 0x1ec4 <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    1eb8:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <blink_dash>
            blink_dash();
    1ebc:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <blink_dash>
            blink_dash();
    1ec0:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <blink_dash>
            blink_dot();
    1ec4:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <blink_dot>
    1ec8:	08 c0       	rjmp	.+16     	; 0x1eda <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    1eca:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <blink_dash>
            blink_dash();
    1ece:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <blink_dash>
            blink_dash();
    1ed2:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <blink_dash>
            blink_dash();
    1ed6:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <blink_dash>
            blink_dot();
    1eda:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <blink_dot>
            break;
        }
        pause();
    1ede:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <pause>
        pause();
    1ee2:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <pause>
        pause();
    1ee6:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    1eea:	f3 94       	inc	r15
    1eec:	96 cf       	rjmp	.-212    	; 0x1e1a <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	08 95       	ret

00001f00 <nrk_error_print>:

}


inline int8_t nrk_error_print ()
{
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
uint8_t i,t;




    if (error_num == 0)
    1f08:	80 91 2d 04 	lds	r24, 0x042D
    1f0c:	88 23       	and	r24, r24
    1f0e:	09 f4       	brne	.+2      	; 0x1f12 <nrk_error_print+0x12>
    1f10:	c2 c0       	rjmp	.+388    	; 0x2096 <nrk_error_print+0x196>
        return 0;


// If looping, we need to disable the watchdog and interrupts
#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        nrk_int_disable ();
    1f12:	0e 94 cf 0c 	call	0x199e	; 0x199e <nrk_int_disable>
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
        printf ("%d", error_task);
    1f16:	0b e4       	ldi	r16, 0x4B	; 75
    1f18:	13 e0       	ldi	r17, 0x03	; 3
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    1f1a:	85 ef       	ldi	r24, 0xF5	; 245
    1f1c:	93 e0       	ldi	r25, 0x03	; 3
    1f1e:	0e 94 18 08 	call	0x1030	; 0x1030 <nrk_kprintf>
        printf ("%d", error_task);
    1f22:	80 91 ac 03 	lds	r24, 0x03AC
    1f26:	1f 92       	push	r1
    1f28:	8f 93       	push	r24
    1f2a:	1f 93       	push	r17
    1f2c:	0f 93       	push	r16
    1f2e:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
        nrk_kprintf (PSTR ("): "));
    1f32:	81 ef       	ldi	r24, 0xF1	; 241
    1f34:	93 e0       	ldi	r25, 0x03	; 3
    1f36:	0e 94 18 08 	call	0x1030	; 0x1030 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	80 91 2d 04 	lds	r24, 0x042D
    1f46:	88 31       	cpi	r24, 0x18	; 24
    1f48:	10 f0       	brcs	.+4      	; 0x1f4e <nrk_error_print+0x4e>
            error_num = NRK_UNKOWN;
    1f4a:	10 92 2d 04 	sts	0x042D, r1
        switch (error_num)
    1f4e:	e0 91 2d 04 	lds	r30, 0x042D
    1f52:	8e 2f       	mov	r24, r30
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	fc 01       	movw	r30, r24
    1f58:	31 97       	sbiw	r30, 0x01	; 1
    1f5a:	e6 31       	cpi	r30, 0x16	; 22
    1f5c:	f1 05       	cpc	r31, r1
    1f5e:	08 f0       	brcs	.+2      	; 0x1f62 <nrk_error_print+0x62>
    1f60:	46 c0       	rjmp	.+140    	; 0x1fee <nrk_error_print+0xee>
    1f62:	ec 53       	subi	r30, 0x3C	; 60
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	0c 94 31 25 	jmp	0x4a62	; 0x4a62 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    1f6a:	85 eb       	ldi	r24, 0xB5	; 181
    1f6c:	93 e0       	ldi	r25, 0x03	; 3
    1f6e:	41 c0       	rjmp	.+130    	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    1f70:	8e e8       	ldi	r24, 0x8E	; 142
    1f72:	93 e0       	ldi	r25, 0x03	; 3
    1f74:	3e c0       	rjmp	.+124    	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    1f76:	8a e7       	ldi	r24, 0x7A	; 122
    1f78:	93 e0       	ldi	r25, 0x03	; 3
    1f7a:	3b c0       	rjmp	.+118    	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    1f7c:	84 e6       	ldi	r24, 0x64	; 100
    1f7e:	93 e0       	ldi	r25, 0x03	; 3
    1f80:	38 c0       	rjmp	.+112    	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    1f82:	89 e4       	ldi	r24, 0x49	; 73
    1f84:	93 e0       	ldi	r25, 0x03	; 3
    1f86:	35 c0       	rjmp	.+106    	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    1f88:	83 e3       	ldi	r24, 0x33	; 51
    1f8a:	93 e0       	ldi	r25, 0x03	; 3
    1f8c:	32 c0       	rjmp	.+100    	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    1f8e:	8b e1       	ldi	r24, 0x1B	; 27
    1f90:	93 e0       	ldi	r25, 0x03	; 3
    1f92:	2f c0       	rjmp	.+94     	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    1f94:	88 e0       	ldi	r24, 0x08	; 8
    1f96:	93 e0       	ldi	r25, 0x03	; 3
    1f98:	2c c0       	rjmp	.+88     	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    1f9a:	85 ef       	ldi	r24, 0xF5	; 245
    1f9c:	92 e0       	ldi	r25, 0x02	; 2
    1f9e:	29 c0       	rjmp	.+82     	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    1fa0:	87 ed       	ldi	r24, 0xD7	; 215
    1fa2:	92 e0       	ldi	r25, 0x02	; 2
    1fa4:	26 c0       	rjmp	.+76     	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    1fa6:	82 eb       	ldi	r24, 0xB2	; 178
    1fa8:	92 e0       	ldi	r25, 0x02	; 2
    1faa:	23 c0       	rjmp	.+70     	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    1fac:	86 ea       	ldi	r24, 0xA6	; 166
    1fae:	92 e0       	ldi	r25, 0x02	; 2
    1fb0:	20 c0       	rjmp	.+64     	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    1fb2:	8b e8       	ldi	r24, 0x8B	; 139
    1fb4:	92 e0       	ldi	r25, 0x02	; 2
    1fb6:	1d c0       	rjmp	.+58     	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    1fb8:	8c e7       	ldi	r24, 0x7C	; 124
    1fba:	92 e0       	ldi	r25, 0x02	; 2
    1fbc:	1a c0       	rjmp	.+52     	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    1fbe:	88 e6       	ldi	r24, 0x68	; 104
    1fc0:	92 e0       	ldi	r25, 0x02	; 2
    1fc2:	17 c0       	rjmp	.+46     	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    1fc4:	87 e5       	ldi	r24, 0x57	; 87
    1fc6:	92 e0       	ldi	r25, 0x02	; 2
    1fc8:	14 c0       	rjmp	.+40     	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    1fca:	83 e4       	ldi	r24, 0x43	; 67
    1fcc:	92 e0       	ldi	r25, 0x02	; 2
    1fce:	11 c0       	rjmp	.+34     	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    1fd0:	83 e2       	ldi	r24, 0x23	; 35
    1fd2:	92 e0       	ldi	r25, 0x02	; 2
    1fd4:	0e c0       	rjmp	.+28     	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    1fd6:	8b e0       	ldi	r24, 0x0B	; 11
    1fd8:	92 e0       	ldi	r25, 0x02	; 2
    1fda:	0b c0       	rjmp	.+22     	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    1fdc:	80 ef       	ldi	r24, 0xF0	; 240
    1fde:	91 e0       	ldi	r25, 0x01	; 1
    1fe0:	08 c0       	rjmp	.+16     	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    1fe2:	8f ed       	ldi	r24, 0xDF	; 223
    1fe4:	91 e0       	ldi	r25, 0x01	; 1
    1fe6:	05 c0       	rjmp	.+10     	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    1fe8:	80 ed       	ldi	r24, 0xD0	; 208
    1fea:	91 e0       	ldi	r25, 0x01	; 1
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <nrk_error_print+0xf2>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    1fee:	89 ec       	ldi	r24, 0xC9	; 201
    1ff0:	91 e0       	ldi	r25, 0x01	; 1
    1ff2:	0e 94 18 08 	call	0x1030	; 0x1030 <nrk_kprintf>
        }
        putchar ('\r');
    1ff6:	60 91 9c 06 	lds	r22, 0x069C
    1ffa:	70 91 9d 06 	lds	r23, 0x069D
    1ffe:	8d e0       	ldi	r24, 0x0D	; 13
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <fputc>
        putchar ('\n');
    2006:	60 91 9c 06 	lds	r22, 0x069C
    200a:	70 91 9d 06 	lds	r23, 0x069D
    200e:	8a e0       	ldi	r24, 0x0A	; 10
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <fputc>
    2016:	c4 e1       	ldi	r28, 0x14	; 20


#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
    2018:	82 e0       	ldi	r24, 0x02	; 2
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	0e 94 9e 0b 	call	0x173c	; 0x173c <nrk_led_set>
            nrk_led_clr (3);
    2020:	83 e0       	ldi	r24, 0x03	; 3
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	0e 94 87 0b 	call	0x170e	; 0x170e <nrk_led_clr>
    2028:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    202a:	88 ee       	ldi	r24, 0xE8	; 232
    202c:	93 e0       	ldi	r25, 0x03	; 3
    202e:	0e 94 65 1e 	call	0x3cca	; 0x3cca <nrk_spin_wait_us>
    2032:	d1 50       	subi	r29, 0x01	; 1
#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    2034:	d1 f7       	brne	.-12     	; 0x202a <nrk_error_print+0x12a>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    2036:	83 e0       	ldi	r24, 0x03	; 3
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 94 9e 0b 	call	0x173c	; 0x173c <nrk_led_set>
            nrk_led_clr (2);
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	0e 94 87 0b 	call	0x170e	; 0x170e <nrk_led_clr>
    2046:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2048:	88 ee       	ldi	r24, 0xE8	; 232
    204a:	93 e0       	ldi	r25, 0x03	; 3
    204c:	0e 94 65 1e 	call	0x3cca	; 0x3cca <nrk_spin_wait_us>
    2050:	d1 50       	subi	r29, 0x01	; 1
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    2052:	d1 f7       	brne	.-12     	; 0x2048 <nrk_error_print+0x148>
    2054:	c1 50       	subi	r28, 0x01	; 1
        putchar ('\r');
        putchar ('\n');


#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
    2056:	01 f7       	brne	.-64     	; 0x2018 <nrk_error_print+0x118>
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }

        nrk_led_clr(2);
    2058:	82 e0       	ldi	r24, 0x02	; 2
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	0e 94 87 0b 	call	0x170e	; 0x170e <nrk_led_clr>
        nrk_led_clr(3);
    2060:	83 e0       	ldi	r24, 0x03	; 3
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	0e 94 87 0b 	call	0x170e	; 0x170e <nrk_led_clr>
        blink_morse_code_error( error_task );
    2068:	80 91 ac 03 	lds	r24, 0x03AC
    206c:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <blink_morse_code_error>
        pause();
    2070:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <pause>
        nrk_led_set(2);
    2074:	82 e0       	ldi	r24, 0x02	; 2
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	0e 94 9e 0b 	call	0x173c	; 0x173c <nrk_led_set>
        pause();
    207c:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <pause>
        nrk_led_clr(2);
    2080:	82 e0       	ldi	r24, 0x02	; 2
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	0e 94 87 0b 	call	0x170e	; 0x170e <nrk_led_clr>
        pause();
    2088:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <pause>
        blink_morse_code_error( error_num);
    208c:	80 91 2d 04 	lds	r24, 0x042D
    2090:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <blink_morse_code_error>
}
    2094:	42 cf       	rjmp	.-380    	; 0x1f1a <nrk_error_print+0x1a>


#endif

    return error_num;
}
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	df 91       	pop	r29
    209a:	cf 91       	pop	r28
    209c:	1f 91       	pop	r17
    209e:	0f 91       	pop	r16
    20a0:	08 95       	ret

000020a2 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    20a2:	80 93 2d 04 	sts	0x042D, r24
    error_task = nrk_cur_task_TCB->task_ID;
    20a6:	e0 91 0c 06 	lds	r30, 0x060C
    20aa:	f0 91 0d 06 	lds	r31, 0x060D
    20ae:	80 85       	ldd	r24, Z+8	; 0x08
    20b0:	80 93 ac 03 	sts	0x03AC, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    20b4:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <nrk_error_print>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    20b8:	10 92 2d 04 	sts	0x042D, r1
    20bc:	08 95       	ret

000020be <nrk_kernel_error_add>:

}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    20be:	80 93 2d 04 	sts	0x042D, r24
    error_task = task;
    20c2:	60 93 ac 03 	sts	0x03AC, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    20c6:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <nrk_error_print>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    20ca:	10 92 2d 04 	sts	0x042D, r1
    20ce:	08 95       	ret

000020d0 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    20d0:	6f 92       	push	r6
    20d2:	7f 92       	push	r7
    20d4:	8f 92       	push	r8
    20d6:	9f 92       	push	r9
    20d8:	af 92       	push	r10
    20da:	bf 92       	push	r11
    20dc:	cf 92       	push	r12
    20de:	df 92       	push	r13
    20e0:	ef 92       	push	r14
    20e2:	ff 92       	push	r15
    20e4:	0f 93       	push	r16
    20e6:	1f 93       	push	r17
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	94 e0       	ldi	r25, 0x04	; 4
    20f0:	0e 94 18 08 	call	0x1030	; 0x1030 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    20f4:	e0 91 0c 06 	lds	r30, 0x060C
    20f8:	f0 91 0d 06 	lds	r31, 0x060D
    20fc:	80 85       	ldd	r24, Z+8	; 0x08
    20fe:	28 2f       	mov	r18, r24
    2100:	33 27       	eor	r19, r19
    2102:	27 fd       	sbrc	r18, 7
    2104:	30 95       	com	r19
    2106:	3f 93       	push	r19
    2108:	8f 93       	push	r24
    210a:	8e e4       	ldi	r24, 0x4E	; 78
    210c:	93 e0       	ldi	r25, 0x03	; 3
    210e:	9f 93       	push	r25
    2110:	8f 93       	push	r24
    2112:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    2116:	e0 91 0c 06 	lds	r30, 0x060C
    211a:	f0 91 0d 06 	lds	r31, 0x060D
    211e:	c2 81       	ldd	r28, Z+2	; 0x02
    2120:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    2122:	df 93       	push	r29
    2124:	cf 93       	push	r28
    2126:	82 e8       	ldi	r24, 0x82	; 130
    2128:	93 e0       	ldi	r25, 0x03	; 3
    212a:	9f 93       	push	r25
    212c:	8f 93       	push	r24
    212e:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
    printf( "canary = %x ",*stkc );
    2132:	88 81       	ld	r24, Y
    2134:	1f 92       	push	r1
    2136:	8f 93       	push	r24
    2138:	87 e5       	ldi	r24, 0x57	; 87
    213a:	93 e0       	ldi	r25, 0x03	; 3
    213c:	9f 93       	push	r25
    213e:	8f 93       	push	r24
    2140:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    2144:	e0 91 0c 06 	lds	r30, 0x060C
    2148:	f0 91 0d 06 	lds	r31, 0x060D
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    214c:	81 81       	ldd	r24, Z+1	; 0x01
    214e:	8f 93       	push	r24
    2150:	80 81       	ld	r24, Z
    2152:	8f 93       	push	r24
    2154:	84 e6       	ldi	r24, 0x64	; 100
    2156:	93 e0       	ldi	r25, 0x03	; 3
    2158:	9f 93       	push	r25
    215a:	8f 93       	push	r24
    215c:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    2160:	80 91 0d 06 	lds	r24, 0x060D
    2164:	8f 93       	push	r24
    2166:	80 91 0c 06 	lds	r24, 0x060C
    216a:	8f 93       	push	r24
    216c:	8e e6       	ldi	r24, 0x6E	; 110
    216e:	93 e0       	ldi	r25, 0x03	; 3
    2170:	9f 93       	push	r25
    2172:	8f 93       	push	r24
    2174:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
    2178:	cb ee       	ldi	r28, 0xEB	; 235
    217a:	d4 e0       	ldi	r29, 0x04	; 4
    217c:	ed b7       	in	r30, 0x3d	; 61
    217e:	fe b7       	in	r31, 0x3e	; 62
    2180:	74 96       	adiw	r30, 0x14	; 20
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	fe bf       	out	0x3e, r31	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	ed bf       	out	0x3d, r30	; 61
    218c:	00 e0       	ldi	r16, 0x00	; 0
    218e:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2190:	8e e7       	ldi	r24, 0x7E	; 126
    2192:	68 2e       	mov	r6, r24
    2194:	83 e0       	ldi	r24, 0x03	; 3
    2196:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    2198:	97 e5       	ldi	r25, 0x57	; 87
    219a:	89 2e       	mov	r8, r25
    219c:	93 e0       	ldi	r25, 0x03	; 3
    219e:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    21a0:	24 e6       	ldi	r18, 0x64	; 100
    21a2:	a2 2e       	mov	r10, r18
    21a4:	23 e0       	ldi	r18, 0x03	; 3
    21a6:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    21a8:	3e e6       	ldi	r19, 0x6E	; 110
    21aa:	c3 2e       	mov	r12, r19
    21ac:	33 e0       	ldi	r19, 0x03	; 3
    21ae:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    21b0:	ea 80       	ldd	r14, Y+2	; 0x02
    21b2:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    21b4:	ff 92       	push	r15
    21b6:	ef 92       	push	r14
    21b8:	1f 93       	push	r17
    21ba:	0f 93       	push	r16
    21bc:	7f 92       	push	r7
    21be:	6f 92       	push	r6
    21c0:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
        printf( "canary = %x ",*stkc );
    21c4:	f7 01       	movw	r30, r14
    21c6:	80 81       	ld	r24, Z
    21c8:	1f 92       	push	r1
    21ca:	8f 93       	push	r24
    21cc:	9f 92       	push	r9
    21ce:	8f 92       	push	r8
    21d0:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	8f 93       	push	r24
    21d8:	88 81       	ld	r24, Y
    21da:	8f 93       	push	r24
    21dc:	bf 92       	push	r11
    21de:	af 92       	push	r10
    21e0:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	df 92       	push	r13
    21ea:	cf 92       	push	r12
    21ec:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <printf>
    21f0:	0f 5f       	subi	r16, 0xFF	; 255
    21f2:	1f 4f       	sbci	r17, 0xFF	; 255
    21f4:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    21f6:	ed b7       	in	r30, 0x3d	; 61
    21f8:	fe b7       	in	r31, 0x3e	; 62
    21fa:	72 96       	adiw	r30, 0x12	; 18
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	fe bf       	out	0x3e, r31	; 62
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	ed bf       	out	0x3d, r30	; 61
    2206:	06 30       	cpi	r16, 0x06	; 6
    2208:	11 05       	cpc	r17, r1
    220a:	91 f6       	brne	.-92     	; 0x21b0 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	1f 91       	pop	r17
    2212:	0f 91       	pop	r16
    2214:	ff 90       	pop	r15
    2216:	ef 90       	pop	r14
    2218:	df 90       	pop	r13
    221a:	cf 90       	pop	r12
    221c:	bf 90       	pop	r11
    221e:	af 90       	pop	r10
    2220:	9f 90       	pop	r9
    2222:	8f 90       	pop	r8
    2224:	7f 90       	pop	r7
    2226:	6f 90       	pop	r6
    2228:	08 95       	ret

0000222a <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    222e:	e0 91 0c 06 	lds	r30, 0x060C
    2232:	f0 91 0d 06 	lds	r31, 0x060D
    2236:	c2 81       	ldd	r28, Z+2	; 0x02
    2238:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    223a:	88 81       	ld	r24, Y
    223c:	85 35       	cpi	r24, 0x55	; 85
    223e:	39 f0       	breq	.+14     	; 0x224e <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    2240:	0e 94 68 10 	call	0x20d0	; 0x20d0 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	0e 94 51 10 	call	0x20a2	; 0x20a2 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    224a:	85 e5       	ldi	r24, 0x55	; 85
    224c:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    224e:	e0 91 0c 06 	lds	r30, 0x060C
    2252:	f0 91 0d 06 	lds	r31, 0x060D
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2256:	80 81       	ld	r24, Z
    2258:	91 81       	ldd	r25, Z+1	; 0x01
    225a:	81 15       	cp	r24, r1
    225c:	92 44       	sbci	r25, 0x42	; 66
    225e:	38 f0       	brcs	.+14     	; 0x226e <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    2260:	0e 94 68 10 	call	0x20d0	; 0x20d0 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2264:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    2266:	df 91       	pop	r29
    2268:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    226a:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <nrk_error_add>




#endif
}
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	08 95       	ret

00002274 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    2274:	2b e2       	ldi	r18, 0x2B	; 43
    2276:	82 02       	muls	r24, r18
    2278:	c0 01       	movw	r24, r0
    227a:	11 24       	eor	r1, r1
    227c:	fc 01       	movw	r30, r24
    227e:	e5 51       	subi	r30, 0x15	; 21
    2280:	fb 4f       	sbci	r31, 0xFB	; 251
    2282:	a2 81       	ldd	r26, Z+2	; 0x02
    2284:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2286:	8c 91       	ld	r24, X
    2288:	85 35       	cpi	r24, 0x55	; 85
    228a:	19 f0       	breq	.+6      	; 0x2292 <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    228c:	85 e5       	ldi	r24, 0x55	; 85
    228e:	8c 93       	st	X, r24
    2290:	08 c0       	rjmp	.+16     	; 0x22a2 <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	81 15       	cp	r24, r1
    2298:	92 44       	sbci	r25, 0x42	; 66
    229a:	28 f0       	brcs	.+10     	; 0x22a6 <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    229c:	82 e1       	ldi	r24, 0x12	; 18
    229e:	0e 94 51 10 	call	0x20a2	; 0x20a2 <nrk_error_add>
        return NRK_ERROR;
    22a2:	8f ef       	ldi	r24, 0xFF	; 255
    22a4:	08 95       	ret
    }
#endif
    return NRK_OK;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
}
    22a8:	08 95       	ret

000022aa <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    22aa:	0f 93       	push	r16
    22ac:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    22ae:	40 91 ae 03 	lds	r20, 0x03AE
    22b2:	50 91 af 03 	lds	r21, 0x03AF
    22b6:	60 91 b0 03 	lds	r22, 0x03B0
    22ba:	70 91 b1 03 	lds	r23, 0x03B1
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	8a 01       	movw	r16, r20
    22c4:	9b 01       	movw	r18, r22
    22c6:	08 2e       	mov	r0, r24
    22c8:	04 c0       	rjmp	.+8      	; 0x22d2 <nrk_signal_create+0x28>
    22ca:	36 95       	lsr	r19
    22cc:	27 95       	ror	r18
    22ce:	17 95       	ror	r17
    22d0:	07 95       	ror	r16
    22d2:	0a 94       	dec	r0
    22d4:	d2 f7       	brpl	.-12     	; 0x22ca <nrk_signal_create+0x20>
    22d6:	00 fd       	sbrc	r16, 0
    22d8:	19 c0       	rjmp	.+50     	; 0x230c <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    22da:	01 e0       	ldi	r16, 0x01	; 1
    22dc:	10 e0       	ldi	r17, 0x00	; 0
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	08 2e       	mov	r0, r24
    22e4:	04 c0       	rjmp	.+8      	; 0x22ee <nrk_signal_create+0x44>
    22e6:	00 0f       	add	r16, r16
    22e8:	11 1f       	adc	r17, r17
    22ea:	22 1f       	adc	r18, r18
    22ec:	33 1f       	adc	r19, r19
    22ee:	0a 94       	dec	r0
    22f0:	d2 f7       	brpl	.-12     	; 0x22e6 <nrk_signal_create+0x3c>
    22f2:	40 2b       	or	r20, r16
    22f4:	51 2b       	or	r21, r17
    22f6:	62 2b       	or	r22, r18
    22f8:	73 2b       	or	r23, r19
    22fa:	40 93 ae 03 	sts	0x03AE, r20
    22fe:	50 93 af 03 	sts	0x03AF, r21
    2302:	60 93 b0 03 	sts	0x03B0, r22
    2306:	70 93 b1 03 	sts	0x03B1, r23
			return i;
    230a:	05 c0       	rjmp	.+10     	; 0x2316 <nrk_signal_create+0x6c>
    230c:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    230e:	80 32       	cpi	r24, 0x20	; 32
    2310:	91 05       	cpc	r25, r1
    2312:	b9 f6       	brne	.-82     	; 0x22c2 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    2314:	8f ef       	ldi	r24, 0xFF	; 255


}
    2316:	1f 91       	pop	r17
    2318:	0f 91       	pop	r16
    231a:	08 95       	ret

0000231c <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    231c:	e0 91 0c 06 	lds	r30, 0x060C
    2320:	f0 91 0d 06 	lds	r31, 0x060D
    2324:	65 85       	ldd	r22, Z+13	; 0x0d
    2326:	76 85       	ldd	r23, Z+14	; 0x0e
    2328:	87 85       	ldd	r24, Z+15	; 0x0f
    232a:	90 89       	ldd	r25, Z+16	; 0x10
}
    232c:	08 95       	ret

0000232e <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    232e:	cf 92       	push	r12
    2330:	df 92       	push	r13
    2332:	ef 92       	push	r14
    2334:	ff 92       	push	r15
    2336:	0f 93       	push	r16
    2338:	1f 93       	push	r17
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    233e:	c1 2c       	mov	r12, r1
    2340:	d1 2c       	mov	r13, r1
    2342:	76 01       	movw	r14, r12
    2344:	c3 94       	inc	r12
    2346:	08 2e       	mov	r0, r24
    2348:	04 c0       	rjmp	.+8      	; 0x2352 <nrk_signal_delete+0x24>
    234a:	cc 0c       	add	r12, r12
    234c:	dd 1c       	adc	r13, r13
    234e:	ee 1c       	adc	r14, r14
    2350:	ff 1c       	adc	r15, r15
    2352:	0a 94       	dec	r0
    2354:	d2 f7       	brpl	.-12     	; 0x234a <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2356:	40 91 ae 03 	lds	r20, 0x03AE
    235a:	50 91 af 03 	lds	r21, 0x03AF
    235e:	60 91 b0 03 	lds	r22, 0x03B0
    2362:	70 91 b1 03 	lds	r23, 0x03B1
    2366:	4c 21       	and	r20, r12
    2368:	5d 21       	and	r21, r13
    236a:	6e 21       	and	r22, r14
    236c:	7f 21       	and	r23, r15
    236e:	45 2b       	or	r20, r21
    2370:	46 2b       	or	r20, r22
    2372:	47 2b       	or	r20, r23
    2374:	09 f4       	brne	.+2      	; 0x2378 <nrk_signal_delete+0x4a>
    2376:	60 c0       	rjmp	.+192    	; 0x2438 <nrk_signal_delete+0x10a>
    2378:	08 2f       	mov	r16, r24

	nrk_int_disable();
    237a:	0e 94 cf 0c 	call	0x199e	; 0x199e <nrk_int_disable>
    237e:	e4 ef       	ldi	r30, 0xF4	; 244
    2380:	f4 e0       	ldi	r31, 0x04	; 4
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2382:	b7 01       	movw	r22, r14
    2384:	a6 01       	movw	r20, r12
    2386:	40 95       	com	r20
    2388:	50 95       	com	r21
    238a:	60 95       	com	r22
    238c:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    238e:	13 e0       	ldi	r17, 0x03	; 3
    2390:	df 01       	movw	r26, r30
    2392:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    2394:	8c 91       	ld	r24, X
    2396:	8f 3f       	cpi	r24, 0xFF	; 255
    2398:	39 f1       	breq	.+78     	; 0x23e8 <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    239a:	84 81       	ldd	r24, Z+4	; 0x04
    239c:	95 81       	ldd	r25, Z+5	; 0x05
    239e:	a6 81       	ldd	r26, Z+6	; 0x06
    23a0:	b7 81       	ldd	r27, Z+7	; 0x07
    23a2:	8c 15       	cp	r24, r12
    23a4:	9d 05       	cpc	r25, r13
    23a6:	ae 05       	cpc	r26, r14
    23a8:	bf 05       	cpc	r27, r15
    23aa:	51 f4       	brne	.+20     	; 0x23c0 <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    23ac:	10 86       	std	Z+8, r1	; 0x08
    23ae:	11 86       	std	Z+9, r1	; 0x09
    23b0:	12 86       	std	Z+10, r1	; 0x0a
    23b2:	13 86       	std	Z+11, r1	; 0x0b
    23b4:	9f 01       	movw	r18, r30
    23b6:	22 50       	subi	r18, 0x02	; 2
    23b8:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    23ba:	e9 01       	movw	r28, r18
    23bc:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    23be:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    23c0:	84 23       	and	r24, r20
    23c2:	95 23       	and	r25, r21
    23c4:	a6 23       	and	r26, r22
    23c6:	b7 23       	and	r27, r23
    23c8:	84 83       	std	Z+4, r24	; 0x04
    23ca:	95 83       	std	Z+5, r25	; 0x05
    23cc:	a6 83       	std	Z+6, r26	; 0x06
    23ce:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    23d0:	80 85       	ldd	r24, Z+8	; 0x08
    23d2:	91 85       	ldd	r25, Z+9	; 0x09
    23d4:	a2 85       	ldd	r26, Z+10	; 0x0a
    23d6:	b3 85       	ldd	r27, Z+11	; 0x0b
    23d8:	84 23       	and	r24, r20
    23da:	95 23       	and	r25, r21
    23dc:	a6 23       	and	r26, r22
    23de:	b7 23       	and	r27, r23
    23e0:	80 87       	std	Z+8, r24	; 0x08
    23e2:	91 87       	std	Z+9, r25	; 0x09
    23e4:	a2 87       	std	Z+10, r26	; 0x0a
    23e6:	b3 87       	std	Z+11, r27	; 0x0b
    23e8:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    23ea:	d5 e0       	ldi	r29, 0x05	; 5
    23ec:	e6 3f       	cpi	r30, 0xF6	; 246
    23ee:	fd 07       	cpc	r31, r29
    23f0:	79 f6       	brne	.-98     	; 0x2390 <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    23f2:	8e ef       	ldi	r24, 0xFE	; 254
    23f4:	9f ef       	ldi	r25, 0xFF	; 255
    23f6:	af ef       	ldi	r26, 0xFF	; 255
    23f8:	bf ef       	ldi	r27, 0xFF	; 255
    23fa:	04 c0       	rjmp	.+8      	; 0x2404 <nrk_signal_delete+0xd6>
    23fc:	88 0f       	add	r24, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	aa 1f       	adc	r26, r26
    2402:	bb 1f       	adc	r27, r27
    2404:	0a 95       	dec	r16
    2406:	d2 f7       	brpl	.-12     	; 0x23fc <nrk_signal_delete+0xce>
    2408:	40 91 ae 03 	lds	r20, 0x03AE
    240c:	50 91 af 03 	lds	r21, 0x03AF
    2410:	60 91 b0 03 	lds	r22, 0x03B0
    2414:	70 91 b1 03 	lds	r23, 0x03B1
    2418:	84 23       	and	r24, r20
    241a:	95 23       	and	r25, r21
    241c:	a6 23       	and	r26, r22
    241e:	b7 23       	and	r27, r23
    2420:	80 93 ae 03 	sts	0x03AE, r24
    2424:	90 93 af 03 	sts	0x03AF, r25
    2428:	a0 93 b0 03 	sts	0x03B0, r26
    242c:	b0 93 b1 03 	sts	0x03B1, r27
	nrk_int_enable();
    2430:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <nrk_int_enable>

	return NRK_OK;
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	01 c0       	rjmp	.+2      	; 0x243a <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2438:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    243a:	df 91       	pop	r29
    243c:	cf 91       	pop	r28
    243e:	1f 91       	pop	r17
    2440:	0f 91       	pop	r16
    2442:	ff 90       	pop	r15
    2444:	ef 90       	pop	r14
    2446:	df 90       	pop	r13
    2448:	cf 90       	pop	r12
    244a:	08 95       	ret

0000244c <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    244c:	0f 93       	push	r16
    244e:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    2450:	41 e0       	ldi	r20, 0x01	; 1
    2452:	50 e0       	ldi	r21, 0x00	; 0
    2454:	60 e0       	ldi	r22, 0x00	; 0
    2456:	70 e0       	ldi	r23, 0x00	; 0
    2458:	8a 01       	movw	r16, r20
    245a:	9b 01       	movw	r18, r22
    245c:	04 c0       	rjmp	.+8      	; 0x2466 <nrk_signal_unregister+0x1a>
    245e:	00 0f       	add	r16, r16
    2460:	11 1f       	adc	r17, r17
    2462:	22 1f       	adc	r18, r18
    2464:	33 1f       	adc	r19, r19
    2466:	8a 95       	dec	r24
    2468:	d2 f7       	brpl	.-12     	; 0x245e <nrk_signal_unregister+0x12>
    246a:	d9 01       	movw	r26, r18
    246c:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    246e:	e0 91 0c 06 	lds	r30, 0x060C
    2472:	f0 91 0d 06 	lds	r31, 0x060D
    2476:	45 85       	ldd	r20, Z+13	; 0x0d
    2478:	56 85       	ldd	r21, Z+14	; 0x0e
    247a:	67 85       	ldd	r22, Z+15	; 0x0f
    247c:	70 89       	ldd	r23, Z+16	; 0x10
    247e:	04 23       	and	r16, r20
    2480:	15 23       	and	r17, r21
    2482:	26 23       	and	r18, r22
    2484:	37 23       	and	r19, r23
    2486:	01 2b       	or	r16, r17
    2488:	02 2b       	or	r16, r18
    248a:	03 2b       	or	r16, r19
    248c:	d1 f0       	breq	.+52     	; 0x24c2 <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    248e:	80 95       	com	r24
    2490:	90 95       	com	r25
    2492:	a0 95       	com	r26
    2494:	b0 95       	com	r27
    2496:	48 23       	and	r20, r24
    2498:	59 23       	and	r21, r25
    249a:	6a 23       	and	r22, r26
    249c:	7b 23       	and	r23, r27
    249e:	45 87       	std	Z+13, r20	; 0x0d
    24a0:	56 87       	std	Z+14, r21	; 0x0e
    24a2:	67 87       	std	Z+15, r22	; 0x0f
    24a4:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    24a6:	41 89       	ldd	r20, Z+17	; 0x11
    24a8:	52 89       	ldd	r21, Z+18	; 0x12
    24aa:	63 89       	ldd	r22, Z+19	; 0x13
    24ac:	74 89       	ldd	r23, Z+20	; 0x14
    24ae:	84 23       	and	r24, r20
    24b0:	95 23       	and	r25, r21
    24b2:	a6 23       	and	r26, r22
    24b4:	b7 23       	and	r27, r23
    24b6:	81 8b       	std	Z+17, r24	; 0x11
    24b8:	92 8b       	std	Z+18, r25	; 0x12
    24ba:	a3 8b       	std	Z+19, r26	; 0x13
    24bc:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	01 c0       	rjmp	.+2      	; 0x24c4 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    24c2:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    24c4:	1f 91       	pop	r17
    24c6:	0f 91       	pop	r16
    24c8:	08 95       	ret

000024ca <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    24ca:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    24cc:	40 91 ae 03 	lds	r20, 0x03AE
    24d0:	50 91 af 03 	lds	r21, 0x03AF
    24d4:	60 91 b0 03 	lds	r22, 0x03B0
    24d8:	70 91 b1 03 	lds	r23, 0x03B1
    24dc:	08 2e       	mov	r0, r24
    24de:	04 c0       	rjmp	.+8      	; 0x24e8 <nrk_signal_register+0x1e>
    24e0:	76 95       	lsr	r23
    24e2:	67 95       	ror	r22
    24e4:	57 95       	ror	r21
    24e6:	47 95       	ror	r20
    24e8:	0a 94       	dec	r0
    24ea:	d2 f7       	brpl	.-12     	; 0x24e0 <nrk_signal_register+0x16>
    24ec:	40 ff       	sbrs	r20, 0
    24ee:	1d c0       	rjmp	.+58     	; 0x252a <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    24f0:	e0 91 0c 06 	lds	r30, 0x060C
    24f4:	f0 91 0d 06 	lds	r31, 0x060D
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a0 e0       	ldi	r26, 0x00	; 0
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	04 c0       	rjmp	.+8      	; 0x250a <nrk_signal_register+0x40>
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	aa 1f       	adc	r26, r26
    2508:	bb 1f       	adc	r27, r27
    250a:	2a 95       	dec	r18
    250c:	d2 f7       	brpl	.-12     	; 0x2502 <nrk_signal_register+0x38>
    250e:	45 85       	ldd	r20, Z+13	; 0x0d
    2510:	56 85       	ldd	r21, Z+14	; 0x0e
    2512:	67 85       	ldd	r22, Z+15	; 0x0f
    2514:	70 89       	ldd	r23, Z+16	; 0x10
    2516:	84 2b       	or	r24, r20
    2518:	95 2b       	or	r25, r21
    251a:	a6 2b       	or	r26, r22
    251c:	b7 2b       	or	r27, r23
    251e:	85 87       	std	Z+13, r24	; 0x0d
    2520:	96 87       	std	Z+14, r25	; 0x0e
    2522:	a7 87       	std	Z+15, r26	; 0x0f
    2524:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	08 95       	ret
	}
            
	return NRK_ERROR;
    252a:	8f ef       	ldi	r24, 0xFF	; 255
}
    252c:	08 95       	ret

0000252e <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    252e:	cf 92       	push	r12
    2530:	df 92       	push	r13
    2532:	ef 92       	push	r14
    2534:	ff 92       	push	r15
    2536:	cf 93       	push	r28
	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;
    uint8_t timer;

	sig_mask=SIG(sig_id);
    2538:	c1 2c       	mov	r12, r1
    253a:	d1 2c       	mov	r13, r1
    253c:	76 01       	movw	r14, r12
    253e:	c3 94       	inc	r12
    2540:	04 c0       	rjmp	.+8      	; 0x254a <nrk_event_signal+0x1c>
    2542:	cc 0c       	add	r12, r12
    2544:	dd 1c       	adc	r13, r13
    2546:	ee 1c       	adc	r14, r14
    2548:	ff 1c       	adc	r15, r15
    254a:	8a 95       	dec	r24
    254c:	d2 f7       	brpl	.-12     	; 0x2542 <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    254e:	80 91 ae 03 	lds	r24, 0x03AE
    2552:	90 91 af 03 	lds	r25, 0x03AF
    2556:	a0 91 b0 03 	lds	r26, 0x03B0
    255a:	b0 91 b1 03 	lds	r27, 0x03B1
    255e:	8c 21       	and	r24, r12
    2560:	9d 21       	and	r25, r13
    2562:	ae 21       	and	r26, r14
    2564:	bf 21       	and	r27, r15
    2566:	89 2b       	or	r24, r25
    2568:	8a 2b       	or	r24, r26
    256a:	8b 2b       	or	r24, r27
    256c:	11 f4       	brne	.+4      	; 0x2572 <nrk_event_signal+0x44>
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	44 c0       	rjmp	.+136    	; 0x25fa <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    2572:	0e 94 cf 0c 	call	0x199e	; 0x199e <nrk_int_disable>
    2576:	e2 ef       	ldi	r30, 0xF2	; 242
    2578:	f4 e0       	ldi	r31, 0x04	; 4
    257a:	a4 ef       	ldi	r26, 0xF4	; 244
    257c:	b4 e0       	ldi	r27, 0x04	; 4

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    257e:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2580:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    2582:	90 81       	ld	r25, Z
    2584:	91 30       	cpi	r25, 0x01	; 1
    2586:	b9 f4       	brne	.+46     	; 0x25b6 <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    2588:	42 85       	ldd	r20, Z+10	; 0x0a
    258a:	53 85       	ldd	r21, Z+11	; 0x0b
    258c:	64 85       	ldd	r22, Z+12	; 0x0c
    258e:	75 85       	ldd	r23, Z+13	; 0x0d
    2590:	4c 21       	and	r20, r12
    2592:	5d 21       	and	r21, r13
    2594:	6e 21       	and	r22, r14
    2596:	7f 21       	and	r23, r15
    2598:	45 2b       	or	r20, r21
    259a:	46 2b       	or	r20, r22
    259c:	47 2b       	or	r20, r23
    259e:	59 f0       	breq	.+22     	; 0x25b6 <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    25a0:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    25a2:	16 86       	std	Z+14, r1	; 0x0e
    25a4:	17 86       	std	Z+15, r1	; 0x0f
    25a6:	10 8a       	std	Z+16, r1	; 0x10
    25a8:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    25aa:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    25ac:	c2 86       	std	Z+10, r12	; 0x0a
    25ae:	d3 86       	std	Z+11, r13	; 0x0b
    25b0:	e4 86       	std	Z+12, r14	; 0x0c
    25b2:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    25b4:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    25b6:	90 81       	ld	r25, Z
    25b8:	92 30       	cpi	r25, 0x02	; 2
    25ba:	a1 f4       	brne	.+40     	; 0x25e4 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    25bc:	42 85       	ldd	r20, Z+10	; 0x0a
    25be:	53 85       	ldd	r21, Z+11	; 0x0b
    25c0:	64 85       	ldd	r22, Z+12	; 0x0c
    25c2:	75 85       	ldd	r23, Z+13	; 0x0d
    25c4:	4c 15       	cp	r20, r12
    25c6:	5d 05       	cpc	r21, r13
    25c8:	6e 05       	cpc	r22, r14
    25ca:	7f 05       	cpc	r23, r15
    25cc:	59 f4       	brne	.+22     	; 0x25e4 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    25ce:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    25d0:	16 86       	std	Z+14, r1	; 0x0e
    25d2:	17 86       	std	Z+15, r1	; 0x0f
    25d4:	10 8a       	std	Z+16, r1	; 0x10
    25d6:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    25d8:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    25da:	12 86       	std	Z+10, r1	; 0x0a
    25dc:	13 86       	std	Z+11, r1	; 0x0b
    25de:	14 86       	std	Z+12, r1	; 0x0c
    25e0:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    25e2:	c1 e0       	ldi	r28, 0x01	; 1
    25e4:	bb 96       	adiw	r30, 0x2b	; 43
    25e6:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    25e8:	95 e0       	ldi	r25, 0x05	; 5
    25ea:	e4 3f       	cpi	r30, 0xF4	; 244
    25ec:	f9 07       	cpc	r31, r25
    25ee:	49 f6       	brne	.-110    	; 0x2582 <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    25f0:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <nrk_int_enable>
	if(event_occured)
    25f4:	c1 11       	cpse	r28, r1
    25f6:	05 c0       	rjmp	.+10     	; 0x2602 <nrk_event_signal+0xd4>
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    25f8:	82 e0       	ldi	r24, 0x02	; 2
    25fa:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_nrk_errno_set>
	return NRK_ERROR;
    25fe:	8f ef       	ldi	r24, 0xFF	; 255
    2600:	01 c0       	rjmp	.+2      	; 0x2604 <nrk_event_signal+0xd6>
            			_nrk_set_next_wakeup (timer);
			}	
		else
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
    2602:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    2604:	cf 91       	pop	r28
    2606:	ff 90       	pop	r15
    2608:	ef 90       	pop	r14
    260a:	df 90       	pop	r13
    260c:	cf 90       	pop	r12
    260e:	08 95       	ret

00002610 <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    2610:	0f 93       	push	r16
    2612:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    2614:	e0 91 0c 06 	lds	r30, 0x060C
    2618:	f0 91 0d 06 	lds	r31, 0x060D
    261c:	05 85       	ldd	r16, Z+13	; 0x0d
    261e:	16 85       	ldd	r17, Z+14	; 0x0e
    2620:	27 85       	ldd	r18, Z+15	; 0x0f
    2622:	30 89       	ldd	r19, Z+16	; 0x10
    2624:	06 23       	and	r16, r22
    2626:	17 23       	and	r17, r23
    2628:	28 23       	and	r18, r24
    262a:	39 23       	and	r19, r25
    262c:	01 15       	cp	r16, r1
    262e:	11 05       	cpc	r17, r1
    2630:	21 05       	cpc	r18, r1
    2632:	31 05       	cpc	r19, r1
    2634:	11 f1       	breq	.+68     	; 0x267a <nrk_event_wait+0x6a>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    263a:	81 8b       	std	Z+17, r24	; 0x11
    263c:	92 8b       	std	Z+18, r25	; 0x12
    263e:	a3 8b       	std	Z+19, r26	; 0x13
    2640:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    2642:	21 e0       	ldi	r18, 0x01	; 1
    2644:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    2646:	00 90 fc 05 	lds	r0, 0x05FC
    264a:	04 c0       	rjmp	.+8      	; 0x2654 <nrk_event_wait+0x44>
    264c:	b6 95       	lsr	r27
    264e:	a7 95       	ror	r26
    2650:	97 95       	ror	r25
    2652:	87 95       	ror	r24
    2654:	0a 94       	dec	r0
    2656:	d2 f7       	brpl	.-12     	; 0x264c <nrk_event_wait+0x3c>
    2658:	80 ff       	sbrs	r24, 0
    265a:	03 c0       	rjmp	.+6      	; 0x2662 <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    265c:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <nrk_wait_until_nw>
    2660:	04 c0       	rjmp	.+8      	; 0x266a <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    266a:	e0 91 0c 06 	lds	r30, 0x060C
    266e:	f0 91 0d 06 	lds	r31, 0x060D
    2672:	01 89       	ldd	r16, Z+17	; 0x11
    2674:	12 89       	ldd	r17, Z+18	; 0x12
    2676:	23 89       	ldd	r18, Z+19	; 0x13
    2678:	34 89       	ldd	r19, Z+20	; 0x14
}
    267a:	c9 01       	movw	r24, r18
    267c:	b8 01       	movw	r22, r16
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	08 95       	ret

00002684 <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    2684:	90 91 0b 06 	lds	r25, 0x060B
    2688:	93 30       	cpi	r25, 0x03	; 3
    268a:	d0 f4       	brcc	.+52     	; 0x26c0 <nrk_sem_create+0x3c>
    268c:	af ee       	ldi	r26, 0xEF	; 239
    268e:	b5 e0       	ldi	r27, 0x05	; 5
    2690:	e0 e0       	ldi	r30, 0x00	; 0
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    2692:	2c 91       	ld	r18, X
    2694:	2f 3f       	cpi	r18, 0xFF	; 255
    2696:	21 f0       	breq	.+8      	; 0x26a0 <nrk_sem_create+0x1c>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    2698:	ef 5f       	subi	r30, 0xFF	; 255
    269a:	13 96       	adiw	r26, 0x03	; 3
    269c:	e4 30       	cpi	r30, 0x04	; 4
    269e:	c9 f7       	brne	.-14     	; 0x2692 <nrk_sem_create+0xe>
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	9f 01       	movw	r18, r30
    26a4:	22 0f       	add	r18, r18
    26a6:	33 1f       	adc	r19, r19
    26a8:	e2 0f       	add	r30, r18
    26aa:	f3 1f       	adc	r31, r19
    26ac:	e1 51       	subi	r30, 0x11	; 17
    26ae:	fa 4f       	sbci	r31, 0xFA	; 250
    26b0:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    26b2:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    26b4:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    26b6:	9f 5f       	subi	r25, 0xFF	; 255
    26b8:	90 93 0b 06 	sts	0x060B, r25
	return	&nrk_sem_list[i];
    26bc:	cf 01       	movw	r24, r30
    26be:	08 95       	ret

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    26c4:	08 95       	ret

000026c6 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    26c6:	25 e0       	ldi	r18, 0x05	; 5
    26c8:	8f 3e       	cpi	r24, 0xEF	; 239
    26ca:	92 07       	cpc	r25, r18
    26cc:	69 f0       	breq	.+26     	; 0x26e8 <nrk_get_resource_index+0x22>
    26ce:	25 e0       	ldi	r18, 0x05	; 5
    26d0:	82 3f       	cpi	r24, 0xF2	; 242
    26d2:	92 07       	cpc	r25, r18
    26d4:	59 f0       	breq	.+22     	; 0x26ec <nrk_get_resource_index+0x26>
    26d6:	25 e0       	ldi	r18, 0x05	; 5
    26d8:	85 3f       	cpi	r24, 0xF5	; 245
    26da:	92 07       	cpc	r25, r18
    26dc:	49 f0       	breq	.+18     	; 0x26f0 <nrk_get_resource_index+0x2a>
    26de:	88 5f       	subi	r24, 0xF8	; 248
    26e0:	95 40       	sbci	r25, 0x05	; 5
    26e2:	41 f4       	brne	.+16     	; 0x26f4 <nrk_get_resource_index+0x2e>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    26e4:	83 e0       	ldi	r24, 0x03	; 3
    26e6:	08 95       	ret
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	08 95       	ret
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	08 95       	ret
    26f0:	82 e0       	ldi	r24, 0x02	; 2
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
    26f2:	08 95       	ret
	return NRK_ERROR;
    26f4:	8f ef       	ldi	r24, 0xFF	; 255
}
    26f6:	08 95       	ret

000026f8 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    26f8:	0e 94 63 13 	call	0x26c6	; 0x26c6 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    26fc:	8f 3f       	cpi	r24, 0xFF	; 255
    26fe:	11 f4       	brne	.+4      	; 0x2704 <nrk_sem_query+0xc>
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	03 c0       	rjmp	.+6      	; 0x270a <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2704:	84 30       	cpi	r24, 0x04	; 4
    2706:	29 f4       	brne	.+10     	; 0x2712 <nrk_sem_query+0x1a>
    2708:	82 e0       	ldi	r24, 0x02	; 2
    270a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_nrk_errno_set>
    270e:	8f ef       	ldi	r24, 0xFF	; 255
    2710:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    2712:	99 27       	eor	r25, r25
    2714:	87 fd       	sbrc	r24, 7
    2716:	90 95       	com	r25
    2718:	fc 01       	movw	r30, r24
    271a:	ee 0f       	add	r30, r30
    271c:	ff 1f       	adc	r31, r31
    271e:	8e 0f       	add	r24, r30
    2720:	9f 1f       	adc	r25, r31
    2722:	fc 01       	movw	r30, r24
    2724:	e1 51       	subi	r30, 0x11	; 17
    2726:	fa 4f       	sbci	r31, 0xFA	; 250
    2728:	82 81       	ldd	r24, Z+2	; 0x02
}
    272a:	08 95       	ret

0000272c <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    272c:	ef 92       	push	r14
    272e:	ff 92       	push	r15
    2730:	0f 93       	push	r16
    2732:	1f 93       	push	r17
    2734:	cf 93       	push	r28
    2736:	df 93       	push	r29
    2738:	1f 92       	push	r1
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    273e:	0e 94 63 13 	call	0x26c6	; 0x26c6 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2742:	8f 3f       	cpi	r24, 0xFF	; 255
    2744:	11 f4       	brne	.+4      	; 0x274a <nrk_sem_pend+0x1e>
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	03 c0       	rjmp	.+6      	; 0x2750 <nrk_sem_pend+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    274a:	84 30       	cpi	r24, 0x04	; 4
    274c:	29 f4       	brne	.+10     	; 0x2758 <nrk_sem_pend+0x2c>
    274e:	82 e0       	ldi	r24, 0x02	; 2
    2750:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_nrk_errno_set>
    2754:	8f ef       	ldi	r24, 0xFF	; 255
    2756:	41 c0       	rjmp	.+130    	; 0x27da <nrk_sem_pend+0xae>
	
	nrk_int_disable();
    2758:	89 83       	std	Y+1, r24	; 0x01
    275a:	0e 94 cf 0c 	call	0x199e	; 0x199e <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	e8 2e       	mov	r14, r24
    2762:	ff 24       	eor	r15, r15
    2764:	e7 fc       	sbrc	r14, 7
    2766:	f0 94       	com	r15
    2768:	87 01       	movw	r16, r14
    276a:	00 0f       	add	r16, r16
    276c:	11 1f       	adc	r17, r17
    276e:	f8 01       	movw	r30, r16
    2770:	ee 0d       	add	r30, r14
    2772:	ff 1d       	adc	r31, r15
    2774:	e1 51       	subi	r30, 0x11	; 17
    2776:	fa 4f       	sbci	r31, 0xFA	; 250
    2778:	92 81       	ldd	r25, Z+2	; 0x02
    277a:	91 11       	cpse	r25, r1
    277c:	16 c0       	rjmp	.+44     	; 0x27aa <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    277e:	e0 91 0c 06 	lds	r30, 0x060C
    2782:	f0 91 0d 06 	lds	r31, 0x060D
    2786:	97 81       	ldd	r25, Z+7	; 0x07
    2788:	92 60       	ori	r25, 0x02	; 2
    278a:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    278c:	99 27       	eor	r25, r25
    278e:	87 fd       	sbrc	r24, 7
    2790:	90 95       	com	r25
    2792:	a9 2f       	mov	r26, r25
    2794:	b9 2f       	mov	r27, r25
    2796:	81 8b       	std	Z+17, r24	; 0x11
    2798:	92 8b       	std	Z+18, r25	; 0x12
    279a:	a3 8b       	std	Z+19, r26	; 0x13
    279c:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    279e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    27aa:	0e 0d       	add	r16, r14
    27ac:	1f 1d       	adc	r17, r15
    27ae:	d8 01       	movw	r26, r16
    27b0:	a1 51       	subi	r26, 0x11	; 17
    27b2:	ba 4f       	sbci	r27, 0xFA	; 250
    27b4:	12 96       	adiw	r26, 0x02	; 2
    27b6:	8c 91       	ld	r24, X
    27b8:	12 97       	sbiw	r26, 0x02	; 2
    27ba:	81 50       	subi	r24, 0x01	; 1
    27bc:	12 96       	adiw	r26, 0x02	; 2
    27be:	8c 93       	st	X, r24
    27c0:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    27c2:	e0 91 0c 06 	lds	r30, 0x060C
    27c6:	f0 91 0d 06 	lds	r31, 0x060D
    27ca:	11 96       	adiw	r26, 0x01	; 1
    27cc:	8c 91       	ld	r24, X
    27ce:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    27d4:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <nrk_int_enable>

	return NRK_OK;
    27d8:	81 e0       	ldi	r24, 0x01	; 1
}
    27da:	0f 90       	pop	r0
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	1f 91       	pop	r17
    27e2:	0f 91       	pop	r16
    27e4:	ff 90       	pop	r15
    27e6:	ef 90       	pop	r14
    27e8:	08 95       	ret

000027ea <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    27ea:	0f 93       	push	r16
    27ec:	1f 93       	push	r17
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	1f 92       	push	r1
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    27f8:	0e 94 63 13 	call	0x26c6	; 0x26c6 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    27fc:	8f 3f       	cpi	r24, 0xFF	; 255
    27fe:	11 f4       	brne	.+4      	; 0x2804 <nrk_sem_post+0x1a>
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	03 c0       	rjmp	.+6      	; 0x280a <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2804:	84 30       	cpi	r24, 0x04	; 4
    2806:	29 f4       	brne	.+10     	; 0x2812 <nrk_sem_post+0x28>
    2808:	82 e0       	ldi	r24, 0x02	; 2
    280a:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_nrk_errno_set>
    280e:	8f ef       	ldi	r24, 0xFF	; 255
    2810:	44 c0       	rjmp	.+136    	; 0x289a <nrk_sem_post+0xb0>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    2812:	48 2f       	mov	r20, r24
    2814:	55 27       	eor	r21, r21
    2816:	47 fd       	sbrc	r20, 7
    2818:	50 95       	com	r21
    281a:	9a 01       	movw	r18, r20
    281c:	22 0f       	add	r18, r18
    281e:	33 1f       	adc	r19, r19
    2820:	24 0f       	add	r18, r20
    2822:	35 1f       	adc	r19, r21
    2824:	89 01       	movw	r16, r18
    2826:	01 51       	subi	r16, 0x11	; 17
    2828:	1a 4f       	sbci	r17, 0xFA	; 250
    282a:	f8 01       	movw	r30, r16
    282c:	22 81       	ldd	r18, Z+2	; 0x02
    282e:	90 81       	ld	r25, Z
    2830:	29 17       	cp	r18, r25
    2832:	94 f5       	brge	.+100    	; 0x2898 <nrk_sem_post+0xae>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    2834:	89 83       	std	Y+1, r24	; 0x01
    2836:	0e 94 cf 0c 	call	0x199e	; 0x199e <nrk_int_disable>

		nrk_sem_list[id].value++;
    283a:	f8 01       	movw	r30, r16
    283c:	92 81       	ldd	r25, Z+2	; 0x02
    283e:	9f 5f       	subi	r25, 0xFF	; 255
    2840:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    2842:	e0 91 0c 06 	lds	r30, 0x060C
    2846:	f0 91 0d 06 	lds	r31, 0x060D
    284a:	14 82       	std	Z+4, r1	; 0x04
    284c:	e2 ef       	ldi	r30, 0xF2	; 242
    284e:	f4 e0       	ldi	r31, 0x04	; 4

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	99 27       	eor	r25, r25
    2854:	87 fd       	sbrc	r24, 7
    2856:	90 95       	com	r25
    2858:	a9 2f       	mov	r26, r25
    285a:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    285c:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    285e:	30 81       	ld	r19, Z
    2860:	32 30       	cpi	r19, 0x02	; 2
    2862:	99 f4       	brne	.+38     	; 0x288a <nrk_sem_post+0xa0>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    2864:	42 85       	ldd	r20, Z+10	; 0x0a
    2866:	53 85       	ldd	r21, Z+11	; 0x0b
    2868:	64 85       	ldd	r22, Z+12	; 0x0c
    286a:	75 85       	ldd	r23, Z+13	; 0x0d
    286c:	48 17       	cp	r20, r24
    286e:	59 07       	cpc	r21, r25
    2870:	6a 07       	cpc	r22, r26
    2872:	7b 07       	cpc	r23, r27
    2874:	51 f4       	brne	.+20     	; 0x288a <nrk_sem_post+0xa0>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2876:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    2878:	16 86       	std	Z+14, r1	; 0x0e
    287a:	17 86       	std	Z+15, r1	; 0x0f
    287c:	10 8a       	std	Z+16, r1	; 0x10
    287e:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    2880:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2882:	12 86       	std	Z+10, r1	; 0x0a
    2884:	13 86       	std	Z+11, r1	; 0x0b
    2886:	14 86       	std	Z+12, r1	; 0x0c
    2888:	15 86       	std	Z+13, r1	; 0x0d
    288a:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    288c:	35 e0       	ldi	r19, 0x05	; 5
    288e:	e4 3f       	cpi	r30, 0xF4	; 244
    2890:	f3 07       	cpc	r31, r19
    2892:	29 f7       	brne	.-54     	; 0x285e <nrk_sem_post+0x74>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    2894:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <nrk_int_enable>
	}
		
return NRK_OK;
    2898:	81 e0       	ldi	r24, 0x01	; 1
}
    289a:	0f 90       	pop	r0
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	1f 91       	pop	r17
    28a2:	0f 91       	pop	r16
    28a4:	08 95       	ret

000028a6 <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    28a6:	0e 94 63 13 	call	0x26c6	; 0x26c6 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    28aa:	8f 3f       	cpi	r24, 0xFF	; 255
    28ac:	11 f4       	brne	.+4      	; 0x28b2 <nrk_sem_delete+0xc>
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	03 c0       	rjmp	.+6      	; 0x28b8 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    28b2:	84 30       	cpi	r24, 0x04	; 4
    28b4:	29 f4       	brne	.+10     	; 0x28c0 <nrk_sem_delete+0x1a>
    28b6:	82 e0       	ldi	r24, 0x02	; 2
    28b8:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_nrk_errno_set>
    28bc:	8f ef       	ldi	r24, 0xFF	; 255
    28be:	08 95       	ret

	nrk_sem_list[id].count=-1;
    28c0:	99 27       	eor	r25, r25
    28c2:	87 fd       	sbrc	r24, 7
    28c4:	90 95       	com	r25
    28c6:	fc 01       	movw	r30, r24
    28c8:	ee 0f       	add	r30, r30
    28ca:	ff 1f       	adc	r31, r31
    28cc:	8e 0f       	add	r24, r30
    28ce:	9f 1f       	adc	r25, r31
    28d0:	fc 01       	movw	r30, r24
    28d2:	e1 51       	subi	r30, 0x11	; 17
    28d4:	fa 4f       	sbci	r31, 0xFA	; 250
    28d6:	8f ef       	ldi	r24, 0xFF	; 255
    28d8:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    28da:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    28dc:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    28de:	80 91 0b 06 	lds	r24, 0x060B
    28e2:	81 50       	subi	r24, 0x01	; 1
    28e4:	80 93 0b 06 	sts	0x060B, r24
return NRK_OK;
    28e8:	81 e0       	ldi	r24, 0x01	; 1
}
    28ea:	08 95       	ret

000028ec <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    28ec:	e0 91 01 06 	lds	r30, 0x0601
    28f0:	f0 91 02 06 	lds	r31, 0x0602
}
    28f4:	80 81       	ld	r24, Z
    28f6:	08 95       	ret

000028f8 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    28f8:	e0 91 01 06 	lds	r30, 0x0601
    28fc:	f0 91 02 06 	lds	r31, 0x0602
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    2900:	30 97       	sbiw	r30, 0x00	; 0
    2902:	21 f0       	breq	.+8      	; 0x290c <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    2904:	03 80       	ldd	r0, Z+3	; 0x03
    2906:	f4 81       	ldd	r31, Z+4	; 0x04
    2908:	e0 2d       	mov	r30, r0
    290a:	fa cf       	rjmp	.-12     	; 0x2900 <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    290c:	08 95       	ret

0000290e <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    290e:	af 92       	push	r10
    2910:	bf 92       	push	r11
    2912:	cf 92       	push	r12
    2914:	df 92       	push	r13
    2916:	ef 92       	push	r14
    2918:	ff 92       	push	r15
    291a:	0f 93       	push	r16
    291c:	1f 93       	push	r17
    291e:	cf 93       	push	r28
    2920:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    2922:	e0 91 e9 04 	lds	r30, 0x04E9
    2926:	f0 91 ea 04 	lds	r31, 0x04EA
    292a:	30 97       	sbiw	r30, 0x00	; 0
    292c:	09 f4       	brne	.+2      	; 0x2930 <nrk_add_to_readyQ+0x22>
    292e:	90 c0       	rjmp	.+288    	; 0x2a50 <nrk_add_to_readyQ+0x142>
    {
        return;
    }


    NextNode = _head_node;
    2930:	00 91 01 06 	lds	r16, 0x0601
    2934:	10 91 02 06 	lds	r17, 0x0602
    CurNode = _free_node;

    if (_head_node != NULL)
    2938:	01 15       	cp	r16, r1
    293a:	11 05       	cpc	r17, r1
    293c:	09 f4       	brne	.+2      	; 0x2940 <nrk_add_to_readyQ+0x32>
    293e:	4c c0       	rjmp	.+152    	; 0x29d8 <nrk_add_to_readyQ+0xca>
    2940:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    2942:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    2944:	58 2f       	mov	r21, r24
    2946:	54 03       	mulsu	r21, r20
    2948:	90 01       	movw	r18, r0
    294a:	11 24       	eor	r1, r1
    294c:	25 51       	subi	r18, 0x15	; 21
    294e:	3b 4f       	sbci	r19, 0xFB	; 251
    2950:	79 01       	movw	r14, r18
    2952:	9a e0       	ldi	r25, 0x0A	; 10
    2954:	e9 0e       	add	r14, r25
    2956:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    2958:	69 01       	movw	r12, r18
    295a:	c4 e0       	ldi	r28, 0x04	; 4
    295c:	cc 0e       	add	r12, r28
    295e:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    2960:	59 01       	movw	r10, r18
    2962:	db e0       	ldi	r29, 0x0B	; 11
    2964:	ad 0e       	add	r10, r29
    2966:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    2968:	2c 91       	ld	r18, X
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	42 9f       	mul	r20, r18
    296e:	b0 01       	movw	r22, r0
    2970:	43 9f       	mul	r20, r19
    2972:	70 0d       	add	r23, r0
    2974:	11 24       	eor	r1, r1
    2976:	65 51       	subi	r22, 0x15	; 21
    2978:	7b 4f       	sbci	r23, 0xFB	; 251
    297a:	eb 01       	movw	r28, r22
    297c:	9c 81       	ldd	r25, Y+4	; 0x04
    297e:	99 23       	and	r25, r25
    2980:	29 f0       	breq	.+10     	; 0x298c <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    2982:	5b 85       	ldd	r21, Y+11	; 0x0b
    2984:	e7 01       	movw	r28, r14
    2986:	98 81       	ld	r25, Y
    2988:	59 17       	cp	r21, r25
    298a:	40 f1       	brcs	.+80     	; 0x29dc <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    298c:	e6 01       	movw	r28, r12
    298e:	98 81       	ld	r25, Y
    2990:	99 23       	and	r25, r25
    2992:	69 f0       	breq	.+26     	; 0x29ae <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    2994:	42 9f       	mul	r20, r18
    2996:	b0 01       	movw	r22, r0
    2998:	43 9f       	mul	r20, r19
    299a:	70 0d       	add	r23, r0
    299c:	11 24       	eor	r1, r1
    299e:	65 51       	subi	r22, 0x15	; 21
    29a0:	7b 4f       	sbci	r23, 0xFB	; 251
    29a2:	eb 01       	movw	r28, r22
    29a4:	5a 85       	ldd	r21, Y+10	; 0x0a
    29a6:	e5 01       	movw	r28, r10
    29a8:	98 81       	ld	r25, Y
    29aa:	59 17       	cp	r21, r25
    29ac:	b8 f0       	brcs	.+46     	; 0x29dc <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    29ae:	42 9f       	mul	r20, r18
    29b0:	b0 01       	movw	r22, r0
    29b2:	43 9f       	mul	r20, r19
    29b4:	70 0d       	add	r23, r0
    29b6:	11 24       	eor	r1, r1
    29b8:	9b 01       	movw	r18, r22
    29ba:	25 51       	subi	r18, 0x15	; 21
    29bc:	3b 4f       	sbci	r19, 0xFB	; 251
    29be:	e9 01       	movw	r28, r18
    29c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    29c2:	e7 01       	movw	r28, r14
    29c4:	98 81       	ld	r25, Y
    29c6:	29 17       	cp	r18, r25
    29c8:	48 f0       	brcs	.+18     	; 0x29dc <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    29ca:	13 96       	adiw	r26, 0x03	; 3
    29cc:	0d 90       	ld	r0, X+
    29ce:	bc 91       	ld	r27, X
    29d0:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    29d2:	10 97       	sbiw	r26, 0x00	; 0
    29d4:	49 f6       	brne	.-110    	; 0x2968 <nrk_add_to_readyQ+0x5a>
    29d6:	02 c0       	rjmp	.+4      	; 0x29dc <nrk_add_to_readyQ+0xce>
    29d8:	a0 e0       	ldi	r26, 0x00	; 0
    29da:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    29dc:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    29de:	c3 81       	ldd	r28, Z+3	; 0x03
    29e0:	d4 81       	ldd	r29, Z+4	; 0x04
    29e2:	d0 93 ea 04 	sts	0x04EA, r29
    29e6:	c0 93 e9 04 	sts	0x04E9, r28

    if (NextNode == _head_node)
    29ea:	a0 17       	cp	r26, r16
    29ec:	b1 07       	cpc	r27, r17
    29ee:	b1 f4       	brne	.+44     	; 0x2a1c <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    29f0:	10 97       	sbiw	r26, 0x00	; 0
    29f2:	49 f0       	breq	.+18     	; 0x2a06 <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    29f4:	b4 83       	std	Z+4, r27	; 0x04
    29f6:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    29f8:	12 82       	std	Z+2, r1	; 0x02
    29fa:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    29fc:	12 96       	adiw	r26, 0x02	; 2
    29fe:	fc 93       	st	X, r31
    2a00:	ee 93       	st	-X, r30
    2a02:	11 97       	sbiw	r26, 0x01	; 1
    2a04:	06 c0       	rjmp	.+12     	; 0x2a12 <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    2a06:	14 82       	std	Z+4, r1	; 0x04
    2a08:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    2a0a:	12 82       	std	Z+2, r1	; 0x02
    2a0c:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    2a0e:	fa 83       	std	Y+2, r31	; 0x02
    2a10:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    2a12:	f0 93 02 06 	sts	0x0602, r31
    2a16:	e0 93 01 06 	sts	0x0601, r30
    2a1a:	1a c0       	rjmp	.+52     	; 0x2a50 <nrk_add_to_readyQ+0x142>
    2a1c:	11 96       	adiw	r26, 0x01	; 1
    2a1e:	8d 91       	ld	r24, X+
    2a20:	9c 91       	ld	r25, X
    2a22:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    2a24:	ac 17       	cp	r26, r28
    2a26:	bd 07       	cpc	r27, r29
    2a28:	59 f0       	breq	.+22     	; 0x2a40 <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    2a2a:	92 83       	std	Z+2, r25	; 0x02
    2a2c:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    2a2e:	b4 83       	std	Z+4, r27	; 0x04
    2a30:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    2a32:	11 96       	adiw	r26, 0x01	; 1
    2a34:	cd 91       	ld	r28, X+
    2a36:	dc 91       	ld	r29, X
    2a38:	12 97       	sbiw	r26, 0x02	; 2
    2a3a:	fc 83       	std	Y+4, r31	; 0x04
    2a3c:	eb 83       	std	Y+3, r30	; 0x03
    2a3e:	04 c0       	rjmp	.+8      	; 0x2a48 <nrk_add_to_readyQ+0x13a>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    2a40:	14 82       	std	Z+4, r1	; 0x04
    2a42:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    2a44:	92 83       	std	Z+2, r25	; 0x02
    2a46:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    2a48:	12 96       	adiw	r26, 0x02	; 2
    2a4a:	fc 93       	st	X, r31
    2a4c:	ee 93       	st	-X, r30
    2a4e:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    2a50:	df 91       	pop	r29
    2a52:	cf 91       	pop	r28
    2a54:	1f 91       	pop	r17
    2a56:	0f 91       	pop	r16
    2a58:	ff 90       	pop	r15
    2a5a:	ef 90       	pop	r14
    2a5c:	df 90       	pop	r13
    2a5e:	cf 90       	pop	r12
    2a60:	bf 90       	pop	r11
    2a62:	af 90       	pop	r10
    2a64:	08 95       	ret

00002a66 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    2a66:	cf 93       	push	r28
    2a68:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    2a6a:	e0 91 01 06 	lds	r30, 0x0601
    2a6e:	f0 91 02 06 	lds	r31, 0x0602
    2a72:	30 97       	sbiw	r30, 0x00	; 0
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <nrk_rem_from_readyQ+0x12>
    2a76:	44 c0       	rjmp	.+136    	; 0x2b00 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    2a78:	99 27       	eor	r25, r25
    2a7a:	87 fd       	sbrc	r24, 7
    2a7c:	90 95       	com	r25
    2a7e:	20 81       	ld	r18, Z
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	28 17       	cp	r18, r24
    2a84:	39 07       	cpc	r19, r25
    2a86:	81 f4       	brne	.+32     	; 0x2aa8 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    2a88:	a3 81       	ldd	r26, Z+3	; 0x03
    2a8a:	b4 81       	ldd	r27, Z+4	; 0x04
    2a8c:	b0 93 02 06 	sts	0x0602, r27
    2a90:	a0 93 01 06 	sts	0x0601, r26
        _head_node->Prev = NULL;
    2a94:	12 96       	adiw	r26, 0x02	; 2
    2a96:	1c 92       	st	X, r1
    2a98:	1e 92       	st	-X, r1
    2a9a:	11 97       	sbiw	r26, 0x01	; 1
    2a9c:	18 c0       	rjmp	.+48     	; 0x2ace <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    2a9e:	03 80       	ldd	r0, Z+3	; 0x03
    2aa0:	f4 81       	ldd	r31, Z+4	; 0x04
    2aa2:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    2aa4:	30 97       	sbiw	r30, 0x00	; 0
    2aa6:	61 f1       	breq	.+88     	; 0x2b00 <nrk_rem_from_readyQ+0x9a>
    2aa8:	20 81       	ld	r18, Z
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	28 17       	cp	r18, r24
    2aae:	39 07       	cpc	r19, r25
    2ab0:	b1 f7       	brne	.-20     	; 0x2a9e <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    2ab2:	c1 81       	ldd	r28, Z+1	; 0x01
    2ab4:	d2 81       	ldd	r29, Z+2	; 0x02
    2ab6:	83 81       	ldd	r24, Z+3	; 0x03
    2ab8:	94 81       	ldd	r25, Z+4	; 0x04
    2aba:	9c 83       	std	Y+4, r25	; 0x04
    2abc:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    2abe:	a3 81       	ldd	r26, Z+3	; 0x03
    2ac0:	b4 81       	ldd	r27, Z+4	; 0x04
    2ac2:	10 97       	sbiw	r26, 0x00	; 0
    2ac4:	21 f0       	breq	.+8      	; 0x2ace <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    2ac6:	12 96       	adiw	r26, 0x02	; 2
    2ac8:	dc 93       	st	X, r29
    2aca:	ce 93       	st	-X, r28
    2acc:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    2ace:	a0 91 e9 04 	lds	r26, 0x04E9
    2ad2:	b0 91 ea 04 	lds	r27, 0x04EA
    2ad6:	10 97       	sbiw	r26, 0x00	; 0
    2ad8:	39 f4       	brne	.+14     	; 0x2ae8 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    2ada:	f0 93 ea 04 	sts	0x04EA, r31
    2ade:	e0 93 e9 04 	sts	0x04E9, r30
        _free_node->Next = NULL;
    2ae2:	14 82       	std	Z+4, r1	; 0x04
    2ae4:	13 82       	std	Z+3, r1	; 0x03
    2ae6:	0a c0       	rjmp	.+20     	; 0x2afc <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    2ae8:	b4 83       	std	Z+4, r27	; 0x04
    2aea:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    2aec:	12 96       	adiw	r26, 0x02	; 2
    2aee:	fc 93       	st	X, r31
    2af0:	ee 93       	st	-X, r30
    2af2:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    2af4:	f0 93 ea 04 	sts	0x04EA, r31
    2af8:	e0 93 e9 04 	sts	0x04E9, r30
    }
    _free_node->Prev = NULL;
    2afc:	12 82       	std	Z+2, r1	; 0x02
    2afe:	11 82       	std	Z+1, r1	; 0x01
}
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	08 95       	ret

00002b06 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    2b06:	ef 92       	push	r14
    2b08:	ff 92       	push	r15
    2b0a:	0f 93       	push	r16
    2b0c:	1f 93       	push	r17
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    2b14:	4b 81       	ldd	r20, Y+3	; 0x03
    2b16:	5c 81       	ldd	r21, Y+4	; 0x04
    2b18:	69 81       	ldd	r22, Y+1	; 0x01
    2b1a:	7a 81       	ldd	r23, Y+2	; 0x02
    2b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b20:	0e 94 89 22 	call	0x4512	; 0x4512 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    2b24:	2f 81       	ldd	r18, Y+7	; 0x07
    2b26:	22 23       	and	r18, r18
    2b28:	71 f0       	breq	.+28     	; 0x2b46 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    2b2a:	4b 81       	ldd	r20, Y+3	; 0x03
    2b2c:	5c 81       	ldd	r21, Y+4	; 0x04
    2b2e:	e1 2c       	mov	r14, r1
    2b30:	f1 2c       	mov	r15, r1
    2b32:	00 e0       	ldi	r16, 0x00	; 0
    2b34:	10 e0       	ldi	r17, 0x00	; 0
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	bc 01       	movw	r22, r24
    2b3c:	ce 01       	movw	r24, r28
    2b3e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    2b42:	1f 82       	std	Y+7, r1	; 0x07
    2b44:	0c c0       	rjmp	.+24     	; 0x2b5e <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    2b46:	e8 81       	ld	r30, Y
    2b48:	2b e2       	ldi	r18, 0x2B	; 43
    2b4a:	e2 02       	muls	r30, r18
    2b4c:	f0 01       	movw	r30, r0
    2b4e:	11 24       	eor	r1, r1
    2b50:	e5 51       	subi	r30, 0x15	; 21
    2b52:	fb 4f       	sbci	r31, 0xFB	; 251
    2b54:	21 85       	ldd	r18, Z+9	; 0x09
    2b56:	23 30       	cpi	r18, 0x03	; 3
    2b58:	b9 f4       	brne	.+46     	; 0x2b88 <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    2b5a:	91 83       	std	Z+1, r25	; 0x01
    2b5c:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    2b5e:	e8 81       	ld	r30, Y
    2b60:	8b e2       	ldi	r24, 0x2B	; 43
    2b62:	e8 02       	muls	r30, r24
    2b64:	f0 01       	movw	r30, r0
    2b66:	11 24       	eor	r1, r1
    2b68:	e5 51       	subi	r30, 0x15	; 21
    2b6a:	fb 4f       	sbci	r31, 0xFB	; 251
    2b6c:	85 89       	ldd	r24, Z+21	; 0x15
    2b6e:	96 89       	ldd	r25, Z+22	; 0x16
    2b70:	a7 89       	ldd	r26, Z+23	; 0x17
    2b72:	b0 8d       	ldd	r27, Z+24	; 0x18
    2b74:	89 2b       	or	r24, r25
    2b76:	8a 2b       	or	r24, r26
    2b78:	8b 2b       	or	r24, r27
    2b7a:	41 f4       	brne	.+16     	; 0x2b8c <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    2b7c:	82 e0       	ldi	r24, 0x02	; 2
    2b7e:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    2b80:	88 81       	ld	r24, Y
    2b82:	0e 94 87 14 	call	0x290e	; 0x290e <nrk_add_to_readyQ>
    2b86:	02 c0       	rjmp	.+4      	; 0x2b8c <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    2b88:	8f ef       	ldi	r24, 0xFF	; 255
    2b8a:	01 c0       	rjmp	.+2      	; 0x2b8e <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
}
    2b8e:	df 91       	pop	r29
    2b90:	cf 91       	pop	r28
    2b92:	1f 91       	pop	r17
    2b94:	0f 91       	pop	r16
    2b96:	ff 90       	pop	r15
    2b98:	ef 90       	pop	r14
    2b9a:	08 95       	ret

00002b9c <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    2b9c:	1f 93       	push	r17
    2b9e:	cf 93       	push	r28
    2ba0:	df 93       	push	r29
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	28 97       	sbiw	r28, 0x08	; 8
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	f8 94       	cli
    2bac:	de bf       	out	0x3e, r29	; 62
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	cd bf       	out	0x3d, r28	; 61
    2bb2:	29 83       	std	Y+1, r18	; 0x01
    2bb4:	3a 83       	std	Y+2, r19	; 0x02
    2bb6:	4b 83       	std	Y+3, r20	; 0x03
    2bb8:	5c 83       	std	Y+4, r21	; 0x04
    2bba:	6d 83       	std	Y+5, r22	; 0x05
    2bbc:	7e 83       	std	Y+6, r23	; 0x06
    2bbe:	8f 83       	std	Y+7, r24	; 0x07
    2bc0:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    2bc2:	0e 94 cf 0c 	call	0x199e	; 0x199e <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    2bc6:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <_nrk_os_timer_get>
    2bca:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    2bcc:	ce 01       	movw	r24, r28
    2bce:	01 96       	adiw	r24, 0x01	; 1
    2bd0:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    2bd4:	63 30       	cpi	r22, 0x03	; 3
    2bd6:	71 05       	cpc	r23, r1
    2bd8:	98 f0       	brcs	.+38     	; 0x2c00 <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2bda:	e0 91 0c 06 	lds	r30, 0x060C
    2bde:	f0 91 0d 06 	lds	r31, 0x060D
    2be2:	21 2f       	mov	r18, r17
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	62 0f       	add	r22, r18
    2be8:	73 1f       	adc	r23, r19
    2bea:	cb 01       	movw	r24, r22
    2bec:	a0 e0       	ldi	r26, 0x00	; 0
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	85 8b       	std	Z+21, r24	; 0x15
    2bf2:	96 8b       	std	Z+22, r25	; 0x16
    2bf4:	a7 8b       	std	Z+23, r26	; 0x17
    2bf6:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    2bf8:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <nrk_int_enable>

    return NRK_OK;
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	01 c0       	rjmp	.+2      	; 0x2c02 <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    2c00:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    2c02:	28 96       	adiw	r28, 0x08	; 8
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	1f 91       	pop	r17
    2c14:	08 95       	ret

00002c16 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    2c16:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    2c1a:	e0 91 0c 06 	lds	r30, 0x060C
    2c1e:	f0 91 0d 06 	lds	r31, 0x060D
    2c22:	85 81       	ldd	r24, Z+5	; 0x05
    2c24:	81 11       	cpse	r24, r1
    2c26:	f7 cf       	rjmp	.-18     	; 0x2c16 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    2c28:	08 95       	ret

00002c2a <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    2c2a:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    2c2c:	0e 94 15 11 	call	0x222a	; 0x222a <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2c30:	0e 94 cf 0c 	call	0x199e	; 0x199e <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    2c34:	e0 91 0c 06 	lds	r30, 0x060C
    2c38:	f0 91 0d 06 	lds	r31, 0x060D
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	92 a7       	std	Z+42, r25	; 0x2a
    2c42:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    2c44:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2c46:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <_nrk_os_timer_get>
    2c4a:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2c4c:	88 3f       	cpi	r24, 0xF8	; 248
    2c4e:	80 f4       	brcc	.+32     	; 0x2c70 <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2c50:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <_nrk_get_next_wakeup>
    2c54:	2c 2f       	mov	r18, r28
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	2f 5f       	subi	r18, 0xFF	; 255
    2c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	28 17       	cp	r18, r24
    2c60:	39 07       	cpc	r19, r25
    2c62:	34 f4       	brge	.+12     	; 0x2c70 <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    2c64:	82 e0       	ldi	r24, 0x02	; 2
    2c66:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    2c68:	80 93 20 04 	sts	0x0420, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2c6c:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2c70:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2c74:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	cf 91       	pop	r28
    2c7c:	08 95       	ret

00002c7e <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    2c7e:	e0 91 0c 06 	lds	r30, 0x060C
    2c82:	f0 91 0d 06 	lds	r31, 0x060D
    2c86:	80 85       	ldd	r24, Z+8	; 0x08
    2c88:	0e 94 33 15 	call	0x2a66	; 0x2a66 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    2c8c:	e0 91 0c 06 	lds	r30, 0x060C
    2c90:	f0 91 0d 06 	lds	r31, 0x060D
    2c94:	84 e0       	ldi	r24, 0x04	; 4
    2c96:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    2c98:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <nrk_wait_until_next_period>
    return NRK_OK;
}
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	08 95       	ret

00002ca0 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    2ca0:	cf 93       	push	r28
    2ca2:	df 93       	push	r29
    2ca4:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    2ca6:	0e 94 15 11 	call	0x222a	; 0x222a <nrk_stack_check>

    if (p == 0)
    2caa:	20 97       	sbiw	r28, 0x00	; 0
    2cac:	11 f4       	brne	.+4      	; 0x2cb2 <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    2cae:	c1 e0       	ldi	r28, 0x01	; 1
    2cb0:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2cb2:	0e 94 cf 0c 	call	0x199e	; 0x199e <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2cb6:	e0 91 0c 06 	lds	r30, 0x060C
    2cba:	f0 91 0d 06 	lds	r31, 0x060D
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    2cc2:	d2 a7       	std	Z+42, r29	; 0x2a
    2cc4:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    2cc6:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <_nrk_os_timer_get>
    2cca:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    2ccc:	88 3f       	cpi	r24, 0xF8	; 248
    2cce:	80 f4       	brcc	.+32     	; 0x2cf0 <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2cd0:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <_nrk_get_next_wakeup>
    2cd4:	2c 2f       	mov	r18, r28
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	2f 5f       	subi	r18, 0xFF	; 255
    2cda:	3f 4f       	sbci	r19, 0xFF	; 255
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	28 17       	cp	r18, r24
    2ce0:	39 07       	cpc	r19, r25
    2ce2:	34 f4       	brge	.+12     	; 0x2cf0 <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    2ce4:	82 e0       	ldi	r24, 0x02	; 2
    2ce6:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2ce8:	80 93 20 04 	sts	0x0420, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2cec:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2cf0:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2cf4:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	df 91       	pop	r29
    2cfc:	cf 91       	pop	r28
    2cfe:	08 95       	ret

00002d00 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    2d00:	ef 92       	push	r14
    2d02:	ff 92       	push	r15
    2d04:	0f 93       	push	r16
    2d06:	1f 93       	push	r17
    2d08:	cf 93       	push	r28
    2d0a:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    2d0c:	0e 94 cf 0c 	call	0x199e	; 0x199e <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2d10:	e0 91 0c 06 	lds	r30, 0x060C
    2d14:	f0 91 0d 06 	lds	r31, 0x060D
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2d1c:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <_nrk_os_timer_get>
    2d20:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    2d22:	e0 91 0c 06 	lds	r30, 0x060C
    2d26:	f0 91 0d 06 	lds	r31, 0x060D
    2d2a:	e8 2e       	mov	r14, r24
    2d2c:	f1 2c       	mov	r15, r1
    2d2e:	c7 01       	movw	r24, r14
    2d30:	80 0f       	add	r24, r16
    2d32:	91 1f       	adc	r25, r17
    2d34:	a0 e0       	ldi	r26, 0x00	; 0
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	85 8b       	std	Z+21, r24	; 0x15
    2d3a:	96 8b       	std	Z+22, r25	; 0x16
    2d3c:	a7 8b       	std	Z+23, r26	; 0x17
    2d3e:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2d40:	c8 3f       	cpi	r28, 0xF8	; 248
    2d42:	78 f4       	brcc	.+30     	; 0x2d62 <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2d44:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <_nrk_get_next_wakeup>
    2d48:	9f ef       	ldi	r25, 0xFF	; 255
    2d4a:	e9 1a       	sub	r14, r25
    2d4c:	f9 0a       	sbc	r15, r25
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	e8 16       	cp	r14, r24
    2d52:	f9 06       	cpc	r15, r25
    2d54:	34 f4       	brge	.+12     	; 0x2d62 <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    2d56:	82 e0       	ldi	r24, 0x02	; 2
    2d58:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2d5a:	80 93 20 04 	sts	0x0420, r24
            _nrk_set_next_wakeup (timer);
    2d5e:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2d62:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2d66:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	cf 91       	pop	r28
    2d6e:	1f 91       	pop	r17
    2d70:	0f 91       	pop	r16
    2d72:	ff 90       	pop	r15
    2d74:	ef 90       	pop	r14
    2d76:	08 95       	ret

00002d78 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    2d78:	cf 93       	push	r28
    2d7a:	df 93       	push	r29
    2d7c:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    2d7e:	0e 94 cf 0c 	call	0x199e	; 0x199e <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2d82:	e0 91 0c 06 	lds	r30, 0x060C
    2d86:	f0 91 0d 06 	lds	r31, 0x060D
    2d8a:	21 e0       	ldi	r18, 0x01	; 1
    2d8c:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    2d8e:	ce 01       	movw	r24, r28
    2d90:	a0 e0       	ldi	r26, 0x00	; 0
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	85 8b       	std	Z+21, r24	; 0x15
    2d96:	96 8b       	std	Z+22, r25	; 0x16
    2d98:	a7 8b       	std	Z+23, r26	; 0x17
    2d9a:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    2d9c:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <_nrk_os_timer_get>
    2da0:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2da2:	88 3f       	cpi	r24, 0xF8	; 248
    2da4:	80 f4       	brcc	.+32     	; 0x2dc6 <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2da6:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <_nrk_get_next_wakeup>
    2daa:	2c 2f       	mov	r18, r28
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	2f 5f       	subi	r18, 0xFF	; 255
    2db0:	3f 4f       	sbci	r19, 0xFF	; 255
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	28 17       	cp	r18, r24
    2db6:	39 07       	cpc	r19, r25
    2db8:	34 f4       	brge	.+12     	; 0x2dc6 <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    2dba:	82 e0       	ldi	r24, 0x02	; 2
    2dbc:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2dbe:	80 93 20 04 	sts	0x0420, r24
            _nrk_set_next_wakeup (timer);
    2dc2:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2dc6:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2dca:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	df 91       	pop	r29
    2dd2:	cf 91       	pop	r28
    2dd4:	08 95       	ret

00002dd6 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    2dd6:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    2dd8:	0e 94 cf 0c 	call	0x199e	; 0x199e <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2ddc:	e0 91 0c 06 	lds	r30, 0x060C
    2de0:	f0 91 0d 06 	lds	r31, 0x060D
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    2de8:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    2dea:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <_nrk_os_timer_get>
    2dee:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2df0:	88 3f       	cpi	r24, 0xF8	; 248
    2df2:	80 f4       	brcc	.+32     	; 0x2e14 <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2df4:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <_nrk_get_next_wakeup>
    2df8:	2c 2f       	mov	r18, r28
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	2f 5f       	subi	r18, 0xFF	; 255
    2dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	28 17       	cp	r18, r24
    2e04:	39 07       	cpc	r19, r25
    2e06:	34 f4       	brge	.+12     	; 0x2e14 <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    2e08:	82 e0       	ldi	r24, 0x02	; 2
    2e0a:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2e0c:	80 93 20 04 	sts	0x0420, r24
            _nrk_set_next_wakeup (timer);
    2e10:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2e14:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2e18:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	cf 91       	pop	r28
    2e20:	08 95       	ret

00002e22 <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    2e22:	1f 93       	push	r17
    2e24:	cf 93       	push	r28
    2e26:	df 93       	push	r29
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
    2e2c:	28 97       	sbiw	r28, 0x08	; 8
    2e2e:	0f b6       	in	r0, 0x3f	; 63
    2e30:	f8 94       	cli
    2e32:	de bf       	out	0x3e, r29	; 62
    2e34:	0f be       	out	0x3f, r0	; 63
    2e36:	cd bf       	out	0x3d, r28	; 61
    2e38:	29 83       	std	Y+1, r18	; 0x01
    2e3a:	3a 83       	std	Y+2, r19	; 0x02
    2e3c:	4b 83       	std	Y+3, r20	; 0x03
    2e3e:	5c 83       	std	Y+4, r21	; 0x04
    2e40:	6d 83       	std	Y+5, r22	; 0x05
    2e42:	7e 83       	std	Y+6, r23	; 0x06
    2e44:	8f 83       	std	Y+7, r24	; 0x07
    2e46:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    2e48:	0e 94 15 11 	call	0x222a	; 0x222a <nrk_stack_check>

    nrk_int_disable ();
    2e4c:	0e 94 cf 0c 	call	0x199e	; 0x199e <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2e50:	e0 91 0c 06 	lds	r30, 0x060C
    2e54:	f0 91 0d 06 	lds	r31, 0x060D
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	92 a7       	std	Z+42, r25	; 0x2a
    2e62:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    2e64:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <_nrk_os_timer_get>
    2e68:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    2e6a:	ce 01       	movw	r24, r28
    2e6c:	01 96       	adiw	r24, 0x01	; 1
    2e6e:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2e72:	e0 91 0c 06 	lds	r30, 0x060C
    2e76:	f0 91 0d 06 	lds	r31, 0x060D
    2e7a:	dc 01       	movw	r26, r24
    2e7c:	cb 01       	movw	r24, r22
    2e7e:	81 0f       	add	r24, r17
    2e80:	91 1d       	adc	r25, r1
    2e82:	a1 1d       	adc	r26, r1
    2e84:	b1 1d       	adc	r27, r1
    2e86:	85 8b       	std	Z+21, r24	; 0x15
    2e88:	96 8b       	std	Z+22, r25	; 0x16
    2e8a:	a7 8b       	std	Z+23, r26	; 0x17
    2e8c:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2e8e:	18 3f       	cpi	r17, 0xF8	; 248
    2e90:	80 f4       	brcc	.+32     	; 0x2eb2 <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2e92:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <_nrk_get_next_wakeup>
    2e96:	21 2f       	mov	r18, r17
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	2f 5f       	subi	r18, 0xFF	; 255
    2e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	28 17       	cp	r18, r24
    2ea2:	39 07       	cpc	r19, r25
    2ea4:	34 f4       	brge	.+12     	; 0x2eb2 <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    2ea6:	82 e0       	ldi	r24, 0x02	; 2
    2ea8:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    2eaa:	80 93 20 04 	sts	0x0420, r24
            _nrk_set_next_wakeup (timer);
    2eae:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    2eb2:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    2eb6:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	28 96       	adiw	r28, 0x08	; 8
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	df 91       	pop	r29
    2eca:	cf 91       	pop	r28
    2ecc:	1f 91       	pop	r17
    2ece:	08 95       	ret

00002ed0 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    2ed0:	8f 92       	push	r8
    2ed2:	9f 92       	push	r9
    2ed4:	af 92       	push	r10
    2ed6:	bf 92       	push	r11
    2ed8:	cf 92       	push	r12
    2eda:	df 92       	push	r13
    2edc:	ef 92       	push	r14
    2ede:	ff 92       	push	r15
    2ee0:	0f 93       	push	r16
    2ee2:	1f 93       	push	r17
    2ee4:	cf 93       	push	r28
    2ee6:	df 93       	push	r29
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
    2eec:	60 97       	sbiw	r28, 0x10	; 16
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	29 87       	std	Y+9, r18	; 0x09
    2efa:	3a 87       	std	Y+10, r19	; 0x0a
    2efc:	4b 87       	std	Y+11, r20	; 0x0b
    2efe:	5c 87       	std	Y+12, r21	; 0x0c
    2f00:	6d 87       	std	Y+13, r22	; 0x0d
    2f02:	7e 87       	std	Y+14, r23	; 0x0e
    2f04:	8f 87       	std	Y+15, r24	; 0x0f
    2f06:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    2f08:	ce 01       	movw	r24, r28
    2f0a:	01 96       	adiw	r24, 0x01	; 1
    2f0c:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    2f10:	89 80       	ldd	r8, Y+1	; 0x01
    2f12:	9a 80       	ldd	r9, Y+2	; 0x02
    2f14:	ab 80       	ldd	r10, Y+3	; 0x03
    2f16:	bc 80       	ldd	r11, Y+4	; 0x04
    2f18:	cd 80       	ldd	r12, Y+5	; 0x05
    2f1a:	de 80       	ldd	r13, Y+6	; 0x06
    2f1c:	ef 80       	ldd	r14, Y+7	; 0x07
    2f1e:	f8 84       	ldd	r15, Y+8	; 0x08
    2f20:	09 85       	ldd	r16, Y+9	; 0x09
    2f22:	1a 85       	ldd	r17, Y+10	; 0x0a
    2f24:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f26:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f28:	4d 85       	ldd	r20, Y+13	; 0x0d
    2f2a:	5e 85       	ldd	r21, Y+14	; 0x0e
    2f2c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f2e:	78 89       	ldd	r23, Y+16	; 0x10
    2f30:	ce 01       	movw	r24, r28
    2f32:	09 96       	adiw	r24, 0x09	; 9
    2f34:	0e 94 21 18 	call	0x3042	; 0x3042 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    2f38:	8f 3f       	cpi	r24, 0xFF	; 255
    2f3a:	61 f0       	breq	.+24     	; 0x2f54 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    2f3c:	29 85       	ldd	r18, Y+9	; 0x09
    2f3e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f40:	4b 85       	ldd	r20, Y+11	; 0x0b
    2f42:	5c 85       	ldd	r21, Y+12	; 0x0c
    2f44:	6d 85       	ldd	r22, Y+13	; 0x0d
    2f46:	7e 85       	ldd	r23, Y+14	; 0x0e
    2f48:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f4a:	98 89       	ldd	r25, Y+16	; 0x10
    2f4c:	0e 94 11 17 	call	0x2e22	; 0x2e22 <nrk_wait>

    return NRK_OK;
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	01 c0       	rjmp	.+2      	; 0x2f56 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    2f54:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    2f56:	60 96       	adiw	r28, 0x10	; 16
    2f58:	0f b6       	in	r0, 0x3f	; 63
    2f5a:	f8 94       	cli
    2f5c:	de bf       	out	0x3e, r29	; 62
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	cd bf       	out	0x3d, r28	; 61
    2f62:	df 91       	pop	r29
    2f64:	cf 91       	pop	r28
    2f66:	1f 91       	pop	r17
    2f68:	0f 91       	pop	r16
    2f6a:	ff 90       	pop	r15
    2f6c:	ef 90       	pop	r14
    2f6e:	df 90       	pop	r13
    2f70:	cf 90       	pop	r12
    2f72:	bf 90       	pop	r11
    2f74:	af 90       	pop	r10
    2f76:	9f 90       	pop	r9
    2f78:	8f 90       	pop	r8
    2f7a:	08 95       	ret

00002f7c <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    2f7c:	e0 91 0c 06 	lds	r30, 0x060C
    2f80:	f0 91 0d 06 	lds	r31, 0x060D
}
    2f84:	80 85       	ldd	r24, Z+8	; 0x08
    2f86:	08 95       	ret

00002f88 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    2f88:	0f 93       	push	r16
    2f8a:	1f 93       	push	r17
    2f8c:	cf 93       	push	r28
    2f8e:	df 93       	push	r29
    2f90:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    2f92:	1c 82       	std	Y+4, r1	; 0x04
    2f94:	1d 82       	std	Y+5, r1	; 0x05
    2f96:	1e 82       	std	Y+6, r1	; 0x06
    2f98:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    2f9a:	80 91 03 06 	lds	r24, 0x0603
    2f9e:	90 91 04 06 	lds	r25, 0x0604
    2fa2:	a0 91 05 06 	lds	r26, 0x0605
    2fa6:	b0 91 06 06 	lds	r27, 0x0606
    2faa:	88 83       	st	Y, r24
    2fac:	99 83       	std	Y+1, r25	; 0x01
    2fae:	aa 83       	std	Y+2, r26	; 0x02
    2fb0:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    2fb2:	80 91 07 06 	lds	r24, 0x0607
    2fb6:	90 91 08 06 	lds	r25, 0x0608
    2fba:	a0 91 09 06 	lds	r26, 0x0609
    2fbe:	b0 91 0a 06 	lds	r27, 0x060A
    2fc2:	8c 83       	std	Y+4, r24	; 0x04
    2fc4:	9d 83       	std	Y+5, r25	; 0x05
    2fc6:	ae 83       	std	Y+6, r26	; 0x06
    2fc8:	bf 83       	std	Y+7, r27	; 0x07
 
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    2fca:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <_nrk_os_timer_get>
    2fce:	a8 2f       	mov	r26, r24
    2fd0:	b0 e0       	ldi	r27, 0x00	; 0
    2fd2:	23 eb       	ldi	r18, 0xB3	; 179
    2fd4:	36 ee       	ldi	r19, 0xE6	; 230
    2fd6:	4e e0       	ldi	r20, 0x0E	; 14
    2fd8:	50 e0       	ldi	r21, 0x00	; 0
    2fda:	0e 94 95 24 	call	0x492a	; 0x492a <__muluhisi3>
    2fde:	0c 81       	ldd	r16, Y+4	; 0x04
    2fe0:	1d 81       	ldd	r17, Y+5	; 0x05
    2fe2:	2e 81       	ldd	r18, Y+6	; 0x06
    2fe4:	3f 81       	ldd	r19, Y+7	; 0x07
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	80 0f       	add	r24, r16
    2fec:	91 1f       	adc	r25, r17
    2fee:	a2 1f       	adc	r26, r18
    2ff0:	b3 1f       	adc	r27, r19
    2ff2:	8c 83       	std	Y+4, r24	; 0x04
    2ff4:	9d 83       	std	Y+5, r25	; 0x05
    2ff6:	ae 83       	std	Y+6, r26	; 0x06
    2ff8:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    2ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    2ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ffe:	ae 81       	ldd	r26, Y+6	; 0x06
    3000:	bf 81       	ldd	r27, Y+7	; 0x07
    3002:	81 15       	cp	r24, r1
    3004:	2a ec       	ldi	r18, 0xCA	; 202
    3006:	92 07       	cpc	r25, r18
    3008:	2a e9       	ldi	r18, 0x9A	; 154
    300a:	a2 07       	cpc	r26, r18
    300c:	2b e3       	ldi	r18, 0x3B	; 59
    300e:	b2 07       	cpc	r27, r18
    3010:	98 f0       	brcs	.+38     	; 0x3038 <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    3012:	9a 5c       	subi	r25, 0xCA	; 202
    3014:	aa 49       	sbci	r26, 0x9A	; 154
    3016:	bb 43       	sbci	r27, 0x3B	; 59
    3018:	8c 83       	std	Y+4, r24	; 0x04
    301a:	9d 83       	std	Y+5, r25	; 0x05
    301c:	ae 83       	std	Y+6, r26	; 0x06
    301e:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    3020:	88 81       	ld	r24, Y
    3022:	99 81       	ldd	r25, Y+1	; 0x01
    3024:	aa 81       	ldd	r26, Y+2	; 0x02
    3026:	bb 81       	ldd	r27, Y+3	; 0x03
    3028:	01 96       	adiw	r24, 0x01	; 1
    302a:	a1 1d       	adc	r26, r1
    302c:	b1 1d       	adc	r27, r1
    302e:	88 83       	st	Y, r24
    3030:	99 83       	std	Y+1, r25	; 0x01
    3032:	aa 83       	std	Y+2, r26	; 0x02
    3034:	bb 83       	std	Y+3, r27	; 0x03
    3036:	e1 cf       	rjmp	.-62     	; 0x2ffa <nrk_time_get+0x72>
    }

}
    3038:	df 91       	pop	r29
    303a:	cf 91       	pop	r28
    303c:	1f 91       	pop	r17
    303e:	0f 91       	pop	r16
    3040:	08 95       	ret

00003042 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    3042:	8f 92       	push	r8
    3044:	9f 92       	push	r9
    3046:	af 92       	push	r10
    3048:	bf 92       	push	r11
    304a:	cf 92       	push	r12
    304c:	df 92       	push	r13
    304e:	ef 92       	push	r14
    3050:	ff 92       	push	r15
    3052:	0f 93       	push	r16
    3054:	1f 93       	push	r17
    3056:	cf 93       	push	r28
    3058:	df 93       	push	r29
    305a:	cd b7       	in	r28, 0x3d	; 61
    305c:	de b7       	in	r29, 0x3e	; 62
    305e:	60 97       	sbiw	r28, 0x10	; 16
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	f8 94       	cli
    3064:	de bf       	out	0x3e, r29	; 62
    3066:	0f be       	out	0x3f, r0	; 63
    3068:	cd bf       	out	0x3d, r28	; 61
    306a:	fc 01       	movw	r30, r24
    306c:	09 83       	std	Y+1, r16	; 0x01
    306e:	1a 83       	std	Y+2, r17	; 0x02
    3070:	2b 83       	std	Y+3, r18	; 0x03
    3072:	3c 83       	std	Y+4, r19	; 0x04
    3074:	4d 83       	std	Y+5, r20	; 0x05
    3076:	5e 83       	std	Y+6, r21	; 0x06
    3078:	6f 83       	std	Y+7, r22	; 0x07
    307a:	78 87       	std	Y+8, r23	; 0x08
    307c:	89 86       	std	Y+9, r8	; 0x09
    307e:	9a 86       	std	Y+10, r9	; 0x0a
    3080:	ab 86       	std	Y+11, r10	; 0x0b
    3082:	bc 86       	std	Y+12, r11	; 0x0c
    3084:	cd 86       	std	Y+13, r12	; 0x0d
    3086:	de 86       	std	Y+14, r13	; 0x0e
    3088:	ef 86       	std	Y+15, r14	; 0x0f
    308a:	f8 8a       	std	Y+16, r15	; 0x10
    308c:	09 81       	ldd	r16, Y+1	; 0x01
    308e:	1a 81       	ldd	r17, Y+2	; 0x02
    3090:	2b 81       	ldd	r18, Y+3	; 0x03
    3092:	3c 81       	ldd	r19, Y+4	; 0x04
    3094:	4d 81       	ldd	r20, Y+5	; 0x05
    3096:	5e 81       	ldd	r21, Y+6	; 0x06
    3098:	6f 81       	ldd	r22, Y+7	; 0x07
    309a:	78 85       	ldd	r23, Y+8	; 0x08
    309c:	c9 84       	ldd	r12, Y+9	; 0x09
    309e:	da 84       	ldd	r13, Y+10	; 0x0a
    30a0:	eb 84       	ldd	r14, Y+11	; 0x0b
    30a2:	fc 84       	ldd	r15, Y+12	; 0x0c
    30a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a8:	af 85       	ldd	r26, Y+15	; 0x0f
    30aa:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    30ac:	0c 15       	cp	r16, r12
    30ae:	1d 05       	cpc	r17, r13
    30b0:	2e 05       	cpc	r18, r14
    30b2:	3f 05       	cpc	r19, r15
    30b4:	f0 f1       	brcs	.+124    	; 0x3132 <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    30b6:	c0 16       	cp	r12, r16
    30b8:	d1 06       	cpc	r13, r17
    30ba:	e2 06       	cpc	r14, r18
    30bc:	f3 06       	cpc	r15, r19
    30be:	91 f4       	brne	.+36     	; 0x30e4 <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    30c0:	48 17       	cp	r20, r24
    30c2:	59 07       	cpc	r21, r25
    30c4:	6a 07       	cpc	r22, r26
    30c6:	7b 07       	cpc	r23, r27
    30c8:	a0 f1       	brcs	.+104    	; 0x3132 <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    30ca:	48 1b       	sub	r20, r24
    30cc:	59 0b       	sbc	r21, r25
    30ce:	6a 0b       	sbc	r22, r26
    30d0:	7b 0b       	sbc	r23, r27
    30d2:	44 83       	std	Z+4, r20	; 0x04
    30d4:	55 83       	std	Z+5, r21	; 0x05
    30d6:	66 83       	std	Z+6, r22	; 0x06
    30d8:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    30da:	10 82       	st	Z, r1
    30dc:	11 82       	std	Z+1, r1	; 0x01
    30de:	12 82       	std	Z+2, r1	; 0x02
    30e0:	13 82       	std	Z+3, r1	; 0x03
    30e2:	25 c0       	rjmp	.+74     	; 0x312e <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    30e4:	48 17       	cp	r20, r24
    30e6:	59 07       	cpc	r21, r25
    30e8:	6a 07       	cpc	r22, r26
    30ea:	7b 07       	cpc	r23, r27
    30ec:	80 f4       	brcc	.+32     	; 0x310e <nrk_time_sub+0xcc>
{
	high.secs--;
    30ee:	01 50       	subi	r16, 0x01	; 1
    30f0:	11 09       	sbc	r17, r1
    30f2:	21 09       	sbc	r18, r1
    30f4:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    30f6:	0c 19       	sub	r16, r12
    30f8:	1d 09       	sbc	r17, r13
    30fa:	2e 09       	sbc	r18, r14
    30fc:	3f 09       	sbc	r19, r15
    30fe:	00 83       	st	Z, r16
    3100:	11 83       	std	Z+1, r17	; 0x01
    3102:	22 83       	std	Z+2, r18	; 0x02
    3104:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    3106:	56 53       	subi	r21, 0x36	; 54
    3108:	65 46       	sbci	r22, 0x65	; 101
    310a:	74 4c       	sbci	r23, 0xC4	; 196
    310c:	08 c0       	rjmp	.+16     	; 0x311e <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    310e:	0c 19       	sub	r16, r12
    3110:	1d 09       	sbc	r17, r13
    3112:	2e 09       	sbc	r18, r14
    3114:	3f 09       	sbc	r19, r15
    3116:	00 83       	st	Z, r16
    3118:	11 83       	std	Z+1, r17	; 0x01
    311a:	22 83       	std	Z+2, r18	; 0x02
    311c:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    311e:	48 1b       	sub	r20, r24
    3120:	59 0b       	sbc	r21, r25
    3122:	6a 0b       	sbc	r22, r26
    3124:	7b 0b       	sbc	r23, r27
    3126:	44 83       	std	Z+4, r20	; 0x04
    3128:	55 83       	std	Z+5, r21	; 0x05
    312a:	66 83       	std	Z+6, r22	; 0x06
    312c:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	01 c0       	rjmp	.+2      	; 0x3134 <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    3132:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    3134:	60 96       	adiw	r28, 0x10	; 16
    3136:	0f b6       	in	r0, 0x3f	; 63
    3138:	f8 94       	cli
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	cd bf       	out	0x3d, r28	; 61
    3140:	df 91       	pop	r29
    3142:	cf 91       	pop	r28
    3144:	1f 91       	pop	r17
    3146:	0f 91       	pop	r16
    3148:	ff 90       	pop	r15
    314a:	ef 90       	pop	r14
    314c:	df 90       	pop	r13
    314e:	cf 90       	pop	r12
    3150:	bf 90       	pop	r11
    3152:	af 90       	pop	r10
    3154:	9f 90       	pop	r9
    3156:	8f 90       	pop	r8
    3158:	08 95       	ret

0000315a <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    315a:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    315c:	44 81       	ldd	r20, Z+4	; 0x04
    315e:	55 81       	ldd	r21, Z+5	; 0x05
    3160:	66 81       	ldd	r22, Z+6	; 0x06
    3162:	77 81       	ldd	r23, Z+7	; 0x07
    3164:	41 15       	cp	r20, r1
    3166:	8a ec       	ldi	r24, 0xCA	; 202
    3168:	58 07       	cpc	r21, r24
    316a:	8a e9       	ldi	r24, 0x9A	; 154
    316c:	68 07       	cpc	r22, r24
    316e:	8b e3       	ldi	r24, 0x3B	; 59
    3170:	78 07       	cpc	r23, r24
    3172:	98 f0       	brcs	.+38     	; 0x319a <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    3174:	5a 5c       	subi	r21, 0xCA	; 202
    3176:	6a 49       	sbci	r22, 0x9A	; 154
    3178:	7b 43       	sbci	r23, 0x3B	; 59
    317a:	44 83       	std	Z+4, r20	; 0x04
    317c:	55 83       	std	Z+5, r21	; 0x05
    317e:	66 83       	std	Z+6, r22	; 0x06
    3180:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    3182:	80 81       	ld	r24, Z
    3184:	91 81       	ldd	r25, Z+1	; 0x01
    3186:	a2 81       	ldd	r26, Z+2	; 0x02
    3188:	b3 81       	ldd	r27, Z+3	; 0x03
    318a:	01 96       	adiw	r24, 0x01	; 1
    318c:	a1 1d       	adc	r26, r1
    318e:	b1 1d       	adc	r27, r1
    3190:	80 83       	st	Z, r24
    3192:	91 83       	std	Z+1, r25	; 0x01
    3194:	a2 83       	std	Z+2, r26	; 0x02
    3196:	b3 83       	std	Z+3, r27	; 0x03
    3198:	e1 cf       	rjmp	.-62     	; 0x315c <nrk_time_compact_nanos+0x2>
    }
}
    319a:	08 95       	ret

0000319c <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    319c:	8f 92       	push	r8
    319e:	9f 92       	push	r9
    31a0:	af 92       	push	r10
    31a2:	bf 92       	push	r11
    31a4:	cf 92       	push	r12
    31a6:	df 92       	push	r13
    31a8:	ef 92       	push	r14
    31aa:	ff 92       	push	r15
    31ac:	0f 93       	push	r16
    31ae:	1f 93       	push	r17
    31b0:	cf 93       	push	r28
    31b2:	df 93       	push	r29
    31b4:	cd b7       	in	r28, 0x3d	; 61
    31b6:	de b7       	in	r29, 0x3e	; 62
    31b8:	60 97       	sbiw	r28, 0x10	; 16
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	de bf       	out	0x3e, r29	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	cd bf       	out	0x3d, r28	; 61
    31c4:	09 83       	std	Y+1, r16	; 0x01
    31c6:	1a 83       	std	Y+2, r17	; 0x02
    31c8:	2b 83       	std	Y+3, r18	; 0x03
    31ca:	3c 83       	std	Y+4, r19	; 0x04
    31cc:	4d 83       	std	Y+5, r20	; 0x05
    31ce:	5e 83       	std	Y+6, r21	; 0x06
    31d0:	6f 83       	std	Y+7, r22	; 0x07
    31d2:	78 87       	std	Y+8, r23	; 0x08
    31d4:	89 86       	std	Y+9, r8	; 0x09
    31d6:	9a 86       	std	Y+10, r9	; 0x0a
    31d8:	ab 86       	std	Y+11, r10	; 0x0b
    31da:	bc 86       	std	Y+12, r11	; 0x0c
    31dc:	cd 86       	std	Y+13, r12	; 0x0d
    31de:	de 86       	std	Y+14, r13	; 0x0e
    31e0:	ef 86       	std	Y+15, r14	; 0x0f
    31e2:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    31e4:	09 85       	ldd	r16, Y+9	; 0x09
    31e6:	1a 85       	ldd	r17, Y+10	; 0x0a
    31e8:	2b 85       	ldd	r18, Y+11	; 0x0b
    31ea:	3c 85       	ldd	r19, Y+12	; 0x0c
    31ec:	49 81       	ldd	r20, Y+1	; 0x01
    31ee:	5a 81       	ldd	r21, Y+2	; 0x02
    31f0:	6b 81       	ldd	r22, Y+3	; 0x03
    31f2:	7c 81       	ldd	r23, Y+4	; 0x04
    31f4:	40 0f       	add	r20, r16
    31f6:	51 1f       	adc	r21, r17
    31f8:	62 1f       	adc	r22, r18
    31fa:	73 1f       	adc	r23, r19
    31fc:	fc 01       	movw	r30, r24
    31fe:	40 83       	st	Z, r20
    3200:	51 83       	std	Z+1, r21	; 0x01
    3202:	62 83       	std	Z+2, r22	; 0x02
    3204:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    3206:	0d 85       	ldd	r16, Y+13	; 0x0d
    3208:	1e 85       	ldd	r17, Y+14	; 0x0e
    320a:	2f 85       	ldd	r18, Y+15	; 0x0f
    320c:	38 89       	ldd	r19, Y+16	; 0x10
    320e:	4d 81       	ldd	r20, Y+5	; 0x05
    3210:	5e 81       	ldd	r21, Y+6	; 0x06
    3212:	6f 81       	ldd	r22, Y+7	; 0x07
    3214:	78 85       	ldd	r23, Y+8	; 0x08
    3216:	40 0f       	add	r20, r16
    3218:	51 1f       	adc	r21, r17
    321a:	62 1f       	adc	r22, r18
    321c:	73 1f       	adc	r23, r19
    321e:	44 83       	std	Z+4, r20	; 0x04
    3220:	55 83       	std	Z+5, r21	; 0x05
    3222:	66 83       	std	Z+6, r22	; 0x06
    3224:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    3226:	0e 94 ad 18 	call	0x315a	; 0x315a <nrk_time_compact_nanos>
return NRK_OK;
}
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	60 96       	adiw	r28, 0x10	; 16
    322e:	0f b6       	in	r0, 0x3f	; 63
    3230:	f8 94       	cli
    3232:	de bf       	out	0x3e, r29	; 62
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	cd bf       	out	0x3d, r28	; 61
    3238:	df 91       	pop	r29
    323a:	cf 91       	pop	r28
    323c:	1f 91       	pop	r17
    323e:	0f 91       	pop	r16
    3240:	ff 90       	pop	r15
    3242:	ef 90       	pop	r14
    3244:	df 90       	pop	r13
    3246:	cf 90       	pop	r12
    3248:	bf 90       	pop	r11
    324a:	af 90       	pop	r10
    324c:	9f 90       	pop	r9
    324e:	8f 90       	pop	r8
    3250:	08 95       	ret

00003252 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    3252:	e3 e0       	ldi	r30, 0x03	; 3
    3254:	f6 e0       	ldi	r31, 0x06	; 6
    3256:	60 83       	st	Z, r22
    3258:	71 83       	std	Z+1, r23	; 0x01
    325a:	82 83       	std	Z+2, r24	; 0x02
    325c:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    325e:	24 83       	std	Z+4, r18	; 0x04
    3260:	35 83       	std	Z+5, r19	; 0x05
    3262:	46 83       	std	Z+6, r20	; 0x06
    3264:	57 83       	std	Z+7, r21	; 0x07
    3266:	08 95       	ret

00003268 <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    3268:	2f 92       	push	r2
    326a:	3f 92       	push	r3
    326c:	4f 92       	push	r4
    326e:	5f 92       	push	r5
    3270:	6f 92       	push	r6
    3272:	7f 92       	push	r7
    3274:	8f 92       	push	r8
    3276:	9f 92       	push	r9
    3278:	af 92       	push	r10
    327a:	bf 92       	push	r11
    327c:	cf 92       	push	r12
    327e:	df 92       	push	r13
    3280:	ef 92       	push	r14
    3282:	ff 92       	push	r15
    3284:	0f 93       	push	r16
    3286:	1f 93       	push	r17
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3288:	fc 01       	movw	r30, r24
    328a:	c0 80       	ld	r12, Z
    328c:	d1 80       	ldd	r13, Z+1	; 0x01
    328e:	e2 80       	ldd	r14, Z+2	; 0x02
    3290:	f3 80       	ldd	r15, Z+3	; 0x03
    3292:	64 81       	ldd	r22, Z+4	; 0x04
    3294:	75 81       	ldd	r23, Z+5	; 0x05
    3296:	86 81       	ldd	r24, Z+6	; 0x06
    3298:	97 81       	ldd	r25, Z+7	; 0x07
    329a:	c1 14       	cp	r12, r1
    329c:	d1 04       	cpc	r13, r1
    329e:	e1 04       	cpc	r14, r1
    32a0:	f1 04       	cpc	r15, r1
    32a2:	c1 f1       	breq	.+112    	; 0x3314 <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    32a4:	f2 e4       	ldi	r31, 0x42	; 66
    32a6:	cf 16       	cp	r12, r31
    32a8:	d1 04       	cpc	r13, r1
    32aa:	e1 04       	cpc	r14, r1
    32ac:	f1 04       	cpc	r15, r1
    32ae:	d0 f5       	brcc	.+116    	; 0x3324 <_nrk_time_to_ticks+0xbc>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    32b0:	1b 01       	movw	r2, r22
    32b2:	2c 01       	movw	r4, r24
    32b4:	61 2c       	mov	r6, r1
    32b6:	71 2c       	mov	r7, r1
    32b8:	43 01       	movw	r8, r6
    32ba:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    32bc:	8e 2f       	mov	r24, r30
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	a0 e0       	ldi	r26, 0x00	; 0
    32c2:	b0 e0       	ldi	r27, 0x00	; 0
    32c4:	8c 15       	cp	r24, r12
    32c6:	9d 05       	cpc	r25, r13
    32c8:	ae 05       	cpc	r26, r14
    32ca:	bf 05       	cpc	r27, r15
    32cc:	88 f4       	brcc	.+34     	; 0x32f0 <_nrk_time_to_ticks+0x88>
    32ce:	91 01       	movw	r18, r2
    32d0:	a2 01       	movw	r20, r4
    32d2:	b3 01       	movw	r22, r6
    32d4:	c4 01       	movw	r24, r8
    32d6:	36 53       	subi	r19, 0x36	; 54
    32d8:	45 46       	sbci	r20, 0x65	; 101
    32da:	54 4c       	sbci	r21, 0xC4	; 196
    32dc:	6f 4f       	sbci	r22, 0xFF	; 255
    32de:	7f 4f       	sbci	r23, 0xFF	; 255
    32e0:	8f 4f       	sbci	r24, 0xFF	; 255
    32e2:	9f 4f       	sbci	r25, 0xFF	; 255
    32e4:	19 01       	movw	r2, r18
    32e6:	2a 01       	movw	r4, r20
    32e8:	3b 01       	movw	r6, r22
    32ea:	4c 01       	movw	r8, r24
    32ec:	ef 5f       	subi	r30, 0xFF	; 255
    32ee:	e6 cf       	rjmp	.-52     	; 0x32bc <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    32f0:	83 eb       	ldi	r24, 0xB3	; 179
    32f2:	a8 2e       	mov	r10, r24
    32f4:	96 ee       	ldi	r25, 0xE6	; 230
    32f6:	b9 2e       	mov	r11, r25
    32f8:	2e e0       	ldi	r18, 0x0E	; 14
    32fa:	c2 2e       	mov	r12, r18
    32fc:	d1 2c       	mov	r13, r1
    32fe:	e1 2c       	mov	r14, r1
    3300:	f1 2c       	mov	r15, r1
    3302:	00 e0       	ldi	r16, 0x00	; 0
    3304:	10 e0       	ldi	r17, 0x00	; 0
    3306:	91 01       	movw	r18, r2
    3308:	a2 01       	movw	r20, r4
    330a:	b3 01       	movw	r22, r6
    330c:	c4 01       	movw	r24, r8
    330e:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <__udivdi3>
    3312:	06 c0       	rjmp	.+12     	; 0x3320 <_nrk_time_to_ticks+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    3314:	23 eb       	ldi	r18, 0xB3	; 179
    3316:	36 ee       	ldi	r19, 0xE6	; 230
    3318:	4e e0       	ldi	r20, 0x0E	; 14
    331a:	50 e0       	ldi	r21, 0x00	; 0
    331c:	0e 94 b0 24 	call	0x4960	; 0x4960 <__udivmodsi4>
    3320:	c9 01       	movw	r24, r18
    3322:	02 c0       	rjmp	.+4      	; 0x3328 <_nrk_time_to_ticks+0xc0>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3324:	80 e0       	ldi	r24, 0x00	; 0
    3326:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    3328:	1f 91       	pop	r17
    332a:	0f 91       	pop	r16
    332c:	ff 90       	pop	r15
    332e:	ef 90       	pop	r14
    3330:	df 90       	pop	r13
    3332:	cf 90       	pop	r12
    3334:	bf 90       	pop	r11
    3336:	af 90       	pop	r10
    3338:	9f 90       	pop	r9
    333a:	8f 90       	pop	r8
    333c:	7f 90       	pop	r7
    333e:	6f 90       	pop	r6
    3340:	5f 90       	pop	r5
    3342:	4f 90       	pop	r4
    3344:	3f 90       	pop	r3
    3346:	2f 90       	pop	r2
    3348:	08 95       	ret

0000334a <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    334a:	cf 92       	push	r12
    334c:	df 92       	push	r13
    334e:	ef 92       	push	r14
    3350:	ff 92       	push	r15
    3352:	cf 93       	push	r28
    3354:	df 93       	push	r29
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
    335a:	28 97       	sbiw	r28, 0x08	; 8
    335c:	0f b6       	in	r0, 0x3f	; 63
    335e:	f8 94       	cli
    3360:	de bf       	out	0x3e, r29	; 62
    3362:	0f be       	out	0x3f, r0	; 63
    3364:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    3366:	6b 01       	movw	r12, r22
    3368:	7c 01       	movw	r14, r24
    336a:	2a e0       	ldi	r18, 0x0A	; 10
    336c:	f6 94       	lsr	r15
    336e:	e7 94       	ror	r14
    3370:	d7 94       	ror	r13
    3372:	c7 94       	ror	r12
    3374:	2a 95       	dec	r18
    3376:	d1 f7       	brne	.-12     	; 0x336c <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    3378:	c9 82       	std	Y+1, r12	; 0x01
    337a:	da 82       	std	Y+2, r13	; 0x02
    337c:	eb 82       	std	Y+3, r14	; 0x03
    337e:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    3380:	9b 01       	movw	r18, r22
    3382:	ac 01       	movw	r20, r24
    3384:	33 70       	andi	r19, 0x03	; 3
    3386:	44 27       	eor	r20, r20
    3388:	55 27       	eor	r21, r21
    338a:	63 eb       	ldi	r22, 0xB3	; 179
    338c:	76 ee       	ldi	r23, 0xE6	; 230
    338e:	8e e0       	ldi	r24, 0x0E	; 14
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	0e 94 a0 24 	call	0x4940	; 0x4940 <__mulsi3>

return t;
    3396:	2c 2d       	mov	r18, r12
    3398:	3a 81       	ldd	r19, Y+2	; 0x02
    339a:	4b 81       	ldd	r20, Y+3	; 0x03
    339c:	5c 81       	ldd	r21, Y+4	; 0x04
}
    339e:	28 96       	adiw	r28, 0x08	; 8
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	f8 94       	cli
    33a4:	de bf       	out	0x3e, r29	; 62
    33a6:	0f be       	out	0x3f, r0	; 63
    33a8:	cd bf       	out	0x3d, r28	; 61
    33aa:	df 91       	pop	r29
    33ac:	cf 91       	pop	r28
    33ae:	ff 90       	pop	r15
    33b0:	ef 90       	pop	r14
    33b2:	df 90       	pop	r13
    33b4:	cf 90       	pop	r12
    33b6:	08 95       	ret

000033b8 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    33b8:	2f 92       	push	r2
    33ba:	3f 92       	push	r3
    33bc:	4f 92       	push	r4
    33be:	5f 92       	push	r5
    33c0:	6f 92       	push	r6
    33c2:	7f 92       	push	r7
    33c4:	8f 92       	push	r8
    33c6:	9f 92       	push	r9
    33c8:	af 92       	push	r10
    33ca:	bf 92       	push	r11
    33cc:	cf 92       	push	r12
    33ce:	df 92       	push	r13
    33d0:	ef 92       	push	r14
    33d2:	ff 92       	push	r15
    33d4:	0f 93       	push	r16
    33d6:	1f 93       	push	r17
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    33d8:	fc 01       	movw	r30, r24
    33da:	c0 80       	ld	r12, Z
    33dc:	d1 80       	ldd	r13, Z+1	; 0x01
    33de:	e2 80       	ldd	r14, Z+2	; 0x02
    33e0:	f3 80       	ldd	r15, Z+3	; 0x03
    33e2:	64 81       	ldd	r22, Z+4	; 0x04
    33e4:	75 81       	ldd	r23, Z+5	; 0x05
    33e6:	86 81       	ldd	r24, Z+6	; 0x06
    33e8:	97 81       	ldd	r25, Z+7	; 0x07
    33ea:	c1 14       	cp	r12, r1
    33ec:	d1 04       	cpc	r13, r1
    33ee:	e1 04       	cpc	r14, r1
    33f0:	f1 04       	cpc	r15, r1
    33f2:	99 f1       	breq	.+102    	; 0x345a <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    33f4:	1b 01       	movw	r2, r22
    33f6:	2c 01       	movw	r4, r24
    33f8:	61 2c       	mov	r6, r1
    33fa:	71 2c       	mov	r7, r1
    33fc:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    33fe:	e0 e0       	ldi	r30, 0x00	; 0
    3400:	8e 2f       	mov	r24, r30
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	a0 e0       	ldi	r26, 0x00	; 0
    3406:	b0 e0       	ldi	r27, 0x00	; 0
    3408:	8c 15       	cp	r24, r12
    340a:	9d 05       	cpc	r25, r13
    340c:	ae 05       	cpc	r26, r14
    340e:	bf 05       	cpc	r27, r15
    3410:	88 f4       	brcc	.+34     	; 0x3434 <_nrk_time_to_ticks_long+0x7c>
    3412:	91 01       	movw	r18, r2
    3414:	a2 01       	movw	r20, r4
    3416:	b3 01       	movw	r22, r6
    3418:	c4 01       	movw	r24, r8
    341a:	36 53       	subi	r19, 0x36	; 54
    341c:	45 46       	sbci	r20, 0x65	; 101
    341e:	54 4c       	sbci	r21, 0xC4	; 196
    3420:	6f 4f       	sbci	r22, 0xFF	; 255
    3422:	7f 4f       	sbci	r23, 0xFF	; 255
    3424:	8f 4f       	sbci	r24, 0xFF	; 255
    3426:	9f 4f       	sbci	r25, 0xFF	; 255
    3428:	19 01       	movw	r2, r18
    342a:	2a 01       	movw	r4, r20
    342c:	3b 01       	movw	r6, r22
    342e:	4c 01       	movw	r8, r24
    3430:	ef 5f       	subi	r30, 0xFF	; 255
    3432:	e6 cf       	rjmp	.-52     	; 0x3400 <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3434:	83 eb       	ldi	r24, 0xB3	; 179
    3436:	a8 2e       	mov	r10, r24
    3438:	96 ee       	ldi	r25, 0xE6	; 230
    343a:	b9 2e       	mov	r11, r25
    343c:	2e e0       	ldi	r18, 0x0E	; 14
    343e:	c2 2e       	mov	r12, r18
    3440:	d1 2c       	mov	r13, r1
    3442:	e1 2c       	mov	r14, r1
    3444:	f1 2c       	mov	r15, r1
    3446:	00 e0       	ldi	r16, 0x00	; 0
    3448:	10 e0       	ldi	r17, 0x00	; 0
    344a:	91 01       	movw	r18, r2
    344c:	a2 01       	movw	r20, r4
    344e:	b3 01       	movw	r22, r6
    3450:	c4 01       	movw	r24, r8
    3452:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <__udivdi3>
    3456:	ca 01       	movw	r24, r20
    3458:	07 c0       	rjmp	.+14     	; 0x3468 <_nrk_time_to_ticks_long+0xb0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    345a:	23 eb       	ldi	r18, 0xB3	; 179
    345c:	36 ee       	ldi	r19, 0xE6	; 230
    345e:	4e e0       	ldi	r20, 0x0E	; 14
    3460:	50 e0       	ldi	r21, 0x00	; 0
    3462:	0e 94 b0 24 	call	0x4960	; 0x4960 <__udivmodsi4>
    3466:	ca 01       	movw	r24, r20
}
return ticks;
}
    3468:	b9 01       	movw	r22, r18
    346a:	1f 91       	pop	r17
    346c:	0f 91       	pop	r16
    346e:	ff 90       	pop	r15
    3470:	ef 90       	pop	r14
    3472:	df 90       	pop	r13
    3474:	cf 90       	pop	r12
    3476:	bf 90       	pop	r11
    3478:	af 90       	pop	r10
    347a:	9f 90       	pop	r9
    347c:	8f 90       	pop	r8
    347e:	7f 90       	pop	r7
    3480:	6f 90       	pop	r6
    3482:	5f 90       	pop	r5
    3484:	4f 90       	pop	r4
    3486:	3f 90       	pop	r3
    3488:	2f 90       	pop	r2
    348a:	08 95       	ret

0000348c <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    348c:	c2 e0       	ldi	r28, 0x02	; 2
{
  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    348e:	d1 e0       	ldi	r29, 0x01	; 1
{
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{
  nrk_stack_check(); 
    3490:	0e 94 15 11 	call	0x222a	; 0x222a <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    3494:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <_nrk_get_next_wakeup>
    3498:	84 30       	cpi	r24, 0x04	; 4
    349a:	28 f4       	brcc	.+10     	; 0x34a6 <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    349c:	d0 93 00 06 	sts	0x0600, r29
	    nrk_idle();
    34a0:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <nrk_idle>
    34a4:	08 c0       	rjmp	.+16     	; 0x34b6 <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    34a6:	8a e0       	ldi	r24, 0x0A	; 10
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	0e 94 65 1e 	call	0x3cca	; 0x3cca <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    34ae:	c0 93 00 06 	sts	0x0600, r28
	    nrk_sleep();
    34b2:	0e 94 50 22 	call	0x44a0	; 0x44a0 <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    34b6:	80 91 2e 04 	lds	r24, 0x042E
    34ba:	85 35       	cpi	r24, 0x55	; 85
    34bc:	19 f0       	breq	.+6      	; 0x34c4 <nrk_idle_task+0x38>
    34be:	88 e0       	ldi	r24, 0x08	; 8
    34c0:	0e 94 51 10 	call	0x20a2	; 0x20a2 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    34c4:	80 91 fe 3f 	lds	r24, 0x3FFE
    34c8:	85 35       	cpi	r24, 0x55	; 85
    34ca:	11 f3       	breq	.-60     	; 0x3490 <nrk_idle_task+0x4>
    34cc:	88 e0       	ldi	r24, 0x08	; 8
    34ce:	0e 94 51 10 	call	0x20a2	; 0x20a2 <nrk_error_add>
    34d2:	de cf       	rjmp	.-68     	; 0x3490 <nrk_idle_task+0x4>

000034d4 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    34d4:	2f 92       	push	r2
    34d6:	3f 92       	push	r3
    34d8:	4f 92       	push	r4
    34da:	5f 92       	push	r5
    34dc:	6f 92       	push	r6
    34de:	7f 92       	push	r7
    34e0:	8f 92       	push	r8
    34e2:	9f 92       	push	r9
    34e4:	af 92       	push	r10
    34e6:	bf 92       	push	r11
    34e8:	cf 92       	push	r12
    34ea:	df 92       	push	r13
    34ec:	ef 92       	push	r14
    34ee:	ff 92       	push	r15
    34f0:	0f 93       	push	r16
    34f2:	1f 93       	push	r17
    34f4:	cf 93       	push	r28
    34f6:	df 93       	push	r29
    34f8:	00 d0       	rcall	.+0      	; 0x34fa <_nrk_scheduler+0x26>
    34fa:	00 d0       	rcall	.+0      	; 0x34fc <_nrk_scheduler+0x28>
    34fc:	1f 92       	push	r1
    34fe:	cd b7       	in	r28, 0x3d	; 61
    3500:	de b7       	in	r29, 0x3e	; 62

    //nrk_int_enable();   // this should be removed...  Not needed


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_precision_os_timer_reset();
    3502:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <_nrk_precision_os_timer_reset>
    _nrk_high_speed_timer_reset();
    3506:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    350a:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <_nrk_high_speed_timer_get>
    350e:	9b 83       	std	Y+3, r25	; 0x03
    3510:	8a 83       	std	Y+2, r24	; 0x02
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    3512:	8a ef       	ldi	r24, 0xFA	; 250
    3514:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    3518:	a0 91 20 04 	lds	r26, 0x0420
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	23 eb       	ldi	r18, 0xB3	; 179
    3520:	36 ee       	ldi	r19, 0xE6	; 230
    3522:	4e e0       	ldi	r20, 0x0E	; 14
    3524:	50 e0       	ldi	r21, 0x00	; 0
    3526:	0e 94 95 24 	call	0x492a	; 0x492a <__muluhisi3>
    352a:	00 91 07 06 	lds	r16, 0x0607
    352e:	10 91 08 06 	lds	r17, 0x0608
    3532:	20 91 09 06 	lds	r18, 0x0609
    3536:	30 91 0a 06 	lds	r19, 0x060A
    353a:	6b 01       	movw	r12, r22
    353c:	7c 01       	movw	r14, r24
    353e:	c0 0e       	add	r12, r16
    3540:	d1 1e       	adc	r13, r17
    3542:	e2 1e       	adc	r14, r18
    3544:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3546:	c7 01       	movw	r24, r14
    3548:	b6 01       	movw	r22, r12
    354a:	23 eb       	ldi	r18, 0xB3	; 179
    354c:	36 ee       	ldi	r19, 0xE6	; 230
    354e:	4e e0       	ldi	r20, 0x0E	; 14
    3550:	50 e0       	ldi	r21, 0x00	; 0
    3552:	0e 94 b0 24 	call	0x4960	; 0x4960 <__udivmodsi4>
    3556:	26 01       	movw	r4, r12
    3558:	37 01       	movw	r6, r14
    355a:	46 1a       	sub	r4, r22
    355c:	57 0a       	sbc	r5, r23
    355e:	68 0a       	sbc	r6, r24
    3560:	79 0a       	sbc	r7, r25
    3562:	d3 01       	movw	r26, r6
    3564:	c2 01       	movw	r24, r4
    3566:	00 91 03 06 	lds	r16, 0x0603
    356a:	10 91 04 06 	lds	r17, 0x0604
    356e:	20 91 05 06 	lds	r18, 0x0605
    3572:	30 91 06 06 	lds	r19, 0x0606

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3576:	43 eb       	ldi	r20, 0xB3	; 179
    3578:	84 2e       	mov	r8, r20
    357a:	46 ee       	ldi	r20, 0xE6	; 230
    357c:	94 2e       	mov	r9, r20
    357e:	4e e0       	ldi	r20, 0x0E	; 14
    3580:	a4 2e       	mov	r10, r20
    3582:	b1 2c       	mov	r11, r1
    3584:	68 01       	movw	r12, r16
    3586:	79 01       	movw	r14, r18
    3588:	4f ef       	ldi	r20, 0xFF	; 255
    358a:	c4 1a       	sub	r12, r20
    358c:	d4 0a       	sbc	r13, r20
    358e:	e4 0a       	sbc	r14, r20
    3590:	f4 0a       	sbc	r15, r20
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    3592:	81 15       	cp	r24, r1
    3594:	5a ec       	ldi	r21, 0xCA	; 202
    3596:	95 07       	cpc	r25, r21
    3598:	5a e9       	ldi	r21, 0x9A	; 154
    359a:	a5 07       	cpc	r26, r21
    359c:	5b e3       	ldi	r21, 0x3B	; 59
    359e:	b5 07       	cpc	r27, r21
    35a0:	c8 f0       	brcs	.+50     	; 0x35d4 <_nrk_scheduler+0x100>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    35a2:	2c 01       	movw	r4, r24
    35a4:	3d 01       	movw	r6, r26
    35a6:	2a ec       	ldi	r18, 0xCA	; 202
    35a8:	52 1a       	sub	r5, r18
    35aa:	2a e9       	ldi	r18, 0x9A	; 154
    35ac:	62 0a       	sbc	r6, r18
    35ae:	2b e3       	ldi	r18, 0x3B	; 59
    35b0:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    35b2:	c3 01       	movw	r24, r6
    35b4:	b2 01       	movw	r22, r4
    35b6:	a5 01       	movw	r20, r10
    35b8:	94 01       	movw	r18, r8
    35ba:	0e 94 b0 24 	call	0x4960	; 0x4960 <__udivmodsi4>
    35be:	a3 01       	movw	r20, r6
    35c0:	92 01       	movw	r18, r4
    35c2:	26 1b       	sub	r18, r22
    35c4:	37 0b       	sbc	r19, r23
    35c6:	48 0b       	sbc	r20, r24
    35c8:	59 0b       	sbc	r21, r25
    35ca:	da 01       	movw	r26, r20
    35cc:	c9 01       	movw	r24, r18
    35ce:	97 01       	movw	r18, r14
    35d0:	86 01       	movw	r16, r12
    35d2:	d8 cf       	rjmp	.-80     	; 0x3584 <_nrk_scheduler+0xb0>
    35d4:	80 93 07 06 	sts	0x0607, r24
    35d8:	90 93 08 06 	sts	0x0608, r25
    35dc:	a0 93 09 06 	sts	0x0609, r26
    35e0:	b0 93 0a 06 	sts	0x060A, r27
    35e4:	00 93 03 06 	sts	0x0603, r16
    35e8:	10 93 04 06 	sts	0x0604, r17
    35ec:	20 93 05 06 	sts	0x0605, r18
    35f0:	30 93 06 06 	sts	0x0606, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    35f4:	e0 91 0c 06 	lds	r30, 0x060C
    35f8:	f0 91 0d 06 	lds	r31, 0x060D
    35fc:	85 81       	ldd	r24, Z+5	; 0x05
    35fe:	88 23       	and	r24, r24
    3600:	39 f1       	breq	.+78     	; 0x3650 <_nrk_scheduler+0x17c>
    3602:	81 85       	ldd	r24, Z+9	; 0x09
    3604:	84 30       	cpi	r24, 0x04	; 4
    3606:	21 f1       	breq	.+72     	; 0x3650 <_nrk_scheduler+0x17c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    3608:	87 81       	ldd	r24, Z+7	; 0x07
    360a:	82 30       	cpi	r24, 0x02	; 2
    360c:	29 f0       	breq	.+10     	; 0x3618 <_nrk_scheduler+0x144>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    360e:	88 23       	and	r24, r24
    3610:	41 f0       	breq	.+16     	; 0x3622 <_nrk_scheduler+0x14e>
    3612:	86 81       	ldd	r24, Z+6	; 0x06
    3614:	81 11       	cpse	r24, r1
    3616:	02 c0       	rjmp	.+4      	; 0x361c <_nrk_scheduler+0x148>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    3618:	85 e0       	ldi	r24, 0x05	; 5
    361a:	01 c0       	rjmp	.+2      	; 0x361e <_nrk_scheduler+0x14a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    361c:	83 e0       	ldi	r24, 0x03	; 3
    361e:	81 87       	std	Z+9, r24	; 0x09
    3620:	14 c0       	rjmp	.+40     	; 0x364a <_nrk_scheduler+0x176>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3622:	83 e0       	ldi	r24, 0x03	; 3
    3624:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    3626:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    3628:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    362a:	85 89       	ldd	r24, Z+21	; 0x15
    362c:	96 89       	ldd	r25, Z+22	; 0x16
    362e:	a7 89       	ldd	r26, Z+23	; 0x17
    3630:	b0 8d       	ldd	r27, Z+24	; 0x18
    3632:	89 2b       	or	r24, r25
    3634:	8a 2b       	or	r24, r26
    3636:	8b 2b       	or	r24, r27
    3638:	41 f4       	brne	.+16     	; 0x364a <_nrk_scheduler+0x176>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    363a:	81 8d       	ldd	r24, Z+25	; 0x19
    363c:	92 8d       	ldd	r25, Z+26	; 0x1a
    363e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3640:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3642:	85 8b       	std	Z+21, r24	; 0x15
    3644:	96 8b       	std	Z+22, r25	; 0x16
    3646:	a7 8b       	std	Z+23, r26	; 0x17
    3648:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    364a:	80 85       	ldd	r24, Z+8	; 0x08
    364c:	0e 94 33 15 	call	0x2a66	; 0x2a66 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    3650:	e0 91 0c 06 	lds	r30, 0x060C
    3654:	f0 91 0d 06 	lds	r31, 0x060D
    3658:	85 a1       	ldd	r24, Z+37	; 0x25
    365a:	96 a1       	ldd	r25, Z+38	; 0x26
    365c:	a7 a1       	ldd	r26, Z+39	; 0x27
    365e:	b0 a5       	ldd	r27, Z+40	; 0x28
    3660:	89 2b       	or	r24, r25
    3662:	8a 2b       	or	r24, r26
    3664:	8b 2b       	or	r24, r27
    3666:	09 f4       	brne	.+2      	; 0x366a <_nrk_scheduler+0x196>
    3668:	44 c0       	rjmp	.+136    	; 0x36f2 <_nrk_scheduler+0x21e>
    366a:	20 85       	ldd	r18, Z+8	; 0x08
    366c:	22 23       	and	r18, r18
    366e:	09 f4       	brne	.+2      	; 0x3672 <_nrk_scheduler+0x19e>
    3670:	40 c0       	rjmp	.+128    	; 0x36f2 <_nrk_scheduler+0x21e>
    3672:	81 85       	ldd	r24, Z+9	; 0x09
    3674:	84 30       	cpi	r24, 0x04	; 4
    3676:	e9 f1       	breq	.+122    	; 0x36f2 <_nrk_scheduler+0x21e>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    3678:	85 8d       	ldd	r24, Z+29	; 0x1d
    367a:	96 8d       	ldd	r25, Z+30	; 0x1e
    367c:	a7 8d       	ldd	r26, Z+31	; 0x1f
    367e:	b0 a1       	ldd	r27, Z+32	; 0x20
    3680:	40 91 20 04 	lds	r20, 0x0420
    3684:	50 e0       	ldi	r21, 0x00	; 0
    3686:	60 e0       	ldi	r22, 0x00	; 0
    3688:	70 e0       	ldi	r23, 0x00	; 0
    368a:	84 17       	cp	r24, r20
    368c:	95 07       	cpc	r25, r21
    368e:	a6 07       	cpc	r26, r22
    3690:	b7 07       	cpc	r27, r23
    3692:	68 f4       	brcc	.+26     	; 0x36ae <_nrk_scheduler+0x1da>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    3694:	62 2f       	mov	r22, r18
    3696:	82 e0       	ldi	r24, 0x02	; 2
    3698:	0e 94 5f 10 	call	0x20be	; 0x20be <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    369c:	e0 91 0c 06 	lds	r30, 0x060C
    36a0:	f0 91 0d 06 	lds	r31, 0x060D
    36a4:	15 8e       	std	Z+29, r1	; 0x1d
    36a6:	16 8e       	std	Z+30, r1	; 0x1e
    36a8:	17 8e       	std	Z+31, r1	; 0x1f
    36aa:	10 a2       	std	Z+32, r1	; 0x20
    36ac:	08 c0       	rjmp	.+16     	; 0x36be <_nrk_scheduler+0x1ea>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    36ae:	84 1b       	sub	r24, r20
    36b0:	95 0b       	sbc	r25, r21
    36b2:	a6 0b       	sbc	r26, r22
    36b4:	b7 0b       	sbc	r27, r23
    36b6:	85 8f       	std	Z+29, r24	; 0x1d
    36b8:	96 8f       	std	Z+30, r25	; 0x1e
    36ba:	a7 8f       	std	Z+31, r26	; 0x1f
    36bc:	b0 a3       	std	Z+32, r27	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    36be:	e0 91 0c 06 	lds	r30, 0x060C
    36c2:	f0 91 0d 06 	lds	r31, 0x060D
    36c6:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    36c8:	85 8d       	ldd	r24, Z+29	; 0x1d
    36ca:	96 8d       	ldd	r25, Z+30	; 0x1e
    36cc:	a7 8d       	ldd	r26, Z+31	; 0x1f
    36ce:	b0 a1       	ldd	r27, Z+32	; 0x20
    36d0:	89 2b       	or	r24, r25
    36d2:	8a 2b       	or	r24, r26
    36d4:	8b 2b       	or	r24, r27
    36d6:	69 f4       	brne	.+26     	; 0x36f2 <_nrk_scheduler+0x21e>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    36d8:	61 2f       	mov	r22, r17
    36da:	83 e0       	ldi	r24, 0x03	; 3
    36dc:	0e 94 5f 10 	call	0x20be	; 0x20be <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    36e0:	e0 91 0c 06 	lds	r30, 0x060C
    36e4:	f0 91 0d 06 	lds	r31, 0x060D
    36e8:	83 e0       	ldi	r24, 0x03	; 3
    36ea:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    36ec:	81 2f       	mov	r24, r17
    36ee:	0e 94 33 15 	call	0x2a66	; 0x2a66 <nrk_rem_from_readyQ>
    36f2:	84 ef       	ldi	r24, 0xF4	; 244
    36f4:	94 e0       	ldi	r25, 0x04	; 4
    36f6:	9d 83       	std	Y+5, r25	; 0x05
    36f8:	8c 83       	std	Y+4, r24	; 0x04

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    36fa:	00 e6       	ldi	r16, 0x60	; 96
    36fc:	1a ee       	ldi	r17, 0xEA	; 234
    36fe:	31 2c       	mov	r3, r1
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3700:	9a ef       	ldi	r25, 0xFA	; 250
    3702:	c9 2e       	mov	r12, r25
    3704:	d1 2c       	mov	r13, r1
    3706:	e1 2c       	mov	r14, r1
    3708:	f1 2c       	mov	r15, r1
                nrk_task_TCB[task_ID].nw_flag=0;
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    nrk_task_TCB[task_ID].task_state = READY;
    370a:	22 e0       	ldi	r18, 0x02	; 2
    370c:	22 2e       	mov	r2, r18
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    370e:	81 2c       	mov	r8, r1
    3710:	91 2c       	mov	r9, r1
    3712:	54 01       	movw	r10, r8
    3714:	83 94       	inc	r8
    3716:	ec 81       	ldd	r30, Y+4	; 0x04
    3718:	fd 81       	ldd	r31, Y+5	; 0x05
    371a:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    371c:	80 81       	ld	r24, Z
    371e:	8f 3f       	cpi	r24, 0xFF	; 255
    3720:	09 f4       	brne	.+2      	; 0x3724 <_nrk_scheduler+0x250>
    3722:	ff c0       	rjmp	.+510    	; 0x3922 <_nrk_scheduler+0x44e>
    3724:	ec 81       	ldd	r30, Y+4	; 0x04
    3726:	fd 81       	ldd	r31, Y+5	; 0x05
    3728:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    372a:	10 82       	st	Z, r1
    372c:	ec 81       	ldd	r30, Y+4	; 0x04
    372e:	fd 81       	ldd	r31, Y+5	; 0x05
    3730:	f0 81       	ld	r31, Z
    3732:	f9 83       	std	Y+1, r31	; 0x01
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    3734:	88 23       	and	r24, r24
    3736:	09 f4       	brne	.+2      	; 0x373a <_nrk_scheduler+0x266>
    3738:	68 c0       	rjmp	.+208    	; 0x380a <_nrk_scheduler+0x336>
    373a:	f4 30       	cpi	r31, 0x04	; 4
    373c:	09 f4       	brne	.+2      	; 0x3740 <_nrk_scheduler+0x26c>
    373e:	f1 c0       	rjmp	.+482    	; 0x3922 <_nrk_scheduler+0x44e>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    3740:	ec 81       	ldd	r30, Y+4	; 0x04
    3742:	fd 81       	ldd	r31, Y+5	; 0x05
    3744:	44 84       	ldd	r4, Z+12	; 0x0c
    3746:	55 84       	ldd	r5, Z+13	; 0x0d
    3748:	66 84       	ldd	r6, Z+14	; 0x0e
    374a:	77 84       	ldd	r7, Z+15	; 0x0f
    374c:	60 91 20 04 	lds	r22, 0x0420
    3750:	70 e0       	ldi	r23, 0x00	; 0
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	46 16       	cp	r4, r22
    3758:	57 06       	cpc	r5, r23
    375a:	68 06       	cpc	r6, r24
    375c:	79 06       	cpc	r7, r25
    375e:	48 f0       	brcs	.+18     	; 0x3772 <_nrk_scheduler+0x29e>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    3760:	46 1a       	sub	r4, r22
    3762:	57 0a       	sbc	r5, r23
    3764:	68 0a       	sbc	r6, r24
    3766:	79 0a       	sbc	r7, r25
    3768:	44 86       	std	Z+12, r4	; 0x0c
    376a:	55 86       	std	Z+13, r5	; 0x0d
    376c:	66 86       	std	Z+14, r6	; 0x0e
    376e:	77 86       	std	Z+15, r7	; 0x0f
    3770:	06 c0       	rjmp	.+12     	; 0x377e <_nrk_scheduler+0x2aa>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    3772:	ec 81       	ldd	r30, Y+4	; 0x04
    3774:	fd 81       	ldd	r31, Y+5	; 0x05
    3776:	14 86       	std	Z+12, r1	; 0x0c
    3778:	15 86       	std	Z+13, r1	; 0x0d
    377a:	16 86       	std	Z+14, r1	; 0x0e
    377c:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    377e:	ec 81       	ldd	r30, Y+4	; 0x04
    3780:	fd 81       	ldd	r31, Y+5	; 0x05
    3782:	40 88       	ldd	r4, Z+16	; 0x10
    3784:	51 88       	ldd	r5, Z+17	; 0x11
    3786:	62 88       	ldd	r6, Z+18	; 0x12
    3788:	73 88       	ldd	r7, Z+19	; 0x13
    378a:	46 16       	cp	r4, r22
    378c:	57 06       	cpc	r5, r23
    378e:	68 06       	cpc	r6, r24
    3790:	79 06       	cpc	r7, r25
    3792:	48 f0       	brcs	.+18     	; 0x37a6 <_nrk_scheduler+0x2d2>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    3794:	a3 01       	movw	r20, r6
    3796:	92 01       	movw	r18, r4
    3798:	26 1b       	sub	r18, r22
    379a:	37 0b       	sbc	r19, r23
    379c:	48 0b       	sbc	r20, r24
    379e:	59 0b       	sbc	r21, r25
    37a0:	da 01       	movw	r26, r20
    37a2:	c9 01       	movw	r24, r18
    37a4:	13 c0       	rjmp	.+38     	; 0x37cc <_nrk_scheduler+0x2f8>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    37a6:	ec 81       	ldd	r30, Y+4	; 0x04
    37a8:	fd 81       	ldd	r31, Y+5	; 0x05
    37aa:	20 8d       	ldd	r18, Z+24	; 0x18
    37ac:	31 8d       	ldd	r19, Z+25	; 0x19
    37ae:	42 8d       	ldd	r20, Z+26	; 0x1a
    37b0:	53 8d       	ldd	r21, Z+27	; 0x1b
    37b2:	62 17       	cp	r22, r18
    37b4:	73 07       	cpc	r23, r19
    37b6:	84 07       	cpc	r24, r20
    37b8:	95 07       	cpc	r25, r21
    37ba:	68 f4       	brcc	.+26     	; 0x37d6 <_nrk_scheduler+0x302>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    37bc:	29 01       	movw	r4, r18
    37be:	3a 01       	movw	r6, r20
    37c0:	46 1a       	sub	r4, r22
    37c2:	57 0a       	sbc	r5, r23
    37c4:	68 0a       	sbc	r6, r24
    37c6:	79 0a       	sbc	r7, r25
    37c8:	d3 01       	movw	r26, r6
    37ca:	c2 01       	movw	r24, r4
    37cc:	80 8b       	std	Z+16, r24	; 0x10
    37ce:	91 8b       	std	Z+17, r25	; 0x11
    37d0:	a2 8b       	std	Z+18, r26	; 0x12
    37d2:	b3 8b       	std	Z+19, r27	; 0x13
    37d4:	08 c0       	rjmp	.+16     	; 0x37e6 <_nrk_scheduler+0x312>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    37d6:	0e 94 b0 24 	call	0x4960	; 0x4960 <__udivmodsi4>
    37da:	ec 81       	ldd	r30, Y+4	; 0x04
    37dc:	fd 81       	ldd	r31, Y+5	; 0x05
    37de:	60 8b       	std	Z+16, r22	; 0x10
    37e0:	71 8b       	std	Z+17, r23	; 0x11
    37e2:	82 8b       	std	Z+18, r24	; 0x12
    37e4:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    37e6:	ec 81       	ldd	r30, Y+4	; 0x04
    37e8:	fd 81       	ldd	r31, Y+5	; 0x05
    37ea:	80 89       	ldd	r24, Z+16	; 0x10
    37ec:	91 89       	ldd	r25, Z+17	; 0x11
    37ee:	a2 89       	ldd	r26, Z+18	; 0x12
    37f0:	b3 89       	ldd	r27, Z+19	; 0x13
    37f2:	89 2b       	or	r24, r25
    37f4:	8a 2b       	or	r24, r26
    37f6:	8b 2b       	or	r24, r27
    37f8:	41 f4       	brne	.+16     	; 0x380a <_nrk_scheduler+0x336>
    37fa:	80 8d       	ldd	r24, Z+24	; 0x18
    37fc:	91 8d       	ldd	r25, Z+25	; 0x19
    37fe:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3800:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3802:	80 8b       	std	Z+16, r24	; 0x10
    3804:	91 8b       	std	Z+17, r25	; 0x11
    3806:	a2 8b       	std	Z+18, r26	; 0x12
    3808:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    380a:	f9 81       	ldd	r31, Y+1	; 0x01
    380c:	f3 30       	cpi	r31, 0x03	; 3
    380e:	09 f0       	breq	.+2      	; 0x3812 <_nrk_scheduler+0x33e>
    3810:	88 c0       	rjmp	.+272    	; 0x3922 <_nrk_scheduler+0x44e>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    3812:	ec 81       	ldd	r30, Y+4	; 0x04
    3814:	fd 81       	ldd	r31, Y+5	; 0x05
    3816:	84 85       	ldd	r24, Z+12	; 0x0c
    3818:	95 85       	ldd	r25, Z+13	; 0x0d
    381a:	a6 85       	ldd	r26, Z+14	; 0x0e
    381c:	b7 85       	ldd	r27, Z+15	; 0x0f
    381e:	89 2b       	or	r24, r25
    3820:	8a 2b       	or	r24, r26
    3822:	8b 2b       	or	r24, r27
    3824:	09 f0       	breq	.+2      	; 0x3828 <_nrk_scheduler+0x354>
    3826:	6a c0       	rjmp	.+212    	; 0x38fc <_nrk_scheduler+0x428>
    3828:	df 01       	movw	r26, r30
    382a:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    382c:	8c 91       	ld	r24, X
    382e:	9f 01       	movw	r18, r30
    3830:	23 50       	subi	r18, 0x03	; 3
    3832:	31 09       	sbc	r19, r1
    3834:	88 23       	and	r24, r24
    3836:	a9 f0       	breq	.+42     	; 0x3862 <_nrk_scheduler+0x38e>
    3838:	f9 01       	movw	r30, r18
    383a:	80 81       	ld	r24, Z
    383c:	88 23       	and	r24, r24
    383e:	89 f0       	breq	.+34     	; 0x3862 <_nrk_scheduler+0x38e>
    3840:	b5 01       	movw	r22, r10
    3842:	a4 01       	movw	r20, r8
    3844:	00 90 fc 05 	lds	r0, 0x05FC
    3848:	04 c0       	rjmp	.+8      	; 0x3852 <_nrk_scheduler+0x37e>
    384a:	44 0f       	add	r20, r20
    384c:	55 1f       	adc	r21, r21
    384e:	66 1f       	adc	r22, r22
    3850:	77 1f       	adc	r23, r23
    3852:	0a 94       	dec	r0
    3854:	d2 f7       	brpl	.-12     	; 0x384a <_nrk_scheduler+0x376>
    3856:	ec 81       	ldd	r30, Y+4	; 0x04
    3858:	fd 81       	ldd	r31, Y+5	; 0x05
    385a:	40 87       	std	Z+8, r20	; 0x08
    385c:	51 87       	std	Z+9, r21	; 0x09
    385e:	62 87       	std	Z+10, r22	; 0x0a
    3860:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    3862:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    3864:	f9 01       	movw	r30, r18
    3866:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    3868:	ec 81       	ldd	r30, Y+4	; 0x04
    386a:	fd 81       	ldd	r31, Y+5	; 0x05
    386c:	a0 a1       	ldd	r26, Z+32	; 0x20
    386e:	b1 a1       	ldd	r27, Z+33	; 0x21
    3870:	40 8c       	ldd	r4, Z+24	; 0x18
    3872:	51 8c       	ldd	r5, Z+25	; 0x19
    3874:	62 8c       	ldd	r6, Z+26	; 0x1a
    3876:	73 8c       	ldd	r7, Z+27	; 0x1b
    3878:	44 8d       	ldd	r20, Z+28	; 0x1c
    387a:	55 8d       	ldd	r21, Z+29	; 0x1d
    387c:	66 8d       	ldd	r22, Z+30	; 0x1e
    387e:	77 8d       	ldd	r23, Z+31	; 0x1f
    3880:	a1 30       	cpi	r26, 0x01	; 1
    3882:	b1 05       	cpc	r27, r1
    3884:	c9 f4       	brne	.+50     	; 0x38b8 <_nrk_scheduler+0x3e4>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    3886:	44 8b       	std	Z+20, r20	; 0x14
    3888:	55 8b       	std	Z+21, r21	; 0x15
    388a:	66 8b       	std	Z+22, r22	; 0x16
    388c:	77 8b       	std	Z+23, r23	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    388e:	20 82       	st	Z, r2
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    3890:	80 89       	ldd	r24, Z+16	; 0x10
    3892:	91 89       	ldd	r25, Z+17	; 0x11
    3894:	a2 89       	ldd	r26, Z+18	; 0x12
    3896:	b3 89       	ldd	r27, Z+19	; 0x13
    3898:	84 87       	std	Z+12, r24	; 0x0c
    389a:	95 87       	std	Z+13, r25	; 0x0d
    389c:	a6 87       	std	Z+14, r26	; 0x0e
    389e:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    38a0:	45 28       	or	r4, r5
    38a2:	46 28       	or	r4, r6
    38a4:	47 28       	or	r4, r7
    38a6:	21 f4       	brne	.+8      	; 0x38b0 <_nrk_scheduler+0x3dc>
    38a8:	c4 86       	std	Z+12, r12	; 0x0c
    38aa:	d5 86       	std	Z+13, r13	; 0x0d
    38ac:	e6 86       	std	Z+14, r14	; 0x0e
    38ae:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    38b0:	83 2d       	mov	r24, r3
    38b2:	0e 94 87 14 	call	0x290e	; 0x290e <nrk_add_to_readyQ>
    38b6:	22 c0       	rjmp	.+68     	; 0x38fc <_nrk_scheduler+0x428>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    38b8:	ec 81       	ldd	r30, Y+4	; 0x04
    38ba:	fd 81       	ldd	r31, Y+5	; 0x05
    38bc:	44 8b       	std	Z+20, r20	; 0x14
    38be:	55 8b       	std	Z+21, r21	; 0x15
    38c0:	66 8b       	std	Z+22, r22	; 0x16
    38c2:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    38c4:	11 97       	sbiw	r26, 0x01	; 1
    38c6:	a3 01       	movw	r20, r6
    38c8:	92 01       	movw	r18, r4
    38ca:	0e 94 95 24 	call	0x492a	; 0x492a <__muluhisi3>
    38ce:	64 87       	std	Z+12, r22	; 0x0c
    38d0:	75 87       	std	Z+13, r23	; 0x0d
    38d2:	86 87       	std	Z+14, r24	; 0x0e
    38d4:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    38d6:	60 8b       	std	Z+16, r22	; 0x10
    38d8:	71 8b       	std	Z+17, r23	; 0x11
    38da:	82 8b       	std	Z+18, r24	; 0x12
    38dc:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    38de:	45 28       	or	r4, r5
    38e0:	46 28       	or	r4, r6
    38e2:	47 28       	or	r4, r7
    38e4:	21 f4       	brne	.+8      	; 0x38ee <_nrk_scheduler+0x41a>
    38e6:	c4 86       	std	Z+12, r12	; 0x0c
    38e8:	d5 86       	std	Z+13, r13	; 0x0d
    38ea:	e6 86       	std	Z+14, r14	; 0x0e
    38ec:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    38ee:	44 24       	eor	r4, r4
    38f0:	43 94       	inc	r4
    38f2:	51 2c       	mov	r5, r1
    38f4:	ec 81       	ldd	r30, Y+4	; 0x04
    38f6:	fd 81       	ldd	r31, Y+5	; 0x05
    38f8:	51 a2       	std	Z+33, r5	; 0x21
    38fa:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    38fc:	ec 81       	ldd	r30, Y+4	; 0x04
    38fe:	fd 81       	ldd	r31, Y+5	; 0x05
    3900:	84 85       	ldd	r24, Z+12	; 0x0c
    3902:	95 85       	ldd	r25, Z+13	; 0x0d
    3904:	a6 85       	ldd	r26, Z+14	; 0x0e
    3906:	b7 85       	ldd	r27, Z+15	; 0x0f
    3908:	00 97       	sbiw	r24, 0x00	; 0
    390a:	a1 05       	cpc	r26, r1
    390c:	b1 05       	cpc	r27, r1
    390e:	49 f0       	breq	.+18     	; 0x3922 <_nrk_scheduler+0x44e>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    3910:	a8 01       	movw	r20, r16
    3912:	60 e0       	ldi	r22, 0x00	; 0
    3914:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    3916:	84 17       	cp	r24, r20
    3918:	95 07       	cpc	r25, r21
    391a:	a6 07       	cpc	r26, r22
    391c:	b7 07       	cpc	r27, r23
    391e:	08 f4       	brcc	.+2      	; 0x3922 <_nrk_scheduler+0x44e>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    3920:	8c 01       	movw	r16, r24
    3922:	33 94       	inc	r3
    3924:	2c 81       	ldd	r18, Y+4	; 0x04
    3926:	3d 81       	ldd	r19, Y+5	; 0x05
    3928:	25 5d       	subi	r18, 0xD5	; 213
    392a:	3f 4f       	sbci	r19, 0xFF	; 255
    392c:	3d 83       	std	Y+5, r19	; 0x05
    392e:	2c 83       	std	Y+4, r18	; 0x04

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    3930:	36 e0       	ldi	r19, 0x06	; 6
    3932:	33 12       	cpse	r3, r19
    3934:	f0 ce       	rjmp	.-544    	; 0x3716 <_nrk_scheduler+0x242>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    3936:	0e 94 76 14 	call	0x28ec	; 0x28ec <nrk_get_high_ready_task_ID>
    393a:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    393c:	4b e2       	ldi	r20, 0x2B	; 43
    393e:	84 02       	muls	r24, r20
    3940:	f0 01       	movw	r30, r0
    3942:	11 24       	eor	r1, r1
    3944:	e5 51       	subi	r30, 0x15	; 21
    3946:	fb 4f       	sbci	r31, 0xFB	; 251
    3948:	22 85       	ldd	r18, Z+10	; 0x0a
    394a:	20 93 0e 06 	sts	0x060E, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    394e:	f0 93 fe 05 	sts	0x05FE, r31
    3952:	e0 93 fd 05 	sts	0x05FD, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    3956:	88 23       	and	r24, r24
    3958:	f9 f0       	breq	.+62     	; 0x3998 <_nrk_scheduler+0x4c4>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    395a:	85 a1       	ldd	r24, Z+37	; 0x25
    395c:	96 a1       	ldd	r25, Z+38	; 0x26
    395e:	a7 a1       	ldd	r26, Z+39	; 0x27
    3960:	b0 a5       	ldd	r27, Z+40	; 0x28
    3962:	89 2b       	or	r24, r25
    3964:	8a 2b       	or	r24, r26
    3966:	8b 2b       	or	r24, r27
    3968:	99 f0       	breq	.+38     	; 0x3990 <_nrk_scheduler+0x4bc>
    396a:	85 8d       	ldd	r24, Z+29	; 0x1d
    396c:	96 8d       	ldd	r25, Z+30	; 0x1e
    396e:	a7 8d       	ldd	r26, Z+31	; 0x1f
    3970:	b0 a1       	ldd	r27, Z+32	; 0x20
    3972:	8a 3f       	cpi	r24, 0xFA	; 250
    3974:	91 05       	cpc	r25, r1
    3976:	a1 05       	cpc	r26, r1
    3978:	b1 05       	cpc	r27, r1
    397a:	50 f4       	brcc	.+20     	; 0x3990 <_nrk_scheduler+0x4bc>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    397c:	a8 01       	movw	r20, r16
    397e:	60 e0       	ldi	r22, 0x00	; 0
    3980:	70 e0       	ldi	r23, 0x00	; 0
    3982:	84 17       	cp	r24, r20
    3984:	95 07       	cpc	r25, r21
    3986:	a6 07       	cpc	r26, r22
    3988:	b7 07       	cpc	r27, r23
    398a:	e8 f4       	brcc	.+58     	; 0x39c6 <_nrk_scheduler+0x4f2>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    398c:	8c 01       	movw	r16, r24
    398e:	1b c0       	rjmp	.+54     	; 0x39c6 <_nrk_scheduler+0x4f2>
    3990:	0b 3f       	cpi	r16, 0xFB	; 251
    3992:	11 05       	cpc	r17, r1
    3994:	c0 f0       	brcs	.+48     	; 0x39c6 <_nrk_scheduler+0x4f2>
    3996:	12 c0       	rjmp	.+36     	; 0x39bc <_nrk_scheduler+0x4e8>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    3998:	04 30       	cpi	r16, 0x04	; 4
    399a:	11 05       	cpc	r17, r1
    399c:	a0 f0       	brcs	.+40     	; 0x39c6 <_nrk_scheduler+0x4f2>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    399e:	c8 01       	movw	r24, r16
    39a0:	03 97       	sbiw	r24, 0x03	; 3
    39a2:	8a 3f       	cpi	r24, 0xFA	; 250
    39a4:	91 05       	cpc	r25, r1
    39a6:	38 f4       	brcc	.+14     	; 0x39b6 <_nrk_scheduler+0x4e2>
    39a8:	8c 01       	movw	r16, r24
    39aa:	82 30       	cpi	r24, 0x02	; 2
    39ac:	91 05       	cpc	r25, r1
    39ae:	58 f4       	brcc	.+22     	; 0x39c6 <_nrk_scheduler+0x4f2>
    39b0:	02 e0       	ldi	r16, 0x02	; 2
    39b2:	10 e0       	ldi	r17, 0x00	; 0
    39b4:	08 c0       	rjmp	.+16     	; 0x39c6 <_nrk_scheduler+0x4f2>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    39b6:	0d 3f       	cpi	r16, 0xFD	; 253
    39b8:	11 05       	cpc	r17, r1
    39ba:	19 f0       	breq	.+6      	; 0x39c2 <_nrk_scheduler+0x4ee>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    39bc:	0a ef       	ldi	r16, 0xFA	; 250
    39be:	10 e0       	ldi	r17, 0x00	; 0
    39c0:	02 c0       	rjmp	.+4      	; 0x39c6 <_nrk_scheduler+0x4f2>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    39c2:	07 ef       	ldi	r16, 0xF7	; 247
    39c4:	10 e0       	ldi	r17, 0x00	; 0
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    39c6:	20 93 ff 05 	sts	0x05FF, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    39ca:	f0 93 0d 06 	sts	0x060D, r31
    39ce:	e0 93 0c 06 	sts	0x060C, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    39d2:	00 93 20 04 	sts	0x0420, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    39d6:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <_nrk_os_timer_get>
    39da:	28 2f       	mov	r18, r24
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	2f 5f       	subi	r18, 0xFF	; 255
    39e0:	3f 4f       	sbci	r19, 0xFF	; 255
    39e2:	20 17       	cp	r18, r16
    39e4:	31 07       	cpc	r19, r17
    39e6:	40 f0       	brcs	.+16     	; 0x39f8 <_nrk_scheduler+0x524>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    39e8:	0e 94 b3 1f 	call	0x3f66	; 0x3f66 <_nrk_os_timer_get>
    39ec:	08 2f       	mov	r16, r24
    39ee:	10 e0       	ldi	r17, 0x00	; 0
    39f0:	0e 5f       	subi	r16, 0xFE	; 254
    39f2:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    39f4:	00 93 20 04 	sts	0x0420, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    39f8:	f1 10       	cpse	r15, r1
    39fa:	10 92 00 06 	sts	0x0600, r1

    _nrk_set_next_wakeup(next_wake);
    39fe:	80 2f       	mov	r24, r16
    3a00:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    3a04:	6c ed       	ldi	r22, 0xDC	; 220
    3a06:	75 e0       	ldi	r23, 0x05	; 5
    3a08:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a0c:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    3a10:	0e 94 d6 22 	call	0x45ac	; 0x45ac <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    3a14:	0f 90       	pop	r0
    3a16:	0f 90       	pop	r0
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	0f 90       	pop	r0
    3a1e:	df 91       	pop	r29
    3a20:	cf 91       	pop	r28
    3a22:	1f 91       	pop	r17
    3a24:	0f 91       	pop	r16
    3a26:	ff 90       	pop	r15
    3a28:	ef 90       	pop	r14
    3a2a:	df 90       	pop	r13
    3a2c:	cf 90       	pop	r12
    3a2e:	bf 90       	pop	r11
    3a30:	af 90       	pop	r10
    3a32:	9f 90       	pop	r9
    3a34:	8f 90       	pop	r8
    3a36:	7f 90       	pop	r7
    3a38:	6f 90       	pop	r6
    3a3a:	5f 90       	pop	r5
    3a3c:	4f 90       	pop	r4
    3a3e:	3f 90       	pop	r3
    3a40:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    3a42:	0c 94 e1 22 	jmp	0x45c2	; 0x45c2 <nrk_start_high_ready_task>

00003a46 <_nrk_reserve_init>:
    3a46:	e3 e3       	ldi	r30, 0x33	; 51
    3a48:	f6 e0       	ldi	r31, 0x06	; 6
    3a4a:	8f ef       	ldi	r24, 0xFF	; 255
    3a4c:	80 8b       	std	Z+16, r24	; 0x10
    3a4e:	83 a3       	std	Z+35, r24	; 0x23
    3a50:	86 ab       	std	Z+54, r24	; 0x36
    3a52:	80 93 7c 06 	sts	0x067C, r24
    3a56:	80 93 8f 06 	sts	0x068F, r24
    3a5a:	08 95       	ret

00003a5c <nrk_reserve_create>:
}

// This function returns the id of a free reserve
// This returns NRK_ERROR if there are no free reserves
int8_t nrk_reserve_create ()
{
    3a5c:	e3 e4       	ldi	r30, 0x43	; 67
    3a5e:	f6 e0       	ldi	r31, 0x06	; 6
    3a60:	80 e0       	ldi	r24, 0x00	; 0
    3a62:	90 e0       	ldi	r25, 0x00	; 0
  int8_t i;
  for (i = 0; i < NRK_MAX_RESERVES; i++) {
    if (_nrk_reserve[i].active == -1) {
    3a64:	20 81       	ld	r18, Z
    3a66:	2f 3f       	cpi	r18, 0xFF	; 255
    3a68:	59 f4       	brne	.+22     	; 0x3a80 <nrk_reserve_create+0x24>
      // Check and Accept
      _nrk_reserve[i].active = 1;
    3a6a:	23 e1       	ldi	r18, 0x13	; 19
    3a6c:	28 9f       	mul	r18, r24
    3a6e:	f0 01       	movw	r30, r0
    3a70:	29 9f       	mul	r18, r25
    3a72:	f0 0d       	add	r31, r0
    3a74:	11 24       	eor	r1, r1
    3a76:	ed 5c       	subi	r30, 0xCD	; 205
    3a78:	f9 4f       	sbci	r31, 0xF9	; 249
    3a7a:	91 e0       	ldi	r25, 0x01	; 1
    3a7c:	90 8b       	std	Z+16, r25	; 0x10
      return i;
    3a7e:	08 95       	ret
    3a80:	01 96       	adiw	r24, 0x01	; 1
    3a82:	73 96       	adiw	r30, 0x13	; 19
// This function returns the id of a free reserve
// This returns NRK_ERROR if there are no free reserves
int8_t nrk_reserve_create ()
{
  int8_t i;
  for (i = 0; i < NRK_MAX_RESERVES; i++) {
    3a84:	85 30       	cpi	r24, 0x05	; 5
    3a86:	91 05       	cpc	r25, r1
    3a88:	69 f7       	brne	.-38     	; 0x3a64 <nrk_reserve_create+0x8>
      _nrk_reserve[i].active = 1;
      return i;
    }
  }

  return NRK_ERROR;
    3a8a:	8f ef       	ldi	r24, 0xFF	; 255
}
    3a8c:	08 95       	ret

00003a8e <nrk_reserve_delete>:
// This function frees a current reserve
// This returns NRK_ERROR if the reserve does not exist
int8_t nrk_reserve_delete (uint8_t reserve_id)
{
  int8_t i;
  if (reserve_id >= 0 && reserve_id < NRK_MAX_RESERVES) {
    3a8e:	85 30       	cpi	r24, 0x05	; 5
    3a90:	38 f4       	brcc	.+14     	; 0x3aa0 <nrk_reserve_delete+0x12>
    if (_nrk_reserve[i].active == 1) {
    3a92:	e3 e3       	ldi	r30, 0x33	; 51
    3a94:	f6 e0       	ldi	r31, 0x06	; 6
    3a96:	80 89       	ldd	r24, Z+16	; 0x10
    3a98:	81 30       	cpi	r24, 0x01	; 1
    3a9a:	11 f4       	brne	.+4      	; 0x3aa0 <nrk_reserve_delete+0x12>
      _nrk_reserve[i].active = 0;
    3a9c:	10 8a       	std	Z+16, r1	; 0x10
      return NRK_OK;
    3a9e:	08 95       	ret
    }
  }
  return NRK_ERROR;
    3aa0:	8f ef       	ldi	r24, 0xFF	; 255
}
    3aa2:	08 95       	ret

00003aa4 <_nrk_reserve_update>:
  return (_nrk_reserve[reserve_id].set_access -
          _nrk_reserve[reserve_id].cur_access);
}

void _nrk_reserve_update (uint8_t reserve_id)
{
    3aa4:	0f 93       	push	r16
    3aa6:	1f 93       	push	r17
    3aa8:	cf 93       	push	r28
    3aaa:	df 93       	push	r29
    3aac:	cd b7       	in	r28, 0x3d	; 61
    3aae:	de b7       	in	r29, 0x3e	; 62
    3ab0:	28 97       	sbiw	r28, 0x08	; 8
    3ab2:	0f b6       	in	r0, 0x3f	; 63
    3ab4:	f8 94       	cli
    3ab6:	de bf       	out	0x3e, r29	; 62
    3ab8:	0f be       	out	0x3f, r0	; 63
    3aba:	cd bf       	out	0x3d, r28	; 61
    3abc:	08 2f       	mov	r16, r24
  nrk_time_t t;

  nrk_int_disable ();
    3abe:	0e 94 cf 0c 	call	0x199e	; 0x199e <nrk_int_disable>
  nrk_time_get (&t);
    3ac2:	ce 01       	movw	r24, r28
    3ac4:	01 96       	adiw	r24, 0x01	; 1
    3ac6:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <nrk_time_get>

  _nrk_reserve[reserve_id].cur_time = (int32_t) _nrk_time_to_ticks_long (&t);
    3aca:	10 e0       	ldi	r17, 0x00	; 0
    3acc:	ce 01       	movw	r24, r28
    3ace:	01 96       	adiw	r24, 0x01	; 1
    3ad0:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <_nrk_time_to_ticks_long>
    3ad4:	23 e1       	ldi	r18, 0x13	; 19
    3ad6:	20 9f       	mul	r18, r16
    3ad8:	f0 01       	movw	r30, r0
    3ada:	21 9f       	mul	r18, r17
    3adc:	f0 0d       	add	r31, r0
    3ade:	11 24       	eor	r1, r1
    3ae0:	ed 5c       	subi	r30, 0xCD	; 205
    3ae2:	f9 4f       	sbci	r31, 0xF9	; 249
    3ae4:	60 87       	std	Z+8, r22	; 0x08
    3ae6:	71 87       	std	Z+9, r23	; 0x09
    3ae8:	82 87       	std	Z+10, r24	; 0x0a
    3aea:	93 87       	std	Z+11, r25	; 0x0b
  if (_nrk_reserve[reserve_id].cur_time >= _nrk_reserve[reserve_id].set_time) {
    3aec:	04 81       	ldd	r16, Z+4	; 0x04
    3aee:	15 81       	ldd	r17, Z+5	; 0x05
    3af0:	26 81       	ldd	r18, Z+6	; 0x06
    3af2:	37 81       	ldd	r19, Z+7	; 0x07
    3af4:	60 17       	cp	r22, r16
    3af6:	71 07       	cpc	r23, r17
    3af8:	82 07       	cpc	r24, r18
    3afa:	93 07       	cpc	r25, r19
    3afc:	80 f0       	brcs	.+32     	; 0x3b1e <_nrk_reserve_update+0x7a>
    // If the reserve is passed its period then replenish it
    _nrk_reserve[reserve_id].set_time =
      _nrk_reserve[reserve_id].cur_time +
    3afe:	00 81       	ld	r16, Z
    3b00:	11 81       	ldd	r17, Z+1	; 0x01
    3b02:	22 81       	ldd	r18, Z+2	; 0x02
    3b04:	33 81       	ldd	r19, Z+3	; 0x03
    3b06:	dc 01       	movw	r26, r24
    3b08:	cb 01       	movw	r24, r22
    3b0a:	80 0f       	add	r24, r16
    3b0c:	91 1f       	adc	r25, r17
    3b0e:	a2 1f       	adc	r26, r18
    3b10:	b3 1f       	adc	r27, r19
  nrk_time_get (&t);

  _nrk_reserve[reserve_id].cur_time = (int32_t) _nrk_time_to_ticks_long (&t);
  if (_nrk_reserve[reserve_id].cur_time >= _nrk_reserve[reserve_id].set_time) {
    // If the reserve is passed its period then replenish it
    _nrk_reserve[reserve_id].set_time =
    3b12:	84 83       	std	Z+4, r24	; 0x04
    3b14:	95 83       	std	Z+5, r25	; 0x05
    3b16:	a6 83       	std	Z+6, r26	; 0x06
    3b18:	b7 83       	std	Z+7, r27	; 0x07
      _nrk_reserve[reserve_id].cur_time +
      _nrk_reserve[reserve_id].period_ticks;
    _nrk_reserve[reserve_id].cur_access = 0;
    3b1a:	17 86       	std	Z+15, r1	; 0x0f
    3b1c:	16 86       	std	Z+14, r1	; 0x0e
  }
  nrk_int_enable ();
    3b1e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <nrk_int_enable>

}
    3b22:	28 96       	adiw	r28, 0x08	; 8
    3b24:	0f b6       	in	r0, 0x3f	; 63
    3b26:	f8 94       	cli
    3b28:	de bf       	out	0x3e, r29	; 62
    3b2a:	0f be       	out	0x3f, r0	; 63
    3b2c:	cd bf       	out	0x3d, r28	; 61
    3b2e:	df 91       	pop	r29
    3b30:	cf 91       	pop	r28
    3b32:	1f 91       	pop	r17
    3b34:	0f 91       	pop	r16
    3b36:	08 95       	ret

00003b38 <nrk_reserve_get>:




uint8_t nrk_reserve_get (uint8_t reserve_id)
{
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29

  if (reserve_id >= NRK_MAX_RESERVES) {
    3b3c:	85 30       	cpi	r24, 0x05	; 5
    3b3e:	10 f0       	brcs	.+4      	; 0x3b44 <nrk_reserve_get+0xc>
    _nrk_errno_set (1);
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	0a c0       	rjmp	.+20     	; 0x3b58 <nrk_reserve_get+0x20>
    return 0;
  }
  if (_nrk_reserve[reserve_id].active == -1) {
    3b44:	93 e1       	ldi	r25, 0x13	; 19
    3b46:	89 9f       	mul	r24, r25
    3b48:	e0 01       	movw	r28, r0
    3b4a:	11 24       	eor	r1, r1
    3b4c:	cd 5c       	subi	r28, 0xCD	; 205
    3b4e:	d9 4f       	sbci	r29, 0xF9	; 249
    3b50:	98 89       	ldd	r25, Y+16	; 0x10
    3b52:	9f 3f       	cpi	r25, 0xFF	; 255
    3b54:	21 f4       	brne	.+8      	; 0x3b5e <nrk_reserve_get+0x26>
    // Reserve isn't active 
    _nrk_errno_set (2);
    3b56:	82 e0       	ldi	r24, 0x02	; 2
    3b58:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_nrk_errno_set>
    3b5c:	0b c0       	rjmp	.+22     	; 0x3b74 <nrk_reserve_get+0x3c>
    return 0;
  }

  _nrk_reserve_update (reserve_id);
    3b5e:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <_nrk_reserve_update>

  if (_nrk_reserve[reserve_id].cur_access >
    3b62:	2e 85       	ldd	r18, Y+14	; 0x0e
    3b64:	3f 85       	ldd	r19, Y+15	; 0x0f
      _nrk_reserve[reserve_id].set_access)
    3b66:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b68:	9d 85       	ldd	r25, Y+13	; 0x0d
    return 0;
  }

  _nrk_reserve_update (reserve_id);

  if (_nrk_reserve[reserve_id].cur_access >
    3b6a:	82 17       	cp	r24, r18
    3b6c:	93 07       	cpc	r25, r19
    3b6e:	14 f0       	brlt	.+4      	; 0x3b74 <nrk_reserve_get+0x3c>
      _nrk_reserve[reserve_id].set_access)
    return 0;
  return (_nrk_reserve[reserve_id].set_access -
    3b70:	82 1b       	sub	r24, r18
    3b72:	01 c0       	rjmp	.+2      	; 0x3b76 <nrk_reserve_get+0x3e>

  _nrk_reserve_update (reserve_id);

  if (_nrk_reserve[reserve_id].cur_access >
      _nrk_reserve[reserve_id].set_access)
    return 0;
    3b74:	80 e0       	ldi	r24, 0x00	; 0
  return (_nrk_reserve[reserve_id].set_access -
          _nrk_reserve[reserve_id].cur_access);
}
    3b76:	df 91       	pop	r29
    3b78:	cf 91       	pop	r28
    3b7a:	08 95       	ret

00003b7c <nrk_reserve_consume>:
  nrk_int_enable ();

}

int8_t nrk_reserve_consume (uint8_t reserve_id)
{
    3b7c:	1f 93       	push	r17
    3b7e:	cf 93       	push	r28
    3b80:	df 93       	push	r29

  if (reserve_id >= NRK_MAX_RESERVES) {
    3b82:	85 30       	cpi	r24, 0x05	; 5
    3b84:	20 f0       	brcs	.+8      	; 0x3b8e <nrk_reserve_consume+0x12>
    _nrk_errno_set (1);
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_nrk_errno_set>
    3b8c:	23 c0       	rjmp	.+70     	; 0x3bd4 <nrk_reserve_consume+0x58>
    return NRK_ERROR;
  }
  if (_nrk_reserve[reserve_id].active == -1) {
    3b8e:	93 e1       	ldi	r25, 0x13	; 19
    3b90:	89 9f       	mul	r24, r25
    3b92:	e0 01       	movw	r28, r0
    3b94:	11 24       	eor	r1, r1
    3b96:	cd 5c       	subi	r28, 0xCD	; 205
    3b98:	d9 4f       	sbci	r29, 0xF9	; 249
    3b9a:	18 89       	ldd	r17, Y+16	; 0x10
    3b9c:	1f 3f       	cpi	r17, 0xFF	; 255
    3b9e:	21 f4       	brne	.+8      	; 0x3ba8 <nrk_reserve_consume+0x2c>
    _nrk_errno_set (2);
    3ba0:	82 e0       	ldi	r24, 0x02	; 2
    3ba2:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <_nrk_errno_set>
    return NRK_ERROR;
    3ba6:	17 c0       	rjmp	.+46     	; 0x3bd6 <nrk_reserve_consume+0x5a>
  }

  _nrk_reserve_update (reserve_id);
    3ba8:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <_nrk_reserve_update>

  if ((_nrk_reserve[reserve_id].set_access <=
       _nrk_reserve[reserve_id].cur_access)) {
    3bac:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bae:	9f 85       	ldd	r25, Y+15	; 0x0f
    return NRK_ERROR;
  }

  _nrk_reserve_update (reserve_id);

  if ((_nrk_reserve[reserve_id].set_access <=
    3bb0:	2c 85       	ldd	r18, Y+12	; 0x0c
    3bb2:	3d 85       	ldd	r19, Y+13	; 0x0d
    3bb4:	82 17       	cp	r24, r18
    3bb6:	93 07       	cpc	r25, r19
    3bb8:	44 f0       	brlt	.+16     	; 0x3bca <nrk_reserve_consume+0x4e>
       _nrk_reserve[reserve_id].cur_access)) {
    // You violated your resource (like MJ after a little boy)
    nrk_int_enable ();
    3bba:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <nrk_int_enable>
    if (_nrk_reserve[reserve_id].error != NULL)
    3bbe:	e9 89       	ldd	r30, Y+17	; 0x11
    3bc0:	fa 89       	ldd	r31, Y+18	; 0x12
    3bc2:	30 97       	sbiw	r30, 0x00	; 0
    3bc4:	39 f0       	breq	.+14     	; 0x3bd4 <nrk_reserve_consume+0x58>
      _nrk_reserve[reserve_id].error ();
    3bc6:	09 95       	icall
    3bc8:	05 c0       	rjmp	.+10     	; 0x3bd4 <nrk_reserve_consume+0x58>
    return NRK_ERROR;
  }
  else {
    // Reserve is fine. Take some of it.
    _nrk_reserve[reserve_id].cur_access++;
    3bca:	01 96       	adiw	r24, 0x01	; 1
    3bcc:	9f 87       	std	Y+15, r25	; 0x0f
    3bce:	8e 87       	std	Y+14, r24	; 0x0e
  }


  return NRK_OK;
    3bd0:	11 e0       	ldi	r17, 0x01	; 1
    3bd2:	01 c0       	rjmp	.+2      	; 0x3bd6 <nrk_reserve_consume+0x5a>
       _nrk_reserve[reserve_id].cur_access)) {
    // You violated your resource (like MJ after a little boy)
    nrk_int_enable ();
    if (_nrk_reserve[reserve_id].error != NULL)
      _nrk_reserve[reserve_id].error ();
    return NRK_ERROR;
    3bd4:	1f ef       	ldi	r17, 0xFF	; 255
    _nrk_reserve[reserve_id].cur_access++;
  }


  return NRK_OK;
}
    3bd6:	81 2f       	mov	r24, r17
    3bd8:	df 91       	pop	r29
    3bda:	cf 91       	pop	r28
    3bdc:	1f 91       	pop	r17
    3bde:	08 95       	ret

00003be0 <nrk_reserve_set>:

int8_t nrk_reserve_set (uint8_t id, nrk_time_t * period, int16_t access_count,
                        void *errhandler)
{
    3be0:	8f 92       	push	r8
    3be2:	9f 92       	push	r9
    3be4:	af 92       	push	r10
    3be6:	bf 92       	push	r11
    3be8:	cf 92       	push	r12
    3bea:	df 92       	push	r13
    3bec:	ef 92       	push	r14
    3bee:	ff 92       	push	r15
    3bf0:	0f 93       	push	r16
    3bf2:	1f 93       	push	r17
    3bf4:	cf 93       	push	r28
    3bf6:	df 93       	push	r29
    3bf8:	cd b7       	in	r28, 0x3d	; 61
    3bfa:	de b7       	in	r29, 0x3e	; 62
    3bfc:	28 97       	sbiw	r28, 0x08	; 8
    3bfe:	0f b6       	in	r0, 0x3f	; 63
    3c00:	f8 94       	cli
    3c02:	de bf       	out	0x3e, r29	; 62
    3c04:	0f be       	out	0x3f, r0	; 63
    3c06:	cd bf       	out	0x3d, r28	; 61
  nrk_time_t tmp_time;

  if (id >= NRK_MAX_RESERVES)
    3c08:	85 30       	cpi	r24, 0x05	; 5
    3c0a:	08 f0       	brcs	.+2      	; 0x3c0e <nrk_reserve_set+0x2e>
    3c0c:	4a c0       	rjmp	.+148    	; 0x3ca2 <nrk_reserve_set+0xc2>
    return NRK_ERROR;
  if (_nrk_reserve[id].active == -1)
    3c0e:	93 e1       	ldi	r25, 0x13	; 19
    3c10:	89 9f       	mul	r24, r25
    3c12:	80 01       	movw	r16, r0
    3c14:	11 24       	eor	r1, r1
    3c16:	0d 5c       	subi	r16, 0xCD	; 205
    3c18:	19 4f       	sbci	r17, 0xF9	; 249
    3c1a:	f8 01       	movw	r30, r16
    3c1c:	80 89       	ldd	r24, Z+16	; 0x10
    3c1e:	8f 3f       	cpi	r24, 0xFF	; 255
    3c20:	09 f4       	brne	.+2      	; 0x3c24 <nrk_reserve_set+0x44>
    3c22:	40 c0       	rjmp	.+128    	; 0x3ca4 <nrk_reserve_set+0xc4>
    3c24:	79 01       	movw	r14, r18
    3c26:	6a 01       	movw	r12, r20
    3c28:	fb 01       	movw	r30, r22
    return NRK_ERROR;

  tmp_time.secs = period->secs;
    3c2a:	80 81       	ld	r24, Z
    3c2c:	91 81       	ldd	r25, Z+1	; 0x01
    3c2e:	a2 81       	ldd	r26, Z+2	; 0x02
    3c30:	b3 81       	ldd	r27, Z+3	; 0x03
    3c32:	89 83       	std	Y+1, r24	; 0x01
    3c34:	9a 83       	std	Y+2, r25	; 0x02
    3c36:	ab 83       	std	Y+3, r26	; 0x03
    3c38:	bc 83       	std	Y+4, r27	; 0x04
  tmp_time.nano_secs = period->nano_secs;
    3c3a:	84 81       	ldd	r24, Z+4	; 0x04
    3c3c:	95 81       	ldd	r25, Z+5	; 0x05
    3c3e:	a6 81       	ldd	r26, Z+6	; 0x06
    3c40:	b7 81       	ldd	r27, Z+7	; 0x07
    3c42:	8d 83       	std	Y+5, r24	; 0x05
    3c44:	9e 83       	std	Y+6, r25	; 0x06
    3c46:	af 83       	std	Y+7, r26	; 0x07
    3c48:	b8 87       	std	Y+8, r27	; 0x08
  _nrk_reserve[id].period_ticks = _nrk_time_to_ticks_long (&tmp_time);
    3c4a:	ce 01       	movw	r24, r28
    3c4c:	01 96       	adiw	r24, 0x01	; 1
    3c4e:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <_nrk_time_to_ticks_long>
    3c52:	f8 01       	movw	r30, r16
    3c54:	60 83       	st	Z, r22
    3c56:	71 83       	std	Z+1, r23	; 0x01
    3c58:	82 83       	std	Z+2, r24	; 0x02
    3c5a:	93 83       	std	Z+3, r25	; 0x03
  _nrk_reserve[id].set_access = access_count;
    3c5c:	d5 86       	std	Z+13, r13	; 0x0d
    3c5e:	c4 86       	std	Z+12, r12	; 0x0c
  _nrk_reserve[id].cur_access = 0;
    3c60:	17 86       	std	Z+15, r1	; 0x0f
    3c62:	16 86       	std	Z+14, r1	; 0x0e

  nrk_time_get (&tmp_time);
    3c64:	ce 01       	movw	r24, r28
    3c66:	01 96       	adiw	r24, 0x01	; 1
    3c68:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <nrk_time_get>
  _nrk_reserve[id].cur_time = (uint32_t) _nrk_time_to_ticks_long (&tmp_time);
    3c6c:	ce 01       	movw	r24, r28
    3c6e:	01 96       	adiw	r24, 0x01	; 1
    3c70:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <_nrk_time_to_ticks_long>
    3c74:	f8 01       	movw	r30, r16
    3c76:	60 87       	std	Z+8, r22	; 0x08
    3c78:	71 87       	std	Z+9, r23	; 0x09
    3c7a:	82 87       	std	Z+10, r24	; 0x0a
    3c7c:	93 87       	std	Z+11, r25	; 0x0b
  _nrk_reserve[id].set_time =
    _nrk_reserve[id].cur_time + _nrk_reserve[id].period_ticks;
    3c7e:	80 80       	ld	r8, Z
    3c80:	91 80       	ldd	r9, Z+1	; 0x01
    3c82:	a2 80       	ldd	r10, Z+2	; 0x02
    3c84:	b3 80       	ldd	r11, Z+3	; 0x03
    3c86:	dc 01       	movw	r26, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	88 0d       	add	r24, r8
    3c8c:	99 1d       	adc	r25, r9
    3c8e:	aa 1d       	adc	r26, r10
    3c90:	bb 1d       	adc	r27, r11
  _nrk_reserve[id].set_access = access_count;
  _nrk_reserve[id].cur_access = 0;

  nrk_time_get (&tmp_time);
  _nrk_reserve[id].cur_time = (uint32_t) _nrk_time_to_ticks_long (&tmp_time);
  _nrk_reserve[id].set_time =
    3c92:	84 83       	std	Z+4, r24	; 0x04
    3c94:	95 83       	std	Z+5, r25	; 0x05
    3c96:	a6 83       	std	Z+6, r26	; 0x06
    3c98:	b7 83       	std	Z+7, r27	; 0x07
    _nrk_reserve[id].cur_time + _nrk_reserve[id].period_ticks;
  _nrk_reserve[id].error = (void *) errhandler;
    3c9a:	f2 8a       	std	Z+18, r15	; 0x12
    3c9c:	e1 8a       	std	Z+17, r14	; 0x11

  return NRK_OK;
    3c9e:	81 e0       	ldi	r24, 0x01	; 1
    3ca0:	01 c0       	rjmp	.+2      	; 0x3ca4 <nrk_reserve_set+0xc4>
                        void *errhandler)
{
  nrk_time_t tmp_time;

  if (id >= NRK_MAX_RESERVES)
    return NRK_ERROR;
    3ca2:	8f ef       	ldi	r24, 0xFF	; 255
  _nrk_reserve[id].set_time =
    _nrk_reserve[id].cur_time + _nrk_reserve[id].period_ticks;
  _nrk_reserve[id].error = (void *) errhandler;

  return NRK_OK;
}
    3ca4:	28 96       	adiw	r28, 0x08	; 8
    3ca6:	0f b6       	in	r0, 0x3f	; 63
    3ca8:	f8 94       	cli
    3caa:	de bf       	out	0x3e, r29	; 62
    3cac:	0f be       	out	0x3f, r0	; 63
    3cae:	cd bf       	out	0x3d, r28	; 61
    3cb0:	df 91       	pop	r29
    3cb2:	cf 91       	pop	r28
    3cb4:	1f 91       	pop	r17
    3cb6:	0f 91       	pop	r16
    3cb8:	ff 90       	pop	r15
    3cba:	ef 90       	pop	r14
    3cbc:	df 90       	pop	r13
    3cbe:	cf 90       	pop	r12
    3cc0:	bf 90       	pop	r11
    3cc2:	af 90       	pop	r10
    3cc4:	9f 90       	pop	r9
    3cc6:	8f 90       	pop	r8
    3cc8:	08 95       	ret

00003cca <nrk_spin_wait_us>:
	...
    3ce2:	01 97       	sbiw	r24, 0x01	; 1
    3ce4:	91 f7       	brne	.-28     	; 0x3cca <nrk_spin_wait_us>
    3ce6:	08 95       	ret

00003ce8 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    3ce8:	10 92 21 01 	sts	0x0121, r1
    3cec:	08 95       	ret

00003cee <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    3cee:	89 e0       	ldi	r24, 0x09	; 9
    3cf0:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    3cf4:	8d e8       	ldi	r24, 0x8D	; 141
    3cf6:	9c e3       	ldi	r25, 0x3C	; 60
    3cf8:	90 93 29 01 	sts	0x0129, r25
    3cfc:	80 93 28 01 	sts	0x0128, r24
    3d00:	08 95       	ret

00003d02 <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3d02:	10 92 25 01 	sts	0x0125, r1
    3d06:	10 92 24 01 	sts	0x0124, r1
    3d0a:	08 95       	ret

00003d0c <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    3d0c:	cf 93       	push	r28
    3d0e:	df 93       	push	r29
    3d10:	00 d0       	rcall	.+0      	; 0x3d12 <_nrk_precision_os_timer_get+0x6>
    3d12:	cd b7       	in	r28, 0x3d	; 61
    3d14:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    3d16:	80 91 24 01 	lds	r24, 0x0124
    3d1a:	90 91 25 01 	lds	r25, 0x0125
    3d1e:	9a 83       	std	Y+2, r25	; 0x02
    3d20:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    3d22:	89 81       	ldd	r24, Y+1	; 0x01
    3d24:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3d26:	0f 90       	pop	r0
    3d28:	0f 90       	pop	r0
    3d2a:	df 91       	pop	r29
    3d2c:	cf 91       	pop	r28
    3d2e:	08 95       	ret

00003d30 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    3d30:	10 92 81 00 	sts	0x0081, r1
    3d34:	08 95       	ret

00003d36 <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    3d36:	81 e0       	ldi	r24, 0x01	; 1
    3d38:	80 93 81 00 	sts	0x0081, r24
    3d3c:	08 95       	ret

00003d3e <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3d3e:	83 b5       	in	r24, 0x23	; 35
    3d40:	81 60       	ori	r24, 0x01	; 1
    3d42:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    3d44:	10 92 85 00 	sts	0x0085, r1
    3d48:	10 92 84 00 	sts	0x0084, r1
    3d4c:	08 95       	ret

00003d4e <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    3d4e:	cf 93       	push	r28
    3d50:	df 93       	push	r29
    3d52:	00 d0       	rcall	.+0      	; 0x3d54 <_nrk_high_speed_timer_get+0x6>
    3d54:	cd b7       	in	r28, 0x3d	; 61
    3d56:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    3d58:	80 91 84 00 	lds	r24, 0x0084
    3d5c:	90 91 85 00 	lds	r25, 0x0085
    3d60:	9a 83       	std	Y+2, r25	; 0x02
    3d62:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    3d64:	89 81       	ldd	r24, Y+1	; 0x01
    3d66:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3d68:	0f 90       	pop	r0
    3d6a:	0f 90       	pop	r0
    3d6c:	df 91       	pop	r29
    3d6e:	cf 91       	pop	r28
    3d70:	08 95       	ret

00003d72 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    3d72:	cf 92       	push	r12
    3d74:	df 92       	push	r13
    3d76:	ef 92       	push	r14
    3d78:	ff 92       	push	r15
    3d7a:	cf 93       	push	r28
    3d7c:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    3d7e:	ec 01       	movw	r28, r24
    3d80:	cc 0f       	add	r28, r28
    3d82:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    3d84:	c9 37       	cpi	r28, 0x79	; 121
    3d86:	8f ef       	ldi	r24, 0xFF	; 255
    3d88:	d8 07       	cpc	r29, r24
    3d8a:	10 f0       	brcs	.+4      	; 0x3d90 <nrk_high_speed_timer_wait+0x1e>
    3d8c:	c0 e0       	ldi	r28, 0x00	; 0
    3d8e:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    3d90:	6b 01       	movw	r12, r22
    3d92:	e1 2c       	mov	r14, r1
    3d94:	f1 2c       	mov	r15, r1
    3d96:	cc 0e       	add	r12, r28
    3d98:	dd 1e       	adc	r13, r29
    3d9a:	e1 1c       	adc	r14, r1
    3d9c:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	c8 16       	cp	r12, r24
    3da2:	d1 04       	cpc	r13, r1
    3da4:	e8 06       	cpc	r14, r24
    3da6:	f1 04       	cpc	r15, r1
    3da8:	40 f0       	brcs	.+16     	; 0x3dba <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	e8 1a       	sub	r14, r24
    3dae:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    3db0:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <_nrk_high_speed_timer_get>
    3db4:	c8 17       	cp	r28, r24
    3db6:	d9 07       	cpc	r29, r25
    3db8:	d8 f3       	brcs	.-10     	; 0x3db0 <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    3dba:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <_nrk_high_speed_timer_get>
    3dbe:	8c 15       	cp	r24, r12
    3dc0:	9d 05       	cpc	r25, r13
    3dc2:	d8 f3       	brcs	.-10     	; 0x3dba <nrk_high_speed_timer_wait+0x48>
}
    3dc4:	df 91       	pop	r29
    3dc6:	cf 91       	pop	r28
    3dc8:	ff 90       	pop	r15
    3dca:	ef 90       	pop	r14
    3dcc:	df 90       	pop	r13
    3dce:	cf 90       	pop	r12
    3dd0:	08 95       	ret

00003dd2 <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    3dd2:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    3dd6:	e0 e7       	ldi	r30, 0x70	; 112
    3dd8:	f0 e0       	ldi	r31, 0x00	; 0
    3dda:	80 81       	ld	r24, Z
    3ddc:	8d 7f       	andi	r24, 0xFD	; 253
    3dde:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    3de0:	80 81       	ld	r24, Z
    3de2:	8e 7f       	andi	r24, 0xFE	; 254
    3de4:	80 83       	st	Z, r24
    3de6:	08 95       	ret

00003de8 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    3de8:	80 93 b2 00 	sts	0x00B2, r24
    3dec:	08 95       	ret

00003dee <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    3dee:	e0 e7       	ldi	r30, 0x70	; 112
    3df0:	f0 e0       	ldi	r31, 0x00	; 0
    3df2:	80 81       	ld	r24, Z
    3df4:	83 60       	ori	r24, 0x03	; 3
    3df6:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    3df8:	83 e0       	ldi	r24, 0x03	; 3
    3dfa:	80 93 b1 00 	sts	0x00B1, r24
    3dfe:	08 95       	ret

00003e00 <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    3e00:	83 b5       	in	r24, 0x23	; 35
    3e02:	82 60       	ori	r24, 0x02	; 2
    3e04:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    3e06:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    3e0a:	10 92 ad 03 	sts	0x03AD, r1
    _nrk_prev_timer_val=0;
    3e0e:	10 92 20 04 	sts	0x0420, r1
    3e12:	08 95       	ret

00003e14 <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    3e14:	cf 93       	push	r28
    3e16:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    3e18:	8e ef       	ldi	r24, 0xFE	; 254
    3e1a:	80 93 20 04 	sts	0x0420, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    3e1e:	80 e2       	ldi	r24, 0x20	; 32
    3e20:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    3e24:	80 91 20 04 	lds	r24, 0x0420
    3e28:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    3e2c:	83 e0       	ldi	r24, 0x03	; 3
    3e2e:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    3e30:	92 e0       	ldi	r25, 0x02	; 2
    3e32:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    3e36:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    3e3a:	93 b5       	in	r25, 0x23	; 35
    3e3c:	92 60       	ori	r25, 0x02	; 2
    3e3e:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    3e40:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    3e42:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    3e44:	83 b5       	in	r24, 0x23	; 35
    3e46:	82 60       	ori	r24, 0x02	; 2
    3e48:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    3e4a:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    3e54:	10 92 85 00 	sts	0x0085, r1
    3e58:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3e5c:	83 b5       	in	r24, 0x23	; 35
    3e5e:	82 60       	ori	r24, 0x02	; 2
    3e60:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3e62:	83 b5       	in	r24, 0x23	; 35
    3e64:	81 60       	ori	r24, 0x01	; 1
    3e66:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    3e68:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    3e6c:	c4 e2       	ldi	r28, 0x24	; 36
    3e6e:	d1 e0       	ldi	r29, 0x01	; 1
    3e70:	19 82       	std	Y+1, r1	; 0x01
    3e72:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3e74:	83 b5       	in	r24, 0x23	; 35
    3e76:	82 60       	ori	r24, 0x02	; 2
    3e78:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3e7a:	83 b5       	in	r24, 0x23	; 35
    3e7c:	81 60       	ori	r24, 0x01	; 1
    3e7e:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    3e80:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3e84:	19 82       	std	Y+1, r1	; 0x01
    3e86:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    3e88:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    3e8c:	0e 94 77 1e 	call	0x3cee	; 0x3cee <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    3e90:	10 92 ad 03 	sts	0x03AD, r1
}
    3e94:	df 91       	pop	r29
    3e96:	cf 91       	pop	r28
    3e98:	08 95       	ret

00003e9a <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    3e9a:	80 91 b3 00 	lds	r24, 0x00B3
}
    3e9e:	8f 5f       	subi	r24, 0xFF	; 255
    3ea0:	08 95       	ret

00003ea2 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    3ea2:	81 50       	subi	r24, 0x01	; 1
    3ea4:	80 93 b3 00 	sts	0x00B3, r24
    3ea8:	08 95       	ret

00003eaa <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3eaa:	81 11       	cpse	r24, r1
    3eac:	02 c0       	rjmp	.+4      	; 0x3eb2 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    3eae:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    3eb2:	8f ef       	ldi	r24, 0xFF	; 255
    3eb4:	08 95       	ret

00003eb6 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3eb6:	81 11       	cpse	r24, r1
    3eb8:	06 c0       	rjmp	.+12     	; 0x3ec6 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    3eba:	10 92 95 00 	sts	0x0095, r1
    3ebe:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    3ec2:	81 e0       	ldi	r24, 0x01	; 1
    3ec4:	08 95       	ret
	}
return NRK_ERROR;
    3ec6:	8f ef       	ldi	r24, 0xFF	; 255
}
    3ec8:	08 95       	ret

00003eca <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3eca:	81 11       	cpse	r24, r1
    3ecc:	05 c0       	rjmp	.+10     	; 0x3ed8 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    3ece:	80 91 94 00 	lds	r24, 0x0094
    3ed2:	90 91 95 00 	lds	r25, 0x0095
    3ed6:	08 95       	ret
	}
return 0;
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
    3eda:	90 e0       	ldi	r25, 0x00	; 0

}
    3edc:	08 95       	ret

00003ede <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    3ede:	81 11       	cpse	r24, r1
    3ee0:	05 c0       	rjmp	.+10     	; 0x3eec <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    3ee2:	82 e0       	ldi	r24, 0x02	; 2
    3ee4:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    3ee8:	81 e0       	ldi	r24, 0x01	; 1
    3eea:	08 95       	ret
	}
return NRK_ERROR;
    3eec:	8f ef       	ldi	r24, 0xFF	; 255
}
    3eee:	08 95       	ret

00003ef0 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    3ef0:	81 11       	cpse	r24, r1
    3ef2:	35 c0       	rjmp	.+106    	; 0x3f5e <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    3ef4:	cb 01       	movw	r24, r22
    3ef6:	01 97       	sbiw	r24, 0x01	; 1
    3ef8:	05 97       	sbiw	r24, 0x05	; 5
    3efa:	10 f4       	brcc	.+4      	; 0x3f00 <nrk_timer_int_configure+0x10>
    3efc:	60 93 1f 04 	sts	0x041F, r22
	TCCR3A = 0;  
    3f00:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    3f04:	88 e0       	ldi	r24, 0x08	; 8
    3f06:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    3f0a:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    3f0e:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    3f12:	30 93 ab 03 	sts	0x03AB, r19
    3f16:	20 93 aa 03 	sts	0x03AA, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    3f1a:	80 91 1f 04 	lds	r24, 0x041F
    3f1e:	81 30       	cpi	r24, 0x01	; 1
    3f20:	21 f4       	brne	.+8      	; 0x3f2a <nrk_timer_int_configure+0x3a>
    3f22:	80 91 91 00 	lds	r24, 0x0091
    3f26:	81 60       	ori	r24, 0x01	; 1
    3f28:	11 c0       	rjmp	.+34     	; 0x3f4c <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    3f2a:	82 30       	cpi	r24, 0x02	; 2
    3f2c:	21 f4       	brne	.+8      	; 0x3f36 <nrk_timer_int_configure+0x46>
    3f2e:	80 91 91 00 	lds	r24, 0x0091
    3f32:	82 60       	ori	r24, 0x02	; 2
    3f34:	0b c0       	rjmp	.+22     	; 0x3f4c <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    3f36:	83 30       	cpi	r24, 0x03	; 3
    3f38:	21 f4       	brne	.+8      	; 0x3f42 <nrk_timer_int_configure+0x52>
    3f3a:	80 91 91 00 	lds	r24, 0x0091
    3f3e:	83 60       	ori	r24, 0x03	; 3
    3f40:	05 c0       	rjmp	.+10     	; 0x3f4c <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    3f42:	84 30       	cpi	r24, 0x04	; 4
    3f44:	31 f4       	brne	.+12     	; 0x3f52 <nrk_timer_int_configure+0x62>
    3f46:	80 91 91 00 	lds	r24, 0x0091
    3f4a:	84 60       	ori	r24, 0x04	; 4
    3f4c:	80 93 91 00 	sts	0x0091, r24
    3f50:	08 c0       	rjmp	.+16     	; 0x3f62 <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    3f52:	85 30       	cpi	r24, 0x05	; 5
    3f54:	31 f4       	brne	.+12     	; 0x3f62 <nrk_timer_int_configure+0x72>
    3f56:	80 91 91 00 	lds	r24, 0x0091
    3f5a:	85 60       	ori	r24, 0x05	; 5
    3f5c:	f7 cf       	rjmp	.-18     	; 0x3f4c <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    3f5e:	8f ef       	ldi	r24, 0xFF	; 255
    3f60:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    3f62:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    3f64:	08 95       	ret

00003f66 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    3f66:	80 91 b2 00 	lds	r24, 0x00B2
}
    3f6a:	08 95       	ret

00003f6c <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    3f6c:	1f 92       	push	r1
    3f6e:	0f 92       	push	r0
    3f70:	0f b6       	in	r0, 0x3f	; 63
    3f72:	0f 92       	push	r0
    3f74:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3f76:	60 e0       	ldi	r22, 0x00	; 0
    3f78:	8a e0       	ldi	r24, 0x0A	; 10
    3f7a:	0e 94 5f 10 	call	0x20be	; 0x20be <nrk_kernel_error_add>
	while(1);
    3f7e:	ff cf       	rjmp	.-2      	; 0x3f7e <__vector_default+0x12>

00003f80 <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    3f80:	0f 92       	push	r0
    3f82:	0f b6       	in	r0, 0x3f	; 63
    3f84:	0f 92       	push	r0
    3f86:	1f 92       	push	r1
    3f88:	2f 92       	push	r2
    3f8a:	3f 92       	push	r3
    3f8c:	4f 92       	push	r4
    3f8e:	5f 92       	push	r5
    3f90:	6f 92       	push	r6
    3f92:	7f 92       	push	r7
    3f94:	8f 92       	push	r8
    3f96:	9f 92       	push	r9
    3f98:	af 92       	push	r10
    3f9a:	bf 92       	push	r11
    3f9c:	cf 92       	push	r12
    3f9e:	df 92       	push	r13
    3fa0:	ef 92       	push	r14
    3fa2:	ff 92       	push	r15
    3fa4:	0f 93       	push	r16
    3fa6:	1f 93       	push	r17
    3fa8:	2f 93       	push	r18
    3faa:	3f 93       	push	r19
    3fac:	4f 93       	push	r20
    3fae:	5f 93       	push	r21
    3fb0:	6f 93       	push	r22
    3fb2:	7f 93       	push	r23
    3fb4:	8f 93       	push	r24
    3fb6:	9f 93       	push	r25
    3fb8:	af 93       	push	r26
    3fba:	bf 93       	push	r27
    3fbc:	cf 93       	push	r28
    3fbe:	df 93       	push	r29
    3fc0:	ef 93       	push	r30
    3fc2:	ff 93       	push	r31
    3fc4:	a0 91 0c 06 	lds	r26, 0x060C
    3fc8:	b0 91 0d 06 	lds	r27, 0x060D
    3fcc:	0d b6       	in	r0, 0x3d	; 61
    3fce:	0d 92       	st	X+, r0
    3fd0:	0e b6       	in	r0, 0x3e	; 62
    3fd2:	0d 92       	st	X+, r0
    3fd4:	1f 92       	push	r1
    3fd6:	a0 91 b9 03 	lds	r26, 0x03B9
    3fda:	b0 91 ba 03 	lds	r27, 0x03BA
    3fde:	1e 90       	ld	r1, -X
    3fe0:	be bf       	out	0x3e, r27	; 62
    3fe2:	ad bf       	out	0x3d, r26	; 61
    3fe4:	08 95       	ret

00003fe6 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    3fe6:	1f 92       	push	r1
    3fe8:	0f 92       	push	r0
    3fea:	0f b6       	in	r0, 0x3f	; 63
    3fec:	0f 92       	push	r0
    3fee:	11 24       	eor	r1, r1
    3ff0:	0b b6       	in	r0, 0x3b	; 59
    3ff2:	0f 92       	push	r0
    3ff4:	2f 93       	push	r18
    3ff6:	3f 93       	push	r19
    3ff8:	4f 93       	push	r20
    3ffa:	5f 93       	push	r21
    3ffc:	6f 93       	push	r22
    3ffe:	7f 93       	push	r23
    4000:	8f 93       	push	r24
    4002:	9f 93       	push	r25
    4004:	af 93       	push	r26
    4006:	bf 93       	push	r27
    4008:	ef 93       	push	r30
    400a:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    400c:	e0 91 aa 03 	lds	r30, 0x03AA
    4010:	f0 91 ab 03 	lds	r31, 0x03AB
    4014:	30 97       	sbiw	r30, 0x00	; 0
    4016:	11 f0       	breq	.+4      	; 0x401c <__vector_32+0x36>
    4018:	09 95       	icall
    401a:	04 c0       	rjmp	.+8      	; 0x4024 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	8a e0       	ldi	r24, 0x0A	; 10
    4020:	0e 94 5f 10 	call	0x20be	; 0x20be <nrk_kernel_error_add>
	return;  	
}
    4024:	ff 91       	pop	r31
    4026:	ef 91       	pop	r30
    4028:	bf 91       	pop	r27
    402a:	af 91       	pop	r26
    402c:	9f 91       	pop	r25
    402e:	8f 91       	pop	r24
    4030:	7f 91       	pop	r23
    4032:	6f 91       	pop	r22
    4034:	5f 91       	pop	r21
    4036:	4f 91       	pop	r20
    4038:	3f 91       	pop	r19
    403a:	2f 91       	pop	r18
    403c:	0f 90       	pop	r0
    403e:	0b be       	out	0x3b, r0	; 59
    4040:	0f 90       	pop	r0
    4042:	0f be       	out	0x3f, r0	; 63
    4044:	0f 90       	pop	r0
    4046:	1f 90       	pop	r1
    4048:	18 95       	reti

0000404a <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    404a:	1f 92       	push	r1
    404c:	0f 92       	push	r0
    404e:	0f b6       	in	r0, 0x3f	; 63
    4050:	0f 92       	push	r0
    4052:	11 24       	eor	r1, r1

	return;  	
} 
    4054:	0f 90       	pop	r0
    4056:	0f be       	out	0x3f, r0	; 63
    4058:	0f 90       	pop	r0
    405a:	1f 90       	pop	r1
    405c:	18 95       	reti

0000405e <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    405e:	04 b6       	in	r0, 0x34	; 52
    4060:	03 fe       	sbrs	r0, 3
    4062:	02 c0       	rjmp	.+4      	; 0x4068 <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    4064:	80 e1       	ldi	r24, 0x10	; 16
    4066:	01 c0       	rjmp	.+2      	; 0x406a <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    4068:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    406a:	04 b6       	in	r0, 0x34	; 52
    406c:	02 fe       	sbrs	r0, 2
    406e:	06 c0       	rjmp	.+12     	; 0x407c <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    4070:	94 b7       	in	r25, 0x34	; 52
    4072:	9b 7f       	andi	r25, 0xFB	; 251
    4074:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    4076:	04 b6       	in	r0, 0x34	; 52
    4078:	00 fe       	sbrs	r0, 0
		error|=0x04;
    407a:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    407c:	04 b6       	in	r0, 0x34	; 52
    407e:	01 fe       	sbrs	r0, 1
    4080:	05 c0       	rjmp	.+10     	; 0x408c <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    4082:	94 b7       	in	r25, 0x34	; 52
    4084:	9d 7f       	andi	r25, 0xFD	; 253
    4086:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    4088:	82 60       	ori	r24, 0x02	; 2
    408a:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    408c:	81 11       	cpse	r24, r1
    408e:	0c c0       	rjmp	.+24     	; 0x40a8 <_nrk_startup_error+0x4a>


// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    4090:	04 b6       	in	r0, 0x34	; 52
    4092:	00 fe       	sbrs	r0, 0
    4094:	04 c0       	rjmp	.+8      	; 0x409e <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    4096:	94 b7       	in	r25, 0x34	; 52
    4098:	9e 7f       	andi	r25, 0xFE	; 254
    409a:	94 bf       	out	0x34, r25	; 52
    409c:	01 c0       	rjmp	.+2      	; 0x40a0 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    409e:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    40a0:	90 91 b0 00 	lds	r25, 0x00B0
    40a4:	91 11       	cpse	r25, r1
    40a6:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    40a8:	08 95       	ret

000040aa <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    40aa:	81 11       	cpse	r24, r1
    40ac:	02 c0       	rjmp	.+4      	; 0x40b2 <nrk_ext_int_enable+0x8>
    40ae:	e8 9a       	sbi	0x1d, 0	; 29
    40b0:	39 c0       	rjmp	.+114    	; 0x4124 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    40b2:	81 30       	cpi	r24, 0x01	; 1
    40b4:	11 f4       	brne	.+4      	; 0x40ba <nrk_ext_int_enable+0x10>
    40b6:	e9 9a       	sbi	0x1d, 1	; 29
    40b8:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    40ba:	82 30       	cpi	r24, 0x02	; 2
    40bc:	11 f4       	brne	.+4      	; 0x40c2 <nrk_ext_int_enable+0x18>
    40be:	ea 9a       	sbi	0x1d, 2	; 29
    40c0:	31 c0       	rjmp	.+98     	; 0x4124 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    40c2:	83 30       	cpi	r24, 0x03	; 3
    40c4:	21 f4       	brne	.+8      	; 0x40ce <nrk_ext_int_enable+0x24>
    40c6:	80 91 6b 00 	lds	r24, 0x006B
    40ca:	81 60       	ori	r24, 0x01	; 1
    40cc:	29 c0       	rjmp	.+82     	; 0x4120 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    40ce:	84 30       	cpi	r24, 0x04	; 4
    40d0:	21 f4       	brne	.+8      	; 0x40da <nrk_ext_int_enable+0x30>
    40d2:	80 91 6b 00 	lds	r24, 0x006B
    40d6:	82 60       	ori	r24, 0x02	; 2
    40d8:	23 c0       	rjmp	.+70     	; 0x4120 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    40da:	85 30       	cpi	r24, 0x05	; 5
    40dc:	21 f4       	brne	.+8      	; 0x40e6 <nrk_ext_int_enable+0x3c>
    40de:	80 91 6b 00 	lds	r24, 0x006B
    40e2:	84 60       	ori	r24, 0x04	; 4
    40e4:	1d c0       	rjmp	.+58     	; 0x4120 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    40e6:	86 30       	cpi	r24, 0x06	; 6
    40e8:	21 f4       	brne	.+8      	; 0x40f2 <nrk_ext_int_enable+0x48>
    40ea:	80 91 6b 00 	lds	r24, 0x006B
    40ee:	88 60       	ori	r24, 0x08	; 8
    40f0:	17 c0       	rjmp	.+46     	; 0x4120 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    40f2:	87 30       	cpi	r24, 0x07	; 7
    40f4:	21 f4       	brne	.+8      	; 0x40fe <nrk_ext_int_enable+0x54>
    40f6:	80 91 6b 00 	lds	r24, 0x006B
    40fa:	80 61       	ori	r24, 0x10	; 16
    40fc:	11 c0       	rjmp	.+34     	; 0x4120 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    40fe:	88 30       	cpi	r24, 0x08	; 8
    4100:	21 f4       	brne	.+8      	; 0x410a <nrk_ext_int_enable+0x60>
    4102:	80 91 6b 00 	lds	r24, 0x006B
    4106:	80 62       	ori	r24, 0x20	; 32
    4108:	0b c0       	rjmp	.+22     	; 0x4120 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    410a:	89 30       	cpi	r24, 0x09	; 9
    410c:	21 f4       	brne	.+8      	; 0x4116 <nrk_ext_int_enable+0x6c>
    410e:	80 91 6b 00 	lds	r24, 0x006B
    4112:	80 64       	ori	r24, 0x40	; 64
    4114:	05 c0       	rjmp	.+10     	; 0x4120 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    4116:	8a 30       	cpi	r24, 0x0A	; 10
    4118:	39 f4       	brne	.+14     	; 0x4128 <nrk_ext_int_enable+0x7e>
    411a:	80 91 6b 00 	lds	r24, 0x006B
    411e:	80 68       	ori	r24, 0x80	; 128
    4120:	80 93 6b 00 	sts	0x006B, r24
    4124:	81 e0       	ldi	r24, 0x01	; 1
    4126:	08 95       	ret
return NRK_ERROR;
    4128:	8f ef       	ldi	r24, 0xFF	; 255
}
    412a:	08 95       	ret

0000412c <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    412c:	81 11       	cpse	r24, r1
    412e:	02 c0       	rjmp	.+4      	; 0x4134 <nrk_ext_int_disable+0x8>
    4130:	e8 98       	cbi	0x1d, 0	; 29
    4132:	39 c0       	rjmp	.+114    	; 0x41a6 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4134:	81 30       	cpi	r24, 0x01	; 1
    4136:	11 f4       	brne	.+4      	; 0x413c <nrk_ext_int_disable+0x10>
    4138:	e9 98       	cbi	0x1d, 1	; 29
    413a:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    413c:	82 30       	cpi	r24, 0x02	; 2
    413e:	11 f4       	brne	.+4      	; 0x4144 <nrk_ext_int_disable+0x18>
    4140:	e9 98       	cbi	0x1d, 1	; 29
    4142:	31 c0       	rjmp	.+98     	; 0x41a6 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    4144:	83 30       	cpi	r24, 0x03	; 3
    4146:	21 f4       	brne	.+8      	; 0x4150 <nrk_ext_int_disable+0x24>
    4148:	80 91 6b 00 	lds	r24, 0x006B
    414c:	8e 7f       	andi	r24, 0xFE	; 254
    414e:	29 c0       	rjmp	.+82     	; 0x41a2 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    4150:	84 30       	cpi	r24, 0x04	; 4
    4152:	21 f4       	brne	.+8      	; 0x415c <nrk_ext_int_disable+0x30>
    4154:	80 91 6b 00 	lds	r24, 0x006B
    4158:	8d 7f       	andi	r24, 0xFD	; 253
    415a:	23 c0       	rjmp	.+70     	; 0x41a2 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    415c:	85 30       	cpi	r24, 0x05	; 5
    415e:	21 f4       	brne	.+8      	; 0x4168 <nrk_ext_int_disable+0x3c>
    4160:	80 91 6b 00 	lds	r24, 0x006B
    4164:	8b 7f       	andi	r24, 0xFB	; 251
    4166:	1d c0       	rjmp	.+58     	; 0x41a2 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    4168:	86 30       	cpi	r24, 0x06	; 6
    416a:	21 f4       	brne	.+8      	; 0x4174 <nrk_ext_int_disable+0x48>
    416c:	80 91 6b 00 	lds	r24, 0x006B
    4170:	87 7f       	andi	r24, 0xF7	; 247
    4172:	17 c0       	rjmp	.+46     	; 0x41a2 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    4174:	87 30       	cpi	r24, 0x07	; 7
    4176:	21 f4       	brne	.+8      	; 0x4180 <nrk_ext_int_disable+0x54>
    4178:	80 91 6b 00 	lds	r24, 0x006B
    417c:	8f 7e       	andi	r24, 0xEF	; 239
    417e:	11 c0       	rjmp	.+34     	; 0x41a2 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    4180:	88 30       	cpi	r24, 0x08	; 8
    4182:	21 f4       	brne	.+8      	; 0x418c <nrk_ext_int_disable+0x60>
    4184:	80 91 6b 00 	lds	r24, 0x006B
    4188:	8f 7d       	andi	r24, 0xDF	; 223
    418a:	0b c0       	rjmp	.+22     	; 0x41a2 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    418c:	89 30       	cpi	r24, 0x09	; 9
    418e:	21 f4       	brne	.+8      	; 0x4198 <nrk_ext_int_disable+0x6c>
    4190:	80 91 6b 00 	lds	r24, 0x006B
    4194:	8f 7b       	andi	r24, 0xBF	; 191
    4196:	05 c0       	rjmp	.+10     	; 0x41a2 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    4198:	8a 30       	cpi	r24, 0x0A	; 10
    419a:	39 f4       	brne	.+14     	; 0x41aa <nrk_ext_int_disable+0x7e>
    419c:	80 91 6b 00 	lds	r24, 0x006B
    41a0:	8f 77       	andi	r24, 0x7F	; 127
    41a2:	80 93 6b 00 	sts	0x006B, r24
    41a6:	81 e0       	ldi	r24, 0x01	; 1
    41a8:	08 95       	ret
return NRK_ERROR;
    41aa:	8f ef       	ldi	r24, 0xFF	; 255
}
    41ac:	08 95       	ret

000041ae <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    41ae:	81 11       	cpse	r24, r1
    41b0:	26 c0       	rjmp	.+76     	; 0x41fe <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    41b2:	50 93 95 06 	sts	0x0695, r21
    41b6:	40 93 94 06 	sts	0x0694, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    41ba:	61 11       	cpse	r22, r1
    41bc:	04 c0       	rjmp	.+8      	; 0x41c6 <nrk_ext_int_configure+0x18>
    41be:	80 91 69 00 	lds	r24, 0x0069
    41c2:	8c 7f       	andi	r24, 0xFC	; 252
    41c4:	3d c0       	rjmp	.+122    	; 0x4240 <__stack+0x41>
	if(mode==NRK_LEVEL_TRIGGER) 
    41c6:	61 30       	cpi	r22, 0x01	; 1
    41c8:	49 f4       	brne	.+18     	; 0x41dc <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    41ca:	80 91 69 00 	lds	r24, 0x0069
    41ce:	8d 7f       	andi	r24, 0xFD	; 253
    41d0:	80 93 69 00 	sts	0x0069, r24
    41d4:	80 91 69 00 	lds	r24, 0x0069
    41d8:	81 60       	ori	r24, 0x01	; 1
    41da:	32 c0       	rjmp	.+100    	; 0x4240 <__stack+0x41>
	if(mode==NRK_FALLING_EDGE) 
    41dc:	62 30       	cpi	r22, 0x02	; 2
    41de:	49 f4       	brne	.+18     	; 0x41f2 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    41e0:	80 91 69 00 	lds	r24, 0x0069
    41e4:	82 60       	ori	r24, 0x02	; 2
    41e6:	80 93 69 00 	sts	0x0069, r24
    41ea:	80 91 69 00 	lds	r24, 0x0069
    41ee:	8e 7f       	andi	r24, 0xFE	; 254
    41f0:	27 c0       	rjmp	.+78     	; 0x4240 <__stack+0x41>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    41f2:	63 30       	cpi	r22, 0x03	; 3
    41f4:	39 f5       	brne	.+78     	; 0x4244 <__stack+0x45>
    41f6:	80 91 69 00 	lds	r24, 0x0069
    41fa:	83 60       	ori	r24, 0x03	; 3
    41fc:	21 c0       	rjmp	.+66     	; 0x4240 <__stack+0x41>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    41fe:	81 30       	cpi	r24, 0x01	; 1
    4200:	49 f5       	brne	.+82     	; 0x4254 <__stack+0x55>
	{
	ext_int1_callback=callback_func;
    4202:	50 93 93 06 	sts	0x0693, r21
    4206:	40 93 92 06 	sts	0x0692, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    420a:	61 11       	cpse	r22, r1
    420c:	04 c0       	rjmp	.+8      	; 0x4216 <__stack+0x17>
    420e:	80 91 69 00 	lds	r24, 0x0069
    4212:	83 7f       	andi	r24, 0xF3	; 243
    4214:	15 c0       	rjmp	.+42     	; 0x4240 <__stack+0x41>
	if(mode==NRK_LEVEL_TRIGGER) 
    4216:	61 30       	cpi	r22, 0x01	; 1
    4218:	49 f4       	brne	.+18     	; 0x422c <__stack+0x2d>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    421a:	80 91 69 00 	lds	r24, 0x0069
    421e:	87 7f       	andi	r24, 0xF7	; 247
    4220:	80 93 69 00 	sts	0x0069, r24
    4224:	80 91 69 00 	lds	r24, 0x0069
    4228:	84 60       	ori	r24, 0x04	; 4
    422a:	0a c0       	rjmp	.+20     	; 0x4240 <__stack+0x41>
	if(mode==NRK_FALLING_EDGE) 
    422c:	62 30       	cpi	r22, 0x02	; 2
    422e:	61 f4       	brne	.+24     	; 0x4248 <__stack+0x49>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    4230:	80 91 69 00 	lds	r24, 0x0069
    4234:	88 60       	ori	r24, 0x08	; 8
    4236:	80 93 69 00 	sts	0x0069, r24
    423a:	80 91 69 00 	lds	r24, 0x0069
    423e:	8b 7f       	andi	r24, 0xFB	; 251
    4240:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    4244:	81 e0       	ldi	r24, 0x01	; 1
    4246:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    4248:	63 30       	cpi	r22, 0x03	; 3
    424a:	e1 f7       	brne	.-8      	; 0x4244 <__stack+0x45>
    424c:	80 91 69 00 	lds	r24, 0x0069
    4250:	8c 60       	ori	r24, 0x0C	; 12
    4252:	f6 cf       	rjmp	.-20     	; 0x4240 <__stack+0x41>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    4254:	82 30       	cpi	r24, 0x02	; 2
    4256:	31 f5       	brne	.+76     	; 0x42a4 <__stack+0xa5>
	{
	ext_int2_callback=callback_func;
    4258:	50 93 97 06 	sts	0x0697, r21
    425c:	40 93 96 06 	sts	0x0696, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    4260:	61 11       	cpse	r22, r1
    4262:	04 c0       	rjmp	.+8      	; 0x426c <__stack+0x6d>
    4264:	80 91 69 00 	lds	r24, 0x0069
    4268:	8f 7c       	andi	r24, 0xCF	; 207
    426a:	ea cf       	rjmp	.-44     	; 0x4240 <__stack+0x41>
	if(mode==NRK_LEVEL_TRIGGER) 
    426c:	61 30       	cpi	r22, 0x01	; 1
    426e:	49 f4       	brne	.+18     	; 0x4282 <__stack+0x83>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    4270:	80 91 69 00 	lds	r24, 0x0069
    4274:	8f 7d       	andi	r24, 0xDF	; 223
    4276:	80 93 69 00 	sts	0x0069, r24
    427a:	80 91 69 00 	lds	r24, 0x0069
    427e:	80 61       	ori	r24, 0x10	; 16
    4280:	df cf       	rjmp	.-66     	; 0x4240 <__stack+0x41>
	if(mode==NRK_FALLING_EDGE) 
    4282:	62 30       	cpi	r22, 0x02	; 2
    4284:	49 f4       	brne	.+18     	; 0x4298 <__stack+0x99>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    4286:	80 91 69 00 	lds	r24, 0x0069
    428a:	80 62       	ori	r24, 0x20	; 32
    428c:	80 93 69 00 	sts	0x0069, r24
    4290:	80 91 69 00 	lds	r24, 0x0069
    4294:	8f 7e       	andi	r24, 0xEF	; 239
    4296:	d4 cf       	rjmp	.-88     	; 0x4240 <__stack+0x41>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    4298:	63 30       	cpi	r22, 0x03	; 3
    429a:	a1 f6       	brne	.-88     	; 0x4244 <__stack+0x45>
    429c:	80 91 69 00 	lds	r24, 0x0069
    42a0:	80 63       	ori	r24, 0x30	; 48
    42a2:	ce cf       	rjmp	.-100    	; 0x4240 <__stack+0x41>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    42a4:	83 50       	subi	r24, 0x03	; 3
    42a6:	88 30       	cpi	r24, 0x08	; 8
    42a8:	50 f4       	brcc	.+20     	; 0x42be <__stack+0xbf>
	PCICR |= BM(PCIE0);	
    42aa:	80 91 68 00 	lds	r24, 0x0068
    42ae:	81 60       	ori	r24, 0x01	; 1
    42b0:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    42b4:	50 93 99 06 	sts	0x0699, r21
    42b8:	40 93 98 06 	sts	0x0698, r20
    42bc:	c3 cf       	rjmp	.-122    	; 0x4244 <__stack+0x45>
	return NRK_OK;
	}
return NRK_ERROR;
    42be:	8f ef       	ldi	r24, 0xFF	; 255
}
    42c0:	08 95       	ret

000042c2 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    42c2:	1f 92       	push	r1
    42c4:	0f 92       	push	r0
    42c6:	0f b6       	in	r0, 0x3f	; 63
    42c8:	0f 92       	push	r0
    42ca:	11 24       	eor	r1, r1
    42cc:	0b b6       	in	r0, 0x3b	; 59
    42ce:	0f 92       	push	r0
    42d0:	2f 93       	push	r18
    42d2:	3f 93       	push	r19
    42d4:	4f 93       	push	r20
    42d6:	5f 93       	push	r21
    42d8:	6f 93       	push	r22
    42da:	7f 93       	push	r23
    42dc:	8f 93       	push	r24
    42de:	9f 93       	push	r25
    42e0:	af 93       	push	r26
    42e2:	bf 93       	push	r27
    42e4:	ef 93       	push	r30
    42e6:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    42e8:	e0 91 98 06 	lds	r30, 0x0698
    42ec:	f0 91 99 06 	lds	r31, 0x0699
    42f0:	30 97       	sbiw	r30, 0x00	; 0
    42f2:	11 f0       	breq	.+4      	; 0x42f8 <__vector_9+0x36>
    42f4:	09 95       	icall
    42f6:	04 c0       	rjmp	.+8      	; 0x4300 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    42f8:	60 e0       	ldi	r22, 0x00	; 0
    42fa:	8a e0       	ldi	r24, 0x0A	; 10
    42fc:	0e 94 5f 10 	call	0x20be	; 0x20be <nrk_kernel_error_add>
	return;  	
}
    4300:	ff 91       	pop	r31
    4302:	ef 91       	pop	r30
    4304:	bf 91       	pop	r27
    4306:	af 91       	pop	r26
    4308:	9f 91       	pop	r25
    430a:	8f 91       	pop	r24
    430c:	7f 91       	pop	r23
    430e:	6f 91       	pop	r22
    4310:	5f 91       	pop	r21
    4312:	4f 91       	pop	r20
    4314:	3f 91       	pop	r19
    4316:	2f 91       	pop	r18
    4318:	0f 90       	pop	r0
    431a:	0b be       	out	0x3b, r0	; 59
    431c:	0f 90       	pop	r0
    431e:	0f be       	out	0x3f, r0	; 63
    4320:	0f 90       	pop	r0
    4322:	1f 90       	pop	r1
    4324:	18 95       	reti

00004326 <__vector_1>:


SIGNAL(INT0_vect) {
    4326:	1f 92       	push	r1
    4328:	0f 92       	push	r0
    432a:	0f b6       	in	r0, 0x3f	; 63
    432c:	0f 92       	push	r0
    432e:	11 24       	eor	r1, r1
    4330:	0b b6       	in	r0, 0x3b	; 59
    4332:	0f 92       	push	r0
    4334:	2f 93       	push	r18
    4336:	3f 93       	push	r19
    4338:	4f 93       	push	r20
    433a:	5f 93       	push	r21
    433c:	6f 93       	push	r22
    433e:	7f 93       	push	r23
    4340:	8f 93       	push	r24
    4342:	9f 93       	push	r25
    4344:	af 93       	push	r26
    4346:	bf 93       	push	r27
    4348:	ef 93       	push	r30
    434a:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    434c:	e0 91 94 06 	lds	r30, 0x0694
    4350:	f0 91 95 06 	lds	r31, 0x0695
    4354:	30 97       	sbiw	r30, 0x00	; 0
    4356:	11 f0       	breq	.+4      	; 0x435c <__vector_1+0x36>
    4358:	09 95       	icall
    435a:	04 c0       	rjmp	.+8      	; 0x4364 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    435c:	60 e0       	ldi	r22, 0x00	; 0
    435e:	8a e0       	ldi	r24, 0x0A	; 10
    4360:	0e 94 5f 10 	call	0x20be	; 0x20be <nrk_kernel_error_add>
	return;  	
}
    4364:	ff 91       	pop	r31
    4366:	ef 91       	pop	r30
    4368:	bf 91       	pop	r27
    436a:	af 91       	pop	r26
    436c:	9f 91       	pop	r25
    436e:	8f 91       	pop	r24
    4370:	7f 91       	pop	r23
    4372:	6f 91       	pop	r22
    4374:	5f 91       	pop	r21
    4376:	4f 91       	pop	r20
    4378:	3f 91       	pop	r19
    437a:	2f 91       	pop	r18
    437c:	0f 90       	pop	r0
    437e:	0b be       	out	0x3b, r0	; 59
    4380:	0f 90       	pop	r0
    4382:	0f be       	out	0x3f, r0	; 63
    4384:	0f 90       	pop	r0
    4386:	1f 90       	pop	r1
    4388:	18 95       	reti

0000438a <__vector_2>:

SIGNAL(INT1_vect) {
    438a:	1f 92       	push	r1
    438c:	0f 92       	push	r0
    438e:	0f b6       	in	r0, 0x3f	; 63
    4390:	0f 92       	push	r0
    4392:	11 24       	eor	r1, r1
    4394:	0b b6       	in	r0, 0x3b	; 59
    4396:	0f 92       	push	r0
    4398:	2f 93       	push	r18
    439a:	3f 93       	push	r19
    439c:	4f 93       	push	r20
    439e:	5f 93       	push	r21
    43a0:	6f 93       	push	r22
    43a2:	7f 93       	push	r23
    43a4:	8f 93       	push	r24
    43a6:	9f 93       	push	r25
    43a8:	af 93       	push	r26
    43aa:	bf 93       	push	r27
    43ac:	ef 93       	push	r30
    43ae:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    43b0:	e0 91 92 06 	lds	r30, 0x0692
    43b4:	f0 91 93 06 	lds	r31, 0x0693
    43b8:	30 97       	sbiw	r30, 0x00	; 0
    43ba:	11 f0       	breq	.+4      	; 0x43c0 <__vector_2+0x36>
    43bc:	09 95       	icall
    43be:	04 c0       	rjmp	.+8      	; 0x43c8 <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    43c0:	60 e0       	ldi	r22, 0x00	; 0
    43c2:	8a e0       	ldi	r24, 0x0A	; 10
    43c4:	0e 94 5f 10 	call	0x20be	; 0x20be <nrk_kernel_error_add>
	return;  	
}
    43c8:	ff 91       	pop	r31
    43ca:	ef 91       	pop	r30
    43cc:	bf 91       	pop	r27
    43ce:	af 91       	pop	r26
    43d0:	9f 91       	pop	r25
    43d2:	8f 91       	pop	r24
    43d4:	7f 91       	pop	r23
    43d6:	6f 91       	pop	r22
    43d8:	5f 91       	pop	r21
    43da:	4f 91       	pop	r20
    43dc:	3f 91       	pop	r19
    43de:	2f 91       	pop	r18
    43e0:	0f 90       	pop	r0
    43e2:	0b be       	out	0x3b, r0	; 59
    43e4:	0f 90       	pop	r0
    43e6:	0f be       	out	0x3f, r0	; 63
    43e8:	0f 90       	pop	r0
    43ea:	1f 90       	pop	r1
    43ec:	18 95       	reti

000043ee <__vector_3>:

SIGNAL(INT2_vect) {
    43ee:	1f 92       	push	r1
    43f0:	0f 92       	push	r0
    43f2:	0f b6       	in	r0, 0x3f	; 63
    43f4:	0f 92       	push	r0
    43f6:	11 24       	eor	r1, r1
    43f8:	0b b6       	in	r0, 0x3b	; 59
    43fa:	0f 92       	push	r0
    43fc:	2f 93       	push	r18
    43fe:	3f 93       	push	r19
    4400:	4f 93       	push	r20
    4402:	5f 93       	push	r21
    4404:	6f 93       	push	r22
    4406:	7f 93       	push	r23
    4408:	8f 93       	push	r24
    440a:	9f 93       	push	r25
    440c:	af 93       	push	r26
    440e:	bf 93       	push	r27
    4410:	ef 93       	push	r30
    4412:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    4414:	e0 91 96 06 	lds	r30, 0x0696
    4418:	f0 91 97 06 	lds	r31, 0x0697
    441c:	30 97       	sbiw	r30, 0x00	; 0
    441e:	11 f0       	breq	.+4      	; 0x4424 <__vector_3+0x36>
    4420:	09 95       	icall
    4422:	04 c0       	rjmp	.+8      	; 0x442c <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4424:	60 e0       	ldi	r22, 0x00	; 0
    4426:	8a e0       	ldi	r24, 0x0A	; 10
    4428:	0e 94 5f 10 	call	0x20be	; 0x20be <nrk_kernel_error_add>
	return;  	
}
    442c:	ff 91       	pop	r31
    442e:	ef 91       	pop	r30
    4430:	bf 91       	pop	r27
    4432:	af 91       	pop	r26
    4434:	9f 91       	pop	r25
    4436:	8f 91       	pop	r24
    4438:	7f 91       	pop	r23
    443a:	6f 91       	pop	r22
    443c:	5f 91       	pop	r21
    443e:	4f 91       	pop	r20
    4440:	3f 91       	pop	r19
    4442:	2f 91       	pop	r18
    4444:	0f 90       	pop	r0
    4446:	0b be       	out	0x3b, r0	; 59
    4448:	0f 90       	pop	r0
    444a:	0f be       	out	0x3f, r0	; 63
    444c:	0f 90       	pop	r0
    444e:	1f 90       	pop	r1
    4450:	18 95       	reti

00004452 <nrk_watchdog_disable>:
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4452:	a8 95       	wdr
#include <util/atomic.h>

void nrk_watchdog_disable()
{
nrk_watchdog_reset();
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4454:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4456:	f8 94       	cli
{
	MCUSR &= ~(1<<WDRF);
    4458:	84 b7       	in	r24, 0x34	; 52
    445a:	87 7f       	andi	r24, 0xF7	; 247
    445c:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE) | (1<<WDE);
    445e:	e0 e6       	ldi	r30, 0x60	; 96
    4460:	f0 e0       	ldi	r31, 0x00	; 0
    4462:	80 81       	ld	r24, Z
    4464:	88 61       	ori	r24, 0x18	; 24
    4466:	80 83       	st	Z, r24
	WDTCSR = 0;
    4468:	10 82       	st	Z, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    446a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    446c:	08 95       	ret

0000446e <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    446e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4470:	f8 94       	cli
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4472:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
{
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4474:	84 b7       	in	r24, 0x34	; 52
    4476:	87 7f       	andi	r24, 0xF7	; 247
    4478:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    447a:	e0 e6       	ldi	r30, 0x60	; 96
    447c:	f0 e0       	ldi	r31, 0x00	; 0
    447e:	80 81       	ld	r24, Z
    4480:	88 61       	ori	r24, 0x18	; 24
    4482:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    4484:	8d e0       	ldi	r24, 0x0D	; 13
    4486:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4488:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    448a:	08 95       	ret

0000448c <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    448c:	04 b6       	in	r0, 0x34	; 52
    448e:	03 fe       	sbrs	r0, 3
    4490:	02 c0       	rjmp	.+4      	; 0x4496 <nrk_watchdog_check+0xa>
return NRK_ERROR;
    4492:	8f ef       	ldi	r24, 0xFF	; 255
    4494:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4496:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    4498:	08 95       	ret

0000449a <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    449a:	a8 95       	wdr
    449c:	08 95       	ret

0000449e <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    449e:	08 95       	ret

000044a0 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    44a0:	83 b7       	in	r24, 0x33	; 51
    44a2:	81 7f       	andi	r24, 0xF1	; 241
    44a4:	86 60       	ori	r24, 0x06	; 6
    44a6:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    44a8:	83 b7       	in	r24, 0x33	; 51
    44aa:	81 60       	ori	r24, 0x01	; 1
    44ac:	83 bf       	out	0x33, r24	; 51
    44ae:	88 95       	sleep
    44b0:	83 b7       	in	r24, 0x33	; 51
    44b2:	8e 7f       	andi	r24, 0xFE	; 254
    44b4:	83 bf       	out	0x33, r24	; 51
    44b6:	08 95       	ret

000044b8 <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    44b8:	83 b7       	in	r24, 0x33	; 51
    44ba:	81 7f       	andi	r24, 0xF1	; 241
    44bc:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    44be:	83 b7       	in	r24, 0x33	; 51
    44c0:	81 60       	ori	r24, 0x01	; 1
    44c2:	83 bf       	out	0x33, r24	; 51
    44c4:	88 95       	sleep
    44c6:	83 b7       	in	r24, 0x33	; 51
    44c8:	8e 7f       	andi	r24, 0xFE	; 254
    44ca:	83 bf       	out	0x33, r24	; 51
    44cc:	08 95       	ret

000044ce <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    44ce:	fc 01       	movw	r30, r24
    44d0:	76 83       	std	Z+6, r23	; 0x06
    44d2:	65 83       	std	Z+5, r22	; 0x05
    44d4:	08 95       	ret

000044d6 <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    44d6:	ef 92       	push	r14
    44d8:	ff 92       	push	r15
    44da:	0f 93       	push	r16
    44dc:	1f 93       	push	r17
    44de:	cf 93       	push	r28
    44e0:	df 93       	push	r29
    44e2:	8c 01       	movw	r16, r24
    44e4:	7b 01       	movw	r14, r22
    44e6:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    44e8:	40 32       	cpi	r20, 0x20	; 32
    44ea:	51 05       	cpc	r21, r1
    44ec:	18 f4       	brcc	.+6      	; 0x44f4 <nrk_task_set_stk+0x1e>
    44ee:	81 e1       	ldi	r24, 0x11	; 17
    44f0:	0e 94 51 10 	call	0x20a2	; 0x20a2 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    44f4:	21 97       	sbiw	r28, 0x01	; 1
    44f6:	ce 0d       	add	r28, r14
    44f8:	df 1d       	adc	r29, r15
    44fa:	f8 01       	movw	r30, r16
    44fc:	d2 83       	std	Z+2, r29	; 0x02
    44fe:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    4500:	f4 82       	std	Z+4, r15	; 0x04
    4502:	e3 82       	std	Z+3, r14	; 0x03

}
    4504:	df 91       	pop	r29
    4506:	cf 91       	pop	r28
    4508:	1f 91       	pop	r17
    450a:	0f 91       	pop	r16
    450c:	ff 90       	pop	r15
    450e:	ef 90       	pop	r14
    4510:	08 95       	ret

00004512 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    4512:	25 e5       	ldi	r18, 0x55	; 85
    4514:	fa 01       	movw	r30, r20
    4516:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    4518:	fb 01       	movw	r30, r22
    451a:	32 97       	sbiw	r30, 0x02	; 2
    451c:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    451e:	31 96       	adiw	r30, 0x01	; 1
    4520:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    4522:	33 97       	sbiw	r30, 0x03	; 3
    4524:	11 82       	std	Z+1, r1	; 0x01
    4526:	10 82       	st	Z, r1
    *(--stk) = 0;       
    4528:	32 97       	sbiw	r30, 0x02	; 2
    452a:	11 82       	std	Z+1, r1	; 0x01
    452c:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    452e:	32 97       	sbiw	r30, 0x02	; 2
    4530:	11 82       	std	Z+1, r1	; 0x01
    4532:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    4534:	32 97       	sbiw	r30, 0x02	; 2
    4536:	11 82       	std	Z+1, r1	; 0x01
    4538:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    453a:	32 97       	sbiw	r30, 0x02	; 2
    453c:	11 82       	std	Z+1, r1	; 0x01
    453e:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    4540:	32 97       	sbiw	r30, 0x02	; 2
    4542:	11 82       	std	Z+1, r1	; 0x01
    4544:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    4546:	32 97       	sbiw	r30, 0x02	; 2
    4548:	11 82       	std	Z+1, r1	; 0x01
    454a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    454c:	32 97       	sbiw	r30, 0x02	; 2
    454e:	11 82       	std	Z+1, r1	; 0x01
    4550:	10 82       	st	Z, r1

    *(--stk) = 0; 
    4552:	32 97       	sbiw	r30, 0x02	; 2
    4554:	11 82       	std	Z+1, r1	; 0x01
    4556:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4558:	32 97       	sbiw	r30, 0x02	; 2
    455a:	11 82       	std	Z+1, r1	; 0x01
    455c:	10 82       	st	Z, r1
    *(--stk) = 0; 
    455e:	32 97       	sbiw	r30, 0x02	; 2
    4560:	11 82       	std	Z+1, r1	; 0x01
    4562:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4564:	32 97       	sbiw	r30, 0x02	; 2
    4566:	11 82       	std	Z+1, r1	; 0x01
    4568:	10 82       	st	Z, r1
    *(--stk) = 0; 
    456a:	32 97       	sbiw	r30, 0x02	; 2
    456c:	11 82       	std	Z+1, r1	; 0x01
    456e:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4570:	32 97       	sbiw	r30, 0x02	; 2
    4572:	11 82       	std	Z+1, r1	; 0x01
    4574:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4576:	32 97       	sbiw	r30, 0x02	; 2
    4578:	11 82       	std	Z+1, r1	; 0x01
    457a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    457c:	32 97       	sbiw	r30, 0x02	; 2
    457e:	11 82       	std	Z+1, r1	; 0x01
    4580:	10 82       	st	Z, r1
    *(--stk) = 0;
    4582:	cb 01       	movw	r24, r22
    4584:	84 97       	sbiw	r24, 0x24	; 36
    4586:	fc 01       	movw	r30, r24
    4588:	11 82       	std	Z+1, r1	; 0x01
    458a:	10 82       	st	Z, r1


    return ((void *)stk);
}
    458c:	08 95       	ret

0000458e <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    458e:	85 e5       	ldi	r24, 0x55	; 85
    4590:	80 93 fe 3f 	sts	0x3FFE, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    4594:	ee ef       	ldi	r30, 0xFE	; 254
    4596:	f1 e4       	ldi	r31, 0x41	; 65
    4598:	f0 93 ba 03 	sts	0x03BA, r31
    459c:	e0 93 b9 03 	sts	0x03B9, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    45a0:	8f e6       	ldi	r24, 0x6F	; 111
    45a2:	9e e0       	ldi	r25, 0x0E	; 14
    45a4:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    45a6:	80 93 ff 41 	sts	0x41FF, r24
    45aa:	08 95       	ret

000045ac <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    45ac:	8f e6       	ldi	r24, 0x6F	; 111
    45ae:	9e e0       	ldi	r25, 0x0E	; 14
    45b0:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    45b4:	80 93 ff 41 	sts	0x41FF, r24
    45b8:	08 95       	ret

000045ba <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    45ba:	0e 94 0a 1f 	call	0x3e14	; 0x3e14 <_nrk_setup_timer>
  nrk_int_enable();  
    45be:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <nrk_int_enable>

000045c2 <nrk_start_high_ready_task>:
    45c2:	a0 91 fd 05 	lds	r26, 0x05FD
    45c6:	b0 91 fe 05 	lds	r27, 0x05FE
    45ca:	cd 91       	ld	r28, X+
    45cc:	cd bf       	out	0x3d, r28	; 61
    45ce:	dd 91       	ld	r29, X+
    45d0:	de bf       	out	0x3e, r29	; 62
    45d2:	ff 91       	pop	r31
    45d4:	ef 91       	pop	r30
    45d6:	df 91       	pop	r29
    45d8:	cf 91       	pop	r28
    45da:	bf 91       	pop	r27
    45dc:	af 91       	pop	r26
    45de:	9f 91       	pop	r25
    45e0:	8f 91       	pop	r24
    45e2:	7f 91       	pop	r23
    45e4:	6f 91       	pop	r22
    45e6:	5f 91       	pop	r21
    45e8:	4f 91       	pop	r20
    45ea:	3f 91       	pop	r19
    45ec:	2f 91       	pop	r18
    45ee:	1f 91       	pop	r17
    45f0:	0f 91       	pop	r16
    45f2:	ff 90       	pop	r15
    45f4:	ef 90       	pop	r14
    45f6:	df 90       	pop	r13
    45f8:	cf 90       	pop	r12
    45fa:	bf 90       	pop	r11
    45fc:	af 90       	pop	r10
    45fe:	9f 90       	pop	r9
    4600:	8f 90       	pop	r8
    4602:	7f 90       	pop	r7
    4604:	6f 90       	pop	r6
    4606:	5f 90       	pop	r5
    4608:	4f 90       	pop	r4
    460a:	3f 90       	pop	r3
    460c:	2f 90       	pop	r2
    460e:	1f 90       	pop	r1
    4610:	0f 90       	pop	r0
    4612:	0f be       	out	0x3f, r0	; 63
    4614:	0f 90       	pop	r0
    4616:	18 95       	reti

00004618 <main>:

char buf[100];

void main(){
	
	nrk_setup_ports();
    4618:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <nrk_setup_ports>
	nrk_setup_uart(UART_BAUDRATE_115K2);
    461c:	80 e1       	ldi	r24, 0x10	; 16
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <nrk_setup_uart>
	nrk_init();
    4624:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <nrk_init>
	pRRI.pPayload = buf;
    4628:	8b eb       	ldi	r24, 0xBB	; 187
    462a:	93 e0       	ldi	r25, 0x03	; 3
    462c:	90 93 27 04 	sts	0x0427, r25
    4630:	80 93 26 04 	sts	0x0426, r24
	pRRI.ackRequest = 0;
    4634:	10 92 28 04 	sts	0x0428, r1
	pRRI.max_length = 100;
    4638:	84 e6       	ldi	r24, 0x64	; 100
    463a:	80 93 25 04 	sts	0x0425, r24
	rf_power_up();
    463e:	0e 94 6d 02 	call	0x4da	; 0x4da <rf_power_up>
	rf_init(&pRRI, 13, 0xFFFF, 0x0);
    4642:	20 e0       	ldi	r18, 0x00	; 0
    4644:	30 e0       	ldi	r19, 0x00	; 0
    4646:	4f ef       	ldi	r20, 0xFF	; 255
    4648:	5f ef       	ldi	r21, 0xFF	; 255
    464a:	6d e0       	ldi	r22, 0x0D	; 13
    464c:	81 e2       	ldi	r24, 0x21	; 33
    464e:	94 e0       	ldi	r25, 0x04	; 4
    4650:	0e 94 c8 02 	call	0x590	; 0x590 <rf_init>
	send_pkt.length = 8;
    4654:	88 e0       	ldi	r24, 0x08	; 8
    4656:	80 93 b4 03 	sts	0x03B4, r24
	send_pkt.pPayload = tx_buf;
    465a:	80 91 00 02 	lds	r24, 0x0200
    465e:	90 91 01 02 	lds	r25, 0x0201
    4662:	90 93 b6 03 	sts	0x03B6, r25
    4666:	80 93 b5 03 	sts	0x03B5, r24
	send_pkt.cca = 0;
    466a:	10 92 b7 03 	sts	0x03B7, r1
	send_pkt.destAddr = 0;
    466e:	10 92 b3 03 	sts	0x03B3, r1
    4672:	10 92 b2 03 	sts	0x03B2, r1
	send_pkt.ackRequest = 0;
    4676:	10 92 b8 03 	sts	0x03B8, r1
	while (1){
		nrk_led_toggle(GREEN_LED);
    467a:	81 e0       	ldi	r24, 0x01	; 1
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <nrk_led_toggle>
		rf_tx_packet(&send_pkt);
    4682:	82 eb       	ldi	r24, 0xB2	; 178
    4684:	93 e0       	ldi	r25, 0x03	; 3
    4686:	0e 94 44 03 	call	0x688	; 0x688 <rf_tx_packet>
    468a:	c4 e1       	ldi	r28, 0x14	; 20
    468c:	d0 e0       	ldi	r29, 0x00	; 0
		
		int i;
		for (i=0; i<20; i++){
			nrk_spin_wait_us(50000);
    468e:	80 e5       	ldi	r24, 0x50	; 80
    4690:	93 ec       	ldi	r25, 0xC3	; 195
    4692:	0e 94 65 1e 	call	0x3cca	; 0x3cca <nrk_spin_wait_us>
    4696:	21 97       	sbiw	r28, 0x01	; 1
	while (1){
		nrk_led_toggle(GREEN_LED);
		rf_tx_packet(&send_pkt);
		
		int i;
		for (i=0; i<20; i++){
    4698:	d1 f7       	brne	.-12     	; 0x468e <main+0x76>
    469a:	ef cf       	rjmp	.-34     	; 0x467a <main+0x62>

0000469c <vfprintf>:
    469c:	6f 92       	push	r6
    469e:	7f 92       	push	r7
    46a0:	8f 92       	push	r8
    46a2:	9f 92       	push	r9
    46a4:	af 92       	push	r10
    46a6:	bf 92       	push	r11
    46a8:	cf 92       	push	r12
    46aa:	df 92       	push	r13
    46ac:	ef 92       	push	r14
    46ae:	ff 92       	push	r15
    46b0:	0f 93       	push	r16
    46b2:	1f 93       	push	r17
    46b4:	cf 93       	push	r28
    46b6:	df 93       	push	r29
    46b8:	cd b7       	in	r28, 0x3d	; 61
    46ba:	de b7       	in	r29, 0x3e	; 62
    46bc:	2c 97       	sbiw	r28, 0x0c	; 12
    46be:	0f b6       	in	r0, 0x3f	; 63
    46c0:	f8 94       	cli
    46c2:	de bf       	out	0x3e, r29	; 62
    46c4:	0f be       	out	0x3f, r0	; 63
    46c6:	cd bf       	out	0x3d, r28	; 61
    46c8:	6c 01       	movw	r12, r24
    46ca:	5b 01       	movw	r10, r22
    46cc:	7a 01       	movw	r14, r20
    46ce:	fc 01       	movw	r30, r24
    46d0:	17 82       	std	Z+7, r1	; 0x07
    46d2:	16 82       	std	Z+6, r1	; 0x06
    46d4:	83 81       	ldd	r24, Z+3	; 0x03
    46d6:	81 ff       	sbrs	r24, 1
    46d8:	0e c1       	rjmp	.+540    	; 0x48f6 <vfprintf+0x25a>
    46da:	ce 01       	movw	r24, r28
    46dc:	01 96       	adiw	r24, 0x01	; 1
    46de:	4c 01       	movw	r8, r24
    46e0:	f6 01       	movw	r30, r12
    46e2:	03 81       	ldd	r16, Z+3	; 0x03
    46e4:	f5 01       	movw	r30, r10
    46e6:	03 fd       	sbrc	r16, 3
    46e8:	15 91       	lpm	r17, Z+
    46ea:	03 ff       	sbrs	r16, 3
    46ec:	11 91       	ld	r17, Z+
    46ee:	5f 01       	movw	r10, r30
    46f0:	11 23       	and	r17, r17
    46f2:	09 f4       	brne	.+2      	; 0x46f6 <vfprintf+0x5a>
    46f4:	fc c0       	rjmp	.+504    	; 0x48ee <vfprintf+0x252>
    46f6:	15 32       	cpi	r17, 0x25	; 37
    46f8:	49 f4       	brne	.+18     	; 0x470c <vfprintf+0x70>
    46fa:	03 fd       	sbrc	r16, 3
    46fc:	15 91       	lpm	r17, Z+
    46fe:	03 ff       	sbrs	r16, 3
    4700:	11 91       	ld	r17, Z+
    4702:	5f 01       	movw	r10, r30
    4704:	15 32       	cpi	r17, 0x25	; 37
    4706:	11 f0       	breq	.+4      	; 0x470c <vfprintf+0x70>
    4708:	20 e0       	ldi	r18, 0x00	; 0
    470a:	1b c0       	rjmp	.+54     	; 0x4742 <vfprintf+0xa6>
    470c:	b6 01       	movw	r22, r12
    470e:	81 2f       	mov	r24, r17
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <fputc>
    4716:	37 01       	movw	r6, r14
    4718:	73 01       	movw	r14, r6
    471a:	e2 cf       	rjmp	.-60     	; 0x46e0 <vfprintf+0x44>
    471c:	11 23       	and	r17, r17
    471e:	09 f4       	brne	.+2      	; 0x4722 <vfprintf+0x86>
    4720:	e6 c0       	rjmp	.+460    	; 0x48ee <vfprintf+0x252>
    4722:	61 2f       	mov	r22, r17
    4724:	70 e0       	ldi	r23, 0x00	; 0
    4726:	87 e1       	ldi	r24, 0x17	; 23
    4728:	94 e0       	ldi	r25, 0x04	; 4
    472a:	2c 87       	std	Y+12, r18	; 0x0c
    472c:	0e 94 49 25 	call	0x4a92	; 0x4a92 <strchr_P>
    4730:	2c 85       	ldd	r18, Y+12	; 0x0c
    4732:	89 2b       	or	r24, r25
    4734:	49 f0       	breq	.+18     	; 0x4748 <vfprintf+0xac>
    4736:	f5 01       	movw	r30, r10
    4738:	03 fd       	sbrc	r16, 3
    473a:	15 91       	lpm	r17, Z+
    473c:	03 ff       	sbrs	r16, 3
    473e:	11 91       	ld	r17, Z+
    4740:	5f 01       	movw	r10, r30
    4742:	27 ff       	sbrs	r18, 7
    4744:	eb cf       	rjmp	.-42     	; 0x471c <vfprintf+0x80>
    4746:	09 c0       	rjmp	.+18     	; 0x475a <vfprintf+0xbe>
    4748:	13 32       	cpi	r17, 0x23	; 35
    474a:	29 f0       	breq	.+10     	; 0x4756 <vfprintf+0xba>
    474c:	1c 36       	cpi	r17, 0x6C	; 108
    474e:	09 f0       	breq	.+2      	; 0x4752 <vfprintf+0xb6>
    4750:	d5 c0       	rjmp	.+426    	; 0x48fc <vfprintf+0x260>
    4752:	20 68       	ori	r18, 0x80	; 128
    4754:	f0 cf       	rjmp	.-32     	; 0x4736 <vfprintf+0x9a>
    4756:	20 e1       	ldi	r18, 0x10	; 16
    4758:	ee cf       	rjmp	.-36     	; 0x4736 <vfprintf+0x9a>
    475a:	02 2f       	mov	r16, r18
    475c:	11 23       	and	r17, r17
    475e:	09 f4       	brne	.+2      	; 0x4762 <vfprintf+0xc6>
    4760:	c6 c0       	rjmp	.+396    	; 0x48ee <vfprintf+0x252>
    4762:	61 2f       	mov	r22, r17
    4764:	70 e0       	ldi	r23, 0x00	; 0
    4766:	80 e1       	ldi	r24, 0x10	; 16
    4768:	94 e0       	ldi	r25, 0x04	; 4
    476a:	2c 87       	std	Y+12, r18	; 0x0c
    476c:	0e 94 49 25 	call	0x4a92	; 0x4a92 <strchr_P>
    4770:	2c 85       	ldd	r18, Y+12	; 0x0c
    4772:	89 2b       	or	r24, r25
    4774:	41 f0       	breq	.+16     	; 0x4786 <vfprintf+0xea>
    4776:	37 01       	movw	r6, r14
    4778:	f4 e0       	ldi	r31, 0x04	; 4
    477a:	6f 0e       	add	r6, r31
    477c:	71 1c       	adc	r7, r1
    477e:	b6 01       	movw	r22, r12
    4780:	8f e3       	ldi	r24, 0x3F	; 63
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	11 c0       	rjmp	.+34     	; 0x47a8 <vfprintf+0x10c>
    4786:	13 36       	cpi	r17, 0x63	; 99
    4788:	39 f0       	breq	.+14     	; 0x4798 <vfprintf+0xfc>
    478a:	13 37       	cpi	r17, 0x73	; 115
    478c:	81 f0       	breq	.+32     	; 0x47ae <vfprintf+0x112>
    478e:	13 35       	cpi	r17, 0x53	; 83
    4790:	19 f5       	brne	.+70     	; 0x47d8 <vfprintf+0x13c>
    4792:	02 2f       	mov	r16, r18
    4794:	01 60       	ori	r16, 0x01	; 1
    4796:	0b c0       	rjmp	.+22     	; 0x47ae <vfprintf+0x112>
    4798:	37 01       	movw	r6, r14
    479a:	82 e0       	ldi	r24, 0x02	; 2
    479c:	68 0e       	add	r6, r24
    479e:	71 1c       	adc	r7, r1
    47a0:	b6 01       	movw	r22, r12
    47a2:	f7 01       	movw	r30, r14
    47a4:	80 81       	ld	r24, Z
    47a6:	91 81       	ldd	r25, Z+1	; 0x01
    47a8:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <fputc>
    47ac:	b5 cf       	rjmp	.-150    	; 0x4718 <vfprintf+0x7c>
    47ae:	37 01       	movw	r6, r14
    47b0:	f2 e0       	ldi	r31, 0x02	; 2
    47b2:	6f 0e       	add	r6, r31
    47b4:	71 1c       	adc	r7, r1
    47b6:	f7 01       	movw	r30, r14
    47b8:	e0 80       	ld	r14, Z
    47ba:	f1 80       	ldd	r15, Z+1	; 0x01
    47bc:	f7 01       	movw	r30, r14
    47be:	00 fd       	sbrc	r16, 0
    47c0:	85 91       	lpm	r24, Z+
    47c2:	00 ff       	sbrs	r16, 0
    47c4:	81 91       	ld	r24, Z+
    47c6:	7f 01       	movw	r14, r30
    47c8:	88 23       	and	r24, r24
    47ca:	09 f4       	brne	.+2      	; 0x47ce <vfprintf+0x132>
    47cc:	a5 cf       	rjmp	.-182    	; 0x4718 <vfprintf+0x7c>
    47ce:	b6 01       	movw	r22, r12
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <fputc>
    47d6:	f2 cf       	rjmp	.-28     	; 0x47bc <vfprintf+0x120>
    47d8:	14 36       	cpi	r17, 0x64	; 100
    47da:	11 f0       	breq	.+4      	; 0x47e0 <vfprintf+0x144>
    47dc:	19 36       	cpi	r17, 0x69	; 105
    47de:	29 f5       	brne	.+74     	; 0x482a <vfprintf+0x18e>
    47e0:	37 01       	movw	r6, r14
    47e2:	27 ff       	sbrs	r18, 7
    47e4:	09 c0       	rjmp	.+18     	; 0x47f8 <vfprintf+0x15c>
    47e6:	f4 e0       	ldi	r31, 0x04	; 4
    47e8:	6f 0e       	add	r6, r31
    47ea:	71 1c       	adc	r7, r1
    47ec:	f7 01       	movw	r30, r14
    47ee:	60 81       	ld	r22, Z
    47f0:	71 81       	ldd	r23, Z+1	; 0x01
    47f2:	82 81       	ldd	r24, Z+2	; 0x02
    47f4:	93 81       	ldd	r25, Z+3	; 0x03
    47f6:	0a c0       	rjmp	.+20     	; 0x480c <vfprintf+0x170>
    47f8:	f2 e0       	ldi	r31, 0x02	; 2
    47fa:	6f 0e       	add	r6, r31
    47fc:	71 1c       	adc	r7, r1
    47fe:	f7 01       	movw	r30, r14
    4800:	60 81       	ld	r22, Z
    4802:	71 81       	ldd	r23, Z+1	; 0x01
    4804:	88 27       	eor	r24, r24
    4806:	77 fd       	sbrc	r23, 7
    4808:	80 95       	com	r24
    480a:	98 2f       	mov	r25, r24
    480c:	02 2f       	mov	r16, r18
    480e:	0f 7e       	andi	r16, 0xEF	; 239
    4810:	97 ff       	sbrs	r25, 7
    4812:	08 c0       	rjmp	.+16     	; 0x4824 <vfprintf+0x188>
    4814:	90 95       	com	r25
    4816:	80 95       	com	r24
    4818:	70 95       	com	r23
    481a:	61 95       	neg	r22
    481c:	7f 4f       	sbci	r23, 0xFF	; 255
    481e:	8f 4f       	sbci	r24, 0xFF	; 255
    4820:	9f 4f       	sbci	r25, 0xFF	; 255
    4822:	00 64       	ori	r16, 0x40	; 64
    4824:	2a e0       	ldi	r18, 0x0A	; 10
    4826:	30 e0       	ldi	r19, 0x00	; 0
    4828:	33 c0       	rjmp	.+102    	; 0x4890 <vfprintf+0x1f4>
    482a:	10 37       	cpi	r17, 0x70	; 112
    482c:	99 f0       	breq	.+38     	; 0x4854 <vfprintf+0x1b8>
    482e:	40 f4       	brcc	.+16     	; 0x4840 <vfprintf+0x1a4>
    4830:	18 35       	cpi	r17, 0x58	; 88
    4832:	b1 f0       	breq	.+44     	; 0x4860 <vfprintf+0x1c4>
    4834:	1f 36       	cpi	r17, 0x6F	; 111
    4836:	09 f0       	breq	.+2      	; 0x483a <vfprintf+0x19e>
    4838:	5a c0       	rjmp	.+180    	; 0x48ee <vfprintf+0x252>
    483a:	28 e0       	ldi	r18, 0x08	; 8
    483c:	30 e0       	ldi	r19, 0x00	; 0
    483e:	14 c0       	rjmp	.+40     	; 0x4868 <vfprintf+0x1cc>
    4840:	15 37       	cpi	r17, 0x75	; 117
    4842:	19 f0       	breq	.+6      	; 0x484a <vfprintf+0x1ae>
    4844:	18 37       	cpi	r17, 0x78	; 120
    4846:	41 f0       	breq	.+16     	; 0x4858 <vfprintf+0x1bc>
    4848:	52 c0       	rjmp	.+164    	; 0x48ee <vfprintf+0x252>
    484a:	02 2f       	mov	r16, r18
    484c:	0f 7e       	andi	r16, 0xEF	; 239
    484e:	2a e0       	ldi	r18, 0x0A	; 10
    4850:	30 e0       	ldi	r19, 0x00	; 0
    4852:	0a c0       	rjmp	.+20     	; 0x4868 <vfprintf+0x1cc>
    4854:	02 2f       	mov	r16, r18
    4856:	00 61       	ori	r16, 0x10	; 16
    4858:	04 62       	ori	r16, 0x24	; 36
    485a:	20 e1       	ldi	r18, 0x10	; 16
    485c:	30 e0       	ldi	r19, 0x00	; 0
    485e:	04 c0       	rjmp	.+8      	; 0x4868 <vfprintf+0x1cc>
    4860:	02 2f       	mov	r16, r18
    4862:	04 60       	ori	r16, 0x04	; 4
    4864:	20 e1       	ldi	r18, 0x10	; 16
    4866:	32 e0       	ldi	r19, 0x02	; 2
    4868:	37 01       	movw	r6, r14
    486a:	07 ff       	sbrs	r16, 7
    486c:	09 c0       	rjmp	.+18     	; 0x4880 <vfprintf+0x1e4>
    486e:	f4 e0       	ldi	r31, 0x04	; 4
    4870:	6f 0e       	add	r6, r31
    4872:	71 1c       	adc	r7, r1
    4874:	f7 01       	movw	r30, r14
    4876:	60 81       	ld	r22, Z
    4878:	71 81       	ldd	r23, Z+1	; 0x01
    487a:	82 81       	ldd	r24, Z+2	; 0x02
    487c:	93 81       	ldd	r25, Z+3	; 0x03
    487e:	08 c0       	rjmp	.+16     	; 0x4890 <vfprintf+0x1f4>
    4880:	f2 e0       	ldi	r31, 0x02	; 2
    4882:	6f 0e       	add	r6, r31
    4884:	71 1c       	adc	r7, r1
    4886:	f7 01       	movw	r30, r14
    4888:	60 81       	ld	r22, Z
    488a:	71 81       	ldd	r23, Z+1	; 0x01
    488c:	80 e0       	ldi	r24, 0x00	; 0
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	a4 01       	movw	r20, r8
    4892:	0e 94 68 26 	call	0x4cd0	; 0x4cd0 <__ultoa_invert>
    4896:	18 2f       	mov	r17, r24
    4898:	18 19       	sub	r17, r8
    489a:	06 ff       	sbrs	r16, 6
    489c:	05 c0       	rjmp	.+10     	; 0x48a8 <vfprintf+0x20c>
    489e:	b6 01       	movw	r22, r12
    48a0:	8d e2       	ldi	r24, 0x2D	; 45
    48a2:	90 e0       	ldi	r25, 0x00	; 0
    48a4:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <fputc>
    48a8:	04 ff       	sbrs	r16, 4
    48aa:	15 c0       	rjmp	.+42     	; 0x48d6 <vfprintf+0x23a>
    48ac:	fe 01       	movw	r30, r28
    48ae:	e1 0f       	add	r30, r17
    48b0:	f1 1d       	adc	r31, r1
    48b2:	80 81       	ld	r24, Z
    48b4:	80 33       	cpi	r24, 0x30	; 48
    48b6:	79 f0       	breq	.+30     	; 0x48d6 <vfprintf+0x23a>
    48b8:	b6 01       	movw	r22, r12
    48ba:	80 e3       	ldi	r24, 0x30	; 48
    48bc:	90 e0       	ldi	r25, 0x00	; 0
    48be:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <fputc>
    48c2:	02 ff       	sbrs	r16, 2
    48c4:	08 c0       	rjmp	.+16     	; 0x48d6 <vfprintf+0x23a>
    48c6:	00 72       	andi	r16, 0x20	; 32
    48c8:	80 2f       	mov	r24, r16
    48ca:	90 e0       	ldi	r25, 0x00	; 0
    48cc:	b6 01       	movw	r22, r12
    48ce:	88 5a       	subi	r24, 0xA8	; 168
    48d0:	9f 4f       	sbci	r25, 0xFF	; 255
    48d2:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <fputc>
    48d6:	11 50       	subi	r17, 0x01	; 1
    48d8:	f4 01       	movw	r30, r8
    48da:	e1 0f       	add	r30, r17
    48dc:	f1 1d       	adc	r31, r1
    48de:	80 81       	ld	r24, Z
    48e0:	b6 01       	movw	r22, r12
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <fputc>
    48e8:	11 11       	cpse	r17, r1
    48ea:	f5 cf       	rjmp	.-22     	; 0x48d6 <vfprintf+0x23a>
    48ec:	15 cf       	rjmp	.-470    	; 0x4718 <vfprintf+0x7c>
    48ee:	f6 01       	movw	r30, r12
    48f0:	86 81       	ldd	r24, Z+6	; 0x06
    48f2:	97 81       	ldd	r25, Z+7	; 0x07
    48f4:	05 c0       	rjmp	.+10     	; 0x4900 <vfprintf+0x264>
    48f6:	8f ef       	ldi	r24, 0xFF	; 255
    48f8:	9f ef       	ldi	r25, 0xFF	; 255
    48fa:	02 c0       	rjmp	.+4      	; 0x4900 <vfprintf+0x264>
    48fc:	02 2f       	mov	r16, r18
    48fe:	31 cf       	rjmp	.-414    	; 0x4762 <vfprintf+0xc6>
    4900:	2c 96       	adiw	r28, 0x0c	; 12
    4902:	0f b6       	in	r0, 0x3f	; 63
    4904:	f8 94       	cli
    4906:	de bf       	out	0x3e, r29	; 62
    4908:	0f be       	out	0x3f, r0	; 63
    490a:	cd bf       	out	0x3d, r28	; 61
    490c:	df 91       	pop	r29
    490e:	cf 91       	pop	r28
    4910:	1f 91       	pop	r17
    4912:	0f 91       	pop	r16
    4914:	ff 90       	pop	r15
    4916:	ef 90       	pop	r14
    4918:	df 90       	pop	r13
    491a:	cf 90       	pop	r12
    491c:	bf 90       	pop	r11
    491e:	af 90       	pop	r10
    4920:	9f 90       	pop	r9
    4922:	8f 90       	pop	r8
    4924:	7f 90       	pop	r7
    4926:	6f 90       	pop	r6
    4928:	08 95       	ret

0000492a <__muluhisi3>:
    492a:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <__umulhisi3>
    492e:	a5 9f       	mul	r26, r21
    4930:	90 0d       	add	r25, r0
    4932:	b4 9f       	mul	r27, r20
    4934:	90 0d       	add	r25, r0
    4936:	a4 9f       	mul	r26, r20
    4938:	80 0d       	add	r24, r0
    493a:	91 1d       	adc	r25, r1
    493c:	11 24       	eor	r1, r1
    493e:	08 95       	ret

00004940 <__mulsi3>:
    4940:	db 01       	movw	r26, r22
    4942:	8f 93       	push	r24
    4944:	9f 93       	push	r25
    4946:	0e 94 95 24 	call	0x492a	; 0x492a <__muluhisi3>
    494a:	bf 91       	pop	r27
    494c:	af 91       	pop	r26
    494e:	a2 9f       	mul	r26, r18
    4950:	80 0d       	add	r24, r0
    4952:	91 1d       	adc	r25, r1
    4954:	a3 9f       	mul	r26, r19
    4956:	90 0d       	add	r25, r0
    4958:	b2 9f       	mul	r27, r18
    495a:	90 0d       	add	r25, r0
    495c:	11 24       	eor	r1, r1
    495e:	08 95       	ret

00004960 <__udivmodsi4>:
    4960:	a1 e2       	ldi	r26, 0x21	; 33
    4962:	1a 2e       	mov	r1, r26
    4964:	aa 1b       	sub	r26, r26
    4966:	bb 1b       	sub	r27, r27
    4968:	fd 01       	movw	r30, r26
    496a:	0d c0       	rjmp	.+26     	; 0x4986 <__udivmodsi4_ep>

0000496c <__udivmodsi4_loop>:
    496c:	aa 1f       	adc	r26, r26
    496e:	bb 1f       	adc	r27, r27
    4970:	ee 1f       	adc	r30, r30
    4972:	ff 1f       	adc	r31, r31
    4974:	a2 17       	cp	r26, r18
    4976:	b3 07       	cpc	r27, r19
    4978:	e4 07       	cpc	r30, r20
    497a:	f5 07       	cpc	r31, r21
    497c:	20 f0       	brcs	.+8      	; 0x4986 <__udivmodsi4_ep>
    497e:	a2 1b       	sub	r26, r18
    4980:	b3 0b       	sbc	r27, r19
    4982:	e4 0b       	sbc	r30, r20
    4984:	f5 0b       	sbc	r31, r21

00004986 <__udivmodsi4_ep>:
    4986:	66 1f       	adc	r22, r22
    4988:	77 1f       	adc	r23, r23
    498a:	88 1f       	adc	r24, r24
    498c:	99 1f       	adc	r25, r25
    498e:	1a 94       	dec	r1
    4990:	69 f7       	brne	.-38     	; 0x496c <__udivmodsi4_loop>
    4992:	60 95       	com	r22
    4994:	70 95       	com	r23
    4996:	80 95       	com	r24
    4998:	90 95       	com	r25
    499a:	9b 01       	movw	r18, r22
    499c:	ac 01       	movw	r20, r24
    499e:	bd 01       	movw	r22, r26
    49a0:	cf 01       	movw	r24, r30
    49a2:	08 95       	ret

000049a4 <__umoddi3>:
    49a4:	68 94       	set
    49a6:	01 c0       	rjmp	.+2      	; 0x49aa <__udivdi3_umoddi3>

000049a8 <__udivdi3>:
    49a8:	e8 94       	clt

000049aa <__udivdi3_umoddi3>:
    49aa:	8f 92       	push	r8
    49ac:	9f 92       	push	r9
    49ae:	cf 93       	push	r28
    49b0:	df 93       	push	r29
    49b2:	0e 94 e0 24 	call	0x49c0	; 0x49c0 <__udivmod64>
    49b6:	df 91       	pop	r29
    49b8:	cf 91       	pop	r28
    49ba:	9f 90       	pop	r9
    49bc:	8f 90       	pop	r8
    49be:	08 95       	ret

000049c0 <__udivmod64>:
    49c0:	88 24       	eor	r8, r8
    49c2:	99 24       	eor	r9, r9
    49c4:	f4 01       	movw	r30, r8
    49c6:	e4 01       	movw	r28, r8
    49c8:	b0 e4       	ldi	r27, 0x40	; 64
    49ca:	9f 93       	push	r25
    49cc:	aa 27       	eor	r26, r26
    49ce:	9a 15       	cp	r25, r10
    49d0:	8b 04       	cpc	r8, r11
    49d2:	9c 04       	cpc	r9, r12
    49d4:	ed 05       	cpc	r30, r13
    49d6:	fe 05       	cpc	r31, r14
    49d8:	cf 05       	cpc	r28, r15
    49da:	d0 07       	cpc	r29, r16
    49dc:	a1 07       	cpc	r26, r17
    49de:	98 f4       	brcc	.+38     	; 0x4a06 <__udivmod64+0x46>
    49e0:	ad 2f       	mov	r26, r29
    49e2:	dc 2f       	mov	r29, r28
    49e4:	cf 2f       	mov	r28, r31
    49e6:	fe 2f       	mov	r31, r30
    49e8:	e9 2d       	mov	r30, r9
    49ea:	98 2c       	mov	r9, r8
    49ec:	89 2e       	mov	r8, r25
    49ee:	98 2f       	mov	r25, r24
    49f0:	87 2f       	mov	r24, r23
    49f2:	76 2f       	mov	r23, r22
    49f4:	65 2f       	mov	r22, r21
    49f6:	54 2f       	mov	r21, r20
    49f8:	43 2f       	mov	r20, r19
    49fa:	32 2f       	mov	r19, r18
    49fc:	22 27       	eor	r18, r18
    49fe:	b8 50       	subi	r27, 0x08	; 8
    4a00:	31 f7       	brne	.-52     	; 0x49ce <__udivmod64+0xe>
    4a02:	bf 91       	pop	r27
    4a04:	27 c0       	rjmp	.+78     	; 0x4a54 <__udivmod64+0x94>
    4a06:	1b 2e       	mov	r1, r27
    4a08:	bf 91       	pop	r27
    4a0a:	bb 27       	eor	r27, r27
    4a0c:	22 0f       	add	r18, r18
    4a0e:	33 1f       	adc	r19, r19
    4a10:	44 1f       	adc	r20, r20
    4a12:	55 1f       	adc	r21, r21
    4a14:	66 1f       	adc	r22, r22
    4a16:	77 1f       	adc	r23, r23
    4a18:	88 1f       	adc	r24, r24
    4a1a:	99 1f       	adc	r25, r25
    4a1c:	88 1c       	adc	r8, r8
    4a1e:	99 1c       	adc	r9, r9
    4a20:	ee 1f       	adc	r30, r30
    4a22:	ff 1f       	adc	r31, r31
    4a24:	cc 1f       	adc	r28, r28
    4a26:	dd 1f       	adc	r29, r29
    4a28:	aa 1f       	adc	r26, r26
    4a2a:	bb 1f       	adc	r27, r27
    4a2c:	8a 14       	cp	r8, r10
    4a2e:	9b 04       	cpc	r9, r11
    4a30:	ec 05       	cpc	r30, r12
    4a32:	fd 05       	cpc	r31, r13
    4a34:	ce 05       	cpc	r28, r14
    4a36:	df 05       	cpc	r29, r15
    4a38:	a0 07       	cpc	r26, r16
    4a3a:	b1 07       	cpc	r27, r17
    4a3c:	48 f0       	brcs	.+18     	; 0x4a50 <__udivmod64+0x90>
    4a3e:	8a 18       	sub	r8, r10
    4a40:	9b 08       	sbc	r9, r11
    4a42:	ec 09       	sbc	r30, r12
    4a44:	fd 09       	sbc	r31, r13
    4a46:	ce 09       	sbc	r28, r14
    4a48:	df 09       	sbc	r29, r15
    4a4a:	a0 0b       	sbc	r26, r16
    4a4c:	b1 0b       	sbc	r27, r17
    4a4e:	21 60       	ori	r18, 0x01	; 1
    4a50:	1a 94       	dec	r1
    4a52:	e1 f6       	brne	.-72     	; 0x4a0c <__udivmod64+0x4c>
    4a54:	2e f4       	brtc	.+10     	; 0x4a60 <__udivmod64+0xa0>
    4a56:	94 01       	movw	r18, r8
    4a58:	af 01       	movw	r20, r30
    4a5a:	be 01       	movw	r22, r28
    4a5c:	cd 01       	movw	r24, r26
    4a5e:	00 0c       	add	r0, r0
    4a60:	08 95       	ret

00004a62 <__tablejump2__>:
    4a62:	ee 0f       	add	r30, r30
    4a64:	ff 1f       	adc	r31, r31
    4a66:	00 24       	eor	r0, r0
    4a68:	00 1c       	adc	r0, r0
    4a6a:	0b be       	out	0x3b, r0	; 59
    4a6c:	07 90       	elpm	r0, Z+
    4a6e:	f6 91       	elpm	r31, Z
    4a70:	e0 2d       	mov	r30, r0
    4a72:	09 94       	ijmp

00004a74 <__umulhisi3>:
    4a74:	a2 9f       	mul	r26, r18
    4a76:	b0 01       	movw	r22, r0
    4a78:	b3 9f       	mul	r27, r19
    4a7a:	c0 01       	movw	r24, r0
    4a7c:	a3 9f       	mul	r26, r19
    4a7e:	70 0d       	add	r23, r0
    4a80:	81 1d       	adc	r24, r1
    4a82:	11 24       	eor	r1, r1
    4a84:	91 1d       	adc	r25, r1
    4a86:	b2 9f       	mul	r27, r18
    4a88:	70 0d       	add	r23, r0
    4a8a:	81 1d       	adc	r24, r1
    4a8c:	11 24       	eor	r1, r1
    4a8e:	91 1d       	adc	r25, r1
    4a90:	08 95       	ret

00004a92 <strchr_P>:
    4a92:	fc 01       	movw	r30, r24
    4a94:	05 90       	lpm	r0, Z+
    4a96:	06 16       	cp	r0, r22
    4a98:	21 f0       	breq	.+8      	; 0x4aa2 <strchr_P+0x10>
    4a9a:	00 20       	and	r0, r0
    4a9c:	d9 f7       	brne	.-10     	; 0x4a94 <strchr_P+0x2>
    4a9e:	c0 01       	movw	r24, r0
    4aa0:	08 95       	ret
    4aa2:	31 97       	sbiw	r30, 0x01	; 1
    4aa4:	cf 01       	movw	r24, r30
    4aa6:	08 95       	ret

00004aa8 <memcpy>:
    4aa8:	fb 01       	movw	r30, r22
    4aaa:	dc 01       	movw	r26, r24
    4aac:	02 c0       	rjmp	.+4      	; 0x4ab2 <memcpy+0xa>
    4aae:	01 90       	ld	r0, Z+
    4ab0:	0d 92       	st	X+, r0
    4ab2:	41 50       	subi	r20, 0x01	; 1
    4ab4:	50 40       	sbci	r21, 0x00	; 0
    4ab6:	d8 f7       	brcc	.-10     	; 0x4aae <memcpy+0x6>
    4ab8:	08 95       	ret

00004aba <strncmp>:
    4aba:	fb 01       	movw	r30, r22
    4abc:	dc 01       	movw	r26, r24
    4abe:	41 50       	subi	r20, 0x01	; 1
    4ac0:	50 40       	sbci	r21, 0x00	; 0
    4ac2:	30 f0       	brcs	.+12     	; 0x4ad0 <strncmp+0x16>
    4ac4:	8d 91       	ld	r24, X+
    4ac6:	01 90       	ld	r0, Z+
    4ac8:	80 19       	sub	r24, r0
    4aca:	19 f4       	brne	.+6      	; 0x4ad2 <strncmp+0x18>
    4acc:	00 20       	and	r0, r0
    4ace:	b9 f7       	brne	.-18     	; 0x4abe <strncmp+0x4>
    4ad0:	88 1b       	sub	r24, r24
    4ad2:	99 0b       	sbc	r25, r25
    4ad4:	08 95       	ret

00004ad6 <fdevopen>:
    4ad6:	0f 93       	push	r16
    4ad8:	1f 93       	push	r17
    4ada:	cf 93       	push	r28
    4adc:	df 93       	push	r29
    4ade:	00 97       	sbiw	r24, 0x00	; 0
    4ae0:	31 f4       	brne	.+12     	; 0x4aee <fdevopen+0x18>
    4ae2:	61 15       	cp	r22, r1
    4ae4:	71 05       	cpc	r23, r1
    4ae6:	19 f4       	brne	.+6      	; 0x4aee <fdevopen+0x18>
    4ae8:	80 e0       	ldi	r24, 0x00	; 0
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	3a c0       	rjmp	.+116    	; 0x4b62 <fdevopen+0x8c>
    4aee:	8b 01       	movw	r16, r22
    4af0:	ec 01       	movw	r28, r24
    4af2:	6e e0       	ldi	r22, 0x0E	; 14
    4af4:	70 e0       	ldi	r23, 0x00	; 0
    4af6:	81 e0       	ldi	r24, 0x01	; 1
    4af8:	90 e0       	ldi	r25, 0x00	; 0
    4afa:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <calloc>
    4afe:	fc 01       	movw	r30, r24
    4b00:	00 97       	sbiw	r24, 0x00	; 0
    4b02:	91 f3       	breq	.-28     	; 0x4ae8 <fdevopen+0x12>
    4b04:	80 e8       	ldi	r24, 0x80	; 128
    4b06:	83 83       	std	Z+3, r24	; 0x03
    4b08:	01 15       	cp	r16, r1
    4b0a:	11 05       	cpc	r17, r1
    4b0c:	71 f0       	breq	.+28     	; 0x4b2a <fdevopen+0x54>
    4b0e:	13 87       	std	Z+11, r17	; 0x0b
    4b10:	02 87       	std	Z+10, r16	; 0x0a
    4b12:	81 e8       	ldi	r24, 0x81	; 129
    4b14:	83 83       	std	Z+3, r24	; 0x03
    4b16:	80 91 9a 06 	lds	r24, 0x069A
    4b1a:	90 91 9b 06 	lds	r25, 0x069B
    4b1e:	89 2b       	or	r24, r25
    4b20:	21 f4       	brne	.+8      	; 0x4b2a <fdevopen+0x54>
    4b22:	f0 93 9b 06 	sts	0x069B, r31
    4b26:	e0 93 9a 06 	sts	0x069A, r30
    4b2a:	20 97       	sbiw	r28, 0x00	; 0
    4b2c:	c9 f0       	breq	.+50     	; 0x4b60 <fdevopen+0x8a>
    4b2e:	d1 87       	std	Z+9, r29	; 0x09
    4b30:	c0 87       	std	Z+8, r28	; 0x08
    4b32:	83 81       	ldd	r24, Z+3	; 0x03
    4b34:	82 60       	ori	r24, 0x02	; 2
    4b36:	83 83       	std	Z+3, r24	; 0x03
    4b38:	80 91 9c 06 	lds	r24, 0x069C
    4b3c:	90 91 9d 06 	lds	r25, 0x069D
    4b40:	89 2b       	or	r24, r25
    4b42:	71 f4       	brne	.+28     	; 0x4b60 <fdevopen+0x8a>
    4b44:	f0 93 9d 06 	sts	0x069D, r31
    4b48:	e0 93 9c 06 	sts	0x069C, r30
    4b4c:	80 91 9e 06 	lds	r24, 0x069E
    4b50:	90 91 9f 06 	lds	r25, 0x069F
    4b54:	89 2b       	or	r24, r25
    4b56:	21 f4       	brne	.+8      	; 0x4b60 <fdevopen+0x8a>
    4b58:	f0 93 9f 06 	sts	0x069F, r31
    4b5c:	e0 93 9e 06 	sts	0x069E, r30
    4b60:	cf 01       	movw	r24, r30
    4b62:	df 91       	pop	r29
    4b64:	cf 91       	pop	r28
    4b66:	1f 91       	pop	r17
    4b68:	0f 91       	pop	r16
    4b6a:	08 95       	ret

00004b6c <fputc>:
    4b6c:	0f 93       	push	r16
    4b6e:	1f 93       	push	r17
    4b70:	cf 93       	push	r28
    4b72:	df 93       	push	r29
    4b74:	fb 01       	movw	r30, r22
    4b76:	23 81       	ldd	r18, Z+3	; 0x03
    4b78:	21 fd       	sbrc	r18, 1
    4b7a:	03 c0       	rjmp	.+6      	; 0x4b82 <fputc+0x16>
    4b7c:	8f ef       	ldi	r24, 0xFF	; 255
    4b7e:	9f ef       	ldi	r25, 0xFF	; 255
    4b80:	28 c0       	rjmp	.+80     	; 0x4bd2 <fputc+0x66>
    4b82:	22 ff       	sbrs	r18, 2
    4b84:	16 c0       	rjmp	.+44     	; 0x4bb2 <fputc+0x46>
    4b86:	46 81       	ldd	r20, Z+6	; 0x06
    4b88:	57 81       	ldd	r21, Z+7	; 0x07
    4b8a:	24 81       	ldd	r18, Z+4	; 0x04
    4b8c:	35 81       	ldd	r19, Z+5	; 0x05
    4b8e:	42 17       	cp	r20, r18
    4b90:	53 07       	cpc	r21, r19
    4b92:	44 f4       	brge	.+16     	; 0x4ba4 <fputc+0x38>
    4b94:	a0 81       	ld	r26, Z
    4b96:	b1 81       	ldd	r27, Z+1	; 0x01
    4b98:	9d 01       	movw	r18, r26
    4b9a:	2f 5f       	subi	r18, 0xFF	; 255
    4b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b9e:	31 83       	std	Z+1, r19	; 0x01
    4ba0:	20 83       	st	Z, r18
    4ba2:	8c 93       	st	X, r24
    4ba4:	26 81       	ldd	r18, Z+6	; 0x06
    4ba6:	37 81       	ldd	r19, Z+7	; 0x07
    4ba8:	2f 5f       	subi	r18, 0xFF	; 255
    4baa:	3f 4f       	sbci	r19, 0xFF	; 255
    4bac:	37 83       	std	Z+7, r19	; 0x07
    4bae:	26 83       	std	Z+6, r18	; 0x06
    4bb0:	10 c0       	rjmp	.+32     	; 0x4bd2 <fputc+0x66>
    4bb2:	eb 01       	movw	r28, r22
    4bb4:	09 2f       	mov	r16, r25
    4bb6:	18 2f       	mov	r17, r24
    4bb8:	00 84       	ldd	r0, Z+8	; 0x08
    4bba:	f1 85       	ldd	r31, Z+9	; 0x09
    4bbc:	e0 2d       	mov	r30, r0
    4bbe:	09 95       	icall
    4bc0:	89 2b       	or	r24, r25
    4bc2:	e1 f6       	brne	.-72     	; 0x4b7c <fputc+0x10>
    4bc4:	8e 81       	ldd	r24, Y+6	; 0x06
    4bc6:	9f 81       	ldd	r25, Y+7	; 0x07
    4bc8:	01 96       	adiw	r24, 0x01	; 1
    4bca:	9f 83       	std	Y+7, r25	; 0x07
    4bcc:	8e 83       	std	Y+6, r24	; 0x06
    4bce:	81 2f       	mov	r24, r17
    4bd0:	90 2f       	mov	r25, r16
    4bd2:	df 91       	pop	r29
    4bd4:	cf 91       	pop	r28
    4bd6:	1f 91       	pop	r17
    4bd8:	0f 91       	pop	r16
    4bda:	08 95       	ret

00004bdc <printf>:
    4bdc:	cf 93       	push	r28
    4bde:	df 93       	push	r29
    4be0:	cd b7       	in	r28, 0x3d	; 61
    4be2:	de b7       	in	r29, 0x3e	; 62
    4be4:	ae 01       	movw	r20, r28
    4be6:	4b 5f       	subi	r20, 0xFB	; 251
    4be8:	5f 4f       	sbci	r21, 0xFF	; 255
    4bea:	fa 01       	movw	r30, r20
    4bec:	61 91       	ld	r22, Z+
    4bee:	71 91       	ld	r23, Z+
    4bf0:	af 01       	movw	r20, r30
    4bf2:	80 91 9c 06 	lds	r24, 0x069C
    4bf6:	90 91 9d 06 	lds	r25, 0x069D
    4bfa:	0e 94 4e 23 	call	0x469c	; 0x469c <vfprintf>
    4bfe:	df 91       	pop	r29
    4c00:	cf 91       	pop	r28
    4c02:	08 95       	ret

00004c04 <putchar>:
    4c04:	60 91 9c 06 	lds	r22, 0x069C
    4c08:	70 91 9d 06 	lds	r23, 0x069D
    4c0c:	0c 94 b6 25 	jmp	0x4b6c	; 0x4b6c <fputc>

00004c10 <puts>:
    4c10:	0f 93       	push	r16
    4c12:	1f 93       	push	r17
    4c14:	cf 93       	push	r28
    4c16:	df 93       	push	r29
    4c18:	e0 91 9c 06 	lds	r30, 0x069C
    4c1c:	f0 91 9d 06 	lds	r31, 0x069D
    4c20:	23 81       	ldd	r18, Z+3	; 0x03
    4c22:	21 ff       	sbrs	r18, 1
    4c24:	1b c0       	rjmp	.+54     	; 0x4c5c <puts+0x4c>
    4c26:	8c 01       	movw	r16, r24
    4c28:	d0 e0       	ldi	r29, 0x00	; 0
    4c2a:	c0 e0       	ldi	r28, 0x00	; 0
    4c2c:	f8 01       	movw	r30, r16
    4c2e:	81 91       	ld	r24, Z+
    4c30:	8f 01       	movw	r16, r30
    4c32:	60 91 9c 06 	lds	r22, 0x069C
    4c36:	70 91 9d 06 	lds	r23, 0x069D
    4c3a:	db 01       	movw	r26, r22
    4c3c:	18 96       	adiw	r26, 0x08	; 8
    4c3e:	ed 91       	ld	r30, X+
    4c40:	fc 91       	ld	r31, X
    4c42:	19 97       	sbiw	r26, 0x09	; 9
    4c44:	88 23       	and	r24, r24
    4c46:	31 f0       	breq	.+12     	; 0x4c54 <puts+0x44>
    4c48:	09 95       	icall
    4c4a:	89 2b       	or	r24, r25
    4c4c:	79 f3       	breq	.-34     	; 0x4c2c <puts+0x1c>
    4c4e:	df ef       	ldi	r29, 0xFF	; 255
    4c50:	cf ef       	ldi	r28, 0xFF	; 255
    4c52:	ec cf       	rjmp	.-40     	; 0x4c2c <puts+0x1c>
    4c54:	8a e0       	ldi	r24, 0x0A	; 10
    4c56:	09 95       	icall
    4c58:	89 2b       	or	r24, r25
    4c5a:	19 f0       	breq	.+6      	; 0x4c62 <puts+0x52>
    4c5c:	8f ef       	ldi	r24, 0xFF	; 255
    4c5e:	9f ef       	ldi	r25, 0xFF	; 255
    4c60:	02 c0       	rjmp	.+4      	; 0x4c66 <puts+0x56>
    4c62:	8d 2f       	mov	r24, r29
    4c64:	9c 2f       	mov	r25, r28
    4c66:	df 91       	pop	r29
    4c68:	cf 91       	pop	r28
    4c6a:	1f 91       	pop	r17
    4c6c:	0f 91       	pop	r16
    4c6e:	08 95       	ret

00004c70 <sprintf>:
    4c70:	0f 93       	push	r16
    4c72:	1f 93       	push	r17
    4c74:	cf 93       	push	r28
    4c76:	df 93       	push	r29
    4c78:	cd b7       	in	r28, 0x3d	; 61
    4c7a:	de b7       	in	r29, 0x3e	; 62
    4c7c:	2e 97       	sbiw	r28, 0x0e	; 14
    4c7e:	0f b6       	in	r0, 0x3f	; 63
    4c80:	f8 94       	cli
    4c82:	de bf       	out	0x3e, r29	; 62
    4c84:	0f be       	out	0x3f, r0	; 63
    4c86:	cd bf       	out	0x3d, r28	; 61
    4c88:	0d 89       	ldd	r16, Y+21	; 0x15
    4c8a:	1e 89       	ldd	r17, Y+22	; 0x16
    4c8c:	86 e0       	ldi	r24, 0x06	; 6
    4c8e:	8c 83       	std	Y+4, r24	; 0x04
    4c90:	1a 83       	std	Y+2, r17	; 0x02
    4c92:	09 83       	std	Y+1, r16	; 0x01
    4c94:	8f ef       	ldi	r24, 0xFF	; 255
    4c96:	9f e7       	ldi	r25, 0x7F	; 127
    4c98:	9e 83       	std	Y+6, r25	; 0x06
    4c9a:	8d 83       	std	Y+5, r24	; 0x05
    4c9c:	ae 01       	movw	r20, r28
    4c9e:	47 5e       	subi	r20, 0xE7	; 231
    4ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    4ca2:	6f 89       	ldd	r22, Y+23	; 0x17
    4ca4:	78 8d       	ldd	r23, Y+24	; 0x18
    4ca6:	ce 01       	movw	r24, r28
    4ca8:	01 96       	adiw	r24, 0x01	; 1
    4caa:	0e 94 4e 23 	call	0x469c	; 0x469c <vfprintf>
    4cae:	2f 81       	ldd	r18, Y+7	; 0x07
    4cb0:	38 85       	ldd	r19, Y+8	; 0x08
    4cb2:	f8 01       	movw	r30, r16
    4cb4:	e2 0f       	add	r30, r18
    4cb6:	f3 1f       	adc	r31, r19
    4cb8:	10 82       	st	Z, r1
    4cba:	2e 96       	adiw	r28, 0x0e	; 14
    4cbc:	0f b6       	in	r0, 0x3f	; 63
    4cbe:	f8 94       	cli
    4cc0:	de bf       	out	0x3e, r29	; 62
    4cc2:	0f be       	out	0x3f, r0	; 63
    4cc4:	cd bf       	out	0x3d, r28	; 61
    4cc6:	df 91       	pop	r29
    4cc8:	cf 91       	pop	r28
    4cca:	1f 91       	pop	r17
    4ccc:	0f 91       	pop	r16
    4cce:	08 95       	ret

00004cd0 <__ultoa_invert>:
    4cd0:	fa 01       	movw	r30, r20
    4cd2:	aa 27       	eor	r26, r26
    4cd4:	28 30       	cpi	r18, 0x08	; 8
    4cd6:	51 f1       	breq	.+84     	; 0x4d2c <__ultoa_invert+0x5c>
    4cd8:	20 31       	cpi	r18, 0x10	; 16
    4cda:	81 f1       	breq	.+96     	; 0x4d3c <__ultoa_invert+0x6c>
    4cdc:	e8 94       	clt
    4cde:	6f 93       	push	r22
    4ce0:	6e 7f       	andi	r22, 0xFE	; 254
    4ce2:	6e 5f       	subi	r22, 0xFE	; 254
    4ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ce6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    4cea:	af 4f       	sbci	r26, 0xFF	; 255
    4cec:	b1 e0       	ldi	r27, 0x01	; 1
    4cee:	3e d0       	rcall	.+124    	; 0x4d6c <__ultoa_invert+0x9c>
    4cf0:	b4 e0       	ldi	r27, 0x04	; 4
    4cf2:	3c d0       	rcall	.+120    	; 0x4d6c <__ultoa_invert+0x9c>
    4cf4:	67 0f       	add	r22, r23
    4cf6:	78 1f       	adc	r23, r24
    4cf8:	89 1f       	adc	r24, r25
    4cfa:	9a 1f       	adc	r25, r26
    4cfc:	a1 1d       	adc	r26, r1
    4cfe:	68 0f       	add	r22, r24
    4d00:	79 1f       	adc	r23, r25
    4d02:	8a 1f       	adc	r24, r26
    4d04:	91 1d       	adc	r25, r1
    4d06:	a1 1d       	adc	r26, r1
    4d08:	6a 0f       	add	r22, r26
    4d0a:	71 1d       	adc	r23, r1
    4d0c:	81 1d       	adc	r24, r1
    4d0e:	91 1d       	adc	r25, r1
    4d10:	a1 1d       	adc	r26, r1
    4d12:	20 d0       	rcall	.+64     	; 0x4d54 <__ultoa_invert+0x84>
    4d14:	09 f4       	brne	.+2      	; 0x4d18 <__ultoa_invert+0x48>
    4d16:	68 94       	set
    4d18:	3f 91       	pop	r19
    4d1a:	2a e0       	ldi	r18, 0x0A	; 10
    4d1c:	26 9f       	mul	r18, r22
    4d1e:	11 24       	eor	r1, r1
    4d20:	30 19       	sub	r19, r0
    4d22:	30 5d       	subi	r19, 0xD0	; 208
    4d24:	31 93       	st	Z+, r19
    4d26:	de f6       	brtc	.-74     	; 0x4cde <__ultoa_invert+0xe>
    4d28:	cf 01       	movw	r24, r30
    4d2a:	08 95       	ret
    4d2c:	46 2f       	mov	r20, r22
    4d2e:	47 70       	andi	r20, 0x07	; 7
    4d30:	40 5d       	subi	r20, 0xD0	; 208
    4d32:	41 93       	st	Z+, r20
    4d34:	b3 e0       	ldi	r27, 0x03	; 3
    4d36:	0f d0       	rcall	.+30     	; 0x4d56 <__ultoa_invert+0x86>
    4d38:	c9 f7       	brne	.-14     	; 0x4d2c <__ultoa_invert+0x5c>
    4d3a:	f6 cf       	rjmp	.-20     	; 0x4d28 <__ultoa_invert+0x58>
    4d3c:	46 2f       	mov	r20, r22
    4d3e:	4f 70       	andi	r20, 0x0F	; 15
    4d40:	40 5d       	subi	r20, 0xD0	; 208
    4d42:	4a 33       	cpi	r20, 0x3A	; 58
    4d44:	18 f0       	brcs	.+6      	; 0x4d4c <__ultoa_invert+0x7c>
    4d46:	49 5d       	subi	r20, 0xD9	; 217
    4d48:	31 fd       	sbrc	r19, 1
    4d4a:	40 52       	subi	r20, 0x20	; 32
    4d4c:	41 93       	st	Z+, r20
    4d4e:	02 d0       	rcall	.+4      	; 0x4d54 <__ultoa_invert+0x84>
    4d50:	a9 f7       	brne	.-22     	; 0x4d3c <__ultoa_invert+0x6c>
    4d52:	ea cf       	rjmp	.-44     	; 0x4d28 <__ultoa_invert+0x58>
    4d54:	b4 e0       	ldi	r27, 0x04	; 4
    4d56:	a6 95       	lsr	r26
    4d58:	97 95       	ror	r25
    4d5a:	87 95       	ror	r24
    4d5c:	77 95       	ror	r23
    4d5e:	67 95       	ror	r22
    4d60:	ba 95       	dec	r27
    4d62:	c9 f7       	brne	.-14     	; 0x4d56 <__ultoa_invert+0x86>
    4d64:	00 97       	sbiw	r24, 0x00	; 0
    4d66:	61 05       	cpc	r22, r1
    4d68:	71 05       	cpc	r23, r1
    4d6a:	08 95       	ret
    4d6c:	9b 01       	movw	r18, r22
    4d6e:	ac 01       	movw	r20, r24
    4d70:	0a 2e       	mov	r0, r26
    4d72:	06 94       	lsr	r0
    4d74:	57 95       	ror	r21
    4d76:	47 95       	ror	r20
    4d78:	37 95       	ror	r19
    4d7a:	27 95       	ror	r18
    4d7c:	ba 95       	dec	r27
    4d7e:	c9 f7       	brne	.-14     	; 0x4d72 <__ultoa_invert+0xa2>
    4d80:	62 0f       	add	r22, r18
    4d82:	73 1f       	adc	r23, r19
    4d84:	84 1f       	adc	r24, r20
    4d86:	95 1f       	adc	r25, r21
    4d88:	a0 1d       	adc	r26, r0
    4d8a:	08 95       	ret

00004d8c <__eerd_byte_m128rfa1>:
    4d8c:	f9 99       	sbic	0x1f, 1	; 31
    4d8e:	fe cf       	rjmp	.-4      	; 0x4d8c <__eerd_byte_m128rfa1>
    4d90:	92 bd       	out	0x22, r25	; 34
    4d92:	81 bd       	out	0x21, r24	; 33
    4d94:	f8 9a       	sbi	0x1f, 0	; 31
    4d96:	99 27       	eor	r25, r25
    4d98:	80 b5       	in	r24, 0x20	; 32
    4d9a:	08 95       	ret

00004d9c <__eewr_byte_m128rfa1>:
    4d9c:	26 2f       	mov	r18, r22

00004d9e <__eewr_r18_m128rfa1>:
    4d9e:	f9 99       	sbic	0x1f, 1	; 31
    4da0:	fe cf       	rjmp	.-4      	; 0x4d9e <__eewr_r18_m128rfa1>
    4da2:	1f ba       	out	0x1f, r1	; 31
    4da4:	92 bd       	out	0x22, r25	; 34
    4da6:	81 bd       	out	0x21, r24	; 33
    4da8:	20 bd       	out	0x20, r18	; 32
    4daa:	0f b6       	in	r0, 0x3f	; 63
    4dac:	f8 94       	cli
    4dae:	fa 9a       	sbi	0x1f, 2	; 31
    4db0:	f9 9a       	sbi	0x1f, 1	; 31
    4db2:	0f be       	out	0x3f, r0	; 63
    4db4:	01 96       	adiw	r24, 0x01	; 1
    4db6:	08 95       	ret

00004db8 <calloc>:
    4db8:	0f 93       	push	r16
    4dba:	1f 93       	push	r17
    4dbc:	cf 93       	push	r28
    4dbe:	df 93       	push	r29
    4dc0:	86 9f       	mul	r24, r22
    4dc2:	80 01       	movw	r16, r0
    4dc4:	87 9f       	mul	r24, r23
    4dc6:	10 0d       	add	r17, r0
    4dc8:	96 9f       	mul	r25, r22
    4dca:	10 0d       	add	r17, r0
    4dcc:	11 24       	eor	r1, r1
    4dce:	c8 01       	movw	r24, r16
    4dd0:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <malloc>
    4dd4:	ec 01       	movw	r28, r24
    4dd6:	00 97       	sbiw	r24, 0x00	; 0
    4dd8:	29 f0       	breq	.+10     	; 0x4de4 <calloc+0x2c>
    4dda:	a8 01       	movw	r20, r16
    4ddc:	60 e0       	ldi	r22, 0x00	; 0
    4dde:	70 e0       	ldi	r23, 0x00	; 0
    4de0:	0e 94 25 28 	call	0x504a	; 0x504a <memset>
    4de4:	ce 01       	movw	r24, r28
    4de6:	df 91       	pop	r29
    4de8:	cf 91       	pop	r28
    4dea:	1f 91       	pop	r17
    4dec:	0f 91       	pop	r16
    4dee:	08 95       	ret

00004df0 <malloc>:
    4df0:	cf 93       	push	r28
    4df2:	df 93       	push	r29
    4df4:	82 30       	cpi	r24, 0x02	; 2
    4df6:	91 05       	cpc	r25, r1
    4df8:	10 f4       	brcc	.+4      	; 0x4dfe <malloc+0xe>
    4dfa:	82 e0       	ldi	r24, 0x02	; 2
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	e0 91 a2 06 	lds	r30, 0x06A2
    4e02:	f0 91 a3 06 	lds	r31, 0x06A3
    4e06:	20 e0       	ldi	r18, 0x00	; 0
    4e08:	30 e0       	ldi	r19, 0x00	; 0
    4e0a:	c0 e0       	ldi	r28, 0x00	; 0
    4e0c:	d0 e0       	ldi	r29, 0x00	; 0
    4e0e:	30 97       	sbiw	r30, 0x00	; 0
    4e10:	11 f1       	breq	.+68     	; 0x4e56 <malloc+0x66>
    4e12:	40 81       	ld	r20, Z
    4e14:	51 81       	ldd	r21, Z+1	; 0x01
    4e16:	48 17       	cp	r20, r24
    4e18:	59 07       	cpc	r21, r25
    4e1a:	c0 f0       	brcs	.+48     	; 0x4e4c <malloc+0x5c>
    4e1c:	48 17       	cp	r20, r24
    4e1e:	59 07       	cpc	r21, r25
    4e20:	61 f4       	brne	.+24     	; 0x4e3a <malloc+0x4a>
    4e22:	82 81       	ldd	r24, Z+2	; 0x02
    4e24:	93 81       	ldd	r25, Z+3	; 0x03
    4e26:	20 97       	sbiw	r28, 0x00	; 0
    4e28:	19 f0       	breq	.+6      	; 0x4e30 <malloc+0x40>
    4e2a:	9b 83       	std	Y+3, r25	; 0x03
    4e2c:	8a 83       	std	Y+2, r24	; 0x02
    4e2e:	2b c0       	rjmp	.+86     	; 0x4e86 <malloc+0x96>
    4e30:	90 93 a3 06 	sts	0x06A3, r25
    4e34:	80 93 a2 06 	sts	0x06A2, r24
    4e38:	26 c0       	rjmp	.+76     	; 0x4e86 <malloc+0x96>
    4e3a:	21 15       	cp	r18, r1
    4e3c:	31 05       	cpc	r19, r1
    4e3e:	19 f0       	breq	.+6      	; 0x4e46 <malloc+0x56>
    4e40:	42 17       	cp	r20, r18
    4e42:	53 07       	cpc	r21, r19
    4e44:	18 f4       	brcc	.+6      	; 0x4e4c <malloc+0x5c>
    4e46:	9a 01       	movw	r18, r20
    4e48:	be 01       	movw	r22, r28
    4e4a:	df 01       	movw	r26, r30
    4e4c:	ef 01       	movw	r28, r30
    4e4e:	02 80       	ldd	r0, Z+2	; 0x02
    4e50:	f3 81       	ldd	r31, Z+3	; 0x03
    4e52:	e0 2d       	mov	r30, r0
    4e54:	dc cf       	rjmp	.-72     	; 0x4e0e <malloc+0x1e>
    4e56:	21 15       	cp	r18, r1
    4e58:	31 05       	cpc	r19, r1
    4e5a:	09 f1       	breq	.+66     	; 0x4e9e <malloc+0xae>
    4e5c:	28 1b       	sub	r18, r24
    4e5e:	39 0b       	sbc	r19, r25
    4e60:	24 30       	cpi	r18, 0x04	; 4
    4e62:	31 05       	cpc	r19, r1
    4e64:	90 f4       	brcc	.+36     	; 0x4e8a <malloc+0x9a>
    4e66:	12 96       	adiw	r26, 0x02	; 2
    4e68:	8d 91       	ld	r24, X+
    4e6a:	9c 91       	ld	r25, X
    4e6c:	13 97       	sbiw	r26, 0x03	; 3
    4e6e:	61 15       	cp	r22, r1
    4e70:	71 05       	cpc	r23, r1
    4e72:	21 f0       	breq	.+8      	; 0x4e7c <malloc+0x8c>
    4e74:	fb 01       	movw	r30, r22
    4e76:	93 83       	std	Z+3, r25	; 0x03
    4e78:	82 83       	std	Z+2, r24	; 0x02
    4e7a:	04 c0       	rjmp	.+8      	; 0x4e84 <malloc+0x94>
    4e7c:	90 93 a3 06 	sts	0x06A3, r25
    4e80:	80 93 a2 06 	sts	0x06A2, r24
    4e84:	fd 01       	movw	r30, r26
    4e86:	32 96       	adiw	r30, 0x02	; 2
    4e88:	44 c0       	rjmp	.+136    	; 0x4f12 <malloc+0x122>
    4e8a:	fd 01       	movw	r30, r26
    4e8c:	e2 0f       	add	r30, r18
    4e8e:	f3 1f       	adc	r31, r19
    4e90:	81 93       	st	Z+, r24
    4e92:	91 93       	st	Z+, r25
    4e94:	22 50       	subi	r18, 0x02	; 2
    4e96:	31 09       	sbc	r19, r1
    4e98:	2d 93       	st	X+, r18
    4e9a:	3c 93       	st	X, r19
    4e9c:	3a c0       	rjmp	.+116    	; 0x4f12 <malloc+0x122>
    4e9e:	20 91 a0 06 	lds	r18, 0x06A0
    4ea2:	30 91 a1 06 	lds	r19, 0x06A1
    4ea6:	23 2b       	or	r18, r19
    4ea8:	41 f4       	brne	.+16     	; 0x4eba <malloc+0xca>
    4eaa:	20 91 14 02 	lds	r18, 0x0214
    4eae:	30 91 15 02 	lds	r19, 0x0215
    4eb2:	30 93 a1 06 	sts	0x06A1, r19
    4eb6:	20 93 a0 06 	sts	0x06A0, r18
    4eba:	20 91 12 02 	lds	r18, 0x0212
    4ebe:	30 91 13 02 	lds	r19, 0x0213
    4ec2:	21 15       	cp	r18, r1
    4ec4:	31 05       	cpc	r19, r1
    4ec6:	41 f4       	brne	.+16     	; 0x4ed8 <malloc+0xe8>
    4ec8:	2d b7       	in	r18, 0x3d	; 61
    4eca:	3e b7       	in	r19, 0x3e	; 62
    4ecc:	40 91 16 02 	lds	r20, 0x0216
    4ed0:	50 91 17 02 	lds	r21, 0x0217
    4ed4:	24 1b       	sub	r18, r20
    4ed6:	35 0b       	sbc	r19, r21
    4ed8:	e0 91 a0 06 	lds	r30, 0x06A0
    4edc:	f0 91 a1 06 	lds	r31, 0x06A1
    4ee0:	e2 17       	cp	r30, r18
    4ee2:	f3 07       	cpc	r31, r19
    4ee4:	a0 f4       	brcc	.+40     	; 0x4f0e <malloc+0x11e>
    4ee6:	2e 1b       	sub	r18, r30
    4ee8:	3f 0b       	sbc	r19, r31
    4eea:	28 17       	cp	r18, r24
    4eec:	39 07       	cpc	r19, r25
    4eee:	78 f0       	brcs	.+30     	; 0x4f0e <malloc+0x11e>
    4ef0:	ac 01       	movw	r20, r24
    4ef2:	4e 5f       	subi	r20, 0xFE	; 254
    4ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ef6:	24 17       	cp	r18, r20
    4ef8:	35 07       	cpc	r19, r21
    4efa:	48 f0       	brcs	.+18     	; 0x4f0e <malloc+0x11e>
    4efc:	4e 0f       	add	r20, r30
    4efe:	5f 1f       	adc	r21, r31
    4f00:	50 93 a1 06 	sts	0x06A1, r21
    4f04:	40 93 a0 06 	sts	0x06A0, r20
    4f08:	81 93       	st	Z+, r24
    4f0a:	91 93       	st	Z+, r25
    4f0c:	02 c0       	rjmp	.+4      	; 0x4f12 <malloc+0x122>
    4f0e:	e0 e0       	ldi	r30, 0x00	; 0
    4f10:	f0 e0       	ldi	r31, 0x00	; 0
    4f12:	cf 01       	movw	r24, r30
    4f14:	df 91       	pop	r29
    4f16:	cf 91       	pop	r28
    4f18:	08 95       	ret

00004f1a <free>:
    4f1a:	0f 93       	push	r16
    4f1c:	1f 93       	push	r17
    4f1e:	cf 93       	push	r28
    4f20:	df 93       	push	r29
    4f22:	00 97       	sbiw	r24, 0x00	; 0
    4f24:	09 f4       	brne	.+2      	; 0x4f28 <free+0xe>
    4f26:	8c c0       	rjmp	.+280    	; 0x5040 <free+0x126>
    4f28:	fc 01       	movw	r30, r24
    4f2a:	32 97       	sbiw	r30, 0x02	; 2
    4f2c:	13 82       	std	Z+3, r1	; 0x03
    4f2e:	12 82       	std	Z+2, r1	; 0x02
    4f30:	00 91 a2 06 	lds	r16, 0x06A2
    4f34:	10 91 a3 06 	lds	r17, 0x06A3
    4f38:	01 15       	cp	r16, r1
    4f3a:	11 05       	cpc	r17, r1
    4f3c:	81 f4       	brne	.+32     	; 0x4f5e <free+0x44>
    4f3e:	20 81       	ld	r18, Z
    4f40:	31 81       	ldd	r19, Z+1	; 0x01
    4f42:	82 0f       	add	r24, r18
    4f44:	93 1f       	adc	r25, r19
    4f46:	20 91 a0 06 	lds	r18, 0x06A0
    4f4a:	30 91 a1 06 	lds	r19, 0x06A1
    4f4e:	28 17       	cp	r18, r24
    4f50:	39 07       	cpc	r19, r25
    4f52:	79 f5       	brne	.+94     	; 0x4fb2 <free+0x98>
    4f54:	f0 93 a1 06 	sts	0x06A1, r31
    4f58:	e0 93 a0 06 	sts	0x06A0, r30
    4f5c:	71 c0       	rjmp	.+226    	; 0x5040 <free+0x126>
    4f5e:	d8 01       	movw	r26, r16
    4f60:	40 e0       	ldi	r20, 0x00	; 0
    4f62:	50 e0       	ldi	r21, 0x00	; 0
    4f64:	ae 17       	cp	r26, r30
    4f66:	bf 07       	cpc	r27, r31
    4f68:	50 f4       	brcc	.+20     	; 0x4f7e <free+0x64>
    4f6a:	12 96       	adiw	r26, 0x02	; 2
    4f6c:	2d 91       	ld	r18, X+
    4f6e:	3c 91       	ld	r19, X
    4f70:	13 97       	sbiw	r26, 0x03	; 3
    4f72:	ad 01       	movw	r20, r26
    4f74:	21 15       	cp	r18, r1
    4f76:	31 05       	cpc	r19, r1
    4f78:	09 f1       	breq	.+66     	; 0x4fbc <free+0xa2>
    4f7a:	d9 01       	movw	r26, r18
    4f7c:	f3 cf       	rjmp	.-26     	; 0x4f64 <free+0x4a>
    4f7e:	9d 01       	movw	r18, r26
    4f80:	da 01       	movw	r26, r20
    4f82:	33 83       	std	Z+3, r19	; 0x03
    4f84:	22 83       	std	Z+2, r18	; 0x02
    4f86:	60 81       	ld	r22, Z
    4f88:	71 81       	ldd	r23, Z+1	; 0x01
    4f8a:	86 0f       	add	r24, r22
    4f8c:	97 1f       	adc	r25, r23
    4f8e:	82 17       	cp	r24, r18
    4f90:	93 07       	cpc	r25, r19
    4f92:	69 f4       	brne	.+26     	; 0x4fae <free+0x94>
    4f94:	ec 01       	movw	r28, r24
    4f96:	28 81       	ld	r18, Y
    4f98:	39 81       	ldd	r19, Y+1	; 0x01
    4f9a:	26 0f       	add	r18, r22
    4f9c:	37 1f       	adc	r19, r23
    4f9e:	2e 5f       	subi	r18, 0xFE	; 254
    4fa0:	3f 4f       	sbci	r19, 0xFF	; 255
    4fa2:	31 83       	std	Z+1, r19	; 0x01
    4fa4:	20 83       	st	Z, r18
    4fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    4fa8:	9b 81       	ldd	r25, Y+3	; 0x03
    4faa:	93 83       	std	Z+3, r25	; 0x03
    4fac:	82 83       	std	Z+2, r24	; 0x02
    4fae:	45 2b       	or	r20, r21
    4fb0:	29 f4       	brne	.+10     	; 0x4fbc <free+0xa2>
    4fb2:	f0 93 a3 06 	sts	0x06A3, r31
    4fb6:	e0 93 a2 06 	sts	0x06A2, r30
    4fba:	42 c0       	rjmp	.+132    	; 0x5040 <free+0x126>
    4fbc:	13 96       	adiw	r26, 0x03	; 3
    4fbe:	fc 93       	st	X, r31
    4fc0:	ee 93       	st	-X, r30
    4fc2:	12 97       	sbiw	r26, 0x02	; 2
    4fc4:	ed 01       	movw	r28, r26
    4fc6:	49 91       	ld	r20, Y+
    4fc8:	59 91       	ld	r21, Y+
    4fca:	9e 01       	movw	r18, r28
    4fcc:	24 0f       	add	r18, r20
    4fce:	35 1f       	adc	r19, r21
    4fd0:	e2 17       	cp	r30, r18
    4fd2:	f3 07       	cpc	r31, r19
    4fd4:	71 f4       	brne	.+28     	; 0x4ff2 <free+0xd8>
    4fd6:	80 81       	ld	r24, Z
    4fd8:	91 81       	ldd	r25, Z+1	; 0x01
    4fda:	84 0f       	add	r24, r20
    4fdc:	95 1f       	adc	r25, r21
    4fde:	02 96       	adiw	r24, 0x02	; 2
    4fe0:	11 96       	adiw	r26, 0x01	; 1
    4fe2:	9c 93       	st	X, r25
    4fe4:	8e 93       	st	-X, r24
    4fe6:	82 81       	ldd	r24, Z+2	; 0x02
    4fe8:	93 81       	ldd	r25, Z+3	; 0x03
    4fea:	13 96       	adiw	r26, 0x03	; 3
    4fec:	9c 93       	st	X, r25
    4fee:	8e 93       	st	-X, r24
    4ff0:	12 97       	sbiw	r26, 0x02	; 2
    4ff2:	e0 e0       	ldi	r30, 0x00	; 0
    4ff4:	f0 e0       	ldi	r31, 0x00	; 0
    4ff6:	d8 01       	movw	r26, r16
    4ff8:	12 96       	adiw	r26, 0x02	; 2
    4ffa:	8d 91       	ld	r24, X+
    4ffc:	9c 91       	ld	r25, X
    4ffe:	13 97       	sbiw	r26, 0x03	; 3
    5000:	00 97       	sbiw	r24, 0x00	; 0
    5002:	19 f0       	breq	.+6      	; 0x500a <free+0xf0>
    5004:	f8 01       	movw	r30, r16
    5006:	8c 01       	movw	r16, r24
    5008:	f6 cf       	rjmp	.-20     	; 0x4ff6 <free+0xdc>
    500a:	8d 91       	ld	r24, X+
    500c:	9c 91       	ld	r25, X
    500e:	98 01       	movw	r18, r16
    5010:	2e 5f       	subi	r18, 0xFE	; 254
    5012:	3f 4f       	sbci	r19, 0xFF	; 255
    5014:	82 0f       	add	r24, r18
    5016:	93 1f       	adc	r25, r19
    5018:	20 91 a0 06 	lds	r18, 0x06A0
    501c:	30 91 a1 06 	lds	r19, 0x06A1
    5020:	28 17       	cp	r18, r24
    5022:	39 07       	cpc	r19, r25
    5024:	69 f4       	brne	.+26     	; 0x5040 <free+0x126>
    5026:	30 97       	sbiw	r30, 0x00	; 0
    5028:	29 f4       	brne	.+10     	; 0x5034 <free+0x11a>
    502a:	10 92 a3 06 	sts	0x06A3, r1
    502e:	10 92 a2 06 	sts	0x06A2, r1
    5032:	02 c0       	rjmp	.+4      	; 0x5038 <free+0x11e>
    5034:	13 82       	std	Z+3, r1	; 0x03
    5036:	12 82       	std	Z+2, r1	; 0x02
    5038:	10 93 a1 06 	sts	0x06A1, r17
    503c:	00 93 a0 06 	sts	0x06A0, r16
    5040:	df 91       	pop	r29
    5042:	cf 91       	pop	r28
    5044:	1f 91       	pop	r17
    5046:	0f 91       	pop	r16
    5048:	08 95       	ret

0000504a <memset>:
    504a:	dc 01       	movw	r26, r24
    504c:	01 c0       	rjmp	.+2      	; 0x5050 <memset+0x6>
    504e:	6d 93       	st	X+, r22
    5050:	41 50       	subi	r20, 0x01	; 1
    5052:	50 40       	sbci	r21, 0x00	; 0
    5054:	e0 f7       	brcc	.-8      	; 0x504e <memset+0x4>
    5056:	08 95       	ret

00005058 <_exit>:
    5058:	f8 94       	cli

0000505a <__stop_program>:
    505a:	ff cf       	rjmp	.-2      	; 0x505a <__stop_program>
