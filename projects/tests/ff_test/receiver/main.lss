
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ca  00800200  0000505a  000050ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000505a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000030d  008003ca  008003ca  000052b8  2**0
                  ALLOC
  3 .stab         0000ff0c  00000000  00000000  000052b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008d86  00000000  00000000  000151c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0001df4a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  0001df5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  0001f0bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  0002014a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 14 02 	jmp	0x428	; 0x428 <__ctors_end>
       4:	0c 94 a7 21 	jmp	0x434e	; 0x434e <__vector_1>
       8:	0c 94 d9 21 	jmp	0x43b2	; 0x43b2 <__vector_2>
       c:	0c 94 0b 22 	jmp	0x4416	; 0x4416 <__vector_3>
      10:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      14:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      18:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      1c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      20:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      24:	0c 94 75 21 	jmp	0x42ea	; 0x42ea <__vector_9>
      28:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      2c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      30:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      34:	0c 94 d4 1f 	jmp	0x3fa8	; 0x3fa8 <__vector_13>
      38:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      3c:	0c 94 d4 1f 	jmp	0x3fa8	; 0x3fa8 <__vector_13>
      40:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      44:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      48:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      4c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      50:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      54:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      58:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      5c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      60:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      64:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__vector_25>
      68:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      6c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      70:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      74:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      78:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      7c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      80:	0c 94 07 20 	jmp	0x400e	; 0x400e <__vector_32>
      84:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      88:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      8c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      90:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      94:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      98:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      9c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      a0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      a4:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      a8:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      ac:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      b0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      b4:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      b8:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      bc:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      c0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      c4:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      c8:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      cc:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      d0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      d4:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      d8:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      dc:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      e0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      e4:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_57>
      e8:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__vector_58>
      ec:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__vector_59>
      f0:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__vector_60>
      f4:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__vector_61>
      f8:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <__vector_62>
      fc:	0c 94 67 05 	jmp	0xace	; 0xace <__vector_63>
     100:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__vector_64>
     104:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     108:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     10c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     110:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     114:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     118:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     11c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     120:	95 08       	sbc	r9, r5
     122:	a2 08       	sbc	r10, r2
     124:	af 08       	sbc	r10, r15
     126:	bc 08       	sbc	r11, r12
     128:	c9 08       	sbc	r12, r9
     12a:	d6 08       	sbc	r13, r6
     12c:	e3 08       	sbc	r14, r3
     12e:	06 09       	sbc	r16, r6
     130:	14 09       	sbc	r17, r4
     132:	22 09       	sbc	r18, r2
     134:	30 09       	sbc	r19, r0
     136:	3e 09       	sbc	r19, r14
     138:	4c 09       	sbc	r20, r12
     13a:	5a 09       	sbc	r21, r10
     13c:	7d 09       	sbc	r23, r13
     13e:	7f 09       	sbc	r23, r15
     140:	81 09       	sbc	r24, r1
     142:	83 09       	sbc	r24, r3
     144:	85 09       	sbc	r24, r5
     146:	87 09       	sbc	r24, r7
     148:	89 09       	sbc	r24, r9
     14a:	a8 09       	sbc	r26, r8
     14c:	cb 09       	sbc	r28, r11
     14e:	ef 09       	sbc	r30, r15
     150:	12 0a       	sbc	r1, r18
     152:	35 0a       	sbc	r3, r21
     154:	58 0a       	sbc	r5, r24
     156:	7b 0a       	sbc	r7, r27
     158:	b5 0a       	sbc	r11, r21
     15a:	c2 0a       	sbc	r12, r18
     15c:	cf 0a       	sbc	r12, r31
     15e:	dc 0a       	sbc	r13, r28
     160:	e9 0a       	sbc	r14, r25
     162:	f6 0a       	sbc	r15, r22
     164:	03 0b       	sbc	r16, r19
     166:	1c 0b       	sbc	r17, r28
     168:	29 0b       	sbc	r18, r25
     16a:	36 0b       	sbc	r19, r22
     16c:	43 0b       	sbc	r20, r19
     16e:	50 0b       	sbc	r21, r16
     170:	5d 0b       	sbc	r21, r29
     172:	6a 0b       	sbc	r22, r26
     174:	3e 0f       	add	r19, r30
     176:	41 0f       	add	r20, r17
     178:	4c 0f       	add	r20, r28
     17a:	51 0f       	add	r21, r17
     17c:	58 0f       	add	r21, r24
     17e:	61 0f       	add	r22, r17
     180:	64 0f       	add	r22, r20
     182:	69 0f       	add	r22, r25
     184:	70 0f       	add	r23, r16
     186:	79 0f       	add	r23, r25
     188:	cf 0f       	add	r28, r31
     18a:	d5 0f       	add	r29, r21
     18c:	d8 0f       	add	r29, r24
     18e:	db 0f       	add	r29, r27
     190:	de 0f       	add	r29, r30
     192:	e1 0f       	add	r30, r17
     194:	e7 0f       	add	r30, r23
     196:	e4 0f       	add	r30, r20
     198:	ea 0f       	add	r30, r26
     19a:	ed 0f       	add	r30, r29
     19c:	f0 0f       	add	r31, r16
     19e:	f9 0f       	add	r31, r25
     1a0:	fc 0f       	add	r31, r28
     1a2:	ff 0f       	add	r31, r31
     1a4:	02 10       	cpse	r0, r2
     1a6:	f6 0f       	add	r31, r22
     1a8:	cc 0f       	add	r28, r28
     1aa:	d2 0f       	add	r29, r18
     1ac:	05 10       	cpse	r0, r5
     1ae:	08 10       	cpse	r0, r8
     1b0:	f3 0f       	add	r31, r19
     1b2:	c9 0f       	add	r28, r25

000001b4 <__trampolines_end>:
     1b4:	75 61       	ori	r23, 0x15	; 21
     1b6:	72 74       	andi	r23, 0x42	; 66
     1b8:	20 72       	andi	r18, 0x20	; 32
     1ba:	78 20       	and	r7, r8
     1bc:	73 69       	ori	r23, 0x93	; 147
     1be:	67 20       	and	r6, r7
     1c0:	66 61       	ori	r22, 0x16	; 22
     1c2:	69 6c       	ori	r22, 0xC9	; 201
     1c4:	65 64       	ori	r22, 0x45	; 69
     1c6:	0d 0a       	sbc	r0, r29
	...

000001c9 <__c.3388>:
     1c9:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000001d0 <__c.3385>:
     1d0:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000001df <__c.3382>:
     1df:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000001f0 <__c.3379>:
     1f0:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     200:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

0000020b <__c.3376>:
     20b:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     21b:	20 53 69 67 6e 61 6c 00                              Signal.

00000223 <__c.3373>:
     223:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     233:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000243 <__c.3370>:
     243:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     253:	72 6f 72 00                                         ror.

00000257 <__c.3367>:
     257:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000268 <__c.3364>:
     268:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     278:	61 72 74 00                                         art.

0000027c <__c.3361>:
     27c:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

0000028b <__c.3358>:
     28b:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     29b:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

000002a6 <__c.3355>:
     2a6:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

000002b2 <__c.3352>:
     2b2:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     2c2:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     2d2:	20 6f 6b 3f 00                                       ok?.

000002d7 <__c.3349>:
     2d7:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2e7:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002f5 <__c.3346>:
     2f5:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     305:	72 74 00                                            rt.

00000308 <__c.3343>:
     308:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     318:	49 44 00                                            ID.

0000031b <__c.3340>:
     31b:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     32b:	20 57 61 6b 65 75 70 00                              Wakeup.

00000333 <__c.3337>:
     333:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     343:	6c 61 74 65 64 00                                   lated.

00000349 <__c.3334>:
     349:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     359:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000364 <__c.3331>:
     364:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     374:	69 6e 74 65 72 00                                   inter.

0000037a <__c.3328>:
     37a:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     38a:	6c 6f 77 00                                         low.

0000038e <__c.3325>:
     38e:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     39e:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     3ae:	6e 6f 75 67 68 21 00                                nough!.

000003b5 <__c.3321>:
     3b5:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     3c5:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     3d5:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     3e5:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

000003f1 <__c.3318>:
     3f1:	29 3a 20 00                                         ): .

000003f5 <__c.3316>:
     3f5:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000401 <__c.3246>:
     401:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000410 <__c.2228>:
     410:	45 46 47 65 66 67 00                                EFGefg.

00000417 <__c.2222>:
     417:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

00000428 <__ctors_end>:
     428:	11 24       	eor	r1, r1
     42a:	1f be       	out	0x3f, r1	; 63
     42c:	cf ef       	ldi	r28, 0xFF	; 255
     42e:	d1 e4       	ldi	r29, 0x41	; 65
     430:	de bf       	out	0x3e, r29	; 62
     432:	cd bf       	out	0x3d, r28	; 61

00000434 <__do_copy_data>:
     434:	13 e0       	ldi	r17, 0x03	; 3
     436:	a0 e0       	ldi	r26, 0x00	; 0
     438:	b2 e0       	ldi	r27, 0x02	; 2
     43a:	ea e5       	ldi	r30, 0x5A	; 90
     43c:	f0 e5       	ldi	r31, 0x50	; 80
     43e:	00 e0       	ldi	r16, 0x00	; 0
     440:	0b bf       	out	0x3b, r16	; 59
     442:	02 c0       	rjmp	.+4      	; 0x448 <__do_copy_data+0x14>
     444:	07 90       	elpm	r0, Z+
     446:	0d 92       	st	X+, r0
     448:	aa 3c       	cpi	r26, 0xCA	; 202
     44a:	b1 07       	cpc	r27, r17
     44c:	d9 f7       	brne	.-10     	; 0x444 <__do_copy_data+0x10>

0000044e <__do_clear_bss>:
     44e:	16 e0       	ldi	r17, 0x06	; 6
     450:	aa ec       	ldi	r26, 0xCA	; 202
     452:	b3 e0       	ldi	r27, 0x03	; 3
     454:	01 c0       	rjmp	.+2      	; 0x458 <.do_clear_bss_start>

00000456 <.do_clear_bss_loop>:
     456:	1d 92       	st	X+, r1

00000458 <.do_clear_bss_start>:
     458:	a7 3d       	cpi	r26, 0xD7	; 215
     45a:	b1 07       	cpc	r27, r17
     45c:	e1 f7       	brne	.-8      	; 0x456 <.do_clear_bss_loop>
     45e:	0e 94 20 23 	call	0x4640	; 0x4640 <main>
     462:	0c 94 2b 28 	jmp	0x5056	; 0x5056 <_exit>

00000466 <__bad_interrupt>:
     466:	0c 94 ca 1f 	jmp	0x3f94	; 0x3f94 <__vector_default>

0000046a <rf_start_callback>:
RF_RX_INFO pRRI;
char buf[100];

void rf_start_callback()
{
	printf("received packet!\r\n");
     46a:	87 e6       	ldi	r24, 0x67	; 103
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <puts>
	nrk_led_toggle(BLUE_LED);
     472:	83 e0       	ldi	r24, 0x03	; 3
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <nrk_led_toggle>

0000047a <rf_finish_callback>:
}

void rf_finish_callback()
{
	if (rf_rx_packet_nonblock() != NRK_OK)
     47a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <rf_rx_packet_nonblock>
     47e:	81 30       	cpi	r24, 0x01	; 1
     480:	21 f0       	breq	.+8      	; 0x48a <rf_finish_callback+0x10>
		printf("failed to receive packet\r\n");
     482:	89 e7       	ldi	r24, 0x79	; 121
     484:	92 e0       	ldi	r25, 0x02	; 2
     486:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <puts>
	rf_rx_off();
     48a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <rf_rx_off>
	rf_rx_on();
     48e:	0c 94 4c 03 	jmp	0x698	; 0x698 <rf_rx_on>

00000492 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     492:	90 91 41 01 	lds	r25, 0x0141
     496:	9f 71       	andi	r25, 0x1F	; 31
     498:	9f 31       	cpi	r25, 0x1F	; 31
     49a:	d9 f3       	breq	.-10     	; 0x492 <rf_cmd>
		continue;
	TRX_STATE = cmd;
     49c:	80 93 42 01 	sts	0x0142, r24
     4a0:	08 95       	ret

000004a2 <set_wireless_prog>:
uint8_t reset_val[] = {0x43, 0x15, 0xa6, 0xd9, 0x3d, 0x31, 0x82, 0xf1, 0x8c, 0xa7, 0x4f, 0xc5, 0x99, 0x97, 0x04, 0xac};


void set_wireless_prog(uint8_t val)
{
   wireless_prog = val;
     4a2:	80 93 ca 03 	sts	0x03CA, r24
     4a6:	08 95       	ret

000004a8 <rf_enable_glossy>:
}

void rf_enable_glossy()
{
	use_glossy = 1;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	80 93 e7 04 	sts	0x04E7, r24
     4ae:	08 95       	ret

000004b0 <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
     4b0:	10 92 e7 04 	sts	0x04E7, r1
     4b4:	08 95       	ret

000004b6 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     4b6:	80 91 41 01 	lds	r24, 0x0141
     4ba:	8f 71       	andi	r24, 0x1F	; 31
     4bc:	8f 31       	cpi	r24, 0x1F	; 31
     4be:	d9 f3       	breq	.-10     	; 0x4b6 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     4c0:	80 91 41 01 	lds	r24, 0x0141
     4c4:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
     4c6:	e1 f0       	breq	.+56     	; 0x500 <rf_power_down+0x4a>
     4c8:	8f 30       	cpi	r24, 0x0F	; 15
     4ca:	d1 f0       	breq	.+52     	; 0x500 <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
     4cc:	80 91 41 01 	lds	r24, 0x0141
     4d0:	8f 71       	andi	r24, 0x1F	; 31
     4d2:	88 30       	cpi	r24, 0x08	; 8
     4d4:	31 f4       	brne	.+12     	; 0x4e2 <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
     4d6:	80 91 39 01 	lds	r24, 0x0139
     4da:	82 60       	ori	r24, 0x02	; 2
     4dc:	80 93 39 01 	sts	0x0139, r24
     4e0:	0b c0       	rjmp	.+22     	; 0x4f8 <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
     4e2:	88 e0       	ldi	r24, 0x08	; 8
     4e4:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
     4e8:	80 91 41 01 	lds	r24, 0x0141
     4ec:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
     4ee:	88 30       	cpi	r24, 0x08	; 8
     4f0:	d9 f7       	brne	.-10     	; 0x4e8 <rf_power_down+0x32>
     4f2:	f1 cf       	rjmp	.-30     	; 0x4d6 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
     4f4:	8f 30       	cpi	r24, 0x0F	; 15
     4f6:	21 f0       	breq	.+8      	; 0x500 <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
     4f8:	80 91 41 01 	lds	r24, 0x0141
     4fc:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
     4fe:	d1 f7       	brne	.-12     	; 0x4f4 <rf_power_down+0x3e>
     500:	08 95       	ret

00000502 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     502:	80 91 41 01 	lds	r24, 0x0141
     506:	8f 71       	andi	r24, 0x1F	; 31
     508:	8f 31       	cpi	r24, 0x1F	; 31
     50a:	d9 f3       	breq	.-10     	; 0x502 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     50c:	80 91 41 01 	lds	r24, 0x0141
     510:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
     512:	11 f0       	breq	.+4      	; 0x518 <rf_power_up+0x16>
     514:	8f 30       	cpi	r24, 0x0F	; 15
     516:	51 f4       	brne	.+20     	; 0x52c <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
     518:	80 91 39 01 	lds	r24, 0x0139
     51c:	8d 7f       	andi	r24, 0xFD	; 253
     51e:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
     522:	80 91 41 01 	lds	r24, 0x0141
     526:	8f 71       	andi	r24, 0x1F	; 31
     528:	88 30       	cpi	r24, 0x08	; 8
     52a:	d9 f7       	brne	.-10     	; 0x522 <rf_power_up+0x20>
     52c:	08 95       	ret

0000052e <rf_pll_on>:
	TRX_STATE = cmd;
}

void rf_pll_on()
{
   rf_cmd(PLL_ON);
     52e:	89 e0       	ldi	r24, 0x09	; 9
     530:	0c 94 49 02 	jmp	0x492	; 0x492 <rf_cmd>

00000534 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
     534:	e5 e4       	ldi	r30, 0x45	; 69
     536:	f1 e0       	ldi	r31, 0x01	; 1
     538:	90 81       	ld	r25, Z
     53a:	90 7f       	andi	r25, 0xF0	; 240
     53c:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
     53e:	90 81       	ld	r25, Z
     540:	8f 70       	andi	r24, 0x0F	; 15
     542:	98 2b       	or	r25, r24
     544:	90 83       	st	Z, r25
     546:	08 95       	ret

00000548 <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
     548:	e7 e5       	ldi	r30, 0x57	; 87
     54a:	f1 e0       	ldi	r31, 0x01	; 1
     54c:	80 81       	ld	r24, Z
     54e:	8d 7f       	andi	r24, 0xFD	; 253
     550:	80 83       	st	Z, r24
     552:	08 95       	ret

00000554 <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
     554:	e7 e5       	ldi	r30, 0x57	; 87
     556:	f1 e0       	ldi	r31, 0x01	; 1
     558:	80 81       	ld	r24, Z
     55a:	82 60       	ori	r24, 0x02	; 2
     55c:	80 83       	st	Z, r24
     55e:	08 95       	ret

00000560 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
     560:	ee e6       	ldi	r30, 0x6E	; 110
     562:	f1 e0       	ldi	r31, 0x01	; 1
     564:	80 81       	ld	r24, Z
     566:	8f 7e       	andi	r24, 0xEF	; 239
     568:	80 83       	st	Z, r24
     56a:	08 95       	ret

0000056c <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
     56c:	ee e6       	ldi	r30, 0x6E	; 110
     56e:	f1 e0       	ldi	r31, 0x01	; 1
     570:	80 81       	ld	r24, Z
     572:	80 61       	ori	r24, 0x10	; 16
     574:	80 83       	st	Z, r24
     576:	08 95       	ret

00000578 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
     578:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
     57c:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
     580:	90 93 f1 04 	sts	0x04F1, r25
     584:	80 93 f0 04 	sts	0x04F0, r24
     588:	08 95       	ret

0000058a <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
     58a:	90 93 eb 04 	sts	0x04EB, r25
     58e:	80 93 ea 04 	sts	0x04EA, r24
	PHY_CC_CCA &= ~(0x1F);
     592:	e8 e4       	ldi	r30, 0x48	; 72
     594:	f1 e0       	ldi	r31, 0x01	; 1
     596:	80 81       	ld	r24, Z
     598:	80 7e       	andi	r24, 0xE0	; 224
     59a:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
     59c:	80 81       	ld	r24, Z
     59e:	68 2b       	or	r22, r24
     5a0:	60 83       	st	Z, r22
     5a2:	08 95       	ret

000005a4 <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
     5a4:	90 93 ce 03 	sts	0x03CE, r25
     5a8:	80 93 cd 03 	sts	0x03CD, r24
     5ac:	08 95       	ret

000005ae <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
     5ae:	90 93 cc 03 	sts	0x03CC, r25
     5b2:	80 93 cb 03 	sts	0x03CB, r24
     5b6:	08 95       	ret

000005b8 <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	fc 01       	movw	r30, r24
     5c2:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
     5c4:	80 e2       	ldi	r24, 0x20	; 32
     5c6:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
     5ca:	80 ec       	ldi	r24, 0xC0	; 192
     5cc:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
     5d0:	60 62       	ori	r22, 0x20	; 32
     5d2:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
     5d6:	85 ec       	ldi	r24, 0xC5	; 197
     5d8:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
     5dc:	87 ea       	ldi	r24, 0xA7	; 167
     5de:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
     5e2:	80 e8       	ldi	r24, 0x80	; 128
     5e4:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
     5e8:	20 93 60 01 	sts	0x0160, r18
     5ec:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
     5f0:	40 93 62 01 	sts	0x0162, r20
     5f4:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     5f8:	c6 e4       	ldi	r28, 0x46	; 70
     5fa:	d1 e0       	ldi	r29, 0x01	; 1
     5fc:	08 81       	ld	r16, Y
     5fe:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     600:	98 81       	ld	r25, Y
     602:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     604:	30 2f       	mov	r19, r16
     606:	32 95       	swap	r19
     608:	36 95       	lsr	r19
     60a:	37 70       	andi	r19, 0x07	; 7
     60c:	60 e4       	ldi	r22, 0x40	; 64
     60e:	36 9f       	mul	r19, r22
     610:	80 01       	movw	r16, r0
     612:	11 24       	eor	r1, r1
     614:	22 95       	swap	r18
     616:	26 95       	lsr	r18
     618:	23 70       	andi	r18, 0x03	; 3
     61a:	62 2f       	mov	r22, r18
     61c:	60 2b       	or	r22, r16
     61e:	82 95       	swap	r24
     620:	86 95       	lsr	r24
     622:	83 70       	andi	r24, 0x03	; 3
     624:	70 e1       	ldi	r23, 0x10	; 16
     626:	87 9f       	mul	r24, r23
     628:	90 01       	movw	r18, r0
     62a:	11 24       	eor	r1, r1
     62c:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     62e:	92 95       	swap	r25
     630:	96 95       	lsr	r25
     632:	93 70       	andi	r25, 0x03	; 3
     634:	84 e0       	ldi	r24, 0x04	; 4
     636:	98 9f       	mul	r25, r24
     638:	b0 01       	movw	r22, r0
     63a:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     63c:	62 2b       	or	r22, r18
     63e:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     642:	88 81       	ld	r24, Y
     644:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     646:	92 95       	swap	r25
     648:	96 95       	lsr	r25
     64a:	93 70       	andi	r25, 0x03	; 3
     64c:	39 2f       	mov	r19, r25
     64e:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     650:	98 2f       	mov	r25, r24
     652:	92 95       	swap	r25
     654:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     656:	93 2b       	or	r25, r19
     658:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
     65c:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
   
   /* Enable all radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
     660:	8f ef       	ldi	r24, 0xFF	; 255
     662:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
     666:	ca ee       	ldi	r28, 0xEA	; 234
     668:	d4 e0       	ldi	r29, 0x04	; 4
     66a:	f9 83       	std	Y+1, r31	; 0x01
     66c:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
     66e:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
     670:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
     672:	5d 83       	std	Y+5, r21	; 0x05
     674:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
     676:	bf 83       	std	Y+7, r27	; 0x07
     678:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
     67a:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	80 93 04 05 	sts	0x0504, r24
   rx_ready = 0;
     682:	10 92 1b 05 	sts	0x051B, r1
   tx_done = 0;
     686:	10 92 f3 04 	sts	0x04F3, r1

	use_glossy = 0;
     68a:	10 92 e7 04 	sts	0x04E7, r1

} // rf_init() 
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	1f 91       	pop	r17
     694:	0f 91       	pop	r16
     696:	08 95       	ret

00000698 <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
     698:	86 e1       	ldi	r24, 0x16	; 22
     69a:	0c 94 49 02 	jmp	0x492	; 0x492 <rf_cmd>

0000069e <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
     69e:	86 e1       	ldi	r24, 0x16	; 22
     6a0:	0c 94 49 02 	jmp	0x492	; 0x492 <rf_cmd>

000006a4 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
   rf_cmd(TRX_OFF);
     6a4:	88 e0       	ldi	r24, 0x08	; 8
     6a6:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
   rx_ready = 0;
     6aa:	10 92 1b 05 	sts	0x051B, r1
     6ae:	08 95       	ret

000006b0 <rf_tx_packet>:
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------


uint8_t rf_tx_packet(RF_TX_INFO *pRTI)
{
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	fc 01       	movw	r30, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
     6ba:	80 91 04 05 	lds	r24, 0x0504
     6be:	81 11       	cpse	r24, r1
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <rf_tx_packet+0x16>
		return NRK_ERROR;
     6c2:	8f ef       	ldi	r24, 0xFF	; 255
     6c4:	ab c0       	rjmp	.+342    	; 0x81c <rf_tx_packet+0x16c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
     6c6:	26 81       	ldd	r18, Z+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     6c8:	80 91 ec 04 	lds	r24, 0x04EC
     6cc:	8f 5f       	subi	r24, 0xFF	; 255
     6ce:	80 93 ec 04 	sts	0x04EC, r24
	machead->fcf = fcf;
     6d2:	90 91 81 01 	lds	r25, 0x0181
     6d6:	90 7e       	andi	r25, 0xE0	; 224
     6d8:	91 60       	ori	r25, 0x01	; 1
     6da:	20 fb       	bst	r18, 0
     6dc:	95 f9       	bld	r25, 5
     6de:	9f 73       	andi	r25, 0x3F	; 63
     6e0:	90 64       	ori	r25, 0x40	; 64
     6e2:	90 93 81 01 	sts	0x0181, r25
     6e6:	88 e8       	ldi	r24, 0x88	; 136
     6e8:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
     6ec:	80 91 e7 04 	lds	r24, 0x04E7
     6f0:	88 23       	and	r24, r24
     6f2:	61 f0       	breq	.+24     	; 0x70c <rf_tx_packet+0x5c>
		machead->seq_num = 0xFF;
     6f4:	8f ef       	ldi	r24, 0xFF	; 255
     6f6:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
     6fa:	8a ea       	ldi	r24, 0xAA	; 170
     6fc:	9a ea       	ldi	r25, 0xAA	; 170
     6fe:	90 93 89 01 	sts	0x0189, r25
     702:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
     706:	8f ef       	ldi	r24, 0xFF	; 255
     708:	9f ef       	ldi	r25, 0xFF	; 255
     70a:	10 c0       	rjmp	.+32     	; 0x72c <rf_tx_packet+0x7c>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
     70c:	80 91 ec 04 	lds	r24, 0x04EC
     710:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
     714:	20 91 61 01 	lds	r18, 0x0161
     718:	80 91 60 01 	lds	r24, 0x0160
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	92 2b       	or	r25, r18
     720:	90 93 89 01 	sts	0x0189, r25
     724:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = pRTI->destAddr;
     728:	80 81       	ld	r24, Z
     72a:	91 81       	ldd	r25, Z+1	; 0x01
     72c:	90 93 87 01 	sts	0x0187, r25
     730:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
     734:	20 91 63 01 	lds	r18, 0x0163
     738:	80 91 62 01 	lds	r24, 0x0162
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	92 2b       	or	r25, r18
     740:	90 93 85 01 	sts	0x0185, r25
     744:	80 93 84 01 	sts	0x0184, r24
     748:	8f 01       	movw	r16, r30
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
     74a:	42 81       	ldd	r20, Z+2	; 0x02
     74c:	55 27       	eor	r21, r21
     74e:	47 fd       	sbrc	r20, 7
     750:	50 95       	com	r21
     752:	63 81       	ldd	r22, Z+3	; 0x03
     754:	74 81       	ldd	r23, Z+4	; 0x04
     756:	8a e8       	ldi	r24, 0x8A	; 138
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
     75e:	f8 01       	movw	r30, r16
     760:	82 81       	ldd	r24, Z+2	; 0x02
     762:	85 5f       	subi	r24, 0xF5	; 245
     764:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     768:	80 91 41 01 	lds	r24, 0x0141
     76c:	d8 2f       	mov	r29, r24
     76e:	df 71       	andi	r29, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     770:	9f ef       	ldi	r25, 0xFF	; 255
     772:	9d 0f       	add	r25, r29
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     774:	92 30       	cpi	r25, 0x02	; 2
     776:	c0 f3       	brcs	.-16     	; 0x768 <rf_tx_packet+0xb8>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     778:	d1 31       	cpi	r29, 0x11	; 17
     77a:	b1 f3       	breq	.-20     	; 0x768 <rf_tx_packet+0xb8>
     77c:	d2 31       	cpi	r29, 0x12	; 18
     77e:	a1 f3       	breq	.-24     	; 0x768 <rf_tx_packet+0xb8>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     780:	df 31       	cpi	r29, 0x1F	; 31
     782:	91 f3       	breq	.-28     	; 0x768 <rf_tx_packet+0xb8>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     784:	98 ef       	ldi	r25, 0xF8	; 248
     786:	9d 0f       	add	r25, r29
     788:	92 30       	cpi	r25, 0x02	; 2
     78a:	20 f0       	brcs	.+8      	; 0x794 <rf_tx_packet+0xe4>
     78c:	8f 70       	andi	r24, 0x0F	; 15
     78e:	86 30       	cpi	r24, 0x06	; 6
     790:	09 f0       	breq	.+2      	; 0x794 <rf_tx_packet+0xe4>
     792:	97 cf       	rjmp	.-210    	; 0x6c2 <rf_tx_packet+0x12>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
     794:	86 e1       	ldi	r24, 0x16	; 22
     796:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
     79a:	f8 01       	movw	r30, r16
     79c:	85 81       	ldd	r24, Z+5	; 0x05
     79e:	81 11       	cpse	r24, r1
     7a0:	0b c0       	rjmp	.+22     	; 0x7b8 <rf_tx_packet+0x108>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
     7a2:	89 e0       	ldi	r24, 0x09	; 9
     7a4:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
	if(pRTI->ackRequest)
     7a8:	f8 01       	movw	r30, r16
     7aa:	86 81       	ldd	r24, Z+6	; 0x06
     7ac:	88 23       	and	r24, r24
     7ae:	91 f0       	breq	.+36     	; 0x7d4 <rf_tx_packet+0x124>
		rf_cmd(TX_ARET_ON);
     7b0:	89 e1       	ldi	r24, 0x19	; 25
     7b2:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
     7b6:	0e c0       	rjmp	.+28     	; 0x7d4 <rf_tx_packet+0x124>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
     7b8:	80 91 48 01 	lds	r24, 0x0148
     7bc:	80 68       	ori	r24, 0x80	; 128
     7be:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
     7c2:	80 91 41 01 	lds	r24, 0x0141
     7c6:	87 ff       	sbrs	r24, 7
     7c8:	fc cf       	rjmp	.-8      	; 0x7c2 <rf_tx_packet+0x112>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
     7ca:	80 91 41 01 	lds	r24, 0x0141
     7ce:	86 ff       	sbrs	r24, 6
     7d0:	78 cf       	rjmp	.-272    	; 0x6c2 <rf_tx_packet+0x12>
     7d2:	e7 cf       	rjmp	.-50     	; 0x7a2 <rf_tx_packet+0xf2>
	
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

   tx_done = 0;
     7d4:	10 92 f3 04 	sts	0x04F3, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
   for(i=0; (i<65000) && !tx_done; i++){
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	20 91 f3 04 	lds	r18, 0x04F3
     7e6:	21 11       	cpse	r18, r1
     7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <rf_tx_packet+0x144>
     7ea:	01 96       	adiw	r24, 0x01	; 1
     7ec:	88 3e       	cpi	r24, 0xE8	; 232
     7ee:	fd ef       	ldi	r31, 0xFD	; 253
     7f0:	9f 07       	cpc	r25, r31
     7f2:	b9 f7       	brne	.-18     	; 0x7e2 <rf_tx_packet+0x132>
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     7f4:	f8 01       	movw	r30, r16
     7f6:	26 81       	ldd	r18, Z+6	; 0x06
     7f8:	22 23       	and	r18, r18
     7fa:	31 f0       	breq	.+12     	; 0x808 <rf_tx_packet+0x158>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
     7fc:	20 91 42 01 	lds	r18, 0x0142
     800:	22 95       	swap	r18
     802:	26 95       	lsr	r18
     804:	27 70       	andi	r18, 0x07	; 7
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     806:	29 f4       	brne	.+10     	; 0x812 <rf_tx_packet+0x162>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
     808:	88 3e       	cpi	r24, 0xE8	; 232
     80a:	9d 4f       	sbci	r25, 0xFD	; 253
     80c:	11 f0       	breq	.+4      	; 0x812 <rf_tx_packet+0x162>
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     80e:	c1 e0       	ldi	r28, 0x01	; 1
     810:	01 c0       	rjmp	.+2      	; 0x814 <rf_tx_packet+0x164>
     812:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
     814:	8d 2f       	mov	r24, r29
     816:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
     81a:	8c 2f       	mov	r24, r28
}
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	08 95       	ret

00000826 <rf_tx_pkt_blocking>:

uint8_t rf_tx_pkt_blocking(RF_TX_INFO *pRTI)
{
	uint16_t count = 0;
	rf_tx_packet(pRTI);
     826:	0e 94 58 03 	call	0x6b0	; 0x6b0 <rf_tx_packet>
	while (!tx_done){
     82a:	89 e8       	ldi	r24, 0x89	; 137
     82c:	93 e1       	ldi	r25, 0x13	; 19
     82e:	20 91 f3 04 	lds	r18, 0x04F3
     832:	21 11       	cpse	r18, r1
     834:	04 c0       	rjmp	.+8      	; 0x83e <rf_tx_pkt_blocking+0x18>
     836:	01 97       	sbiw	r24, 0x01	; 1
		count += 1;
		if (count > 5000)//~1ms timeout
     838:	d1 f7       	brne	.-12     	; 0x82e <rf_tx_pkt_blocking+0x8>
			return NRK_ERROR;
     83a:	8f ef       	ldi	r24, 0xFF	; 255
	}
	return NRK_OK;
}
     83c:	08 95       	ret
	while (!tx_done){
		count += 1;
		if (count > 5000)//~1ms timeout
			return NRK_ERROR;
	}
	return NRK_OK;
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	08 95       	ret

00000842 <rf_tx_packet_resend>:
uint8_t rf_tx_packet_resend()
{
   uint8_t trx_error;
   uint16_t i;

   tx_done = 0;
     842:	10 92 f3 04 	sts	0x04F3, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
     846:	82 e0       	ldi	r24, 0x02	; 2
     848:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
     84c:	88 ee       	ldi	r24, 0xE8	; 232
     84e:	9d ef       	ldi	r25, 0xFD	; 253
   for(i=0; (i<65000) && !tx_done; i++)
     850:	20 91 f3 04 	lds	r18, 0x04F3
     854:	21 11       	cpse	r18, r1
     856:	04 c0       	rjmp	.+8      	; 0x860 <rf_tx_packet_resend+0x1e>
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	d1 f7       	brne	.-12     	; 0x850 <rf_tx_packet_resend+0xe>
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
     85c:	8f ef       	ldi	r24, 0xFF	; 255

   return trx_error;
}
     85e:	08 95       	ret
   tx_done = 0;
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
   for(i=0; (i<65000) && !tx_done; i++)
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	08 95       	ret

00000864 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
     868:	80 91 04 05 	lds	r24, 0x0504
     86c:	88 23       	and	r24, r24
     86e:	41 f1       	breq	.+80     	; 0x8c0 <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     870:	80 91 41 01 	lds	r24, 0x0141
     874:	c8 2f       	mov	r28, r24
     876:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     878:	9f ef       	ldi	r25, 0xFF	; 255
     87a:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     87c:	92 30       	cpi	r25, 0x02	; 2
     87e:	c0 f3       	brcs	.-16     	; 0x870 <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     880:	c1 31       	cpi	r28, 0x11	; 17
     882:	b1 f3       	breq	.-20     	; 0x870 <rf_cca_check+0xc>
     884:	c2 31       	cpi	r28, 0x12	; 18
     886:	a1 f3       	breq	.-24     	; 0x870 <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     888:	cf 31       	cpi	r28, 0x1F	; 31
     88a:	91 f3       	breq	.-28     	; 0x870 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     88c:	c8 30       	cpi	r28, 0x08	; 8
     88e:	19 f0       	breq	.+6      	; 0x896 <rf_cca_check+0x32>
     890:	8f 70       	andi	r24, 0x0F	; 15
     892:	86 30       	cpi	r24, 0x06	; 6
     894:	a9 f4       	brne	.+42     	; 0x8c0 <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
     896:	86 e1       	ldi	r24, 0x16	; 22
     898:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
     89c:	80 91 48 01 	lds	r24, 0x0148
     8a0:	80 68       	ori	r24, 0x80	; 128
     8a2:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
     8a6:	80 91 41 01 	lds	r24, 0x0141
     8aa:	87 ff       	sbrs	r24, 7
     8ac:	fc cf       	rjmp	.-8      	; 0x8a6 <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     8ae:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
     8b2:	8c 2f       	mov	r24, r28
     8b4:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     8b8:	d6 fb       	bst	r29, 6
     8ba:	88 27       	eor	r24, r24
     8bc:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
     8c0:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready){
     8c8:	80 91 04 05 	lds	r24, 0x0504
     8cc:	81 11       	cpse	r24, r1
     8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <rf_rx_packet_nonblock+0xe>
		printf("rf not ready\r\n");
     8d0:	8c ea       	ldi	r24, 0xAC	; 172
     8d2:	92 e0       	ldi	r25, 0x02	; 2
     8d4:	1b c0       	rjmp	.+54     	; 0x90c <rf_rx_packet_nonblock+0x44>
		return NRK_ERROR;
	}
   if(!rx_ready){
     8d6:	80 91 1b 05 	lds	r24, 0x051B
     8da:	81 11       	cpse	r24, r1
     8dc:	06 c0       	rjmp	.+12     	; 0x8ea <rf_rx_packet_nonblock+0x22>
	   printf("rx not ready\r\n");
     8de:	8a eb       	ldi	r24, 0xBA	; 186
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <puts>
      return 0;
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	08 95       	ret
   }
   else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length){
     8ea:	80 91 7b 01 	lds	r24, 0x017B
     8ee:	e0 91 ea 04 	lds	r30, 0x04EA
     8f2:	f0 91 eb 04 	lds	r31, 0x04EB
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	02 97       	sbiw	r24, 0x02	; 2
     8fa:	24 81       	ldd	r18, Z+4	; 0x04
     8fc:	33 27       	eor	r19, r19
     8fe:	27 fd       	sbrc	r18, 7
     900:	30 95       	com	r19
     902:	28 17       	cp	r18, r24
     904:	39 07       	cpc	r19, r25
     906:	34 f4       	brge	.+12     	; 0x914 <rf_rx_packet_nonblock+0x4c>
	   	printf("length too great\r\n");
     908:	88 ec       	ldi	r24, 0xC8	; 200
     90a:	92 e0       	ldi	r25, 0x02	; 2
     90c:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <puts>
		return NRK_ERROR;
     910:	8f ef       	ldi	r24, 0xFF	; 255
     912:	08 95       	ret
	}

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
     914:	e0 91 ea 04 	lds	r30, 0x04EA
     918:	f0 91 eb 04 	lds	r31, 0x04EB
     91c:	80 91 82 01 	lds	r24, 0x0182
     920:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
     922:	e0 91 ea 04 	lds	r30, 0x04EA
     926:	f0 91 eb 04 	lds	r31, 0x04EB
     92a:	80 91 87 01 	lds	r24, 0x0187
     92e:	90 91 88 01 	lds	r25, 0x0188
     932:	92 83       	std	Z+2, r25	; 0x02
     934:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
     936:	e0 91 ea 04 	lds	r30, 0x04EA
     93a:	f0 91 eb 04 	lds	r31, 0x04EB
     93e:	80 91 7b 01 	lds	r24, 0x017B
     942:	8b 50       	subi	r24, 0x0B	; 11
     944:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
     946:	a0 91 ea 04 	lds	r26, 0x04EA
     94a:	b0 91 eb 04 	lds	r27, 0x04EB
     94e:	e0 91 ea 04 	lds	r30, 0x04EA
     952:	f0 91 eb 04 	lds	r31, 0x04EB
     956:	13 96       	adiw	r26, 0x03	; 3
     958:	9c 91       	ld	r25, X
     95a:	84 81       	ldd	r24, Z+4	; 0x04
     95c:	89 17       	cp	r24, r25
     95e:	3c f0       	brlt	.+14     	; 0x96e <rf_rx_packet_nonblock+0xa6>
			|| (rfSettings.pRxInfo->length < 0)){
     960:	e0 91 ea 04 	lds	r30, 0x04EA
     964:	f0 91 eb 04 	lds	r31, 0x04EB
     968:	83 81       	ldd	r24, Z+3	; 0x03
     96a:	87 ff       	sbrs	r24, 7
     96c:	0f c0       	rjmp	.+30     	; 0x98c <rf_rx_packet_nonblock+0xc4>
		rx_ready = 0;
     96e:	10 92 1b 05 	sts	0x051B, r1
      	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     972:	80 91 4c 01 	lds	r24, 0x014C
     976:	8f 77       	andi	r24, 0x7F	; 127
     978:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     97c:	80 91 4c 01 	lds	r24, 0x014C
     980:	80 68       	ori	r24, 0x80	; 128
     982:	80 93 4c 01 	sts	0x014C, r24
		printf("incorrect length setting in rf settings\r\n");
     986:	8a ed       	ldi	r24, 0xDA	; 218
     988:	92 e0       	ldi	r25, 0x02	; 2
     98a:	c0 cf       	rjmp	.-128    	; 0x90c <rf_rx_packet_nonblock+0x44>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
     98c:	a0 91 ea 04 	lds	r26, 0x04EA
     990:	b0 91 eb 04 	lds	r27, 0x04EB
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		printf("incorrect length setting in rf settings\r\n");
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
     994:	e0 91 ea 04 	lds	r30, 0x04EA
     998:	f0 91 eb 04 	lds	r31, 0x04EB
     99c:	13 96       	adiw	r26, 0x03	; 3
     99e:	4c 91       	ld	r20, X
     9a0:	55 27       	eor	r21, r21
     9a2:	47 fd       	sbrc	r20, 7
     9a4:	50 95       	com	r21
     9a6:	69 e8       	ldi	r22, 0x89	; 137
     9a8:	71 e0       	ldi	r23, 0x01	; 1
     9aa:	85 81       	ldd	r24, Z+5	; 0x05
     9ac:	96 81       	ldd	r25, Z+6	; 0x06
     9ae:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);

   /* if reset packet received, perform reset */
   if(wireless_prog && (rfSettings.pRxInfo->length == 16)){
     9b2:	80 91 ca 03 	lds	r24, 0x03CA
     9b6:	88 23       	and	r24, r24
     9b8:	09 f4       	brne	.+2      	; 0x9bc <rf_rx_packet_nonblock+0xf4>
     9ba:	3e c0       	rjmp	.+124    	; 0xa38 <rf_rx_packet_nonblock+0x170>
     9bc:	e0 91 ea 04 	lds	r30, 0x04EA
     9c0:	f0 91 eb 04 	lds	r31, 0x04EB
     9c4:	83 81       	ldd	r24, Z+3	; 0x03
     9c6:	80 31       	cpi	r24, 0x10	; 16
     9c8:	b9 f5       	brne	.+110    	; 0xa38 <rf_rx_packet_nonblock+0x170>
      if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 4) == 0){
     9ca:	e0 91 ea 04 	lds	r30, 0x04EA
     9ce:	f0 91 eb 04 	lds	r31, 0x04EB
     9d2:	65 81       	ldd	r22, Z+5	; 0x05
     9d4:	76 81       	ldd	r23, Z+6	; 0x06
     9d6:	44 e0       	ldi	r20, 0x04	; 4
     9d8:	50 e0       	ldi	r21, 0x00	; 0
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	92 e0       	ldi	r25, 0x02	; 2
     9de:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <strncmp>
     9e2:	89 2b       	or	r24, r25
     9e4:	49 f5       	brne	.+82     	; 0xa38 <rf_rx_packet_nonblock+0x170>
         if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 16) == 0){
     9e6:	e0 91 ea 04 	lds	r30, 0x04EA
     9ea:	f0 91 eb 04 	lds	r31, 0x04EB
     9ee:	65 81       	ldd	r22, Z+5	; 0x05
     9f0:	76 81       	ldd	r23, Z+6	; 0x06
     9f2:	40 e1       	ldi	r20, 0x10	; 16
     9f4:	50 e0       	ldi	r21, 0x00	; 0
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	92 e0       	ldi	r25, 0x02	; 2
     9fa:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <strncmp>
     9fe:	89 2b       	or	r24, r25
     a00:	d9 f4       	brne	.+54     	; 0xa38 <rf_rx_packet_nonblock+0x170>
            wdt_enable(WDTO_500MS);
     a02:	9d e0       	ldi	r25, 0x0D	; 13
     a04:	88 e1       	ldi	r24, 0x18	; 24
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	a8 95       	wdr
     a0c:	80 93 60 00 	sts	0x0060, r24
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	90 93 60 00 	sts	0x0060, r25
            nrk_led_set(0);
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <nrk_led_set>
            nrk_led_set(1);
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 b2 0b 	call	0x1764	; 0x1764 <nrk_led_set>
            nrk_led_set(2);
     a26:	82 e0       	ldi	r24, 0x02	; 2
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 b2 0b 	call	0x1764	; 0x1764 <nrk_led_set>
            nrk_led_set(3);
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 b2 0b 	call	0x1764	; 0x1764 <nrk_led_set>
            while(1)
               continue;
     a36:	ff cf       	rjmp	.-2      	; 0xa36 <rf_rx_packet_nonblock+0x16e>
      }
   }

	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
     a38:	e0 91 ea 04 	lds	r30, 0x04EA
     a3c:	f0 91 eb 04 	lds	r31, 0x04EB
     a40:	80 91 80 01 	lds	r24, 0x0180
     a44:	85 fb       	bst	r24, 5
     a46:	88 27       	eor	r24, r24
     a48:	80 f9       	bld	r24, 0
     a4a:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
     a4c:	e0 91 ea 04 	lds	r30, 0x04EA
     a50:	f0 91 eb 04 	lds	r31, 0x04EB
     a54:	80 91 47 01 	lds	r24, 0x0147
     a58:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
     a5a:	e0 91 ea 04 	lds	r30, 0x04EA
     a5e:	f0 91 eb 04 	lds	r31, 0x04EB
     a62:	80 91 46 01 	lds	r24, 0x0146
     a66:	86 95       	lsr	r24
     a68:	86 95       	lsr	r24
     a6a:	86 95       	lsr	r24
     a6c:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
     a6e:	e0 91 ea 04 	lds	r30, 0x04EA
     a72:	f0 91 eb 04 	lds	r31, 0x04EB
     a76:	80 91 47 01 	lds	r24, 0x0147
     a7a:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
     a7c:	a0 91 ea 04 	lds	r26, 0x04EA
     a80:	b0 91 eb 04 	lds	r27, 0x04EB
     a84:	e0 91 7b 01 	lds	r30, 0x017B
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	e0 58       	subi	r30, 0x80	; 128
     a8c:	fe 4f       	sbci	r31, 0xFE	; 254
     a8e:	80 81       	ld	r24, Z
     a90:	1b 96       	adiw	r26, 0x0b	; 11
     a92:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
     a94:	10 92 1b 05 	sts	0x051B, r1
   TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     a98:	80 91 4c 01 	lds	r24, 0x014C
     a9c:	8f 77       	andi	r24, 0x7F	; 127
     a9e:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     aa2:	80 91 4c 01 	lds	r24, 0x014C
     aa6:	80 68       	ori	r24, 0x80	; 128
     aa8:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
     aac:	81 e0       	ldi	r24, 0x01	; 1
}
     aae:	08 95       	ret

00000ab0 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
     ab0:	1f 92       	push	r1
     ab2:	0f 92       	push	r0
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	0f 92       	push	r0
     ab8:	11 24       	eor	r1, r1
     aba:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
     abc:	80 e8       	ldi	r24, 0x80	; 128
     abe:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     ac2:	8f 91       	pop	r24
     ac4:	0f 90       	pop	r0
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	0f 90       	pop	r0
     aca:	1f 90       	pop	r1
     acc:	18 95       	reti

00000ace <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
     ace:	1f 92       	push	r1
     ad0:	0f 92       	push	r0
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	0f 92       	push	r0
     ad6:	11 24       	eor	r1, r1
     ad8:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	80 93 f3 04 	sts	0x04F3, r24
   IRQ_STATUS = (1 << TX_END);
     ae0:	80 e4       	ldi	r24, 0x40	; 64
     ae2:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
     ae6:	8f 91       	pop	r24
     ae8:	0f 90       	pop	r0
     aea:	0f be       	out	0x3f, r0	; 63
     aec:	0f 90       	pop	r0
     aee:	1f 90       	pop	r1
     af0:	18 95       	reti

00000af2 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
     af2:	1f 92       	push	r1
     af4:	0f 92       	push	r0
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	0f 92       	push	r0
     afa:	11 24       	eor	r1, r1
     afc:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
     afe:	80 e2       	ldi	r24, 0x20	; 32
     b00:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     b04:	8f 91       	pop	r24
     b06:	0f 90       	pop	r0
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	0f 90       	pop	r0
     b0c:	1f 90       	pop	r1
     b0e:	18 95       	reti

00000b10 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	0f 92       	push	r0
     b18:	11 24       	eor	r1, r1
     b1a:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
     b1c:	80 e1       	ldi	r24, 0x10	; 16
     b1e:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     b22:	8f 91       	pop	r24
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	0b b6       	in	r0, 0x3b	; 59
     b3a:	0f 92       	push	r0
     b3c:	2f 93       	push	r18
     b3e:	3f 93       	push	r19
     b40:	4f 93       	push	r20
     b42:	5f 93       	push	r21
     b44:	6f 93       	push	r22
     b46:	7f 93       	push	r23
     b48:	8f 93       	push	r24
     b4a:	9f 93       	push	r25
     b4c:	af 93       	push	r26
     b4e:	bf 93       	push	r27
     b50:	ef 93       	push	r30
     b52:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
     b54:	84 e0       	ldi	r24, 0x04	; 4
     b56:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
     b5a:	e0 91 cd 03 	lds	r30, 0x03CD
     b5e:	f0 91 ce 03 	lds	r31, 0x03CE
     b62:	30 97       	sbiw	r30, 0x00	; 0
     b64:	09 f0       	breq	.+2      	; 0xb68 <__vector_59+0x3a>
		rx_start_func();
     b66:	09 95       	icall

	return;
}
     b68:	ff 91       	pop	r31
     b6a:	ef 91       	pop	r30
     b6c:	bf 91       	pop	r27
     b6e:	af 91       	pop	r26
     b70:	9f 91       	pop	r25
     b72:	8f 91       	pop	r24
     b74:	7f 91       	pop	r23
     b76:	6f 91       	pop	r22
     b78:	5f 91       	pop	r21
     b7a:	4f 91       	pop	r20
     b7c:	3f 91       	pop	r19
     b7e:	2f 91       	pop	r18
     b80:	0f 90       	pop	r0
     b82:	0b be       	out	0x3b, r0	; 59
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	0f 90       	pop	r0
     b8a:	1f 90       	pop	r1
     b8c:	18 95       	reti

00000b8e <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
     b8e:	1f 92       	push	r1
     b90:	0f 92       	push	r0
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	0f 92       	push	r0
     b96:	11 24       	eor	r1, r1
     b98:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     ba0:	8f 91       	pop	r24
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     bbe:	8f 91       	pop	r24
     bc0:	0f 90       	pop	r0
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	0f 90       	pop	r0
     bc6:	1f 90       	pop	r1
     bc8:	18 95       	reti

00000bca <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
     bca:	e9 e4       	ldi	r30, 0x49	; 73
     bcc:	f1 e0       	ldi	r31, 0x01	; 1
     bce:	90 81       	ld	r25, Z
     bd0:	90 7f       	andi	r25, 0xF0	; 240
     bd2:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
     bd4:	90 81       	ld	r25, Z
     bd6:	8f 70       	andi	r24, 0x0F	; 15
     bd8:	98 2b       	or	r25, r24
     bda:	90 83       	st	Z, r25
     bdc:	08 95       	ret

00000bde <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
     bde:	8f ef       	ldi	r24, 0xFF	; 255
     be0:	08 95       	ret

00000be2 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
     be2:	08 95       	ret

00000be4 <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
     be4:	08 95       	ret

00000be6 <rf_security_disable>:
}



void rf_security_disable()
{
     be6:	08 95       	ret

00000be8 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
     be8:	8f ef       	ldi	r24, 0xFF	; 255
     bea:	08 95       	ret

00000bec <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
     bec:	80 91 e5 04 	lds	r24, 0x04E5
     bf0:	90 91 e6 04 	lds	r25, 0x04E6
     bf4:	08 95       	ret

00000bf6 <rf_flush_rx_fifo>:



inline void rf_flush_rx_fifo()
{
     bf6:	08 95       	ret

00000bf8 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	08 95       	ret

00000bfc <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	08 95       	ret

00000c00 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	08 95       	ret

00000c04 <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
     c04:	08 95       	ret

00000c06 <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
     c06:	08 95       	ret

00000c08 <rf_test_mode>:
}



void rf_test_mode()
{
     c08:	08 95       	ret

00000c0a <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
     c0a:	08 95       	ret

00000c0c <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
     c0c:	08 95       	ret

00000c0e <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
     c0e:	08 95       	ret

00000c10 <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
     c10:	08 95       	ret

00000c12 <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
     c12:	08 95       	ret

00000c14 <rf_cc2591_tx_on>:
	PORTG	|= 0x1;
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	
	DDRG	&= ~(0x1);  // Set RXTX as input
     c14:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
     c16:	8d b1       	in	r24, 0x0d	; 13
     c18:	80 6e       	ori	r24, 0xE0	; 224
     c1a:	8d b9       	out	0x0d, r24	; 13
	// PAEN=1  EN=0  HGM=x RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0xA0;
     c1c:	8e b1       	in	r24, 0x0e	; 14
     c1e:	80 6a       	ori	r24, 0xA0	; 160
     c20:	8e b9       	out	0x0e, r24	; 14
     c22:	08 95       	ret

00000c24 <rf_cc2591_rx_on>:
	DDRG	|= 0x1;
	PORTG	&= ~(0x1);
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	DDRG	&= ~(0x1);  // Set RXTX as input
     c24:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
     c26:	8d b1       	in	r24, 0x0d	; 13
     c28:	80 6e       	ori	r24, 0xE0	; 224
     c2a:	8d b9       	out	0x0d, r24	; 13
	// PAEN=0  EN=1  HGM=1 RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0x60;
     c2c:	8e b1       	in	r24, 0x0e	; 14
     c2e:	80 66       	ori	r24, 0x60	; 96
     c30:	8e b9       	out	0x0e, r24	; 14
     c32:	08 95       	ret

00000c34 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
     c34:	cf 92       	push	r12
     c36:	df 92       	push	r13
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
     c48:	27 97       	sbiw	r28, 0x07	; 7
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
     c54:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
     c58:	e0 91 ea 04 	lds	r30, 0x04EA
     c5c:	f0 91 eb 04 	lds	r31, 0x04EB
     c60:	c0 80       	ld	r12, Z
     c62:	d3 80       	ldd	r13, Z+3	; 0x03
     c64:	e5 80       	ldd	r14, Z+5	; 0x05
     c66:	f6 80       	ldd	r15, Z+6	; 0x06
     c68:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
     c6a:	0e 94 64 04 	call	0x8c8	; 0x8c8 <rf_rx_packet_nonblock>
	if (err < 1) {
     c6e:	18 16       	cp	r1, r24
     c70:	1c f0       	brlt	.+6      	; 0xc78 <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
     c72:	83 e0       	ldi	r24, 0x03	; 3
     c74:	93 e0       	ldi	r25, 0x03	; 3
     c76:	06 c0       	rjmp	.+12     	; 0xc84 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
     c78:	f7 01       	movw	r30, r14
     c7a:	10 81       	ld	r17, Z
	if (ttl == 0) {
     c7c:	11 11       	cpse	r17, r1
     c7e:	07 c0       	rjmp	.+14     	; 0xc8e <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
     c80:	82 e2       	ldi	r24, 0x22	; 34
     c82:	93 e0       	ldi	r25, 0x03	; 3
     c84:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <puts>
#endif
		nrk_int_enable();
     c88:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_int_enable>
		return;
     c8c:	31 c0       	rjmp	.+98     	; 0xcf0 <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
     c8e:	15 30       	cpi	r17, 0x05	; 5
     c90:	21 f4       	brne	.+8      	; 0xc9a <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
     c92:	8a e0       	ldi	r24, 0x0A	; 10
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 01 26 	call	0x4c02	; 0x4c02 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
     c9a:	c7 01       	movw	r24, r14
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	9f 93       	push	r25
     ca0:	8f 93       	push	r24
     ca2:	80 2f       	mov	r24, r16
     ca4:	99 27       	eor	r25, r25
     ca6:	87 fd       	sbrc	r24, 7
     ca8:	90 95       	com	r25
     caa:	9f 93       	push	r25
     cac:	0f 93       	push	r16
     cae:	1f 92       	push	r1
     cb0:	1f 93       	push	r17
     cb2:	1f 92       	push	r1
     cb4:	cf 92       	push	r12
     cb6:	84 e4       	ldi	r24, 0x44	; 68
     cb8:	93 e0       	ldi	r25, 0x03	; 3
     cba:	9f 93       	push	r25
     cbc:	8f 93       	push	r24
     cbe:	0e 94 ed 25 	call	0x4bda	; 0x4bda <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
     cc2:	fd 82       	std	Y+5, r15	; 0x05
     cc4:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
     cc6:	11 50       	subi	r17, 0x01	; 1
     cc8:	f7 01       	movw	r30, r14
     cca:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
     ccc:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
     cce:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
     cd0:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
     cd4:	9f ef       	ldi	r25, 0xFF	; 255
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
     cda:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
     cde:	ce 01       	movw	r24, r28
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <rf_tx_packet>
#endif
	return;
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
}
     cf0:	27 96       	adiw	r28, 0x07	; 7
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	cf 90       	pop	r12
     d0c:	08 95       	ret

00000d0e <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
     d0e:	1f 92       	push	r1
     d10:	0f 92       	push	r0
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	0f 92       	push	r0
     d16:	11 24       	eor	r1, r1
     d18:	0b b6       	in	r0, 0x3b	; 59
     d1a:	0f 92       	push	r0
     d1c:	2f 93       	push	r18
     d1e:	3f 93       	push	r19
     d20:	4f 93       	push	r20
     d22:	5f 93       	push	r21
     d24:	6f 93       	push	r22
     d26:	7f 93       	push	r23
     d28:	8f 93       	push	r24
     d2a:	9f 93       	push	r25
     d2c:	af 93       	push	r26
     d2e:	bf 93       	push	r27
     d30:	ef 93       	push	r30
     d32:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 91 7b 01 	lds	r25, 0x017B
     d3a:	89 17       	cp	r24, r25
     d3c:	10 f4       	brcc	.+4      	; 0xd42 <__vector_60+0x34>
     d3e:	8f 5f       	subi	r24, 0xFF	; 255
     d40:	fa cf       	rjmp	.-12     	; 0xd36 <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

   if((PHY_RSSI >> RX_CRC_VALID) & 0x1){
     d42:	80 91 46 01 	lds	r24, 0x0146
     d46:	87 ff       	sbrs	r24, 7
     d48:	04 c0       	rjmp	.+8      	; 0xd52 <__vector_60+0x44>
      rx_ready = 1;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	80 93 1b 05 	sts	0x051B, r24
     d50:	04 c0       	rjmp	.+8      	; 0xd5a <__vector_60+0x4c>
   } else {
      printf("RX end failed checksum!\r\n");
     d52:	8d e6       	ldi	r24, 0x6D	; 109
     d54:	93 e0       	ldi	r25, 0x03	; 3
     d56:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <puts>
   }
   IRQ_STATUS = (1 << RX_END);
     d5a:	88 e0       	ldi	r24, 0x08	; 8
     d5c:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
     d60:	80 91 46 01 	lds	r24, 0x0146
     d64:	87 ff       	sbrs	r24, 7
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
     d68:	80 91 e7 04 	lds	r24, 0x04E7
     d6c:	81 11       	cpse	r24, r1
     d6e:	0e 94 1a 06 	call	0xc34	; 0xc34 <rf_glossy_interrupt>
	}

	if(rx_end_func)
     d72:	e0 91 cb 03 	lds	r30, 0x03CB
     d76:	f0 91 cc 03 	lds	r31, 0x03CC
     d7a:	30 97       	sbiw	r30, 0x00	; 0
     d7c:	09 f0       	breq	.+2      	; 0xd80 <__vector_60+0x72>
		rx_end_func();
     d7e:	09 95       	icall

	return;
}
     d80:	ff 91       	pop	r31
     d82:	ef 91       	pop	r30
     d84:	bf 91       	pop	r27
     d86:	af 91       	pop	r26
     d88:	9f 91       	pop	r25
     d8a:	8f 91       	pop	r24
     d8c:	7f 91       	pop	r23
     d8e:	6f 91       	pop	r22
     d90:	5f 91       	pop	r21
     d92:	4f 91       	pop	r20
     d94:	3f 91       	pop	r19
     d96:	2f 91       	pop	r18
     d98:	0f 90       	pop	r0
     d9a:	0b be       	out	0x3b, r0	; 59
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	0f 90       	pop	r0
     da2:	1f 90       	pop	r1
     da4:	18 95       	reti

00000da6 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
     da6:	a4 ef       	ldi	r26, 0xF4	; 244
     da8:	b4 e0       	ldi	r27, 0x04	; 4
     daa:	fc 01       	movw	r30, r24
     dac:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
     dae:	20 81       	ld	r18, Z
     db0:	2d 93       	st	X+, r18
      AES_KEY = key[i];
     db2:	21 91       	ld	r18, Z+
     db4:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
     db8:	e8 17       	cp	r30, r24
     dba:	f9 07       	cpc	r31, r25
     dbc:	c1 f7       	brne	.-16     	; 0xdae <aes_setkey+0x8>
     dbe:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
     dc0:	10 92 3e 01 	sts	0x013E, r1
     dc4:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
     dc6:	e1 f7       	brne	.-8      	; 0xdc0 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
     dc8:	80 e8       	ldi	r24, 0x80	; 128
     dca:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
     dce:	80 91 3d 01 	lds	r24, 0x013D
     dd2:	80 ff       	sbrs	r24, 0
     dd4:	fc cf       	rjmp	.-8      	; 0xdce <aes_setkey+0x28>
     dd6:	e5 e0       	ldi	r30, 0x05	; 5
     dd8:	f5 e0       	ldi	r31, 0x05	; 5
     dda:	80 e1       	ldi	r24, 0x10	; 16
     ddc:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
     dde:	90 91 3f 01 	lds	r25, 0x013F
     de2:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
     de4:	8e 13       	cpse	r24, r30
     de6:	fb cf       	rjmp	.-10     	; 0xdde <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
     de8:	08 95       	ret

00000dea <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
     df0:	66 23       	and	r22, r22
     df2:	09 f4       	brne	.+2      	; 0xdf6 <aes_encrypt+0xc>
     df4:	45 c0       	rjmp	.+138    	; 0xe80 <aes_encrypt+0x96>
     df6:	86 2f       	mov	r24, r22
     df8:	8f 70       	andi	r24, 0x0F	; 15
     dfa:	09 f0       	breq	.+2      	; 0xdfe <aes_encrypt+0x14>
     dfc:	41 c0       	rjmp	.+130    	; 0xe80 <aes_encrypt+0x96>
     dfe:	e4 ef       	ldi	r30, 0xF4	; 244
     e00:	f4 e0       	ldi	r31, 0x04	; 4
     e02:	90 e1       	ldi	r25, 0x10	; 16
     e04:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
     e06:	21 91       	ld	r18, Z+
     e08:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
     e0c:	9e 13       	cpse	r25, r30
     e0e:	fb cf       	rjmp	.-10     	; 0xe06 <aes_encrypt+0x1c>
     e10:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     e12:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
     e14:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     e16:	40 e1       	ldi	r20, 0x10	; 16
     e18:	94 9f       	mul	r25, r20
     e1a:	90 01       	movw	r18, r0
     e1c:	11 24       	eor	r1, r1
     e1e:	26 17       	cp	r18, r22
     e20:	37 07       	cpc	r19, r23
     e22:	7c f5       	brge	.+94     	; 0xe82 <aes_encrypt+0x98>
      if(i==0)
     e24:	91 11       	cpse	r25, r1
     e26:	03 c0       	rjmp	.+6      	; 0xe2e <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
     e28:	10 92 3c 01 	sts	0x013C, r1
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
     e2e:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	2a 0f       	add	r18, r26
     e38:	3b 1f       	adc	r19, r27
     e3a:	e9 01       	movw	r28, r18
     e3c:	c4 0f       	add	r28, r20
     e3e:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
     e40:	f8 81       	ld	r31, Y
     e42:	f0 93 3e 01 	sts	0x013E, r31
     e46:	4f 5f       	subi	r20, 0xFF	; 255
     e48:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
     e4a:	40 31       	cpi	r20, 0x10	; 16
     e4c:	51 05       	cpc	r21, r1
     e4e:	a9 f7       	brne	.-22     	; 0xe3a <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
     e50:	40 91 3c 01 	lds	r20, 0x013C
     e54:	40 68       	ori	r20, 0x80	; 128
     e56:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
     e5a:	40 91 3d 01 	lds	r20, 0x013D
     e5e:	40 ff       	sbrs	r20, 0
     e60:	fc cf       	rjmp	.-8      	; 0xe5a <aes_encrypt+0x70>
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
     e66:	f0 91 3e 01 	lds	r31, 0x013E
     e6a:	e9 01       	movw	r28, r18
     e6c:	c4 0f       	add	r28, r20
     e6e:	d5 1f       	adc	r29, r21
     e70:	f8 83       	st	Y, r31
     e72:	4f 5f       	subi	r20, 0xFF	; 255
     e74:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
     e76:	40 31       	cpi	r20, 0x10	; 16
     e78:	51 05       	cpc	r21, r1
     e7a:	a9 f7       	brne	.-22     	; 0xe66 <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     e7c:	9f 5f       	subi	r25, 0xFF	; 255
     e7e:	cb cf       	rjmp	.-106    	; 0xe16 <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
     e80:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
     e92:	61 30       	cpi	r22, 0x01	; 1
     e94:	09 f4       	brne	.+2      	; 0xe98 <aes_decrypt+0x10>
     e96:	58 c0       	rjmp	.+176    	; 0xf48 <aes_decrypt+0xc0>
     e98:	86 2f       	mov	r24, r22
     e9a:	8f 70       	andi	r24, 0x0F	; 15
     e9c:	09 f0       	breq	.+2      	; 0xea0 <aes_decrypt+0x18>
     e9e:	54 c0       	rjmp	.+168    	; 0xf48 <aes_decrypt+0xc0>
     ea0:	e5 e0       	ldi	r30, 0x05	; 5
     ea2:	f5 e0       	ldi	r31, 0x05	; 5
     ea4:	90 e1       	ldi	r25, 0x10	; 16
     ea6:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
     ea8:	21 91       	ld	r18, Z+
     eaa:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
     eae:	9e 13       	cpse	r25, r30
     eb0:	fb cf       	rjmp	.-10     	; 0xea8 <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
     eb2:	62 95       	swap	r22
     eb4:	6f 70       	andi	r22, 0x0F	; 15
     eb6:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
     eb8:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
     eba:	6f 3f       	cpi	r22, 0xFF	; 255
     ebc:	09 f4       	brne	.+2      	; 0xec0 <aes_decrypt+0x38>
     ebe:	45 c0       	rjmp	.+138    	; 0xf4a <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
     ec0:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
     ec4:	46 2f       	mov	r20, r22
     ec6:	55 27       	eor	r21, r21
     ec8:	47 fd       	sbrc	r20, 7
     eca:	50 95       	com	r21
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	ed 01       	movw	r28, r26
     ed2:	90 e1       	ldi	r25, 0x10	; 16
     ed4:	69 02       	muls	r22, r25
     ed6:	c0 0d       	add	r28, r0
     ed8:	d1 1d       	adc	r29, r1
     eda:	11 24       	eor	r1, r1
     edc:	fe 01       	movw	r30, r28
     ede:	e2 0f       	add	r30, r18
     ee0:	f3 1f       	adc	r31, r19
     ee2:	90 81       	ld	r25, Z
     ee4:	90 93 3e 01 	sts	0x013E, r25
     ee8:	2f 5f       	subi	r18, 0xFF	; 255
     eea:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
     eec:	20 31       	cpi	r18, 0x10	; 16
     eee:	31 05       	cpc	r19, r1
     ef0:	a9 f7       	brne	.-22     	; 0xedc <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
     ef2:	90 91 3c 01 	lds	r25, 0x013C
     ef6:	90 68       	ori	r25, 0x80	; 128
     ef8:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
     efc:	90 91 3d 01 	lds	r25, 0x013D
     f00:	90 ff       	sbrs	r25, 0
     f02:	fc cf       	rjmp	.-8      	; 0xefc <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
     f04:	41 50       	subi	r20, 0x01	; 1
     f06:	51 09       	sbc	r21, r1
     f08:	94 e0       	ldi	r25, 0x04	; 4
     f0a:	44 0f       	add	r20, r20
     f0c:	55 1f       	adc	r21, r21
     f0e:	9a 95       	dec	r25
     f10:	e1 f7       	brne	.-8      	; 0xf0a <aes_decrypt+0x82>
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
     f16:	90 91 3e 01 	lds	r25, 0x013E
     f1a:	8e 01       	movw	r16, r28
     f1c:	02 0f       	add	r16, r18
     f1e:	13 1f       	adc	r17, r19
     f20:	f8 01       	movw	r30, r16
     f22:	90 83       	st	Z, r25
         if(i!=0)
     f24:	66 23       	and	r22, r22
     f26:	49 f0       	breq	.+18     	; 0xf3a <aes_decrypt+0xb2>
     f28:	f9 01       	movw	r30, r18
     f2a:	e4 0f       	add	r30, r20
     f2c:	f5 1f       	adc	r31, r21
     f2e:	ea 0f       	add	r30, r26
     f30:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
     f32:	e0 81       	ld	r30, Z
     f34:	9e 27       	eor	r25, r30
     f36:	f8 01       	movw	r30, r16
     f38:	90 83       	st	Z, r25
     f3a:	2f 5f       	subi	r18, 0xFF	; 255
     f3c:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
     f3e:	20 31       	cpi	r18, 0x10	; 16
     f40:	31 05       	cpc	r19, r1
     f42:	49 f7       	brne	.-46     	; 0xf16 <aes_decrypt+0x8e>
     f44:	61 50       	subi	r22, 0x01	; 1
     f46:	b9 cf       	rjmp	.-142    	; 0xeba <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
     f48:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	08 95       	ret

00000f54 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
     f54:	90 91 c0 00 	lds	r25, 0x00C0
     f58:	95 ff       	sbrs	r25, 5
     f5a:	fc cf       	rjmp	.-8      	; 0xf54 <putc0>
     f5c:	90 91 c0 00 	lds	r25, 0x00C0
     f60:	9f 7d       	andi	r25, 0xDF	; 223
     f62:	90 93 c0 00 	sts	0x00C0, r25
     f66:	80 93 c6 00 	sts	0x00C6, r24
     f6a:	08 95       	ret

00000f6c <__vector_25>:
static uint16_t uart_rx_buf_start,uart_rx_buf_end;
static char uart_rx_buf[MAX_RX_UART_BUF];
static nrk_sig_t uart_rx_signal;

SIGNAL(USART0_RX_vect)
{
     f6c:	1f 92       	push	r1
     f6e:	0f 92       	push	r0
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	0f 92       	push	r0
     f74:	11 24       	eor	r1, r1
     f76:	0b b6       	in	r0, 0x3b	; 59
     f78:	0f 92       	push	r0
     f7a:	2f 93       	push	r18
     f7c:	3f 93       	push	r19
     f7e:	4f 93       	push	r20
     f80:	5f 93       	push	r21
     f82:	6f 93       	push	r22
     f84:	7f 93       	push	r23
     f86:	8f 93       	push	r24
     f88:	9f 93       	push	r25
     f8a:	af 93       	push	r26
     f8c:	bf 93       	push	r27
     f8e:	ef 93       	push	r30
     f90:	ff 93       	push	r31
char c;
uint8_t sig;
nrk_int_disable();
     f92:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <nrk_int_disable>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
     f96:	80 91 c0 00 	lds	r24, 0x00C0
     f9a:	87 ff       	sbrs	r24, 7
     f9c:	fc cf       	rjmp	.-8      	; 0xf96 <__vector_25+0x2a>
     f9e:	80 91 c0 00 	lds	r24, 0x00C0
     fa2:	8f 77       	andi	r24, 0x7F	; 127
     fa4:	80 93 c0 00 	sts	0x00C0, r24
     fa8:	20 91 c6 00 	lds	r18, 0x00C6
   uart_rx_buf[uart_rx_buf_end]=c;
     fac:	80 91 e0 03 	lds	r24, 0x03E0
     fb0:	90 91 e1 03 	lds	r25, 0x03E1
     fb4:	fc 01       	movw	r30, r24
     fb6:	e0 53       	subi	r30, 0x30	; 48
     fb8:	fc 4f       	sbci	r31, 0xFC	; 252
     fba:	20 83       	st	Z, r18
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
     fbc:	01 96       	adiw	r24, 0x01	; 1
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
     fbe:	80 31       	cpi	r24, 0x10	; 16
     fc0:	91 05       	cpc	r25, r1
     fc2:	29 f0       	breq	.+10     	; 0xfce <__vector_25+0x62>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
     fc4:	90 93 e1 03 	sts	0x03E1, r25
     fc8:	80 93 e0 03 	sts	0x03E0, r24
     fcc:	04 c0       	rjmp	.+8      	; 0xfd6 <__vector_25+0x6a>
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
	   uart_rx_buf_end=0;
     fce:	10 92 e1 03 	sts	0x03E1, r1
     fd2:	10 92 e0 03 	sts	0x03E0, r1
		   }
   //if(uart_rx_buf_end==uart_rx_buf_start) nrk_kprintf(PSTR("Buf overflow!\r\n" ));
   nrk_event_signal(uart_rx_signal);
     fd6:	80 91 cf 03 	lds	r24, 0x03CF
     fda:	0e 94 ab 12 	call	0x2556	; 0x2556 <nrk_event_signal>
CLEAR_UART0_RX_INT();
     fde:	80 91 c0 00 	lds	r24, 0x00C0
     fe2:	8f 77       	andi	r24, 0x7F	; 127
     fe4:	80 93 c0 00 	sts	0x00C0, r24
//ENABLE_UART0_RX_INT();
// sei();
nrk_int_enable();
     fe8:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_int_enable>
}
     fec:	ff 91       	pop	r31
     fee:	ef 91       	pop	r30
     ff0:	bf 91       	pop	r27
     ff2:	af 91       	pop	r26
     ff4:	9f 91       	pop	r25
     ff6:	8f 91       	pop	r24
     ff8:	7f 91       	pop	r23
     ffa:	6f 91       	pop	r22
     ffc:	5f 91       	pop	r21
     ffe:	4f 91       	pop	r20
    1000:	3f 91       	pop	r19
    1002:	2f 91       	pop	r18
    1004:	0f 90       	pop	r0
    1006:	0b be       	out	0x3b, r0	; 59
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	0f 90       	pop	r0
    100e:	1f 90       	pop	r1
    1010:	18 95       	reti

00001012 <nrk_uart_data_ready>:
   return tmp;
}

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    1012:	81 11       	cpse	r24, r1
    1014:	0d c0       	rjmp	.+26     	; 0x1030 <nrk_uart_data_ready+0x1e>
        {
        //if( UCSR0A & BM(RXC0) ) return 1;
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	40 91 e2 03 	lds	r20, 0x03E2
    101c:	50 91 e3 03 	lds	r21, 0x03E3
    1020:	20 91 e0 03 	lds	r18, 0x03E0
    1024:	30 91 e1 03 	lds	r19, 0x03E1
    1028:	42 17       	cp	r20, r18
    102a:	53 07       	cpc	r21, r19
    102c:	51 f4       	brne	.+20     	; 0x1042 <nrk_uart_data_ready+0x30>
    102e:	08 c0       	rjmp	.+16     	; 0x1040 <nrk_uart_data_ready+0x2e>
        }
if(uart_num==1)
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	31 f4       	brne	.+12     	; 0x1040 <nrk_uart_data_ready+0x2e>
	{
        if( UCSR1A & BM(RXC1) ) return 1;
    1034:	80 91 c8 00 	lds	r24, 0x00C8
    1038:	88 1f       	adc	r24, r24
    103a:	88 27       	eor	r24, r24
    103c:	88 1f       	adc	r24, r24
    103e:	08 95       	ret
	//if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
    1040:	80 e0       	ldi	r24, 0x00	; 0
}
    1042:	08 95       	ret

00001044 <nrk_uart_rx_signal_get>:

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    1044:	80 91 cf 03 	lds	r24, 0x03CF
    1048:	8f 3f       	cpi	r24, 0xFF	; 255
    104a:	19 f4       	brne	.+6      	; 0x1052 <nrk_uart_rx_signal_get+0xe>
    104c:	8e e0       	ldi	r24, 0x0E	; 14
    104e:	0e 94 65 10 	call	0x20ca	; 0x20ca <nrk_error_add>
   return uart_rx_signal;
}
    1052:	80 91 cf 03 	lds	r24, 0x03CF
    1056:	08 95       	ret

00001058 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    105c:	fc 01       	movw	r30, r24
    105e:	24 91       	lpm	r18, Z
    1060:	ec 01       	movw	r28, r24
    1062:	21 96       	adiw	r28, 0x01	; 1
    1064:	22 23       	and	r18, r18
    1066:	51 f0       	breq	.+20     	; 0x107c <nrk_kprintf+0x24>
        putchar(c);
    1068:	60 91 cf 06 	lds	r22, 0x06CF
    106c:	70 91 d0 06 	lds	r23, 0x06D0
    1070:	82 2f       	mov	r24, r18
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <fputc>
    1078:	ce 01       	movw	r24, r28
    107a:	f0 cf       	rjmp	.-32     	; 0x105c <nrk_kprintf+0x4>
}
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	08 95       	ret

00001082 <getc0>:
char getc0()
{
char tmp;
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
    1082:	20 91 e2 03 	lds	r18, 0x03E2
    1086:	30 91 e3 03 	lds	r19, 0x03E3
    108a:	80 91 e0 03 	lds	r24, 0x03E0
    108e:	90 91 e1 03 	lds	r25, 0x03E1
    1092:	28 17       	cp	r18, r24
    1094:	39 07       	cpc	r19, r25
    1096:	69 f4       	brne	.+26     	; 0x10b2 <getc0+0x30>
    1098:	80 91 cf 03 	lds	r24, 0x03CF
    109c:	0e 94 79 12 	call	0x24f2	; 0x24f2 <nrk_signal_register>
    10a0:	60 91 cf 03 	lds	r22, 0x03CF
    10a4:	77 27       	eor	r23, r23
    10a6:	67 fd       	sbrc	r22, 7
    10a8:	70 95       	com	r23
    10aa:	87 2f       	mov	r24, r23
    10ac:	97 2f       	mov	r25, r23
    10ae:	0e 94 1c 13 	call	0x2638	; 0x2638 <nrk_event_wait>
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
    10b2:	6f 3f       	cpi	r22, 0xFF	; 255
    10b4:	21 f4       	brne	.+8      	; 0x10be <getc0+0x3c>
    10b6:	84 eb       	ldi	r24, 0xB4	; 180
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	0e 94 2c 08 	call	0x1058	; 0x1058 <nrk_kprintf>
   tmp=uart_rx_buf[uart_rx_buf_start];
    10be:	20 91 e2 03 	lds	r18, 0x03E2
    10c2:	30 91 e3 03 	lds	r19, 0x03E3
    10c6:	f9 01       	movw	r30, r18
    10c8:	e0 53       	subi	r30, 0x30	; 48
    10ca:	fc 4f       	sbci	r31, 0xFC	; 252
    10cc:	80 81       	ld	r24, Z
   uart_rx_buf_start++;
    10ce:	2f 5f       	subi	r18, 0xFF	; 255
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    10d2:	20 31       	cpi	r18, 0x10	; 16
    10d4:	31 05       	cpc	r19, r1
    10d6:	28 f4       	brcc	.+10     	; 0x10e2 <getc0+0x60>
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
   tmp=uart_rx_buf[uart_rx_buf_start];
   uart_rx_buf_start++;
    10d8:	30 93 e3 03 	sts	0x03E3, r19
    10dc:	20 93 e2 03 	sts	0x03E2, r18
    10e0:	08 95       	ret
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    10e2:	10 92 e3 03 	sts	0x03E3, r1
    10e6:	10 92 e2 03 	sts	0x03E2, r1

   return tmp;
}
    10ea:	08 95       	ret

000010ec <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    10ec:	86 e0       	ldi	r24, 0x06	; 6
    10ee:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    10f0:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    10f2:	88 ef       	ldi	r24, 0xF8	; 248
    10f4:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    10f6:	80 ef       	ldi	r24, 0xF0	; 240
    10f8:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    10fa:	82 e0       	ldi	r24, 0x02	; 2
    10fc:	8d b9       	out	0x0d, r24	; 13
    10fe:	08 95       	ret

00001100 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    1100:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <PORT_INIT>

00001104 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1104:	8f 3f       	cpi	r24, 0xFF	; 255
    1106:	09 f4       	brne	.+2      	; 0x110a <nrk_gpio_set+0x6>
    1108:	6c c0       	rjmp	.+216    	; 0x11e2 <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    110a:	e8 2f       	mov	r30, r24
    110c:	e7 70       	andi	r30, 0x07	; 7
    110e:	4e 2f       	mov	r20, r30
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	47 30       	cpi	r20, 0x07	; 7
    1114:	51 05       	cpc	r21, r1
    1116:	08 f0       	brcs	.+2      	; 0x111a <nrk_gpio_set+0x16>
    1118:	64 c0       	rjmp	.+200    	; 0x11e2 <nrk_gpio_set+0xde>
    111a:	fa 01       	movw	r30, r20
    111c:	e0 57       	subi	r30, 0x70	; 112
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	86 95       	lsr	r24
    1122:	86 95       	lsr	r24
    1124:	86 95       	lsr	r24
    1126:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    112a:	42 b1       	in	r20, 0x02	; 2
    112c:	21 e0       	ldi	r18, 0x01	; 1
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	b9 01       	movw	r22, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <nrk_gpio_set+0x34>
    1134:	66 0f       	add	r22, r22
    1136:	77 1f       	adc	r23, r23
    1138:	8a 95       	dec	r24
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <nrk_gpio_set+0x30>
    113c:	cb 01       	movw	r24, r22
    113e:	84 2b       	or	r24, r20
    1140:	82 b9       	out	0x02, r24	; 2
    1142:	4d c0       	rjmp	.+154    	; 0x11de <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1144:	45 b1       	in	r20, 0x05	; 5
    1146:	21 e0       	ldi	r18, 0x01	; 1
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	b9 01       	movw	r22, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <nrk_gpio_set+0x4e>
    114e:	66 0f       	add	r22, r22
    1150:	77 1f       	adc	r23, r23
    1152:	8a 95       	dec	r24
    1154:	e2 f7       	brpl	.-8      	; 0x114e <nrk_gpio_set+0x4a>
    1156:	cb 01       	movw	r24, r22
    1158:	84 2b       	or	r24, r20
    115a:	85 b9       	out	0x05, r24	; 5
    115c:	40 c0       	rjmp	.+128    	; 0x11de <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    115e:	48 b1       	in	r20, 0x08	; 8
    1160:	21 e0       	ldi	r18, 0x01	; 1
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	b9 01       	movw	r22, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <nrk_gpio_set+0x68>
    1168:	66 0f       	add	r22, r22
    116a:	77 1f       	adc	r23, r23
    116c:	8a 95       	dec	r24
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <nrk_gpio_set+0x64>
    1170:	cb 01       	movw	r24, r22
    1172:	84 2b       	or	r24, r20
    1174:	88 b9       	out	0x08, r24	; 8
    1176:	33 c0       	rjmp	.+102    	; 0x11de <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1178:	4b b1       	in	r20, 0x0b	; 11
    117a:	21 e0       	ldi	r18, 0x01	; 1
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	b9 01       	movw	r22, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <nrk_gpio_set+0x82>
    1182:	66 0f       	add	r22, r22
    1184:	77 1f       	adc	r23, r23
    1186:	8a 95       	dec	r24
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <nrk_gpio_set+0x7e>
    118a:	cb 01       	movw	r24, r22
    118c:	84 2b       	or	r24, r20
    118e:	8b b9       	out	0x0b, r24	; 11
    1190:	26 c0       	rjmp	.+76     	; 0x11de <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1192:	4e b1       	in	r20, 0x0e	; 14
    1194:	21 e0       	ldi	r18, 0x01	; 1
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	b9 01       	movw	r22, r18
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <nrk_gpio_set+0x9c>
    119c:	66 0f       	add	r22, r22
    119e:	77 1f       	adc	r23, r23
    11a0:	8a 95       	dec	r24
    11a2:	e2 f7       	brpl	.-8      	; 0x119c <nrk_gpio_set+0x98>
    11a4:	cb 01       	movw	r24, r22
    11a6:	84 2b       	or	r24, r20
    11a8:	8e b9       	out	0x0e, r24	; 14
    11aa:	19 c0       	rjmp	.+50     	; 0x11de <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    11ac:	41 b3       	in	r20, 0x11	; 17
    11ae:	21 e0       	ldi	r18, 0x01	; 1
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	b9 01       	movw	r22, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <nrk_gpio_set+0xb6>
    11b6:	66 0f       	add	r22, r22
    11b8:	77 1f       	adc	r23, r23
    11ba:	8a 95       	dec	r24
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <nrk_gpio_set+0xb2>
    11be:	cb 01       	movw	r24, r22
    11c0:	84 2b       	or	r24, r20
    11c2:	81 bb       	out	0x11, r24	; 17
    11c4:	0c c0       	rjmp	.+24     	; 0x11de <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    11c6:	44 b3       	in	r20, 0x14	; 20
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	b9 01       	movw	r22, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <nrk_gpio_set+0xd0>
    11d0:	66 0f       	add	r22, r22
    11d2:	77 1f       	adc	r23, r23
    11d4:	8a 95       	dec	r24
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <nrk_gpio_set+0xcc>
    11d8:	cb 01       	movw	r24, r22
    11da:	84 2b       	or	r24, r20
    11dc:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    11de:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    11e0:	08 95       	ret
                default: return -1;
    11e2:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    11e4:	08 95       	ret

000011e6 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    11e6:	8f 3f       	cpi	r24, 0xFF	; 255
    11e8:	09 f4       	brne	.+2      	; 0x11ec <nrk_gpio_clr+0x6>
    11ea:	73 c0       	rjmp	.+230    	; 0x12d2 <nrk_gpio_clr+0xec>
        switch (pin & 0x07) {
    11ec:	e8 2f       	mov	r30, r24
    11ee:	e7 70       	andi	r30, 0x07	; 7
    11f0:	4e 2f       	mov	r20, r30
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	47 30       	cpi	r20, 0x07	; 7
    11f6:	51 05       	cpc	r21, r1
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <nrk_gpio_clr+0x16>
    11fa:	6b c0       	rjmp	.+214    	; 0x12d2 <nrk_gpio_clr+0xec>
    11fc:	fa 01       	movw	r30, r20
    11fe:	e9 56       	subi	r30, 0x69	; 105
    1200:	ff 4f       	sbci	r31, 0xFF	; 255
    1202:	86 95       	lsr	r24
    1204:	86 95       	lsr	r24
    1206:	86 95       	lsr	r24
    1208:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    120c:	42 b1       	in	r20, 0x02	; 2
    120e:	21 e0       	ldi	r18, 0x01	; 1
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	b9 01       	movw	r22, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <nrk_gpio_clr+0x34>
    1216:	66 0f       	add	r22, r22
    1218:	77 1f       	adc	r23, r23
    121a:	8a 95       	dec	r24
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <nrk_gpio_clr+0x30>
    121e:	cb 01       	movw	r24, r22
    1220:	80 95       	com	r24
    1222:	84 23       	and	r24, r20
    1224:	82 b9       	out	0x02, r24	; 2
    1226:	53 c0       	rjmp	.+166    	; 0x12ce <nrk_gpio_clr+0xe8>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1228:	45 b1       	in	r20, 0x05	; 5
    122a:	21 e0       	ldi	r18, 0x01	; 1
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	b9 01       	movw	r22, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <nrk_gpio_clr+0x50>
    1232:	66 0f       	add	r22, r22
    1234:	77 1f       	adc	r23, r23
    1236:	8a 95       	dec	r24
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <nrk_gpio_clr+0x4c>
    123a:	cb 01       	movw	r24, r22
    123c:	80 95       	com	r24
    123e:	84 23       	and	r24, r20
    1240:	85 b9       	out	0x05, r24	; 5
    1242:	45 c0       	rjmp	.+138    	; 0x12ce <nrk_gpio_clr+0xe8>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1244:	48 b1       	in	r20, 0x08	; 8
    1246:	21 e0       	ldi	r18, 0x01	; 1
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	b9 01       	movw	r22, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <nrk_gpio_clr+0x6c>
    124e:	66 0f       	add	r22, r22
    1250:	77 1f       	adc	r23, r23
    1252:	8a 95       	dec	r24
    1254:	e2 f7       	brpl	.-8      	; 0x124e <nrk_gpio_clr+0x68>
    1256:	cb 01       	movw	r24, r22
    1258:	80 95       	com	r24
    125a:	84 23       	and	r24, r20
    125c:	88 b9       	out	0x08, r24	; 8
    125e:	37 c0       	rjmp	.+110    	; 0x12ce <nrk_gpio_clr+0xe8>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1260:	4b b1       	in	r20, 0x0b	; 11
    1262:	21 e0       	ldi	r18, 0x01	; 1
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	b9 01       	movw	r22, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <nrk_gpio_clr+0x88>
    126a:	66 0f       	add	r22, r22
    126c:	77 1f       	adc	r23, r23
    126e:	8a 95       	dec	r24
    1270:	e2 f7       	brpl	.-8      	; 0x126a <nrk_gpio_clr+0x84>
    1272:	cb 01       	movw	r24, r22
    1274:	80 95       	com	r24
    1276:	84 23       	and	r24, r20
    1278:	8b b9       	out	0x0b, r24	; 11
    127a:	29 c0       	rjmp	.+82     	; 0x12ce <nrk_gpio_clr+0xe8>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    127c:	4e b1       	in	r20, 0x0e	; 14
    127e:	21 e0       	ldi	r18, 0x01	; 1
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	b9 01       	movw	r22, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <nrk_gpio_clr+0xa4>
    1286:	66 0f       	add	r22, r22
    1288:	77 1f       	adc	r23, r23
    128a:	8a 95       	dec	r24
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <nrk_gpio_clr+0xa0>
    128e:	cb 01       	movw	r24, r22
    1290:	80 95       	com	r24
    1292:	84 23       	and	r24, r20
    1294:	8e b9       	out	0x0e, r24	; 14
    1296:	1b c0       	rjmp	.+54     	; 0x12ce <nrk_gpio_clr+0xe8>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1298:	41 b3       	in	r20, 0x11	; 17
    129a:	21 e0       	ldi	r18, 0x01	; 1
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	b9 01       	movw	r22, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <nrk_gpio_clr+0xc0>
    12a2:	66 0f       	add	r22, r22
    12a4:	77 1f       	adc	r23, r23
    12a6:	8a 95       	dec	r24
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <nrk_gpio_clr+0xbc>
    12aa:	cb 01       	movw	r24, r22
    12ac:	80 95       	com	r24
    12ae:	84 23       	and	r24, r20
    12b0:	81 bb       	out	0x11, r24	; 17
    12b2:	0d c0       	rjmp	.+26     	; 0x12ce <nrk_gpio_clr+0xe8>
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    12b4:	44 b3       	in	r20, 0x14	; 20
    12b6:	21 e0       	ldi	r18, 0x01	; 1
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	b9 01       	movw	r22, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <nrk_gpio_clr+0xdc>
    12be:	66 0f       	add	r22, r22
    12c0:	77 1f       	adc	r23, r23
    12c2:	8a 95       	dec	r24
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <nrk_gpio_clr+0xd8>
    12c6:	cb 01       	movw	r24, r22
    12c8:	80 95       	com	r24
    12ca:	84 23       	and	r24, r20
    12cc:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    12d0:	08 95       	ret
                default: return -1;
    12d2:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    12d4:	08 95       	ret

000012d6 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    12d6:	8f 3f       	cpi	r24, 0xFF	; 255
    12d8:	31 f1       	breq	.+76     	; 0x1326 <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    12da:	e8 2f       	mov	r30, r24
    12dc:	e7 70       	andi	r30, 0x07	; 7
    12de:	4e 2f       	mov	r20, r30
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	47 30       	cpi	r20, 0x07	; 7
    12e4:	51 05       	cpc	r21, r1
    12e6:	f8 f4       	brcc	.+62     	; 0x1326 <nrk_gpio_get+0x50>
    12e8:	fa 01       	movw	r30, r20
    12ea:	e2 56       	subi	r30, 0x62	; 98
    12ec:	ff 4f       	sbci	r31, 0xFF	; 255
    12ee:	28 2f       	mov	r18, r24
    12f0:	26 95       	lsr	r18
    12f2:	26 95       	lsr	r18
    12f4:	26 95       	lsr	r18
    12f6:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    12fa:	90 b1       	in	r25, 0x00	; 0
    12fc:	0b c0       	rjmp	.+22     	; 0x1314 <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    12fe:	93 b1       	in	r25, 0x03	; 3
    1300:	09 c0       	rjmp	.+18     	; 0x1314 <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    1302:	96 b1       	in	r25, 0x06	; 6
    1304:	07 c0       	rjmp	.+14     	; 0x1314 <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    1306:	99 b1       	in	r25, 0x09	; 9
    1308:	05 c0       	rjmp	.+10     	; 0x1314 <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    130a:	9c b1       	in	r25, 0x0c	; 12
    130c:	03 c0       	rjmp	.+6      	; 0x1314 <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    130e:	9f b1       	in	r25, 0x0f	; 15
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    1312:	92 b3       	in	r25, 0x12	; 18
    1314:	89 2f       	mov	r24, r25
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	02 c0       	rjmp	.+4      	; 0x131e <nrk_gpio_get+0x48>
    131a:	95 95       	asr	r25
    131c:	87 95       	ror	r24
    131e:	2a 95       	dec	r18
    1320:	e2 f7       	brpl	.-8      	; 0x131a <nrk_gpio_get+0x44>
    1322:	81 70       	andi	r24, 0x01	; 1
    1324:	08 95       	ret
                default: return -1;
    1326:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1328:	08 95       	ret

0000132a <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    132a:	8f 3f       	cpi	r24, 0xFF	; 255
    132c:	09 f4       	brne	.+2      	; 0x1330 <nrk_gpio_toggle+0x6>
    132e:	06 c1       	rjmp	.+524    	; 0x153c <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    1330:	e8 2f       	mov	r30, r24
    1332:	e7 70       	andi	r30, 0x07	; 7
    1334:	4e 2f       	mov	r20, r30
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	47 30       	cpi	r20, 0x07	; 7
    133a:	51 05       	cpc	r21, r1
    133c:	08 f0       	brcs	.+2      	; 0x1340 <nrk_gpio_toggle+0x16>
    133e:	fe c0       	rjmp	.+508    	; 0x153c <nrk_gpio_toggle+0x212>
    1340:	fa 01       	movw	r30, r20
    1342:	eb 55       	subi	r30, 0x5B	; 91
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	86 95       	lsr	r24
    1348:	86 95       	lsr	r24
    134a:	86 95       	lsr	r24
    134c:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    1350:	20 b1       	in	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	08 2e       	mov	r0, r24
    1356:	02 c0       	rjmp	.+4      	; 0x135c <nrk_gpio_toggle+0x32>
    1358:	35 95       	asr	r19
    135a:	27 95       	ror	r18
    135c:	0a 94       	dec	r0
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    1360:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    1362:	20 fd       	sbrc	r18, 0
    1364:	0b c0       	rjmp	.+22     	; 0x137c <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    1366:	21 e0       	ldi	r18, 0x01	; 1
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	b9 01       	movw	r22, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <nrk_gpio_toggle+0x48>
    136e:	66 0f       	add	r22, r22
    1370:	77 1f       	adc	r23, r23
    1372:	8a 95       	dec	r24
    1374:	e2 f7       	brpl	.-8      	; 0x136e <nrk_gpio_toggle+0x44>
    1376:	cb 01       	movw	r24, r22
    1378:	84 2b       	or	r24, r20
    137a:	0b c0       	rjmp	.+22     	; 0x1392 <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    137c:	21 e0       	ldi	r18, 0x01	; 1
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	b9 01       	movw	r22, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <nrk_gpio_toggle+0x5e>
    1384:	66 0f       	add	r22, r22
    1386:	77 1f       	adc	r23, r23
    1388:	8a 95       	dec	r24
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <nrk_gpio_toggle+0x5a>
    138c:	cb 01       	movw	r24, r22
    138e:	80 95       	com	r24
    1390:	84 23       	and	r24, r20
    1392:	82 b9       	out	0x02, r24	; 2
    1394:	16 c0       	rjmp	.+44     	; 0x13c2 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1396:	23 b1       	in	r18, 0x03	; 3
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	08 2e       	mov	r0, r24
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <nrk_gpio_toggle+0x78>
    139e:	35 95       	asr	r19
    13a0:	27 95       	ror	r18
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    13a6:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    13a8:	20 fd       	sbrc	r18, 0
    13aa:	0d c0       	rjmp	.+26     	; 0x13c6 <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    13ac:	21 e0       	ldi	r18, 0x01	; 1
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	b9 01       	movw	r22, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <nrk_gpio_toggle+0x8e>
    13b4:	66 0f       	add	r22, r22
    13b6:	77 1f       	adc	r23, r23
    13b8:	8a 95       	dec	r24
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <nrk_gpio_toggle+0x8a>
    13bc:	cb 01       	movw	r24, r22
    13be:	84 2b       	or	r24, r20
    13c0:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    13c6:	21 e0       	ldi	r18, 0x01	; 1
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	b9 01       	movw	r22, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <nrk_gpio_toggle+0xa8>
    13ce:	66 0f       	add	r22, r22
    13d0:	77 1f       	adc	r23, r23
    13d2:	8a 95       	dec	r24
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <nrk_gpio_toggle+0xa4>
    13d6:	cb 01       	movw	r24, r22
    13d8:	80 95       	com	r24
    13da:	84 23       	and	r24, r20
    13dc:	f1 cf       	rjmp	.-30     	; 0x13c0 <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    13de:	26 b1       	in	r18, 0x06	; 6
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	08 2e       	mov	r0, r24
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <nrk_gpio_toggle+0xc0>
    13e6:	35 95       	asr	r19
    13e8:	27 95       	ror	r18
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    13ee:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    13f0:	20 fd       	sbrc	r18, 0
    13f2:	0b c0       	rjmp	.+22     	; 0x140a <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    13f4:	21 e0       	ldi	r18, 0x01	; 1
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	b9 01       	movw	r22, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <nrk_gpio_toggle+0xd6>
    13fc:	66 0f       	add	r22, r22
    13fe:	77 1f       	adc	r23, r23
    1400:	8a 95       	dec	r24
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <nrk_gpio_toggle+0xd2>
    1404:	cb 01       	movw	r24, r22
    1406:	84 2b       	or	r24, r20
    1408:	0b c0       	rjmp	.+22     	; 0x1420 <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    140a:	21 e0       	ldi	r18, 0x01	; 1
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	b9 01       	movw	r22, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <nrk_gpio_toggle+0xec>
    1412:	66 0f       	add	r22, r22
    1414:	77 1f       	adc	r23, r23
    1416:	8a 95       	dec	r24
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <nrk_gpio_toggle+0xe8>
    141a:	cb 01       	movw	r24, r22
    141c:	80 95       	com	r24
    141e:	84 23       	and	r24, r20
    1420:	88 b9       	out	0x08, r24	; 8
    1422:	cf cf       	rjmp	.-98     	; 0x13c2 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    1424:	29 b1       	in	r18, 0x09	; 9
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	08 2e       	mov	r0, r24
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <nrk_gpio_toggle+0x106>
    142c:	35 95       	asr	r19
    142e:	27 95       	ror	r18
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    1434:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    1436:	20 fd       	sbrc	r18, 0
    1438:	0b c0       	rjmp	.+22     	; 0x1450 <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    143a:	21 e0       	ldi	r18, 0x01	; 1
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	b9 01       	movw	r22, r18
    1440:	02 c0       	rjmp	.+4      	; 0x1446 <nrk_gpio_toggle+0x11c>
    1442:	66 0f       	add	r22, r22
    1444:	77 1f       	adc	r23, r23
    1446:	8a 95       	dec	r24
    1448:	e2 f7       	brpl	.-8      	; 0x1442 <nrk_gpio_toggle+0x118>
    144a:	cb 01       	movw	r24, r22
    144c:	84 2b       	or	r24, r20
    144e:	0b c0       	rjmp	.+22     	; 0x1466 <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    1450:	21 e0       	ldi	r18, 0x01	; 1
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	b9 01       	movw	r22, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <nrk_gpio_toggle+0x132>
    1458:	66 0f       	add	r22, r22
    145a:	77 1f       	adc	r23, r23
    145c:	8a 95       	dec	r24
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <nrk_gpio_toggle+0x12e>
    1460:	cb 01       	movw	r24, r22
    1462:	80 95       	com	r24
    1464:	84 23       	and	r24, r20
    1466:	8b b9       	out	0x0b, r24	; 11
    1468:	ac cf       	rjmp	.-168    	; 0x13c2 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    146a:	2c b1       	in	r18, 0x0c	; 12
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	08 2e       	mov	r0, r24
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <nrk_gpio_toggle+0x14c>
    1472:	35 95       	asr	r19
    1474:	27 95       	ror	r18
    1476:	0a 94       	dec	r0
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    147a:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    147c:	20 fd       	sbrc	r18, 0
    147e:	0b c0       	rjmp	.+22     	; 0x1496 <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    1480:	21 e0       	ldi	r18, 0x01	; 1
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	b9 01       	movw	r22, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <nrk_gpio_toggle+0x162>
    1488:	66 0f       	add	r22, r22
    148a:	77 1f       	adc	r23, r23
    148c:	8a 95       	dec	r24
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <nrk_gpio_toggle+0x15e>
    1490:	cb 01       	movw	r24, r22
    1492:	84 2b       	or	r24, r20
    1494:	0b c0       	rjmp	.+22     	; 0x14ac <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    1496:	21 e0       	ldi	r18, 0x01	; 1
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	b9 01       	movw	r22, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <nrk_gpio_toggle+0x178>
    149e:	66 0f       	add	r22, r22
    14a0:	77 1f       	adc	r23, r23
    14a2:	8a 95       	dec	r24
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <nrk_gpio_toggle+0x174>
    14a6:	cb 01       	movw	r24, r22
    14a8:	80 95       	com	r24
    14aa:	84 23       	and	r24, r20
    14ac:	8e b9       	out	0x0e, r24	; 14
    14ae:	89 cf       	rjmp	.-238    	; 0x13c2 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    14b0:	2f b1       	in	r18, 0x0f	; 15
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	08 2e       	mov	r0, r24
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <nrk_gpio_toggle+0x192>
    14b8:	35 95       	asr	r19
    14ba:	27 95       	ror	r18
    14bc:	0a 94       	dec	r0
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    14c0:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    14c2:	20 fd       	sbrc	r18, 0
    14c4:	0b c0       	rjmp	.+22     	; 0x14dc <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    14c6:	21 e0       	ldi	r18, 0x01	; 1
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	b9 01       	movw	r22, r18
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <nrk_gpio_toggle+0x1a8>
    14ce:	66 0f       	add	r22, r22
    14d0:	77 1f       	adc	r23, r23
    14d2:	8a 95       	dec	r24
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <nrk_gpio_toggle+0x1a4>
    14d6:	cb 01       	movw	r24, r22
    14d8:	84 2b       	or	r24, r20
    14da:	0b c0       	rjmp	.+22     	; 0x14f2 <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    14dc:	21 e0       	ldi	r18, 0x01	; 1
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	b9 01       	movw	r22, r18
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <nrk_gpio_toggle+0x1be>
    14e4:	66 0f       	add	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	8a 95       	dec	r24
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <nrk_gpio_toggle+0x1ba>
    14ec:	cb 01       	movw	r24, r22
    14ee:	80 95       	com	r24
    14f0:	84 23       	and	r24, r20
    14f2:	81 bb       	out	0x11, r24	; 17
    14f4:	66 cf       	rjmp	.-308    	; 0x13c2 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    14f6:	22 b3       	in	r18, 0x12	; 18
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	08 2e       	mov	r0, r24
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <nrk_gpio_toggle+0x1d8>
    14fe:	35 95       	asr	r19
    1500:	27 95       	ror	r18
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    1506:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    1508:	20 fd       	sbrc	r18, 0
    150a:	0b c0       	rjmp	.+22     	; 0x1522 <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    150c:	21 e0       	ldi	r18, 0x01	; 1
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	b9 01       	movw	r22, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <nrk_gpio_toggle+0x1ee>
    1514:	66 0f       	add	r22, r22
    1516:	77 1f       	adc	r23, r23
    1518:	8a 95       	dec	r24
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <nrk_gpio_toggle+0x1ea>
    151c:	cb 01       	movw	r24, r22
    151e:	84 2b       	or	r24, r20
    1520:	0b c0       	rjmp	.+22     	; 0x1538 <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    1522:	21 e0       	ldi	r18, 0x01	; 1
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	b9 01       	movw	r22, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <nrk_gpio_toggle+0x204>
    152a:	66 0f       	add	r22, r22
    152c:	77 1f       	adc	r23, r23
    152e:	8a 95       	dec	r24
    1530:	e2 f7       	brpl	.-8      	; 0x152a <nrk_gpio_toggle+0x200>
    1532:	cb 01       	movw	r24, r22
    1534:	80 95       	com	r24
    1536:	84 23       	and	r24, r20
    1538:	84 bb       	out	0x14, r24	; 20
    153a:	43 cf       	rjmp	.-378    	; 0x13c2 <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    153c:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    153e:	08 95       	ret

00001540 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1540:	8f 3f       	cpi	r24, 0xFF	; 255
    1542:	09 f4       	brne	.+2      	; 0x1546 <nrk_gpio_direction+0x6>
    1544:	d5 c0       	rjmp	.+426    	; 0x16f0 <nrk_gpio_direction+0x1b0>
    1546:	e8 2f       	mov	r30, r24
    1548:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    154a:	4e 2f       	mov	r20, r30
    154c:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    154e:	61 11       	cpse	r22, r1
    1550:	67 c0       	rjmp	.+206    	; 0x1620 <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    1552:	47 30       	cpi	r20, 0x07	; 7
    1554:	51 05       	cpc	r21, r1
    1556:	08 f0       	brcs	.+2      	; 0x155a <nrk_gpio_direction+0x1a>
    1558:	cb c0       	rjmp	.+406    	; 0x16f0 <nrk_gpio_direction+0x1b0>
    155a:	fa 01       	movw	r30, r20
    155c:	e4 55       	subi	r30, 0x54	; 84
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	86 95       	lsr	r24
    1562:	86 95       	lsr	r24
    1564:	86 95       	lsr	r24
    1566:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    156a:	41 b1       	in	r20, 0x01	; 1
    156c:	21 e0       	ldi	r18, 0x01	; 1
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	b9 01       	movw	r22, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <nrk_gpio_direction+0x38>
    1574:	66 0f       	add	r22, r22
    1576:	77 1f       	adc	r23, r23
    1578:	8a 95       	dec	r24
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <nrk_gpio_direction+0x34>
    157c:	cb 01       	movw	r24, r22
    157e:	80 95       	com	r24
    1580:	84 23       	and	r24, r20
    1582:	65 c0       	rjmp	.+202    	; 0x164e <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    1584:	44 b1       	in	r20, 0x04	; 4
    1586:	21 e0       	ldi	r18, 0x01	; 1
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	b9 01       	movw	r22, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <nrk_gpio_direction+0x52>
    158e:	66 0f       	add	r22, r22
    1590:	77 1f       	adc	r23, r23
    1592:	8a 95       	dec	r24
    1594:	e2 f7       	brpl	.-8      	; 0x158e <nrk_gpio_direction+0x4e>
    1596:	cb 01       	movw	r24, r22
    1598:	80 95       	com	r24
    159a:	84 23       	and	r24, r20
    159c:	65 c0       	rjmp	.+202    	; 0x1668 <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    159e:	47 b1       	in	r20, 0x07	; 7
    15a0:	21 e0       	ldi	r18, 0x01	; 1
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	b9 01       	movw	r22, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <nrk_gpio_direction+0x6c>
    15a8:	66 0f       	add	r22, r22
    15aa:	77 1f       	adc	r23, r23
    15ac:	8a 95       	dec	r24
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <nrk_gpio_direction+0x68>
    15b0:	cb 01       	movw	r24, r22
    15b2:	80 95       	com	r24
    15b4:	84 23       	and	r24, r20
    15b6:	65 c0       	rjmp	.+202    	; 0x1682 <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    15b8:	4a b1       	in	r20, 0x0a	; 10
    15ba:	21 e0       	ldi	r18, 0x01	; 1
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	b9 01       	movw	r22, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <nrk_gpio_direction+0x86>
    15c2:	66 0f       	add	r22, r22
    15c4:	77 1f       	adc	r23, r23
    15c6:	8a 95       	dec	r24
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <nrk_gpio_direction+0x82>
    15ca:	cb 01       	movw	r24, r22
    15cc:	80 95       	com	r24
    15ce:	84 23       	and	r24, r20
    15d0:	65 c0       	rjmp	.+202    	; 0x169c <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    15d2:	4d b1       	in	r20, 0x0d	; 13
    15d4:	21 e0       	ldi	r18, 0x01	; 1
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	b9 01       	movw	r22, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <nrk_gpio_direction+0xa0>
    15dc:	66 0f       	add	r22, r22
    15de:	77 1f       	adc	r23, r23
    15e0:	8a 95       	dec	r24
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <nrk_gpio_direction+0x9c>
    15e4:	cb 01       	movw	r24, r22
    15e6:	80 95       	com	r24
    15e8:	84 23       	and	r24, r20
    15ea:	65 c0       	rjmp	.+202    	; 0x16b6 <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    15ec:	40 b3       	in	r20, 0x10	; 16
    15ee:	21 e0       	ldi	r18, 0x01	; 1
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	b9 01       	movw	r22, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <nrk_gpio_direction+0xba>
    15f6:	66 0f       	add	r22, r22
    15f8:	77 1f       	adc	r23, r23
    15fa:	8a 95       	dec	r24
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <nrk_gpio_direction+0xb6>
    15fe:	cb 01       	movw	r24, r22
    1600:	80 95       	com	r24
    1602:	84 23       	and	r24, r20
    1604:	65 c0       	rjmp	.+202    	; 0x16d0 <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    1606:	43 b3       	in	r20, 0x13	; 19
    1608:	21 e0       	ldi	r18, 0x01	; 1
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	b9 01       	movw	r22, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <nrk_gpio_direction+0xd4>
    1610:	66 0f       	add	r22, r22
    1612:	77 1f       	adc	r23, r23
    1614:	8a 95       	dec	r24
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <nrk_gpio_direction+0xd0>
    1618:	cb 01       	movw	r24, r22
    161a:	80 95       	com	r24
    161c:	84 23       	and	r24, r20
    161e:	65 c0       	rjmp	.+202    	; 0x16ea <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    1620:	47 30       	cpi	r20, 0x07	; 7
    1622:	51 05       	cpc	r21, r1
    1624:	08 f0       	brcs	.+2      	; 0x1628 <nrk_gpio_direction+0xe8>
    1626:	64 c0       	rjmp	.+200    	; 0x16f0 <nrk_gpio_direction+0x1b0>
    1628:	fa 01       	movw	r30, r20
    162a:	ed 54       	subi	r30, 0x4D	; 77
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	86 95       	lsr	r24
    1630:	86 95       	lsr	r24
    1632:	86 95       	lsr	r24
    1634:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    1638:	41 b1       	in	r20, 0x01	; 1
    163a:	21 e0       	ldi	r18, 0x01	; 1
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	b9 01       	movw	r22, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <nrk_gpio_direction+0x106>
    1642:	66 0f       	add	r22, r22
    1644:	77 1f       	adc	r23, r23
    1646:	8a 95       	dec	r24
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <nrk_gpio_direction+0x102>
    164a:	cb 01       	movw	r24, r22
    164c:	84 2b       	or	r24, r20
    164e:	81 b9       	out	0x01, r24	; 1
    1650:	4d c0       	rjmp	.+154    	; 0x16ec <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    1652:	44 b1       	in	r20, 0x04	; 4
    1654:	21 e0       	ldi	r18, 0x01	; 1
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	b9 01       	movw	r22, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <nrk_gpio_direction+0x120>
    165c:	66 0f       	add	r22, r22
    165e:	77 1f       	adc	r23, r23
    1660:	8a 95       	dec	r24
    1662:	e2 f7       	brpl	.-8      	; 0x165c <nrk_gpio_direction+0x11c>
    1664:	cb 01       	movw	r24, r22
    1666:	84 2b       	or	r24, r20
    1668:	84 b9       	out	0x04, r24	; 4
    166a:	40 c0       	rjmp	.+128    	; 0x16ec <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    166c:	47 b1       	in	r20, 0x07	; 7
    166e:	21 e0       	ldi	r18, 0x01	; 1
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	b9 01       	movw	r22, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <nrk_gpio_direction+0x13a>
    1676:	66 0f       	add	r22, r22
    1678:	77 1f       	adc	r23, r23
    167a:	8a 95       	dec	r24
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <nrk_gpio_direction+0x136>
    167e:	cb 01       	movw	r24, r22
    1680:	84 2b       	or	r24, r20
    1682:	87 b9       	out	0x07, r24	; 7
    1684:	33 c0       	rjmp	.+102    	; 0x16ec <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    1686:	4a b1       	in	r20, 0x0a	; 10
    1688:	21 e0       	ldi	r18, 0x01	; 1
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	b9 01       	movw	r22, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <nrk_gpio_direction+0x154>
    1690:	66 0f       	add	r22, r22
    1692:	77 1f       	adc	r23, r23
    1694:	8a 95       	dec	r24
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <nrk_gpio_direction+0x150>
    1698:	cb 01       	movw	r24, r22
    169a:	84 2b       	or	r24, r20
    169c:	8a b9       	out	0x0a, r24	; 10
    169e:	26 c0       	rjmp	.+76     	; 0x16ec <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    16a0:	4d b1       	in	r20, 0x0d	; 13
    16a2:	21 e0       	ldi	r18, 0x01	; 1
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	b9 01       	movw	r22, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <nrk_gpio_direction+0x16e>
    16aa:	66 0f       	add	r22, r22
    16ac:	77 1f       	adc	r23, r23
    16ae:	8a 95       	dec	r24
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <nrk_gpio_direction+0x16a>
    16b2:	cb 01       	movw	r24, r22
    16b4:	84 2b       	or	r24, r20
    16b6:	8d b9       	out	0x0d, r24	; 13
    16b8:	19 c0       	rjmp	.+50     	; 0x16ec <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    16ba:	40 b3       	in	r20, 0x10	; 16
    16bc:	21 e0       	ldi	r18, 0x01	; 1
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	b9 01       	movw	r22, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <nrk_gpio_direction+0x188>
    16c4:	66 0f       	add	r22, r22
    16c6:	77 1f       	adc	r23, r23
    16c8:	8a 95       	dec	r24
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <nrk_gpio_direction+0x184>
    16cc:	cb 01       	movw	r24, r22
    16ce:	84 2b       	or	r24, r20
    16d0:	80 bb       	out	0x10, r24	; 16
    16d2:	0c c0       	rjmp	.+24     	; 0x16ec <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    16d4:	43 b3       	in	r20, 0x13	; 19
    16d6:	21 e0       	ldi	r18, 0x01	; 1
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	b9 01       	movw	r22, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <nrk_gpio_direction+0x1a2>
    16de:	66 0f       	add	r22, r22
    16e0:	77 1f       	adc	r23, r23
    16e2:	8a 95       	dec	r24
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <nrk_gpio_direction+0x19e>
    16e6:	cb 01       	movw	r24, r22
    16e8:	84 2b       	or	r24, r20
    16ea:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    16ee:	08 95       	ret
                        default: return -1;
    16f0:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    16f2:	08 95       	ret

000016f4 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    16f4:	81 11       	cpse	r24, r1
    16f6:	06 c0       	rjmp	.+12     	; 0x1704 <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    16f8:	80 b1       	in	r24, 0x00	; 0
    16fa:	86 95       	lsr	r24
    16fc:	81 70       	andi	r24, 0x01	; 1
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	89 27       	eor	r24, r25
    1702:	08 95       	ret
	} 
return -1;
    1704:	8f ef       	ldi	r24, 0xFF	; 255
}
    1706:	08 95       	ret

00001708 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	11 f4       	brne	.+4      	; 0x1710 <nrk_led_toggle+0x8>
    170c:	83 e2       	ldi	r24, 0x23	; 35
    170e:	0d c0       	rjmp	.+26     	; 0x172a <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    1710:	81 30       	cpi	r24, 0x01	; 1
    1712:	91 05       	cpc	r25, r1
    1714:	11 f4       	brne	.+4      	; 0x171a <nrk_led_toggle+0x12>
    1716:	8b e2       	ldi	r24, 0x2B	; 43
    1718:	08 c0       	rjmp	.+16     	; 0x172a <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    171a:	82 30       	cpi	r24, 0x02	; 2
    171c:	91 05       	cpc	r25, r1
    171e:	11 f4       	brne	.+4      	; 0x1724 <nrk_led_toggle+0x1c>
    1720:	83 e3       	ldi	r24, 0x33	; 51
    1722:	03 c0       	rjmp	.+6      	; 0x172a <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    1724:	03 97       	sbiw	r24, 0x03	; 3
    1726:	29 f4       	brne	.+10     	; 0x1732 <nrk_led_toggle+0x2a>
    1728:	8b e3       	ldi	r24, 0x3B	; 59
    172a:	0e 94 95 09 	call	0x132a	; 0x132a <nrk_gpio_toggle>
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	08 95       	ret
return -1;
    1732:	8f ef       	ldi	r24, 0xFF	; 255
}
    1734:	08 95       	ret

00001736 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	11 f4       	brne	.+4      	; 0x173e <nrk_led_clr+0x8>
    173a:	83 e2       	ldi	r24, 0x23	; 35
    173c:	0d c0       	rjmp	.+26     	; 0x1758 <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	91 05       	cpc	r25, r1
    1742:	11 f4       	brne	.+4      	; 0x1748 <nrk_led_clr+0x12>
    1744:	8b e2       	ldi	r24, 0x2B	; 43
    1746:	08 c0       	rjmp	.+16     	; 0x1758 <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    1748:	82 30       	cpi	r24, 0x02	; 2
    174a:	91 05       	cpc	r25, r1
    174c:	11 f4       	brne	.+4      	; 0x1752 <nrk_led_clr+0x1c>
    174e:	83 e3       	ldi	r24, 0x33	; 51
    1750:	03 c0       	rjmp	.+6      	; 0x1758 <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    1752:	03 97       	sbiw	r24, 0x03	; 3
    1754:	29 f4       	brne	.+10     	; 0x1760 <nrk_led_clr+0x2a>
    1756:	8b e3       	ldi	r24, 0x3B	; 59
    1758:	0e 94 82 08 	call	0x1104	; 0x1104 <nrk_gpio_set>
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	08 95       	ret
return -1;
    1760:	8f ef       	ldi	r24, 0xFF	; 255
}
    1762:	08 95       	ret

00001764 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	11 f4       	brne	.+4      	; 0x176c <nrk_led_set+0x8>
    1768:	83 e2       	ldi	r24, 0x23	; 35
    176a:	0d c0       	rjmp	.+26     	; 0x1786 <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    176c:	81 30       	cpi	r24, 0x01	; 1
    176e:	91 05       	cpc	r25, r1
    1770:	11 f4       	brne	.+4      	; 0x1776 <nrk_led_set+0x12>
    1772:	8b e2       	ldi	r24, 0x2B	; 43
    1774:	08 c0       	rjmp	.+16     	; 0x1786 <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    1776:	82 30       	cpi	r24, 0x02	; 2
    1778:	91 05       	cpc	r25, r1
    177a:	11 f4       	brne	.+4      	; 0x1780 <nrk_led_set+0x1c>
    177c:	83 e3       	ldi	r24, 0x33	; 51
    177e:	03 c0       	rjmp	.+6      	; 0x1786 <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    1780:	03 97       	sbiw	r24, 0x03	; 3
    1782:	29 f4       	brne	.+10     	; 0x178e <nrk_led_set+0x2a>
    1784:	8b e3       	ldi	r24, 0x3B	; 59
    1786:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <nrk_gpio_clr>
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	08 95       	ret
return -1;
    178e:	8f ef       	ldi	r24, 0xFF	; 255
}
    1790:	08 95       	ret

00001792 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    1792:	88 23       	and	r24, r24
    1794:	19 f0       	breq	.+6      	; 0x179c <nrk_gpio_pullups+0xa>
    1796:	85 b7       	in	r24, 0x35	; 53
    1798:	8f 7e       	andi	r24, 0xEF	; 239
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    179c:	85 b7       	in	r24, 0x35	; 53
    179e:	80 61       	ori	r24, 0x10	; 16
    17a0:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	08 95       	ret

000017a6 <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    17a6:	90 91 c8 00 	lds	r25, 0x00C8
    17aa:	95 ff       	sbrs	r25, 5
    17ac:	fc cf       	rjmp	.-8      	; 0x17a6 <putc1>
    17ae:	80 93 ce 00 	sts	0x00CE, r24
    17b2:	08 95       	ret

000017b4 <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    17b4:	90 93 c5 00 	sts	0x00C5, r25
    17b8:	80 93 c4 00 	sts	0x00C4, r24
    17bc:	86 e0       	ldi	r24, 0x06	; 6
    17be:	80 93 c2 00 	sts	0x00C2, r24
    17c2:	e1 ec       	ldi	r30, 0xC1	; 193
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	8b 7f       	andi	r24, 0xFB	; 251
    17ca:	80 83       	st	Z, r24
    17cc:	a0 ec       	ldi	r26, 0xC0	; 192
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	8c 91       	ld	r24, X
    17d2:	82 60       	ori	r24, 0x02	; 2
    17d4:	8c 93       	st	X, r24
ENABLE_UART0();
    17d6:	80 81       	ld	r24, Z
    17d8:	88 61       	ori	r24, 0x18	; 24
    17da:	80 83       	st	Z, r24
    17dc:	08 95       	ret

000017de <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    17de:	90 93 cd 00 	sts	0x00CD, r25
    17e2:	80 93 cc 00 	sts	0x00CC, r24
    17e6:	86 e0       	ldi	r24, 0x06	; 6
    17e8:	80 93 ca 00 	sts	0x00CA, r24
    17ec:	e9 ec       	ldi	r30, 0xC9	; 201
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	8b 7f       	andi	r24, 0xFB	; 251
    17f4:	80 83       	st	Z, r24
    17f6:	a8 ec       	ldi	r26, 0xC8	; 200
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	8c 91       	ld	r24, X
    17fc:	82 60       	ori	r24, 0x02	; 2
    17fe:	8c 93       	st	X, r24
ENABLE_UART1();
    1800:	80 81       	ld	r24, Z
    1802:	88 61       	ori	r24, 0x18	; 24
    1804:	80 83       	st	Z, r24
    1806:	08 95       	ret

00001808 <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    1808:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    180c:	61 e4       	ldi	r22, 0x41	; 65
    180e:	78 e0       	ldi	r23, 0x08	; 8
    1810:	8a ea       	ldi	r24, 0xAA	; 170
    1812:	97 e0       	ldi	r25, 0x07	; 7
    1814:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <fdevopen>
    1818:	90 93 d0 06 	sts	0x06D0, r25
    181c:	80 93 cf 06 	sts	0x06CF, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    1820:	61 e4       	ldi	r22, 0x41	; 65
    1822:	78 e0       	ldi	r23, 0x08	; 8
    1824:	8a ea       	ldi	r24, 0xAA	; 170
    1826:	97 e0       	ldi	r25, 0x07	; 7
    1828:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <fdevopen>
    182c:	90 93 ce 06 	sts	0x06CE, r25
    1830:	80 93 cd 06 	sts	0x06CD, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    1834:	0e 94 69 11 	call	0x22d2	; 0x22d2 <nrk_signal_create>
    1838:	80 93 cf 03 	sts	0x03CF, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    183c:	8f 3f       	cpi	r24, 0xFF	; 255
    183e:	19 f4       	brne	.+6      	; 0x1846 <nrk_setup_uart+0x3e>
    1840:	8e e0       	ldi	r24, 0x0E	; 14
    1842:	0e 94 65 10 	call	0x20ca	; 0x20ca <nrk_error_add>
   uart_rx_buf_start=0;
    1846:	10 92 e3 03 	sts	0x03E3, r1
    184a:	10 92 e2 03 	sts	0x03E2, r1
   uart_rx_buf_end=0;
    184e:	10 92 e1 03 	sts	0x03E1, r1
    1852:	10 92 e0 03 	sts	0x03E0, r1
   ENABLE_UART0_RX_INT();
    1856:	80 91 c1 00 	lds	r24, 0x00C1
    185a:	80 68       	ori	r24, 0x80	; 128
    185c:	80 93 c1 00 	sts	0x00C1, r24
    1860:	08 95       	ret

00001862 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    1862:	80 91 c8 00 	lds	r24, 0x00C8
    1866:	87 ff       	sbrs	r24, 7
    1868:	fc cf       	rjmp	.-8      	; 0x1862 <getc1>
    186a:	80 91 c8 00 	lds	r24, 0x00C8
    186e:	8f 77       	andi	r24, 0x7F	; 127
    1870:	80 93 c8 00 	sts	0x00C8, r24
    1874:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    1878:	08 95       	ret

0000187a <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	d1 f7       	brne	.-12     	; 0x187a <halWait>

} // halWait
    1886:	08 95       	ret

00001888 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    1888:	0c 94 c5 26 	jmp	0x4d8a	; 0x4d8a <__eerd_byte_m128rfa1>

0000188c <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    188c:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <__eewr_byte_m128rfa1>
}
    1890:	08 95       	ret

00001892 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    1892:	ef 92       	push	r14
    1894:	ff 92       	push	r15
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <__eerd_byte_m128rfa1>
    18a8:	18 2f       	mov	r17, r24
    18aa:	f7 01       	movw	r30, r14
    18ac:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <__eerd_byte_m128rfa1>
    18b6:	08 2f       	mov	r16, r24
    18b8:	f7 01       	movw	r30, r14
    18ba:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    18bc:	82 e0       	ldi	r24, 0x02	; 2
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <__eerd_byte_m128rfa1>
    18c4:	d8 2f       	mov	r29, r24
    18c6:	f7 01       	movw	r30, r14
    18c8:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    18ca:	83 e0       	ldi	r24, 0x03	; 3
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <__eerd_byte_m128rfa1>
    18d2:	c8 2f       	mov	r28, r24
    18d4:	f7 01       	movw	r30, r14
    18d6:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    18d8:	84 e0       	ldi	r24, 0x04	; 4
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <__eerd_byte_m128rfa1>
    18e0:	10 0f       	add	r17, r16
    18e2:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    18e4:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    18e6:	8c 17       	cp	r24, r28
    18e8:	11 f0       	breq	.+4      	; 0x18ee <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    18ea:	8f ef       	ldi	r24, 0xFF	; 255
    18ec:	01 c0       	rjmp	.+2      	; 0x18f0 <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    18ee:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	0f 91       	pop	r16
    18f8:	ff 90       	pop	r15
    18fa:	ef 90       	pop	r14
    18fc:	08 95       	ret

000018fe <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    1904:	85 e0       	ldi	r24, 0x05	; 5
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <__eerd_byte_m128rfa1>
    190c:	88 83       	st	Y, r24
return NRK_OK;
}
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	08 95       	ret

00001916 <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    1916:	fc 01       	movw	r30, r24
    1918:	60 81       	ld	r22, Z
    191a:	86 e0       	ldi	r24, 0x06	; 6
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	08 95       	ret

00001926 <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    192c:	86 e0       	ldi	r24, 0x06	; 6
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <__eerd_byte_m128rfa1>
    1934:	88 83       	st	Y, r24
  return NRK_OK;
}
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	08 95       	ret

0000193e <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    193e:	0f 93       	push	r16
    1940:	1f 93       	push	r17
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	8c 01       	movw	r16, r24
    1948:	c0 e0       	ldi	r28, 0x00	; 0
    194a:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    194c:	ce 01       	movw	r24, r28
    194e:	08 96       	adiw	r24, 0x08	; 8
    1950:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <__eerd_byte_m128rfa1>
    1954:	f8 01       	movw	r30, r16
    1956:	81 93       	st	Z+, r24
    1958:	8f 01       	movw	r16, r30
    195a:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    195c:	c0 31       	cpi	r28, 0x10	; 16
    195e:	d1 05       	cpc	r29, r1
    1960:	a9 f7       	brne	.-22     	; 0x194c <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	1f 91       	pop	r17
    196a:	0f 91       	pop	r16
    196c:	08 95       	ret

0000196e <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	8c 01       	movw	r16, r24
    1978:	c0 e0       	ldi	r28, 0x00	; 0
    197a:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    197c:	f8 01       	movw	r30, r16
    197e:	61 91       	ld	r22, Z+
    1980:	8f 01       	movw	r16, r30
    1982:	ce 01       	movw	r24, r28
    1984:	08 96       	adiw	r24, 0x08	; 8
    1986:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <__eewr_byte_m128rfa1>
    198a:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    198c:	c0 31       	cpi	r28, 0x10	; 16
    198e:	d1 05       	cpc	r29, r1
    1990:	a9 f7       	brne	.-22     	; 0x197c <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	1f 91       	pop	r17
    199a:	0f 91       	pop	r16
    199c:	08 95       	ret

0000199e <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    19a4:	87 e0       	ldi	r24, 0x07	; 7
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <__eerd_byte_m128rfa1>
    19ac:	88 83       	st	Y, r24
  return NRK_OK;
}
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	08 95       	ret

000019b6 <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    19b6:	fc 01       	movw	r30, r24
    19b8:	60 81       	ld	r22, Z
    19ba:	87 e0       	ldi	r24, 0x07	; 7
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	0e 94 cd 26 	call	0x4d9a	; 0x4d9a <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	08 95       	ret

000019c6 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    19c6:	f8 94       	cli
    19c8:	08 95       	ret

000019ca <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    19ca:	78 94       	sei
    19cc:	08 95       	ret

000019ce <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    19ce:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <nrk_int_disable>
while(1);
    19d2:	ff cf       	rjmp	.-2      	; 0x19d2 <nrk_halt+0x4>

000019d4 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	a3 97       	sbiw	r28, 0x23	; 35
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    19e8:	0e 94 69 11 	call	0x22d2	; 0x22d2 <nrk_signal_create>
    19ec:	80 93 2f 06 	sts	0x062F, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    19f0:	8f 3f       	cpi	r24, 0xFF	; 255
    19f2:	21 f4       	brne	.+8      	; 0x19fc <nrk_init+0x28>
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	8e e0       	ldi	r24, 0x0E	; 14
    19f8:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    19fc:	0e 94 43 20 	call	0x4086	; 0x4086 <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    1a00:	80 ff       	sbrs	r24, 0
    1a02:	04 c0       	rjmp	.+8      	; 0x1a0c <nrk_init+0x38>
    1a04:	60 e0       	ldi	r22, 0x00	; 0
    1a06:	86 e0       	ldi	r24, 0x06	; 6
    1a08:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    1a0c:	10 92 32 06 	sts	0x0632, r1
    nrk_cur_task_TCB = NULL;
    1a10:	10 92 40 06 	sts	0x0640, r1
    1a14:	10 92 3f 06 	sts	0x063F, r1
    
    nrk_high_ready_TCB = NULL;
    1a18:	10 92 31 06 	sts	0x0631, r1
    1a1c:	10 92 30 06 	sts	0x0630, r1
    nrk_high_ready_prio = 0; 
    1a20:	10 92 41 06 	sts	0x0641, r1
	nrk_stats_reset();
   #endif

    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    1a24:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <_nrk_reserve_init>
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    1a28:	10 92 3e 06 	sts	0x063E, r1
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    1a30:	2f ef       	ldi	r18, 0xFF	; 255
    1a32:	fc 01       	movw	r30, r24
    1a34:	ee 5d       	subi	r30, 0xDE	; 222
    1a36:	f9 4f       	sbci	r31, 0xF9	; 249
    1a38:	20 83       	st	Z, r18
    nrk_sem_list[i].value=-1;
    1a3a:	22 83       	std	Z+2, r18	; 0x02
    nrk_sem_list[i].resource_ceiling=-1;
    1a3c:	21 83       	std	Z+1, r18	; 0x01
    1a3e:	03 96       	adiw	r24, 0x03	; 3
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    1a40:	8c 30       	cpi	r24, 0x0C	; 12
    1a42:	91 05       	cpc	r25, r1
    1a44:	b1 f7       	brne	.-20     	; 0x1a32 <nrk_init+0x5e>
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1a4a:	33 e6       	ldi	r19, 0x63	; 99
        nrk_task_TCB[i].task_ID = -1; 
    1a4c:	2f ef       	ldi	r18, 0xFF	; 255
    1a4e:	fc 01       	movw	r30, r24
    1a50:	e2 5e       	subi	r30, 0xE2	; 226
    1a52:	fa 4f       	sbci	r31, 0xFA	; 250
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1a54:	32 87       	std	Z+10, r19	; 0x0a
        nrk_task_TCB[i].task_ID = -1; 
    1a56:	20 87       	std	Z+8, r18	; 0x08
    1a58:	8b 96       	adiw	r24, 0x2b	; 43
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    1a5a:	82 30       	cpi	r24, 0x02	; 2
    1a5c:	41 e0       	ldi	r20, 0x01	; 1
    1a5e:	94 07       	cpc	r25, r20
    1a60:	b1 f7       	brne	.-20     	; 0x1a4e <nrk_init+0x7a>
    1a62:	e2 e4       	ldi	r30, 0x42	; 66
    1a64:	f6 e0       	ldi	r31, 0x06	; 6
    1a66:	cf 01       	movw	r24, r30
    1a68:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1a6a:	94 83       	std	Z+4, r25	; 0x04
    1a6c:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1a6e:	f7 83       	std	Z+7, r31	; 0x07
    1a70:	e6 83       	std	Z+6, r30	; 0x06
    1a72:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    1a74:	86 e0       	ldi	r24, 0x06	; 6
    1a76:	e0 36       	cpi	r30, 0x60	; 96
    1a78:	f8 07       	cpc	r31, r24
    1a7a:	a9 f7       	brne	.-22     	; 0x1a66 <nrk_init+0x92>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    1a7c:	10 92 44 06 	sts	0x0644, r1
    1a80:	10 92 43 06 	sts	0x0643, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    1a84:	10 92 64 06 	sts	0x0664, r1
    1a88:	10 92 63 06 	sts	0x0663, r1
	_head_node = NULL;
    1a8c:	10 92 35 06 	sts	0x0635, r1
    1a90:	10 92 34 06 	sts	0x0634, r1
	_free_node = &_nrk_readyQ[0];
    1a94:	82 e4       	ldi	r24, 0x42	; 66
    1a96:	96 e0       	ldi	r25, 0x06	; 6
    1a98:	90 93 1d 05 	sts	0x051D, r25
    1a9c:	80 93 1c 05 	sts	0x051C, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    1aa0:	6a e5       	ldi	r22, 0x5A	; 90
    1aa2:	7a e1       	ldi	r23, 0x1A	; 26
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    1aac:	40 e8       	ldi	r20, 0x80	; 128
    1aae:	50 e0       	ldi	r21, 0x00	; 0
    1ab0:	61 e6       	ldi	r22, 0x61	; 97
    1ab2:	74 e0       	ldi	r23, 0x04	; 4
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	0e 94 7f 22 	call	0x44fe	; 0x44fe <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    1abc:	85 e5       	ldi	r24, 0x55	; 85
    1abe:	80 93 61 04 	sts	0x0461, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    1ac2:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    1ac4:	1c 86       	std	Y+12, r1	; 0x0c
    1ac6:	1d 86       	std	Y+13, r1	; 0x0d
    1ac8:	1e 86       	std	Y+14, r1	; 0x0e
    1aca:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    1acc:	18 8a       	std	Y+16, r1	; 0x10
    1ace:	19 8a       	std	Y+17, r1	; 0x11
    1ad0:	1a 8a       	std	Y+18, r1	; 0x12
    1ad2:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    1ad4:	1c 8a       	std	Y+20, r1	; 0x14
    1ad6:	1d 8a       	std	Y+21, r1	; 0x15
    1ad8:	1e 8a       	std	Y+22, r1	; 0x16
    1ada:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    1adc:	18 8e       	std	Y+24, r1	; 0x18
    1ade:	19 8e       	std	Y+25, r1	; 0x19
    1ae0:	1a 8e       	std	Y+26, r1	; 0x1a
    1ae2:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    1ae4:	1c 8e       	std	Y+28, r1	; 0x1c
    1ae6:	1d 8e       	std	Y+29, r1	; 0x1d
    1ae8:	1e 8e       	std	Y+30, r1	; 0x1e
    1aea:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    1aec:	18 a2       	std	Y+32, r1	; 0x20
    1aee:	19 a2       	std	Y+33, r1	; 0x21
    1af0:	1a a2       	std	Y+34, r1	; 0x22
    1af2:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    1af8:	92 e0       	ldi	r25, 0x02	; 2
    1afa:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    1afc:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    1afe:	ce 01       	movw	r24, r28
    1b00:	01 96       	adiw	r24, 0x01	; 1
    1b02:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <nrk_activate_task>
	
}
    1b06:	a3 96       	adiw	r28, 0x23	; 35
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	df 91       	pop	r29
    1b14:	cf 91       	pop	r28
    1b16:	08 95       	ret

00001b18 <nrk_start>:




void nrk_start (void)
{
    1b18:	06 e2       	ldi	r16, 0x26	; 38
    1b1a:	15 e0       	ldi	r17, 0x05	; 5
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1b1c:	c0 e0       	ldi	r28, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    1b1e:	f8 01       	movw	r30, r16
    1b20:	d0 80       	ld	r13, Z
	// only check activated tasks
	if(task_ID!=-1)
    1b22:	ff ef       	ldi	r31, 0xFF	; 255
    1b24:	df 12       	cpse	r13, r31
    1b26:	22 c0       	rjmp	.+68     	; 0x1b6c <nrk_start+0x54>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1b28:	cf 5f       	subi	r28, 0xFF	; 255
    1b2a:	05 5d       	subi	r16, 0xD5	; 213
    1b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2e:	c6 30       	cpi	r28, 0x06	; 6
    1b30:	b1 f7       	brne	.-20     	; 0x1b1e <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    1b32:	0e 94 8a 14 	call	0x2914	; 0x2914 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    1b36:	2b e2       	ldi	r18, 0x2B	; 43
    1b38:	82 02       	muls	r24, r18
    1b3a:	c0 01       	movw	r24, r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	fc 01       	movw	r30, r24
    1b40:	e2 5e       	subi	r30, 0xE2	; 226
    1b42:	fa 4f       	sbci	r31, 0xFA	; 250
    1b44:	82 85       	ldd	r24, Z+10	; 0x0a
    1b46:	80 93 41 06 	sts	0x0641, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    1b4a:	f0 93 40 06 	sts	0x0640, r31
    1b4e:	e0 93 3f 06 	sts	0x063F, r30
    1b52:	f0 93 31 06 	sts	0x0631, r31
    1b56:	e0 93 30 06 	sts	0x0630, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    1b5a:	80 93 32 06 	sts	0x0632, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    1b5e:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <nrk_target_start>
    nrk_stack_pointer_init(); 
    1b62:	0e 94 db 22 	call	0x45b6	; 0x45b6 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    1b66:	0e 94 f5 22 	call	0x45ea	; 0x45ea <nrk_start_high_ready_task>
    1b6a:	16 c0       	rjmp	.+44     	; 0x1b98 <nrk_start+0x80>
    1b6c:	86 e2       	ldi	r24, 0x26	; 38
    1b6e:	e8 2e       	mov	r14, r24
    1b70:	85 e0       	ldi	r24, 0x05	; 5
    1b72:	f8 2e       	mov	r15, r24
    1b74:	d0 e0       	ldi	r29, 0x00	; 0
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    1b76:	cd 17       	cp	r28, r29
    1b78:	41 f0       	breq	.+16     	; 0x1b8a <nrk_start+0x72>
    1b7a:	f7 01       	movw	r30, r14
    1b7c:	80 81       	ld	r24, Z
    1b7e:	d8 12       	cpse	r13, r24
    1b80:	04 c0       	rjmp	.+8      	; 0x1b8a <nrk_start+0x72>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    1b82:	6d 2d       	mov	r22, r13
    1b84:	85 e0       	ldi	r24, 0x05	; 5
    1b86:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    1b8a:	df 5f       	subi	r29, 0xFF	; 255
    1b8c:	fb e2       	ldi	r31, 0x2B	; 43
    1b8e:	ef 0e       	add	r14, r31
    1b90:	f1 1c       	adc	r15, r1
    1b92:	d6 30       	cpi	r29, 0x06	; 6
    1b94:	81 f7       	brne	.-32     	; 0x1b76 <nrk_start+0x5e>
    1b96:	c8 cf       	rjmp	.-112    	; 0x1b28 <nrk_start+0x10>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    1b98:	ff cf       	rjmp	.-2      	; 0x1b98 <nrk_start+0x80>

00001b9a <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    1b9a:	cf 92       	push	r12
    1b9c:	df 92       	push	r13
    1b9e:	ef 92       	push	r14
    1ba0:	ff 92       	push	r15
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	ec 01       	movw	r28, r24
    1bac:	8b 01       	movw	r16, r22
    1bae:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    1bb0:	89 85       	ldd	r24, Y+9	; 0x09
    1bb2:	82 30       	cpi	r24, 0x02	; 2
    1bb4:	21 f0       	breq	.+8      	; 0x1bbe <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    1bb6:	80 91 2e 06 	lds	r24, 0x062E
    1bba:	88 83       	st	Y, r24
    1bbc:	01 c0       	rjmp	.+2      	; 0x1bc0 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    1bbe:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    1bc0:	80 91 2e 06 	lds	r24, 0x062E
    1bc4:	86 30       	cpi	r24, 0x06	; 6
    1bc6:	20 f0       	brcs	.+8      	; 0x1bd0 <nrk_TCB_init+0x36>
    1bc8:	60 e0       	ldi	r22, 0x00	; 0
    1bca:	87 e0       	ldi	r24, 0x07	; 7
    1bcc:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    1bd0:	89 85       	ldd	r24, Y+9	; 0x09
    1bd2:	82 30       	cpi	r24, 0x02	; 2
    1bd4:	29 f0       	breq	.+10     	; 0x1be0 <nrk_TCB_init+0x46>
    1bd6:	80 91 2e 06 	lds	r24, 0x062E
    1bda:	8f 5f       	subi	r24, 0xFF	; 255
    1bdc:	80 93 2e 06 	sts	0x062E, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    1be0:	80 91 2e 06 	lds	r24, 0x062E
    1be4:	81 11       	cpse	r24, r1
    1be6:	03 c0       	rjmp	.+6      	; 0x1bee <nrk_TCB_init+0x54>
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	80 93 2e 06 	sts	0x062E, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    1bee:	38 81       	ld	r19, Y
    1bf0:	2b e2       	ldi	r18, 0x2B	; 43
    1bf2:	32 03       	mulsu	r19, r18
    1bf4:	f0 01       	movw	r30, r0
    1bf6:	11 24       	eor	r1, r1
    1bf8:	e2 5e       	subi	r30, 0xE2	; 226
    1bfa:	fa 4f       	sbci	r31, 0xFA	; 250
    1bfc:	11 83       	std	Z+1, r17	; 0x01
    1bfe:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    1c00:	88 85       	ldd	r24, Y+8	; 0x08
    1c02:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    1c04:	38 81       	ld	r19, Y
    1c06:	32 03       	mulsu	r19, r18
    1c08:	f0 01       	movw	r30, r0
    1c0a:	11 24       	eor	r1, r1
    1c0c:	e2 5e       	subi	r30, 0xE2	; 226
    1c0e:	fa 4f       	sbci	r31, 0xFA	; 250
    1c10:	83 e0       	ldi	r24, 0x03	; 3
    1c12:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    1c14:	38 81       	ld	r19, Y
    1c16:	32 03       	mulsu	r19, r18
    1c18:	f0 01       	movw	r30, r0
    1c1a:	11 24       	eor	r1, r1
    1c1c:	e2 5e       	subi	r30, 0xE2	; 226
    1c1e:	fa 4f       	sbci	r31, 0xFA	; 250
    1c20:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    1c22:	08 81       	ld	r16, Y
    1c24:	02 03       	mulsu	r16, r18
    1c26:	80 01       	movw	r16, r0
    1c28:	11 24       	eor	r1, r1
    1c2a:	02 5e       	subi	r16, 0xE2	; 226
    1c2c:	1a 4f       	sbci	r17, 0xFA	; 250
    1c2e:	f8 01       	movw	r30, r16
    1c30:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    1c32:	ce 01       	movw	r24, r28
    1c34:	0b 96       	adiw	r24, 0x0b	; 11
    1c36:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <_nrk_time_to_ticks_long>
    1c3a:	f8 01       	movw	r30, r16
    1c3c:	61 a3       	std	Z+33, r22	; 0x21
    1c3e:	72 a3       	std	Z+34, r23	; 0x22
    1c40:	83 a3       	std	Z+35, r24	; 0x23
    1c42:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    1c44:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c46:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c48:	ad 85       	ldd	r26, Y+13	; 0x0d
    1c4a:	be 85       	ldd	r27, Y+14	; 0x0e
    1c4c:	88 33       	cpi	r24, 0x38	; 56
    1c4e:	99 48       	sbci	r25, 0x89	; 137
    1c50:	a1 44       	sbci	r26, 0x41	; 65
    1c52:	b1 05       	cpc	r27, r1
    1c54:	20 f0       	brcs	.+8      	; 0x1c5e <nrk_TCB_init+0xc4>
    1c56:	68 81       	ld	r22, Y
    1c58:	86 e1       	ldi	r24, 0x16	; 22
    1c5a:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    1c5e:	c8 80       	ld	r12, Y
    1c60:	dd 24       	eor	r13, r13
    1c62:	c7 fc       	sbrc	r12, 7
    1c64:	d0 94       	com	r13
    1c66:	ce 01       	movw	r24, r28
    1c68:	4b 96       	adiw	r24, 0x1b	; 27
    1c6a:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <_nrk_time_to_ticks_long>
    1c6e:	1b e2       	ldi	r17, 0x2B	; 43
    1c70:	1c 9d       	mul	r17, r12
    1c72:	f0 01       	movw	r30, r0
    1c74:	1d 9d       	mul	r17, r13
    1c76:	f0 0d       	add	r31, r0
    1c78:	11 24       	eor	r1, r1
    1c7a:	e2 5e       	subi	r30, 0xE2	; 226
    1c7c:	fa 4f       	sbci	r31, 0xFA	; 250
    1c7e:	65 8b       	std	Z+21, r22	; 0x15
    1c80:	76 8b       	std	Z+22, r23	; 0x16
    1c82:	87 8b       	std	Z+23, r24	; 0x17
    1c84:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    1c86:	28 81       	ld	r18, Y
    1c88:	21 03       	mulsu	r18, r17
    1c8a:	c0 01       	movw	r24, r0
    1c8c:	11 24       	eor	r1, r1
    1c8e:	9c 01       	movw	r18, r24
    1c90:	22 5e       	subi	r18, 0xE2	; 226
    1c92:	3a 4f       	sbci	r19, 0xFA	; 250
    1c94:	69 01       	movw	r12, r18
    1c96:	f9 01       	movw	r30, r18
    1c98:	45 89       	ldd	r20, Z+21	; 0x15
    1c9a:	56 89       	ldd	r21, Z+22	; 0x16
    1c9c:	67 89       	ldd	r22, Z+23	; 0x17
    1c9e:	70 8d       	ldd	r23, Z+24	; 0x18
    1ca0:	81 a1       	ldd	r24, Z+33	; 0x21
    1ca2:	92 a1       	ldd	r25, Z+34	; 0x22
    1ca4:	a3 a1       	ldd	r26, Z+35	; 0x23
    1ca6:	b4 a1       	ldd	r27, Z+36	; 0x24
    1ca8:	84 0f       	add	r24, r20
    1caa:	95 1f       	adc	r25, r21
    1cac:	a6 1f       	adc	r26, r22
    1cae:	b7 1f       	adc	r27, r23
    1cb0:	81 8f       	std	Z+25, r24	; 0x19
    1cb2:	92 8f       	std	Z+26, r25	; 0x1a
    1cb4:	a3 8f       	std	Z+27, r26	; 0x1b
    1cb6:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    1cb8:	ce 01       	movw	r24, r28
    1cba:	43 96       	adiw	r24, 0x13	; 19
    1cbc:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <_nrk_time_to_ticks_long>
    1cc0:	f6 01       	movw	r30, r12
    1cc2:	65 a3       	std	Z+37, r22	; 0x25
    1cc4:	76 a3       	std	Z+38, r23	; 0x26
    1cc6:	87 a3       	std	Z+39, r24	; 0x27
    1cc8:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    1cca:	28 81       	ld	r18, Y
    1ccc:	21 03       	mulsu	r18, r17
    1cce:	f0 01       	movw	r30, r0
    1cd0:	11 24       	eor	r1, r1
    1cd2:	e2 5e       	subi	r30, 0xE2	; 226
    1cd4:	fa 4f       	sbci	r31, 0xFA	; 250
    1cd6:	85 a1       	ldd	r24, Z+37	; 0x25
    1cd8:	96 a1       	ldd	r25, Z+38	; 0x26
    1cda:	a7 a1       	ldd	r26, Z+39	; 0x27
    1cdc:	b0 a5       	ldd	r27, Z+40	; 0x28
    1cde:	85 8f       	std	Z+29, r24	; 0x1d
    1ce0:	96 8f       	std	Z+30, r25	; 0x1e
    1ce2:	a7 8f       	std	Z+31, r26	; 0x1f
    1ce4:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	92 a7       	std	Z+42, r25	; 0x2a
    1cec:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    1cee:	f3 82       	std	Z+3, r15	; 0x03
    1cf0:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    1cf2:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    1cf4:	df 91       	pop	r29
    1cf6:	cf 91       	pop	r28
    1cf8:	1f 91       	pop	r17
    1cfa:	0f 91       	pop	r16
    1cfc:	ff 90       	pop	r15
    1cfe:	ef 90       	pop	r14
    1d00:	df 90       	pop	r13
    1d02:	cf 90       	pop	r12
    1d04:	08 95       	ret

00001d06 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    1d06:	0c 94 7e 1a 	jmp	0x34fc	; 0x34fc <_nrk_scheduler>

00001d0a <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    1d0a:	85 e6       	ldi	r24, 0x65	; 101
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	08 95       	ret

00001d10 <_nrk_errno_set>:
    1d10:	e0 91 3f 06 	lds	r30, 0x063F
    1d14:	f0 91 40 06 	lds	r31, 0x0640
    1d18:	84 87       	std	Z+12, r24	; 0x0c
    1d1a:	08 95       	ret

00001d1c <nrk_errno_get>:
    nrk_cur_task_TCB->errno = error_code;
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    1d1c:	e0 91 3f 06 	lds	r30, 0x063F
    1d20:	f0 91 40 06 	lds	r31, 0x0640
}
    1d24:	84 85       	ldd	r24, Z+12	; 0x0c
    1d26:	08 95       	ret

00001d28 <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    1d28:	fc 01       	movw	r30, r24
    if (error_num == 0)
    1d2a:	80 91 60 04 	lds	r24, 0x0460
    1d2e:	88 23       	and	r24, r24
    1d30:	31 f0       	breq	.+12     	; 0x1d3e <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    1d32:	db 01       	movw	r26, r22
    1d34:	8c 93       	st	X, r24
    *task_id = error_task;
    1d36:	80 91 e6 03 	lds	r24, 0x03E6
    1d3a:	80 83       	st	Z, r24
    return 1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
}
    1d3e:	08 95       	ret

00001d40 <nrk_error_handle>:
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    1d40:	10 92 60 04 	sts	0x0460, r1
    1d44:	08 95       	ret

00001d46 <clear_regs>:
}

inline void clear_regs()
{

        GTCCR=0;
    1d46:	13 bc       	out	0x23, r1	; 35
        ASSR=0;
    1d48:	10 92 b6 00 	sts	0x00B6, r1

        OCR0B=0;
    1d4c:	18 bc       	out	0x28, r1	; 40
        OCR0A=0;
    1d4e:	17 bc       	out	0x27, r1	; 39
        TCNT0=0;
    1d50:	16 bc       	out	0x26, r1	; 38
        TCCR0B=0;
    1d52:	15 bc       	out	0x25, r1	; 37
        TCCR0A=0;
    1d54:	14 bc       	out	0x24, r1	; 36

        EIMSK=0;
    1d56:	1d ba       	out	0x1d, r1	; 29
        EIFR=0;
    1d58:	1c ba       	out	0x1c, r1	; 28
        PCIFR=0;
    1d5a:	1b ba       	out	0x1b, r1	; 27


        OCR3B =0;
    1d5c:	10 92 9b 00 	sts	0x009B, r1
    1d60:	10 92 9a 00 	sts	0x009A, r1
        OCR3A =0;
    1d64:	10 92 99 00 	sts	0x0099, r1
    1d68:	10 92 98 00 	sts	0x0098, r1
        TCNT3 =0;
    1d6c:	10 92 95 00 	sts	0x0095, r1
    1d70:	10 92 94 00 	sts	0x0094, r1
        TCCR3B=0;
    1d74:	10 92 91 00 	sts	0x0091, r1
        TCCR3A=0;
    1d78:	10 92 90 00 	sts	0x0090, r1
        TIFR3=0;
    1d7c:	18 ba       	out	0x18, r1	; 24
        TIMSK3=0;
    1d7e:	10 92 71 00 	sts	0x0071, r1


        OCR2B =0;
    1d82:	10 92 b4 00 	sts	0x00B4, r1
        OCR2A =0;
    1d86:	10 92 b3 00 	sts	0x00B3, r1
        TCNT2 =0;
    1d8a:	10 92 b2 00 	sts	0x00B2, r1
        TCCR2B=0;
    1d8e:	10 92 b1 00 	sts	0x00B1, r1
        TCCR2A=0;
    1d92:	e0 eb       	ldi	r30, 0xB0	; 176
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	10 82       	st	Z, r1
        TCCR2A=0;
    1d98:	10 82       	st	Z, r1
        TIFR2=0;
    1d9a:	17 ba       	out	0x17, r1	; 23
        TIMSK2=0;
    1d9c:	10 92 70 00 	sts	0x0070, r1


	// set all bits to 1 in order to clear
	MCUSR=0xff;
    1da0:	8f ef       	ldi	r24, 0xFF	; 255
    1da2:	84 bf       	out	0x34, r24	; 52
    1da4:	08 95       	ret

00001da6 <pause>:
    }

}

void pause()
{
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	1f 92       	push	r1
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1db0:	19 82       	std	Y+1, r1	; 0x01
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	84 36       	cpi	r24, 0x64	; 100
    1db6:	40 f4       	brcc	.+16     	; 0x1dc8 <pause+0x22>
        nrk_spin_wait_us (2000);
    1db8:	80 ed       	ldi	r24, 0xD0	; 208
    1dba:	97 e0       	ldi	r25, 0x07	; 7
    1dbc:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	8f 5f       	subi	r24, 0xFF	; 255
    1dc4:	89 83       	std	Y+1, r24	; 0x01
    1dc6:	f5 cf       	rjmp	.-22     	; 0x1db2 <pause+0xc>
        nrk_spin_wait_us (2000);
}
    1dc8:	0f 90       	pop	r0
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	08 95       	ret

00001dd0 <blink_dash>:

}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	0e 94 b2 0b 	call	0x1764	; 0x1764 <nrk_led_set>
    pause();
    1dd8:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <pause>
    pause();
    1ddc:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <pause>
    pause();
    1de0:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <pause>
    nrk_led_clr(GREEN_LED);
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	0e 94 9b 0b 	call	0x1736	; 0x1736 <nrk_led_clr>
    pause();
    1dec:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <pause>

00001df0 <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	0e 94 b2 0b 	call	0x1764	; 0x1764 <nrk_led_set>
    pause();
    1df8:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <pause>
    nrk_led_clr(GREEN_LED);
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	0e 94 9b 0b 	call	0x1736	; 0x1736 <nrk_led_clr>
    pause();
    1e04:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <pause>

00001e08 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    1e08:	ff 92       	push	r15
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	00 d0       	rcall	.+0      	; 0x1e14 <blink_morse_code_error+0xc>
    1e14:	1f 92       	push	r1
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    1e1a:	1f 92       	push	r1
    1e1c:	8f 93       	push	r24
    1e1e:	86 e8       	ldi	r24, 0x86	; 134
    1e20:	93 e0       	ldi	r25, 0x03	; 3
    1e22:	9f 93       	push	r25
    1e24:	8f 93       	push	r24
    1e26:	8e 01       	movw	r16, r28
    1e28:	0f 5f       	subi	r16, 0xFF	; 255
    1e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2c:	1f 93       	push	r17
    1e2e:	0f 93       	push	r16
    1e30:	0e 94 37 26 	call	0x4c6e	; 0x4c6e <sprintf>

    for(i=0; i<strlen(str); i++ )
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	f1 2c       	mov	r15, r1
    1e42:	f8 01       	movw	r30, r16
    1e44:	01 90       	ld	r0, Z+
    1e46:	00 20       	and	r0, r0
    1e48:	e9 f7       	brne	.-6      	; 0x1e44 <blink_morse_code_error+0x3c>
    1e4a:	31 97       	sbiw	r30, 0x01	; 1
    1e4c:	e0 1b       	sub	r30, r16
    1e4e:	f1 0b       	sbc	r31, r17
    1e50:	8f 2d       	mov	r24, r15
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	8e 17       	cp	r24, r30
    1e56:	9f 07       	cpc	r25, r31
    1e58:	08 f0       	brcs	.+2      	; 0x1e5c <blink_morse_code_error+0x54>
    1e5a:	5d c0       	rjmp	.+186    	; 0x1f16 <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	e8 0f       	add	r30, r24
    1e60:	f9 1f       	adc	r31, r25
    1e62:	e0 81       	ld	r30, Z
    1e64:	8e 2f       	mov	r24, r30
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	fc 01       	movw	r30, r24
    1e6a:	f0 97       	sbiw	r30, 0x30	; 48
    1e6c:	ea 30       	cpi	r30, 0x0A	; 10
    1e6e:	f1 05       	cpc	r31, r1
    1e70:	08 f0       	brcs	.+2      	; 0x1e74 <blink_morse_code_error+0x6c>
    1e72:	49 c0       	rjmp	.+146    	; 0x1f06 <blink_morse_code_error+0xfe>
    1e74:	e6 54       	subi	r30, 0x46	; 70
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__tablejump2__>
        {
        case '0':
            blink_dash();
    1e7c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <blink_dash>
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    1e82:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <blink_dot>
            blink_dash();
    1e86:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <blink_dash>
            blink_dash();
    1e8a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <blink_dash>
            blink_dash();
    1e8e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <blink_dash>
            blink_dash();
    1e92:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <blink_dash>
            break;
    1e96:	37 c0       	rjmp	.+110    	; 0x1f06 <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    1e98:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <blink_dot>
            blink_dot();
    1e9c:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <blink_dot>
    1ea0:	f4 cf       	rjmp	.-24     	; 0x1e8a <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    1ea2:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <blink_dot>
            blink_dot();
    1ea6:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <blink_dot>
            blink_dot();
    1eaa:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <blink_dot>
    1eae:	ef cf       	rjmp	.-34     	; 0x1e8e <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    1eb0:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <blink_dot>
            blink_dot();
    1eb4:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <blink_dot>
            blink_dot();
    1eb8:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <blink_dot>
            blink_dot();
    1ebc:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <blink_dot>
    1ec0:	e8 cf       	rjmp	.-48     	; 0x1e92 <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    1ec2:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <blink_dot>
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    1ec8:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <blink_dash>
            blink_dot();
    1ecc:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <blink_dot>
    1ed0:	04 c0       	rjmp	.+8      	; 0x1eda <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    1ed2:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <blink_dash>
            blink_dash();
    1ed6:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <blink_dash>
            blink_dot();
    1eda:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <blink_dot>
    1ede:	06 c0       	rjmp	.+12     	; 0x1eec <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    1ee0:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <blink_dash>
            blink_dash();
    1ee4:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <blink_dash>
            blink_dash();
    1ee8:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <blink_dash>
            blink_dot();
    1eec:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <blink_dot>
    1ef0:	08 c0       	rjmp	.+16     	; 0x1f02 <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    1ef2:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <blink_dash>
            blink_dash();
    1ef6:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <blink_dash>
            blink_dash();
    1efa:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <blink_dash>
            blink_dash();
    1efe:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <blink_dash>
            blink_dot();
    1f02:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <blink_dot>
            break;
        }
        pause();
    1f06:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <pause>
        pause();
    1f0a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <pause>
        pause();
    1f0e:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    1f12:	f3 94       	inc	r15
    1f14:	96 cf       	rjmp	.-212    	; 0x1e42 <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    1f16:	0f 90       	pop	r0
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	df 91       	pop	r29
    1f1e:	cf 91       	pop	r28
    1f20:	1f 91       	pop	r17
    1f22:	0f 91       	pop	r16
    1f24:	ff 90       	pop	r15
    1f26:	08 95       	ret

00001f28 <nrk_error_print>:

}


inline int8_t nrk_error_print ()
{
    1f28:	0f 93       	push	r16
    1f2a:	1f 93       	push	r17
    1f2c:	cf 93       	push	r28
    1f2e:	df 93       	push	r29
uint8_t i,t;




    if (error_num == 0)
    1f30:	80 91 60 04 	lds	r24, 0x0460
    1f34:	88 23       	and	r24, r24
    1f36:	09 f4       	brne	.+2      	; 0x1f3a <nrk_error_print+0x12>
    1f38:	c2 c0       	rjmp	.+388    	; 0x20be <nrk_error_print+0x196>
        return 0;


// If looping, we need to disable the watchdog and interrupts
#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        nrk_int_disable ();
    1f3a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <nrk_int_disable>
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
        printf ("%d", error_task);
    1f3e:	06 e8       	ldi	r16, 0x86	; 134
    1f40:	13 e0       	ldi	r17, 0x03	; 3
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    1f42:	85 ef       	ldi	r24, 0xF5	; 245
    1f44:	93 e0       	ldi	r25, 0x03	; 3
    1f46:	0e 94 2c 08 	call	0x1058	; 0x1058 <nrk_kprintf>
        printf ("%d", error_task);
    1f4a:	80 91 e6 03 	lds	r24, 0x03E6
    1f4e:	1f 92       	push	r1
    1f50:	8f 93       	push	r24
    1f52:	1f 93       	push	r17
    1f54:	0f 93       	push	r16
    1f56:	0e 94 ed 25 	call	0x4bda	; 0x4bda <printf>
        nrk_kprintf (PSTR ("): "));
    1f5a:	81 ef       	ldi	r24, 0xF1	; 241
    1f5c:	93 e0       	ldi	r25, 0x03	; 3
    1f5e:	0e 94 2c 08 	call	0x1058	; 0x1058 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	80 91 60 04 	lds	r24, 0x0460
    1f6e:	88 31       	cpi	r24, 0x18	; 24
    1f70:	10 f0       	brcs	.+4      	; 0x1f76 <nrk_error_print+0x4e>
            error_num = NRK_UNKOWN;
    1f72:	10 92 60 04 	sts	0x0460, r1
        switch (error_num)
    1f76:	e0 91 60 04 	lds	r30, 0x0460
    1f7a:	8e 2f       	mov	r24, r30
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	fc 01       	movw	r30, r24
    1f80:	31 97       	sbiw	r30, 0x01	; 1
    1f82:	e6 31       	cpi	r30, 0x16	; 22
    1f84:	f1 05       	cpc	r31, r1
    1f86:	08 f0       	brcs	.+2      	; 0x1f8a <nrk_error_print+0x62>
    1f88:	46 c0       	rjmp	.+140    	; 0x2016 <nrk_error_print+0xee>
    1f8a:	ec 53       	subi	r30, 0x3C	; 60
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    1f92:	85 eb       	ldi	r24, 0xB5	; 181
    1f94:	93 e0       	ldi	r25, 0x03	; 3
    1f96:	41 c0       	rjmp	.+130    	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    1f98:	8e e8       	ldi	r24, 0x8E	; 142
    1f9a:	93 e0       	ldi	r25, 0x03	; 3
    1f9c:	3e c0       	rjmp	.+124    	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    1f9e:	8a e7       	ldi	r24, 0x7A	; 122
    1fa0:	93 e0       	ldi	r25, 0x03	; 3
    1fa2:	3b c0       	rjmp	.+118    	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    1fa4:	84 e6       	ldi	r24, 0x64	; 100
    1fa6:	93 e0       	ldi	r25, 0x03	; 3
    1fa8:	38 c0       	rjmp	.+112    	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    1faa:	89 e4       	ldi	r24, 0x49	; 73
    1fac:	93 e0       	ldi	r25, 0x03	; 3
    1fae:	35 c0       	rjmp	.+106    	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    1fb0:	83 e3       	ldi	r24, 0x33	; 51
    1fb2:	93 e0       	ldi	r25, 0x03	; 3
    1fb4:	32 c0       	rjmp	.+100    	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    1fb6:	8b e1       	ldi	r24, 0x1B	; 27
    1fb8:	93 e0       	ldi	r25, 0x03	; 3
    1fba:	2f c0       	rjmp	.+94     	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    1fbc:	88 e0       	ldi	r24, 0x08	; 8
    1fbe:	93 e0       	ldi	r25, 0x03	; 3
    1fc0:	2c c0       	rjmp	.+88     	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    1fc2:	85 ef       	ldi	r24, 0xF5	; 245
    1fc4:	92 e0       	ldi	r25, 0x02	; 2
    1fc6:	29 c0       	rjmp	.+82     	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    1fc8:	87 ed       	ldi	r24, 0xD7	; 215
    1fca:	92 e0       	ldi	r25, 0x02	; 2
    1fcc:	26 c0       	rjmp	.+76     	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    1fce:	82 eb       	ldi	r24, 0xB2	; 178
    1fd0:	92 e0       	ldi	r25, 0x02	; 2
    1fd2:	23 c0       	rjmp	.+70     	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    1fd4:	86 ea       	ldi	r24, 0xA6	; 166
    1fd6:	92 e0       	ldi	r25, 0x02	; 2
    1fd8:	20 c0       	rjmp	.+64     	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    1fda:	8b e8       	ldi	r24, 0x8B	; 139
    1fdc:	92 e0       	ldi	r25, 0x02	; 2
    1fde:	1d c0       	rjmp	.+58     	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    1fe0:	8c e7       	ldi	r24, 0x7C	; 124
    1fe2:	92 e0       	ldi	r25, 0x02	; 2
    1fe4:	1a c0       	rjmp	.+52     	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    1fe6:	88 e6       	ldi	r24, 0x68	; 104
    1fe8:	92 e0       	ldi	r25, 0x02	; 2
    1fea:	17 c0       	rjmp	.+46     	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    1fec:	87 e5       	ldi	r24, 0x57	; 87
    1fee:	92 e0       	ldi	r25, 0x02	; 2
    1ff0:	14 c0       	rjmp	.+40     	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    1ff2:	83 e4       	ldi	r24, 0x43	; 67
    1ff4:	92 e0       	ldi	r25, 0x02	; 2
    1ff6:	11 c0       	rjmp	.+34     	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    1ff8:	83 e2       	ldi	r24, 0x23	; 35
    1ffa:	92 e0       	ldi	r25, 0x02	; 2
    1ffc:	0e c0       	rjmp	.+28     	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    1ffe:	8b e0       	ldi	r24, 0x0B	; 11
    2000:	92 e0       	ldi	r25, 0x02	; 2
    2002:	0b c0       	rjmp	.+22     	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    2004:	80 ef       	ldi	r24, 0xF0	; 240
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	08 c0       	rjmp	.+16     	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    200a:	8f ed       	ldi	r24, 0xDF	; 223
    200c:	91 e0       	ldi	r25, 0x01	; 1
    200e:	05 c0       	rjmp	.+10     	; 0x201a <nrk_error_print+0xf2>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    2010:	80 ed       	ldi	r24, 0xD0	; 208
    2012:	91 e0       	ldi	r25, 0x01	; 1
    2014:	02 c0       	rjmp	.+4      	; 0x201a <nrk_error_print+0xf2>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    2016:	89 ec       	ldi	r24, 0xC9	; 201
    2018:	91 e0       	ldi	r25, 0x01	; 1
    201a:	0e 94 2c 08 	call	0x1058	; 0x1058 <nrk_kprintf>
        }
        putchar ('\r');
    201e:	60 91 cf 06 	lds	r22, 0x06CF
    2022:	70 91 d0 06 	lds	r23, 0x06D0
    2026:	8d e0       	ldi	r24, 0x0D	; 13
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <fputc>
        putchar ('\n');
    202e:	60 91 cf 06 	lds	r22, 0x06CF
    2032:	70 91 d0 06 	lds	r23, 0x06D0
    2036:	8a e0       	ldi	r24, 0x0A	; 10
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <fputc>
    203e:	c4 e1       	ldi	r28, 0x14	; 20


#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	0e 94 b2 0b 	call	0x1764	; 0x1764 <nrk_led_set>
            nrk_led_clr (3);
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <nrk_led_clr>
    2050:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2052:	88 ee       	ldi	r24, 0xE8	; 232
    2054:	93 e0       	ldi	r25, 0x03	; 3
    2056:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <nrk_spin_wait_us>
    205a:	d1 50       	subi	r29, 0x01	; 1
#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    205c:	d1 f7       	brne	.-12     	; 0x2052 <nrk_error_print+0x12a>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    205e:	83 e0       	ldi	r24, 0x03	; 3
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	0e 94 b2 0b 	call	0x1764	; 0x1764 <nrk_led_set>
            nrk_led_clr (2);
    2066:	82 e0       	ldi	r24, 0x02	; 2
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <nrk_led_clr>
    206e:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2070:	88 ee       	ldi	r24, 0xE8	; 232
    2072:	93 e0       	ldi	r25, 0x03	; 3
    2074:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <nrk_spin_wait_us>
    2078:	d1 50       	subi	r29, 0x01	; 1
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    207a:	d1 f7       	brne	.-12     	; 0x2070 <nrk_error_print+0x148>
    207c:	c1 50       	subi	r28, 0x01	; 1
        putchar ('\r');
        putchar ('\n');


#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
    207e:	01 f7       	brne	.-64     	; 0x2040 <nrk_error_print+0x118>
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }

        nrk_led_clr(2);
    2080:	82 e0       	ldi	r24, 0x02	; 2
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	0e 94 9b 0b 	call	0x1736	; 0x1736 <nrk_led_clr>
        nrk_led_clr(3);
    2088:	83 e0       	ldi	r24, 0x03	; 3
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <nrk_led_clr>
        blink_morse_code_error( error_task );
    2090:	80 91 e6 03 	lds	r24, 0x03E6
    2094:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <blink_morse_code_error>
        pause();
    2098:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <pause>
        nrk_led_set(2);
    209c:	82 e0       	ldi	r24, 0x02	; 2
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0e 94 b2 0b 	call	0x1764	; 0x1764 <nrk_led_set>
        pause();
    20a4:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <pause>
        nrk_led_clr(2);
    20a8:	82 e0       	ldi	r24, 0x02	; 2
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	0e 94 9b 0b 	call	0x1736	; 0x1736 <nrk_led_clr>
        pause();
    20b0:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <pause>
        blink_morse_code_error( error_num);
    20b4:	80 91 60 04 	lds	r24, 0x0460
    20b8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <blink_morse_code_error>
}
    20bc:	42 cf       	rjmp	.-380    	; 0x1f42 <nrk_error_print+0x1a>


#endif

    return error_num;
}
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	08 95       	ret

000020ca <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    20ca:	80 93 60 04 	sts	0x0460, r24
    error_task = nrk_cur_task_TCB->task_ID;
    20ce:	e0 91 3f 06 	lds	r30, 0x063F
    20d2:	f0 91 40 06 	lds	r31, 0x0640
    20d6:	80 85       	ldd	r24, Z+8	; 0x08
    20d8:	80 93 e6 03 	sts	0x03E6, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    20dc:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <nrk_error_print>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    20e0:	10 92 60 04 	sts	0x0460, r1
    20e4:	08 95       	ret

000020e6 <nrk_kernel_error_add>:

}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    20e6:	80 93 60 04 	sts	0x0460, r24
    error_task = task;
    20ea:	60 93 e6 03 	sts	0x03E6, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    20ee:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <nrk_error_print>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    20f2:	10 92 60 04 	sts	0x0460, r1
    20f6:	08 95       	ret

000020f8 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    20f8:	6f 92       	push	r6
    20fa:	7f 92       	push	r7
    20fc:	8f 92       	push	r8
    20fe:	9f 92       	push	r9
    2100:	af 92       	push	r10
    2102:	bf 92       	push	r11
    2104:	cf 92       	push	r12
    2106:	df 92       	push	r13
    2108:	ef 92       	push	r14
    210a:	ff 92       	push	r15
    210c:	0f 93       	push	r16
    210e:	1f 93       	push	r17
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	94 e0       	ldi	r25, 0x04	; 4
    2118:	0e 94 2c 08 	call	0x1058	; 0x1058 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    211c:	e0 91 3f 06 	lds	r30, 0x063F
    2120:	f0 91 40 06 	lds	r31, 0x0640
    2124:	80 85       	ldd	r24, Z+8	; 0x08
    2126:	28 2f       	mov	r18, r24
    2128:	33 27       	eor	r19, r19
    212a:	27 fd       	sbrc	r18, 7
    212c:	30 95       	com	r19
    212e:	3f 93       	push	r19
    2130:	8f 93       	push	r24
    2132:	89 e8       	ldi	r24, 0x89	; 137
    2134:	93 e0       	ldi	r25, 0x03	; 3
    2136:	9f 93       	push	r25
    2138:	8f 93       	push	r24
    213a:	0e 94 ed 25 	call	0x4bda	; 0x4bda <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    213e:	e0 91 3f 06 	lds	r30, 0x063F
    2142:	f0 91 40 06 	lds	r31, 0x0640
    2146:	c2 81       	ldd	r28, Z+2	; 0x02
    2148:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	8d eb       	ldi	r24, 0xBD	; 189
    2150:	93 e0       	ldi	r25, 0x03	; 3
    2152:	9f 93       	push	r25
    2154:	8f 93       	push	r24
    2156:	0e 94 ed 25 	call	0x4bda	; 0x4bda <printf>
    printf( "canary = %x ",*stkc );
    215a:	88 81       	ld	r24, Y
    215c:	1f 92       	push	r1
    215e:	8f 93       	push	r24
    2160:	82 e9       	ldi	r24, 0x92	; 146
    2162:	93 e0       	ldi	r25, 0x03	; 3
    2164:	9f 93       	push	r25
    2166:	8f 93       	push	r24
    2168:	0e 94 ed 25 	call	0x4bda	; 0x4bda <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    216c:	e0 91 3f 06 	lds	r30, 0x063F
    2170:	f0 91 40 06 	lds	r31, 0x0640
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    2174:	81 81       	ldd	r24, Z+1	; 0x01
    2176:	8f 93       	push	r24
    2178:	80 81       	ld	r24, Z
    217a:	8f 93       	push	r24
    217c:	8f e9       	ldi	r24, 0x9F	; 159
    217e:	93 e0       	ldi	r25, 0x03	; 3
    2180:	9f 93       	push	r25
    2182:	8f 93       	push	r24
    2184:	0e 94 ed 25 	call	0x4bda	; 0x4bda <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    2188:	80 91 40 06 	lds	r24, 0x0640
    218c:	8f 93       	push	r24
    218e:	80 91 3f 06 	lds	r24, 0x063F
    2192:	8f 93       	push	r24
    2194:	89 ea       	ldi	r24, 0xA9	; 169
    2196:	93 e0       	ldi	r25, 0x03	; 3
    2198:	9f 93       	push	r25
    219a:	8f 93       	push	r24
    219c:	0e 94 ed 25 	call	0x4bda	; 0x4bda <printf>
    21a0:	ce e1       	ldi	r28, 0x1E	; 30
    21a2:	d5 e0       	ldi	r29, 0x05	; 5
    21a4:	ed b7       	in	r30, 0x3d	; 61
    21a6:	fe b7       	in	r31, 0x3e	; 62
    21a8:	74 96       	adiw	r30, 0x14	; 20
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	fe bf       	out	0x3e, r31	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	ed bf       	out	0x3d, r30	; 61
    21b4:	00 e0       	ldi	r16, 0x00	; 0
    21b6:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    21b8:	89 eb       	ldi	r24, 0xB9	; 185
    21ba:	68 2e       	mov	r6, r24
    21bc:	83 e0       	ldi	r24, 0x03	; 3
    21be:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    21c0:	92 e9       	ldi	r25, 0x92	; 146
    21c2:	89 2e       	mov	r8, r25
    21c4:	93 e0       	ldi	r25, 0x03	; 3
    21c6:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    21c8:	2f e9       	ldi	r18, 0x9F	; 159
    21ca:	a2 2e       	mov	r10, r18
    21cc:	23 e0       	ldi	r18, 0x03	; 3
    21ce:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    21d0:	39 ea       	ldi	r19, 0xA9	; 169
    21d2:	c3 2e       	mov	r12, r19
    21d4:	33 e0       	ldi	r19, 0x03	; 3
    21d6:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    21d8:	ea 80       	ldd	r14, Y+2	; 0x02
    21da:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    21dc:	ff 92       	push	r15
    21de:	ef 92       	push	r14
    21e0:	1f 93       	push	r17
    21e2:	0f 93       	push	r16
    21e4:	7f 92       	push	r7
    21e6:	6f 92       	push	r6
    21e8:	0e 94 ed 25 	call	0x4bda	; 0x4bda <printf>
        printf( "canary = %x ",*stkc );
    21ec:	f7 01       	movw	r30, r14
    21ee:	80 81       	ld	r24, Z
    21f0:	1f 92       	push	r1
    21f2:	8f 93       	push	r24
    21f4:	9f 92       	push	r9
    21f6:	8f 92       	push	r8
    21f8:	0e 94 ed 25 	call	0x4bda	; 0x4bda <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	8f 93       	push	r24
    2200:	88 81       	ld	r24, Y
    2202:	8f 93       	push	r24
    2204:	bf 92       	push	r11
    2206:	af 92       	push	r10
    2208:	0e 94 ed 25 	call	0x4bda	; 0x4bda <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	df 92       	push	r13
    2212:	cf 92       	push	r12
    2214:	0e 94 ed 25 	call	0x4bda	; 0x4bda <printf>
    2218:	0f 5f       	subi	r16, 0xFF	; 255
    221a:	1f 4f       	sbci	r17, 0xFF	; 255
    221c:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    221e:	ed b7       	in	r30, 0x3d	; 61
    2220:	fe b7       	in	r31, 0x3e	; 62
    2222:	72 96       	adiw	r30, 0x12	; 18
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	fe bf       	out	0x3e, r31	; 62
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	ed bf       	out	0x3d, r30	; 61
    222e:	06 30       	cpi	r16, 0x06	; 6
    2230:	11 05       	cpc	r17, r1
    2232:	91 f6       	brne	.-92     	; 0x21d8 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    2234:	df 91       	pop	r29
    2236:	cf 91       	pop	r28
    2238:	1f 91       	pop	r17
    223a:	0f 91       	pop	r16
    223c:	ff 90       	pop	r15
    223e:	ef 90       	pop	r14
    2240:	df 90       	pop	r13
    2242:	cf 90       	pop	r12
    2244:	bf 90       	pop	r11
    2246:	af 90       	pop	r10
    2248:	9f 90       	pop	r9
    224a:	8f 90       	pop	r8
    224c:	7f 90       	pop	r7
    224e:	6f 90       	pop	r6
    2250:	08 95       	ret

00002252 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    2256:	e0 91 3f 06 	lds	r30, 0x063F
    225a:	f0 91 40 06 	lds	r31, 0x0640
    225e:	c2 81       	ldd	r28, Z+2	; 0x02
    2260:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2262:	88 81       	ld	r24, Y
    2264:	85 35       	cpi	r24, 0x55	; 85
    2266:	39 f0       	breq	.+14     	; 0x2276 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    2268:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	0e 94 65 10 	call	0x20ca	; 0x20ca <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    2272:	85 e5       	ldi	r24, 0x55	; 85
    2274:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    2276:	e0 91 3f 06 	lds	r30, 0x063F
    227a:	f0 91 40 06 	lds	r31, 0x0640
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    227e:	80 81       	ld	r24, Z
    2280:	91 81       	ldd	r25, Z+1	; 0x01
    2282:	81 15       	cp	r24, r1
    2284:	92 44       	sbci	r25, 0x42	; 66
    2286:	38 f0       	brcs	.+14     	; 0x2296 <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    2288:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    228c:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    228e:	df 91       	pop	r29
    2290:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2292:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <nrk_error_add>




#endif
}
    2296:	df 91       	pop	r29
    2298:	cf 91       	pop	r28
    229a:	08 95       	ret

0000229c <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    229c:	2b e2       	ldi	r18, 0x2B	; 43
    229e:	82 02       	muls	r24, r18
    22a0:	c0 01       	movw	r24, r0
    22a2:	11 24       	eor	r1, r1
    22a4:	fc 01       	movw	r30, r24
    22a6:	e2 5e       	subi	r30, 0xE2	; 226
    22a8:	fa 4f       	sbci	r31, 0xFA	; 250
    22aa:	a2 81       	ldd	r26, Z+2	; 0x02
    22ac:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    22ae:	8c 91       	ld	r24, X
    22b0:	85 35       	cpi	r24, 0x55	; 85
    22b2:	19 f0       	breq	.+6      	; 0x22ba <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    22b4:	85 e5       	ldi	r24, 0x55	; 85
    22b6:	8c 93       	st	X, r24
    22b8:	08 c0       	rjmp	.+16     	; 0x22ca <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    22ba:	80 81       	ld	r24, Z
    22bc:	91 81       	ldd	r25, Z+1	; 0x01
    22be:	81 15       	cp	r24, r1
    22c0:	92 44       	sbci	r25, 0x42	; 66
    22c2:	28 f0       	brcs	.+10     	; 0x22ce <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    22c4:	82 e1       	ldi	r24, 0x12	; 18
    22c6:	0e 94 65 10 	call	0x20ca	; 0x20ca <nrk_error_add>
        return NRK_ERROR;
    22ca:	8f ef       	ldi	r24, 0xFF	; 255
    22cc:	08 95       	ret
    }
#endif
    return NRK_OK;
    22ce:	81 e0       	ldi	r24, 0x01	; 1
}
    22d0:	08 95       	ret

000022d2 <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    22d2:	0f 93       	push	r16
    22d4:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    22d6:	40 91 e8 03 	lds	r20, 0x03E8
    22da:	50 91 e9 03 	lds	r21, 0x03E9
    22de:	60 91 ea 03 	lds	r22, 0x03EA
    22e2:	70 91 eb 03 	lds	r23, 0x03EB
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	8a 01       	movw	r16, r20
    22ec:	9b 01       	movw	r18, r22
    22ee:	08 2e       	mov	r0, r24
    22f0:	04 c0       	rjmp	.+8      	; 0x22fa <nrk_signal_create+0x28>
    22f2:	36 95       	lsr	r19
    22f4:	27 95       	ror	r18
    22f6:	17 95       	ror	r17
    22f8:	07 95       	ror	r16
    22fa:	0a 94       	dec	r0
    22fc:	d2 f7       	brpl	.-12     	; 0x22f2 <nrk_signal_create+0x20>
    22fe:	00 fd       	sbrc	r16, 0
    2300:	19 c0       	rjmp	.+50     	; 0x2334 <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    2302:	01 e0       	ldi	r16, 0x01	; 1
    2304:	10 e0       	ldi	r17, 0x00	; 0
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	08 2e       	mov	r0, r24
    230c:	04 c0       	rjmp	.+8      	; 0x2316 <nrk_signal_create+0x44>
    230e:	00 0f       	add	r16, r16
    2310:	11 1f       	adc	r17, r17
    2312:	22 1f       	adc	r18, r18
    2314:	33 1f       	adc	r19, r19
    2316:	0a 94       	dec	r0
    2318:	d2 f7       	brpl	.-12     	; 0x230e <nrk_signal_create+0x3c>
    231a:	40 2b       	or	r20, r16
    231c:	51 2b       	or	r21, r17
    231e:	62 2b       	or	r22, r18
    2320:	73 2b       	or	r23, r19
    2322:	40 93 e8 03 	sts	0x03E8, r20
    2326:	50 93 e9 03 	sts	0x03E9, r21
    232a:	60 93 ea 03 	sts	0x03EA, r22
    232e:	70 93 eb 03 	sts	0x03EB, r23
			return i;
    2332:	05 c0       	rjmp	.+10     	; 0x233e <nrk_signal_create+0x6c>
    2334:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    2336:	80 32       	cpi	r24, 0x20	; 32
    2338:	91 05       	cpc	r25, r1
    233a:	b9 f6       	brne	.-82     	; 0x22ea <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    233c:	8f ef       	ldi	r24, 0xFF	; 255


}
    233e:	1f 91       	pop	r17
    2340:	0f 91       	pop	r16
    2342:	08 95       	ret

00002344 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    2344:	e0 91 3f 06 	lds	r30, 0x063F
    2348:	f0 91 40 06 	lds	r31, 0x0640
    234c:	65 85       	ldd	r22, Z+13	; 0x0d
    234e:	76 85       	ldd	r23, Z+14	; 0x0e
    2350:	87 85       	ldd	r24, Z+15	; 0x0f
    2352:	90 89       	ldd	r25, Z+16	; 0x10
}
    2354:	08 95       	ret

00002356 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    2356:	cf 92       	push	r12
    2358:	df 92       	push	r13
    235a:	ef 92       	push	r14
    235c:	ff 92       	push	r15
    235e:	0f 93       	push	r16
    2360:	1f 93       	push	r17
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    2366:	c1 2c       	mov	r12, r1
    2368:	d1 2c       	mov	r13, r1
    236a:	76 01       	movw	r14, r12
    236c:	c3 94       	inc	r12
    236e:	08 2e       	mov	r0, r24
    2370:	04 c0       	rjmp	.+8      	; 0x237a <nrk_signal_delete+0x24>
    2372:	cc 0c       	add	r12, r12
    2374:	dd 1c       	adc	r13, r13
    2376:	ee 1c       	adc	r14, r14
    2378:	ff 1c       	adc	r15, r15
    237a:	0a 94       	dec	r0
    237c:	d2 f7       	brpl	.-12     	; 0x2372 <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    237e:	40 91 e8 03 	lds	r20, 0x03E8
    2382:	50 91 e9 03 	lds	r21, 0x03E9
    2386:	60 91 ea 03 	lds	r22, 0x03EA
    238a:	70 91 eb 03 	lds	r23, 0x03EB
    238e:	4c 21       	and	r20, r12
    2390:	5d 21       	and	r21, r13
    2392:	6e 21       	and	r22, r14
    2394:	7f 21       	and	r23, r15
    2396:	45 2b       	or	r20, r21
    2398:	46 2b       	or	r20, r22
    239a:	47 2b       	or	r20, r23
    239c:	09 f4       	brne	.+2      	; 0x23a0 <nrk_signal_delete+0x4a>
    239e:	60 c0       	rjmp	.+192    	; 0x2460 <nrk_signal_delete+0x10a>
    23a0:	08 2f       	mov	r16, r24

	nrk_int_disable();
    23a2:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <nrk_int_disable>
    23a6:	e7 e2       	ldi	r30, 0x27	; 39
    23a8:	f5 e0       	ldi	r31, 0x05	; 5
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    23aa:	b7 01       	movw	r22, r14
    23ac:	a6 01       	movw	r20, r12
    23ae:	40 95       	com	r20
    23b0:	50 95       	com	r21
    23b2:	60 95       	com	r22
    23b4:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    23b6:	13 e0       	ldi	r17, 0x03	; 3
    23b8:	df 01       	movw	r26, r30
    23ba:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    23bc:	8c 91       	ld	r24, X
    23be:	8f 3f       	cpi	r24, 0xFF	; 255
    23c0:	39 f1       	breq	.+78     	; 0x2410 <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    23c2:	84 81       	ldd	r24, Z+4	; 0x04
    23c4:	95 81       	ldd	r25, Z+5	; 0x05
    23c6:	a6 81       	ldd	r26, Z+6	; 0x06
    23c8:	b7 81       	ldd	r27, Z+7	; 0x07
    23ca:	8c 15       	cp	r24, r12
    23cc:	9d 05       	cpc	r25, r13
    23ce:	ae 05       	cpc	r26, r14
    23d0:	bf 05       	cpc	r27, r15
    23d2:	51 f4       	brne	.+20     	; 0x23e8 <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    23d4:	10 86       	std	Z+8, r1	; 0x08
    23d6:	11 86       	std	Z+9, r1	; 0x09
    23d8:	12 86       	std	Z+10, r1	; 0x0a
    23da:	13 86       	std	Z+11, r1	; 0x0b
    23dc:	9f 01       	movw	r18, r30
    23de:	22 50       	subi	r18, 0x02	; 2
    23e0:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    23e2:	e9 01       	movw	r28, r18
    23e4:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    23e6:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    23e8:	84 23       	and	r24, r20
    23ea:	95 23       	and	r25, r21
    23ec:	a6 23       	and	r26, r22
    23ee:	b7 23       	and	r27, r23
    23f0:	84 83       	std	Z+4, r24	; 0x04
    23f2:	95 83       	std	Z+5, r25	; 0x05
    23f4:	a6 83       	std	Z+6, r26	; 0x06
    23f6:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    23f8:	80 85       	ldd	r24, Z+8	; 0x08
    23fa:	91 85       	ldd	r25, Z+9	; 0x09
    23fc:	a2 85       	ldd	r26, Z+10	; 0x0a
    23fe:	b3 85       	ldd	r27, Z+11	; 0x0b
    2400:	84 23       	and	r24, r20
    2402:	95 23       	and	r25, r21
    2404:	a6 23       	and	r26, r22
    2406:	b7 23       	and	r27, r23
    2408:	80 87       	std	Z+8, r24	; 0x08
    240a:	91 87       	std	Z+9, r25	; 0x09
    240c:	a2 87       	std	Z+10, r26	; 0x0a
    240e:	b3 87       	std	Z+11, r27	; 0x0b
    2410:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2412:	d6 e0       	ldi	r29, 0x06	; 6
    2414:	e9 32       	cpi	r30, 0x29	; 41
    2416:	fd 07       	cpc	r31, r29
    2418:	79 f6       	brne	.-98     	; 0x23b8 <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    241a:	8e ef       	ldi	r24, 0xFE	; 254
    241c:	9f ef       	ldi	r25, 0xFF	; 255
    241e:	af ef       	ldi	r26, 0xFF	; 255
    2420:	bf ef       	ldi	r27, 0xFF	; 255
    2422:	04 c0       	rjmp	.+8      	; 0x242c <nrk_signal_delete+0xd6>
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	aa 1f       	adc	r26, r26
    242a:	bb 1f       	adc	r27, r27
    242c:	0a 95       	dec	r16
    242e:	d2 f7       	brpl	.-12     	; 0x2424 <nrk_signal_delete+0xce>
    2430:	40 91 e8 03 	lds	r20, 0x03E8
    2434:	50 91 e9 03 	lds	r21, 0x03E9
    2438:	60 91 ea 03 	lds	r22, 0x03EA
    243c:	70 91 eb 03 	lds	r23, 0x03EB
    2440:	84 23       	and	r24, r20
    2442:	95 23       	and	r25, r21
    2444:	a6 23       	and	r26, r22
    2446:	b7 23       	and	r27, r23
    2448:	80 93 e8 03 	sts	0x03E8, r24
    244c:	90 93 e9 03 	sts	0x03E9, r25
    2450:	a0 93 ea 03 	sts	0x03EA, r26
    2454:	b0 93 eb 03 	sts	0x03EB, r27
	nrk_int_enable();
    2458:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_int_enable>

	return NRK_OK;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2460:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	1f 91       	pop	r17
    2468:	0f 91       	pop	r16
    246a:	ff 90       	pop	r15
    246c:	ef 90       	pop	r14
    246e:	df 90       	pop	r13
    2470:	cf 90       	pop	r12
    2472:	08 95       	ret

00002474 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    2474:	0f 93       	push	r16
    2476:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    2478:	41 e0       	ldi	r20, 0x01	; 1
    247a:	50 e0       	ldi	r21, 0x00	; 0
    247c:	60 e0       	ldi	r22, 0x00	; 0
    247e:	70 e0       	ldi	r23, 0x00	; 0
    2480:	8a 01       	movw	r16, r20
    2482:	9b 01       	movw	r18, r22
    2484:	04 c0       	rjmp	.+8      	; 0x248e <nrk_signal_unregister+0x1a>
    2486:	00 0f       	add	r16, r16
    2488:	11 1f       	adc	r17, r17
    248a:	22 1f       	adc	r18, r18
    248c:	33 1f       	adc	r19, r19
    248e:	8a 95       	dec	r24
    2490:	d2 f7       	brpl	.-12     	; 0x2486 <nrk_signal_unregister+0x12>
    2492:	d9 01       	movw	r26, r18
    2494:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    2496:	e0 91 3f 06 	lds	r30, 0x063F
    249a:	f0 91 40 06 	lds	r31, 0x0640
    249e:	45 85       	ldd	r20, Z+13	; 0x0d
    24a0:	56 85       	ldd	r21, Z+14	; 0x0e
    24a2:	67 85       	ldd	r22, Z+15	; 0x0f
    24a4:	70 89       	ldd	r23, Z+16	; 0x10
    24a6:	04 23       	and	r16, r20
    24a8:	15 23       	and	r17, r21
    24aa:	26 23       	and	r18, r22
    24ac:	37 23       	and	r19, r23
    24ae:	01 2b       	or	r16, r17
    24b0:	02 2b       	or	r16, r18
    24b2:	03 2b       	or	r16, r19
    24b4:	d1 f0       	breq	.+52     	; 0x24ea <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    24b6:	80 95       	com	r24
    24b8:	90 95       	com	r25
    24ba:	a0 95       	com	r26
    24bc:	b0 95       	com	r27
    24be:	48 23       	and	r20, r24
    24c0:	59 23       	and	r21, r25
    24c2:	6a 23       	and	r22, r26
    24c4:	7b 23       	and	r23, r27
    24c6:	45 87       	std	Z+13, r20	; 0x0d
    24c8:	56 87       	std	Z+14, r21	; 0x0e
    24ca:	67 87       	std	Z+15, r22	; 0x0f
    24cc:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    24ce:	41 89       	ldd	r20, Z+17	; 0x11
    24d0:	52 89       	ldd	r21, Z+18	; 0x12
    24d2:	63 89       	ldd	r22, Z+19	; 0x13
    24d4:	74 89       	ldd	r23, Z+20	; 0x14
    24d6:	84 23       	and	r24, r20
    24d8:	95 23       	and	r25, r21
    24da:	a6 23       	and	r26, r22
    24dc:	b7 23       	and	r27, r23
    24de:	81 8b       	std	Z+17, r24	; 0x11
    24e0:	92 8b       	std	Z+18, r25	; 0x12
    24e2:	a3 8b       	std	Z+19, r26	; 0x13
    24e4:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	01 c0       	rjmp	.+2      	; 0x24ec <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    24ea:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    24ec:	1f 91       	pop	r17
    24ee:	0f 91       	pop	r16
    24f0:	08 95       	ret

000024f2 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    24f2:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    24f4:	40 91 e8 03 	lds	r20, 0x03E8
    24f8:	50 91 e9 03 	lds	r21, 0x03E9
    24fc:	60 91 ea 03 	lds	r22, 0x03EA
    2500:	70 91 eb 03 	lds	r23, 0x03EB
    2504:	08 2e       	mov	r0, r24
    2506:	04 c0       	rjmp	.+8      	; 0x2510 <nrk_signal_register+0x1e>
    2508:	76 95       	lsr	r23
    250a:	67 95       	ror	r22
    250c:	57 95       	ror	r21
    250e:	47 95       	ror	r20
    2510:	0a 94       	dec	r0
    2512:	d2 f7       	brpl	.-12     	; 0x2508 <nrk_signal_register+0x16>
    2514:	40 ff       	sbrs	r20, 0
    2516:	1d c0       	rjmp	.+58     	; 0x2552 <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    2518:	e0 91 3f 06 	lds	r30, 0x063F
    251c:	f0 91 40 06 	lds	r31, 0x0640
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	a0 e0       	ldi	r26, 0x00	; 0
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	04 c0       	rjmp	.+8      	; 0x2532 <nrk_signal_register+0x40>
    252a:	88 0f       	add	r24, r24
    252c:	99 1f       	adc	r25, r25
    252e:	aa 1f       	adc	r26, r26
    2530:	bb 1f       	adc	r27, r27
    2532:	2a 95       	dec	r18
    2534:	d2 f7       	brpl	.-12     	; 0x252a <nrk_signal_register+0x38>
    2536:	45 85       	ldd	r20, Z+13	; 0x0d
    2538:	56 85       	ldd	r21, Z+14	; 0x0e
    253a:	67 85       	ldd	r22, Z+15	; 0x0f
    253c:	70 89       	ldd	r23, Z+16	; 0x10
    253e:	84 2b       	or	r24, r20
    2540:	95 2b       	or	r25, r21
    2542:	a6 2b       	or	r26, r22
    2544:	b7 2b       	or	r27, r23
    2546:	85 87       	std	Z+13, r24	; 0x0d
    2548:	96 87       	std	Z+14, r25	; 0x0e
    254a:	a7 87       	std	Z+15, r26	; 0x0f
    254c:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	08 95       	ret
	}
            
	return NRK_ERROR;
    2552:	8f ef       	ldi	r24, 0xFF	; 255
}
    2554:	08 95       	ret

00002556 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    2556:	cf 92       	push	r12
    2558:	df 92       	push	r13
    255a:	ef 92       	push	r14
    255c:	ff 92       	push	r15
    255e:	cf 93       	push	r28
	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;
    uint8_t timer;

	sig_mask=SIG(sig_id);
    2560:	c1 2c       	mov	r12, r1
    2562:	d1 2c       	mov	r13, r1
    2564:	76 01       	movw	r14, r12
    2566:	c3 94       	inc	r12
    2568:	04 c0       	rjmp	.+8      	; 0x2572 <nrk_event_signal+0x1c>
    256a:	cc 0c       	add	r12, r12
    256c:	dd 1c       	adc	r13, r13
    256e:	ee 1c       	adc	r14, r14
    2570:	ff 1c       	adc	r15, r15
    2572:	8a 95       	dec	r24
    2574:	d2 f7       	brpl	.-12     	; 0x256a <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    2576:	80 91 e8 03 	lds	r24, 0x03E8
    257a:	90 91 e9 03 	lds	r25, 0x03E9
    257e:	a0 91 ea 03 	lds	r26, 0x03EA
    2582:	b0 91 eb 03 	lds	r27, 0x03EB
    2586:	8c 21       	and	r24, r12
    2588:	9d 21       	and	r25, r13
    258a:	ae 21       	and	r26, r14
    258c:	bf 21       	and	r27, r15
    258e:	89 2b       	or	r24, r25
    2590:	8a 2b       	or	r24, r26
    2592:	8b 2b       	or	r24, r27
    2594:	11 f4       	brne	.+4      	; 0x259a <nrk_event_signal+0x44>
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	44 c0       	rjmp	.+136    	; 0x2622 <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    259a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <nrk_int_disable>
    259e:	e5 e2       	ldi	r30, 0x25	; 37
    25a0:	f5 e0       	ldi	r31, 0x05	; 5
    25a2:	a7 e2       	ldi	r26, 0x27	; 39
    25a4:	b5 e0       	ldi	r27, 0x05	; 5

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    25a6:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    25a8:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    25aa:	90 81       	ld	r25, Z
    25ac:	91 30       	cpi	r25, 0x01	; 1
    25ae:	b9 f4       	brne	.+46     	; 0x25de <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    25b0:	42 85       	ldd	r20, Z+10	; 0x0a
    25b2:	53 85       	ldd	r21, Z+11	; 0x0b
    25b4:	64 85       	ldd	r22, Z+12	; 0x0c
    25b6:	75 85       	ldd	r23, Z+13	; 0x0d
    25b8:	4c 21       	and	r20, r12
    25ba:	5d 21       	and	r21, r13
    25bc:	6e 21       	and	r22, r14
    25be:	7f 21       	and	r23, r15
    25c0:	45 2b       	or	r20, r21
    25c2:	46 2b       	or	r20, r22
    25c4:	47 2b       	or	r20, r23
    25c6:	59 f0       	breq	.+22     	; 0x25de <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    25c8:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    25ca:	16 86       	std	Z+14, r1	; 0x0e
    25cc:	17 86       	std	Z+15, r1	; 0x0f
    25ce:	10 8a       	std	Z+16, r1	; 0x10
    25d0:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    25d2:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    25d4:	c2 86       	std	Z+10, r12	; 0x0a
    25d6:	d3 86       	std	Z+11, r13	; 0x0b
    25d8:	e4 86       	std	Z+12, r14	; 0x0c
    25da:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    25dc:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    25de:	90 81       	ld	r25, Z
    25e0:	92 30       	cpi	r25, 0x02	; 2
    25e2:	a1 f4       	brne	.+40     	; 0x260c <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    25e4:	42 85       	ldd	r20, Z+10	; 0x0a
    25e6:	53 85       	ldd	r21, Z+11	; 0x0b
    25e8:	64 85       	ldd	r22, Z+12	; 0x0c
    25ea:	75 85       	ldd	r23, Z+13	; 0x0d
    25ec:	4c 15       	cp	r20, r12
    25ee:	5d 05       	cpc	r21, r13
    25f0:	6e 05       	cpc	r22, r14
    25f2:	7f 05       	cpc	r23, r15
    25f4:	59 f4       	brne	.+22     	; 0x260c <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    25f6:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    25f8:	16 86       	std	Z+14, r1	; 0x0e
    25fa:	17 86       	std	Z+15, r1	; 0x0f
    25fc:	10 8a       	std	Z+16, r1	; 0x10
    25fe:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    2600:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2602:	12 86       	std	Z+10, r1	; 0x0a
    2604:	13 86       	std	Z+11, r1	; 0x0b
    2606:	14 86       	std	Z+12, r1	; 0x0c
    2608:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    260a:	c1 e0       	ldi	r28, 0x01	; 1
    260c:	bb 96       	adiw	r30, 0x2b	; 43
    260e:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2610:	96 e0       	ldi	r25, 0x06	; 6
    2612:	e7 32       	cpi	r30, 0x27	; 39
    2614:	f9 07       	cpc	r31, r25
    2616:	49 f6       	brne	.-110    	; 0x25aa <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    2618:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_int_enable>
	if(event_occured)
    261c:	c1 11       	cpse	r28, r1
    261e:	05 c0       	rjmp	.+10     	; 0x262a <nrk_event_signal+0xd4>
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    2620:	82 e0       	ldi	r24, 0x02	; 2
    2622:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_nrk_errno_set>
	return NRK_ERROR;
    2626:	8f ef       	ldi	r24, 0xFF	; 255
    2628:	01 c0       	rjmp	.+2      	; 0x262c <nrk_event_signal+0xd6>
            			_nrk_set_next_wakeup (timer);
			}	
		else
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
    262a:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    262c:	cf 91       	pop	r28
    262e:	ff 90       	pop	r15
    2630:	ef 90       	pop	r14
    2632:	df 90       	pop	r13
    2634:	cf 90       	pop	r12
    2636:	08 95       	ret

00002638 <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    2638:	0f 93       	push	r16
    263a:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    263c:	e0 91 3f 06 	lds	r30, 0x063F
    2640:	f0 91 40 06 	lds	r31, 0x0640
    2644:	05 85       	ldd	r16, Z+13	; 0x0d
    2646:	16 85       	ldd	r17, Z+14	; 0x0e
    2648:	27 85       	ldd	r18, Z+15	; 0x0f
    264a:	30 89       	ldd	r19, Z+16	; 0x10
    264c:	06 23       	and	r16, r22
    264e:	17 23       	and	r17, r23
    2650:	28 23       	and	r18, r24
    2652:	39 23       	and	r19, r25
    2654:	01 15       	cp	r16, r1
    2656:	11 05       	cpc	r17, r1
    2658:	21 05       	cpc	r18, r1
    265a:	31 05       	cpc	r19, r1
    265c:	11 f1       	breq	.+68     	; 0x26a2 <nrk_event_wait+0x6a>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    2662:	81 8b       	std	Z+17, r24	; 0x11
    2664:	92 8b       	std	Z+18, r25	; 0x12
    2666:	a3 8b       	std	Z+19, r26	; 0x13
    2668:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    266a:	21 e0       	ldi	r18, 0x01	; 1
    266c:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    266e:	00 90 2f 06 	lds	r0, 0x062F
    2672:	04 c0       	rjmp	.+8      	; 0x267c <nrk_event_wait+0x44>
    2674:	b6 95       	lsr	r27
    2676:	a7 95       	ror	r26
    2678:	97 95       	ror	r25
    267a:	87 95       	ror	r24
    267c:	0a 94       	dec	r0
    267e:	d2 f7       	brpl	.-12     	; 0x2674 <nrk_event_wait+0x3c>
    2680:	80 ff       	sbrs	r24, 0
    2682:	03 c0       	rjmp	.+6      	; 0x268a <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    2684:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <nrk_wait_until_nw>
    2688:	04 c0       	rjmp	.+8      	; 0x2692 <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    2692:	e0 91 3f 06 	lds	r30, 0x063F
    2696:	f0 91 40 06 	lds	r31, 0x0640
    269a:	01 89       	ldd	r16, Z+17	; 0x11
    269c:	12 89       	ldd	r17, Z+18	; 0x12
    269e:	23 89       	ldd	r18, Z+19	; 0x13
    26a0:	34 89       	ldd	r19, Z+20	; 0x14
}
    26a2:	c9 01       	movw	r24, r18
    26a4:	b8 01       	movw	r22, r16
    26a6:	1f 91       	pop	r17
    26a8:	0f 91       	pop	r16
    26aa:	08 95       	ret

000026ac <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    26ac:	90 91 3e 06 	lds	r25, 0x063E
    26b0:	93 30       	cpi	r25, 0x03	; 3
    26b2:	d0 f4       	brcc	.+52     	; 0x26e8 <nrk_sem_create+0x3c>
    26b4:	a2 e2       	ldi	r26, 0x22	; 34
    26b6:	b6 e0       	ldi	r27, 0x06	; 6
    26b8:	e0 e0       	ldi	r30, 0x00	; 0
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    26ba:	2c 91       	ld	r18, X
    26bc:	2f 3f       	cpi	r18, 0xFF	; 255
    26be:	21 f0       	breq	.+8      	; 0x26c8 <nrk_sem_create+0x1c>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    26c0:	ef 5f       	subi	r30, 0xFF	; 255
    26c2:	13 96       	adiw	r26, 0x03	; 3
    26c4:	e4 30       	cpi	r30, 0x04	; 4
    26c6:	c9 f7       	brne	.-14     	; 0x26ba <nrk_sem_create+0xe>
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	9f 01       	movw	r18, r30
    26cc:	22 0f       	add	r18, r18
    26ce:	33 1f       	adc	r19, r19
    26d0:	e2 0f       	add	r30, r18
    26d2:	f3 1f       	adc	r31, r19
    26d4:	ee 5d       	subi	r30, 0xDE	; 222
    26d6:	f9 4f       	sbci	r31, 0xF9	; 249
    26d8:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    26da:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    26dc:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    26de:	9f 5f       	subi	r25, 0xFF	; 255
    26e0:	90 93 3e 06 	sts	0x063E, r25
	return	&nrk_sem_list[i];
    26e4:	cf 01       	movw	r24, r30
    26e6:	08 95       	ret

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    26ec:	08 95       	ret

000026ee <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    26ee:	26 e0       	ldi	r18, 0x06	; 6
    26f0:	82 32       	cpi	r24, 0x22	; 34
    26f2:	92 07       	cpc	r25, r18
    26f4:	69 f0       	breq	.+26     	; 0x2710 <nrk_get_resource_index+0x22>
    26f6:	26 e0       	ldi	r18, 0x06	; 6
    26f8:	85 32       	cpi	r24, 0x25	; 37
    26fa:	92 07       	cpc	r25, r18
    26fc:	59 f0       	breq	.+22     	; 0x2714 <nrk_get_resource_index+0x26>
    26fe:	26 e0       	ldi	r18, 0x06	; 6
    2700:	88 32       	cpi	r24, 0x28	; 40
    2702:	92 07       	cpc	r25, r18
    2704:	49 f0       	breq	.+18     	; 0x2718 <nrk_get_resource_index+0x2a>
    2706:	8b 52       	subi	r24, 0x2B	; 43
    2708:	96 40       	sbci	r25, 0x06	; 6
    270a:	41 f4       	brne	.+16     	; 0x271c <nrk_get_resource_index+0x2e>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    270c:	83 e0       	ldi	r24, 0x03	; 3
    270e:	08 95       	ret
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	08 95       	ret
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	08 95       	ret
    2718:	82 e0       	ldi	r24, 0x02	; 2
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
    271a:	08 95       	ret
	return NRK_ERROR;
    271c:	8f ef       	ldi	r24, 0xFF	; 255
}
    271e:	08 95       	ret

00002720 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2720:	0e 94 77 13 	call	0x26ee	; 0x26ee <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2724:	8f 3f       	cpi	r24, 0xFF	; 255
    2726:	11 f4       	brne	.+4      	; 0x272c <nrk_sem_query+0xc>
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	03 c0       	rjmp	.+6      	; 0x2732 <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    272c:	84 30       	cpi	r24, 0x04	; 4
    272e:	29 f4       	brne	.+10     	; 0x273a <nrk_sem_query+0x1a>
    2730:	82 e0       	ldi	r24, 0x02	; 2
    2732:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_nrk_errno_set>
    2736:	8f ef       	ldi	r24, 0xFF	; 255
    2738:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    273a:	99 27       	eor	r25, r25
    273c:	87 fd       	sbrc	r24, 7
    273e:	90 95       	com	r25
    2740:	fc 01       	movw	r30, r24
    2742:	ee 0f       	add	r30, r30
    2744:	ff 1f       	adc	r31, r31
    2746:	8e 0f       	add	r24, r30
    2748:	9f 1f       	adc	r25, r31
    274a:	fc 01       	movw	r30, r24
    274c:	ee 5d       	subi	r30, 0xDE	; 222
    274e:	f9 4f       	sbci	r31, 0xF9	; 249
    2750:	82 81       	ldd	r24, Z+2	; 0x02
}
    2752:	08 95       	ret

00002754 <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    2754:	ef 92       	push	r14
    2756:	ff 92       	push	r15
    2758:	0f 93       	push	r16
    275a:	1f 93       	push	r17
    275c:	cf 93       	push	r28
    275e:	df 93       	push	r29
    2760:	1f 92       	push	r1
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2766:	0e 94 77 13 	call	0x26ee	; 0x26ee <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    276a:	8f 3f       	cpi	r24, 0xFF	; 255
    276c:	11 f4       	brne	.+4      	; 0x2772 <nrk_sem_pend+0x1e>
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	03 c0       	rjmp	.+6      	; 0x2778 <nrk_sem_pend+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2772:	84 30       	cpi	r24, 0x04	; 4
    2774:	29 f4       	brne	.+10     	; 0x2780 <nrk_sem_pend+0x2c>
    2776:	82 e0       	ldi	r24, 0x02	; 2
    2778:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_nrk_errno_set>
    277c:	8f ef       	ldi	r24, 0xFF	; 255
    277e:	41 c0       	rjmp	.+130    	; 0x2802 <nrk_sem_pend+0xae>
	
	nrk_int_disable();
    2780:	89 83       	std	Y+1, r24	; 0x01
    2782:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	e8 2e       	mov	r14, r24
    278a:	ff 24       	eor	r15, r15
    278c:	e7 fc       	sbrc	r14, 7
    278e:	f0 94       	com	r15
    2790:	87 01       	movw	r16, r14
    2792:	00 0f       	add	r16, r16
    2794:	11 1f       	adc	r17, r17
    2796:	f8 01       	movw	r30, r16
    2798:	ee 0d       	add	r30, r14
    279a:	ff 1d       	adc	r31, r15
    279c:	ee 5d       	subi	r30, 0xDE	; 222
    279e:	f9 4f       	sbci	r31, 0xF9	; 249
    27a0:	92 81       	ldd	r25, Z+2	; 0x02
    27a2:	91 11       	cpse	r25, r1
    27a4:	16 c0       	rjmp	.+44     	; 0x27d2 <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    27a6:	e0 91 3f 06 	lds	r30, 0x063F
    27aa:	f0 91 40 06 	lds	r31, 0x0640
    27ae:	97 81       	ldd	r25, Z+7	; 0x07
    27b0:	92 60       	ori	r25, 0x02	; 2
    27b2:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    27b4:	99 27       	eor	r25, r25
    27b6:	87 fd       	sbrc	r24, 7
    27b8:	90 95       	com	r25
    27ba:	a9 2f       	mov	r26, r25
    27bc:	b9 2f       	mov	r27, r25
    27be:	81 8b       	std	Z+17, r24	; 0x11
    27c0:	92 8b       	std	Z+18, r25	; 0x12
    27c2:	a3 8b       	std	Z+19, r26	; 0x13
    27c4:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    27c6:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_int_enable>
		nrk_wait_until_ticks(0);
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    27d2:	0e 0d       	add	r16, r14
    27d4:	1f 1d       	adc	r17, r15
    27d6:	d8 01       	movw	r26, r16
    27d8:	ae 5d       	subi	r26, 0xDE	; 222
    27da:	b9 4f       	sbci	r27, 0xF9	; 249
    27dc:	12 96       	adiw	r26, 0x02	; 2
    27de:	8c 91       	ld	r24, X
    27e0:	12 97       	sbiw	r26, 0x02	; 2
    27e2:	81 50       	subi	r24, 0x01	; 1
    27e4:	12 96       	adiw	r26, 0x02	; 2
    27e6:	8c 93       	st	X, r24
    27e8:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    27ea:	e0 91 3f 06 	lds	r30, 0x063F
    27ee:	f0 91 40 06 	lds	r31, 0x0640
    27f2:	11 96       	adiw	r26, 0x01	; 1
    27f4:	8c 91       	ld	r24, X
    27f6:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    27fc:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_int_enable>

	return NRK_OK;
    2800:	81 e0       	ldi	r24, 0x01	; 1
}
    2802:	0f 90       	pop	r0
    2804:	df 91       	pop	r29
    2806:	cf 91       	pop	r28
    2808:	1f 91       	pop	r17
    280a:	0f 91       	pop	r16
    280c:	ff 90       	pop	r15
    280e:	ef 90       	pop	r14
    2810:	08 95       	ret

00002812 <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    2812:	0f 93       	push	r16
    2814:	1f 93       	push	r17
    2816:	cf 93       	push	r28
    2818:	df 93       	push	r29
    281a:	1f 92       	push	r1
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    2820:	0e 94 77 13 	call	0x26ee	; 0x26ee <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2824:	8f 3f       	cpi	r24, 0xFF	; 255
    2826:	11 f4       	brne	.+4      	; 0x282c <nrk_sem_post+0x1a>
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	03 c0       	rjmp	.+6      	; 0x2832 <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    282c:	84 30       	cpi	r24, 0x04	; 4
    282e:	29 f4       	brne	.+10     	; 0x283a <nrk_sem_post+0x28>
    2830:	82 e0       	ldi	r24, 0x02	; 2
    2832:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_nrk_errno_set>
    2836:	8f ef       	ldi	r24, 0xFF	; 255
    2838:	44 c0       	rjmp	.+136    	; 0x28c2 <nrk_sem_post+0xb0>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    283a:	48 2f       	mov	r20, r24
    283c:	55 27       	eor	r21, r21
    283e:	47 fd       	sbrc	r20, 7
    2840:	50 95       	com	r21
    2842:	9a 01       	movw	r18, r20
    2844:	22 0f       	add	r18, r18
    2846:	33 1f       	adc	r19, r19
    2848:	24 0f       	add	r18, r20
    284a:	35 1f       	adc	r19, r21
    284c:	89 01       	movw	r16, r18
    284e:	0e 5d       	subi	r16, 0xDE	; 222
    2850:	19 4f       	sbci	r17, 0xF9	; 249
    2852:	f8 01       	movw	r30, r16
    2854:	22 81       	ldd	r18, Z+2	; 0x02
    2856:	90 81       	ld	r25, Z
    2858:	29 17       	cp	r18, r25
    285a:	94 f5       	brge	.+100    	; 0x28c0 <nrk_sem_post+0xae>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    285c:	89 83       	std	Y+1, r24	; 0x01
    285e:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <nrk_int_disable>

		nrk_sem_list[id].value++;
    2862:	f8 01       	movw	r30, r16
    2864:	92 81       	ldd	r25, Z+2	; 0x02
    2866:	9f 5f       	subi	r25, 0xFF	; 255
    2868:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    286a:	e0 91 3f 06 	lds	r30, 0x063F
    286e:	f0 91 40 06 	lds	r31, 0x0640
    2872:	14 82       	std	Z+4, r1	; 0x04
    2874:	e5 e2       	ldi	r30, 0x25	; 37
    2876:	f5 e0       	ldi	r31, 0x05	; 5

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	99 27       	eor	r25, r25
    287c:	87 fd       	sbrc	r24, 7
    287e:	90 95       	com	r25
    2880:	a9 2f       	mov	r26, r25
    2882:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2884:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2886:	30 81       	ld	r19, Z
    2888:	32 30       	cpi	r19, 0x02	; 2
    288a:	99 f4       	brne	.+38     	; 0x28b2 <nrk_sem_post+0xa0>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    288c:	42 85       	ldd	r20, Z+10	; 0x0a
    288e:	53 85       	ldd	r21, Z+11	; 0x0b
    2890:	64 85       	ldd	r22, Z+12	; 0x0c
    2892:	75 85       	ldd	r23, Z+13	; 0x0d
    2894:	48 17       	cp	r20, r24
    2896:	59 07       	cpc	r21, r25
    2898:	6a 07       	cpc	r22, r26
    289a:	7b 07       	cpc	r23, r27
    289c:	51 f4       	brne	.+20     	; 0x28b2 <nrk_sem_post+0xa0>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    289e:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    28a0:	16 86       	std	Z+14, r1	; 0x0e
    28a2:	17 86       	std	Z+15, r1	; 0x0f
    28a4:	10 8a       	std	Z+16, r1	; 0x10
    28a6:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    28a8:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    28aa:	12 86       	std	Z+10, r1	; 0x0a
    28ac:	13 86       	std	Z+11, r1	; 0x0b
    28ae:	14 86       	std	Z+12, r1	; 0x0c
    28b0:	15 86       	std	Z+13, r1	; 0x0d
    28b2:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    28b4:	36 e0       	ldi	r19, 0x06	; 6
    28b6:	e7 32       	cpi	r30, 0x27	; 39
    28b8:	f3 07       	cpc	r31, r19
    28ba:	29 f7       	brne	.-54     	; 0x2886 <nrk_sem_post+0x74>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    28bc:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_int_enable>
	}
		
return NRK_OK;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
}
    28c2:	0f 90       	pop	r0
    28c4:	df 91       	pop	r29
    28c6:	cf 91       	pop	r28
    28c8:	1f 91       	pop	r17
    28ca:	0f 91       	pop	r16
    28cc:	08 95       	ret

000028ce <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    28ce:	0e 94 77 13 	call	0x26ee	; 0x26ee <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    28d2:	8f 3f       	cpi	r24, 0xFF	; 255
    28d4:	11 f4       	brne	.+4      	; 0x28da <nrk_sem_delete+0xc>
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	03 c0       	rjmp	.+6      	; 0x28e0 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    28da:	84 30       	cpi	r24, 0x04	; 4
    28dc:	29 f4       	brne	.+10     	; 0x28e8 <nrk_sem_delete+0x1a>
    28de:	82 e0       	ldi	r24, 0x02	; 2
    28e0:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_nrk_errno_set>
    28e4:	8f ef       	ldi	r24, 0xFF	; 255
    28e6:	08 95       	ret

	nrk_sem_list[id].count=-1;
    28e8:	99 27       	eor	r25, r25
    28ea:	87 fd       	sbrc	r24, 7
    28ec:	90 95       	com	r25
    28ee:	fc 01       	movw	r30, r24
    28f0:	ee 0f       	add	r30, r30
    28f2:	ff 1f       	adc	r31, r31
    28f4:	8e 0f       	add	r24, r30
    28f6:	9f 1f       	adc	r25, r31
    28f8:	fc 01       	movw	r30, r24
    28fa:	ee 5d       	subi	r30, 0xDE	; 222
    28fc:	f9 4f       	sbci	r31, 0xF9	; 249
    28fe:	8f ef       	ldi	r24, 0xFF	; 255
    2900:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    2902:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    2904:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    2906:	80 91 3e 06 	lds	r24, 0x063E
    290a:	81 50       	subi	r24, 0x01	; 1
    290c:	80 93 3e 06 	sts	0x063E, r24
return NRK_OK;
    2910:	81 e0       	ldi	r24, 0x01	; 1
}
    2912:	08 95       	ret

00002914 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    2914:	e0 91 34 06 	lds	r30, 0x0634
    2918:	f0 91 35 06 	lds	r31, 0x0635
}
    291c:	80 81       	ld	r24, Z
    291e:	08 95       	ret

00002920 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    2920:	e0 91 34 06 	lds	r30, 0x0634
    2924:	f0 91 35 06 	lds	r31, 0x0635
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    2928:	30 97       	sbiw	r30, 0x00	; 0
    292a:	21 f0       	breq	.+8      	; 0x2934 <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    292c:	03 80       	ldd	r0, Z+3	; 0x03
    292e:	f4 81       	ldd	r31, Z+4	; 0x04
    2930:	e0 2d       	mov	r30, r0
    2932:	fa cf       	rjmp	.-12     	; 0x2928 <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    2934:	08 95       	ret

00002936 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    2936:	af 92       	push	r10
    2938:	bf 92       	push	r11
    293a:	cf 92       	push	r12
    293c:	df 92       	push	r13
    293e:	ef 92       	push	r14
    2940:	ff 92       	push	r15
    2942:	0f 93       	push	r16
    2944:	1f 93       	push	r17
    2946:	cf 93       	push	r28
    2948:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    294a:	e0 91 1c 05 	lds	r30, 0x051C
    294e:	f0 91 1d 05 	lds	r31, 0x051D
    2952:	30 97       	sbiw	r30, 0x00	; 0
    2954:	09 f4       	brne	.+2      	; 0x2958 <nrk_add_to_readyQ+0x22>
    2956:	90 c0       	rjmp	.+288    	; 0x2a78 <nrk_add_to_readyQ+0x142>
    {
        return;
    }


    NextNode = _head_node;
    2958:	00 91 34 06 	lds	r16, 0x0634
    295c:	10 91 35 06 	lds	r17, 0x0635
    CurNode = _free_node;

    if (_head_node != NULL)
    2960:	01 15       	cp	r16, r1
    2962:	11 05       	cpc	r17, r1
    2964:	09 f4       	brne	.+2      	; 0x2968 <nrk_add_to_readyQ+0x32>
    2966:	4c c0       	rjmp	.+152    	; 0x2a00 <nrk_add_to_readyQ+0xca>
    2968:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    296a:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    296c:	58 2f       	mov	r21, r24
    296e:	54 03       	mulsu	r21, r20
    2970:	90 01       	movw	r18, r0
    2972:	11 24       	eor	r1, r1
    2974:	22 5e       	subi	r18, 0xE2	; 226
    2976:	3a 4f       	sbci	r19, 0xFA	; 250
    2978:	79 01       	movw	r14, r18
    297a:	9a e0       	ldi	r25, 0x0A	; 10
    297c:	e9 0e       	add	r14, r25
    297e:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    2980:	69 01       	movw	r12, r18
    2982:	c4 e0       	ldi	r28, 0x04	; 4
    2984:	cc 0e       	add	r12, r28
    2986:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    2988:	59 01       	movw	r10, r18
    298a:	db e0       	ldi	r29, 0x0B	; 11
    298c:	ad 0e       	add	r10, r29
    298e:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    2990:	2c 91       	ld	r18, X
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	42 9f       	mul	r20, r18
    2996:	b0 01       	movw	r22, r0
    2998:	43 9f       	mul	r20, r19
    299a:	70 0d       	add	r23, r0
    299c:	11 24       	eor	r1, r1
    299e:	62 5e       	subi	r22, 0xE2	; 226
    29a0:	7a 4f       	sbci	r23, 0xFA	; 250
    29a2:	eb 01       	movw	r28, r22
    29a4:	9c 81       	ldd	r25, Y+4	; 0x04
    29a6:	99 23       	and	r25, r25
    29a8:	29 f0       	breq	.+10     	; 0x29b4 <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    29aa:	5b 85       	ldd	r21, Y+11	; 0x0b
    29ac:	e7 01       	movw	r28, r14
    29ae:	98 81       	ld	r25, Y
    29b0:	59 17       	cp	r21, r25
    29b2:	40 f1       	brcs	.+80     	; 0x2a04 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    29b4:	e6 01       	movw	r28, r12
    29b6:	98 81       	ld	r25, Y
    29b8:	99 23       	and	r25, r25
    29ba:	69 f0       	breq	.+26     	; 0x29d6 <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    29bc:	42 9f       	mul	r20, r18
    29be:	b0 01       	movw	r22, r0
    29c0:	43 9f       	mul	r20, r19
    29c2:	70 0d       	add	r23, r0
    29c4:	11 24       	eor	r1, r1
    29c6:	62 5e       	subi	r22, 0xE2	; 226
    29c8:	7a 4f       	sbci	r23, 0xFA	; 250
    29ca:	eb 01       	movw	r28, r22
    29cc:	5a 85       	ldd	r21, Y+10	; 0x0a
    29ce:	e5 01       	movw	r28, r10
    29d0:	98 81       	ld	r25, Y
    29d2:	59 17       	cp	r21, r25
    29d4:	b8 f0       	brcs	.+46     	; 0x2a04 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    29d6:	42 9f       	mul	r20, r18
    29d8:	b0 01       	movw	r22, r0
    29da:	43 9f       	mul	r20, r19
    29dc:	70 0d       	add	r23, r0
    29de:	11 24       	eor	r1, r1
    29e0:	9b 01       	movw	r18, r22
    29e2:	22 5e       	subi	r18, 0xE2	; 226
    29e4:	3a 4f       	sbci	r19, 0xFA	; 250
    29e6:	e9 01       	movw	r28, r18
    29e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    29ea:	e7 01       	movw	r28, r14
    29ec:	98 81       	ld	r25, Y
    29ee:	29 17       	cp	r18, r25
    29f0:	48 f0       	brcs	.+18     	; 0x2a04 <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    29f2:	13 96       	adiw	r26, 0x03	; 3
    29f4:	0d 90       	ld	r0, X+
    29f6:	bc 91       	ld	r27, X
    29f8:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    29fa:	10 97       	sbiw	r26, 0x00	; 0
    29fc:	49 f6       	brne	.-110    	; 0x2990 <nrk_add_to_readyQ+0x5a>
    29fe:	02 c0       	rjmp	.+4      	; 0x2a04 <nrk_add_to_readyQ+0xce>
    2a00:	a0 e0       	ldi	r26, 0x00	; 0
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    2a04:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    2a06:	c3 81       	ldd	r28, Z+3	; 0x03
    2a08:	d4 81       	ldd	r29, Z+4	; 0x04
    2a0a:	d0 93 1d 05 	sts	0x051D, r29
    2a0e:	c0 93 1c 05 	sts	0x051C, r28

    if (NextNode == _head_node)
    2a12:	a0 17       	cp	r26, r16
    2a14:	b1 07       	cpc	r27, r17
    2a16:	b1 f4       	brne	.+44     	; 0x2a44 <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    2a18:	10 97       	sbiw	r26, 0x00	; 0
    2a1a:	49 f0       	breq	.+18     	; 0x2a2e <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    2a1c:	b4 83       	std	Z+4, r27	; 0x04
    2a1e:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    2a20:	12 82       	std	Z+2, r1	; 0x02
    2a22:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    2a24:	12 96       	adiw	r26, 0x02	; 2
    2a26:	fc 93       	st	X, r31
    2a28:	ee 93       	st	-X, r30
    2a2a:	11 97       	sbiw	r26, 0x01	; 1
    2a2c:	06 c0       	rjmp	.+12     	; 0x2a3a <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    2a2e:	14 82       	std	Z+4, r1	; 0x04
    2a30:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    2a32:	12 82       	std	Z+2, r1	; 0x02
    2a34:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    2a36:	fa 83       	std	Y+2, r31	; 0x02
    2a38:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    2a3a:	f0 93 35 06 	sts	0x0635, r31
    2a3e:	e0 93 34 06 	sts	0x0634, r30
    2a42:	1a c0       	rjmp	.+52     	; 0x2a78 <nrk_add_to_readyQ+0x142>
    2a44:	11 96       	adiw	r26, 0x01	; 1
    2a46:	8d 91       	ld	r24, X+
    2a48:	9c 91       	ld	r25, X
    2a4a:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    2a4c:	ac 17       	cp	r26, r28
    2a4e:	bd 07       	cpc	r27, r29
    2a50:	59 f0       	breq	.+22     	; 0x2a68 <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    2a52:	92 83       	std	Z+2, r25	; 0x02
    2a54:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    2a56:	b4 83       	std	Z+4, r27	; 0x04
    2a58:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    2a5a:	11 96       	adiw	r26, 0x01	; 1
    2a5c:	cd 91       	ld	r28, X+
    2a5e:	dc 91       	ld	r29, X
    2a60:	12 97       	sbiw	r26, 0x02	; 2
    2a62:	fc 83       	std	Y+4, r31	; 0x04
    2a64:	eb 83       	std	Y+3, r30	; 0x03
    2a66:	04 c0       	rjmp	.+8      	; 0x2a70 <nrk_add_to_readyQ+0x13a>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    2a68:	14 82       	std	Z+4, r1	; 0x04
    2a6a:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    2a6c:	92 83       	std	Z+2, r25	; 0x02
    2a6e:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    2a70:	12 96       	adiw	r26, 0x02	; 2
    2a72:	fc 93       	st	X, r31
    2a74:	ee 93       	st	-X, r30
    2a76:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    2a78:	df 91       	pop	r29
    2a7a:	cf 91       	pop	r28
    2a7c:	1f 91       	pop	r17
    2a7e:	0f 91       	pop	r16
    2a80:	ff 90       	pop	r15
    2a82:	ef 90       	pop	r14
    2a84:	df 90       	pop	r13
    2a86:	cf 90       	pop	r12
    2a88:	bf 90       	pop	r11
    2a8a:	af 90       	pop	r10
    2a8c:	08 95       	ret

00002a8e <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    2a92:	e0 91 34 06 	lds	r30, 0x0634
    2a96:	f0 91 35 06 	lds	r31, 0x0635
    2a9a:	30 97       	sbiw	r30, 0x00	; 0
    2a9c:	09 f4       	brne	.+2      	; 0x2aa0 <nrk_rem_from_readyQ+0x12>
    2a9e:	44 c0       	rjmp	.+136    	; 0x2b28 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    2aa0:	99 27       	eor	r25, r25
    2aa2:	87 fd       	sbrc	r24, 7
    2aa4:	90 95       	com	r25
    2aa6:	20 81       	ld	r18, Z
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	28 17       	cp	r18, r24
    2aac:	39 07       	cpc	r19, r25
    2aae:	81 f4       	brne	.+32     	; 0x2ad0 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    2ab0:	a3 81       	ldd	r26, Z+3	; 0x03
    2ab2:	b4 81       	ldd	r27, Z+4	; 0x04
    2ab4:	b0 93 35 06 	sts	0x0635, r27
    2ab8:	a0 93 34 06 	sts	0x0634, r26
        _head_node->Prev = NULL;
    2abc:	12 96       	adiw	r26, 0x02	; 2
    2abe:	1c 92       	st	X, r1
    2ac0:	1e 92       	st	-X, r1
    2ac2:	11 97       	sbiw	r26, 0x01	; 1
    2ac4:	18 c0       	rjmp	.+48     	; 0x2af6 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    2ac6:	03 80       	ldd	r0, Z+3	; 0x03
    2ac8:	f4 81       	ldd	r31, Z+4	; 0x04
    2aca:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    2acc:	30 97       	sbiw	r30, 0x00	; 0
    2ace:	61 f1       	breq	.+88     	; 0x2b28 <nrk_rem_from_readyQ+0x9a>
    2ad0:	20 81       	ld	r18, Z
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	28 17       	cp	r18, r24
    2ad6:	39 07       	cpc	r19, r25
    2ad8:	b1 f7       	brne	.-20     	; 0x2ac6 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    2ada:	c1 81       	ldd	r28, Z+1	; 0x01
    2adc:	d2 81       	ldd	r29, Z+2	; 0x02
    2ade:	83 81       	ldd	r24, Z+3	; 0x03
    2ae0:	94 81       	ldd	r25, Z+4	; 0x04
    2ae2:	9c 83       	std	Y+4, r25	; 0x04
    2ae4:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    2ae6:	a3 81       	ldd	r26, Z+3	; 0x03
    2ae8:	b4 81       	ldd	r27, Z+4	; 0x04
    2aea:	10 97       	sbiw	r26, 0x00	; 0
    2aec:	21 f0       	breq	.+8      	; 0x2af6 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    2aee:	12 96       	adiw	r26, 0x02	; 2
    2af0:	dc 93       	st	X, r29
    2af2:	ce 93       	st	-X, r28
    2af4:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    2af6:	a0 91 1c 05 	lds	r26, 0x051C
    2afa:	b0 91 1d 05 	lds	r27, 0x051D
    2afe:	10 97       	sbiw	r26, 0x00	; 0
    2b00:	39 f4       	brne	.+14     	; 0x2b10 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    2b02:	f0 93 1d 05 	sts	0x051D, r31
    2b06:	e0 93 1c 05 	sts	0x051C, r30
        _free_node->Next = NULL;
    2b0a:	14 82       	std	Z+4, r1	; 0x04
    2b0c:	13 82       	std	Z+3, r1	; 0x03
    2b0e:	0a c0       	rjmp	.+20     	; 0x2b24 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    2b10:	b4 83       	std	Z+4, r27	; 0x04
    2b12:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    2b14:	12 96       	adiw	r26, 0x02	; 2
    2b16:	fc 93       	st	X, r31
    2b18:	ee 93       	st	-X, r30
    2b1a:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    2b1c:	f0 93 1d 05 	sts	0x051D, r31
    2b20:	e0 93 1c 05 	sts	0x051C, r30
    }
    _free_node->Prev = NULL;
    2b24:	12 82       	std	Z+2, r1	; 0x02
    2b26:	11 82       	std	Z+1, r1	; 0x01
}
    2b28:	df 91       	pop	r29
    2b2a:	cf 91       	pop	r28
    2b2c:	08 95       	ret

00002b2e <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    2b2e:	ef 92       	push	r14
    2b30:	ff 92       	push	r15
    2b32:	0f 93       	push	r16
    2b34:	1f 93       	push	r17
    2b36:	cf 93       	push	r28
    2b38:	df 93       	push	r29
    2b3a:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    2b3c:	4b 81       	ldd	r20, Y+3	; 0x03
    2b3e:	5c 81       	ldd	r21, Y+4	; 0x04
    2b40:	69 81       	ldd	r22, Y+1	; 0x01
    2b42:	7a 81       	ldd	r23, Y+2	; 0x02
    2b44:	8d 81       	ldd	r24, Y+5	; 0x05
    2b46:	9e 81       	ldd	r25, Y+6	; 0x06
    2b48:	0e 94 9d 22 	call	0x453a	; 0x453a <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    2b4c:	2f 81       	ldd	r18, Y+7	; 0x07
    2b4e:	22 23       	and	r18, r18
    2b50:	71 f0       	breq	.+28     	; 0x2b6e <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    2b52:	4b 81       	ldd	r20, Y+3	; 0x03
    2b54:	5c 81       	ldd	r21, Y+4	; 0x04
    2b56:	e1 2c       	mov	r14, r1
    2b58:	f1 2c       	mov	r15, r1
    2b5a:	00 e0       	ldi	r16, 0x00	; 0
    2b5c:	10 e0       	ldi	r17, 0x00	; 0
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	bc 01       	movw	r22, r24
    2b64:	ce 01       	movw	r24, r28
    2b66:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    2b6a:	1f 82       	std	Y+7, r1	; 0x07
    2b6c:	0c c0       	rjmp	.+24     	; 0x2b86 <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    2b6e:	e8 81       	ld	r30, Y
    2b70:	2b e2       	ldi	r18, 0x2B	; 43
    2b72:	e2 02       	muls	r30, r18
    2b74:	f0 01       	movw	r30, r0
    2b76:	11 24       	eor	r1, r1
    2b78:	e2 5e       	subi	r30, 0xE2	; 226
    2b7a:	fa 4f       	sbci	r31, 0xFA	; 250
    2b7c:	21 85       	ldd	r18, Z+9	; 0x09
    2b7e:	23 30       	cpi	r18, 0x03	; 3
    2b80:	b9 f4       	brne	.+46     	; 0x2bb0 <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    2b82:	91 83       	std	Z+1, r25	; 0x01
    2b84:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    2b86:	e8 81       	ld	r30, Y
    2b88:	8b e2       	ldi	r24, 0x2B	; 43
    2b8a:	e8 02       	muls	r30, r24
    2b8c:	f0 01       	movw	r30, r0
    2b8e:	11 24       	eor	r1, r1
    2b90:	e2 5e       	subi	r30, 0xE2	; 226
    2b92:	fa 4f       	sbci	r31, 0xFA	; 250
    2b94:	85 89       	ldd	r24, Z+21	; 0x15
    2b96:	96 89       	ldd	r25, Z+22	; 0x16
    2b98:	a7 89       	ldd	r26, Z+23	; 0x17
    2b9a:	b0 8d       	ldd	r27, Z+24	; 0x18
    2b9c:	89 2b       	or	r24, r25
    2b9e:	8a 2b       	or	r24, r26
    2ba0:	8b 2b       	or	r24, r27
    2ba2:	41 f4       	brne	.+16     	; 0x2bb4 <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    2ba4:	82 e0       	ldi	r24, 0x02	; 2
    2ba6:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    2ba8:	88 81       	ld	r24, Y
    2baa:	0e 94 9b 14 	call	0x2936	; 0x2936 <nrk_add_to_readyQ>
    2bae:	02 c0       	rjmp	.+4      	; 0x2bb4 <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    2bb0:	8f ef       	ldi	r24, 0xFF	; 255
    2bb2:	01 c0       	rjmp	.+2      	; 0x2bb6 <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
}
    2bb6:	df 91       	pop	r29
    2bb8:	cf 91       	pop	r28
    2bba:	1f 91       	pop	r17
    2bbc:	0f 91       	pop	r16
    2bbe:	ff 90       	pop	r15
    2bc0:	ef 90       	pop	r14
    2bc2:	08 95       	ret

00002bc4 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    2bc4:	1f 93       	push	r17
    2bc6:	cf 93       	push	r28
    2bc8:	df 93       	push	r29
    2bca:	cd b7       	in	r28, 0x3d	; 61
    2bcc:	de b7       	in	r29, 0x3e	; 62
    2bce:	28 97       	sbiw	r28, 0x08	; 8
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	f8 94       	cli
    2bd4:	de bf       	out	0x3e, r29	; 62
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	cd bf       	out	0x3d, r28	; 61
    2bda:	29 83       	std	Y+1, r18	; 0x01
    2bdc:	3a 83       	std	Y+2, r19	; 0x02
    2bde:	4b 83       	std	Y+3, r20	; 0x03
    2be0:	5c 83       	std	Y+4, r21	; 0x04
    2be2:	6d 83       	std	Y+5, r22	; 0x05
    2be4:	7e 83       	std	Y+6, r23	; 0x06
    2be6:	8f 83       	std	Y+7, r24	; 0x07
    2be8:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    2bea:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    2bee:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <_nrk_os_timer_get>
    2bf2:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    2bf4:	ce 01       	movw	r24, r28
    2bf6:	01 96       	adiw	r24, 0x01	; 1
    2bf8:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    2bfc:	63 30       	cpi	r22, 0x03	; 3
    2bfe:	71 05       	cpc	r23, r1
    2c00:	98 f0       	brcs	.+38     	; 0x2c28 <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2c02:	e0 91 3f 06 	lds	r30, 0x063F
    2c06:	f0 91 40 06 	lds	r31, 0x0640
    2c0a:	21 2f       	mov	r18, r17
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	62 0f       	add	r22, r18
    2c10:	73 1f       	adc	r23, r19
    2c12:	cb 01       	movw	r24, r22
    2c14:	a0 e0       	ldi	r26, 0x00	; 0
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	85 8b       	std	Z+21, r24	; 0x15
    2c1a:	96 8b       	std	Z+22, r25	; 0x16
    2c1c:	a7 8b       	std	Z+23, r26	; 0x17
    2c1e:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    2c20:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_int_enable>

    return NRK_OK;
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	01 c0       	rjmp	.+2      	; 0x2c2a <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    2c28:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    2c2a:	28 96       	adiw	r28, 0x08	; 8
    2c2c:	0f b6       	in	r0, 0x3f	; 63
    2c2e:	f8 94       	cli
    2c30:	de bf       	out	0x3e, r29	; 62
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	cd bf       	out	0x3d, r28	; 61
    2c36:	df 91       	pop	r29
    2c38:	cf 91       	pop	r28
    2c3a:	1f 91       	pop	r17
    2c3c:	08 95       	ret

00002c3e <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    2c3e:	0e 94 70 22 	call	0x44e0	; 0x44e0 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    2c42:	e0 91 3f 06 	lds	r30, 0x063F
    2c46:	f0 91 40 06 	lds	r31, 0x0640
    2c4a:	85 81       	ldd	r24, Z+5	; 0x05
    2c4c:	81 11       	cpse	r24, r1
    2c4e:	f7 cf       	rjmp	.-18     	; 0x2c3e <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    2c50:	08 95       	ret

00002c52 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    2c52:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    2c54:	0e 94 29 11 	call	0x2252	; 0x2252 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2c58:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    2c5c:	e0 91 3f 06 	lds	r30, 0x063F
    2c60:	f0 91 40 06 	lds	r31, 0x0640
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	92 a7       	std	Z+42, r25	; 0x2a
    2c6a:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    2c6c:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2c6e:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <_nrk_os_timer_get>
    2c72:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2c74:	88 3f       	cpi	r24, 0xF8	; 248
    2c76:	80 f4       	brcc	.+32     	; 0x2c98 <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2c78:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <_nrk_get_next_wakeup>
    2c7c:	2c 2f       	mov	r18, r28
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	2f 5f       	subi	r18, 0xFF	; 255
    2c82:	3f 4f       	sbci	r19, 0xFF	; 255
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	28 17       	cp	r18, r24
    2c88:	39 07       	cpc	r19, r25
    2c8a:	34 f4       	brge	.+12     	; 0x2c98 <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    2c8c:	82 e0       	ldi	r24, 0x02	; 2
    2c8e:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    2c90:	80 93 53 04 	sts	0x0453, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2c94:	0e 94 65 1f 	call	0x3eca	; 0x3eca <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2c98:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2c9c:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	cf 91       	pop	r28
    2ca4:	08 95       	ret

00002ca6 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    2ca6:	e0 91 3f 06 	lds	r30, 0x063F
    2caa:	f0 91 40 06 	lds	r31, 0x0640
    2cae:	80 85       	ldd	r24, Z+8	; 0x08
    2cb0:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    2cb4:	e0 91 3f 06 	lds	r30, 0x063F
    2cb8:	f0 91 40 06 	lds	r31, 0x0640
    2cbc:	84 e0       	ldi	r24, 0x04	; 4
    2cbe:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    2cc0:	0e 94 29 16 	call	0x2c52	; 0x2c52 <nrk_wait_until_next_period>
    return NRK_OK;
}
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	08 95       	ret

00002cc8 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    2cc8:	cf 93       	push	r28
    2cca:	df 93       	push	r29
    2ccc:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    2cce:	0e 94 29 11 	call	0x2252	; 0x2252 <nrk_stack_check>

    if (p == 0)
    2cd2:	20 97       	sbiw	r28, 0x00	; 0
    2cd4:	11 f4       	brne	.+4      	; 0x2cda <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    2cd6:	c1 e0       	ldi	r28, 0x01	; 1
    2cd8:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2cda:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2cde:	e0 91 3f 06 	lds	r30, 0x063F
    2ce2:	f0 91 40 06 	lds	r31, 0x0640
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    2cea:	d2 a7       	std	Z+42, r29	; 0x2a
    2cec:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    2cee:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <_nrk_os_timer_get>
    2cf2:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    2cf4:	88 3f       	cpi	r24, 0xF8	; 248
    2cf6:	80 f4       	brcc	.+32     	; 0x2d18 <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2cf8:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <_nrk_get_next_wakeup>
    2cfc:	2c 2f       	mov	r18, r28
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	2f 5f       	subi	r18, 0xFF	; 255
    2d02:	3f 4f       	sbci	r19, 0xFF	; 255
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	28 17       	cp	r18, r24
    2d08:	39 07       	cpc	r19, r25
    2d0a:	34 f4       	brge	.+12     	; 0x2d18 <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    2d0c:	82 e0       	ldi	r24, 0x02	; 2
    2d0e:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2d10:	80 93 53 04 	sts	0x0453, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2d14:	0e 94 65 1f 	call	0x3eca	; 0x3eca <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2d18:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2d1c:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	df 91       	pop	r29
    2d24:	cf 91       	pop	r28
    2d26:	08 95       	ret

00002d28 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    2d28:	ef 92       	push	r14
    2d2a:	ff 92       	push	r15
    2d2c:	0f 93       	push	r16
    2d2e:	1f 93       	push	r17
    2d30:	cf 93       	push	r28
    2d32:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    2d34:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2d38:	e0 91 3f 06 	lds	r30, 0x063F
    2d3c:	f0 91 40 06 	lds	r31, 0x0640
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2d44:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <_nrk_os_timer_get>
    2d48:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    2d4a:	e0 91 3f 06 	lds	r30, 0x063F
    2d4e:	f0 91 40 06 	lds	r31, 0x0640
    2d52:	e8 2e       	mov	r14, r24
    2d54:	f1 2c       	mov	r15, r1
    2d56:	c7 01       	movw	r24, r14
    2d58:	80 0f       	add	r24, r16
    2d5a:	91 1f       	adc	r25, r17
    2d5c:	a0 e0       	ldi	r26, 0x00	; 0
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	85 8b       	std	Z+21, r24	; 0x15
    2d62:	96 8b       	std	Z+22, r25	; 0x16
    2d64:	a7 8b       	std	Z+23, r26	; 0x17
    2d66:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2d68:	c8 3f       	cpi	r28, 0xF8	; 248
    2d6a:	78 f4       	brcc	.+30     	; 0x2d8a <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2d6c:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <_nrk_get_next_wakeup>
    2d70:	9f ef       	ldi	r25, 0xFF	; 255
    2d72:	e9 1a       	sub	r14, r25
    2d74:	f9 0a       	sbc	r15, r25
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	e8 16       	cp	r14, r24
    2d7a:	f9 06       	cpc	r15, r25
    2d7c:	34 f4       	brge	.+12     	; 0x2d8a <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    2d7e:	82 e0       	ldi	r24, 0x02	; 2
    2d80:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2d82:	80 93 53 04 	sts	0x0453, r24
            _nrk_set_next_wakeup (timer);
    2d86:	0e 94 65 1f 	call	0x3eca	; 0x3eca <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2d8a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2d8e:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	cf 91       	pop	r28
    2d96:	1f 91       	pop	r17
    2d98:	0f 91       	pop	r16
    2d9a:	ff 90       	pop	r15
    2d9c:	ef 90       	pop	r14
    2d9e:	08 95       	ret

00002da0 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    2da0:	cf 93       	push	r28
    2da2:	df 93       	push	r29
    2da4:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    2da6:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2daa:	e0 91 3f 06 	lds	r30, 0x063F
    2dae:	f0 91 40 06 	lds	r31, 0x0640
    2db2:	21 e0       	ldi	r18, 0x01	; 1
    2db4:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    2db6:	ce 01       	movw	r24, r28
    2db8:	a0 e0       	ldi	r26, 0x00	; 0
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	85 8b       	std	Z+21, r24	; 0x15
    2dbe:	96 8b       	std	Z+22, r25	; 0x16
    2dc0:	a7 8b       	std	Z+23, r26	; 0x17
    2dc2:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    2dc4:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <_nrk_os_timer_get>
    2dc8:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2dca:	88 3f       	cpi	r24, 0xF8	; 248
    2dcc:	80 f4       	brcc	.+32     	; 0x2dee <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2dce:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <_nrk_get_next_wakeup>
    2dd2:	2c 2f       	mov	r18, r28
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	2f 5f       	subi	r18, 0xFF	; 255
    2dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	28 17       	cp	r18, r24
    2dde:	39 07       	cpc	r19, r25
    2de0:	34 f4       	brge	.+12     	; 0x2dee <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    2de2:	82 e0       	ldi	r24, 0x02	; 2
    2de4:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2de6:	80 93 53 04 	sts	0x0453, r24
            _nrk_set_next_wakeup (timer);
    2dea:	0e 94 65 1f 	call	0x3eca	; 0x3eca <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2dee:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2df2:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	df 91       	pop	r29
    2dfa:	cf 91       	pop	r28
    2dfc:	08 95       	ret

00002dfe <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    2dfe:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    2e00:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2e04:	e0 91 3f 06 	lds	r30, 0x063F
    2e08:	f0 91 40 06 	lds	r31, 0x0640
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    2e10:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    2e12:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <_nrk_os_timer_get>
    2e16:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2e18:	88 3f       	cpi	r24, 0xF8	; 248
    2e1a:	80 f4       	brcc	.+32     	; 0x2e3c <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2e1c:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <_nrk_get_next_wakeup>
    2e20:	2c 2f       	mov	r18, r28
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	2f 5f       	subi	r18, 0xFF	; 255
    2e26:	3f 4f       	sbci	r19, 0xFF	; 255
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	28 17       	cp	r18, r24
    2e2c:	39 07       	cpc	r19, r25
    2e2e:	34 f4       	brge	.+12     	; 0x2e3c <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    2e30:	82 e0       	ldi	r24, 0x02	; 2
    2e32:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2e34:	80 93 53 04 	sts	0x0453, r24
            _nrk_set_next_wakeup (timer);
    2e38:	0e 94 65 1f 	call	0x3eca	; 0x3eca <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2e3c:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2e40:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	cf 91       	pop	r28
    2e48:	08 95       	ret

00002e4a <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    2e4a:	1f 93       	push	r17
    2e4c:	cf 93       	push	r28
    2e4e:	df 93       	push	r29
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
    2e54:	28 97       	sbiw	r28, 0x08	; 8
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	0f be       	out	0x3f, r0	; 63
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	29 83       	std	Y+1, r18	; 0x01
    2e62:	3a 83       	std	Y+2, r19	; 0x02
    2e64:	4b 83       	std	Y+3, r20	; 0x03
    2e66:	5c 83       	std	Y+4, r21	; 0x04
    2e68:	6d 83       	std	Y+5, r22	; 0x05
    2e6a:	7e 83       	std	Y+6, r23	; 0x06
    2e6c:	8f 83       	std	Y+7, r24	; 0x07
    2e6e:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    2e70:	0e 94 29 11 	call	0x2252	; 0x2252 <nrk_stack_check>

    nrk_int_disable ();
    2e74:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2e78:	e0 91 3f 06 	lds	r30, 0x063F
    2e7c:	f0 91 40 06 	lds	r31, 0x0640
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	92 a7       	std	Z+42, r25	; 0x2a
    2e8a:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    2e8c:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <_nrk_os_timer_get>
    2e90:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    2e92:	ce 01       	movw	r24, r28
    2e94:	01 96       	adiw	r24, 0x01	; 1
    2e96:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2e9a:	e0 91 3f 06 	lds	r30, 0x063F
    2e9e:	f0 91 40 06 	lds	r31, 0x0640
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	81 0f       	add	r24, r17
    2ea8:	91 1d       	adc	r25, r1
    2eaa:	a1 1d       	adc	r26, r1
    2eac:	b1 1d       	adc	r27, r1
    2eae:	85 8b       	std	Z+21, r24	; 0x15
    2eb0:	96 8b       	std	Z+22, r25	; 0x16
    2eb2:	a7 8b       	std	Z+23, r26	; 0x17
    2eb4:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2eb6:	18 3f       	cpi	r17, 0xF8	; 248
    2eb8:	80 f4       	brcc	.+32     	; 0x2eda <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2eba:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <_nrk_get_next_wakeup>
    2ebe:	21 2f       	mov	r18, r17
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	2f 5f       	subi	r18, 0xFF	; 255
    2ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	28 17       	cp	r18, r24
    2eca:	39 07       	cpc	r19, r25
    2ecc:	34 f4       	brge	.+12     	; 0x2eda <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    2ece:	82 e0       	ldi	r24, 0x02	; 2
    2ed0:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    2ed2:	80 93 53 04 	sts	0x0453, r24
            _nrk_set_next_wakeup (timer);
    2ed6:	0e 94 65 1f 	call	0x3eca	; 0x3eca <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    2eda:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    2ede:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	28 96       	adiw	r28, 0x08	; 8
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	f8 94       	cli
    2eea:	de bf       	out	0x3e, r29	; 62
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	cd bf       	out	0x3d, r28	; 61
    2ef0:	df 91       	pop	r29
    2ef2:	cf 91       	pop	r28
    2ef4:	1f 91       	pop	r17
    2ef6:	08 95       	ret

00002ef8 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    2ef8:	8f 92       	push	r8
    2efa:	9f 92       	push	r9
    2efc:	af 92       	push	r10
    2efe:	bf 92       	push	r11
    2f00:	cf 92       	push	r12
    2f02:	df 92       	push	r13
    2f04:	ef 92       	push	r14
    2f06:	ff 92       	push	r15
    2f08:	0f 93       	push	r16
    2f0a:	1f 93       	push	r17
    2f0c:	cf 93       	push	r28
    2f0e:	df 93       	push	r29
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    2f14:	60 97       	sbiw	r28, 0x10	; 16
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	f8 94       	cli
    2f1a:	de bf       	out	0x3e, r29	; 62
    2f1c:	0f be       	out	0x3f, r0	; 63
    2f1e:	cd bf       	out	0x3d, r28	; 61
    2f20:	29 87       	std	Y+9, r18	; 0x09
    2f22:	3a 87       	std	Y+10, r19	; 0x0a
    2f24:	4b 87       	std	Y+11, r20	; 0x0b
    2f26:	5c 87       	std	Y+12, r21	; 0x0c
    2f28:	6d 87       	std	Y+13, r22	; 0x0d
    2f2a:	7e 87       	std	Y+14, r23	; 0x0e
    2f2c:	8f 87       	std	Y+15, r24	; 0x0f
    2f2e:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    2f30:	ce 01       	movw	r24, r28
    2f32:	01 96       	adiw	r24, 0x01	; 1
    2f34:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    2f38:	89 80       	ldd	r8, Y+1	; 0x01
    2f3a:	9a 80       	ldd	r9, Y+2	; 0x02
    2f3c:	ab 80       	ldd	r10, Y+3	; 0x03
    2f3e:	bc 80       	ldd	r11, Y+4	; 0x04
    2f40:	cd 80       	ldd	r12, Y+5	; 0x05
    2f42:	de 80       	ldd	r13, Y+6	; 0x06
    2f44:	ef 80       	ldd	r14, Y+7	; 0x07
    2f46:	f8 84       	ldd	r15, Y+8	; 0x08
    2f48:	09 85       	ldd	r16, Y+9	; 0x09
    2f4a:	1a 85       	ldd	r17, Y+10	; 0x0a
    2f4c:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f4e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f50:	4d 85       	ldd	r20, Y+13	; 0x0d
    2f52:	5e 85       	ldd	r21, Y+14	; 0x0e
    2f54:	6f 85       	ldd	r22, Y+15	; 0x0f
    2f56:	78 89       	ldd	r23, Y+16	; 0x10
    2f58:	ce 01       	movw	r24, r28
    2f5a:	09 96       	adiw	r24, 0x09	; 9
    2f5c:	0e 94 35 18 	call	0x306a	; 0x306a <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    2f60:	8f 3f       	cpi	r24, 0xFF	; 255
    2f62:	61 f0       	breq	.+24     	; 0x2f7c <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    2f64:	29 85       	ldd	r18, Y+9	; 0x09
    2f66:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f68:	4b 85       	ldd	r20, Y+11	; 0x0b
    2f6a:	5c 85       	ldd	r21, Y+12	; 0x0c
    2f6c:	6d 85       	ldd	r22, Y+13	; 0x0d
    2f6e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2f70:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f72:	98 89       	ldd	r25, Y+16	; 0x10
    2f74:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <nrk_wait>

    return NRK_OK;
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	01 c0       	rjmp	.+2      	; 0x2f7e <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    2f7c:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    2f7e:	60 96       	adiw	r28, 0x10	; 16
    2f80:	0f b6       	in	r0, 0x3f	; 63
    2f82:	f8 94       	cli
    2f84:	de bf       	out	0x3e, r29	; 62
    2f86:	0f be       	out	0x3f, r0	; 63
    2f88:	cd bf       	out	0x3d, r28	; 61
    2f8a:	df 91       	pop	r29
    2f8c:	cf 91       	pop	r28
    2f8e:	1f 91       	pop	r17
    2f90:	0f 91       	pop	r16
    2f92:	ff 90       	pop	r15
    2f94:	ef 90       	pop	r14
    2f96:	df 90       	pop	r13
    2f98:	cf 90       	pop	r12
    2f9a:	bf 90       	pop	r11
    2f9c:	af 90       	pop	r10
    2f9e:	9f 90       	pop	r9
    2fa0:	8f 90       	pop	r8
    2fa2:	08 95       	ret

00002fa4 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    2fa4:	e0 91 3f 06 	lds	r30, 0x063F
    2fa8:	f0 91 40 06 	lds	r31, 0x0640
}
    2fac:	80 85       	ldd	r24, Z+8	; 0x08
    2fae:	08 95       	ret

00002fb0 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    2fb0:	0f 93       	push	r16
    2fb2:	1f 93       	push	r17
    2fb4:	cf 93       	push	r28
    2fb6:	df 93       	push	r29
    2fb8:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    2fba:	1c 82       	std	Y+4, r1	; 0x04
    2fbc:	1d 82       	std	Y+5, r1	; 0x05
    2fbe:	1e 82       	std	Y+6, r1	; 0x06
    2fc0:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    2fc2:	80 91 36 06 	lds	r24, 0x0636
    2fc6:	90 91 37 06 	lds	r25, 0x0637
    2fca:	a0 91 38 06 	lds	r26, 0x0638
    2fce:	b0 91 39 06 	lds	r27, 0x0639
    2fd2:	88 83       	st	Y, r24
    2fd4:	99 83       	std	Y+1, r25	; 0x01
    2fd6:	aa 83       	std	Y+2, r26	; 0x02
    2fd8:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    2fda:	80 91 3a 06 	lds	r24, 0x063A
    2fde:	90 91 3b 06 	lds	r25, 0x063B
    2fe2:	a0 91 3c 06 	lds	r26, 0x063C
    2fe6:	b0 91 3d 06 	lds	r27, 0x063D
    2fea:	8c 83       	std	Y+4, r24	; 0x04
    2fec:	9d 83       	std	Y+5, r25	; 0x05
    2fee:	ae 83       	std	Y+6, r26	; 0x06
    2ff0:	bf 83       	std	Y+7, r27	; 0x07
 
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    2ff2:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <_nrk_os_timer_get>
    2ff6:	a8 2f       	mov	r26, r24
    2ff8:	b0 e0       	ldi	r27, 0x00	; 0
    2ffa:	23 eb       	ldi	r18, 0xB3	; 179
    2ffc:	36 ee       	ldi	r19, 0xE6	; 230
    2ffe:	4e e0       	ldi	r20, 0x0E	; 14
    3000:	50 e0       	ldi	r21, 0x00	; 0
    3002:	0e 94 94 24 	call	0x4928	; 0x4928 <__muluhisi3>
    3006:	0c 81       	ldd	r16, Y+4	; 0x04
    3008:	1d 81       	ldd	r17, Y+5	; 0x05
    300a:	2e 81       	ldd	r18, Y+6	; 0x06
    300c:	3f 81       	ldd	r19, Y+7	; 0x07
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	80 0f       	add	r24, r16
    3014:	91 1f       	adc	r25, r17
    3016:	a2 1f       	adc	r26, r18
    3018:	b3 1f       	adc	r27, r19
    301a:	8c 83       	std	Y+4, r24	; 0x04
    301c:	9d 83       	std	Y+5, r25	; 0x05
    301e:	ae 83       	std	Y+6, r26	; 0x06
    3020:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3022:	8c 81       	ldd	r24, Y+4	; 0x04
    3024:	9d 81       	ldd	r25, Y+5	; 0x05
    3026:	ae 81       	ldd	r26, Y+6	; 0x06
    3028:	bf 81       	ldd	r27, Y+7	; 0x07
    302a:	81 15       	cp	r24, r1
    302c:	2a ec       	ldi	r18, 0xCA	; 202
    302e:	92 07       	cpc	r25, r18
    3030:	2a e9       	ldi	r18, 0x9A	; 154
    3032:	a2 07       	cpc	r26, r18
    3034:	2b e3       	ldi	r18, 0x3B	; 59
    3036:	b2 07       	cpc	r27, r18
    3038:	98 f0       	brcs	.+38     	; 0x3060 <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    303a:	9a 5c       	subi	r25, 0xCA	; 202
    303c:	aa 49       	sbci	r26, 0x9A	; 154
    303e:	bb 43       	sbci	r27, 0x3B	; 59
    3040:	8c 83       	std	Y+4, r24	; 0x04
    3042:	9d 83       	std	Y+5, r25	; 0x05
    3044:	ae 83       	std	Y+6, r26	; 0x06
    3046:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    3048:	88 81       	ld	r24, Y
    304a:	99 81       	ldd	r25, Y+1	; 0x01
    304c:	aa 81       	ldd	r26, Y+2	; 0x02
    304e:	bb 81       	ldd	r27, Y+3	; 0x03
    3050:	01 96       	adiw	r24, 0x01	; 1
    3052:	a1 1d       	adc	r26, r1
    3054:	b1 1d       	adc	r27, r1
    3056:	88 83       	st	Y, r24
    3058:	99 83       	std	Y+1, r25	; 0x01
    305a:	aa 83       	std	Y+2, r26	; 0x02
    305c:	bb 83       	std	Y+3, r27	; 0x03
    305e:	e1 cf       	rjmp	.-62     	; 0x3022 <nrk_time_get+0x72>
    }

}
    3060:	df 91       	pop	r29
    3062:	cf 91       	pop	r28
    3064:	1f 91       	pop	r17
    3066:	0f 91       	pop	r16
    3068:	08 95       	ret

0000306a <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    306a:	8f 92       	push	r8
    306c:	9f 92       	push	r9
    306e:	af 92       	push	r10
    3070:	bf 92       	push	r11
    3072:	cf 92       	push	r12
    3074:	df 92       	push	r13
    3076:	ef 92       	push	r14
    3078:	ff 92       	push	r15
    307a:	0f 93       	push	r16
    307c:	1f 93       	push	r17
    307e:	cf 93       	push	r28
    3080:	df 93       	push	r29
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
    3086:	60 97       	sbiw	r28, 0x10	; 16
    3088:	0f b6       	in	r0, 0x3f	; 63
    308a:	f8 94       	cli
    308c:	de bf       	out	0x3e, r29	; 62
    308e:	0f be       	out	0x3f, r0	; 63
    3090:	cd bf       	out	0x3d, r28	; 61
    3092:	fc 01       	movw	r30, r24
    3094:	09 83       	std	Y+1, r16	; 0x01
    3096:	1a 83       	std	Y+2, r17	; 0x02
    3098:	2b 83       	std	Y+3, r18	; 0x03
    309a:	3c 83       	std	Y+4, r19	; 0x04
    309c:	4d 83       	std	Y+5, r20	; 0x05
    309e:	5e 83       	std	Y+6, r21	; 0x06
    30a0:	6f 83       	std	Y+7, r22	; 0x07
    30a2:	78 87       	std	Y+8, r23	; 0x08
    30a4:	89 86       	std	Y+9, r8	; 0x09
    30a6:	9a 86       	std	Y+10, r9	; 0x0a
    30a8:	ab 86       	std	Y+11, r10	; 0x0b
    30aa:	bc 86       	std	Y+12, r11	; 0x0c
    30ac:	cd 86       	std	Y+13, r12	; 0x0d
    30ae:	de 86       	std	Y+14, r13	; 0x0e
    30b0:	ef 86       	std	Y+15, r14	; 0x0f
    30b2:	f8 8a       	std	Y+16, r15	; 0x10
    30b4:	09 81       	ldd	r16, Y+1	; 0x01
    30b6:	1a 81       	ldd	r17, Y+2	; 0x02
    30b8:	2b 81       	ldd	r18, Y+3	; 0x03
    30ba:	3c 81       	ldd	r19, Y+4	; 0x04
    30bc:	4d 81       	ldd	r20, Y+5	; 0x05
    30be:	5e 81       	ldd	r21, Y+6	; 0x06
    30c0:	6f 81       	ldd	r22, Y+7	; 0x07
    30c2:	78 85       	ldd	r23, Y+8	; 0x08
    30c4:	c9 84       	ldd	r12, Y+9	; 0x09
    30c6:	da 84       	ldd	r13, Y+10	; 0x0a
    30c8:	eb 84       	ldd	r14, Y+11	; 0x0b
    30ca:	fc 84       	ldd	r15, Y+12	; 0x0c
    30cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    30d0:	af 85       	ldd	r26, Y+15	; 0x0f
    30d2:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    30d4:	0c 15       	cp	r16, r12
    30d6:	1d 05       	cpc	r17, r13
    30d8:	2e 05       	cpc	r18, r14
    30da:	3f 05       	cpc	r19, r15
    30dc:	f0 f1       	brcs	.+124    	; 0x315a <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    30de:	c0 16       	cp	r12, r16
    30e0:	d1 06       	cpc	r13, r17
    30e2:	e2 06       	cpc	r14, r18
    30e4:	f3 06       	cpc	r15, r19
    30e6:	91 f4       	brne	.+36     	; 0x310c <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    30e8:	48 17       	cp	r20, r24
    30ea:	59 07       	cpc	r21, r25
    30ec:	6a 07       	cpc	r22, r26
    30ee:	7b 07       	cpc	r23, r27
    30f0:	a0 f1       	brcs	.+104    	; 0x315a <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    30f2:	48 1b       	sub	r20, r24
    30f4:	59 0b       	sbc	r21, r25
    30f6:	6a 0b       	sbc	r22, r26
    30f8:	7b 0b       	sbc	r23, r27
    30fa:	44 83       	std	Z+4, r20	; 0x04
    30fc:	55 83       	std	Z+5, r21	; 0x05
    30fe:	66 83       	std	Z+6, r22	; 0x06
    3100:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    3102:	10 82       	st	Z, r1
    3104:	11 82       	std	Z+1, r1	; 0x01
    3106:	12 82       	std	Z+2, r1	; 0x02
    3108:	13 82       	std	Z+3, r1	; 0x03
    310a:	25 c0       	rjmp	.+74     	; 0x3156 <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    310c:	48 17       	cp	r20, r24
    310e:	59 07       	cpc	r21, r25
    3110:	6a 07       	cpc	r22, r26
    3112:	7b 07       	cpc	r23, r27
    3114:	80 f4       	brcc	.+32     	; 0x3136 <nrk_time_sub+0xcc>
{
	high.secs--;
    3116:	01 50       	subi	r16, 0x01	; 1
    3118:	11 09       	sbc	r17, r1
    311a:	21 09       	sbc	r18, r1
    311c:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    311e:	0c 19       	sub	r16, r12
    3120:	1d 09       	sbc	r17, r13
    3122:	2e 09       	sbc	r18, r14
    3124:	3f 09       	sbc	r19, r15
    3126:	00 83       	st	Z, r16
    3128:	11 83       	std	Z+1, r17	; 0x01
    312a:	22 83       	std	Z+2, r18	; 0x02
    312c:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    312e:	56 53       	subi	r21, 0x36	; 54
    3130:	65 46       	sbci	r22, 0x65	; 101
    3132:	74 4c       	sbci	r23, 0xC4	; 196
    3134:	08 c0       	rjmp	.+16     	; 0x3146 <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    3136:	0c 19       	sub	r16, r12
    3138:	1d 09       	sbc	r17, r13
    313a:	2e 09       	sbc	r18, r14
    313c:	3f 09       	sbc	r19, r15
    313e:	00 83       	st	Z, r16
    3140:	11 83       	std	Z+1, r17	; 0x01
    3142:	22 83       	std	Z+2, r18	; 0x02
    3144:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    3146:	48 1b       	sub	r20, r24
    3148:	59 0b       	sbc	r21, r25
    314a:	6a 0b       	sbc	r22, r26
    314c:	7b 0b       	sbc	r23, r27
    314e:	44 83       	std	Z+4, r20	; 0x04
    3150:	55 83       	std	Z+5, r21	; 0x05
    3152:	66 83       	std	Z+6, r22	; 0x06
    3154:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	01 c0       	rjmp	.+2      	; 0x315c <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    315a:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    315c:	60 96       	adiw	r28, 0x10	; 16
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	f8 94       	cli
    3162:	de bf       	out	0x3e, r29	; 62
    3164:	0f be       	out	0x3f, r0	; 63
    3166:	cd bf       	out	0x3d, r28	; 61
    3168:	df 91       	pop	r29
    316a:	cf 91       	pop	r28
    316c:	1f 91       	pop	r17
    316e:	0f 91       	pop	r16
    3170:	ff 90       	pop	r15
    3172:	ef 90       	pop	r14
    3174:	df 90       	pop	r13
    3176:	cf 90       	pop	r12
    3178:	bf 90       	pop	r11
    317a:	af 90       	pop	r10
    317c:	9f 90       	pop	r9
    317e:	8f 90       	pop	r8
    3180:	08 95       	ret

00003182 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    3182:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    3184:	44 81       	ldd	r20, Z+4	; 0x04
    3186:	55 81       	ldd	r21, Z+5	; 0x05
    3188:	66 81       	ldd	r22, Z+6	; 0x06
    318a:	77 81       	ldd	r23, Z+7	; 0x07
    318c:	41 15       	cp	r20, r1
    318e:	8a ec       	ldi	r24, 0xCA	; 202
    3190:	58 07       	cpc	r21, r24
    3192:	8a e9       	ldi	r24, 0x9A	; 154
    3194:	68 07       	cpc	r22, r24
    3196:	8b e3       	ldi	r24, 0x3B	; 59
    3198:	78 07       	cpc	r23, r24
    319a:	98 f0       	brcs	.+38     	; 0x31c2 <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    319c:	5a 5c       	subi	r21, 0xCA	; 202
    319e:	6a 49       	sbci	r22, 0x9A	; 154
    31a0:	7b 43       	sbci	r23, 0x3B	; 59
    31a2:	44 83       	std	Z+4, r20	; 0x04
    31a4:	55 83       	std	Z+5, r21	; 0x05
    31a6:	66 83       	std	Z+6, r22	; 0x06
    31a8:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    31aa:	80 81       	ld	r24, Z
    31ac:	91 81       	ldd	r25, Z+1	; 0x01
    31ae:	a2 81       	ldd	r26, Z+2	; 0x02
    31b0:	b3 81       	ldd	r27, Z+3	; 0x03
    31b2:	01 96       	adiw	r24, 0x01	; 1
    31b4:	a1 1d       	adc	r26, r1
    31b6:	b1 1d       	adc	r27, r1
    31b8:	80 83       	st	Z, r24
    31ba:	91 83       	std	Z+1, r25	; 0x01
    31bc:	a2 83       	std	Z+2, r26	; 0x02
    31be:	b3 83       	std	Z+3, r27	; 0x03
    31c0:	e1 cf       	rjmp	.-62     	; 0x3184 <nrk_time_compact_nanos+0x2>
    }
}
    31c2:	08 95       	ret

000031c4 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    31c4:	8f 92       	push	r8
    31c6:	9f 92       	push	r9
    31c8:	af 92       	push	r10
    31ca:	bf 92       	push	r11
    31cc:	cf 92       	push	r12
    31ce:	df 92       	push	r13
    31d0:	ef 92       	push	r14
    31d2:	ff 92       	push	r15
    31d4:	0f 93       	push	r16
    31d6:	1f 93       	push	r17
    31d8:	cf 93       	push	r28
    31da:	df 93       	push	r29
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	60 97       	sbiw	r28, 0x10	; 16
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	cd bf       	out	0x3d, r28	; 61
    31ec:	09 83       	std	Y+1, r16	; 0x01
    31ee:	1a 83       	std	Y+2, r17	; 0x02
    31f0:	2b 83       	std	Y+3, r18	; 0x03
    31f2:	3c 83       	std	Y+4, r19	; 0x04
    31f4:	4d 83       	std	Y+5, r20	; 0x05
    31f6:	5e 83       	std	Y+6, r21	; 0x06
    31f8:	6f 83       	std	Y+7, r22	; 0x07
    31fa:	78 87       	std	Y+8, r23	; 0x08
    31fc:	89 86       	std	Y+9, r8	; 0x09
    31fe:	9a 86       	std	Y+10, r9	; 0x0a
    3200:	ab 86       	std	Y+11, r10	; 0x0b
    3202:	bc 86       	std	Y+12, r11	; 0x0c
    3204:	cd 86       	std	Y+13, r12	; 0x0d
    3206:	de 86       	std	Y+14, r13	; 0x0e
    3208:	ef 86       	std	Y+15, r14	; 0x0f
    320a:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    320c:	09 85       	ldd	r16, Y+9	; 0x09
    320e:	1a 85       	ldd	r17, Y+10	; 0x0a
    3210:	2b 85       	ldd	r18, Y+11	; 0x0b
    3212:	3c 85       	ldd	r19, Y+12	; 0x0c
    3214:	49 81       	ldd	r20, Y+1	; 0x01
    3216:	5a 81       	ldd	r21, Y+2	; 0x02
    3218:	6b 81       	ldd	r22, Y+3	; 0x03
    321a:	7c 81       	ldd	r23, Y+4	; 0x04
    321c:	40 0f       	add	r20, r16
    321e:	51 1f       	adc	r21, r17
    3220:	62 1f       	adc	r22, r18
    3222:	73 1f       	adc	r23, r19
    3224:	fc 01       	movw	r30, r24
    3226:	40 83       	st	Z, r20
    3228:	51 83       	std	Z+1, r21	; 0x01
    322a:	62 83       	std	Z+2, r22	; 0x02
    322c:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    322e:	0d 85       	ldd	r16, Y+13	; 0x0d
    3230:	1e 85       	ldd	r17, Y+14	; 0x0e
    3232:	2f 85       	ldd	r18, Y+15	; 0x0f
    3234:	38 89       	ldd	r19, Y+16	; 0x10
    3236:	4d 81       	ldd	r20, Y+5	; 0x05
    3238:	5e 81       	ldd	r21, Y+6	; 0x06
    323a:	6f 81       	ldd	r22, Y+7	; 0x07
    323c:	78 85       	ldd	r23, Y+8	; 0x08
    323e:	40 0f       	add	r20, r16
    3240:	51 1f       	adc	r21, r17
    3242:	62 1f       	adc	r22, r18
    3244:	73 1f       	adc	r23, r19
    3246:	44 83       	std	Z+4, r20	; 0x04
    3248:	55 83       	std	Z+5, r21	; 0x05
    324a:	66 83       	std	Z+6, r22	; 0x06
    324c:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    324e:	0e 94 c1 18 	call	0x3182	; 0x3182 <nrk_time_compact_nanos>
return NRK_OK;
}
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	60 96       	adiw	r28, 0x10	; 16
    3256:	0f b6       	in	r0, 0x3f	; 63
    3258:	f8 94       	cli
    325a:	de bf       	out	0x3e, r29	; 62
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	cd bf       	out	0x3d, r28	; 61
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	1f 91       	pop	r17
    3266:	0f 91       	pop	r16
    3268:	ff 90       	pop	r15
    326a:	ef 90       	pop	r14
    326c:	df 90       	pop	r13
    326e:	cf 90       	pop	r12
    3270:	bf 90       	pop	r11
    3272:	af 90       	pop	r10
    3274:	9f 90       	pop	r9
    3276:	8f 90       	pop	r8
    3278:	08 95       	ret

0000327a <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    327a:	e6 e3       	ldi	r30, 0x36	; 54
    327c:	f6 e0       	ldi	r31, 0x06	; 6
    327e:	60 83       	st	Z, r22
    3280:	71 83       	std	Z+1, r23	; 0x01
    3282:	82 83       	std	Z+2, r24	; 0x02
    3284:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    3286:	24 83       	std	Z+4, r18	; 0x04
    3288:	35 83       	std	Z+5, r19	; 0x05
    328a:	46 83       	std	Z+6, r20	; 0x06
    328c:	57 83       	std	Z+7, r21	; 0x07
    328e:	08 95       	ret

00003290 <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    3290:	2f 92       	push	r2
    3292:	3f 92       	push	r3
    3294:	4f 92       	push	r4
    3296:	5f 92       	push	r5
    3298:	6f 92       	push	r6
    329a:	7f 92       	push	r7
    329c:	8f 92       	push	r8
    329e:	9f 92       	push	r9
    32a0:	af 92       	push	r10
    32a2:	bf 92       	push	r11
    32a4:	cf 92       	push	r12
    32a6:	df 92       	push	r13
    32a8:	ef 92       	push	r14
    32aa:	ff 92       	push	r15
    32ac:	0f 93       	push	r16
    32ae:	1f 93       	push	r17
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    32b0:	fc 01       	movw	r30, r24
    32b2:	c0 80       	ld	r12, Z
    32b4:	d1 80       	ldd	r13, Z+1	; 0x01
    32b6:	e2 80       	ldd	r14, Z+2	; 0x02
    32b8:	f3 80       	ldd	r15, Z+3	; 0x03
    32ba:	64 81       	ldd	r22, Z+4	; 0x04
    32bc:	75 81       	ldd	r23, Z+5	; 0x05
    32be:	86 81       	ldd	r24, Z+6	; 0x06
    32c0:	97 81       	ldd	r25, Z+7	; 0x07
    32c2:	c1 14       	cp	r12, r1
    32c4:	d1 04       	cpc	r13, r1
    32c6:	e1 04       	cpc	r14, r1
    32c8:	f1 04       	cpc	r15, r1
    32ca:	c1 f1       	breq	.+112    	; 0x333c <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    32cc:	f2 e4       	ldi	r31, 0x42	; 66
    32ce:	cf 16       	cp	r12, r31
    32d0:	d1 04       	cpc	r13, r1
    32d2:	e1 04       	cpc	r14, r1
    32d4:	f1 04       	cpc	r15, r1
    32d6:	d0 f5       	brcc	.+116    	; 0x334c <_nrk_time_to_ticks+0xbc>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    32d8:	1b 01       	movw	r2, r22
    32da:	2c 01       	movw	r4, r24
    32dc:	61 2c       	mov	r6, r1
    32de:	71 2c       	mov	r7, r1
    32e0:	43 01       	movw	r8, r6
    32e2:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    32e4:	8e 2f       	mov	r24, r30
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	a0 e0       	ldi	r26, 0x00	; 0
    32ea:	b0 e0       	ldi	r27, 0x00	; 0
    32ec:	8c 15       	cp	r24, r12
    32ee:	9d 05       	cpc	r25, r13
    32f0:	ae 05       	cpc	r26, r14
    32f2:	bf 05       	cpc	r27, r15
    32f4:	88 f4       	brcc	.+34     	; 0x3318 <_nrk_time_to_ticks+0x88>
    32f6:	91 01       	movw	r18, r2
    32f8:	a2 01       	movw	r20, r4
    32fa:	b3 01       	movw	r22, r6
    32fc:	c4 01       	movw	r24, r8
    32fe:	36 53       	subi	r19, 0x36	; 54
    3300:	45 46       	sbci	r20, 0x65	; 101
    3302:	54 4c       	sbci	r21, 0xC4	; 196
    3304:	6f 4f       	sbci	r22, 0xFF	; 255
    3306:	7f 4f       	sbci	r23, 0xFF	; 255
    3308:	8f 4f       	sbci	r24, 0xFF	; 255
    330a:	9f 4f       	sbci	r25, 0xFF	; 255
    330c:	19 01       	movw	r2, r18
    330e:	2a 01       	movw	r4, r20
    3310:	3b 01       	movw	r6, r22
    3312:	4c 01       	movw	r8, r24
    3314:	ef 5f       	subi	r30, 0xFF	; 255
    3316:	e6 cf       	rjmp	.-52     	; 0x32e4 <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3318:	83 eb       	ldi	r24, 0xB3	; 179
    331a:	a8 2e       	mov	r10, r24
    331c:	96 ee       	ldi	r25, 0xE6	; 230
    331e:	b9 2e       	mov	r11, r25
    3320:	2e e0       	ldi	r18, 0x0E	; 14
    3322:	c2 2e       	mov	r12, r18
    3324:	d1 2c       	mov	r13, r1
    3326:	e1 2c       	mov	r14, r1
    3328:	f1 2c       	mov	r15, r1
    332a:	00 e0       	ldi	r16, 0x00	; 0
    332c:	10 e0       	ldi	r17, 0x00	; 0
    332e:	91 01       	movw	r18, r2
    3330:	a2 01       	movw	r20, r4
    3332:	b3 01       	movw	r22, r6
    3334:	c4 01       	movw	r24, r8
    3336:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <__udivdi3>
    333a:	06 c0       	rjmp	.+12     	; 0x3348 <_nrk_time_to_ticks+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    333c:	23 eb       	ldi	r18, 0xB3	; 179
    333e:	36 ee       	ldi	r19, 0xE6	; 230
    3340:	4e e0       	ldi	r20, 0x0E	; 14
    3342:	50 e0       	ldi	r21, 0x00	; 0
    3344:	0e 94 af 24 	call	0x495e	; 0x495e <__udivmodsi4>
    3348:	c9 01       	movw	r24, r18
    334a:	02 c0       	rjmp	.+4      	; 0x3350 <_nrk_time_to_ticks+0xc0>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    3350:	1f 91       	pop	r17
    3352:	0f 91       	pop	r16
    3354:	ff 90       	pop	r15
    3356:	ef 90       	pop	r14
    3358:	df 90       	pop	r13
    335a:	cf 90       	pop	r12
    335c:	bf 90       	pop	r11
    335e:	af 90       	pop	r10
    3360:	9f 90       	pop	r9
    3362:	8f 90       	pop	r8
    3364:	7f 90       	pop	r7
    3366:	6f 90       	pop	r6
    3368:	5f 90       	pop	r5
    336a:	4f 90       	pop	r4
    336c:	3f 90       	pop	r3
    336e:	2f 90       	pop	r2
    3370:	08 95       	ret

00003372 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3372:	cf 92       	push	r12
    3374:	df 92       	push	r13
    3376:	ef 92       	push	r14
    3378:	ff 92       	push	r15
    337a:	cf 93       	push	r28
    337c:	df 93       	push	r29
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
    3382:	28 97       	sbiw	r28, 0x08	; 8
    3384:	0f b6       	in	r0, 0x3f	; 63
    3386:	f8 94       	cli
    3388:	de bf       	out	0x3e, r29	; 62
    338a:	0f be       	out	0x3f, r0	; 63
    338c:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    338e:	6b 01       	movw	r12, r22
    3390:	7c 01       	movw	r14, r24
    3392:	2a e0       	ldi	r18, 0x0A	; 10
    3394:	f6 94       	lsr	r15
    3396:	e7 94       	ror	r14
    3398:	d7 94       	ror	r13
    339a:	c7 94       	ror	r12
    339c:	2a 95       	dec	r18
    339e:	d1 f7       	brne	.-12     	; 0x3394 <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    33a0:	c9 82       	std	Y+1, r12	; 0x01
    33a2:	da 82       	std	Y+2, r13	; 0x02
    33a4:	eb 82       	std	Y+3, r14	; 0x03
    33a6:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    33a8:	9b 01       	movw	r18, r22
    33aa:	ac 01       	movw	r20, r24
    33ac:	33 70       	andi	r19, 0x03	; 3
    33ae:	44 27       	eor	r20, r20
    33b0:	55 27       	eor	r21, r21
    33b2:	63 eb       	ldi	r22, 0xB3	; 179
    33b4:	76 ee       	ldi	r23, 0xE6	; 230
    33b6:	8e e0       	ldi	r24, 0x0E	; 14
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	0e 94 9f 24 	call	0x493e	; 0x493e <__mulsi3>

return t;
    33be:	2c 2d       	mov	r18, r12
    33c0:	3a 81       	ldd	r19, Y+2	; 0x02
    33c2:	4b 81       	ldd	r20, Y+3	; 0x03
    33c4:	5c 81       	ldd	r21, Y+4	; 0x04
}
    33c6:	28 96       	adiw	r28, 0x08	; 8
    33c8:	0f b6       	in	r0, 0x3f	; 63
    33ca:	f8 94       	cli
    33cc:	de bf       	out	0x3e, r29	; 62
    33ce:	0f be       	out	0x3f, r0	; 63
    33d0:	cd bf       	out	0x3d, r28	; 61
    33d2:	df 91       	pop	r29
    33d4:	cf 91       	pop	r28
    33d6:	ff 90       	pop	r15
    33d8:	ef 90       	pop	r14
    33da:	df 90       	pop	r13
    33dc:	cf 90       	pop	r12
    33de:	08 95       	ret

000033e0 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    33e0:	2f 92       	push	r2
    33e2:	3f 92       	push	r3
    33e4:	4f 92       	push	r4
    33e6:	5f 92       	push	r5
    33e8:	6f 92       	push	r6
    33ea:	7f 92       	push	r7
    33ec:	8f 92       	push	r8
    33ee:	9f 92       	push	r9
    33f0:	af 92       	push	r10
    33f2:	bf 92       	push	r11
    33f4:	cf 92       	push	r12
    33f6:	df 92       	push	r13
    33f8:	ef 92       	push	r14
    33fa:	ff 92       	push	r15
    33fc:	0f 93       	push	r16
    33fe:	1f 93       	push	r17
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3400:	fc 01       	movw	r30, r24
    3402:	c0 80       	ld	r12, Z
    3404:	d1 80       	ldd	r13, Z+1	; 0x01
    3406:	e2 80       	ldd	r14, Z+2	; 0x02
    3408:	f3 80       	ldd	r15, Z+3	; 0x03
    340a:	64 81       	ldd	r22, Z+4	; 0x04
    340c:	75 81       	ldd	r23, Z+5	; 0x05
    340e:	86 81       	ldd	r24, Z+6	; 0x06
    3410:	97 81       	ldd	r25, Z+7	; 0x07
    3412:	c1 14       	cp	r12, r1
    3414:	d1 04       	cpc	r13, r1
    3416:	e1 04       	cpc	r14, r1
    3418:	f1 04       	cpc	r15, r1
    341a:	99 f1       	breq	.+102    	; 0x3482 <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    341c:	1b 01       	movw	r2, r22
    341e:	2c 01       	movw	r4, r24
    3420:	61 2c       	mov	r6, r1
    3422:	71 2c       	mov	r7, r1
    3424:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3426:	e0 e0       	ldi	r30, 0x00	; 0
    3428:	8e 2f       	mov	r24, r30
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	a0 e0       	ldi	r26, 0x00	; 0
    342e:	b0 e0       	ldi	r27, 0x00	; 0
    3430:	8c 15       	cp	r24, r12
    3432:	9d 05       	cpc	r25, r13
    3434:	ae 05       	cpc	r26, r14
    3436:	bf 05       	cpc	r27, r15
    3438:	88 f4       	brcc	.+34     	; 0x345c <_nrk_time_to_ticks_long+0x7c>
    343a:	91 01       	movw	r18, r2
    343c:	a2 01       	movw	r20, r4
    343e:	b3 01       	movw	r22, r6
    3440:	c4 01       	movw	r24, r8
    3442:	36 53       	subi	r19, 0x36	; 54
    3444:	45 46       	sbci	r20, 0x65	; 101
    3446:	54 4c       	sbci	r21, 0xC4	; 196
    3448:	6f 4f       	sbci	r22, 0xFF	; 255
    344a:	7f 4f       	sbci	r23, 0xFF	; 255
    344c:	8f 4f       	sbci	r24, 0xFF	; 255
    344e:	9f 4f       	sbci	r25, 0xFF	; 255
    3450:	19 01       	movw	r2, r18
    3452:	2a 01       	movw	r4, r20
    3454:	3b 01       	movw	r6, r22
    3456:	4c 01       	movw	r8, r24
    3458:	ef 5f       	subi	r30, 0xFF	; 255
    345a:	e6 cf       	rjmp	.-52     	; 0x3428 <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    345c:	83 eb       	ldi	r24, 0xB3	; 179
    345e:	a8 2e       	mov	r10, r24
    3460:	96 ee       	ldi	r25, 0xE6	; 230
    3462:	b9 2e       	mov	r11, r25
    3464:	2e e0       	ldi	r18, 0x0E	; 14
    3466:	c2 2e       	mov	r12, r18
    3468:	d1 2c       	mov	r13, r1
    346a:	e1 2c       	mov	r14, r1
    346c:	f1 2c       	mov	r15, r1
    346e:	00 e0       	ldi	r16, 0x00	; 0
    3470:	10 e0       	ldi	r17, 0x00	; 0
    3472:	91 01       	movw	r18, r2
    3474:	a2 01       	movw	r20, r4
    3476:	b3 01       	movw	r22, r6
    3478:	c4 01       	movw	r24, r8
    347a:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <__udivdi3>
    347e:	ca 01       	movw	r24, r20
    3480:	07 c0       	rjmp	.+14     	; 0x3490 <_nrk_time_to_ticks_long+0xb0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    3482:	23 eb       	ldi	r18, 0xB3	; 179
    3484:	36 ee       	ldi	r19, 0xE6	; 230
    3486:	4e e0       	ldi	r20, 0x0E	; 14
    3488:	50 e0       	ldi	r21, 0x00	; 0
    348a:	0e 94 af 24 	call	0x495e	; 0x495e <__udivmodsi4>
    348e:	ca 01       	movw	r24, r20
}
return ticks;
}
    3490:	b9 01       	movw	r22, r18
    3492:	1f 91       	pop	r17
    3494:	0f 91       	pop	r16
    3496:	ff 90       	pop	r15
    3498:	ef 90       	pop	r14
    349a:	df 90       	pop	r13
    349c:	cf 90       	pop	r12
    349e:	bf 90       	pop	r11
    34a0:	af 90       	pop	r10
    34a2:	9f 90       	pop	r9
    34a4:	8f 90       	pop	r8
    34a6:	7f 90       	pop	r7
    34a8:	6f 90       	pop	r6
    34aa:	5f 90       	pop	r5
    34ac:	4f 90       	pop	r4
    34ae:	3f 90       	pop	r3
    34b0:	2f 90       	pop	r2
    34b2:	08 95       	ret

000034b4 <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    34b4:	c2 e0       	ldi	r28, 0x02	; 2
{
  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    34b6:	d1 e0       	ldi	r29, 0x01	; 1
{
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{
  nrk_stack_check(); 
    34b8:	0e 94 29 11 	call	0x2252	; 0x2252 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    34bc:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <_nrk_get_next_wakeup>
    34c0:	84 30       	cpi	r24, 0x04	; 4
    34c2:	28 f4       	brcc	.+10     	; 0x34ce <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    34c4:	d0 93 33 06 	sts	0x0633, r29
	    nrk_idle();
    34c8:	0e 94 70 22 	call	0x44e0	; 0x44e0 <nrk_idle>
    34cc:	08 c0       	rjmp	.+16     	; 0x34de <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    34ce:	8a e0       	ldi	r24, 0x0A	; 10
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    34d6:	c0 93 33 06 	sts	0x0633, r28
	    nrk_sleep();
    34da:	0e 94 64 22 	call	0x44c8	; 0x44c8 <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    34de:	80 91 61 04 	lds	r24, 0x0461
    34e2:	85 35       	cpi	r24, 0x55	; 85
    34e4:	19 f0       	breq	.+6      	; 0x34ec <nrk_idle_task+0x38>
    34e6:	88 e0       	ldi	r24, 0x08	; 8
    34e8:	0e 94 65 10 	call	0x20ca	; 0x20ca <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    34ec:	80 91 fe 3f 	lds	r24, 0x3FFE
    34f0:	85 35       	cpi	r24, 0x55	; 85
    34f2:	11 f3       	breq	.-60     	; 0x34b8 <nrk_idle_task+0x4>
    34f4:	88 e0       	ldi	r24, 0x08	; 8
    34f6:	0e 94 65 10 	call	0x20ca	; 0x20ca <nrk_error_add>
    34fa:	de cf       	rjmp	.-68     	; 0x34b8 <nrk_idle_task+0x4>

000034fc <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    34fc:	2f 92       	push	r2
    34fe:	3f 92       	push	r3
    3500:	4f 92       	push	r4
    3502:	5f 92       	push	r5
    3504:	6f 92       	push	r6
    3506:	7f 92       	push	r7
    3508:	8f 92       	push	r8
    350a:	9f 92       	push	r9
    350c:	af 92       	push	r10
    350e:	bf 92       	push	r11
    3510:	cf 92       	push	r12
    3512:	df 92       	push	r13
    3514:	ef 92       	push	r14
    3516:	ff 92       	push	r15
    3518:	0f 93       	push	r16
    351a:	1f 93       	push	r17
    351c:	cf 93       	push	r28
    351e:	df 93       	push	r29
    3520:	00 d0       	rcall	.+0      	; 0x3522 <_nrk_scheduler+0x26>
    3522:	00 d0       	rcall	.+0      	; 0x3524 <_nrk_scheduler+0x28>
    3524:	1f 92       	push	r1
    3526:	cd b7       	in	r28, 0x3d	; 61
    3528:	de b7       	in	r29, 0x3e	; 62

    //nrk_int_enable();   // this should be removed...  Not needed


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_precision_os_timer_reset();
    352a:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <_nrk_precision_os_timer_reset>
    _nrk_high_speed_timer_reset();
    352e:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    3532:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <_nrk_high_speed_timer_get>
    3536:	9b 83       	std	Y+3, r25	; 0x03
    3538:	8a 83       	std	Y+2, r24	; 0x02
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    353a:	8a ef       	ldi	r24, 0xFA	; 250
    353c:	0e 94 65 1f 	call	0x3eca	; 0x3eca <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    3540:	a0 91 53 04 	lds	r26, 0x0453
    3544:	b0 e0       	ldi	r27, 0x00	; 0
    3546:	23 eb       	ldi	r18, 0xB3	; 179
    3548:	36 ee       	ldi	r19, 0xE6	; 230
    354a:	4e e0       	ldi	r20, 0x0E	; 14
    354c:	50 e0       	ldi	r21, 0x00	; 0
    354e:	0e 94 94 24 	call	0x4928	; 0x4928 <__muluhisi3>
    3552:	00 91 3a 06 	lds	r16, 0x063A
    3556:	10 91 3b 06 	lds	r17, 0x063B
    355a:	20 91 3c 06 	lds	r18, 0x063C
    355e:	30 91 3d 06 	lds	r19, 0x063D
    3562:	6b 01       	movw	r12, r22
    3564:	7c 01       	movw	r14, r24
    3566:	c0 0e       	add	r12, r16
    3568:	d1 1e       	adc	r13, r17
    356a:	e2 1e       	adc	r14, r18
    356c:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    356e:	c7 01       	movw	r24, r14
    3570:	b6 01       	movw	r22, r12
    3572:	23 eb       	ldi	r18, 0xB3	; 179
    3574:	36 ee       	ldi	r19, 0xE6	; 230
    3576:	4e e0       	ldi	r20, 0x0E	; 14
    3578:	50 e0       	ldi	r21, 0x00	; 0
    357a:	0e 94 af 24 	call	0x495e	; 0x495e <__udivmodsi4>
    357e:	26 01       	movw	r4, r12
    3580:	37 01       	movw	r6, r14
    3582:	46 1a       	sub	r4, r22
    3584:	57 0a       	sbc	r5, r23
    3586:	68 0a       	sbc	r6, r24
    3588:	79 0a       	sbc	r7, r25
    358a:	d3 01       	movw	r26, r6
    358c:	c2 01       	movw	r24, r4
    358e:	00 91 36 06 	lds	r16, 0x0636
    3592:	10 91 37 06 	lds	r17, 0x0637
    3596:	20 91 38 06 	lds	r18, 0x0638
    359a:	30 91 39 06 	lds	r19, 0x0639

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    359e:	43 eb       	ldi	r20, 0xB3	; 179
    35a0:	84 2e       	mov	r8, r20
    35a2:	46 ee       	ldi	r20, 0xE6	; 230
    35a4:	94 2e       	mov	r9, r20
    35a6:	4e e0       	ldi	r20, 0x0E	; 14
    35a8:	a4 2e       	mov	r10, r20
    35aa:	b1 2c       	mov	r11, r1
    35ac:	68 01       	movw	r12, r16
    35ae:	79 01       	movw	r14, r18
    35b0:	4f ef       	ldi	r20, 0xFF	; 255
    35b2:	c4 1a       	sub	r12, r20
    35b4:	d4 0a       	sbc	r13, r20
    35b6:	e4 0a       	sbc	r14, r20
    35b8:	f4 0a       	sbc	r15, r20
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    35ba:	81 15       	cp	r24, r1
    35bc:	5a ec       	ldi	r21, 0xCA	; 202
    35be:	95 07       	cpc	r25, r21
    35c0:	5a e9       	ldi	r21, 0x9A	; 154
    35c2:	a5 07       	cpc	r26, r21
    35c4:	5b e3       	ldi	r21, 0x3B	; 59
    35c6:	b5 07       	cpc	r27, r21
    35c8:	c8 f0       	brcs	.+50     	; 0x35fc <_nrk_scheduler+0x100>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    35ca:	2c 01       	movw	r4, r24
    35cc:	3d 01       	movw	r6, r26
    35ce:	2a ec       	ldi	r18, 0xCA	; 202
    35d0:	52 1a       	sub	r5, r18
    35d2:	2a e9       	ldi	r18, 0x9A	; 154
    35d4:	62 0a       	sbc	r6, r18
    35d6:	2b e3       	ldi	r18, 0x3B	; 59
    35d8:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    35da:	c3 01       	movw	r24, r6
    35dc:	b2 01       	movw	r22, r4
    35de:	a5 01       	movw	r20, r10
    35e0:	94 01       	movw	r18, r8
    35e2:	0e 94 af 24 	call	0x495e	; 0x495e <__udivmodsi4>
    35e6:	a3 01       	movw	r20, r6
    35e8:	92 01       	movw	r18, r4
    35ea:	26 1b       	sub	r18, r22
    35ec:	37 0b       	sbc	r19, r23
    35ee:	48 0b       	sbc	r20, r24
    35f0:	59 0b       	sbc	r21, r25
    35f2:	da 01       	movw	r26, r20
    35f4:	c9 01       	movw	r24, r18
    35f6:	97 01       	movw	r18, r14
    35f8:	86 01       	movw	r16, r12
    35fa:	d8 cf       	rjmp	.-80     	; 0x35ac <_nrk_scheduler+0xb0>
    35fc:	80 93 3a 06 	sts	0x063A, r24
    3600:	90 93 3b 06 	sts	0x063B, r25
    3604:	a0 93 3c 06 	sts	0x063C, r26
    3608:	b0 93 3d 06 	sts	0x063D, r27
    360c:	00 93 36 06 	sts	0x0636, r16
    3610:	10 93 37 06 	sts	0x0637, r17
    3614:	20 93 38 06 	sts	0x0638, r18
    3618:	30 93 39 06 	sts	0x0639, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    361c:	e0 91 3f 06 	lds	r30, 0x063F
    3620:	f0 91 40 06 	lds	r31, 0x0640
    3624:	85 81       	ldd	r24, Z+5	; 0x05
    3626:	88 23       	and	r24, r24
    3628:	39 f1       	breq	.+78     	; 0x3678 <_nrk_scheduler+0x17c>
    362a:	81 85       	ldd	r24, Z+9	; 0x09
    362c:	84 30       	cpi	r24, 0x04	; 4
    362e:	21 f1       	breq	.+72     	; 0x3678 <_nrk_scheduler+0x17c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    3630:	87 81       	ldd	r24, Z+7	; 0x07
    3632:	82 30       	cpi	r24, 0x02	; 2
    3634:	29 f0       	breq	.+10     	; 0x3640 <_nrk_scheduler+0x144>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    3636:	88 23       	and	r24, r24
    3638:	41 f0       	breq	.+16     	; 0x364a <_nrk_scheduler+0x14e>
    363a:	86 81       	ldd	r24, Z+6	; 0x06
    363c:	81 11       	cpse	r24, r1
    363e:	02 c0       	rjmp	.+4      	; 0x3644 <_nrk_scheduler+0x148>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    3640:	85 e0       	ldi	r24, 0x05	; 5
    3642:	01 c0       	rjmp	.+2      	; 0x3646 <_nrk_scheduler+0x14a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3644:	83 e0       	ldi	r24, 0x03	; 3
    3646:	81 87       	std	Z+9, r24	; 0x09
    3648:	14 c0       	rjmp	.+40     	; 0x3672 <_nrk_scheduler+0x176>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    364a:	83 e0       	ldi	r24, 0x03	; 3
    364c:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    364e:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    3650:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    3652:	85 89       	ldd	r24, Z+21	; 0x15
    3654:	96 89       	ldd	r25, Z+22	; 0x16
    3656:	a7 89       	ldd	r26, Z+23	; 0x17
    3658:	b0 8d       	ldd	r27, Z+24	; 0x18
    365a:	89 2b       	or	r24, r25
    365c:	8a 2b       	or	r24, r26
    365e:	8b 2b       	or	r24, r27
    3660:	41 f4       	brne	.+16     	; 0x3672 <_nrk_scheduler+0x176>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    3662:	81 8d       	ldd	r24, Z+25	; 0x19
    3664:	92 8d       	ldd	r25, Z+26	; 0x1a
    3666:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3668:	b4 8d       	ldd	r27, Z+28	; 0x1c
    366a:	85 8b       	std	Z+21, r24	; 0x15
    366c:	96 8b       	std	Z+22, r25	; 0x16
    366e:	a7 8b       	std	Z+23, r26	; 0x17
    3670:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    3672:	80 85       	ldd	r24, Z+8	; 0x08
    3674:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    3678:	e0 91 3f 06 	lds	r30, 0x063F
    367c:	f0 91 40 06 	lds	r31, 0x0640
    3680:	85 a1       	ldd	r24, Z+37	; 0x25
    3682:	96 a1       	ldd	r25, Z+38	; 0x26
    3684:	a7 a1       	ldd	r26, Z+39	; 0x27
    3686:	b0 a5       	ldd	r27, Z+40	; 0x28
    3688:	89 2b       	or	r24, r25
    368a:	8a 2b       	or	r24, r26
    368c:	8b 2b       	or	r24, r27
    368e:	09 f4       	brne	.+2      	; 0x3692 <_nrk_scheduler+0x196>
    3690:	44 c0       	rjmp	.+136    	; 0x371a <_nrk_scheduler+0x21e>
    3692:	20 85       	ldd	r18, Z+8	; 0x08
    3694:	22 23       	and	r18, r18
    3696:	09 f4       	brne	.+2      	; 0x369a <_nrk_scheduler+0x19e>
    3698:	40 c0       	rjmp	.+128    	; 0x371a <_nrk_scheduler+0x21e>
    369a:	81 85       	ldd	r24, Z+9	; 0x09
    369c:	84 30       	cpi	r24, 0x04	; 4
    369e:	e9 f1       	breq	.+122    	; 0x371a <_nrk_scheduler+0x21e>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    36a0:	85 8d       	ldd	r24, Z+29	; 0x1d
    36a2:	96 8d       	ldd	r25, Z+30	; 0x1e
    36a4:	a7 8d       	ldd	r26, Z+31	; 0x1f
    36a6:	b0 a1       	ldd	r27, Z+32	; 0x20
    36a8:	40 91 53 04 	lds	r20, 0x0453
    36ac:	50 e0       	ldi	r21, 0x00	; 0
    36ae:	60 e0       	ldi	r22, 0x00	; 0
    36b0:	70 e0       	ldi	r23, 0x00	; 0
    36b2:	84 17       	cp	r24, r20
    36b4:	95 07       	cpc	r25, r21
    36b6:	a6 07       	cpc	r26, r22
    36b8:	b7 07       	cpc	r27, r23
    36ba:	68 f4       	brcc	.+26     	; 0x36d6 <_nrk_scheduler+0x1da>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    36bc:	62 2f       	mov	r22, r18
    36be:	82 e0       	ldi	r24, 0x02	; 2
    36c0:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    36c4:	e0 91 3f 06 	lds	r30, 0x063F
    36c8:	f0 91 40 06 	lds	r31, 0x0640
    36cc:	15 8e       	std	Z+29, r1	; 0x1d
    36ce:	16 8e       	std	Z+30, r1	; 0x1e
    36d0:	17 8e       	std	Z+31, r1	; 0x1f
    36d2:	10 a2       	std	Z+32, r1	; 0x20
    36d4:	08 c0       	rjmp	.+16     	; 0x36e6 <_nrk_scheduler+0x1ea>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    36d6:	84 1b       	sub	r24, r20
    36d8:	95 0b       	sbc	r25, r21
    36da:	a6 0b       	sbc	r26, r22
    36dc:	b7 0b       	sbc	r27, r23
    36de:	85 8f       	std	Z+29, r24	; 0x1d
    36e0:	96 8f       	std	Z+30, r25	; 0x1e
    36e2:	a7 8f       	std	Z+31, r26	; 0x1f
    36e4:	b0 a3       	std	Z+32, r27	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    36e6:	e0 91 3f 06 	lds	r30, 0x063F
    36ea:	f0 91 40 06 	lds	r31, 0x0640
    36ee:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    36f0:	85 8d       	ldd	r24, Z+29	; 0x1d
    36f2:	96 8d       	ldd	r25, Z+30	; 0x1e
    36f4:	a7 8d       	ldd	r26, Z+31	; 0x1f
    36f6:	b0 a1       	ldd	r27, Z+32	; 0x20
    36f8:	89 2b       	or	r24, r25
    36fa:	8a 2b       	or	r24, r26
    36fc:	8b 2b       	or	r24, r27
    36fe:	69 f4       	brne	.+26     	; 0x371a <_nrk_scheduler+0x21e>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    3700:	61 2f       	mov	r22, r17
    3702:	83 e0       	ldi	r24, 0x03	; 3
    3704:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3708:	e0 91 3f 06 	lds	r30, 0x063F
    370c:	f0 91 40 06 	lds	r31, 0x0640
    3710:	83 e0       	ldi	r24, 0x03	; 3
    3712:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    3714:	81 2f       	mov	r24, r17
    3716:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <nrk_rem_from_readyQ>
    371a:	87 e2       	ldi	r24, 0x27	; 39
    371c:	95 e0       	ldi	r25, 0x05	; 5
    371e:	9d 83       	std	Y+5, r25	; 0x05
    3720:	8c 83       	std	Y+4, r24	; 0x04

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3722:	00 e6       	ldi	r16, 0x60	; 96
    3724:	1a ee       	ldi	r17, 0xEA	; 234
    3726:	31 2c       	mov	r3, r1
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3728:	9a ef       	ldi	r25, 0xFA	; 250
    372a:	c9 2e       	mov	r12, r25
    372c:	d1 2c       	mov	r13, r1
    372e:	e1 2c       	mov	r14, r1
    3730:	f1 2c       	mov	r15, r1
                nrk_task_TCB[task_ID].nw_flag=0;
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    nrk_task_TCB[task_ID].task_state = READY;
    3732:	22 e0       	ldi	r18, 0x02	; 2
    3734:	22 2e       	mov	r2, r18
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    3736:	81 2c       	mov	r8, r1
    3738:	91 2c       	mov	r9, r1
    373a:	54 01       	movw	r10, r8
    373c:	83 94       	inc	r8
    373e:	ec 81       	ldd	r30, Y+4	; 0x04
    3740:	fd 81       	ldd	r31, Y+5	; 0x05
    3742:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    3744:	80 81       	ld	r24, Z
    3746:	8f 3f       	cpi	r24, 0xFF	; 255
    3748:	09 f4       	brne	.+2      	; 0x374c <_nrk_scheduler+0x250>
    374a:	ff c0       	rjmp	.+510    	; 0x394a <_nrk_scheduler+0x44e>
    374c:	ec 81       	ldd	r30, Y+4	; 0x04
    374e:	fd 81       	ldd	r31, Y+5	; 0x05
    3750:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    3752:	10 82       	st	Z, r1
    3754:	ec 81       	ldd	r30, Y+4	; 0x04
    3756:	fd 81       	ldd	r31, Y+5	; 0x05
    3758:	f0 81       	ld	r31, Z
    375a:	f9 83       	std	Y+1, r31	; 0x01
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    375c:	88 23       	and	r24, r24
    375e:	09 f4       	brne	.+2      	; 0x3762 <_nrk_scheduler+0x266>
    3760:	68 c0       	rjmp	.+208    	; 0x3832 <_nrk_scheduler+0x336>
    3762:	f4 30       	cpi	r31, 0x04	; 4
    3764:	09 f4       	brne	.+2      	; 0x3768 <_nrk_scheduler+0x26c>
    3766:	f1 c0       	rjmp	.+482    	; 0x394a <_nrk_scheduler+0x44e>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    3768:	ec 81       	ldd	r30, Y+4	; 0x04
    376a:	fd 81       	ldd	r31, Y+5	; 0x05
    376c:	44 84       	ldd	r4, Z+12	; 0x0c
    376e:	55 84       	ldd	r5, Z+13	; 0x0d
    3770:	66 84       	ldd	r6, Z+14	; 0x0e
    3772:	77 84       	ldd	r7, Z+15	; 0x0f
    3774:	60 91 53 04 	lds	r22, 0x0453
    3778:	70 e0       	ldi	r23, 0x00	; 0
    377a:	80 e0       	ldi	r24, 0x00	; 0
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	46 16       	cp	r4, r22
    3780:	57 06       	cpc	r5, r23
    3782:	68 06       	cpc	r6, r24
    3784:	79 06       	cpc	r7, r25
    3786:	48 f0       	brcs	.+18     	; 0x379a <_nrk_scheduler+0x29e>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    3788:	46 1a       	sub	r4, r22
    378a:	57 0a       	sbc	r5, r23
    378c:	68 0a       	sbc	r6, r24
    378e:	79 0a       	sbc	r7, r25
    3790:	44 86       	std	Z+12, r4	; 0x0c
    3792:	55 86       	std	Z+13, r5	; 0x0d
    3794:	66 86       	std	Z+14, r6	; 0x0e
    3796:	77 86       	std	Z+15, r7	; 0x0f
    3798:	06 c0       	rjmp	.+12     	; 0x37a6 <_nrk_scheduler+0x2aa>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    379a:	ec 81       	ldd	r30, Y+4	; 0x04
    379c:	fd 81       	ldd	r31, Y+5	; 0x05
    379e:	14 86       	std	Z+12, r1	; 0x0c
    37a0:	15 86       	std	Z+13, r1	; 0x0d
    37a2:	16 86       	std	Z+14, r1	; 0x0e
    37a4:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    37a6:	ec 81       	ldd	r30, Y+4	; 0x04
    37a8:	fd 81       	ldd	r31, Y+5	; 0x05
    37aa:	40 88       	ldd	r4, Z+16	; 0x10
    37ac:	51 88       	ldd	r5, Z+17	; 0x11
    37ae:	62 88       	ldd	r6, Z+18	; 0x12
    37b0:	73 88       	ldd	r7, Z+19	; 0x13
    37b2:	46 16       	cp	r4, r22
    37b4:	57 06       	cpc	r5, r23
    37b6:	68 06       	cpc	r6, r24
    37b8:	79 06       	cpc	r7, r25
    37ba:	48 f0       	brcs	.+18     	; 0x37ce <_nrk_scheduler+0x2d2>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    37bc:	a3 01       	movw	r20, r6
    37be:	92 01       	movw	r18, r4
    37c0:	26 1b       	sub	r18, r22
    37c2:	37 0b       	sbc	r19, r23
    37c4:	48 0b       	sbc	r20, r24
    37c6:	59 0b       	sbc	r21, r25
    37c8:	da 01       	movw	r26, r20
    37ca:	c9 01       	movw	r24, r18
    37cc:	13 c0       	rjmp	.+38     	; 0x37f4 <_nrk_scheduler+0x2f8>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    37ce:	ec 81       	ldd	r30, Y+4	; 0x04
    37d0:	fd 81       	ldd	r31, Y+5	; 0x05
    37d2:	20 8d       	ldd	r18, Z+24	; 0x18
    37d4:	31 8d       	ldd	r19, Z+25	; 0x19
    37d6:	42 8d       	ldd	r20, Z+26	; 0x1a
    37d8:	53 8d       	ldd	r21, Z+27	; 0x1b
    37da:	62 17       	cp	r22, r18
    37dc:	73 07       	cpc	r23, r19
    37de:	84 07       	cpc	r24, r20
    37e0:	95 07       	cpc	r25, r21
    37e2:	68 f4       	brcc	.+26     	; 0x37fe <_nrk_scheduler+0x302>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    37e4:	29 01       	movw	r4, r18
    37e6:	3a 01       	movw	r6, r20
    37e8:	46 1a       	sub	r4, r22
    37ea:	57 0a       	sbc	r5, r23
    37ec:	68 0a       	sbc	r6, r24
    37ee:	79 0a       	sbc	r7, r25
    37f0:	d3 01       	movw	r26, r6
    37f2:	c2 01       	movw	r24, r4
    37f4:	80 8b       	std	Z+16, r24	; 0x10
    37f6:	91 8b       	std	Z+17, r25	; 0x11
    37f8:	a2 8b       	std	Z+18, r26	; 0x12
    37fa:	b3 8b       	std	Z+19, r27	; 0x13
    37fc:	08 c0       	rjmp	.+16     	; 0x380e <_nrk_scheduler+0x312>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    37fe:	0e 94 af 24 	call	0x495e	; 0x495e <__udivmodsi4>
    3802:	ec 81       	ldd	r30, Y+4	; 0x04
    3804:	fd 81       	ldd	r31, Y+5	; 0x05
    3806:	60 8b       	std	Z+16, r22	; 0x10
    3808:	71 8b       	std	Z+17, r23	; 0x11
    380a:	82 8b       	std	Z+18, r24	; 0x12
    380c:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    380e:	ec 81       	ldd	r30, Y+4	; 0x04
    3810:	fd 81       	ldd	r31, Y+5	; 0x05
    3812:	80 89       	ldd	r24, Z+16	; 0x10
    3814:	91 89       	ldd	r25, Z+17	; 0x11
    3816:	a2 89       	ldd	r26, Z+18	; 0x12
    3818:	b3 89       	ldd	r27, Z+19	; 0x13
    381a:	89 2b       	or	r24, r25
    381c:	8a 2b       	or	r24, r26
    381e:	8b 2b       	or	r24, r27
    3820:	41 f4       	brne	.+16     	; 0x3832 <_nrk_scheduler+0x336>
    3822:	80 8d       	ldd	r24, Z+24	; 0x18
    3824:	91 8d       	ldd	r25, Z+25	; 0x19
    3826:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3828:	b3 8d       	ldd	r27, Z+27	; 0x1b
    382a:	80 8b       	std	Z+16, r24	; 0x10
    382c:	91 8b       	std	Z+17, r25	; 0x11
    382e:	a2 8b       	std	Z+18, r26	; 0x12
    3830:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    3832:	f9 81       	ldd	r31, Y+1	; 0x01
    3834:	f3 30       	cpi	r31, 0x03	; 3
    3836:	09 f0       	breq	.+2      	; 0x383a <_nrk_scheduler+0x33e>
    3838:	88 c0       	rjmp	.+272    	; 0x394a <_nrk_scheduler+0x44e>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    383a:	ec 81       	ldd	r30, Y+4	; 0x04
    383c:	fd 81       	ldd	r31, Y+5	; 0x05
    383e:	84 85       	ldd	r24, Z+12	; 0x0c
    3840:	95 85       	ldd	r25, Z+13	; 0x0d
    3842:	a6 85       	ldd	r26, Z+14	; 0x0e
    3844:	b7 85       	ldd	r27, Z+15	; 0x0f
    3846:	89 2b       	or	r24, r25
    3848:	8a 2b       	or	r24, r26
    384a:	8b 2b       	or	r24, r27
    384c:	09 f0       	breq	.+2      	; 0x3850 <_nrk_scheduler+0x354>
    384e:	6a c0       	rjmp	.+212    	; 0x3924 <_nrk_scheduler+0x428>
    3850:	df 01       	movw	r26, r30
    3852:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    3854:	8c 91       	ld	r24, X
    3856:	9f 01       	movw	r18, r30
    3858:	23 50       	subi	r18, 0x03	; 3
    385a:	31 09       	sbc	r19, r1
    385c:	88 23       	and	r24, r24
    385e:	a9 f0       	breq	.+42     	; 0x388a <_nrk_scheduler+0x38e>
    3860:	f9 01       	movw	r30, r18
    3862:	80 81       	ld	r24, Z
    3864:	88 23       	and	r24, r24
    3866:	89 f0       	breq	.+34     	; 0x388a <_nrk_scheduler+0x38e>
    3868:	b5 01       	movw	r22, r10
    386a:	a4 01       	movw	r20, r8
    386c:	00 90 2f 06 	lds	r0, 0x062F
    3870:	04 c0       	rjmp	.+8      	; 0x387a <_nrk_scheduler+0x37e>
    3872:	44 0f       	add	r20, r20
    3874:	55 1f       	adc	r21, r21
    3876:	66 1f       	adc	r22, r22
    3878:	77 1f       	adc	r23, r23
    387a:	0a 94       	dec	r0
    387c:	d2 f7       	brpl	.-12     	; 0x3872 <_nrk_scheduler+0x376>
    387e:	ec 81       	ldd	r30, Y+4	; 0x04
    3880:	fd 81       	ldd	r31, Y+5	; 0x05
    3882:	40 87       	std	Z+8, r20	; 0x08
    3884:	51 87       	std	Z+9, r21	; 0x09
    3886:	62 87       	std	Z+10, r22	; 0x0a
    3888:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    388a:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    388c:	f9 01       	movw	r30, r18
    388e:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    3890:	ec 81       	ldd	r30, Y+4	; 0x04
    3892:	fd 81       	ldd	r31, Y+5	; 0x05
    3894:	a0 a1       	ldd	r26, Z+32	; 0x20
    3896:	b1 a1       	ldd	r27, Z+33	; 0x21
    3898:	40 8c       	ldd	r4, Z+24	; 0x18
    389a:	51 8c       	ldd	r5, Z+25	; 0x19
    389c:	62 8c       	ldd	r6, Z+26	; 0x1a
    389e:	73 8c       	ldd	r7, Z+27	; 0x1b
    38a0:	44 8d       	ldd	r20, Z+28	; 0x1c
    38a2:	55 8d       	ldd	r21, Z+29	; 0x1d
    38a4:	66 8d       	ldd	r22, Z+30	; 0x1e
    38a6:	77 8d       	ldd	r23, Z+31	; 0x1f
    38a8:	a1 30       	cpi	r26, 0x01	; 1
    38aa:	b1 05       	cpc	r27, r1
    38ac:	c9 f4       	brne	.+50     	; 0x38e0 <_nrk_scheduler+0x3e4>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    38ae:	44 8b       	std	Z+20, r20	; 0x14
    38b0:	55 8b       	std	Z+21, r21	; 0x15
    38b2:	66 8b       	std	Z+22, r22	; 0x16
    38b4:	77 8b       	std	Z+23, r23	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    38b6:	20 82       	st	Z, r2
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    38b8:	80 89       	ldd	r24, Z+16	; 0x10
    38ba:	91 89       	ldd	r25, Z+17	; 0x11
    38bc:	a2 89       	ldd	r26, Z+18	; 0x12
    38be:	b3 89       	ldd	r27, Z+19	; 0x13
    38c0:	84 87       	std	Z+12, r24	; 0x0c
    38c2:	95 87       	std	Z+13, r25	; 0x0d
    38c4:	a6 87       	std	Z+14, r26	; 0x0e
    38c6:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    38c8:	45 28       	or	r4, r5
    38ca:	46 28       	or	r4, r6
    38cc:	47 28       	or	r4, r7
    38ce:	21 f4       	brne	.+8      	; 0x38d8 <_nrk_scheduler+0x3dc>
    38d0:	c4 86       	std	Z+12, r12	; 0x0c
    38d2:	d5 86       	std	Z+13, r13	; 0x0d
    38d4:	e6 86       	std	Z+14, r14	; 0x0e
    38d6:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    38d8:	83 2d       	mov	r24, r3
    38da:	0e 94 9b 14 	call	0x2936	; 0x2936 <nrk_add_to_readyQ>
    38de:	22 c0       	rjmp	.+68     	; 0x3924 <_nrk_scheduler+0x428>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    38e0:	ec 81       	ldd	r30, Y+4	; 0x04
    38e2:	fd 81       	ldd	r31, Y+5	; 0x05
    38e4:	44 8b       	std	Z+20, r20	; 0x14
    38e6:	55 8b       	std	Z+21, r21	; 0x15
    38e8:	66 8b       	std	Z+22, r22	; 0x16
    38ea:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    38ec:	11 97       	sbiw	r26, 0x01	; 1
    38ee:	a3 01       	movw	r20, r6
    38f0:	92 01       	movw	r18, r4
    38f2:	0e 94 94 24 	call	0x4928	; 0x4928 <__muluhisi3>
    38f6:	64 87       	std	Z+12, r22	; 0x0c
    38f8:	75 87       	std	Z+13, r23	; 0x0d
    38fa:	86 87       	std	Z+14, r24	; 0x0e
    38fc:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    38fe:	60 8b       	std	Z+16, r22	; 0x10
    3900:	71 8b       	std	Z+17, r23	; 0x11
    3902:	82 8b       	std	Z+18, r24	; 0x12
    3904:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3906:	45 28       	or	r4, r5
    3908:	46 28       	or	r4, r6
    390a:	47 28       	or	r4, r7
    390c:	21 f4       	brne	.+8      	; 0x3916 <_nrk_scheduler+0x41a>
    390e:	c4 86       	std	Z+12, r12	; 0x0c
    3910:	d5 86       	std	Z+13, r13	; 0x0d
    3912:	e6 86       	std	Z+14, r14	; 0x0e
    3914:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    3916:	44 24       	eor	r4, r4
    3918:	43 94       	inc	r4
    391a:	51 2c       	mov	r5, r1
    391c:	ec 81       	ldd	r30, Y+4	; 0x04
    391e:	fd 81       	ldd	r31, Y+5	; 0x05
    3920:	51 a2       	std	Z+33, r5	; 0x21
    3922:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    3924:	ec 81       	ldd	r30, Y+4	; 0x04
    3926:	fd 81       	ldd	r31, Y+5	; 0x05
    3928:	84 85       	ldd	r24, Z+12	; 0x0c
    392a:	95 85       	ldd	r25, Z+13	; 0x0d
    392c:	a6 85       	ldd	r26, Z+14	; 0x0e
    392e:	b7 85       	ldd	r27, Z+15	; 0x0f
    3930:	00 97       	sbiw	r24, 0x00	; 0
    3932:	a1 05       	cpc	r26, r1
    3934:	b1 05       	cpc	r27, r1
    3936:	49 f0       	breq	.+18     	; 0x394a <_nrk_scheduler+0x44e>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    3938:	a8 01       	movw	r20, r16
    393a:	60 e0       	ldi	r22, 0x00	; 0
    393c:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    393e:	84 17       	cp	r24, r20
    3940:	95 07       	cpc	r25, r21
    3942:	a6 07       	cpc	r26, r22
    3944:	b7 07       	cpc	r27, r23
    3946:	08 f4       	brcc	.+2      	; 0x394a <_nrk_scheduler+0x44e>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    3948:	8c 01       	movw	r16, r24
    394a:	33 94       	inc	r3
    394c:	2c 81       	ldd	r18, Y+4	; 0x04
    394e:	3d 81       	ldd	r19, Y+5	; 0x05
    3950:	25 5d       	subi	r18, 0xD5	; 213
    3952:	3f 4f       	sbci	r19, 0xFF	; 255
    3954:	3d 83       	std	Y+5, r19	; 0x05
    3956:	2c 83       	std	Y+4, r18	; 0x04

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    3958:	36 e0       	ldi	r19, 0x06	; 6
    395a:	33 12       	cpse	r3, r19
    395c:	f0 ce       	rjmp	.-544    	; 0x373e <_nrk_scheduler+0x242>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    395e:	0e 94 8a 14 	call	0x2914	; 0x2914 <nrk_get_high_ready_task_ID>
    3962:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3964:	4b e2       	ldi	r20, 0x2B	; 43
    3966:	84 02       	muls	r24, r20
    3968:	f0 01       	movw	r30, r0
    396a:	11 24       	eor	r1, r1
    396c:	e2 5e       	subi	r30, 0xE2	; 226
    396e:	fa 4f       	sbci	r31, 0xFA	; 250
    3970:	22 85       	ldd	r18, Z+10	; 0x0a
    3972:	20 93 41 06 	sts	0x0641, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    3976:	f0 93 31 06 	sts	0x0631, r31
    397a:	e0 93 30 06 	sts	0x0630, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    397e:	88 23       	and	r24, r24
    3980:	f9 f0       	breq	.+62     	; 0x39c0 <_nrk_scheduler+0x4c4>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    3982:	85 a1       	ldd	r24, Z+37	; 0x25
    3984:	96 a1       	ldd	r25, Z+38	; 0x26
    3986:	a7 a1       	ldd	r26, Z+39	; 0x27
    3988:	b0 a5       	ldd	r27, Z+40	; 0x28
    398a:	89 2b       	or	r24, r25
    398c:	8a 2b       	or	r24, r26
    398e:	8b 2b       	or	r24, r27
    3990:	99 f0       	breq	.+38     	; 0x39b8 <_nrk_scheduler+0x4bc>
    3992:	85 8d       	ldd	r24, Z+29	; 0x1d
    3994:	96 8d       	ldd	r25, Z+30	; 0x1e
    3996:	a7 8d       	ldd	r26, Z+31	; 0x1f
    3998:	b0 a1       	ldd	r27, Z+32	; 0x20
    399a:	8a 3f       	cpi	r24, 0xFA	; 250
    399c:	91 05       	cpc	r25, r1
    399e:	a1 05       	cpc	r26, r1
    39a0:	b1 05       	cpc	r27, r1
    39a2:	50 f4       	brcc	.+20     	; 0x39b8 <_nrk_scheduler+0x4bc>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    39a4:	a8 01       	movw	r20, r16
    39a6:	60 e0       	ldi	r22, 0x00	; 0
    39a8:	70 e0       	ldi	r23, 0x00	; 0
    39aa:	84 17       	cp	r24, r20
    39ac:	95 07       	cpc	r25, r21
    39ae:	a6 07       	cpc	r26, r22
    39b0:	b7 07       	cpc	r27, r23
    39b2:	e8 f4       	brcc	.+58     	; 0x39ee <_nrk_scheduler+0x4f2>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    39b4:	8c 01       	movw	r16, r24
    39b6:	1b c0       	rjmp	.+54     	; 0x39ee <_nrk_scheduler+0x4f2>
    39b8:	0b 3f       	cpi	r16, 0xFB	; 251
    39ba:	11 05       	cpc	r17, r1
    39bc:	c0 f0       	brcs	.+48     	; 0x39ee <_nrk_scheduler+0x4f2>
    39be:	12 c0       	rjmp	.+36     	; 0x39e4 <_nrk_scheduler+0x4e8>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    39c0:	04 30       	cpi	r16, 0x04	; 4
    39c2:	11 05       	cpc	r17, r1
    39c4:	a0 f0       	brcs	.+40     	; 0x39ee <_nrk_scheduler+0x4f2>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    39c6:	c8 01       	movw	r24, r16
    39c8:	03 97       	sbiw	r24, 0x03	; 3
    39ca:	8a 3f       	cpi	r24, 0xFA	; 250
    39cc:	91 05       	cpc	r25, r1
    39ce:	38 f4       	brcc	.+14     	; 0x39de <_nrk_scheduler+0x4e2>
    39d0:	8c 01       	movw	r16, r24
    39d2:	82 30       	cpi	r24, 0x02	; 2
    39d4:	91 05       	cpc	r25, r1
    39d6:	58 f4       	brcc	.+22     	; 0x39ee <_nrk_scheduler+0x4f2>
    39d8:	02 e0       	ldi	r16, 0x02	; 2
    39da:	10 e0       	ldi	r17, 0x00	; 0
    39dc:	08 c0       	rjmp	.+16     	; 0x39ee <_nrk_scheduler+0x4f2>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    39de:	0d 3f       	cpi	r16, 0xFD	; 253
    39e0:	11 05       	cpc	r17, r1
    39e2:	19 f0       	breq	.+6      	; 0x39ea <_nrk_scheduler+0x4ee>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    39e4:	0a ef       	ldi	r16, 0xFA	; 250
    39e6:	10 e0       	ldi	r17, 0x00	; 0
    39e8:	02 c0       	rjmp	.+4      	; 0x39ee <_nrk_scheduler+0x4f2>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    39ea:	07 ef       	ldi	r16, 0xF7	; 247
    39ec:	10 e0       	ldi	r17, 0x00	; 0
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    39ee:	20 93 32 06 	sts	0x0632, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    39f2:	f0 93 40 06 	sts	0x0640, r31
    39f6:	e0 93 3f 06 	sts	0x063F, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    39fa:	00 93 53 04 	sts	0x0453, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    39fe:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <_nrk_os_timer_get>
    3a02:	28 2f       	mov	r18, r24
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	2f 5f       	subi	r18, 0xFF	; 255
    3a08:	3f 4f       	sbci	r19, 0xFF	; 255
    3a0a:	20 17       	cp	r18, r16
    3a0c:	31 07       	cpc	r19, r17
    3a0e:	40 f0       	brcs	.+16     	; 0x3a20 <_nrk_scheduler+0x524>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    3a10:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <_nrk_os_timer_get>
    3a14:	08 2f       	mov	r16, r24
    3a16:	10 e0       	ldi	r17, 0x00	; 0
    3a18:	0e 5f       	subi	r16, 0xFE	; 254
    3a1a:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    3a1c:	00 93 53 04 	sts	0x0453, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    3a20:	f1 10       	cpse	r15, r1
    3a22:	10 92 33 06 	sts	0x0633, r1

    _nrk_set_next_wakeup(next_wake);
    3a26:	80 2f       	mov	r24, r16
    3a28:	0e 94 65 1f 	call	0x3eca	; 0x3eca <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    3a2c:	6c ed       	ldi	r22, 0xDC	; 220
    3a2e:	75 e0       	ldi	r23, 0x05	; 5
    3a30:	8a 81       	ldd	r24, Y+2	; 0x02
    3a32:	9b 81       	ldd	r25, Y+3	; 0x03
    3a34:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    3a38:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    3a3c:	0f 90       	pop	r0
    3a3e:	0f 90       	pop	r0
    3a40:	0f 90       	pop	r0
    3a42:	0f 90       	pop	r0
    3a44:	0f 90       	pop	r0
    3a46:	df 91       	pop	r29
    3a48:	cf 91       	pop	r28
    3a4a:	1f 91       	pop	r17
    3a4c:	0f 91       	pop	r16
    3a4e:	ff 90       	pop	r15
    3a50:	ef 90       	pop	r14
    3a52:	df 90       	pop	r13
    3a54:	cf 90       	pop	r12
    3a56:	bf 90       	pop	r11
    3a58:	af 90       	pop	r10
    3a5a:	9f 90       	pop	r9
    3a5c:	8f 90       	pop	r8
    3a5e:	7f 90       	pop	r7
    3a60:	6f 90       	pop	r6
    3a62:	5f 90       	pop	r5
    3a64:	4f 90       	pop	r4
    3a66:	3f 90       	pop	r3
    3a68:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    3a6a:	0c 94 f5 22 	jmp	0x45ea	; 0x45ea <nrk_start_high_ready_task>

00003a6e <_nrk_reserve_init>:
    3a6e:	e6 e6       	ldi	r30, 0x66	; 102
    3a70:	f6 e0       	ldi	r31, 0x06	; 6
    3a72:	8f ef       	ldi	r24, 0xFF	; 255
    3a74:	80 8b       	std	Z+16, r24	; 0x10
    3a76:	83 a3       	std	Z+35, r24	; 0x23
    3a78:	86 ab       	std	Z+54, r24	; 0x36
    3a7a:	80 93 af 06 	sts	0x06AF, r24
    3a7e:	80 93 c2 06 	sts	0x06C2, r24
    3a82:	08 95       	ret

00003a84 <nrk_reserve_create>:
}

// This function returns the id of a free reserve
// This returns NRK_ERROR if there are no free reserves
int8_t nrk_reserve_create ()
{
    3a84:	e6 e7       	ldi	r30, 0x76	; 118
    3a86:	f6 e0       	ldi	r31, 0x06	; 6
    3a88:	80 e0       	ldi	r24, 0x00	; 0
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
  int8_t i;
  for (i = 0; i < NRK_MAX_RESERVES; i++) {
    if (_nrk_reserve[i].active == -1) {
    3a8c:	20 81       	ld	r18, Z
    3a8e:	2f 3f       	cpi	r18, 0xFF	; 255
    3a90:	59 f4       	brne	.+22     	; 0x3aa8 <nrk_reserve_create+0x24>
      // Check and Accept
      _nrk_reserve[i].active = 1;
    3a92:	23 e1       	ldi	r18, 0x13	; 19
    3a94:	28 9f       	mul	r18, r24
    3a96:	f0 01       	movw	r30, r0
    3a98:	29 9f       	mul	r18, r25
    3a9a:	f0 0d       	add	r31, r0
    3a9c:	11 24       	eor	r1, r1
    3a9e:	ea 59       	subi	r30, 0x9A	; 154
    3aa0:	f9 4f       	sbci	r31, 0xF9	; 249
    3aa2:	91 e0       	ldi	r25, 0x01	; 1
    3aa4:	90 8b       	std	Z+16, r25	; 0x10
      return i;
    3aa6:	08 95       	ret
    3aa8:	01 96       	adiw	r24, 0x01	; 1
    3aaa:	73 96       	adiw	r30, 0x13	; 19
// This function returns the id of a free reserve
// This returns NRK_ERROR if there are no free reserves
int8_t nrk_reserve_create ()
{
  int8_t i;
  for (i = 0; i < NRK_MAX_RESERVES; i++) {
    3aac:	85 30       	cpi	r24, 0x05	; 5
    3aae:	91 05       	cpc	r25, r1
    3ab0:	69 f7       	brne	.-38     	; 0x3a8c <nrk_reserve_create+0x8>
      _nrk_reserve[i].active = 1;
      return i;
    }
  }

  return NRK_ERROR;
    3ab2:	8f ef       	ldi	r24, 0xFF	; 255
}
    3ab4:	08 95       	ret

00003ab6 <nrk_reserve_delete>:
// This function frees a current reserve
// This returns NRK_ERROR if the reserve does not exist
int8_t nrk_reserve_delete (uint8_t reserve_id)
{
  int8_t i;
  if (reserve_id >= 0 && reserve_id < NRK_MAX_RESERVES) {
    3ab6:	85 30       	cpi	r24, 0x05	; 5
    3ab8:	38 f4       	brcc	.+14     	; 0x3ac8 <nrk_reserve_delete+0x12>
    if (_nrk_reserve[i].active == 1) {
    3aba:	e6 e6       	ldi	r30, 0x66	; 102
    3abc:	f6 e0       	ldi	r31, 0x06	; 6
    3abe:	80 89       	ldd	r24, Z+16	; 0x10
    3ac0:	81 30       	cpi	r24, 0x01	; 1
    3ac2:	11 f4       	brne	.+4      	; 0x3ac8 <nrk_reserve_delete+0x12>
      _nrk_reserve[i].active = 0;
    3ac4:	10 8a       	std	Z+16, r1	; 0x10
      return NRK_OK;
    3ac6:	08 95       	ret
    }
  }
  return NRK_ERROR;
    3ac8:	8f ef       	ldi	r24, 0xFF	; 255
}
    3aca:	08 95       	ret

00003acc <_nrk_reserve_update>:
  return (_nrk_reserve[reserve_id].set_access -
          _nrk_reserve[reserve_id].cur_access);
}

void _nrk_reserve_update (uint8_t reserve_id)
{
    3acc:	0f 93       	push	r16
    3ace:	1f 93       	push	r17
    3ad0:	cf 93       	push	r28
    3ad2:	df 93       	push	r29
    3ad4:	cd b7       	in	r28, 0x3d	; 61
    3ad6:	de b7       	in	r29, 0x3e	; 62
    3ad8:	28 97       	sbiw	r28, 0x08	; 8
    3ada:	0f b6       	in	r0, 0x3f	; 63
    3adc:	f8 94       	cli
    3ade:	de bf       	out	0x3e, r29	; 62
    3ae0:	0f be       	out	0x3f, r0	; 63
    3ae2:	cd bf       	out	0x3d, r28	; 61
    3ae4:	08 2f       	mov	r16, r24
  nrk_time_t t;

  nrk_int_disable ();
    3ae6:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <nrk_int_disable>
  nrk_time_get (&t);
    3aea:	ce 01       	movw	r24, r28
    3aec:	01 96       	adiw	r24, 0x01	; 1
    3aee:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <nrk_time_get>

  _nrk_reserve[reserve_id].cur_time = (int32_t) _nrk_time_to_ticks_long (&t);
    3af2:	10 e0       	ldi	r17, 0x00	; 0
    3af4:	ce 01       	movw	r24, r28
    3af6:	01 96       	adiw	r24, 0x01	; 1
    3af8:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <_nrk_time_to_ticks_long>
    3afc:	23 e1       	ldi	r18, 0x13	; 19
    3afe:	20 9f       	mul	r18, r16
    3b00:	f0 01       	movw	r30, r0
    3b02:	21 9f       	mul	r18, r17
    3b04:	f0 0d       	add	r31, r0
    3b06:	11 24       	eor	r1, r1
    3b08:	ea 59       	subi	r30, 0x9A	; 154
    3b0a:	f9 4f       	sbci	r31, 0xF9	; 249
    3b0c:	60 87       	std	Z+8, r22	; 0x08
    3b0e:	71 87       	std	Z+9, r23	; 0x09
    3b10:	82 87       	std	Z+10, r24	; 0x0a
    3b12:	93 87       	std	Z+11, r25	; 0x0b
  if (_nrk_reserve[reserve_id].cur_time >= _nrk_reserve[reserve_id].set_time) {
    3b14:	04 81       	ldd	r16, Z+4	; 0x04
    3b16:	15 81       	ldd	r17, Z+5	; 0x05
    3b18:	26 81       	ldd	r18, Z+6	; 0x06
    3b1a:	37 81       	ldd	r19, Z+7	; 0x07
    3b1c:	60 17       	cp	r22, r16
    3b1e:	71 07       	cpc	r23, r17
    3b20:	82 07       	cpc	r24, r18
    3b22:	93 07       	cpc	r25, r19
    3b24:	80 f0       	brcs	.+32     	; 0x3b46 <_nrk_reserve_update+0x7a>
    // If the reserve is passed its period then replenish it
    _nrk_reserve[reserve_id].set_time =
      _nrk_reserve[reserve_id].cur_time +
    3b26:	00 81       	ld	r16, Z
    3b28:	11 81       	ldd	r17, Z+1	; 0x01
    3b2a:	22 81       	ldd	r18, Z+2	; 0x02
    3b2c:	33 81       	ldd	r19, Z+3	; 0x03
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	80 0f       	add	r24, r16
    3b34:	91 1f       	adc	r25, r17
    3b36:	a2 1f       	adc	r26, r18
    3b38:	b3 1f       	adc	r27, r19
  nrk_time_get (&t);

  _nrk_reserve[reserve_id].cur_time = (int32_t) _nrk_time_to_ticks_long (&t);
  if (_nrk_reserve[reserve_id].cur_time >= _nrk_reserve[reserve_id].set_time) {
    // If the reserve is passed its period then replenish it
    _nrk_reserve[reserve_id].set_time =
    3b3a:	84 83       	std	Z+4, r24	; 0x04
    3b3c:	95 83       	std	Z+5, r25	; 0x05
    3b3e:	a6 83       	std	Z+6, r26	; 0x06
    3b40:	b7 83       	std	Z+7, r27	; 0x07
      _nrk_reserve[reserve_id].cur_time +
      _nrk_reserve[reserve_id].period_ticks;
    _nrk_reserve[reserve_id].cur_access = 0;
    3b42:	17 86       	std	Z+15, r1	; 0x0f
    3b44:	16 86       	std	Z+14, r1	; 0x0e
  }
  nrk_int_enable ();
    3b46:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_int_enable>

}
    3b4a:	28 96       	adiw	r28, 0x08	; 8
    3b4c:	0f b6       	in	r0, 0x3f	; 63
    3b4e:	f8 94       	cli
    3b50:	de bf       	out	0x3e, r29	; 62
    3b52:	0f be       	out	0x3f, r0	; 63
    3b54:	cd bf       	out	0x3d, r28	; 61
    3b56:	df 91       	pop	r29
    3b58:	cf 91       	pop	r28
    3b5a:	1f 91       	pop	r17
    3b5c:	0f 91       	pop	r16
    3b5e:	08 95       	ret

00003b60 <nrk_reserve_get>:




uint8_t nrk_reserve_get (uint8_t reserve_id)
{
    3b60:	cf 93       	push	r28
    3b62:	df 93       	push	r29

  if (reserve_id >= NRK_MAX_RESERVES) {
    3b64:	85 30       	cpi	r24, 0x05	; 5
    3b66:	10 f0       	brcs	.+4      	; 0x3b6c <nrk_reserve_get+0xc>
    _nrk_errno_set (1);
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	0a c0       	rjmp	.+20     	; 0x3b80 <nrk_reserve_get+0x20>
    return 0;
  }
  if (_nrk_reserve[reserve_id].active == -1) {
    3b6c:	93 e1       	ldi	r25, 0x13	; 19
    3b6e:	89 9f       	mul	r24, r25
    3b70:	e0 01       	movw	r28, r0
    3b72:	11 24       	eor	r1, r1
    3b74:	ca 59       	subi	r28, 0x9A	; 154
    3b76:	d9 4f       	sbci	r29, 0xF9	; 249
    3b78:	98 89       	ldd	r25, Y+16	; 0x10
    3b7a:	9f 3f       	cpi	r25, 0xFF	; 255
    3b7c:	21 f4       	brne	.+8      	; 0x3b86 <nrk_reserve_get+0x26>
    // Reserve isn't active 
    _nrk_errno_set (2);
    3b7e:	82 e0       	ldi	r24, 0x02	; 2
    3b80:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_nrk_errno_set>
    3b84:	0b c0       	rjmp	.+22     	; 0x3b9c <nrk_reserve_get+0x3c>
    return 0;
  }

  _nrk_reserve_update (reserve_id);
    3b86:	0e 94 66 1d 	call	0x3acc	; 0x3acc <_nrk_reserve_update>

  if (_nrk_reserve[reserve_id].cur_access >
    3b8a:	2e 85       	ldd	r18, Y+14	; 0x0e
    3b8c:	3f 85       	ldd	r19, Y+15	; 0x0f
      _nrk_reserve[reserve_id].set_access)
    3b8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b90:	9d 85       	ldd	r25, Y+13	; 0x0d
    return 0;
  }

  _nrk_reserve_update (reserve_id);

  if (_nrk_reserve[reserve_id].cur_access >
    3b92:	82 17       	cp	r24, r18
    3b94:	93 07       	cpc	r25, r19
    3b96:	14 f0       	brlt	.+4      	; 0x3b9c <nrk_reserve_get+0x3c>
      _nrk_reserve[reserve_id].set_access)
    return 0;
  return (_nrk_reserve[reserve_id].set_access -
    3b98:	82 1b       	sub	r24, r18
    3b9a:	01 c0       	rjmp	.+2      	; 0x3b9e <nrk_reserve_get+0x3e>

  _nrk_reserve_update (reserve_id);

  if (_nrk_reserve[reserve_id].cur_access >
      _nrk_reserve[reserve_id].set_access)
    return 0;
    3b9c:	80 e0       	ldi	r24, 0x00	; 0
  return (_nrk_reserve[reserve_id].set_access -
          _nrk_reserve[reserve_id].cur_access);
}
    3b9e:	df 91       	pop	r29
    3ba0:	cf 91       	pop	r28
    3ba2:	08 95       	ret

00003ba4 <nrk_reserve_consume>:
  nrk_int_enable ();

}

int8_t nrk_reserve_consume (uint8_t reserve_id)
{
    3ba4:	1f 93       	push	r17
    3ba6:	cf 93       	push	r28
    3ba8:	df 93       	push	r29

  if (reserve_id >= NRK_MAX_RESERVES) {
    3baa:	85 30       	cpi	r24, 0x05	; 5
    3bac:	20 f0       	brcs	.+8      	; 0x3bb6 <nrk_reserve_consume+0x12>
    _nrk_errno_set (1);
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_nrk_errno_set>
    3bb4:	23 c0       	rjmp	.+70     	; 0x3bfc <nrk_reserve_consume+0x58>
    return NRK_ERROR;
  }
  if (_nrk_reserve[reserve_id].active == -1) {
    3bb6:	93 e1       	ldi	r25, 0x13	; 19
    3bb8:	89 9f       	mul	r24, r25
    3bba:	e0 01       	movw	r28, r0
    3bbc:	11 24       	eor	r1, r1
    3bbe:	ca 59       	subi	r28, 0x9A	; 154
    3bc0:	d9 4f       	sbci	r29, 0xF9	; 249
    3bc2:	18 89       	ldd	r17, Y+16	; 0x10
    3bc4:	1f 3f       	cpi	r17, 0xFF	; 255
    3bc6:	21 f4       	brne	.+8      	; 0x3bd0 <nrk_reserve_consume+0x2c>
    _nrk_errno_set (2);
    3bc8:	82 e0       	ldi	r24, 0x02	; 2
    3bca:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <_nrk_errno_set>
    return NRK_ERROR;
    3bce:	17 c0       	rjmp	.+46     	; 0x3bfe <nrk_reserve_consume+0x5a>
  }

  _nrk_reserve_update (reserve_id);
    3bd0:	0e 94 66 1d 	call	0x3acc	; 0x3acc <_nrk_reserve_update>

  if ((_nrk_reserve[reserve_id].set_access <=
       _nrk_reserve[reserve_id].cur_access)) {
    3bd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bd6:	9f 85       	ldd	r25, Y+15	; 0x0f
    return NRK_ERROR;
  }

  _nrk_reserve_update (reserve_id);

  if ((_nrk_reserve[reserve_id].set_access <=
    3bd8:	2c 85       	ldd	r18, Y+12	; 0x0c
    3bda:	3d 85       	ldd	r19, Y+13	; 0x0d
    3bdc:	82 17       	cp	r24, r18
    3bde:	93 07       	cpc	r25, r19
    3be0:	44 f0       	brlt	.+16     	; 0x3bf2 <nrk_reserve_consume+0x4e>
       _nrk_reserve[reserve_id].cur_access)) {
    // You violated your resource (like MJ after a little boy)
    nrk_int_enable ();
    3be2:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <nrk_int_enable>
    if (_nrk_reserve[reserve_id].error != NULL)
    3be6:	e9 89       	ldd	r30, Y+17	; 0x11
    3be8:	fa 89       	ldd	r31, Y+18	; 0x12
    3bea:	30 97       	sbiw	r30, 0x00	; 0
    3bec:	39 f0       	breq	.+14     	; 0x3bfc <nrk_reserve_consume+0x58>
      _nrk_reserve[reserve_id].error ();
    3bee:	09 95       	icall
    3bf0:	05 c0       	rjmp	.+10     	; 0x3bfc <nrk_reserve_consume+0x58>
    return NRK_ERROR;
  }
  else {
    // Reserve is fine. Take some of it.
    _nrk_reserve[reserve_id].cur_access++;
    3bf2:	01 96       	adiw	r24, 0x01	; 1
    3bf4:	9f 87       	std	Y+15, r25	; 0x0f
    3bf6:	8e 87       	std	Y+14, r24	; 0x0e
  }


  return NRK_OK;
    3bf8:	11 e0       	ldi	r17, 0x01	; 1
    3bfa:	01 c0       	rjmp	.+2      	; 0x3bfe <nrk_reserve_consume+0x5a>
       _nrk_reserve[reserve_id].cur_access)) {
    // You violated your resource (like MJ after a little boy)
    nrk_int_enable ();
    if (_nrk_reserve[reserve_id].error != NULL)
      _nrk_reserve[reserve_id].error ();
    return NRK_ERROR;
    3bfc:	1f ef       	ldi	r17, 0xFF	; 255
    _nrk_reserve[reserve_id].cur_access++;
  }


  return NRK_OK;
}
    3bfe:	81 2f       	mov	r24, r17
    3c00:	df 91       	pop	r29
    3c02:	cf 91       	pop	r28
    3c04:	1f 91       	pop	r17
    3c06:	08 95       	ret

00003c08 <nrk_reserve_set>:

int8_t nrk_reserve_set (uint8_t id, nrk_time_t * period, int16_t access_count,
                        void *errhandler)
{
    3c08:	8f 92       	push	r8
    3c0a:	9f 92       	push	r9
    3c0c:	af 92       	push	r10
    3c0e:	bf 92       	push	r11
    3c10:	cf 92       	push	r12
    3c12:	df 92       	push	r13
    3c14:	ef 92       	push	r14
    3c16:	ff 92       	push	r15
    3c18:	0f 93       	push	r16
    3c1a:	1f 93       	push	r17
    3c1c:	cf 93       	push	r28
    3c1e:	df 93       	push	r29
    3c20:	cd b7       	in	r28, 0x3d	; 61
    3c22:	de b7       	in	r29, 0x3e	; 62
    3c24:	28 97       	sbiw	r28, 0x08	; 8
    3c26:	0f b6       	in	r0, 0x3f	; 63
    3c28:	f8 94       	cli
    3c2a:	de bf       	out	0x3e, r29	; 62
    3c2c:	0f be       	out	0x3f, r0	; 63
    3c2e:	cd bf       	out	0x3d, r28	; 61
  nrk_time_t tmp_time;

  if (id >= NRK_MAX_RESERVES)
    3c30:	85 30       	cpi	r24, 0x05	; 5
    3c32:	08 f0       	brcs	.+2      	; 0x3c36 <nrk_reserve_set+0x2e>
    3c34:	4a c0       	rjmp	.+148    	; 0x3cca <nrk_reserve_set+0xc2>
    return NRK_ERROR;
  if (_nrk_reserve[id].active == -1)
    3c36:	93 e1       	ldi	r25, 0x13	; 19
    3c38:	89 9f       	mul	r24, r25
    3c3a:	80 01       	movw	r16, r0
    3c3c:	11 24       	eor	r1, r1
    3c3e:	0a 59       	subi	r16, 0x9A	; 154
    3c40:	19 4f       	sbci	r17, 0xF9	; 249
    3c42:	f8 01       	movw	r30, r16
    3c44:	80 89       	ldd	r24, Z+16	; 0x10
    3c46:	8f 3f       	cpi	r24, 0xFF	; 255
    3c48:	09 f4       	brne	.+2      	; 0x3c4c <nrk_reserve_set+0x44>
    3c4a:	40 c0       	rjmp	.+128    	; 0x3ccc <nrk_reserve_set+0xc4>
    3c4c:	79 01       	movw	r14, r18
    3c4e:	6a 01       	movw	r12, r20
    3c50:	fb 01       	movw	r30, r22
    return NRK_ERROR;

  tmp_time.secs = period->secs;
    3c52:	80 81       	ld	r24, Z
    3c54:	91 81       	ldd	r25, Z+1	; 0x01
    3c56:	a2 81       	ldd	r26, Z+2	; 0x02
    3c58:	b3 81       	ldd	r27, Z+3	; 0x03
    3c5a:	89 83       	std	Y+1, r24	; 0x01
    3c5c:	9a 83       	std	Y+2, r25	; 0x02
    3c5e:	ab 83       	std	Y+3, r26	; 0x03
    3c60:	bc 83       	std	Y+4, r27	; 0x04
  tmp_time.nano_secs = period->nano_secs;
    3c62:	84 81       	ldd	r24, Z+4	; 0x04
    3c64:	95 81       	ldd	r25, Z+5	; 0x05
    3c66:	a6 81       	ldd	r26, Z+6	; 0x06
    3c68:	b7 81       	ldd	r27, Z+7	; 0x07
    3c6a:	8d 83       	std	Y+5, r24	; 0x05
    3c6c:	9e 83       	std	Y+6, r25	; 0x06
    3c6e:	af 83       	std	Y+7, r26	; 0x07
    3c70:	b8 87       	std	Y+8, r27	; 0x08
  _nrk_reserve[id].period_ticks = _nrk_time_to_ticks_long (&tmp_time);
    3c72:	ce 01       	movw	r24, r28
    3c74:	01 96       	adiw	r24, 0x01	; 1
    3c76:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <_nrk_time_to_ticks_long>
    3c7a:	f8 01       	movw	r30, r16
    3c7c:	60 83       	st	Z, r22
    3c7e:	71 83       	std	Z+1, r23	; 0x01
    3c80:	82 83       	std	Z+2, r24	; 0x02
    3c82:	93 83       	std	Z+3, r25	; 0x03
  _nrk_reserve[id].set_access = access_count;
    3c84:	d5 86       	std	Z+13, r13	; 0x0d
    3c86:	c4 86       	std	Z+12, r12	; 0x0c
  _nrk_reserve[id].cur_access = 0;
    3c88:	17 86       	std	Z+15, r1	; 0x0f
    3c8a:	16 86       	std	Z+14, r1	; 0x0e

  nrk_time_get (&tmp_time);
    3c8c:	ce 01       	movw	r24, r28
    3c8e:	01 96       	adiw	r24, 0x01	; 1
    3c90:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <nrk_time_get>
  _nrk_reserve[id].cur_time = (uint32_t) _nrk_time_to_ticks_long (&tmp_time);
    3c94:	ce 01       	movw	r24, r28
    3c96:	01 96       	adiw	r24, 0x01	; 1
    3c98:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <_nrk_time_to_ticks_long>
    3c9c:	f8 01       	movw	r30, r16
    3c9e:	60 87       	std	Z+8, r22	; 0x08
    3ca0:	71 87       	std	Z+9, r23	; 0x09
    3ca2:	82 87       	std	Z+10, r24	; 0x0a
    3ca4:	93 87       	std	Z+11, r25	; 0x0b
  _nrk_reserve[id].set_time =
    _nrk_reserve[id].cur_time + _nrk_reserve[id].period_ticks;
    3ca6:	80 80       	ld	r8, Z
    3ca8:	91 80       	ldd	r9, Z+1	; 0x01
    3caa:	a2 80       	ldd	r10, Z+2	; 0x02
    3cac:	b3 80       	ldd	r11, Z+3	; 0x03
    3cae:	dc 01       	movw	r26, r24
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	88 0d       	add	r24, r8
    3cb4:	99 1d       	adc	r25, r9
    3cb6:	aa 1d       	adc	r26, r10
    3cb8:	bb 1d       	adc	r27, r11
  _nrk_reserve[id].set_access = access_count;
  _nrk_reserve[id].cur_access = 0;

  nrk_time_get (&tmp_time);
  _nrk_reserve[id].cur_time = (uint32_t) _nrk_time_to_ticks_long (&tmp_time);
  _nrk_reserve[id].set_time =
    3cba:	84 83       	std	Z+4, r24	; 0x04
    3cbc:	95 83       	std	Z+5, r25	; 0x05
    3cbe:	a6 83       	std	Z+6, r26	; 0x06
    3cc0:	b7 83       	std	Z+7, r27	; 0x07
    _nrk_reserve[id].cur_time + _nrk_reserve[id].period_ticks;
  _nrk_reserve[id].error = (void *) errhandler;
    3cc2:	f2 8a       	std	Z+18, r15	; 0x12
    3cc4:	e1 8a       	std	Z+17, r14	; 0x11

  return NRK_OK;
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	01 c0       	rjmp	.+2      	; 0x3ccc <nrk_reserve_set+0xc4>
                        void *errhandler)
{
  nrk_time_t tmp_time;

  if (id >= NRK_MAX_RESERVES)
    return NRK_ERROR;
    3cca:	8f ef       	ldi	r24, 0xFF	; 255
  _nrk_reserve[id].set_time =
    _nrk_reserve[id].cur_time + _nrk_reserve[id].period_ticks;
  _nrk_reserve[id].error = (void *) errhandler;

  return NRK_OK;
}
    3ccc:	28 96       	adiw	r28, 0x08	; 8
    3cce:	0f b6       	in	r0, 0x3f	; 63
    3cd0:	f8 94       	cli
    3cd2:	de bf       	out	0x3e, r29	; 62
    3cd4:	0f be       	out	0x3f, r0	; 63
    3cd6:	cd bf       	out	0x3d, r28	; 61
    3cd8:	df 91       	pop	r29
    3cda:	cf 91       	pop	r28
    3cdc:	1f 91       	pop	r17
    3cde:	0f 91       	pop	r16
    3ce0:	ff 90       	pop	r15
    3ce2:	ef 90       	pop	r14
    3ce4:	df 90       	pop	r13
    3ce6:	cf 90       	pop	r12
    3ce8:	bf 90       	pop	r11
    3cea:	af 90       	pop	r10
    3cec:	9f 90       	pop	r9
    3cee:	8f 90       	pop	r8
    3cf0:	08 95       	ret

00003cf2 <nrk_spin_wait_us>:
	...
    3d0a:	01 97       	sbiw	r24, 0x01	; 1
    3d0c:	91 f7       	brne	.-28     	; 0x3cf2 <nrk_spin_wait_us>
    3d0e:	08 95       	ret

00003d10 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    3d10:	10 92 21 01 	sts	0x0121, r1
    3d14:	08 95       	ret

00003d16 <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    3d16:	89 e0       	ldi	r24, 0x09	; 9
    3d18:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    3d1c:	8d e8       	ldi	r24, 0x8D	; 141
    3d1e:	9c e3       	ldi	r25, 0x3C	; 60
    3d20:	90 93 29 01 	sts	0x0129, r25
    3d24:	80 93 28 01 	sts	0x0128, r24
    3d28:	08 95       	ret

00003d2a <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3d2a:	10 92 25 01 	sts	0x0125, r1
    3d2e:	10 92 24 01 	sts	0x0124, r1
    3d32:	08 95       	ret

00003d34 <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    3d34:	cf 93       	push	r28
    3d36:	df 93       	push	r29
    3d38:	00 d0       	rcall	.+0      	; 0x3d3a <_nrk_precision_os_timer_get+0x6>
    3d3a:	cd b7       	in	r28, 0x3d	; 61
    3d3c:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    3d3e:	80 91 24 01 	lds	r24, 0x0124
    3d42:	90 91 25 01 	lds	r25, 0x0125
    3d46:	9a 83       	std	Y+2, r25	; 0x02
    3d48:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    3d4a:	89 81       	ldd	r24, Y+1	; 0x01
    3d4c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3d4e:	0f 90       	pop	r0
    3d50:	0f 90       	pop	r0
    3d52:	df 91       	pop	r29
    3d54:	cf 91       	pop	r28
    3d56:	08 95       	ret

00003d58 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    3d58:	10 92 81 00 	sts	0x0081, r1
    3d5c:	08 95       	ret

00003d5e <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    3d5e:	81 e0       	ldi	r24, 0x01	; 1
    3d60:	80 93 81 00 	sts	0x0081, r24
    3d64:	08 95       	ret

00003d66 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3d66:	83 b5       	in	r24, 0x23	; 35
    3d68:	81 60       	ori	r24, 0x01	; 1
    3d6a:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    3d6c:	10 92 85 00 	sts	0x0085, r1
    3d70:	10 92 84 00 	sts	0x0084, r1
    3d74:	08 95       	ret

00003d76 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    3d76:	cf 93       	push	r28
    3d78:	df 93       	push	r29
    3d7a:	00 d0       	rcall	.+0      	; 0x3d7c <_nrk_high_speed_timer_get+0x6>
    3d7c:	cd b7       	in	r28, 0x3d	; 61
    3d7e:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    3d80:	80 91 84 00 	lds	r24, 0x0084
    3d84:	90 91 85 00 	lds	r25, 0x0085
    3d88:	9a 83       	std	Y+2, r25	; 0x02
    3d8a:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    3d8c:	89 81       	ldd	r24, Y+1	; 0x01
    3d8e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3d90:	0f 90       	pop	r0
    3d92:	0f 90       	pop	r0
    3d94:	df 91       	pop	r29
    3d96:	cf 91       	pop	r28
    3d98:	08 95       	ret

00003d9a <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    3d9a:	cf 92       	push	r12
    3d9c:	df 92       	push	r13
    3d9e:	ef 92       	push	r14
    3da0:	ff 92       	push	r15
    3da2:	cf 93       	push	r28
    3da4:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    3da6:	ec 01       	movw	r28, r24
    3da8:	cc 0f       	add	r28, r28
    3daa:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    3dac:	c9 37       	cpi	r28, 0x79	; 121
    3dae:	8f ef       	ldi	r24, 0xFF	; 255
    3db0:	d8 07       	cpc	r29, r24
    3db2:	10 f0       	brcs	.+4      	; 0x3db8 <nrk_high_speed_timer_wait+0x1e>
    3db4:	c0 e0       	ldi	r28, 0x00	; 0
    3db6:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    3db8:	6b 01       	movw	r12, r22
    3dba:	e1 2c       	mov	r14, r1
    3dbc:	f1 2c       	mov	r15, r1
    3dbe:	cc 0e       	add	r12, r28
    3dc0:	dd 1e       	adc	r13, r29
    3dc2:	e1 1c       	adc	r14, r1
    3dc4:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	c8 16       	cp	r12, r24
    3dca:	d1 04       	cpc	r13, r1
    3dcc:	e8 06       	cpc	r14, r24
    3dce:	f1 04       	cpc	r15, r1
    3dd0:	40 f0       	brcs	.+16     	; 0x3de2 <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	e8 1a       	sub	r14, r24
    3dd6:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    3dd8:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <_nrk_high_speed_timer_get>
    3ddc:	c8 17       	cp	r28, r24
    3dde:	d9 07       	cpc	r29, r25
    3de0:	d8 f3       	brcs	.-10     	; 0x3dd8 <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    3de2:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <_nrk_high_speed_timer_get>
    3de6:	8c 15       	cp	r24, r12
    3de8:	9d 05       	cpc	r25, r13
    3dea:	d8 f3       	brcs	.-10     	; 0x3de2 <nrk_high_speed_timer_wait+0x48>
}
    3dec:	df 91       	pop	r29
    3dee:	cf 91       	pop	r28
    3df0:	ff 90       	pop	r15
    3df2:	ef 90       	pop	r14
    3df4:	df 90       	pop	r13
    3df6:	cf 90       	pop	r12
    3df8:	08 95       	ret

00003dfa <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    3dfa:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    3dfe:	e0 e7       	ldi	r30, 0x70	; 112
    3e00:	f0 e0       	ldi	r31, 0x00	; 0
    3e02:	80 81       	ld	r24, Z
    3e04:	8d 7f       	andi	r24, 0xFD	; 253
    3e06:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    3e08:	80 81       	ld	r24, Z
    3e0a:	8e 7f       	andi	r24, 0xFE	; 254
    3e0c:	80 83       	st	Z, r24
    3e0e:	08 95       	ret

00003e10 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    3e10:	80 93 b2 00 	sts	0x00B2, r24
    3e14:	08 95       	ret

00003e16 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    3e16:	e0 e7       	ldi	r30, 0x70	; 112
    3e18:	f0 e0       	ldi	r31, 0x00	; 0
    3e1a:	80 81       	ld	r24, Z
    3e1c:	83 60       	ori	r24, 0x03	; 3
    3e1e:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    3e20:	83 e0       	ldi	r24, 0x03	; 3
    3e22:	80 93 b1 00 	sts	0x00B1, r24
    3e26:	08 95       	ret

00003e28 <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    3e28:	83 b5       	in	r24, 0x23	; 35
    3e2a:	82 60       	ori	r24, 0x02	; 2
    3e2c:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    3e2e:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    3e32:	10 92 e7 03 	sts	0x03E7, r1
    _nrk_prev_timer_val=0;
    3e36:	10 92 53 04 	sts	0x0453, r1
    3e3a:	08 95       	ret

00003e3c <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    3e3c:	cf 93       	push	r28
    3e3e:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    3e40:	8e ef       	ldi	r24, 0xFE	; 254
    3e42:	80 93 53 04 	sts	0x0453, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    3e46:	80 e2       	ldi	r24, 0x20	; 32
    3e48:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    3e4c:	80 91 53 04 	lds	r24, 0x0453
    3e50:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    3e54:	83 e0       	ldi	r24, 0x03	; 3
    3e56:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    3e58:	92 e0       	ldi	r25, 0x02	; 2
    3e5a:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    3e5e:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    3e62:	93 b5       	in	r25, 0x23	; 35
    3e64:	92 60       	ori	r25, 0x02	; 2
    3e66:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    3e68:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    3e6a:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    3e6c:	83 b5       	in	r24, 0x23	; 35
    3e6e:	82 60       	ori	r24, 0x02	; 2
    3e70:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    3e72:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    3e7c:	10 92 85 00 	sts	0x0085, r1
    3e80:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3e84:	83 b5       	in	r24, 0x23	; 35
    3e86:	82 60       	ori	r24, 0x02	; 2
    3e88:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3e8a:	83 b5       	in	r24, 0x23	; 35
    3e8c:	81 60       	ori	r24, 0x01	; 1
    3e8e:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    3e90:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    3e94:	c4 e2       	ldi	r28, 0x24	; 36
    3e96:	d1 e0       	ldi	r29, 0x01	; 1
    3e98:	19 82       	std	Y+1, r1	; 0x01
    3e9a:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3e9c:	83 b5       	in	r24, 0x23	; 35
    3e9e:	82 60       	ori	r24, 0x02	; 2
    3ea0:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3ea2:	83 b5       	in	r24, 0x23	; 35
    3ea4:	81 60       	ori	r24, 0x01	; 1
    3ea6:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    3ea8:	0e 94 14 1f 	call	0x3e28	; 0x3e28 <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3eac:	19 82       	std	Y+1, r1	; 0x01
    3eae:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    3eb0:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    3eb4:	0e 94 8b 1e 	call	0x3d16	; 0x3d16 <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    3eb8:	10 92 e7 03 	sts	0x03E7, r1
}
    3ebc:	df 91       	pop	r29
    3ebe:	cf 91       	pop	r28
    3ec0:	08 95       	ret

00003ec2 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    3ec2:	80 91 b3 00 	lds	r24, 0x00B3
}
    3ec6:	8f 5f       	subi	r24, 0xFF	; 255
    3ec8:	08 95       	ret

00003eca <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    3eca:	81 50       	subi	r24, 0x01	; 1
    3ecc:	80 93 b3 00 	sts	0x00B3, r24
    3ed0:	08 95       	ret

00003ed2 <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3ed2:	81 11       	cpse	r24, r1
    3ed4:	02 c0       	rjmp	.+4      	; 0x3eda <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    3ed6:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    3eda:	8f ef       	ldi	r24, 0xFF	; 255
    3edc:	08 95       	ret

00003ede <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3ede:	81 11       	cpse	r24, r1
    3ee0:	06 c0       	rjmp	.+12     	; 0x3eee <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    3ee2:	10 92 95 00 	sts	0x0095, r1
    3ee6:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	08 95       	ret
	}
return NRK_ERROR;
    3eee:	8f ef       	ldi	r24, 0xFF	; 255
}
    3ef0:	08 95       	ret

00003ef2 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3ef2:	81 11       	cpse	r24, r1
    3ef4:	05 c0       	rjmp	.+10     	; 0x3f00 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    3ef6:	80 91 94 00 	lds	r24, 0x0094
    3efa:	90 91 95 00 	lds	r25, 0x0095
    3efe:	08 95       	ret
	}
return 0;
    3f00:	80 e0       	ldi	r24, 0x00	; 0
    3f02:	90 e0       	ldi	r25, 0x00	; 0

}
    3f04:	08 95       	ret

00003f06 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    3f06:	81 11       	cpse	r24, r1
    3f08:	05 c0       	rjmp	.+10     	; 0x3f14 <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    3f0a:	82 e0       	ldi	r24, 0x02	; 2
    3f0c:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    3f10:	81 e0       	ldi	r24, 0x01	; 1
    3f12:	08 95       	ret
	}
return NRK_ERROR;
    3f14:	8f ef       	ldi	r24, 0xFF	; 255
}
    3f16:	08 95       	ret

00003f18 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    3f18:	81 11       	cpse	r24, r1
    3f1a:	35 c0       	rjmp	.+106    	; 0x3f86 <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    3f1c:	cb 01       	movw	r24, r22
    3f1e:	01 97       	sbiw	r24, 0x01	; 1
    3f20:	05 97       	sbiw	r24, 0x05	; 5
    3f22:	10 f4       	brcc	.+4      	; 0x3f28 <nrk_timer_int_configure+0x10>
    3f24:	60 93 52 04 	sts	0x0452, r22
	TCCR3A = 0;  
    3f28:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    3f2c:	88 e0       	ldi	r24, 0x08	; 8
    3f2e:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    3f32:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    3f36:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    3f3a:	30 93 e5 03 	sts	0x03E5, r19
    3f3e:	20 93 e4 03 	sts	0x03E4, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    3f42:	80 91 52 04 	lds	r24, 0x0452
    3f46:	81 30       	cpi	r24, 0x01	; 1
    3f48:	21 f4       	brne	.+8      	; 0x3f52 <nrk_timer_int_configure+0x3a>
    3f4a:	80 91 91 00 	lds	r24, 0x0091
    3f4e:	81 60       	ori	r24, 0x01	; 1
    3f50:	11 c0       	rjmp	.+34     	; 0x3f74 <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    3f52:	82 30       	cpi	r24, 0x02	; 2
    3f54:	21 f4       	brne	.+8      	; 0x3f5e <nrk_timer_int_configure+0x46>
    3f56:	80 91 91 00 	lds	r24, 0x0091
    3f5a:	82 60       	ori	r24, 0x02	; 2
    3f5c:	0b c0       	rjmp	.+22     	; 0x3f74 <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    3f5e:	83 30       	cpi	r24, 0x03	; 3
    3f60:	21 f4       	brne	.+8      	; 0x3f6a <nrk_timer_int_configure+0x52>
    3f62:	80 91 91 00 	lds	r24, 0x0091
    3f66:	83 60       	ori	r24, 0x03	; 3
    3f68:	05 c0       	rjmp	.+10     	; 0x3f74 <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    3f6a:	84 30       	cpi	r24, 0x04	; 4
    3f6c:	31 f4       	brne	.+12     	; 0x3f7a <nrk_timer_int_configure+0x62>
    3f6e:	80 91 91 00 	lds	r24, 0x0091
    3f72:	84 60       	ori	r24, 0x04	; 4
    3f74:	80 93 91 00 	sts	0x0091, r24
    3f78:	08 c0       	rjmp	.+16     	; 0x3f8a <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    3f7a:	85 30       	cpi	r24, 0x05	; 5
    3f7c:	31 f4       	brne	.+12     	; 0x3f8a <nrk_timer_int_configure+0x72>
    3f7e:	80 91 91 00 	lds	r24, 0x0091
    3f82:	85 60       	ori	r24, 0x05	; 5
    3f84:	f7 cf       	rjmp	.-18     	; 0x3f74 <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    3f86:	8f ef       	ldi	r24, 0xFF	; 255
    3f88:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    3f8a:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    3f8c:	08 95       	ret

00003f8e <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    3f8e:	80 91 b2 00 	lds	r24, 0x00B2
}
    3f92:	08 95       	ret

00003f94 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    3f94:	1f 92       	push	r1
    3f96:	0f 92       	push	r0
    3f98:	0f b6       	in	r0, 0x3f	; 63
    3f9a:	0f 92       	push	r0
    3f9c:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3f9e:	60 e0       	ldi	r22, 0x00	; 0
    3fa0:	8a e0       	ldi	r24, 0x0A	; 10
    3fa2:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kernel_error_add>
	while(1);
    3fa6:	ff cf       	rjmp	.-2      	; 0x3fa6 <__vector_default+0x12>

00003fa8 <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    3fa8:	0f 92       	push	r0
    3faa:	0f b6       	in	r0, 0x3f	; 63
    3fac:	0f 92       	push	r0
    3fae:	1f 92       	push	r1
    3fb0:	2f 92       	push	r2
    3fb2:	3f 92       	push	r3
    3fb4:	4f 92       	push	r4
    3fb6:	5f 92       	push	r5
    3fb8:	6f 92       	push	r6
    3fba:	7f 92       	push	r7
    3fbc:	8f 92       	push	r8
    3fbe:	9f 92       	push	r9
    3fc0:	af 92       	push	r10
    3fc2:	bf 92       	push	r11
    3fc4:	cf 92       	push	r12
    3fc6:	df 92       	push	r13
    3fc8:	ef 92       	push	r14
    3fca:	ff 92       	push	r15
    3fcc:	0f 93       	push	r16
    3fce:	1f 93       	push	r17
    3fd0:	2f 93       	push	r18
    3fd2:	3f 93       	push	r19
    3fd4:	4f 93       	push	r20
    3fd6:	5f 93       	push	r21
    3fd8:	6f 93       	push	r22
    3fda:	7f 93       	push	r23
    3fdc:	8f 93       	push	r24
    3fde:	9f 93       	push	r25
    3fe0:	af 93       	push	r26
    3fe2:	bf 93       	push	r27
    3fe4:	cf 93       	push	r28
    3fe6:	df 93       	push	r29
    3fe8:	ef 93       	push	r30
    3fea:	ff 93       	push	r31
    3fec:	a0 91 3f 06 	lds	r26, 0x063F
    3ff0:	b0 91 40 06 	lds	r27, 0x0640
    3ff4:	0d b6       	in	r0, 0x3d	; 61
    3ff6:	0d 92       	st	X+, r0
    3ff8:	0e b6       	in	r0, 0x3e	; 62
    3ffa:	0d 92       	st	X+, r0
    3ffc:	1f 92       	push	r1
    3ffe:	a0 91 ec 03 	lds	r26, 0x03EC
    4002:	b0 91 ed 03 	lds	r27, 0x03ED
    4006:	1e 90       	ld	r1, -X
    4008:	be bf       	out	0x3e, r27	; 62
    400a:	ad bf       	out	0x3d, r26	; 61
    400c:	08 95       	ret

0000400e <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    400e:	1f 92       	push	r1
    4010:	0f 92       	push	r0
    4012:	0f b6       	in	r0, 0x3f	; 63
    4014:	0f 92       	push	r0
    4016:	11 24       	eor	r1, r1
    4018:	0b b6       	in	r0, 0x3b	; 59
    401a:	0f 92       	push	r0
    401c:	2f 93       	push	r18
    401e:	3f 93       	push	r19
    4020:	4f 93       	push	r20
    4022:	5f 93       	push	r21
    4024:	6f 93       	push	r22
    4026:	7f 93       	push	r23
    4028:	8f 93       	push	r24
    402a:	9f 93       	push	r25
    402c:	af 93       	push	r26
    402e:	bf 93       	push	r27
    4030:	ef 93       	push	r30
    4032:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    4034:	e0 91 e4 03 	lds	r30, 0x03E4
    4038:	f0 91 e5 03 	lds	r31, 0x03E5
    403c:	30 97       	sbiw	r30, 0x00	; 0
    403e:	11 f0       	breq	.+4      	; 0x4044 <__vector_32+0x36>
    4040:	09 95       	icall
    4042:	04 c0       	rjmp	.+8      	; 0x404c <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4044:	60 e0       	ldi	r22, 0x00	; 0
    4046:	8a e0       	ldi	r24, 0x0A	; 10
    4048:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kernel_error_add>
	return;  	
}
    404c:	ff 91       	pop	r31
    404e:	ef 91       	pop	r30
    4050:	bf 91       	pop	r27
    4052:	af 91       	pop	r26
    4054:	9f 91       	pop	r25
    4056:	8f 91       	pop	r24
    4058:	7f 91       	pop	r23
    405a:	6f 91       	pop	r22
    405c:	5f 91       	pop	r21
    405e:	4f 91       	pop	r20
    4060:	3f 91       	pop	r19
    4062:	2f 91       	pop	r18
    4064:	0f 90       	pop	r0
    4066:	0b be       	out	0x3b, r0	; 59
    4068:	0f 90       	pop	r0
    406a:	0f be       	out	0x3f, r0	; 63
    406c:	0f 90       	pop	r0
    406e:	1f 90       	pop	r1
    4070:	18 95       	reti

00004072 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    4072:	1f 92       	push	r1
    4074:	0f 92       	push	r0
    4076:	0f b6       	in	r0, 0x3f	; 63
    4078:	0f 92       	push	r0
    407a:	11 24       	eor	r1, r1

	return;  	
} 
    407c:	0f 90       	pop	r0
    407e:	0f be       	out	0x3f, r0	; 63
    4080:	0f 90       	pop	r0
    4082:	1f 90       	pop	r1
    4084:	18 95       	reti

00004086 <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    4086:	04 b6       	in	r0, 0x34	; 52
    4088:	03 fe       	sbrs	r0, 3
    408a:	02 c0       	rjmp	.+4      	; 0x4090 <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    408c:	80 e1       	ldi	r24, 0x10	; 16
    408e:	01 c0       	rjmp	.+2      	; 0x4092 <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    4090:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    4092:	04 b6       	in	r0, 0x34	; 52
    4094:	02 fe       	sbrs	r0, 2
    4096:	06 c0       	rjmp	.+12     	; 0x40a4 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    4098:	94 b7       	in	r25, 0x34	; 52
    409a:	9b 7f       	andi	r25, 0xFB	; 251
    409c:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    409e:	04 b6       	in	r0, 0x34	; 52
    40a0:	00 fe       	sbrs	r0, 0
		error|=0x04;
    40a2:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    40a4:	04 b6       	in	r0, 0x34	; 52
    40a6:	01 fe       	sbrs	r0, 1
    40a8:	05 c0       	rjmp	.+10     	; 0x40b4 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    40aa:	94 b7       	in	r25, 0x34	; 52
    40ac:	9d 7f       	andi	r25, 0xFD	; 253
    40ae:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    40b0:	82 60       	ori	r24, 0x02	; 2
    40b2:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    40b4:	81 11       	cpse	r24, r1
    40b6:	0c c0       	rjmp	.+24     	; 0x40d0 <_nrk_startup_error+0x4a>


// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    40b8:	04 b6       	in	r0, 0x34	; 52
    40ba:	00 fe       	sbrs	r0, 0
    40bc:	04 c0       	rjmp	.+8      	; 0x40c6 <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    40be:	94 b7       	in	r25, 0x34	; 52
    40c0:	9e 7f       	andi	r25, 0xFE	; 254
    40c2:	94 bf       	out	0x34, r25	; 52
    40c4:	01 c0       	rjmp	.+2      	; 0x40c8 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    40c6:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    40c8:	90 91 b0 00 	lds	r25, 0x00B0
    40cc:	91 11       	cpse	r25, r1
    40ce:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    40d0:	08 95       	ret

000040d2 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    40d2:	81 11       	cpse	r24, r1
    40d4:	02 c0       	rjmp	.+4      	; 0x40da <nrk_ext_int_enable+0x8>
    40d6:	e8 9a       	sbi	0x1d, 0	; 29
    40d8:	39 c0       	rjmp	.+114    	; 0x414c <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    40da:	81 30       	cpi	r24, 0x01	; 1
    40dc:	11 f4       	brne	.+4      	; 0x40e2 <nrk_ext_int_enable+0x10>
    40de:	e9 9a       	sbi	0x1d, 1	; 29
    40e0:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    40e2:	82 30       	cpi	r24, 0x02	; 2
    40e4:	11 f4       	brne	.+4      	; 0x40ea <nrk_ext_int_enable+0x18>
    40e6:	ea 9a       	sbi	0x1d, 2	; 29
    40e8:	31 c0       	rjmp	.+98     	; 0x414c <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    40ea:	83 30       	cpi	r24, 0x03	; 3
    40ec:	21 f4       	brne	.+8      	; 0x40f6 <nrk_ext_int_enable+0x24>
    40ee:	80 91 6b 00 	lds	r24, 0x006B
    40f2:	81 60       	ori	r24, 0x01	; 1
    40f4:	29 c0       	rjmp	.+82     	; 0x4148 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    40f6:	84 30       	cpi	r24, 0x04	; 4
    40f8:	21 f4       	brne	.+8      	; 0x4102 <nrk_ext_int_enable+0x30>
    40fa:	80 91 6b 00 	lds	r24, 0x006B
    40fe:	82 60       	ori	r24, 0x02	; 2
    4100:	23 c0       	rjmp	.+70     	; 0x4148 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    4102:	85 30       	cpi	r24, 0x05	; 5
    4104:	21 f4       	brne	.+8      	; 0x410e <nrk_ext_int_enable+0x3c>
    4106:	80 91 6b 00 	lds	r24, 0x006B
    410a:	84 60       	ori	r24, 0x04	; 4
    410c:	1d c0       	rjmp	.+58     	; 0x4148 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    410e:	86 30       	cpi	r24, 0x06	; 6
    4110:	21 f4       	brne	.+8      	; 0x411a <nrk_ext_int_enable+0x48>
    4112:	80 91 6b 00 	lds	r24, 0x006B
    4116:	88 60       	ori	r24, 0x08	; 8
    4118:	17 c0       	rjmp	.+46     	; 0x4148 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    411a:	87 30       	cpi	r24, 0x07	; 7
    411c:	21 f4       	brne	.+8      	; 0x4126 <nrk_ext_int_enable+0x54>
    411e:	80 91 6b 00 	lds	r24, 0x006B
    4122:	80 61       	ori	r24, 0x10	; 16
    4124:	11 c0       	rjmp	.+34     	; 0x4148 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    4126:	88 30       	cpi	r24, 0x08	; 8
    4128:	21 f4       	brne	.+8      	; 0x4132 <nrk_ext_int_enable+0x60>
    412a:	80 91 6b 00 	lds	r24, 0x006B
    412e:	80 62       	ori	r24, 0x20	; 32
    4130:	0b c0       	rjmp	.+22     	; 0x4148 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    4132:	89 30       	cpi	r24, 0x09	; 9
    4134:	21 f4       	brne	.+8      	; 0x413e <nrk_ext_int_enable+0x6c>
    4136:	80 91 6b 00 	lds	r24, 0x006B
    413a:	80 64       	ori	r24, 0x40	; 64
    413c:	05 c0       	rjmp	.+10     	; 0x4148 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    413e:	8a 30       	cpi	r24, 0x0A	; 10
    4140:	39 f4       	brne	.+14     	; 0x4150 <nrk_ext_int_enable+0x7e>
    4142:	80 91 6b 00 	lds	r24, 0x006B
    4146:	80 68       	ori	r24, 0x80	; 128
    4148:	80 93 6b 00 	sts	0x006B, r24
    414c:	81 e0       	ldi	r24, 0x01	; 1
    414e:	08 95       	ret
return NRK_ERROR;
    4150:	8f ef       	ldi	r24, 0xFF	; 255
}
    4152:	08 95       	ret

00004154 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    4154:	81 11       	cpse	r24, r1
    4156:	02 c0       	rjmp	.+4      	; 0x415c <nrk_ext_int_disable+0x8>
    4158:	e8 98       	cbi	0x1d, 0	; 29
    415a:	39 c0       	rjmp	.+114    	; 0x41ce <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    415c:	81 30       	cpi	r24, 0x01	; 1
    415e:	11 f4       	brne	.+4      	; 0x4164 <nrk_ext_int_disable+0x10>
    4160:	e9 98       	cbi	0x1d, 1	; 29
    4162:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4164:	82 30       	cpi	r24, 0x02	; 2
    4166:	11 f4       	brne	.+4      	; 0x416c <nrk_ext_int_disable+0x18>
    4168:	e9 98       	cbi	0x1d, 1	; 29
    416a:	31 c0       	rjmp	.+98     	; 0x41ce <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    416c:	83 30       	cpi	r24, 0x03	; 3
    416e:	21 f4       	brne	.+8      	; 0x4178 <nrk_ext_int_disable+0x24>
    4170:	80 91 6b 00 	lds	r24, 0x006B
    4174:	8e 7f       	andi	r24, 0xFE	; 254
    4176:	29 c0       	rjmp	.+82     	; 0x41ca <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    4178:	84 30       	cpi	r24, 0x04	; 4
    417a:	21 f4       	brne	.+8      	; 0x4184 <nrk_ext_int_disable+0x30>
    417c:	80 91 6b 00 	lds	r24, 0x006B
    4180:	8d 7f       	andi	r24, 0xFD	; 253
    4182:	23 c0       	rjmp	.+70     	; 0x41ca <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    4184:	85 30       	cpi	r24, 0x05	; 5
    4186:	21 f4       	brne	.+8      	; 0x4190 <nrk_ext_int_disable+0x3c>
    4188:	80 91 6b 00 	lds	r24, 0x006B
    418c:	8b 7f       	andi	r24, 0xFB	; 251
    418e:	1d c0       	rjmp	.+58     	; 0x41ca <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    4190:	86 30       	cpi	r24, 0x06	; 6
    4192:	21 f4       	brne	.+8      	; 0x419c <nrk_ext_int_disable+0x48>
    4194:	80 91 6b 00 	lds	r24, 0x006B
    4198:	87 7f       	andi	r24, 0xF7	; 247
    419a:	17 c0       	rjmp	.+46     	; 0x41ca <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    419c:	87 30       	cpi	r24, 0x07	; 7
    419e:	21 f4       	brne	.+8      	; 0x41a8 <nrk_ext_int_disable+0x54>
    41a0:	80 91 6b 00 	lds	r24, 0x006B
    41a4:	8f 7e       	andi	r24, 0xEF	; 239
    41a6:	11 c0       	rjmp	.+34     	; 0x41ca <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    41a8:	88 30       	cpi	r24, 0x08	; 8
    41aa:	21 f4       	brne	.+8      	; 0x41b4 <nrk_ext_int_disable+0x60>
    41ac:	80 91 6b 00 	lds	r24, 0x006B
    41b0:	8f 7d       	andi	r24, 0xDF	; 223
    41b2:	0b c0       	rjmp	.+22     	; 0x41ca <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    41b4:	89 30       	cpi	r24, 0x09	; 9
    41b6:	21 f4       	brne	.+8      	; 0x41c0 <nrk_ext_int_disable+0x6c>
    41b8:	80 91 6b 00 	lds	r24, 0x006B
    41bc:	8f 7b       	andi	r24, 0xBF	; 191
    41be:	05 c0       	rjmp	.+10     	; 0x41ca <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    41c0:	8a 30       	cpi	r24, 0x0A	; 10
    41c2:	39 f4       	brne	.+14     	; 0x41d2 <nrk_ext_int_disable+0x7e>
    41c4:	80 91 6b 00 	lds	r24, 0x006B
    41c8:	8f 77       	andi	r24, 0x7F	; 127
    41ca:	80 93 6b 00 	sts	0x006B, r24
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	08 95       	ret
return NRK_ERROR;
    41d2:	8f ef       	ldi	r24, 0xFF	; 255
}
    41d4:	08 95       	ret

000041d6 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    41d6:	81 11       	cpse	r24, r1
    41d8:	26 c0       	rjmp	.+76     	; 0x4226 <__stack+0x27>
	{
	ext_int0_callback=callback_func;
    41da:	50 93 c8 06 	sts	0x06C8, r21
    41de:	40 93 c7 06 	sts	0x06C7, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    41e2:	61 11       	cpse	r22, r1
    41e4:	04 c0       	rjmp	.+8      	; 0x41ee <nrk_ext_int_configure+0x18>
    41e6:	80 91 69 00 	lds	r24, 0x0069
    41ea:	8c 7f       	andi	r24, 0xFC	; 252
    41ec:	3d c0       	rjmp	.+122    	; 0x4268 <__stack+0x69>
	if(mode==NRK_LEVEL_TRIGGER) 
    41ee:	61 30       	cpi	r22, 0x01	; 1
    41f0:	49 f4       	brne	.+18     	; 0x4204 <__stack+0x5>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    41f2:	80 91 69 00 	lds	r24, 0x0069
    41f6:	8d 7f       	andi	r24, 0xFD	; 253
    41f8:	80 93 69 00 	sts	0x0069, r24
    41fc:	80 91 69 00 	lds	r24, 0x0069
    4200:	81 60       	ori	r24, 0x01	; 1
    4202:	32 c0       	rjmp	.+100    	; 0x4268 <__stack+0x69>
	if(mode==NRK_FALLING_EDGE) 
    4204:	62 30       	cpi	r22, 0x02	; 2
    4206:	49 f4       	brne	.+18     	; 0x421a <__stack+0x1b>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    4208:	80 91 69 00 	lds	r24, 0x0069
    420c:	82 60       	ori	r24, 0x02	; 2
    420e:	80 93 69 00 	sts	0x0069, r24
    4212:	80 91 69 00 	lds	r24, 0x0069
    4216:	8e 7f       	andi	r24, 0xFE	; 254
    4218:	27 c0       	rjmp	.+78     	; 0x4268 <__stack+0x69>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    421a:	63 30       	cpi	r22, 0x03	; 3
    421c:	39 f5       	brne	.+78     	; 0x426c <__stack+0x6d>
    421e:	80 91 69 00 	lds	r24, 0x0069
    4222:	83 60       	ori	r24, 0x03	; 3
    4224:	21 c0       	rjmp	.+66     	; 0x4268 <__stack+0x69>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    4226:	81 30       	cpi	r24, 0x01	; 1
    4228:	49 f5       	brne	.+82     	; 0x427c <__stack+0x7d>
	{
	ext_int1_callback=callback_func;
    422a:	50 93 c6 06 	sts	0x06C6, r21
    422e:	40 93 c5 06 	sts	0x06C5, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    4232:	61 11       	cpse	r22, r1
    4234:	04 c0       	rjmp	.+8      	; 0x423e <__stack+0x3f>
    4236:	80 91 69 00 	lds	r24, 0x0069
    423a:	83 7f       	andi	r24, 0xF3	; 243
    423c:	15 c0       	rjmp	.+42     	; 0x4268 <__stack+0x69>
	if(mode==NRK_LEVEL_TRIGGER) 
    423e:	61 30       	cpi	r22, 0x01	; 1
    4240:	49 f4       	brne	.+18     	; 0x4254 <__stack+0x55>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    4242:	80 91 69 00 	lds	r24, 0x0069
    4246:	87 7f       	andi	r24, 0xF7	; 247
    4248:	80 93 69 00 	sts	0x0069, r24
    424c:	80 91 69 00 	lds	r24, 0x0069
    4250:	84 60       	ori	r24, 0x04	; 4
    4252:	0a c0       	rjmp	.+20     	; 0x4268 <__stack+0x69>
	if(mode==NRK_FALLING_EDGE) 
    4254:	62 30       	cpi	r22, 0x02	; 2
    4256:	61 f4       	brne	.+24     	; 0x4270 <__stack+0x71>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    4258:	80 91 69 00 	lds	r24, 0x0069
    425c:	88 60       	ori	r24, 0x08	; 8
    425e:	80 93 69 00 	sts	0x0069, r24
    4262:	80 91 69 00 	lds	r24, 0x0069
    4266:	8b 7f       	andi	r24, 0xFB	; 251
    4268:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    426c:	81 e0       	ldi	r24, 0x01	; 1
    426e:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    4270:	63 30       	cpi	r22, 0x03	; 3
    4272:	e1 f7       	brne	.-8      	; 0x426c <__stack+0x6d>
    4274:	80 91 69 00 	lds	r24, 0x0069
    4278:	8c 60       	ori	r24, 0x0C	; 12
    427a:	f6 cf       	rjmp	.-20     	; 0x4268 <__stack+0x69>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    427c:	82 30       	cpi	r24, 0x02	; 2
    427e:	31 f5       	brne	.+76     	; 0x42cc <__stack+0xcd>
	{
	ext_int2_callback=callback_func;
    4280:	50 93 ca 06 	sts	0x06CA, r21
    4284:	40 93 c9 06 	sts	0x06C9, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    4288:	61 11       	cpse	r22, r1
    428a:	04 c0       	rjmp	.+8      	; 0x4294 <__stack+0x95>
    428c:	80 91 69 00 	lds	r24, 0x0069
    4290:	8f 7c       	andi	r24, 0xCF	; 207
    4292:	ea cf       	rjmp	.-44     	; 0x4268 <__stack+0x69>
	if(mode==NRK_LEVEL_TRIGGER) 
    4294:	61 30       	cpi	r22, 0x01	; 1
    4296:	49 f4       	brne	.+18     	; 0x42aa <__stack+0xab>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    4298:	80 91 69 00 	lds	r24, 0x0069
    429c:	8f 7d       	andi	r24, 0xDF	; 223
    429e:	80 93 69 00 	sts	0x0069, r24
    42a2:	80 91 69 00 	lds	r24, 0x0069
    42a6:	80 61       	ori	r24, 0x10	; 16
    42a8:	df cf       	rjmp	.-66     	; 0x4268 <__stack+0x69>
	if(mode==NRK_FALLING_EDGE) 
    42aa:	62 30       	cpi	r22, 0x02	; 2
    42ac:	49 f4       	brne	.+18     	; 0x42c0 <__stack+0xc1>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    42ae:	80 91 69 00 	lds	r24, 0x0069
    42b2:	80 62       	ori	r24, 0x20	; 32
    42b4:	80 93 69 00 	sts	0x0069, r24
    42b8:	80 91 69 00 	lds	r24, 0x0069
    42bc:	8f 7e       	andi	r24, 0xEF	; 239
    42be:	d4 cf       	rjmp	.-88     	; 0x4268 <__stack+0x69>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    42c0:	63 30       	cpi	r22, 0x03	; 3
    42c2:	a1 f6       	brne	.-88     	; 0x426c <__stack+0x6d>
    42c4:	80 91 69 00 	lds	r24, 0x0069
    42c8:	80 63       	ori	r24, 0x30	; 48
    42ca:	ce cf       	rjmp	.-100    	; 0x4268 <__stack+0x69>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    42cc:	83 50       	subi	r24, 0x03	; 3
    42ce:	88 30       	cpi	r24, 0x08	; 8
    42d0:	50 f4       	brcc	.+20     	; 0x42e6 <__stack+0xe7>
	PCICR |= BM(PCIE0);	
    42d2:	80 91 68 00 	lds	r24, 0x0068
    42d6:	81 60       	ori	r24, 0x01	; 1
    42d8:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    42dc:	50 93 cc 06 	sts	0x06CC, r21
    42e0:	40 93 cb 06 	sts	0x06CB, r20
    42e4:	c3 cf       	rjmp	.-122    	; 0x426c <__stack+0x6d>
	return NRK_OK;
	}
return NRK_ERROR;
    42e6:	8f ef       	ldi	r24, 0xFF	; 255
}
    42e8:	08 95       	ret

000042ea <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    42ea:	1f 92       	push	r1
    42ec:	0f 92       	push	r0
    42ee:	0f b6       	in	r0, 0x3f	; 63
    42f0:	0f 92       	push	r0
    42f2:	11 24       	eor	r1, r1
    42f4:	0b b6       	in	r0, 0x3b	; 59
    42f6:	0f 92       	push	r0
    42f8:	2f 93       	push	r18
    42fa:	3f 93       	push	r19
    42fc:	4f 93       	push	r20
    42fe:	5f 93       	push	r21
    4300:	6f 93       	push	r22
    4302:	7f 93       	push	r23
    4304:	8f 93       	push	r24
    4306:	9f 93       	push	r25
    4308:	af 93       	push	r26
    430a:	bf 93       	push	r27
    430c:	ef 93       	push	r30
    430e:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    4310:	e0 91 cb 06 	lds	r30, 0x06CB
    4314:	f0 91 cc 06 	lds	r31, 0x06CC
    4318:	30 97       	sbiw	r30, 0x00	; 0
    431a:	11 f0       	breq	.+4      	; 0x4320 <__vector_9+0x36>
    431c:	09 95       	icall
    431e:	04 c0       	rjmp	.+8      	; 0x4328 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4320:	60 e0       	ldi	r22, 0x00	; 0
    4322:	8a e0       	ldi	r24, 0x0A	; 10
    4324:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kernel_error_add>
	return;  	
}
    4328:	ff 91       	pop	r31
    432a:	ef 91       	pop	r30
    432c:	bf 91       	pop	r27
    432e:	af 91       	pop	r26
    4330:	9f 91       	pop	r25
    4332:	8f 91       	pop	r24
    4334:	7f 91       	pop	r23
    4336:	6f 91       	pop	r22
    4338:	5f 91       	pop	r21
    433a:	4f 91       	pop	r20
    433c:	3f 91       	pop	r19
    433e:	2f 91       	pop	r18
    4340:	0f 90       	pop	r0
    4342:	0b be       	out	0x3b, r0	; 59
    4344:	0f 90       	pop	r0
    4346:	0f be       	out	0x3f, r0	; 63
    4348:	0f 90       	pop	r0
    434a:	1f 90       	pop	r1
    434c:	18 95       	reti

0000434e <__vector_1>:


SIGNAL(INT0_vect) {
    434e:	1f 92       	push	r1
    4350:	0f 92       	push	r0
    4352:	0f b6       	in	r0, 0x3f	; 63
    4354:	0f 92       	push	r0
    4356:	11 24       	eor	r1, r1
    4358:	0b b6       	in	r0, 0x3b	; 59
    435a:	0f 92       	push	r0
    435c:	2f 93       	push	r18
    435e:	3f 93       	push	r19
    4360:	4f 93       	push	r20
    4362:	5f 93       	push	r21
    4364:	6f 93       	push	r22
    4366:	7f 93       	push	r23
    4368:	8f 93       	push	r24
    436a:	9f 93       	push	r25
    436c:	af 93       	push	r26
    436e:	bf 93       	push	r27
    4370:	ef 93       	push	r30
    4372:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    4374:	e0 91 c7 06 	lds	r30, 0x06C7
    4378:	f0 91 c8 06 	lds	r31, 0x06C8
    437c:	30 97       	sbiw	r30, 0x00	; 0
    437e:	11 f0       	breq	.+4      	; 0x4384 <__vector_1+0x36>
    4380:	09 95       	icall
    4382:	04 c0       	rjmp	.+8      	; 0x438c <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4384:	60 e0       	ldi	r22, 0x00	; 0
    4386:	8a e0       	ldi	r24, 0x0A	; 10
    4388:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kernel_error_add>
	return;  	
}
    438c:	ff 91       	pop	r31
    438e:	ef 91       	pop	r30
    4390:	bf 91       	pop	r27
    4392:	af 91       	pop	r26
    4394:	9f 91       	pop	r25
    4396:	8f 91       	pop	r24
    4398:	7f 91       	pop	r23
    439a:	6f 91       	pop	r22
    439c:	5f 91       	pop	r21
    439e:	4f 91       	pop	r20
    43a0:	3f 91       	pop	r19
    43a2:	2f 91       	pop	r18
    43a4:	0f 90       	pop	r0
    43a6:	0b be       	out	0x3b, r0	; 59
    43a8:	0f 90       	pop	r0
    43aa:	0f be       	out	0x3f, r0	; 63
    43ac:	0f 90       	pop	r0
    43ae:	1f 90       	pop	r1
    43b0:	18 95       	reti

000043b2 <__vector_2>:

SIGNAL(INT1_vect) {
    43b2:	1f 92       	push	r1
    43b4:	0f 92       	push	r0
    43b6:	0f b6       	in	r0, 0x3f	; 63
    43b8:	0f 92       	push	r0
    43ba:	11 24       	eor	r1, r1
    43bc:	0b b6       	in	r0, 0x3b	; 59
    43be:	0f 92       	push	r0
    43c0:	2f 93       	push	r18
    43c2:	3f 93       	push	r19
    43c4:	4f 93       	push	r20
    43c6:	5f 93       	push	r21
    43c8:	6f 93       	push	r22
    43ca:	7f 93       	push	r23
    43cc:	8f 93       	push	r24
    43ce:	9f 93       	push	r25
    43d0:	af 93       	push	r26
    43d2:	bf 93       	push	r27
    43d4:	ef 93       	push	r30
    43d6:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    43d8:	e0 91 c5 06 	lds	r30, 0x06C5
    43dc:	f0 91 c6 06 	lds	r31, 0x06C6
    43e0:	30 97       	sbiw	r30, 0x00	; 0
    43e2:	11 f0       	breq	.+4      	; 0x43e8 <__vector_2+0x36>
    43e4:	09 95       	icall
    43e6:	04 c0       	rjmp	.+8      	; 0x43f0 <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    43e8:	60 e0       	ldi	r22, 0x00	; 0
    43ea:	8a e0       	ldi	r24, 0x0A	; 10
    43ec:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kernel_error_add>
	return;  	
}
    43f0:	ff 91       	pop	r31
    43f2:	ef 91       	pop	r30
    43f4:	bf 91       	pop	r27
    43f6:	af 91       	pop	r26
    43f8:	9f 91       	pop	r25
    43fa:	8f 91       	pop	r24
    43fc:	7f 91       	pop	r23
    43fe:	6f 91       	pop	r22
    4400:	5f 91       	pop	r21
    4402:	4f 91       	pop	r20
    4404:	3f 91       	pop	r19
    4406:	2f 91       	pop	r18
    4408:	0f 90       	pop	r0
    440a:	0b be       	out	0x3b, r0	; 59
    440c:	0f 90       	pop	r0
    440e:	0f be       	out	0x3f, r0	; 63
    4410:	0f 90       	pop	r0
    4412:	1f 90       	pop	r1
    4414:	18 95       	reti

00004416 <__vector_3>:

SIGNAL(INT2_vect) {
    4416:	1f 92       	push	r1
    4418:	0f 92       	push	r0
    441a:	0f b6       	in	r0, 0x3f	; 63
    441c:	0f 92       	push	r0
    441e:	11 24       	eor	r1, r1
    4420:	0b b6       	in	r0, 0x3b	; 59
    4422:	0f 92       	push	r0
    4424:	2f 93       	push	r18
    4426:	3f 93       	push	r19
    4428:	4f 93       	push	r20
    442a:	5f 93       	push	r21
    442c:	6f 93       	push	r22
    442e:	7f 93       	push	r23
    4430:	8f 93       	push	r24
    4432:	9f 93       	push	r25
    4434:	af 93       	push	r26
    4436:	bf 93       	push	r27
    4438:	ef 93       	push	r30
    443a:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    443c:	e0 91 c9 06 	lds	r30, 0x06C9
    4440:	f0 91 ca 06 	lds	r31, 0x06CA
    4444:	30 97       	sbiw	r30, 0x00	; 0
    4446:	11 f0       	breq	.+4      	; 0x444c <__vector_3+0x36>
    4448:	09 95       	icall
    444a:	04 c0       	rjmp	.+8      	; 0x4454 <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    444c:	60 e0       	ldi	r22, 0x00	; 0
    444e:	8a e0       	ldi	r24, 0x0A	; 10
    4450:	0e 94 73 10 	call	0x20e6	; 0x20e6 <nrk_kernel_error_add>
	return;  	
}
    4454:	ff 91       	pop	r31
    4456:	ef 91       	pop	r30
    4458:	bf 91       	pop	r27
    445a:	af 91       	pop	r26
    445c:	9f 91       	pop	r25
    445e:	8f 91       	pop	r24
    4460:	7f 91       	pop	r23
    4462:	6f 91       	pop	r22
    4464:	5f 91       	pop	r21
    4466:	4f 91       	pop	r20
    4468:	3f 91       	pop	r19
    446a:	2f 91       	pop	r18
    446c:	0f 90       	pop	r0
    446e:	0b be       	out	0x3b, r0	; 59
    4470:	0f 90       	pop	r0
    4472:	0f be       	out	0x3f, r0	; 63
    4474:	0f 90       	pop	r0
    4476:	1f 90       	pop	r1
    4478:	18 95       	reti

0000447a <nrk_watchdog_disable>:
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    447a:	a8 95       	wdr
#include <util/atomic.h>

void nrk_watchdog_disable()
{
nrk_watchdog_reset();
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    447c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    447e:	f8 94       	cli
{
	MCUSR &= ~(1<<WDRF);
    4480:	84 b7       	in	r24, 0x34	; 52
    4482:	87 7f       	andi	r24, 0xF7	; 247
    4484:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE) | (1<<WDE);
    4486:	e0 e6       	ldi	r30, 0x60	; 96
    4488:	f0 e0       	ldi	r31, 0x00	; 0
    448a:	80 81       	ld	r24, Z
    448c:	88 61       	ori	r24, 0x18	; 24
    448e:	80 83       	st	Z, r24
	WDTCSR = 0;
    4490:	10 82       	st	Z, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4492:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    4494:	08 95       	ret

00004496 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4496:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4498:	f8 94       	cli
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    449a:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
{
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    449c:	84 b7       	in	r24, 0x34	; 52
    449e:	87 7f       	andi	r24, 0xF7	; 247
    44a0:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    44a2:	e0 e6       	ldi	r30, 0x60	; 96
    44a4:	f0 e0       	ldi	r31, 0x00	; 0
    44a6:	80 81       	ld	r24, Z
    44a8:	88 61       	ori	r24, 0x18	; 24
    44aa:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    44ac:	8d e0       	ldi	r24, 0x0D	; 13
    44ae:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    44b0:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    44b2:	08 95       	ret

000044b4 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    44b4:	04 b6       	in	r0, 0x34	; 52
    44b6:	03 fe       	sbrs	r0, 3
    44b8:	02 c0       	rjmp	.+4      	; 0x44be <nrk_watchdog_check+0xa>
return NRK_ERROR;
    44ba:	8f ef       	ldi	r24, 0xFF	; 255
    44bc:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    44be:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    44c0:	08 95       	ret

000044c2 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    44c2:	a8 95       	wdr
    44c4:	08 95       	ret

000044c6 <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    44c6:	08 95       	ret

000044c8 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    44c8:	83 b7       	in	r24, 0x33	; 51
    44ca:	81 7f       	andi	r24, 0xF1	; 241
    44cc:	86 60       	ori	r24, 0x06	; 6
    44ce:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    44d0:	83 b7       	in	r24, 0x33	; 51
    44d2:	81 60       	ori	r24, 0x01	; 1
    44d4:	83 bf       	out	0x33, r24	; 51
    44d6:	88 95       	sleep
    44d8:	83 b7       	in	r24, 0x33	; 51
    44da:	8e 7f       	andi	r24, 0xFE	; 254
    44dc:	83 bf       	out	0x33, r24	; 51
    44de:	08 95       	ret

000044e0 <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    44e0:	83 b7       	in	r24, 0x33	; 51
    44e2:	81 7f       	andi	r24, 0xF1	; 241
    44e4:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    44e6:	83 b7       	in	r24, 0x33	; 51
    44e8:	81 60       	ori	r24, 0x01	; 1
    44ea:	83 bf       	out	0x33, r24	; 51
    44ec:	88 95       	sleep
    44ee:	83 b7       	in	r24, 0x33	; 51
    44f0:	8e 7f       	andi	r24, 0xFE	; 254
    44f2:	83 bf       	out	0x33, r24	; 51
    44f4:	08 95       	ret

000044f6 <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    44f6:	fc 01       	movw	r30, r24
    44f8:	76 83       	std	Z+6, r23	; 0x06
    44fa:	65 83       	std	Z+5, r22	; 0x05
    44fc:	08 95       	ret

000044fe <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    44fe:	ef 92       	push	r14
    4500:	ff 92       	push	r15
    4502:	0f 93       	push	r16
    4504:	1f 93       	push	r17
    4506:	cf 93       	push	r28
    4508:	df 93       	push	r29
    450a:	8c 01       	movw	r16, r24
    450c:	7b 01       	movw	r14, r22
    450e:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    4510:	40 32       	cpi	r20, 0x20	; 32
    4512:	51 05       	cpc	r21, r1
    4514:	18 f4       	brcc	.+6      	; 0x451c <nrk_task_set_stk+0x1e>
    4516:	81 e1       	ldi	r24, 0x11	; 17
    4518:	0e 94 65 10 	call	0x20ca	; 0x20ca <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    451c:	21 97       	sbiw	r28, 0x01	; 1
    451e:	ce 0d       	add	r28, r14
    4520:	df 1d       	adc	r29, r15
    4522:	f8 01       	movw	r30, r16
    4524:	d2 83       	std	Z+2, r29	; 0x02
    4526:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    4528:	f4 82       	std	Z+4, r15	; 0x04
    452a:	e3 82       	std	Z+3, r14	; 0x03

}
    452c:	df 91       	pop	r29
    452e:	cf 91       	pop	r28
    4530:	1f 91       	pop	r17
    4532:	0f 91       	pop	r16
    4534:	ff 90       	pop	r15
    4536:	ef 90       	pop	r14
    4538:	08 95       	ret

0000453a <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    453a:	25 e5       	ldi	r18, 0x55	; 85
    453c:	fa 01       	movw	r30, r20
    453e:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    4540:	fb 01       	movw	r30, r22
    4542:	32 97       	sbiw	r30, 0x02	; 2
    4544:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    4546:	31 96       	adiw	r30, 0x01	; 1
    4548:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    454a:	33 97       	sbiw	r30, 0x03	; 3
    454c:	11 82       	std	Z+1, r1	; 0x01
    454e:	10 82       	st	Z, r1
    *(--stk) = 0;       
    4550:	32 97       	sbiw	r30, 0x02	; 2
    4552:	11 82       	std	Z+1, r1	; 0x01
    4554:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    4556:	32 97       	sbiw	r30, 0x02	; 2
    4558:	11 82       	std	Z+1, r1	; 0x01
    455a:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    455c:	32 97       	sbiw	r30, 0x02	; 2
    455e:	11 82       	std	Z+1, r1	; 0x01
    4560:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    4562:	32 97       	sbiw	r30, 0x02	; 2
    4564:	11 82       	std	Z+1, r1	; 0x01
    4566:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    4568:	32 97       	sbiw	r30, 0x02	; 2
    456a:	11 82       	std	Z+1, r1	; 0x01
    456c:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    456e:	32 97       	sbiw	r30, 0x02	; 2
    4570:	11 82       	std	Z+1, r1	; 0x01
    4572:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4574:	32 97       	sbiw	r30, 0x02	; 2
    4576:	11 82       	std	Z+1, r1	; 0x01
    4578:	10 82       	st	Z, r1

    *(--stk) = 0; 
    457a:	32 97       	sbiw	r30, 0x02	; 2
    457c:	11 82       	std	Z+1, r1	; 0x01
    457e:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4580:	32 97       	sbiw	r30, 0x02	; 2
    4582:	11 82       	std	Z+1, r1	; 0x01
    4584:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4586:	32 97       	sbiw	r30, 0x02	; 2
    4588:	11 82       	std	Z+1, r1	; 0x01
    458a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    458c:	32 97       	sbiw	r30, 0x02	; 2
    458e:	11 82       	std	Z+1, r1	; 0x01
    4590:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4592:	32 97       	sbiw	r30, 0x02	; 2
    4594:	11 82       	std	Z+1, r1	; 0x01
    4596:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4598:	32 97       	sbiw	r30, 0x02	; 2
    459a:	11 82       	std	Z+1, r1	; 0x01
    459c:	10 82       	st	Z, r1
    *(--stk) = 0; 
    459e:	32 97       	sbiw	r30, 0x02	; 2
    45a0:	11 82       	std	Z+1, r1	; 0x01
    45a2:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45a4:	32 97       	sbiw	r30, 0x02	; 2
    45a6:	11 82       	std	Z+1, r1	; 0x01
    45a8:	10 82       	st	Z, r1
    *(--stk) = 0;
    45aa:	cb 01       	movw	r24, r22
    45ac:	84 97       	sbiw	r24, 0x24	; 36
    45ae:	fc 01       	movw	r30, r24
    45b0:	11 82       	std	Z+1, r1	; 0x01
    45b2:	10 82       	st	Z, r1


    return ((void *)stk);
}
    45b4:	08 95       	ret

000045b6 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    45b6:	85 e5       	ldi	r24, 0x55	; 85
    45b8:	80 93 fe 3f 	sts	0x3FFE, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    45bc:	ee ef       	ldi	r30, 0xFE	; 254
    45be:	f1 e4       	ldi	r31, 0x41	; 65
    45c0:	f0 93 ed 03 	sts	0x03ED, r31
    45c4:	e0 93 ec 03 	sts	0x03EC, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    45c8:	83 e8       	ldi	r24, 0x83	; 131
    45ca:	9e e0       	ldi	r25, 0x0E	; 14
    45cc:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    45ce:	80 93 ff 41 	sts	0x41FF, r24
    45d2:	08 95       	ret

000045d4 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    45d4:	83 e8       	ldi	r24, 0x83	; 131
    45d6:	9e e0       	ldi	r25, 0x0E	; 14
    45d8:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    45dc:	80 93 ff 41 	sts	0x41FF, r24
    45e0:	08 95       	ret

000045e2 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    45e2:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <_nrk_setup_timer>
  nrk_int_enable();  
    45e6:	0c 94 e5 0c 	jmp	0x19ca	; 0x19ca <nrk_int_enable>

000045ea <nrk_start_high_ready_task>:
    45ea:	a0 91 30 06 	lds	r26, 0x0630
    45ee:	b0 91 31 06 	lds	r27, 0x0631
    45f2:	cd 91       	ld	r28, X+
    45f4:	cd bf       	out	0x3d, r28	; 61
    45f6:	dd 91       	ld	r29, X+
    45f8:	de bf       	out	0x3e, r29	; 62
    45fa:	ff 91       	pop	r31
    45fc:	ef 91       	pop	r30
    45fe:	df 91       	pop	r29
    4600:	cf 91       	pop	r28
    4602:	bf 91       	pop	r27
    4604:	af 91       	pop	r26
    4606:	9f 91       	pop	r25
    4608:	8f 91       	pop	r24
    460a:	7f 91       	pop	r23
    460c:	6f 91       	pop	r22
    460e:	5f 91       	pop	r21
    4610:	4f 91       	pop	r20
    4612:	3f 91       	pop	r19
    4614:	2f 91       	pop	r18
    4616:	1f 91       	pop	r17
    4618:	0f 91       	pop	r16
    461a:	ff 90       	pop	r15
    461c:	ef 90       	pop	r14
    461e:	df 90       	pop	r13
    4620:	cf 90       	pop	r12
    4622:	bf 90       	pop	r11
    4624:	af 90       	pop	r10
    4626:	9f 90       	pop	r9
    4628:	8f 90       	pop	r8
    462a:	7f 90       	pop	r7
    462c:	6f 90       	pop	r6
    462e:	5f 90       	pop	r5
    4630:	4f 90       	pop	r4
    4632:	3f 90       	pop	r3
    4634:	2f 90       	pop	r2
    4636:	1f 90       	pop	r1
    4638:	0f 90       	pop	r0
    463a:	0f be       	out	0x3f, r0	; 63
    463c:	0f 90       	pop	r0
    463e:	18 95       	reti

00004640 <main>:
}

void main(){
	nrk_setup_ports();
    4640:	0e 94 80 08 	call	0x1100	; 0x1100 <nrk_setup_ports>
	nrk_setup_uart(UART_BAUDRATE_115K2);
    4644:	80 e1       	ldi	r24, 0x10	; 16
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	0e 94 04 0c 	call	0x1808	; 0x1808 <nrk_setup_uart>
	nrk_init();
    464c:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <nrk_init>
	pRRI.ackRequest = 0;
    4650:	10 92 5b 04 	sts	0x045B, r1
	pRRI.max_length = 100;
    4654:	84 e6       	ldi	r24, 0x64	; 100
    4656:	80 93 58 04 	sts	0x0458, r24
	pRRI.pPayload = buf;
    465a:	8e ee       	ldi	r24, 0xEE	; 238
    465c:	93 e0       	ldi	r25, 0x03	; 3
    465e:	90 93 5a 04 	sts	0x045A, r25
    4662:	80 93 59 04 	sts	0x0459, r24
	rf_power_up();
    4666:	0e 94 81 02 	call	0x502	; 0x502 <rf_power_up>
	rf_init(&pRRI, 13, 0xFFFF, 0x0);
    466a:	20 e0       	ldi	r18, 0x00	; 0
    466c:	30 e0       	ldi	r19, 0x00	; 0
    466e:	4f ef       	ldi	r20, 0xFF	; 255
    4670:	5f ef       	ldi	r21, 0xFF	; 255
    4672:	6d e0       	ldi	r22, 0x0D	; 13
    4674:	84 e5       	ldi	r24, 0x54	; 84
    4676:	94 e0       	ldi	r25, 0x04	; 4
    4678:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <rf_init>
	rx_start_callback(rf_start_callback);
    467c:	85 e3       	ldi	r24, 0x35	; 53
    467e:	92 e0       	ldi	r25, 0x02	; 2
    4680:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <rx_start_callback>
	rx_end_callback(rf_finish_callback);
    4684:	8d e3       	ldi	r24, 0x3D	; 61
    4686:	92 e0       	ldi	r25, 0x02	; 2
    4688:	0e 94 d7 02 	call	0x5ae	; 0x5ae <rx_end_callback>
	rf_rx_on();
    468c:	0e 94 4c 03 	call	0x698	; 0x698 <rf_rx_on>
	printf("finished initialization\r\n");
    4690:	83 e9       	ldi	r24, 0x93	; 147
    4692:	92 e0       	ldi	r25, 0x02	; 2
    4694:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <puts>
	while (1){
		continue;
	}
    4698:	ff cf       	rjmp	.-2      	; 0x4698 <main+0x58>

0000469a <vfprintf>:
    469a:	6f 92       	push	r6
    469c:	7f 92       	push	r7
    469e:	8f 92       	push	r8
    46a0:	9f 92       	push	r9
    46a2:	af 92       	push	r10
    46a4:	bf 92       	push	r11
    46a6:	cf 92       	push	r12
    46a8:	df 92       	push	r13
    46aa:	ef 92       	push	r14
    46ac:	ff 92       	push	r15
    46ae:	0f 93       	push	r16
    46b0:	1f 93       	push	r17
    46b2:	cf 93       	push	r28
    46b4:	df 93       	push	r29
    46b6:	cd b7       	in	r28, 0x3d	; 61
    46b8:	de b7       	in	r29, 0x3e	; 62
    46ba:	2c 97       	sbiw	r28, 0x0c	; 12
    46bc:	0f b6       	in	r0, 0x3f	; 63
    46be:	f8 94       	cli
    46c0:	de bf       	out	0x3e, r29	; 62
    46c2:	0f be       	out	0x3f, r0	; 63
    46c4:	cd bf       	out	0x3d, r28	; 61
    46c6:	6c 01       	movw	r12, r24
    46c8:	5b 01       	movw	r10, r22
    46ca:	7a 01       	movw	r14, r20
    46cc:	fc 01       	movw	r30, r24
    46ce:	17 82       	std	Z+7, r1	; 0x07
    46d0:	16 82       	std	Z+6, r1	; 0x06
    46d2:	83 81       	ldd	r24, Z+3	; 0x03
    46d4:	81 ff       	sbrs	r24, 1
    46d6:	0e c1       	rjmp	.+540    	; 0x48f4 <vfprintf+0x25a>
    46d8:	ce 01       	movw	r24, r28
    46da:	01 96       	adiw	r24, 0x01	; 1
    46dc:	4c 01       	movw	r8, r24
    46de:	f6 01       	movw	r30, r12
    46e0:	03 81       	ldd	r16, Z+3	; 0x03
    46e2:	f5 01       	movw	r30, r10
    46e4:	03 fd       	sbrc	r16, 3
    46e6:	15 91       	lpm	r17, Z+
    46e8:	03 ff       	sbrs	r16, 3
    46ea:	11 91       	ld	r17, Z+
    46ec:	5f 01       	movw	r10, r30
    46ee:	11 23       	and	r17, r17
    46f0:	09 f4       	brne	.+2      	; 0x46f4 <vfprintf+0x5a>
    46f2:	fc c0       	rjmp	.+504    	; 0x48ec <vfprintf+0x252>
    46f4:	15 32       	cpi	r17, 0x25	; 37
    46f6:	49 f4       	brne	.+18     	; 0x470a <vfprintf+0x70>
    46f8:	03 fd       	sbrc	r16, 3
    46fa:	15 91       	lpm	r17, Z+
    46fc:	03 ff       	sbrs	r16, 3
    46fe:	11 91       	ld	r17, Z+
    4700:	5f 01       	movw	r10, r30
    4702:	15 32       	cpi	r17, 0x25	; 37
    4704:	11 f0       	breq	.+4      	; 0x470a <vfprintf+0x70>
    4706:	20 e0       	ldi	r18, 0x00	; 0
    4708:	1b c0       	rjmp	.+54     	; 0x4740 <vfprintf+0xa6>
    470a:	b6 01       	movw	r22, r12
    470c:	81 2f       	mov	r24, r17
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <fputc>
    4714:	37 01       	movw	r6, r14
    4716:	73 01       	movw	r14, r6
    4718:	e2 cf       	rjmp	.-60     	; 0x46de <vfprintf+0x44>
    471a:	11 23       	and	r17, r17
    471c:	09 f4       	brne	.+2      	; 0x4720 <vfprintf+0x86>
    471e:	e6 c0       	rjmp	.+460    	; 0x48ec <vfprintf+0x252>
    4720:	61 2f       	mov	r22, r17
    4722:	70 e0       	ldi	r23, 0x00	; 0
    4724:	87 e1       	ldi	r24, 0x17	; 23
    4726:	94 e0       	ldi	r25, 0x04	; 4
    4728:	2c 87       	std	Y+12, r18	; 0x0c
    472a:	0e 94 48 25 	call	0x4a90	; 0x4a90 <strchr_P>
    472e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4730:	89 2b       	or	r24, r25
    4732:	49 f0       	breq	.+18     	; 0x4746 <vfprintf+0xac>
    4734:	f5 01       	movw	r30, r10
    4736:	03 fd       	sbrc	r16, 3
    4738:	15 91       	lpm	r17, Z+
    473a:	03 ff       	sbrs	r16, 3
    473c:	11 91       	ld	r17, Z+
    473e:	5f 01       	movw	r10, r30
    4740:	27 ff       	sbrs	r18, 7
    4742:	eb cf       	rjmp	.-42     	; 0x471a <vfprintf+0x80>
    4744:	09 c0       	rjmp	.+18     	; 0x4758 <vfprintf+0xbe>
    4746:	13 32       	cpi	r17, 0x23	; 35
    4748:	29 f0       	breq	.+10     	; 0x4754 <vfprintf+0xba>
    474a:	1c 36       	cpi	r17, 0x6C	; 108
    474c:	09 f0       	breq	.+2      	; 0x4750 <vfprintf+0xb6>
    474e:	d5 c0       	rjmp	.+426    	; 0x48fa <vfprintf+0x260>
    4750:	20 68       	ori	r18, 0x80	; 128
    4752:	f0 cf       	rjmp	.-32     	; 0x4734 <vfprintf+0x9a>
    4754:	20 e1       	ldi	r18, 0x10	; 16
    4756:	ee cf       	rjmp	.-36     	; 0x4734 <vfprintf+0x9a>
    4758:	02 2f       	mov	r16, r18
    475a:	11 23       	and	r17, r17
    475c:	09 f4       	brne	.+2      	; 0x4760 <vfprintf+0xc6>
    475e:	c6 c0       	rjmp	.+396    	; 0x48ec <vfprintf+0x252>
    4760:	61 2f       	mov	r22, r17
    4762:	70 e0       	ldi	r23, 0x00	; 0
    4764:	80 e1       	ldi	r24, 0x10	; 16
    4766:	94 e0       	ldi	r25, 0x04	; 4
    4768:	2c 87       	std	Y+12, r18	; 0x0c
    476a:	0e 94 48 25 	call	0x4a90	; 0x4a90 <strchr_P>
    476e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4770:	89 2b       	or	r24, r25
    4772:	41 f0       	breq	.+16     	; 0x4784 <vfprintf+0xea>
    4774:	37 01       	movw	r6, r14
    4776:	f4 e0       	ldi	r31, 0x04	; 4
    4778:	6f 0e       	add	r6, r31
    477a:	71 1c       	adc	r7, r1
    477c:	b6 01       	movw	r22, r12
    477e:	8f e3       	ldi	r24, 0x3F	; 63
    4780:	90 e0       	ldi	r25, 0x00	; 0
    4782:	11 c0       	rjmp	.+34     	; 0x47a6 <vfprintf+0x10c>
    4784:	13 36       	cpi	r17, 0x63	; 99
    4786:	39 f0       	breq	.+14     	; 0x4796 <vfprintf+0xfc>
    4788:	13 37       	cpi	r17, 0x73	; 115
    478a:	81 f0       	breq	.+32     	; 0x47ac <vfprintf+0x112>
    478c:	13 35       	cpi	r17, 0x53	; 83
    478e:	19 f5       	brne	.+70     	; 0x47d6 <vfprintf+0x13c>
    4790:	02 2f       	mov	r16, r18
    4792:	01 60       	ori	r16, 0x01	; 1
    4794:	0b c0       	rjmp	.+22     	; 0x47ac <vfprintf+0x112>
    4796:	37 01       	movw	r6, r14
    4798:	82 e0       	ldi	r24, 0x02	; 2
    479a:	68 0e       	add	r6, r24
    479c:	71 1c       	adc	r7, r1
    479e:	b6 01       	movw	r22, r12
    47a0:	f7 01       	movw	r30, r14
    47a2:	80 81       	ld	r24, Z
    47a4:	91 81       	ldd	r25, Z+1	; 0x01
    47a6:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <fputc>
    47aa:	b5 cf       	rjmp	.-150    	; 0x4716 <vfprintf+0x7c>
    47ac:	37 01       	movw	r6, r14
    47ae:	f2 e0       	ldi	r31, 0x02	; 2
    47b0:	6f 0e       	add	r6, r31
    47b2:	71 1c       	adc	r7, r1
    47b4:	f7 01       	movw	r30, r14
    47b6:	e0 80       	ld	r14, Z
    47b8:	f1 80       	ldd	r15, Z+1	; 0x01
    47ba:	f7 01       	movw	r30, r14
    47bc:	00 fd       	sbrc	r16, 0
    47be:	85 91       	lpm	r24, Z+
    47c0:	00 ff       	sbrs	r16, 0
    47c2:	81 91       	ld	r24, Z+
    47c4:	7f 01       	movw	r14, r30
    47c6:	88 23       	and	r24, r24
    47c8:	09 f4       	brne	.+2      	; 0x47cc <vfprintf+0x132>
    47ca:	a5 cf       	rjmp	.-182    	; 0x4716 <vfprintf+0x7c>
    47cc:	b6 01       	movw	r22, r12
    47ce:	90 e0       	ldi	r25, 0x00	; 0
    47d0:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <fputc>
    47d4:	f2 cf       	rjmp	.-28     	; 0x47ba <vfprintf+0x120>
    47d6:	14 36       	cpi	r17, 0x64	; 100
    47d8:	11 f0       	breq	.+4      	; 0x47de <vfprintf+0x144>
    47da:	19 36       	cpi	r17, 0x69	; 105
    47dc:	29 f5       	brne	.+74     	; 0x4828 <vfprintf+0x18e>
    47de:	37 01       	movw	r6, r14
    47e0:	27 ff       	sbrs	r18, 7
    47e2:	09 c0       	rjmp	.+18     	; 0x47f6 <vfprintf+0x15c>
    47e4:	f4 e0       	ldi	r31, 0x04	; 4
    47e6:	6f 0e       	add	r6, r31
    47e8:	71 1c       	adc	r7, r1
    47ea:	f7 01       	movw	r30, r14
    47ec:	60 81       	ld	r22, Z
    47ee:	71 81       	ldd	r23, Z+1	; 0x01
    47f0:	82 81       	ldd	r24, Z+2	; 0x02
    47f2:	93 81       	ldd	r25, Z+3	; 0x03
    47f4:	0a c0       	rjmp	.+20     	; 0x480a <vfprintf+0x170>
    47f6:	f2 e0       	ldi	r31, 0x02	; 2
    47f8:	6f 0e       	add	r6, r31
    47fa:	71 1c       	adc	r7, r1
    47fc:	f7 01       	movw	r30, r14
    47fe:	60 81       	ld	r22, Z
    4800:	71 81       	ldd	r23, Z+1	; 0x01
    4802:	88 27       	eor	r24, r24
    4804:	77 fd       	sbrc	r23, 7
    4806:	80 95       	com	r24
    4808:	98 2f       	mov	r25, r24
    480a:	02 2f       	mov	r16, r18
    480c:	0f 7e       	andi	r16, 0xEF	; 239
    480e:	97 ff       	sbrs	r25, 7
    4810:	08 c0       	rjmp	.+16     	; 0x4822 <vfprintf+0x188>
    4812:	90 95       	com	r25
    4814:	80 95       	com	r24
    4816:	70 95       	com	r23
    4818:	61 95       	neg	r22
    481a:	7f 4f       	sbci	r23, 0xFF	; 255
    481c:	8f 4f       	sbci	r24, 0xFF	; 255
    481e:	9f 4f       	sbci	r25, 0xFF	; 255
    4820:	00 64       	ori	r16, 0x40	; 64
    4822:	2a e0       	ldi	r18, 0x0A	; 10
    4824:	30 e0       	ldi	r19, 0x00	; 0
    4826:	33 c0       	rjmp	.+102    	; 0x488e <vfprintf+0x1f4>
    4828:	10 37       	cpi	r17, 0x70	; 112
    482a:	99 f0       	breq	.+38     	; 0x4852 <vfprintf+0x1b8>
    482c:	40 f4       	brcc	.+16     	; 0x483e <vfprintf+0x1a4>
    482e:	18 35       	cpi	r17, 0x58	; 88
    4830:	b1 f0       	breq	.+44     	; 0x485e <vfprintf+0x1c4>
    4832:	1f 36       	cpi	r17, 0x6F	; 111
    4834:	09 f0       	breq	.+2      	; 0x4838 <vfprintf+0x19e>
    4836:	5a c0       	rjmp	.+180    	; 0x48ec <vfprintf+0x252>
    4838:	28 e0       	ldi	r18, 0x08	; 8
    483a:	30 e0       	ldi	r19, 0x00	; 0
    483c:	14 c0       	rjmp	.+40     	; 0x4866 <vfprintf+0x1cc>
    483e:	15 37       	cpi	r17, 0x75	; 117
    4840:	19 f0       	breq	.+6      	; 0x4848 <vfprintf+0x1ae>
    4842:	18 37       	cpi	r17, 0x78	; 120
    4844:	41 f0       	breq	.+16     	; 0x4856 <vfprintf+0x1bc>
    4846:	52 c0       	rjmp	.+164    	; 0x48ec <vfprintf+0x252>
    4848:	02 2f       	mov	r16, r18
    484a:	0f 7e       	andi	r16, 0xEF	; 239
    484c:	2a e0       	ldi	r18, 0x0A	; 10
    484e:	30 e0       	ldi	r19, 0x00	; 0
    4850:	0a c0       	rjmp	.+20     	; 0x4866 <vfprintf+0x1cc>
    4852:	02 2f       	mov	r16, r18
    4854:	00 61       	ori	r16, 0x10	; 16
    4856:	04 62       	ori	r16, 0x24	; 36
    4858:	20 e1       	ldi	r18, 0x10	; 16
    485a:	30 e0       	ldi	r19, 0x00	; 0
    485c:	04 c0       	rjmp	.+8      	; 0x4866 <vfprintf+0x1cc>
    485e:	02 2f       	mov	r16, r18
    4860:	04 60       	ori	r16, 0x04	; 4
    4862:	20 e1       	ldi	r18, 0x10	; 16
    4864:	32 e0       	ldi	r19, 0x02	; 2
    4866:	37 01       	movw	r6, r14
    4868:	07 ff       	sbrs	r16, 7
    486a:	09 c0       	rjmp	.+18     	; 0x487e <vfprintf+0x1e4>
    486c:	f4 e0       	ldi	r31, 0x04	; 4
    486e:	6f 0e       	add	r6, r31
    4870:	71 1c       	adc	r7, r1
    4872:	f7 01       	movw	r30, r14
    4874:	60 81       	ld	r22, Z
    4876:	71 81       	ldd	r23, Z+1	; 0x01
    4878:	82 81       	ldd	r24, Z+2	; 0x02
    487a:	93 81       	ldd	r25, Z+3	; 0x03
    487c:	08 c0       	rjmp	.+16     	; 0x488e <vfprintf+0x1f4>
    487e:	f2 e0       	ldi	r31, 0x02	; 2
    4880:	6f 0e       	add	r6, r31
    4882:	71 1c       	adc	r7, r1
    4884:	f7 01       	movw	r30, r14
    4886:	60 81       	ld	r22, Z
    4888:	71 81       	ldd	r23, Z+1	; 0x01
    488a:	80 e0       	ldi	r24, 0x00	; 0
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	a4 01       	movw	r20, r8
    4890:	0e 94 67 26 	call	0x4cce	; 0x4cce <__ultoa_invert>
    4894:	18 2f       	mov	r17, r24
    4896:	18 19       	sub	r17, r8
    4898:	06 ff       	sbrs	r16, 6
    489a:	05 c0       	rjmp	.+10     	; 0x48a6 <vfprintf+0x20c>
    489c:	b6 01       	movw	r22, r12
    489e:	8d e2       	ldi	r24, 0x2D	; 45
    48a0:	90 e0       	ldi	r25, 0x00	; 0
    48a2:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <fputc>
    48a6:	04 ff       	sbrs	r16, 4
    48a8:	15 c0       	rjmp	.+42     	; 0x48d4 <vfprintf+0x23a>
    48aa:	fe 01       	movw	r30, r28
    48ac:	e1 0f       	add	r30, r17
    48ae:	f1 1d       	adc	r31, r1
    48b0:	80 81       	ld	r24, Z
    48b2:	80 33       	cpi	r24, 0x30	; 48
    48b4:	79 f0       	breq	.+30     	; 0x48d4 <vfprintf+0x23a>
    48b6:	b6 01       	movw	r22, r12
    48b8:	80 e3       	ldi	r24, 0x30	; 48
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <fputc>
    48c0:	02 ff       	sbrs	r16, 2
    48c2:	08 c0       	rjmp	.+16     	; 0x48d4 <vfprintf+0x23a>
    48c4:	00 72       	andi	r16, 0x20	; 32
    48c6:	80 2f       	mov	r24, r16
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	b6 01       	movw	r22, r12
    48cc:	88 5a       	subi	r24, 0xA8	; 168
    48ce:	9f 4f       	sbci	r25, 0xFF	; 255
    48d0:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <fputc>
    48d4:	11 50       	subi	r17, 0x01	; 1
    48d6:	f4 01       	movw	r30, r8
    48d8:	e1 0f       	add	r30, r17
    48da:	f1 1d       	adc	r31, r1
    48dc:	80 81       	ld	r24, Z
    48de:	b6 01       	movw	r22, r12
    48e0:	90 e0       	ldi	r25, 0x00	; 0
    48e2:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <fputc>
    48e6:	11 11       	cpse	r17, r1
    48e8:	f5 cf       	rjmp	.-22     	; 0x48d4 <vfprintf+0x23a>
    48ea:	15 cf       	rjmp	.-470    	; 0x4716 <vfprintf+0x7c>
    48ec:	f6 01       	movw	r30, r12
    48ee:	86 81       	ldd	r24, Z+6	; 0x06
    48f0:	97 81       	ldd	r25, Z+7	; 0x07
    48f2:	05 c0       	rjmp	.+10     	; 0x48fe <vfprintf+0x264>
    48f4:	8f ef       	ldi	r24, 0xFF	; 255
    48f6:	9f ef       	ldi	r25, 0xFF	; 255
    48f8:	02 c0       	rjmp	.+4      	; 0x48fe <vfprintf+0x264>
    48fa:	02 2f       	mov	r16, r18
    48fc:	31 cf       	rjmp	.-414    	; 0x4760 <vfprintf+0xc6>
    48fe:	2c 96       	adiw	r28, 0x0c	; 12
    4900:	0f b6       	in	r0, 0x3f	; 63
    4902:	f8 94       	cli
    4904:	de bf       	out	0x3e, r29	; 62
    4906:	0f be       	out	0x3f, r0	; 63
    4908:	cd bf       	out	0x3d, r28	; 61
    490a:	df 91       	pop	r29
    490c:	cf 91       	pop	r28
    490e:	1f 91       	pop	r17
    4910:	0f 91       	pop	r16
    4912:	ff 90       	pop	r15
    4914:	ef 90       	pop	r14
    4916:	df 90       	pop	r13
    4918:	cf 90       	pop	r12
    491a:	bf 90       	pop	r11
    491c:	af 90       	pop	r10
    491e:	9f 90       	pop	r9
    4920:	8f 90       	pop	r8
    4922:	7f 90       	pop	r7
    4924:	6f 90       	pop	r6
    4926:	08 95       	ret

00004928 <__muluhisi3>:
    4928:	0e 94 39 25 	call	0x4a72	; 0x4a72 <__umulhisi3>
    492c:	a5 9f       	mul	r26, r21
    492e:	90 0d       	add	r25, r0
    4930:	b4 9f       	mul	r27, r20
    4932:	90 0d       	add	r25, r0
    4934:	a4 9f       	mul	r26, r20
    4936:	80 0d       	add	r24, r0
    4938:	91 1d       	adc	r25, r1
    493a:	11 24       	eor	r1, r1
    493c:	08 95       	ret

0000493e <__mulsi3>:
    493e:	db 01       	movw	r26, r22
    4940:	8f 93       	push	r24
    4942:	9f 93       	push	r25
    4944:	0e 94 94 24 	call	0x4928	; 0x4928 <__muluhisi3>
    4948:	bf 91       	pop	r27
    494a:	af 91       	pop	r26
    494c:	a2 9f       	mul	r26, r18
    494e:	80 0d       	add	r24, r0
    4950:	91 1d       	adc	r25, r1
    4952:	a3 9f       	mul	r26, r19
    4954:	90 0d       	add	r25, r0
    4956:	b2 9f       	mul	r27, r18
    4958:	90 0d       	add	r25, r0
    495a:	11 24       	eor	r1, r1
    495c:	08 95       	ret

0000495e <__udivmodsi4>:
    495e:	a1 e2       	ldi	r26, 0x21	; 33
    4960:	1a 2e       	mov	r1, r26
    4962:	aa 1b       	sub	r26, r26
    4964:	bb 1b       	sub	r27, r27
    4966:	fd 01       	movw	r30, r26
    4968:	0d c0       	rjmp	.+26     	; 0x4984 <__udivmodsi4_ep>

0000496a <__udivmodsi4_loop>:
    496a:	aa 1f       	adc	r26, r26
    496c:	bb 1f       	adc	r27, r27
    496e:	ee 1f       	adc	r30, r30
    4970:	ff 1f       	adc	r31, r31
    4972:	a2 17       	cp	r26, r18
    4974:	b3 07       	cpc	r27, r19
    4976:	e4 07       	cpc	r30, r20
    4978:	f5 07       	cpc	r31, r21
    497a:	20 f0       	brcs	.+8      	; 0x4984 <__udivmodsi4_ep>
    497c:	a2 1b       	sub	r26, r18
    497e:	b3 0b       	sbc	r27, r19
    4980:	e4 0b       	sbc	r30, r20
    4982:	f5 0b       	sbc	r31, r21

00004984 <__udivmodsi4_ep>:
    4984:	66 1f       	adc	r22, r22
    4986:	77 1f       	adc	r23, r23
    4988:	88 1f       	adc	r24, r24
    498a:	99 1f       	adc	r25, r25
    498c:	1a 94       	dec	r1
    498e:	69 f7       	brne	.-38     	; 0x496a <__udivmodsi4_loop>
    4990:	60 95       	com	r22
    4992:	70 95       	com	r23
    4994:	80 95       	com	r24
    4996:	90 95       	com	r25
    4998:	9b 01       	movw	r18, r22
    499a:	ac 01       	movw	r20, r24
    499c:	bd 01       	movw	r22, r26
    499e:	cf 01       	movw	r24, r30
    49a0:	08 95       	ret

000049a2 <__umoddi3>:
    49a2:	68 94       	set
    49a4:	01 c0       	rjmp	.+2      	; 0x49a8 <__udivdi3_umoddi3>

000049a6 <__udivdi3>:
    49a6:	e8 94       	clt

000049a8 <__udivdi3_umoddi3>:
    49a8:	8f 92       	push	r8
    49aa:	9f 92       	push	r9
    49ac:	cf 93       	push	r28
    49ae:	df 93       	push	r29
    49b0:	0e 94 df 24 	call	0x49be	; 0x49be <__udivmod64>
    49b4:	df 91       	pop	r29
    49b6:	cf 91       	pop	r28
    49b8:	9f 90       	pop	r9
    49ba:	8f 90       	pop	r8
    49bc:	08 95       	ret

000049be <__udivmod64>:
    49be:	88 24       	eor	r8, r8
    49c0:	99 24       	eor	r9, r9
    49c2:	f4 01       	movw	r30, r8
    49c4:	e4 01       	movw	r28, r8
    49c6:	b0 e4       	ldi	r27, 0x40	; 64
    49c8:	9f 93       	push	r25
    49ca:	aa 27       	eor	r26, r26
    49cc:	9a 15       	cp	r25, r10
    49ce:	8b 04       	cpc	r8, r11
    49d0:	9c 04       	cpc	r9, r12
    49d2:	ed 05       	cpc	r30, r13
    49d4:	fe 05       	cpc	r31, r14
    49d6:	cf 05       	cpc	r28, r15
    49d8:	d0 07       	cpc	r29, r16
    49da:	a1 07       	cpc	r26, r17
    49dc:	98 f4       	brcc	.+38     	; 0x4a04 <__udivmod64+0x46>
    49de:	ad 2f       	mov	r26, r29
    49e0:	dc 2f       	mov	r29, r28
    49e2:	cf 2f       	mov	r28, r31
    49e4:	fe 2f       	mov	r31, r30
    49e6:	e9 2d       	mov	r30, r9
    49e8:	98 2c       	mov	r9, r8
    49ea:	89 2e       	mov	r8, r25
    49ec:	98 2f       	mov	r25, r24
    49ee:	87 2f       	mov	r24, r23
    49f0:	76 2f       	mov	r23, r22
    49f2:	65 2f       	mov	r22, r21
    49f4:	54 2f       	mov	r21, r20
    49f6:	43 2f       	mov	r20, r19
    49f8:	32 2f       	mov	r19, r18
    49fa:	22 27       	eor	r18, r18
    49fc:	b8 50       	subi	r27, 0x08	; 8
    49fe:	31 f7       	brne	.-52     	; 0x49cc <__udivmod64+0xe>
    4a00:	bf 91       	pop	r27
    4a02:	27 c0       	rjmp	.+78     	; 0x4a52 <__udivmod64+0x94>
    4a04:	1b 2e       	mov	r1, r27
    4a06:	bf 91       	pop	r27
    4a08:	bb 27       	eor	r27, r27
    4a0a:	22 0f       	add	r18, r18
    4a0c:	33 1f       	adc	r19, r19
    4a0e:	44 1f       	adc	r20, r20
    4a10:	55 1f       	adc	r21, r21
    4a12:	66 1f       	adc	r22, r22
    4a14:	77 1f       	adc	r23, r23
    4a16:	88 1f       	adc	r24, r24
    4a18:	99 1f       	adc	r25, r25
    4a1a:	88 1c       	adc	r8, r8
    4a1c:	99 1c       	adc	r9, r9
    4a1e:	ee 1f       	adc	r30, r30
    4a20:	ff 1f       	adc	r31, r31
    4a22:	cc 1f       	adc	r28, r28
    4a24:	dd 1f       	adc	r29, r29
    4a26:	aa 1f       	adc	r26, r26
    4a28:	bb 1f       	adc	r27, r27
    4a2a:	8a 14       	cp	r8, r10
    4a2c:	9b 04       	cpc	r9, r11
    4a2e:	ec 05       	cpc	r30, r12
    4a30:	fd 05       	cpc	r31, r13
    4a32:	ce 05       	cpc	r28, r14
    4a34:	df 05       	cpc	r29, r15
    4a36:	a0 07       	cpc	r26, r16
    4a38:	b1 07       	cpc	r27, r17
    4a3a:	48 f0       	brcs	.+18     	; 0x4a4e <__udivmod64+0x90>
    4a3c:	8a 18       	sub	r8, r10
    4a3e:	9b 08       	sbc	r9, r11
    4a40:	ec 09       	sbc	r30, r12
    4a42:	fd 09       	sbc	r31, r13
    4a44:	ce 09       	sbc	r28, r14
    4a46:	df 09       	sbc	r29, r15
    4a48:	a0 0b       	sbc	r26, r16
    4a4a:	b1 0b       	sbc	r27, r17
    4a4c:	21 60       	ori	r18, 0x01	; 1
    4a4e:	1a 94       	dec	r1
    4a50:	e1 f6       	brne	.-72     	; 0x4a0a <__udivmod64+0x4c>
    4a52:	2e f4       	brtc	.+10     	; 0x4a5e <__udivmod64+0xa0>
    4a54:	94 01       	movw	r18, r8
    4a56:	af 01       	movw	r20, r30
    4a58:	be 01       	movw	r22, r28
    4a5a:	cd 01       	movw	r24, r26
    4a5c:	00 0c       	add	r0, r0
    4a5e:	08 95       	ret

00004a60 <__tablejump2__>:
    4a60:	ee 0f       	add	r30, r30
    4a62:	ff 1f       	adc	r31, r31
    4a64:	00 24       	eor	r0, r0
    4a66:	00 1c       	adc	r0, r0
    4a68:	0b be       	out	0x3b, r0	; 59
    4a6a:	07 90       	elpm	r0, Z+
    4a6c:	f6 91       	elpm	r31, Z
    4a6e:	e0 2d       	mov	r30, r0
    4a70:	09 94       	ijmp

00004a72 <__umulhisi3>:
    4a72:	a2 9f       	mul	r26, r18
    4a74:	b0 01       	movw	r22, r0
    4a76:	b3 9f       	mul	r27, r19
    4a78:	c0 01       	movw	r24, r0
    4a7a:	a3 9f       	mul	r26, r19
    4a7c:	70 0d       	add	r23, r0
    4a7e:	81 1d       	adc	r24, r1
    4a80:	11 24       	eor	r1, r1
    4a82:	91 1d       	adc	r25, r1
    4a84:	b2 9f       	mul	r27, r18
    4a86:	70 0d       	add	r23, r0
    4a88:	81 1d       	adc	r24, r1
    4a8a:	11 24       	eor	r1, r1
    4a8c:	91 1d       	adc	r25, r1
    4a8e:	08 95       	ret

00004a90 <strchr_P>:
    4a90:	fc 01       	movw	r30, r24
    4a92:	05 90       	lpm	r0, Z+
    4a94:	06 16       	cp	r0, r22
    4a96:	21 f0       	breq	.+8      	; 0x4aa0 <strchr_P+0x10>
    4a98:	00 20       	and	r0, r0
    4a9a:	d9 f7       	brne	.-10     	; 0x4a92 <strchr_P+0x2>
    4a9c:	c0 01       	movw	r24, r0
    4a9e:	08 95       	ret
    4aa0:	31 97       	sbiw	r30, 0x01	; 1
    4aa2:	cf 01       	movw	r24, r30
    4aa4:	08 95       	ret

00004aa6 <memcpy>:
    4aa6:	fb 01       	movw	r30, r22
    4aa8:	dc 01       	movw	r26, r24
    4aaa:	02 c0       	rjmp	.+4      	; 0x4ab0 <memcpy+0xa>
    4aac:	01 90       	ld	r0, Z+
    4aae:	0d 92       	st	X+, r0
    4ab0:	41 50       	subi	r20, 0x01	; 1
    4ab2:	50 40       	sbci	r21, 0x00	; 0
    4ab4:	d8 f7       	brcc	.-10     	; 0x4aac <memcpy+0x6>
    4ab6:	08 95       	ret

00004ab8 <strncmp>:
    4ab8:	fb 01       	movw	r30, r22
    4aba:	dc 01       	movw	r26, r24
    4abc:	41 50       	subi	r20, 0x01	; 1
    4abe:	50 40       	sbci	r21, 0x00	; 0
    4ac0:	30 f0       	brcs	.+12     	; 0x4ace <strncmp+0x16>
    4ac2:	8d 91       	ld	r24, X+
    4ac4:	01 90       	ld	r0, Z+
    4ac6:	80 19       	sub	r24, r0
    4ac8:	19 f4       	brne	.+6      	; 0x4ad0 <strncmp+0x18>
    4aca:	00 20       	and	r0, r0
    4acc:	b9 f7       	brne	.-18     	; 0x4abc <strncmp+0x4>
    4ace:	88 1b       	sub	r24, r24
    4ad0:	99 0b       	sbc	r25, r25
    4ad2:	08 95       	ret

00004ad4 <fdevopen>:
    4ad4:	0f 93       	push	r16
    4ad6:	1f 93       	push	r17
    4ad8:	cf 93       	push	r28
    4ada:	df 93       	push	r29
    4adc:	00 97       	sbiw	r24, 0x00	; 0
    4ade:	31 f4       	brne	.+12     	; 0x4aec <fdevopen+0x18>
    4ae0:	61 15       	cp	r22, r1
    4ae2:	71 05       	cpc	r23, r1
    4ae4:	19 f4       	brne	.+6      	; 0x4aec <fdevopen+0x18>
    4ae6:	80 e0       	ldi	r24, 0x00	; 0
    4ae8:	90 e0       	ldi	r25, 0x00	; 0
    4aea:	3a c0       	rjmp	.+116    	; 0x4b60 <fdevopen+0x8c>
    4aec:	8b 01       	movw	r16, r22
    4aee:	ec 01       	movw	r28, r24
    4af0:	6e e0       	ldi	r22, 0x0E	; 14
    4af2:	70 e0       	ldi	r23, 0x00	; 0
    4af4:	81 e0       	ldi	r24, 0x01	; 1
    4af6:	90 e0       	ldi	r25, 0x00	; 0
    4af8:	0e 94 db 26 	call	0x4db6	; 0x4db6 <calloc>
    4afc:	fc 01       	movw	r30, r24
    4afe:	00 97       	sbiw	r24, 0x00	; 0
    4b00:	91 f3       	breq	.-28     	; 0x4ae6 <fdevopen+0x12>
    4b02:	80 e8       	ldi	r24, 0x80	; 128
    4b04:	83 83       	std	Z+3, r24	; 0x03
    4b06:	01 15       	cp	r16, r1
    4b08:	11 05       	cpc	r17, r1
    4b0a:	71 f0       	breq	.+28     	; 0x4b28 <fdevopen+0x54>
    4b0c:	13 87       	std	Z+11, r17	; 0x0b
    4b0e:	02 87       	std	Z+10, r16	; 0x0a
    4b10:	81 e8       	ldi	r24, 0x81	; 129
    4b12:	83 83       	std	Z+3, r24	; 0x03
    4b14:	80 91 cd 06 	lds	r24, 0x06CD
    4b18:	90 91 ce 06 	lds	r25, 0x06CE
    4b1c:	89 2b       	or	r24, r25
    4b1e:	21 f4       	brne	.+8      	; 0x4b28 <fdevopen+0x54>
    4b20:	f0 93 ce 06 	sts	0x06CE, r31
    4b24:	e0 93 cd 06 	sts	0x06CD, r30
    4b28:	20 97       	sbiw	r28, 0x00	; 0
    4b2a:	c9 f0       	breq	.+50     	; 0x4b5e <fdevopen+0x8a>
    4b2c:	d1 87       	std	Z+9, r29	; 0x09
    4b2e:	c0 87       	std	Z+8, r28	; 0x08
    4b30:	83 81       	ldd	r24, Z+3	; 0x03
    4b32:	82 60       	ori	r24, 0x02	; 2
    4b34:	83 83       	std	Z+3, r24	; 0x03
    4b36:	80 91 cf 06 	lds	r24, 0x06CF
    4b3a:	90 91 d0 06 	lds	r25, 0x06D0
    4b3e:	89 2b       	or	r24, r25
    4b40:	71 f4       	brne	.+28     	; 0x4b5e <fdevopen+0x8a>
    4b42:	f0 93 d0 06 	sts	0x06D0, r31
    4b46:	e0 93 cf 06 	sts	0x06CF, r30
    4b4a:	80 91 d1 06 	lds	r24, 0x06D1
    4b4e:	90 91 d2 06 	lds	r25, 0x06D2
    4b52:	89 2b       	or	r24, r25
    4b54:	21 f4       	brne	.+8      	; 0x4b5e <fdevopen+0x8a>
    4b56:	f0 93 d2 06 	sts	0x06D2, r31
    4b5a:	e0 93 d1 06 	sts	0x06D1, r30
    4b5e:	cf 01       	movw	r24, r30
    4b60:	df 91       	pop	r29
    4b62:	cf 91       	pop	r28
    4b64:	1f 91       	pop	r17
    4b66:	0f 91       	pop	r16
    4b68:	08 95       	ret

00004b6a <fputc>:
    4b6a:	0f 93       	push	r16
    4b6c:	1f 93       	push	r17
    4b6e:	cf 93       	push	r28
    4b70:	df 93       	push	r29
    4b72:	fb 01       	movw	r30, r22
    4b74:	23 81       	ldd	r18, Z+3	; 0x03
    4b76:	21 fd       	sbrc	r18, 1
    4b78:	03 c0       	rjmp	.+6      	; 0x4b80 <fputc+0x16>
    4b7a:	8f ef       	ldi	r24, 0xFF	; 255
    4b7c:	9f ef       	ldi	r25, 0xFF	; 255
    4b7e:	28 c0       	rjmp	.+80     	; 0x4bd0 <fputc+0x66>
    4b80:	22 ff       	sbrs	r18, 2
    4b82:	16 c0       	rjmp	.+44     	; 0x4bb0 <fputc+0x46>
    4b84:	46 81       	ldd	r20, Z+6	; 0x06
    4b86:	57 81       	ldd	r21, Z+7	; 0x07
    4b88:	24 81       	ldd	r18, Z+4	; 0x04
    4b8a:	35 81       	ldd	r19, Z+5	; 0x05
    4b8c:	42 17       	cp	r20, r18
    4b8e:	53 07       	cpc	r21, r19
    4b90:	44 f4       	brge	.+16     	; 0x4ba2 <fputc+0x38>
    4b92:	a0 81       	ld	r26, Z
    4b94:	b1 81       	ldd	r27, Z+1	; 0x01
    4b96:	9d 01       	movw	r18, r26
    4b98:	2f 5f       	subi	r18, 0xFF	; 255
    4b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b9c:	31 83       	std	Z+1, r19	; 0x01
    4b9e:	20 83       	st	Z, r18
    4ba0:	8c 93       	st	X, r24
    4ba2:	26 81       	ldd	r18, Z+6	; 0x06
    4ba4:	37 81       	ldd	r19, Z+7	; 0x07
    4ba6:	2f 5f       	subi	r18, 0xFF	; 255
    4ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    4baa:	37 83       	std	Z+7, r19	; 0x07
    4bac:	26 83       	std	Z+6, r18	; 0x06
    4bae:	10 c0       	rjmp	.+32     	; 0x4bd0 <fputc+0x66>
    4bb0:	eb 01       	movw	r28, r22
    4bb2:	09 2f       	mov	r16, r25
    4bb4:	18 2f       	mov	r17, r24
    4bb6:	00 84       	ldd	r0, Z+8	; 0x08
    4bb8:	f1 85       	ldd	r31, Z+9	; 0x09
    4bba:	e0 2d       	mov	r30, r0
    4bbc:	09 95       	icall
    4bbe:	89 2b       	or	r24, r25
    4bc0:	e1 f6       	brne	.-72     	; 0x4b7a <fputc+0x10>
    4bc2:	8e 81       	ldd	r24, Y+6	; 0x06
    4bc4:	9f 81       	ldd	r25, Y+7	; 0x07
    4bc6:	01 96       	adiw	r24, 0x01	; 1
    4bc8:	9f 83       	std	Y+7, r25	; 0x07
    4bca:	8e 83       	std	Y+6, r24	; 0x06
    4bcc:	81 2f       	mov	r24, r17
    4bce:	90 2f       	mov	r25, r16
    4bd0:	df 91       	pop	r29
    4bd2:	cf 91       	pop	r28
    4bd4:	1f 91       	pop	r17
    4bd6:	0f 91       	pop	r16
    4bd8:	08 95       	ret

00004bda <printf>:
    4bda:	cf 93       	push	r28
    4bdc:	df 93       	push	r29
    4bde:	cd b7       	in	r28, 0x3d	; 61
    4be0:	de b7       	in	r29, 0x3e	; 62
    4be2:	ae 01       	movw	r20, r28
    4be4:	4b 5f       	subi	r20, 0xFB	; 251
    4be6:	5f 4f       	sbci	r21, 0xFF	; 255
    4be8:	fa 01       	movw	r30, r20
    4bea:	61 91       	ld	r22, Z+
    4bec:	71 91       	ld	r23, Z+
    4bee:	af 01       	movw	r20, r30
    4bf0:	80 91 cf 06 	lds	r24, 0x06CF
    4bf4:	90 91 d0 06 	lds	r25, 0x06D0
    4bf8:	0e 94 4d 23 	call	0x469a	; 0x469a <vfprintf>
    4bfc:	df 91       	pop	r29
    4bfe:	cf 91       	pop	r28
    4c00:	08 95       	ret

00004c02 <putchar>:
    4c02:	60 91 cf 06 	lds	r22, 0x06CF
    4c06:	70 91 d0 06 	lds	r23, 0x06D0
    4c0a:	0c 94 b5 25 	jmp	0x4b6a	; 0x4b6a <fputc>

00004c0e <puts>:
    4c0e:	0f 93       	push	r16
    4c10:	1f 93       	push	r17
    4c12:	cf 93       	push	r28
    4c14:	df 93       	push	r29
    4c16:	e0 91 cf 06 	lds	r30, 0x06CF
    4c1a:	f0 91 d0 06 	lds	r31, 0x06D0
    4c1e:	23 81       	ldd	r18, Z+3	; 0x03
    4c20:	21 ff       	sbrs	r18, 1
    4c22:	1b c0       	rjmp	.+54     	; 0x4c5a <puts+0x4c>
    4c24:	8c 01       	movw	r16, r24
    4c26:	d0 e0       	ldi	r29, 0x00	; 0
    4c28:	c0 e0       	ldi	r28, 0x00	; 0
    4c2a:	f8 01       	movw	r30, r16
    4c2c:	81 91       	ld	r24, Z+
    4c2e:	8f 01       	movw	r16, r30
    4c30:	60 91 cf 06 	lds	r22, 0x06CF
    4c34:	70 91 d0 06 	lds	r23, 0x06D0
    4c38:	db 01       	movw	r26, r22
    4c3a:	18 96       	adiw	r26, 0x08	; 8
    4c3c:	ed 91       	ld	r30, X+
    4c3e:	fc 91       	ld	r31, X
    4c40:	19 97       	sbiw	r26, 0x09	; 9
    4c42:	88 23       	and	r24, r24
    4c44:	31 f0       	breq	.+12     	; 0x4c52 <puts+0x44>
    4c46:	09 95       	icall
    4c48:	89 2b       	or	r24, r25
    4c4a:	79 f3       	breq	.-34     	; 0x4c2a <puts+0x1c>
    4c4c:	df ef       	ldi	r29, 0xFF	; 255
    4c4e:	cf ef       	ldi	r28, 0xFF	; 255
    4c50:	ec cf       	rjmp	.-40     	; 0x4c2a <puts+0x1c>
    4c52:	8a e0       	ldi	r24, 0x0A	; 10
    4c54:	09 95       	icall
    4c56:	89 2b       	or	r24, r25
    4c58:	19 f0       	breq	.+6      	; 0x4c60 <puts+0x52>
    4c5a:	8f ef       	ldi	r24, 0xFF	; 255
    4c5c:	9f ef       	ldi	r25, 0xFF	; 255
    4c5e:	02 c0       	rjmp	.+4      	; 0x4c64 <puts+0x56>
    4c60:	8d 2f       	mov	r24, r29
    4c62:	9c 2f       	mov	r25, r28
    4c64:	df 91       	pop	r29
    4c66:	cf 91       	pop	r28
    4c68:	1f 91       	pop	r17
    4c6a:	0f 91       	pop	r16
    4c6c:	08 95       	ret

00004c6e <sprintf>:
    4c6e:	0f 93       	push	r16
    4c70:	1f 93       	push	r17
    4c72:	cf 93       	push	r28
    4c74:	df 93       	push	r29
    4c76:	cd b7       	in	r28, 0x3d	; 61
    4c78:	de b7       	in	r29, 0x3e	; 62
    4c7a:	2e 97       	sbiw	r28, 0x0e	; 14
    4c7c:	0f b6       	in	r0, 0x3f	; 63
    4c7e:	f8 94       	cli
    4c80:	de bf       	out	0x3e, r29	; 62
    4c82:	0f be       	out	0x3f, r0	; 63
    4c84:	cd bf       	out	0x3d, r28	; 61
    4c86:	0d 89       	ldd	r16, Y+21	; 0x15
    4c88:	1e 89       	ldd	r17, Y+22	; 0x16
    4c8a:	86 e0       	ldi	r24, 0x06	; 6
    4c8c:	8c 83       	std	Y+4, r24	; 0x04
    4c8e:	1a 83       	std	Y+2, r17	; 0x02
    4c90:	09 83       	std	Y+1, r16	; 0x01
    4c92:	8f ef       	ldi	r24, 0xFF	; 255
    4c94:	9f e7       	ldi	r25, 0x7F	; 127
    4c96:	9e 83       	std	Y+6, r25	; 0x06
    4c98:	8d 83       	std	Y+5, r24	; 0x05
    4c9a:	ae 01       	movw	r20, r28
    4c9c:	47 5e       	subi	r20, 0xE7	; 231
    4c9e:	5f 4f       	sbci	r21, 0xFF	; 255
    4ca0:	6f 89       	ldd	r22, Y+23	; 0x17
    4ca2:	78 8d       	ldd	r23, Y+24	; 0x18
    4ca4:	ce 01       	movw	r24, r28
    4ca6:	01 96       	adiw	r24, 0x01	; 1
    4ca8:	0e 94 4d 23 	call	0x469a	; 0x469a <vfprintf>
    4cac:	2f 81       	ldd	r18, Y+7	; 0x07
    4cae:	38 85       	ldd	r19, Y+8	; 0x08
    4cb0:	f8 01       	movw	r30, r16
    4cb2:	e2 0f       	add	r30, r18
    4cb4:	f3 1f       	adc	r31, r19
    4cb6:	10 82       	st	Z, r1
    4cb8:	2e 96       	adiw	r28, 0x0e	; 14
    4cba:	0f b6       	in	r0, 0x3f	; 63
    4cbc:	f8 94       	cli
    4cbe:	de bf       	out	0x3e, r29	; 62
    4cc0:	0f be       	out	0x3f, r0	; 63
    4cc2:	cd bf       	out	0x3d, r28	; 61
    4cc4:	df 91       	pop	r29
    4cc6:	cf 91       	pop	r28
    4cc8:	1f 91       	pop	r17
    4cca:	0f 91       	pop	r16
    4ccc:	08 95       	ret

00004cce <__ultoa_invert>:
    4cce:	fa 01       	movw	r30, r20
    4cd0:	aa 27       	eor	r26, r26
    4cd2:	28 30       	cpi	r18, 0x08	; 8
    4cd4:	51 f1       	breq	.+84     	; 0x4d2a <__ultoa_invert+0x5c>
    4cd6:	20 31       	cpi	r18, 0x10	; 16
    4cd8:	81 f1       	breq	.+96     	; 0x4d3a <__ultoa_invert+0x6c>
    4cda:	e8 94       	clt
    4cdc:	6f 93       	push	r22
    4cde:	6e 7f       	andi	r22, 0xFE	; 254
    4ce0:	6e 5f       	subi	r22, 0xFE	; 254
    4ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ce4:	8f 4f       	sbci	r24, 0xFF	; 255
    4ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ce8:	af 4f       	sbci	r26, 0xFF	; 255
    4cea:	b1 e0       	ldi	r27, 0x01	; 1
    4cec:	3e d0       	rcall	.+124    	; 0x4d6a <__ultoa_invert+0x9c>
    4cee:	b4 e0       	ldi	r27, 0x04	; 4
    4cf0:	3c d0       	rcall	.+120    	; 0x4d6a <__ultoa_invert+0x9c>
    4cf2:	67 0f       	add	r22, r23
    4cf4:	78 1f       	adc	r23, r24
    4cf6:	89 1f       	adc	r24, r25
    4cf8:	9a 1f       	adc	r25, r26
    4cfa:	a1 1d       	adc	r26, r1
    4cfc:	68 0f       	add	r22, r24
    4cfe:	79 1f       	adc	r23, r25
    4d00:	8a 1f       	adc	r24, r26
    4d02:	91 1d       	adc	r25, r1
    4d04:	a1 1d       	adc	r26, r1
    4d06:	6a 0f       	add	r22, r26
    4d08:	71 1d       	adc	r23, r1
    4d0a:	81 1d       	adc	r24, r1
    4d0c:	91 1d       	adc	r25, r1
    4d0e:	a1 1d       	adc	r26, r1
    4d10:	20 d0       	rcall	.+64     	; 0x4d52 <__ultoa_invert+0x84>
    4d12:	09 f4       	brne	.+2      	; 0x4d16 <__ultoa_invert+0x48>
    4d14:	68 94       	set
    4d16:	3f 91       	pop	r19
    4d18:	2a e0       	ldi	r18, 0x0A	; 10
    4d1a:	26 9f       	mul	r18, r22
    4d1c:	11 24       	eor	r1, r1
    4d1e:	30 19       	sub	r19, r0
    4d20:	30 5d       	subi	r19, 0xD0	; 208
    4d22:	31 93       	st	Z+, r19
    4d24:	de f6       	brtc	.-74     	; 0x4cdc <__ultoa_invert+0xe>
    4d26:	cf 01       	movw	r24, r30
    4d28:	08 95       	ret
    4d2a:	46 2f       	mov	r20, r22
    4d2c:	47 70       	andi	r20, 0x07	; 7
    4d2e:	40 5d       	subi	r20, 0xD0	; 208
    4d30:	41 93       	st	Z+, r20
    4d32:	b3 e0       	ldi	r27, 0x03	; 3
    4d34:	0f d0       	rcall	.+30     	; 0x4d54 <__ultoa_invert+0x86>
    4d36:	c9 f7       	brne	.-14     	; 0x4d2a <__ultoa_invert+0x5c>
    4d38:	f6 cf       	rjmp	.-20     	; 0x4d26 <__ultoa_invert+0x58>
    4d3a:	46 2f       	mov	r20, r22
    4d3c:	4f 70       	andi	r20, 0x0F	; 15
    4d3e:	40 5d       	subi	r20, 0xD0	; 208
    4d40:	4a 33       	cpi	r20, 0x3A	; 58
    4d42:	18 f0       	brcs	.+6      	; 0x4d4a <__ultoa_invert+0x7c>
    4d44:	49 5d       	subi	r20, 0xD9	; 217
    4d46:	31 fd       	sbrc	r19, 1
    4d48:	40 52       	subi	r20, 0x20	; 32
    4d4a:	41 93       	st	Z+, r20
    4d4c:	02 d0       	rcall	.+4      	; 0x4d52 <__ultoa_invert+0x84>
    4d4e:	a9 f7       	brne	.-22     	; 0x4d3a <__ultoa_invert+0x6c>
    4d50:	ea cf       	rjmp	.-44     	; 0x4d26 <__ultoa_invert+0x58>
    4d52:	b4 e0       	ldi	r27, 0x04	; 4
    4d54:	a6 95       	lsr	r26
    4d56:	97 95       	ror	r25
    4d58:	87 95       	ror	r24
    4d5a:	77 95       	ror	r23
    4d5c:	67 95       	ror	r22
    4d5e:	ba 95       	dec	r27
    4d60:	c9 f7       	brne	.-14     	; 0x4d54 <__ultoa_invert+0x86>
    4d62:	00 97       	sbiw	r24, 0x00	; 0
    4d64:	61 05       	cpc	r22, r1
    4d66:	71 05       	cpc	r23, r1
    4d68:	08 95       	ret
    4d6a:	9b 01       	movw	r18, r22
    4d6c:	ac 01       	movw	r20, r24
    4d6e:	0a 2e       	mov	r0, r26
    4d70:	06 94       	lsr	r0
    4d72:	57 95       	ror	r21
    4d74:	47 95       	ror	r20
    4d76:	37 95       	ror	r19
    4d78:	27 95       	ror	r18
    4d7a:	ba 95       	dec	r27
    4d7c:	c9 f7       	brne	.-14     	; 0x4d70 <__ultoa_invert+0xa2>
    4d7e:	62 0f       	add	r22, r18
    4d80:	73 1f       	adc	r23, r19
    4d82:	84 1f       	adc	r24, r20
    4d84:	95 1f       	adc	r25, r21
    4d86:	a0 1d       	adc	r26, r0
    4d88:	08 95       	ret

00004d8a <__eerd_byte_m128rfa1>:
    4d8a:	f9 99       	sbic	0x1f, 1	; 31
    4d8c:	fe cf       	rjmp	.-4      	; 0x4d8a <__eerd_byte_m128rfa1>
    4d8e:	92 bd       	out	0x22, r25	; 34
    4d90:	81 bd       	out	0x21, r24	; 33
    4d92:	f8 9a       	sbi	0x1f, 0	; 31
    4d94:	99 27       	eor	r25, r25
    4d96:	80 b5       	in	r24, 0x20	; 32
    4d98:	08 95       	ret

00004d9a <__eewr_byte_m128rfa1>:
    4d9a:	26 2f       	mov	r18, r22

00004d9c <__eewr_r18_m128rfa1>:
    4d9c:	f9 99       	sbic	0x1f, 1	; 31
    4d9e:	fe cf       	rjmp	.-4      	; 0x4d9c <__eewr_r18_m128rfa1>
    4da0:	1f ba       	out	0x1f, r1	; 31
    4da2:	92 bd       	out	0x22, r25	; 34
    4da4:	81 bd       	out	0x21, r24	; 33
    4da6:	20 bd       	out	0x20, r18	; 32
    4da8:	0f b6       	in	r0, 0x3f	; 63
    4daa:	f8 94       	cli
    4dac:	fa 9a       	sbi	0x1f, 2	; 31
    4dae:	f9 9a       	sbi	0x1f, 1	; 31
    4db0:	0f be       	out	0x3f, r0	; 63
    4db2:	01 96       	adiw	r24, 0x01	; 1
    4db4:	08 95       	ret

00004db6 <calloc>:
    4db6:	0f 93       	push	r16
    4db8:	1f 93       	push	r17
    4dba:	cf 93       	push	r28
    4dbc:	df 93       	push	r29
    4dbe:	86 9f       	mul	r24, r22
    4dc0:	80 01       	movw	r16, r0
    4dc2:	87 9f       	mul	r24, r23
    4dc4:	10 0d       	add	r17, r0
    4dc6:	96 9f       	mul	r25, r22
    4dc8:	10 0d       	add	r17, r0
    4dca:	11 24       	eor	r1, r1
    4dcc:	c8 01       	movw	r24, r16
    4dce:	0e 94 f7 26 	call	0x4dee	; 0x4dee <malloc>
    4dd2:	ec 01       	movw	r28, r24
    4dd4:	00 97       	sbiw	r24, 0x00	; 0
    4dd6:	29 f0       	breq	.+10     	; 0x4de2 <calloc+0x2c>
    4dd8:	a8 01       	movw	r20, r16
    4dda:	60 e0       	ldi	r22, 0x00	; 0
    4ddc:	70 e0       	ldi	r23, 0x00	; 0
    4dde:	0e 94 24 28 	call	0x5048	; 0x5048 <memset>
    4de2:	ce 01       	movw	r24, r28
    4de4:	df 91       	pop	r29
    4de6:	cf 91       	pop	r28
    4de8:	1f 91       	pop	r17
    4dea:	0f 91       	pop	r16
    4dec:	08 95       	ret

00004dee <malloc>:
    4dee:	cf 93       	push	r28
    4df0:	df 93       	push	r29
    4df2:	82 30       	cpi	r24, 0x02	; 2
    4df4:	91 05       	cpc	r25, r1
    4df6:	10 f4       	brcc	.+4      	; 0x4dfc <malloc+0xe>
    4df8:	82 e0       	ldi	r24, 0x02	; 2
    4dfa:	90 e0       	ldi	r25, 0x00	; 0
    4dfc:	e0 91 d5 06 	lds	r30, 0x06D5
    4e00:	f0 91 d6 06 	lds	r31, 0x06D6
    4e04:	20 e0       	ldi	r18, 0x00	; 0
    4e06:	30 e0       	ldi	r19, 0x00	; 0
    4e08:	c0 e0       	ldi	r28, 0x00	; 0
    4e0a:	d0 e0       	ldi	r29, 0x00	; 0
    4e0c:	30 97       	sbiw	r30, 0x00	; 0
    4e0e:	11 f1       	breq	.+68     	; 0x4e54 <malloc+0x66>
    4e10:	40 81       	ld	r20, Z
    4e12:	51 81       	ldd	r21, Z+1	; 0x01
    4e14:	48 17       	cp	r20, r24
    4e16:	59 07       	cpc	r21, r25
    4e18:	c0 f0       	brcs	.+48     	; 0x4e4a <malloc+0x5c>
    4e1a:	48 17       	cp	r20, r24
    4e1c:	59 07       	cpc	r21, r25
    4e1e:	61 f4       	brne	.+24     	; 0x4e38 <malloc+0x4a>
    4e20:	82 81       	ldd	r24, Z+2	; 0x02
    4e22:	93 81       	ldd	r25, Z+3	; 0x03
    4e24:	20 97       	sbiw	r28, 0x00	; 0
    4e26:	19 f0       	breq	.+6      	; 0x4e2e <malloc+0x40>
    4e28:	9b 83       	std	Y+3, r25	; 0x03
    4e2a:	8a 83       	std	Y+2, r24	; 0x02
    4e2c:	2b c0       	rjmp	.+86     	; 0x4e84 <malloc+0x96>
    4e2e:	90 93 d6 06 	sts	0x06D6, r25
    4e32:	80 93 d5 06 	sts	0x06D5, r24
    4e36:	26 c0       	rjmp	.+76     	; 0x4e84 <malloc+0x96>
    4e38:	21 15       	cp	r18, r1
    4e3a:	31 05       	cpc	r19, r1
    4e3c:	19 f0       	breq	.+6      	; 0x4e44 <malloc+0x56>
    4e3e:	42 17       	cp	r20, r18
    4e40:	53 07       	cpc	r21, r19
    4e42:	18 f4       	brcc	.+6      	; 0x4e4a <malloc+0x5c>
    4e44:	9a 01       	movw	r18, r20
    4e46:	be 01       	movw	r22, r28
    4e48:	df 01       	movw	r26, r30
    4e4a:	ef 01       	movw	r28, r30
    4e4c:	02 80       	ldd	r0, Z+2	; 0x02
    4e4e:	f3 81       	ldd	r31, Z+3	; 0x03
    4e50:	e0 2d       	mov	r30, r0
    4e52:	dc cf       	rjmp	.-72     	; 0x4e0c <malloc+0x1e>
    4e54:	21 15       	cp	r18, r1
    4e56:	31 05       	cpc	r19, r1
    4e58:	09 f1       	breq	.+66     	; 0x4e9c <malloc+0xae>
    4e5a:	28 1b       	sub	r18, r24
    4e5c:	39 0b       	sbc	r19, r25
    4e5e:	24 30       	cpi	r18, 0x04	; 4
    4e60:	31 05       	cpc	r19, r1
    4e62:	90 f4       	brcc	.+36     	; 0x4e88 <malloc+0x9a>
    4e64:	12 96       	adiw	r26, 0x02	; 2
    4e66:	8d 91       	ld	r24, X+
    4e68:	9c 91       	ld	r25, X
    4e6a:	13 97       	sbiw	r26, 0x03	; 3
    4e6c:	61 15       	cp	r22, r1
    4e6e:	71 05       	cpc	r23, r1
    4e70:	21 f0       	breq	.+8      	; 0x4e7a <malloc+0x8c>
    4e72:	fb 01       	movw	r30, r22
    4e74:	93 83       	std	Z+3, r25	; 0x03
    4e76:	82 83       	std	Z+2, r24	; 0x02
    4e78:	04 c0       	rjmp	.+8      	; 0x4e82 <malloc+0x94>
    4e7a:	90 93 d6 06 	sts	0x06D6, r25
    4e7e:	80 93 d5 06 	sts	0x06D5, r24
    4e82:	fd 01       	movw	r30, r26
    4e84:	32 96       	adiw	r30, 0x02	; 2
    4e86:	44 c0       	rjmp	.+136    	; 0x4f10 <malloc+0x122>
    4e88:	fd 01       	movw	r30, r26
    4e8a:	e2 0f       	add	r30, r18
    4e8c:	f3 1f       	adc	r31, r19
    4e8e:	81 93       	st	Z+, r24
    4e90:	91 93       	st	Z+, r25
    4e92:	22 50       	subi	r18, 0x02	; 2
    4e94:	31 09       	sbc	r19, r1
    4e96:	2d 93       	st	X+, r18
    4e98:	3c 93       	st	X, r19
    4e9a:	3a c0       	rjmp	.+116    	; 0x4f10 <malloc+0x122>
    4e9c:	20 91 d3 06 	lds	r18, 0x06D3
    4ea0:	30 91 d4 06 	lds	r19, 0x06D4
    4ea4:	23 2b       	or	r18, r19
    4ea6:	41 f4       	brne	.+16     	; 0x4eb8 <malloc+0xca>
    4ea8:	20 91 12 02 	lds	r18, 0x0212
    4eac:	30 91 13 02 	lds	r19, 0x0213
    4eb0:	30 93 d4 06 	sts	0x06D4, r19
    4eb4:	20 93 d3 06 	sts	0x06D3, r18
    4eb8:	20 91 10 02 	lds	r18, 0x0210
    4ebc:	30 91 11 02 	lds	r19, 0x0211
    4ec0:	21 15       	cp	r18, r1
    4ec2:	31 05       	cpc	r19, r1
    4ec4:	41 f4       	brne	.+16     	; 0x4ed6 <malloc+0xe8>
    4ec6:	2d b7       	in	r18, 0x3d	; 61
    4ec8:	3e b7       	in	r19, 0x3e	; 62
    4eca:	40 91 14 02 	lds	r20, 0x0214
    4ece:	50 91 15 02 	lds	r21, 0x0215
    4ed2:	24 1b       	sub	r18, r20
    4ed4:	35 0b       	sbc	r19, r21
    4ed6:	e0 91 d3 06 	lds	r30, 0x06D3
    4eda:	f0 91 d4 06 	lds	r31, 0x06D4
    4ede:	e2 17       	cp	r30, r18
    4ee0:	f3 07       	cpc	r31, r19
    4ee2:	a0 f4       	brcc	.+40     	; 0x4f0c <malloc+0x11e>
    4ee4:	2e 1b       	sub	r18, r30
    4ee6:	3f 0b       	sbc	r19, r31
    4ee8:	28 17       	cp	r18, r24
    4eea:	39 07       	cpc	r19, r25
    4eec:	78 f0       	brcs	.+30     	; 0x4f0c <malloc+0x11e>
    4eee:	ac 01       	movw	r20, r24
    4ef0:	4e 5f       	subi	r20, 0xFE	; 254
    4ef2:	5f 4f       	sbci	r21, 0xFF	; 255
    4ef4:	24 17       	cp	r18, r20
    4ef6:	35 07       	cpc	r19, r21
    4ef8:	48 f0       	brcs	.+18     	; 0x4f0c <malloc+0x11e>
    4efa:	4e 0f       	add	r20, r30
    4efc:	5f 1f       	adc	r21, r31
    4efe:	50 93 d4 06 	sts	0x06D4, r21
    4f02:	40 93 d3 06 	sts	0x06D3, r20
    4f06:	81 93       	st	Z+, r24
    4f08:	91 93       	st	Z+, r25
    4f0a:	02 c0       	rjmp	.+4      	; 0x4f10 <malloc+0x122>
    4f0c:	e0 e0       	ldi	r30, 0x00	; 0
    4f0e:	f0 e0       	ldi	r31, 0x00	; 0
    4f10:	cf 01       	movw	r24, r30
    4f12:	df 91       	pop	r29
    4f14:	cf 91       	pop	r28
    4f16:	08 95       	ret

00004f18 <free>:
    4f18:	0f 93       	push	r16
    4f1a:	1f 93       	push	r17
    4f1c:	cf 93       	push	r28
    4f1e:	df 93       	push	r29
    4f20:	00 97       	sbiw	r24, 0x00	; 0
    4f22:	09 f4       	brne	.+2      	; 0x4f26 <free+0xe>
    4f24:	8c c0       	rjmp	.+280    	; 0x503e <free+0x126>
    4f26:	fc 01       	movw	r30, r24
    4f28:	32 97       	sbiw	r30, 0x02	; 2
    4f2a:	13 82       	std	Z+3, r1	; 0x03
    4f2c:	12 82       	std	Z+2, r1	; 0x02
    4f2e:	00 91 d5 06 	lds	r16, 0x06D5
    4f32:	10 91 d6 06 	lds	r17, 0x06D6
    4f36:	01 15       	cp	r16, r1
    4f38:	11 05       	cpc	r17, r1
    4f3a:	81 f4       	brne	.+32     	; 0x4f5c <free+0x44>
    4f3c:	20 81       	ld	r18, Z
    4f3e:	31 81       	ldd	r19, Z+1	; 0x01
    4f40:	82 0f       	add	r24, r18
    4f42:	93 1f       	adc	r25, r19
    4f44:	20 91 d3 06 	lds	r18, 0x06D3
    4f48:	30 91 d4 06 	lds	r19, 0x06D4
    4f4c:	28 17       	cp	r18, r24
    4f4e:	39 07       	cpc	r19, r25
    4f50:	79 f5       	brne	.+94     	; 0x4fb0 <free+0x98>
    4f52:	f0 93 d4 06 	sts	0x06D4, r31
    4f56:	e0 93 d3 06 	sts	0x06D3, r30
    4f5a:	71 c0       	rjmp	.+226    	; 0x503e <free+0x126>
    4f5c:	d8 01       	movw	r26, r16
    4f5e:	40 e0       	ldi	r20, 0x00	; 0
    4f60:	50 e0       	ldi	r21, 0x00	; 0
    4f62:	ae 17       	cp	r26, r30
    4f64:	bf 07       	cpc	r27, r31
    4f66:	50 f4       	brcc	.+20     	; 0x4f7c <free+0x64>
    4f68:	12 96       	adiw	r26, 0x02	; 2
    4f6a:	2d 91       	ld	r18, X+
    4f6c:	3c 91       	ld	r19, X
    4f6e:	13 97       	sbiw	r26, 0x03	; 3
    4f70:	ad 01       	movw	r20, r26
    4f72:	21 15       	cp	r18, r1
    4f74:	31 05       	cpc	r19, r1
    4f76:	09 f1       	breq	.+66     	; 0x4fba <free+0xa2>
    4f78:	d9 01       	movw	r26, r18
    4f7a:	f3 cf       	rjmp	.-26     	; 0x4f62 <free+0x4a>
    4f7c:	9d 01       	movw	r18, r26
    4f7e:	da 01       	movw	r26, r20
    4f80:	33 83       	std	Z+3, r19	; 0x03
    4f82:	22 83       	std	Z+2, r18	; 0x02
    4f84:	60 81       	ld	r22, Z
    4f86:	71 81       	ldd	r23, Z+1	; 0x01
    4f88:	86 0f       	add	r24, r22
    4f8a:	97 1f       	adc	r25, r23
    4f8c:	82 17       	cp	r24, r18
    4f8e:	93 07       	cpc	r25, r19
    4f90:	69 f4       	brne	.+26     	; 0x4fac <free+0x94>
    4f92:	ec 01       	movw	r28, r24
    4f94:	28 81       	ld	r18, Y
    4f96:	39 81       	ldd	r19, Y+1	; 0x01
    4f98:	26 0f       	add	r18, r22
    4f9a:	37 1f       	adc	r19, r23
    4f9c:	2e 5f       	subi	r18, 0xFE	; 254
    4f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    4fa0:	31 83       	std	Z+1, r19	; 0x01
    4fa2:	20 83       	st	Z, r18
    4fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    4fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    4fa8:	93 83       	std	Z+3, r25	; 0x03
    4faa:	82 83       	std	Z+2, r24	; 0x02
    4fac:	45 2b       	or	r20, r21
    4fae:	29 f4       	brne	.+10     	; 0x4fba <free+0xa2>
    4fb0:	f0 93 d6 06 	sts	0x06D6, r31
    4fb4:	e0 93 d5 06 	sts	0x06D5, r30
    4fb8:	42 c0       	rjmp	.+132    	; 0x503e <free+0x126>
    4fba:	13 96       	adiw	r26, 0x03	; 3
    4fbc:	fc 93       	st	X, r31
    4fbe:	ee 93       	st	-X, r30
    4fc0:	12 97       	sbiw	r26, 0x02	; 2
    4fc2:	ed 01       	movw	r28, r26
    4fc4:	49 91       	ld	r20, Y+
    4fc6:	59 91       	ld	r21, Y+
    4fc8:	9e 01       	movw	r18, r28
    4fca:	24 0f       	add	r18, r20
    4fcc:	35 1f       	adc	r19, r21
    4fce:	e2 17       	cp	r30, r18
    4fd0:	f3 07       	cpc	r31, r19
    4fd2:	71 f4       	brne	.+28     	; 0x4ff0 <free+0xd8>
    4fd4:	80 81       	ld	r24, Z
    4fd6:	91 81       	ldd	r25, Z+1	; 0x01
    4fd8:	84 0f       	add	r24, r20
    4fda:	95 1f       	adc	r25, r21
    4fdc:	02 96       	adiw	r24, 0x02	; 2
    4fde:	11 96       	adiw	r26, 0x01	; 1
    4fe0:	9c 93       	st	X, r25
    4fe2:	8e 93       	st	-X, r24
    4fe4:	82 81       	ldd	r24, Z+2	; 0x02
    4fe6:	93 81       	ldd	r25, Z+3	; 0x03
    4fe8:	13 96       	adiw	r26, 0x03	; 3
    4fea:	9c 93       	st	X, r25
    4fec:	8e 93       	st	-X, r24
    4fee:	12 97       	sbiw	r26, 0x02	; 2
    4ff0:	e0 e0       	ldi	r30, 0x00	; 0
    4ff2:	f0 e0       	ldi	r31, 0x00	; 0
    4ff4:	d8 01       	movw	r26, r16
    4ff6:	12 96       	adiw	r26, 0x02	; 2
    4ff8:	8d 91       	ld	r24, X+
    4ffa:	9c 91       	ld	r25, X
    4ffc:	13 97       	sbiw	r26, 0x03	; 3
    4ffe:	00 97       	sbiw	r24, 0x00	; 0
    5000:	19 f0       	breq	.+6      	; 0x5008 <free+0xf0>
    5002:	f8 01       	movw	r30, r16
    5004:	8c 01       	movw	r16, r24
    5006:	f6 cf       	rjmp	.-20     	; 0x4ff4 <free+0xdc>
    5008:	8d 91       	ld	r24, X+
    500a:	9c 91       	ld	r25, X
    500c:	98 01       	movw	r18, r16
    500e:	2e 5f       	subi	r18, 0xFE	; 254
    5010:	3f 4f       	sbci	r19, 0xFF	; 255
    5012:	82 0f       	add	r24, r18
    5014:	93 1f       	adc	r25, r19
    5016:	20 91 d3 06 	lds	r18, 0x06D3
    501a:	30 91 d4 06 	lds	r19, 0x06D4
    501e:	28 17       	cp	r18, r24
    5020:	39 07       	cpc	r19, r25
    5022:	69 f4       	brne	.+26     	; 0x503e <free+0x126>
    5024:	30 97       	sbiw	r30, 0x00	; 0
    5026:	29 f4       	brne	.+10     	; 0x5032 <free+0x11a>
    5028:	10 92 d6 06 	sts	0x06D6, r1
    502c:	10 92 d5 06 	sts	0x06D5, r1
    5030:	02 c0       	rjmp	.+4      	; 0x5036 <free+0x11e>
    5032:	13 82       	std	Z+3, r1	; 0x03
    5034:	12 82       	std	Z+2, r1	; 0x02
    5036:	10 93 d4 06 	sts	0x06D4, r17
    503a:	00 93 d3 06 	sts	0x06D3, r16
    503e:	df 91       	pop	r29
    5040:	cf 91       	pop	r28
    5042:	1f 91       	pop	r17
    5044:	0f 91       	pop	r16
    5046:	08 95       	ret

00005048 <memset>:
    5048:	dc 01       	movw	r26, r24
    504a:	01 c0       	rjmp	.+2      	; 0x504e <memset+0x6>
    504c:	6d 93       	st	X+, r22
    504e:	41 50       	subi	r20, 0x01	; 1
    5050:	50 40       	sbci	r21, 0x00	; 0
    5052:	e0 f7       	brcc	.-8      	; 0x504c <memset+0x4>
    5054:	08 95       	ret

00005056 <_exit>:
    5056:	f8 94       	cli

00005058 <__stop_program>:
    5058:	ff cf       	rjmp	.-2      	; 0x5058 <__stop_program>
