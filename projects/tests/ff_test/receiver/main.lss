
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ca  00800200  000050aa  0000513e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000050aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000314  008003ca  008003ca  00005308  2**0
                  ALLOC
  3 .stab         0000fff0  00000000  00000000  00005308  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008e61  00000000  00000000  000152f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0001e159  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  0001e16a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  0001f2ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  0002033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  00020359  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 14 02 	jmp	0x428	; 0x428 <__ctors_end>
       4:	0c 94 cd 21 	jmp	0x439a	; 0x439a <__vector_1>
       8:	0c 94 ff 21 	jmp	0x43fe	; 0x43fe <__vector_2>
       c:	0c 94 31 22 	jmp	0x4462	; 0x4462 <__vector_3>
      10:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      14:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      18:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      1c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      20:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      24:	0c 94 9b 21 	jmp	0x4336	; 0x4336 <__vector_9>
      28:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      2c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      30:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      34:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <__vector_13>
      38:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      3c:	0c 94 fa 1f 	jmp	0x3ff4	; 0x3ff4 <__vector_13>
      40:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      44:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      48:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      4c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      50:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      54:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      58:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      5c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      60:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      64:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__vector_25>
      68:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      6c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      70:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      74:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      78:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      7c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      80:	0c 94 2d 20 	jmp	0x405a	; 0x405a <__vector_32>
      84:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      88:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      8c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      90:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      94:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      98:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      9c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      a0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      a4:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      a8:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      ac:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      b0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      b4:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      b8:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      bc:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      c0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      c4:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      c8:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      cc:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      d0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      d4:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      d8:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      dc:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      e0:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
      e4:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__vector_57>
      e8:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__vector_58>
      ec:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__vector_59>
      f0:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__vector_60>
      f4:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__vector_61>
      f8:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__vector_62>
      fc:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <__vector_63>
     100:	0c 94 7e 05 	jmp	0xafc	; 0xafc <__vector_64>
     104:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     108:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     10c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     110:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     114:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     118:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     11c:	0c 94 33 02 	jmp	0x466	; 0x466 <__bad_interrupt>
     120:	bb 08       	sbc	r11, r11
     122:	c8 08       	sbc	r12, r8
     124:	d5 08       	sbc	r13, r5
     126:	e2 08       	sbc	r14, r2
     128:	ef 08       	sbc	r14, r15
     12a:	fc 08       	sbc	r15, r12
     12c:	09 09       	sbc	r16, r9
     12e:	2c 09       	sbc	r18, r12
     130:	3a 09       	sbc	r19, r10
     132:	48 09       	sbc	r20, r8
     134:	56 09       	sbc	r21, r6
     136:	64 09       	sbc	r22, r4
     138:	72 09       	sbc	r23, r2
     13a:	80 09       	sbc	r24, r0
     13c:	a3 09       	sbc	r26, r3
     13e:	a5 09       	sbc	r26, r5
     140:	a7 09       	sbc	r26, r7
     142:	a9 09       	sbc	r26, r9
     144:	ab 09       	sbc	r26, r11
     146:	ad 09       	sbc	r26, r13
     148:	af 09       	sbc	r26, r15
     14a:	ce 09       	sbc	r28, r14
     14c:	f1 09       	sbc	r31, r1
     14e:	15 0a       	sbc	r1, r21
     150:	38 0a       	sbc	r3, r24
     152:	5b 0a       	sbc	r5, r27
     154:	7e 0a       	sbc	r7, r30
     156:	a1 0a       	sbc	r10, r17
     158:	db 0a       	sbc	r13, r27
     15a:	e8 0a       	sbc	r14, r24
     15c:	f5 0a       	sbc	r15, r21
     15e:	02 0b       	sbc	r16, r18
     160:	0f 0b       	sbc	r16, r31
     162:	1c 0b       	sbc	r17, r28
     164:	29 0b       	sbc	r18, r25
     166:	42 0b       	sbc	r20, r18
     168:	4f 0b       	sbc	r20, r31
     16a:	5c 0b       	sbc	r21, r28
     16c:	69 0b       	sbc	r22, r25
     16e:	76 0b       	sbc	r23, r22
     170:	83 0b       	sbc	r24, r19
     172:	90 0b       	sbc	r25, r16
     174:	64 0f       	add	r22, r20
     176:	67 0f       	add	r22, r23
     178:	72 0f       	add	r23, r18
     17a:	77 0f       	add	r23, r23
     17c:	7e 0f       	add	r23, r30
     17e:	87 0f       	add	r24, r23
     180:	8a 0f       	add	r24, r26
     182:	8f 0f       	add	r24, r31
     184:	96 0f       	add	r25, r22
     186:	9f 0f       	add	r25, r31
     188:	f5 0f       	add	r31, r21
     18a:	fb 0f       	add	r31, r27
     18c:	fe 0f       	add	r31, r30
     18e:	01 10       	cpse	r0, r1
     190:	04 10       	cpse	r0, r4
     192:	07 10       	cpse	r0, r7
     194:	0d 10       	cpse	r0, r13
     196:	0a 10       	cpse	r0, r10
     198:	10 10       	cpse	r1, r0
     19a:	13 10       	cpse	r1, r3
     19c:	16 10       	cpse	r1, r6
     19e:	1f 10       	cpse	r1, r15
     1a0:	22 10       	cpse	r2, r2
     1a2:	25 10       	cpse	r2, r5
     1a4:	28 10       	cpse	r2, r8
     1a6:	1c 10       	cpse	r1, r12
     1a8:	f2 0f       	add	r31, r18
     1aa:	f8 0f       	add	r31, r24
     1ac:	2b 10       	cpse	r2, r11
     1ae:	2e 10       	cpse	r2, r14
     1b0:	19 10       	cpse	r1, r9
     1b2:	ef 0f       	add	r30, r31

000001b4 <__trampolines_end>:
     1b4:	75 61       	ori	r23, 0x15	; 21
     1b6:	72 74       	andi	r23, 0x42	; 66
     1b8:	20 72       	andi	r18, 0x20	; 32
     1ba:	78 20       	and	r7, r8
     1bc:	73 69       	ori	r23, 0x93	; 147
     1be:	67 20       	and	r6, r7
     1c0:	66 61       	ori	r22, 0x16	; 22
     1c2:	69 6c       	ori	r22, 0xC9	; 201
     1c4:	65 64       	ori	r22, 0x45	; 69
     1c6:	0d 0a       	sbc	r0, r29
	...

000001c9 <__c.3388>:
     1c9:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000001d0 <__c.3385>:
     1d0:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000001df <__c.3382>:
     1df:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000001f0 <__c.3379>:
     1f0:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     200:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

0000020b <__c.3376>:
     20b:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     21b:	20 53 69 67 6e 61 6c 00                              Signal.

00000223 <__c.3373>:
     223:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     233:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000243 <__c.3370>:
     243:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     253:	72 6f 72 00                                         ror.

00000257 <__c.3367>:
     257:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000268 <__c.3364>:
     268:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     278:	61 72 74 00                                         art.

0000027c <__c.3361>:
     27c:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

0000028b <__c.3358>:
     28b:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     29b:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

000002a6 <__c.3355>:
     2a6:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

000002b2 <__c.3352>:
     2b2:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     2c2:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     2d2:	20 6f 6b 3f 00                                       ok?.

000002d7 <__c.3349>:
     2d7:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2e7:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002f5 <__c.3346>:
     2f5:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     305:	72 74 00                                            rt.

00000308 <__c.3343>:
     308:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     318:	49 44 00                                            ID.

0000031b <__c.3340>:
     31b:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     32b:	20 57 61 6b 65 75 70 00                              Wakeup.

00000333 <__c.3337>:
     333:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     343:	6c 61 74 65 64 00                                   lated.

00000349 <__c.3334>:
     349:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     359:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000364 <__c.3331>:
     364:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     374:	69 6e 74 65 72 00                                   inter.

0000037a <__c.3328>:
     37a:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     38a:	6c 6f 77 00                                         low.

0000038e <__c.3325>:
     38e:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     39e:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     3ae:	6e 6f 75 67 68 21 00                                nough!.

000003b5 <__c.3321>:
     3b5:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     3c5:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     3d5:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     3e5:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

000003f1 <__c.3318>:
     3f1:	29 3a 20 00                                         ): .

000003f5 <__c.3316>:
     3f5:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000401 <__c.3246>:
     401:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000410 <__c.2228>:
     410:	45 46 47 65 66 67 00                                EFGefg.

00000417 <__c.2222>:
     417:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

00000428 <__ctors_end>:
     428:	11 24       	eor	r1, r1
     42a:	1f be       	out	0x3f, r1	; 63
     42c:	cf ef       	ldi	r28, 0xFF	; 255
     42e:	d1 e4       	ldi	r29, 0x41	; 65
     430:	de bf       	out	0x3e, r29	; 62
     432:	cd bf       	out	0x3d, r28	; 61

00000434 <__do_copy_data>:
     434:	13 e0       	ldi	r17, 0x03	; 3
     436:	a0 e0       	ldi	r26, 0x00	; 0
     438:	b2 e0       	ldi	r27, 0x02	; 2
     43a:	ea ea       	ldi	r30, 0xAA	; 170
     43c:	f0 e5       	ldi	r31, 0x50	; 80
     43e:	00 e0       	ldi	r16, 0x00	; 0
     440:	0b bf       	out	0x3b, r16	; 59
     442:	02 c0       	rjmp	.+4      	; 0x448 <__do_copy_data+0x14>
     444:	07 90       	elpm	r0, Z+
     446:	0d 92       	st	X+, r0
     448:	aa 3c       	cpi	r26, 0xCA	; 202
     44a:	b1 07       	cpc	r27, r17
     44c:	d9 f7       	brne	.-10     	; 0x444 <__do_copy_data+0x10>

0000044e <__do_clear_bss>:
     44e:	16 e0       	ldi	r17, 0x06	; 6
     450:	aa ec       	ldi	r26, 0xCA	; 202
     452:	b3 e0       	ldi	r27, 0x03	; 3
     454:	01 c0       	rjmp	.+2      	; 0x458 <.do_clear_bss_start>

00000456 <.do_clear_bss_loop>:
     456:	1d 92       	st	X+, r1

00000458 <.do_clear_bss_start>:
     458:	ae 3d       	cpi	r26, 0xDE	; 222
     45a:	b1 07       	cpc	r27, r17
     45c:	e1 f7       	brne	.-8      	; 0x456 <.do_clear_bss_loop>
     45e:	0e 94 46 23 	call	0x468c	; 0x468c <main>
     462:	0c 94 53 28 	jmp	0x50a6	; 0x50a6 <_exit>

00000466 <__bad_interrupt>:
     466:	0c 94 f0 1f 	jmp	0x3fe0	; 0x3fe0 <__vector_default>

0000046a <rf_start_callback>:
RF_RX_INFO pRRI;
char buf[100];

void rf_start_callback()
{
	printf("received packet!\r\n");
     46a:	87 e6       	ldi	r24, 0x67	; 103
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <puts>
	nrk_led_toggle(BLUE_LED);
     472:	83 e0       	ldi	r24, 0x03	; 3
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <nrk_led_toggle>

0000047a <rf_finish_callback>:
}

void rf_finish_callback()
{
	if (rf_rx_packet_nonblock() != NRK_OK)
     47a:	0e 94 8a 04 	call	0x914	; 0x914 <rf_rx_packet_nonblock>
     47e:	81 30       	cpi	r24, 0x01	; 1
     480:	21 f0       	breq	.+8      	; 0x48a <rf_finish_callback+0x10>
		printf("failed to receive packet\r\n");
     482:	89 e7       	ldi	r24, 0x79	; 121
     484:	92 e0       	ldi	r25, 0x02	; 2
     486:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <puts>
	rf_rx_off();
     48a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <rf_rx_off>
	rf_rx_on();
     48e:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <rf_rx_on>

00000492 <rf_cmd>:
}


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
     492:	cf 93       	push	r28
     494:	c8 2f       	mov	r28, r24
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     496:	90 91 41 01 	lds	r25, 0x0141
     49a:	9f 71       	andi	r25, 0x1F	; 31
     49c:	9f 31       	cpi	r25, 0x1F	; 31
     49e:	d9 f3       	breq	.-10     	; 0x496 <rf_cmd+0x4>
		continue;
	// added for accessing buffer immediately before transmission for Flash implementation
	if ((cmd == 0x2) && tx_start_func)
     4a0:	c2 30       	cpi	r28, 0x02	; 2
     4a2:	79 f4       	brne	.+30     	; 0x4c2 <rf_cmd+0x30>
     4a4:	e0 91 cb 03 	lds	r30, 0x03CB
     4a8:	f0 91 cc 03 	lds	r31, 0x03CC
     4ac:	30 97       	sbiw	r30, 0x00	; 0
     4ae:	49 f0       	breq	.+18     	; 0x4c2 <rf_cmd+0x30>
		tx_start_func(tx_len, tx_buf);
     4b0:	60 91 08 05 	lds	r22, 0x0508
     4b4:	70 91 09 05 	lds	r23, 0x0509
     4b8:	80 91 20 05 	lds	r24, 0x0520
     4bc:	90 91 21 05 	lds	r25, 0x0521
     4c0:	09 95       	icall
	TRX_STATE = cmd;
     4c2:	c0 93 42 01 	sts	0x0142, r28
}
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <set_wireless_prog>:
uint8_t reset_val[] = {0x43, 0x15, 0xa6, 0xd9, 0x3d, 0x31, 0x82, 0xf1, 0x8c, 0xa7, 0x4f, 0xc5, 0x99, 0x97, 0x04, 0xac};


void set_wireless_prog(uint8_t val)
{
   wireless_prog = val;
     4ca:	80 93 ca 03 	sts	0x03CA, r24
     4ce:	08 95       	ret

000004d0 <rf_enable_glossy>:
}

void rf_enable_glossy()
{
	use_glossy = 1;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	80 93 ea 04 	sts	0x04EA, r24
     4d6:	08 95       	ret

000004d8 <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
     4d8:	10 92 ea 04 	sts	0x04EA, r1
     4dc:	08 95       	ret

000004de <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     4de:	80 91 41 01 	lds	r24, 0x0141
     4e2:	8f 71       	andi	r24, 0x1F	; 31
     4e4:	8f 31       	cpi	r24, 0x1F	; 31
     4e6:	d9 f3       	breq	.-10     	; 0x4de <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     4e8:	80 91 41 01 	lds	r24, 0x0141
     4ec:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
     4ee:	e1 f0       	breq	.+56     	; 0x528 <rf_power_down+0x4a>
     4f0:	8f 30       	cpi	r24, 0x0F	; 15
     4f2:	d1 f0       	breq	.+52     	; 0x528 <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
     4f4:	80 91 41 01 	lds	r24, 0x0141
     4f8:	8f 71       	andi	r24, 0x1F	; 31
     4fa:	88 30       	cpi	r24, 0x08	; 8
     4fc:	31 f4       	brne	.+12     	; 0x50a <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
     4fe:	80 91 39 01 	lds	r24, 0x0139
     502:	82 60       	ori	r24, 0x02	; 2
     504:	80 93 39 01 	sts	0x0139, r24
     508:	0b c0       	rjmp	.+22     	; 0x520 <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
     50a:	88 e0       	ldi	r24, 0x08	; 8
     50c:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
     510:	80 91 41 01 	lds	r24, 0x0141
     514:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
     516:	88 30       	cpi	r24, 0x08	; 8
     518:	d9 f7       	brne	.-10     	; 0x510 <rf_power_down+0x32>
     51a:	f1 cf       	rjmp	.-30     	; 0x4fe <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
     51c:	8f 30       	cpi	r24, 0x0F	; 15
     51e:	21 f0       	breq	.+8      	; 0x528 <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
     520:	80 91 41 01 	lds	r24, 0x0141
     524:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
     526:	d1 f7       	brne	.-12     	; 0x51c <rf_power_down+0x3e>
     528:	08 95       	ret

0000052a <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     52a:	80 91 41 01 	lds	r24, 0x0141
     52e:	8f 71       	andi	r24, 0x1F	; 31
     530:	8f 31       	cpi	r24, 0x1F	; 31
     532:	d9 f3       	breq	.-10     	; 0x52a <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     534:	80 91 41 01 	lds	r24, 0x0141
     538:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
     53a:	11 f0       	breq	.+4      	; 0x540 <rf_power_up+0x16>
     53c:	8f 30       	cpi	r24, 0x0F	; 15
     53e:	51 f4       	brne	.+20     	; 0x554 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
     540:	80 91 39 01 	lds	r24, 0x0139
     544:	8d 7f       	andi	r24, 0xFD	; 253
     546:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
     54a:	80 91 41 01 	lds	r24, 0x0141
     54e:	8f 71       	andi	r24, 0x1F	; 31
     550:	88 30       	cpi	r24, 0x08	; 8
     552:	d9 f7       	brne	.-10     	; 0x54a <rf_power_up+0x20>
     554:	08 95       	ret

00000556 <rf_pll_on>:
	TRX_STATE = cmd;
}

void rf_pll_on()
{
   rf_cmd(PLL_ON);
     556:	89 e0       	ldi	r24, 0x09	; 9
     558:	0c 94 49 02 	jmp	0x492	; 0x492 <rf_cmd>

0000055c <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
     55c:	e5 e4       	ldi	r30, 0x45	; 69
     55e:	f1 e0       	ldi	r31, 0x01	; 1
     560:	90 81       	ld	r25, Z
     562:	90 7f       	andi	r25, 0xF0	; 240
     564:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
     566:	90 81       	ld	r25, Z
     568:	8f 70       	andi	r24, 0x0F	; 15
     56a:	98 2b       	or	r25, r24
     56c:	90 83       	st	Z, r25
     56e:	08 95       	ret

00000570 <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
     570:	e7 e5       	ldi	r30, 0x57	; 87
     572:	f1 e0       	ldi	r31, 0x01	; 1
     574:	80 81       	ld	r24, Z
     576:	8d 7f       	andi	r24, 0xFD	; 253
     578:	80 83       	st	Z, r24
     57a:	08 95       	ret

0000057c <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
     57c:	e7 e5       	ldi	r30, 0x57	; 87
     57e:	f1 e0       	ldi	r31, 0x01	; 1
     580:	80 81       	ld	r24, Z
     582:	82 60       	ori	r24, 0x02	; 2
     584:	80 83       	st	Z, r24
     586:	08 95       	ret

00000588 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
     588:	ee e6       	ldi	r30, 0x6E	; 110
     58a:	f1 e0       	ldi	r31, 0x01	; 1
     58c:	80 81       	ld	r24, Z
     58e:	8f 7e       	andi	r24, 0xEF	; 239
     590:	80 83       	st	Z, r24
     592:	08 95       	ret

00000594 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
     594:	ee e6       	ldi	r30, 0x6E	; 110
     596:	f1 e0       	ldi	r31, 0x01	; 1
     598:	80 81       	ld	r24, Z
     59a:	80 61       	ori	r24, 0x10	; 16
     59c:	80 83       	st	Z, r24
     59e:	08 95       	ret

000005a0 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
     5a0:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
     5a4:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
     5a8:	90 93 f4 04 	sts	0x04F4, r25
     5ac:	80 93 f3 04 	sts	0x04F3, r24
     5b0:	08 95       	ret

000005b2 <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
     5b2:	90 93 ee 04 	sts	0x04EE, r25
     5b6:	80 93 ed 04 	sts	0x04ED, r24
	PHY_CC_CCA &= ~(0x1F);
     5ba:	e8 e4       	ldi	r30, 0x48	; 72
     5bc:	f1 e0       	ldi	r31, 0x01	; 1
     5be:	80 81       	ld	r24, Z
     5c0:	80 7e       	andi	r24, 0xE0	; 224
     5c2:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
     5c4:	80 81       	ld	r24, Z
     5c6:	68 2b       	or	r22, r24
     5c8:	60 83       	st	Z, r22
     5ca:	08 95       	ret

000005cc <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
     5cc:	90 93 d0 03 	sts	0x03D0, r25
     5d0:	80 93 cf 03 	sts	0x03CF, r24
     5d4:	08 95       	ret

000005d6 <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
     5d6:	90 93 ce 03 	sts	0x03CE, r25
     5da:	80 93 cd 03 	sts	0x03CD, r24
     5de:	08 95       	ret

000005e0 <tx_start_callback>:
}

void tx_start_callback(void (*func)(uint16_t, uint8_t*)) {
	tx_start_func = func;
     5e0:	90 93 cc 03 	sts	0x03CC, r25
     5e4:	80 93 cb 03 	sts	0x03CB, r24
     5e8:	08 95       	ret

000005ea <rf_init>:
}

void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	fc 01       	movw	r30, r24
     5f4:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
     5f6:	80 e2       	ldi	r24, 0x20	; 32
     5f8:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
     5fc:	80 ec       	ldi	r24, 0xC0	; 192
     5fe:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
     602:	60 62       	ori	r22, 0x20	; 32
     604:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
     608:	85 ec       	ldi	r24, 0xC5	; 197
     60a:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
     60e:	87 ea       	ldi	r24, 0xA7	; 167
     610:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
     614:	80 e8       	ldi	r24, 0x80	; 128
     616:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
     61a:	20 93 60 01 	sts	0x0160, r18
     61e:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
     622:	40 93 62 01 	sts	0x0162, r20
     626:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     62a:	c6 e4       	ldi	r28, 0x46	; 70
     62c:	d1 e0       	ldi	r29, 0x01	; 1
     62e:	08 81       	ld	r16, Y
     630:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     632:	98 81       	ld	r25, Y
     634:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     636:	30 2f       	mov	r19, r16
     638:	32 95       	swap	r19
     63a:	36 95       	lsr	r19
     63c:	37 70       	andi	r19, 0x07	; 7
     63e:	60 e4       	ldi	r22, 0x40	; 64
     640:	36 9f       	mul	r19, r22
     642:	80 01       	movw	r16, r0
     644:	11 24       	eor	r1, r1
     646:	22 95       	swap	r18
     648:	26 95       	lsr	r18
     64a:	23 70       	andi	r18, 0x03	; 3
     64c:	62 2f       	mov	r22, r18
     64e:	60 2b       	or	r22, r16
     650:	82 95       	swap	r24
     652:	86 95       	lsr	r24
     654:	83 70       	andi	r24, 0x03	; 3
     656:	70 e1       	ldi	r23, 0x10	; 16
     658:	87 9f       	mul	r24, r23
     65a:	90 01       	movw	r18, r0
     65c:	11 24       	eor	r1, r1
     65e:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     660:	92 95       	swap	r25
     662:	96 95       	lsr	r25
     664:	93 70       	andi	r25, 0x03	; 3
     666:	84 e0       	ldi	r24, 0x04	; 4
     668:	98 9f       	mul	r25, r24
     66a:	b0 01       	movw	r22, r0
     66c:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     66e:	62 2b       	or	r22, r18
     670:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     674:	88 81       	ld	r24, Y
     676:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     678:	92 95       	swap	r25
     67a:	96 95       	lsr	r25
     67c:	93 70       	andi	r25, 0x03	; 3
     67e:	39 2f       	mov	r19, r25
     680:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     682:	98 2f       	mov	r25, r24
     684:	92 95       	swap	r25
     686:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     688:	93 2b       	or	r25, r19
     68a:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
     68e:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
   
   /* Enable all radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
     692:	8f ef       	ldi	r24, 0xFF	; 255
     694:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
     698:	cd ee       	ldi	r28, 0xED	; 237
     69a:	d4 e0       	ldi	r29, 0x04	; 4
     69c:	f9 83       	std	Y+1, r31	; 0x01
     69e:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
     6a0:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
     6a2:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
     6a4:	5d 83       	std	Y+5, r21	; 0x05
     6a6:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
     6a8:	bf 83       	std	Y+7, r27	; 0x07
     6aa:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
     6ac:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	80 93 07 05 	sts	0x0507, r24
   rx_ready = 0;
     6b4:	10 92 22 05 	sts	0x0522, r1
   tx_done = 0;
     6b8:	10 92 f6 04 	sts	0x04F6, r1

	use_glossy = 0;
     6bc:	10 92 ea 04 	sts	0x04EA, r1

} // rf_init() 
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	08 95       	ret

000006ca <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
     6ca:	86 e1       	ldi	r24, 0x16	; 22
     6cc:	0c 94 49 02 	jmp	0x492	; 0x492 <rf_cmd>

000006d0 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
     6d0:	86 e1       	ldi	r24, 0x16	; 22
     6d2:	0c 94 49 02 	jmp	0x492	; 0x492 <rf_cmd>

000006d6 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
   rf_cmd(TRX_OFF);
     6d6:	88 e0       	ldi	r24, 0x08	; 8
     6d8:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
   rx_ready = 0;
     6dc:	10 92 22 05 	sts	0x0522, r1
     6e0:	08 95       	ret

000006e2 <rf_tx_packet>:
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------


uint8_t rf_tx_packet(RF_TX_INFO *pRTI)
{
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	ec 01       	movw	r28, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
     6ea:	80 91 07 05 	lds	r24, 0x0507
     6ee:	81 11       	cpse	r24, r1
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <rf_tx_packet+0x14>
		return NRK_ERROR;
     6f2:	8f ef       	ldi	r24, 0xFF	; 255
     6f4:	ba c0       	rjmp	.+372    	; 0x86a <rf_tx_packet+0x188>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
     6f6:	2e 81       	ldd	r18, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     6f8:	80 91 ef 04 	lds	r24, 0x04EF
     6fc:	8f 5f       	subi	r24, 0xFF	; 255
     6fe:	80 93 ef 04 	sts	0x04EF, r24
	machead->fcf = fcf;
     702:	90 91 81 01 	lds	r25, 0x0181
     706:	90 7e       	andi	r25, 0xE0	; 224
     708:	91 60       	ori	r25, 0x01	; 1
     70a:	20 fb       	bst	r18, 0
     70c:	95 f9       	bld	r25, 5
     70e:	9f 73       	andi	r25, 0x3F	; 63
     710:	90 64       	ori	r25, 0x40	; 64
     712:	90 93 81 01 	sts	0x0181, r25
     716:	88 e8       	ldi	r24, 0x88	; 136
     718:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
     71c:	80 91 ea 04 	lds	r24, 0x04EA
     720:	88 23       	and	r24, r24
     722:	61 f0       	breq	.+24     	; 0x73c <rf_tx_packet+0x5a>
		machead->seq_num = 0xFF;
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
     72a:	8a ea       	ldi	r24, 0xAA	; 170
     72c:	9a ea       	ldi	r25, 0xAA	; 170
     72e:	90 93 89 01 	sts	0x0189, r25
     732:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
     736:	8f ef       	ldi	r24, 0xFF	; 255
     738:	9f ef       	ldi	r25, 0xFF	; 255
     73a:	10 c0       	rjmp	.+32     	; 0x75c <rf_tx_packet+0x7a>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
     73c:	80 91 ef 04 	lds	r24, 0x04EF
     740:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
     744:	20 91 61 01 	lds	r18, 0x0161
     748:	80 91 60 01 	lds	r24, 0x0160
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	92 2b       	or	r25, r18
     750:	90 93 89 01 	sts	0x0189, r25
     754:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = pRTI->destAddr;
     758:	88 81       	ld	r24, Y
     75a:	99 81       	ldd	r25, Y+1	; 0x01
     75c:	90 93 87 01 	sts	0x0187, r25
     760:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
     764:	20 91 63 01 	lds	r18, 0x0163
     768:	80 91 62 01 	lds	r24, 0x0162
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	92 2b       	or	r25, r18
     770:	90 93 85 01 	sts	0x0185, r25
     774:	80 93 84 01 	sts	0x0184, r24
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
     778:	4a 81       	ldd	r20, Y+2	; 0x02
     77a:	55 27       	eor	r21, r21
     77c:	47 fd       	sbrc	r20, 7
     77e:	50 95       	com	r21
     780:	6b 81       	ldd	r22, Y+3	; 0x03
     782:	7c 81       	ldd	r23, Y+4	; 0x04
     784:	8a e8       	ldi	r24, 0x8A	; 138
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
     78c:	8a 81       	ldd	r24, Y+2	; 0x02
     78e:	85 5f       	subi	r24, 0xF5	; 245
     790:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     794:	80 91 41 01 	lds	r24, 0x0141
     798:	18 2f       	mov	r17, r24
     79a:	1f 71       	andi	r17, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     79c:	9f ef       	ldi	r25, 0xFF	; 255
     79e:	91 0f       	add	r25, r17
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     7a0:	92 30       	cpi	r25, 0x02	; 2
     7a2:	c0 f3       	brcs	.-16     	; 0x794 <rf_tx_packet+0xb2>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     7a4:	11 31       	cpi	r17, 0x11	; 17
     7a6:	b1 f3       	breq	.-20     	; 0x794 <rf_tx_packet+0xb2>
     7a8:	12 31       	cpi	r17, 0x12	; 18
     7aa:	a1 f3       	breq	.-24     	; 0x794 <rf_tx_packet+0xb2>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     7ac:	1f 31       	cpi	r17, 0x1F	; 31
     7ae:	91 f3       	breq	.-28     	; 0x794 <rf_tx_packet+0xb2>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     7b0:	98 ef       	ldi	r25, 0xF8	; 248
     7b2:	91 0f       	add	r25, r17
     7b4:	92 30       	cpi	r25, 0x02	; 2
     7b6:	20 f0       	brcs	.+8      	; 0x7c0 <rf_tx_packet+0xde>
     7b8:	8f 70       	andi	r24, 0x0F	; 15
     7ba:	86 30       	cpi	r24, 0x06	; 6
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <rf_tx_packet+0xde>
     7be:	99 cf       	rjmp	.-206    	; 0x6f2 <rf_tx_packet+0x10>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
     7c0:	86 e1       	ldi	r24, 0x16	; 22
     7c2:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
     7c6:	8d 81       	ldd	r24, Y+5	; 0x05
     7c8:	81 11       	cpse	r24, r1
     7ca:	0a c0       	rjmp	.+20     	; 0x7e0 <rf_tx_packet+0xfe>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
     7cc:	89 e0       	ldi	r24, 0x09	; 9
     7ce:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
	if(pRTI->ackRequest)
     7d2:	8e 81       	ldd	r24, Y+6	; 0x06
     7d4:	88 23       	and	r24, r24
     7d6:	91 f0       	breq	.+36     	; 0x7fc <rf_tx_packet+0x11a>
		rf_cmd(TX_ARET_ON);
     7d8:	89 e1       	ldi	r24, 0x19	; 25
     7da:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
     7de:	0e c0       	rjmp	.+28     	; 0x7fc <rf_tx_packet+0x11a>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
     7e0:	80 91 48 01 	lds	r24, 0x0148
     7e4:	80 68       	ori	r24, 0x80	; 128
     7e6:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
     7ea:	80 91 41 01 	lds	r24, 0x0141
     7ee:	87 ff       	sbrs	r24, 7
     7f0:	fc cf       	rjmp	.-8      	; 0x7ea <rf_tx_packet+0x108>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
     7f2:	80 91 41 01 	lds	r24, 0x0141
     7f6:	86 ff       	sbrs	r24, 6
     7f8:	7c cf       	rjmp	.-264    	; 0x6f2 <rf_tx_packet+0x10>
     7fa:	e8 cf       	rjmp	.-48     	; 0x7cc <rf_tx_packet+0xea>
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

	// set arguments for calling tx_start_func
	if (tx_start_func) {
     7fc:	80 91 cb 03 	lds	r24, 0x03CB
     800:	90 91 cc 03 	lds	r25, 0x03CC
     804:	89 2b       	or	r24, r25
     806:	71 f0       	breq	.+28     	; 0x824 <rf_tx_packet+0x142>
		tx_len = pRTI->length;
     808:	8a 81       	ldd	r24, Y+2	; 0x02
     80a:	99 27       	eor	r25, r25
     80c:	87 fd       	sbrc	r24, 7
     80e:	90 95       	com	r25
     810:	90 93 21 05 	sts	0x0521, r25
     814:	80 93 20 05 	sts	0x0520, r24
		tx_buf = data_start;
     818:	8a e8       	ldi	r24, 0x8A	; 138
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	90 93 09 05 	sts	0x0509, r25
     820:	80 93 08 05 	sts	0x0508, r24
	}

   tx_done = 0;
     824:	10 92 f6 04 	sts	0x04F6, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
   for(i=0; (i<65000) && !tx_done; i++){
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	20 91 f6 04 	lds	r18, 0x04F6
     836:	21 11       	cpse	r18, r1
     838:	05 c0       	rjmp	.+10     	; 0x844 <rf_tx_packet+0x162>
     83a:	01 96       	adiw	r24, 0x01	; 1
     83c:	88 3e       	cpi	r24, 0xE8	; 232
     83e:	2d ef       	ldi	r18, 0xFD	; 253
     840:	92 07       	cpc	r25, r18
     842:	b9 f7       	brne	.-18     	; 0x832 <rf_tx_packet+0x150>
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     844:	2e 81       	ldd	r18, Y+6	; 0x06
     846:	22 23       	and	r18, r18
     848:	31 f0       	breq	.+12     	; 0x856 <rf_tx_packet+0x174>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
     84a:	20 91 42 01 	lds	r18, 0x0142
     84e:	22 95       	swap	r18
     850:	26 95       	lsr	r18
     852:	27 70       	andi	r18, 0x07	; 7
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     854:	29 f4       	brne	.+10     	; 0x860 <rf_tx_packet+0x17e>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
     856:	88 3e       	cpi	r24, 0xE8	; 232
     858:	9d 4f       	sbci	r25, 0xFD	; 253
     85a:	11 f0       	breq	.+4      	; 0x860 <rf_tx_packet+0x17e>
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     85c:	c1 e0       	ldi	r28, 0x01	; 1
     85e:	01 c0       	rjmp	.+2      	; 0x862 <rf_tx_packet+0x180>
     860:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
     862:	81 2f       	mov	r24, r17
     864:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
     868:	8c 2f       	mov	r24, r28
}
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	08 95       	ret

00000872 <rf_tx_pkt_blocking>:

uint8_t rf_tx_pkt_blocking(RF_TX_INFO *pRTI)
{
	uint16_t count = 0;
	rf_tx_packet(pRTI);
     872:	0e 94 71 03 	call	0x6e2	; 0x6e2 <rf_tx_packet>
	while (!tx_done){
     876:	89 e8       	ldi	r24, 0x89	; 137
     878:	93 e1       	ldi	r25, 0x13	; 19
     87a:	20 91 f6 04 	lds	r18, 0x04F6
     87e:	21 11       	cpse	r18, r1
     880:	04 c0       	rjmp	.+8      	; 0x88a <rf_tx_pkt_blocking+0x18>
     882:	01 97       	sbiw	r24, 0x01	; 1
		count += 1;
		if (count > 5000)//~1ms timeout
     884:	d1 f7       	brne	.-12     	; 0x87a <rf_tx_pkt_blocking+0x8>
			return NRK_ERROR;
     886:	8f ef       	ldi	r24, 0xFF	; 255
	}
	return NRK_OK;
}
     888:	08 95       	ret
	while (!tx_done){
		count += 1;
		if (count > 5000)//~1ms timeout
			return NRK_ERROR;
	}
	return NRK_OK;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	08 95       	ret

0000088e <rf_tx_packet_resend>:
uint8_t rf_tx_packet_resend()
{
   uint8_t trx_error;
   uint16_t i;

   tx_done = 0;
     88e:	10 92 f6 04 	sts	0x04F6, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
     892:	82 e0       	ldi	r24, 0x02	; 2
     894:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
     898:	88 ee       	ldi	r24, 0xE8	; 232
     89a:	9d ef       	ldi	r25, 0xFD	; 253
   for(i=0; (i<65000) && !tx_done; i++)
     89c:	20 91 f6 04 	lds	r18, 0x04F6
     8a0:	21 11       	cpse	r18, r1
     8a2:	04 c0       	rjmp	.+8      	; 0x8ac <rf_tx_packet_resend+0x1e>
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	d1 f7       	brne	.-12     	; 0x89c <rf_tx_packet_resend+0xe>
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
     8a8:	8f ef       	ldi	r24, 0xFF	; 255

   return trx_error;
}
     8aa:	08 95       	ret
   tx_done = 0;
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
   for(i=0; (i<65000) && !tx_done; i++)
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	08 95       	ret

000008b0 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
     8b4:	80 91 07 05 	lds	r24, 0x0507
     8b8:	88 23       	and	r24, r24
     8ba:	41 f1       	breq	.+80     	; 0x90c <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     8bc:	80 91 41 01 	lds	r24, 0x0141
     8c0:	c8 2f       	mov	r28, r24
     8c2:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     8c4:	9f ef       	ldi	r25, 0xFF	; 255
     8c6:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     8c8:	92 30       	cpi	r25, 0x02	; 2
     8ca:	c0 f3       	brcs	.-16     	; 0x8bc <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     8cc:	c1 31       	cpi	r28, 0x11	; 17
     8ce:	b1 f3       	breq	.-20     	; 0x8bc <rf_cca_check+0xc>
     8d0:	c2 31       	cpi	r28, 0x12	; 18
     8d2:	a1 f3       	breq	.-24     	; 0x8bc <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     8d4:	cf 31       	cpi	r28, 0x1F	; 31
     8d6:	91 f3       	breq	.-28     	; 0x8bc <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     8d8:	c8 30       	cpi	r28, 0x08	; 8
     8da:	19 f0       	breq	.+6      	; 0x8e2 <rf_cca_check+0x32>
     8dc:	8f 70       	andi	r24, 0x0F	; 15
     8de:	86 30       	cpi	r24, 0x06	; 6
     8e0:	a9 f4       	brne	.+42     	; 0x90c <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
     8e2:	86 e1       	ldi	r24, 0x16	; 22
     8e4:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
     8e8:	80 91 48 01 	lds	r24, 0x0148
     8ec:	80 68       	ori	r24, 0x80	; 128
     8ee:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
     8f2:	80 91 41 01 	lds	r24, 0x0141
     8f6:	87 ff       	sbrs	r24, 7
     8f8:	fc cf       	rjmp	.-8      	; 0x8f2 <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     8fa:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
     8fe:	8c 2f       	mov	r24, r28
     900:	0e 94 49 02 	call	0x492	; 0x492 <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     904:	d6 fb       	bst	r29, 6
     906:	88 27       	eor	r24, r24
     908:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
     90a:	01 c0       	rjmp	.+2      	; 0x90e <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
     90c:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	08 95       	ret

00000914 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready){
     914:	80 91 07 05 	lds	r24, 0x0507
     918:	81 11       	cpse	r24, r1
     91a:	03 c0       	rjmp	.+6      	; 0x922 <rf_rx_packet_nonblock+0xe>
		printf("rf not ready\r\n");
     91c:	8c ea       	ldi	r24, 0xAC	; 172
     91e:	92 e0       	ldi	r25, 0x02	; 2
     920:	1b c0       	rjmp	.+54     	; 0x958 <rf_rx_packet_nonblock+0x44>
		return NRK_ERROR;
	}
   if(!rx_ready){
     922:	80 91 22 05 	lds	r24, 0x0522
     926:	81 11       	cpse	r24, r1
     928:	06 c0       	rjmp	.+12     	; 0x936 <rf_rx_packet_nonblock+0x22>
	   printf("rx not ready\r\n");
     92a:	8a eb       	ldi	r24, 0xBA	; 186
     92c:	92 e0       	ldi	r25, 0x02	; 2
     92e:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <puts>
      return 0;
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	08 95       	ret
   }
   else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length){
     936:	80 91 7b 01 	lds	r24, 0x017B
     93a:	e0 91 ed 04 	lds	r30, 0x04ED
     93e:	f0 91 ee 04 	lds	r31, 0x04EE
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	02 97       	sbiw	r24, 0x02	; 2
     946:	24 81       	ldd	r18, Z+4	; 0x04
     948:	33 27       	eor	r19, r19
     94a:	27 fd       	sbrc	r18, 7
     94c:	30 95       	com	r19
     94e:	28 17       	cp	r18, r24
     950:	39 07       	cpc	r19, r25
     952:	34 f4       	brge	.+12     	; 0x960 <rf_rx_packet_nonblock+0x4c>
	   	printf("length too great\r\n");
     954:	88 ec       	ldi	r24, 0xC8	; 200
     956:	92 e0       	ldi	r25, 0x02	; 2
     958:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <puts>
		return NRK_ERROR;
     95c:	8f ef       	ldi	r24, 0xFF	; 255
     95e:	08 95       	ret
	}

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
     960:	e0 91 ed 04 	lds	r30, 0x04ED
     964:	f0 91 ee 04 	lds	r31, 0x04EE
     968:	80 91 82 01 	lds	r24, 0x0182
     96c:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
     96e:	e0 91 ed 04 	lds	r30, 0x04ED
     972:	f0 91 ee 04 	lds	r31, 0x04EE
     976:	80 91 87 01 	lds	r24, 0x0187
     97a:	90 91 88 01 	lds	r25, 0x0188
     97e:	92 83       	std	Z+2, r25	; 0x02
     980:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
     982:	e0 91 ed 04 	lds	r30, 0x04ED
     986:	f0 91 ee 04 	lds	r31, 0x04EE
     98a:	80 91 7b 01 	lds	r24, 0x017B
     98e:	8b 50       	subi	r24, 0x0B	; 11
     990:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
     992:	a0 91 ed 04 	lds	r26, 0x04ED
     996:	b0 91 ee 04 	lds	r27, 0x04EE
     99a:	e0 91 ed 04 	lds	r30, 0x04ED
     99e:	f0 91 ee 04 	lds	r31, 0x04EE
     9a2:	13 96       	adiw	r26, 0x03	; 3
     9a4:	9c 91       	ld	r25, X
     9a6:	84 81       	ldd	r24, Z+4	; 0x04
     9a8:	89 17       	cp	r24, r25
     9aa:	3c f0       	brlt	.+14     	; 0x9ba <rf_rx_packet_nonblock+0xa6>
			|| (rfSettings.pRxInfo->length < 0)){
     9ac:	e0 91 ed 04 	lds	r30, 0x04ED
     9b0:	f0 91 ee 04 	lds	r31, 0x04EE
     9b4:	83 81       	ldd	r24, Z+3	; 0x03
     9b6:	87 ff       	sbrs	r24, 7
     9b8:	0f c0       	rjmp	.+30     	; 0x9d8 <rf_rx_packet_nonblock+0xc4>
		rx_ready = 0;
     9ba:	10 92 22 05 	sts	0x0522, r1
      	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     9be:	80 91 4c 01 	lds	r24, 0x014C
     9c2:	8f 77       	andi	r24, 0x7F	; 127
     9c4:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     9c8:	80 91 4c 01 	lds	r24, 0x014C
     9cc:	80 68       	ori	r24, 0x80	; 128
     9ce:	80 93 4c 01 	sts	0x014C, r24
		printf("incorrect length setting in rf settings\r\n");
     9d2:	8a ed       	ldi	r24, 0xDA	; 218
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	c0 cf       	rjmp	.-128    	; 0x958 <rf_rx_packet_nonblock+0x44>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
     9d8:	a0 91 ed 04 	lds	r26, 0x04ED
     9dc:	b0 91 ee 04 	lds	r27, 0x04EE
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		printf("incorrect length setting in rf settings\r\n");
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
     9e0:	e0 91 ed 04 	lds	r30, 0x04ED
     9e4:	f0 91 ee 04 	lds	r31, 0x04EE
     9e8:	13 96       	adiw	r26, 0x03	; 3
     9ea:	4c 91       	ld	r20, X
     9ec:	55 27       	eor	r21, r21
     9ee:	47 fd       	sbrc	r20, 7
     9f0:	50 95       	com	r21
     9f2:	69 e8       	ldi	r22, 0x89	; 137
     9f4:	71 e0       	ldi	r23, 0x01	; 1
     9f6:	85 81       	ldd	r24, Z+5	; 0x05
     9f8:	96 81       	ldd	r25, Z+6	; 0x06
     9fa:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);

   /* if reset packet received, perform reset */
   if(wireless_prog && (rfSettings.pRxInfo->length == 16)){
     9fe:	80 91 ca 03 	lds	r24, 0x03CA
     a02:	88 23       	and	r24, r24
     a04:	09 f4       	brne	.+2      	; 0xa08 <rf_rx_packet_nonblock+0xf4>
     a06:	3e c0       	rjmp	.+124    	; 0xa84 <rf_rx_packet_nonblock+0x170>
     a08:	e0 91 ed 04 	lds	r30, 0x04ED
     a0c:	f0 91 ee 04 	lds	r31, 0x04EE
     a10:	83 81       	ldd	r24, Z+3	; 0x03
     a12:	80 31       	cpi	r24, 0x10	; 16
     a14:	b9 f5       	brne	.+110    	; 0xa84 <rf_rx_packet_nonblock+0x170>
      if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 4) == 0){
     a16:	e0 91 ed 04 	lds	r30, 0x04ED
     a1a:	f0 91 ee 04 	lds	r31, 0x04EE
     a1e:	65 81       	ldd	r22, Z+5	; 0x05
     a20:	76 81       	ldd	r23, Z+6	; 0x06
     a22:	44 e0       	ldi	r20, 0x04	; 4
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	0e 94 84 25 	call	0x4b08	; 0x4b08 <strncmp>
     a2e:	89 2b       	or	r24, r25
     a30:	49 f5       	brne	.+82     	; 0xa84 <rf_rx_packet_nonblock+0x170>
         if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 16) == 0){
     a32:	e0 91 ed 04 	lds	r30, 0x04ED
     a36:	f0 91 ee 04 	lds	r31, 0x04EE
     a3a:	65 81       	ldd	r22, Z+5	; 0x05
     a3c:	76 81       	ldd	r23, Z+6	; 0x06
     a3e:	40 e1       	ldi	r20, 0x10	; 16
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	0e 94 84 25 	call	0x4b08	; 0x4b08 <strncmp>
     a4a:	89 2b       	or	r24, r25
     a4c:	d9 f4       	brne	.+54     	; 0xa84 <rf_rx_packet_nonblock+0x170>
            wdt_enable(WDTO_500MS);
     a4e:	9d e0       	ldi	r25, 0x0D	; 13
     a50:	88 e1       	ldi	r24, 0x18	; 24
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	a8 95       	wdr
     a58:	80 93 60 00 	sts	0x0060, r24
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	90 93 60 00 	sts	0x0060, r25
            nrk_led_set(0);
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <nrk_led_set>
            nrk_led_set(1);
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <nrk_led_set>
            nrk_led_set(2);
     a72:	82 e0       	ldi	r24, 0x02	; 2
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <nrk_led_set>
            nrk_led_set(3);
     a7a:	83 e0       	ldi	r24, 0x03	; 3
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <nrk_led_set>
            while(1)
               continue;
     a82:	ff cf       	rjmp	.-2      	; 0xa82 <rf_rx_packet_nonblock+0x16e>
      }
   }

	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
     a84:	e0 91 ed 04 	lds	r30, 0x04ED
     a88:	f0 91 ee 04 	lds	r31, 0x04EE
     a8c:	80 91 80 01 	lds	r24, 0x0180
     a90:	85 fb       	bst	r24, 5
     a92:	88 27       	eor	r24, r24
     a94:	80 f9       	bld	r24, 0
     a96:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
     a98:	e0 91 ed 04 	lds	r30, 0x04ED
     a9c:	f0 91 ee 04 	lds	r31, 0x04EE
     aa0:	80 91 47 01 	lds	r24, 0x0147
     aa4:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
     aa6:	e0 91 ed 04 	lds	r30, 0x04ED
     aaa:	f0 91 ee 04 	lds	r31, 0x04EE
     aae:	80 91 46 01 	lds	r24, 0x0146
     ab2:	86 95       	lsr	r24
     ab4:	86 95       	lsr	r24
     ab6:	86 95       	lsr	r24
     ab8:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
     aba:	e0 91 ed 04 	lds	r30, 0x04ED
     abe:	f0 91 ee 04 	lds	r31, 0x04EE
     ac2:	80 91 47 01 	lds	r24, 0x0147
     ac6:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
     ac8:	a0 91 ed 04 	lds	r26, 0x04ED
     acc:	b0 91 ee 04 	lds	r27, 0x04EE
     ad0:	e0 91 7b 01 	lds	r30, 0x017B
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	e0 58       	subi	r30, 0x80	; 128
     ad8:	fe 4f       	sbci	r31, 0xFE	; 254
     ada:	80 81       	ld	r24, Z
     adc:	1b 96       	adiw	r26, 0x0b	; 11
     ade:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
     ae0:	10 92 22 05 	sts	0x0522, r1
   TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     ae4:	80 91 4c 01 	lds	r24, 0x014C
     ae8:	8f 77       	andi	r24, 0x7F	; 127
     aea:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     aee:	80 91 4c 01 	lds	r24, 0x014C
     af2:	80 68       	ori	r24, 0x80	; 128
     af4:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
     af8:	81 e0       	ldi	r24, 0x01	; 1
}
     afa:	08 95       	ret

00000afc <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
     afc:	1f 92       	push	r1
     afe:	0f 92       	push	r0
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	0f 92       	push	r0
     b04:	11 24       	eor	r1, r1
     b06:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
     b08:	80 e8       	ldi	r24, 0x80	; 128
     b0a:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     b0e:	8f 91       	pop	r24
     b10:	0f 90       	pop	r0
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	0f 90       	pop	r0
     b16:	1f 90       	pop	r1
     b18:	18 95       	reti

00000b1a <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
     b1a:	1f 92       	push	r1
     b1c:	0f 92       	push	r0
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	0f 92       	push	r0
     b22:	11 24       	eor	r1, r1
     b24:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	80 93 f6 04 	sts	0x04F6, r24
   IRQ_STATUS = (1 << TX_END);
     b2c:	80 e4       	ldi	r24, 0x40	; 64
     b2e:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
     b32:	8f 91       	pop	r24
     b34:	0f 90       	pop	r0
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	0f 90       	pop	r0
     b3a:	1f 90       	pop	r1
     b3c:	18 95       	reti

00000b3e <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
     b3e:	1f 92       	push	r1
     b40:	0f 92       	push	r0
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	0f 92       	push	r0
     b46:	11 24       	eor	r1, r1
     b48:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
     b4a:	80 e2       	ldi	r24, 0x20	; 32
     b4c:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     b50:	8f 91       	pop	r24
     b52:	0f 90       	pop	r0
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	0f 90       	pop	r0
     b58:	1f 90       	pop	r1
     b5a:	18 95       	reti

00000b5c <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
     b5c:	1f 92       	push	r1
     b5e:	0f 92       	push	r0
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	0f 92       	push	r0
     b64:	11 24       	eor	r1, r1
     b66:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
     b68:	80 e1       	ldi	r24, 0x10	; 16
     b6a:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     b6e:	8f 91       	pop	r24
     b70:	0f 90       	pop	r0
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	0f 90       	pop	r0
     b76:	1f 90       	pop	r1
     b78:	18 95       	reti

00000b7a <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
     b7a:	1f 92       	push	r1
     b7c:	0f 92       	push	r0
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	0f 92       	push	r0
     b82:	11 24       	eor	r1, r1
     b84:	0b b6       	in	r0, 0x3b	; 59
     b86:	0f 92       	push	r0
     b88:	2f 93       	push	r18
     b8a:	3f 93       	push	r19
     b8c:	4f 93       	push	r20
     b8e:	5f 93       	push	r21
     b90:	6f 93       	push	r22
     b92:	7f 93       	push	r23
     b94:	8f 93       	push	r24
     b96:	9f 93       	push	r25
     b98:	af 93       	push	r26
     b9a:	bf 93       	push	r27
     b9c:	ef 93       	push	r30
     b9e:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
     ba0:	84 e0       	ldi	r24, 0x04	; 4
     ba2:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
     ba6:	e0 91 cf 03 	lds	r30, 0x03CF
     baa:	f0 91 d0 03 	lds	r31, 0x03D0
     bae:	30 97       	sbiw	r30, 0x00	; 0
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <__vector_59+0x3a>
		rx_start_func();
     bb2:	09 95       	icall

	return;
}
     bb4:	ff 91       	pop	r31
     bb6:	ef 91       	pop	r30
     bb8:	bf 91       	pop	r27
     bba:	af 91       	pop	r26
     bbc:	9f 91       	pop	r25
     bbe:	8f 91       	pop	r24
     bc0:	7f 91       	pop	r23
     bc2:	6f 91       	pop	r22
     bc4:	5f 91       	pop	r21
     bc6:	4f 91       	pop	r20
     bc8:	3f 91       	pop	r19
     bca:	2f 91       	pop	r18
     bcc:	0f 90       	pop	r0
     bce:	0b be       	out	0x3b, r0	; 59
     bd0:	0f 90       	pop	r0
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	0f 90       	pop	r0
     bd6:	1f 90       	pop	r1
     bd8:	18 95       	reti

00000bda <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
     bda:	1f 92       	push	r1
     bdc:	0f 92       	push	r0
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	0f 92       	push	r0
     be2:	11 24       	eor	r1, r1
     be4:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
     be6:	82 e0       	ldi	r24, 0x02	; 2
     be8:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     bec:	8f 91       	pop	r24
     bee:	0f 90       	pop	r0
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	0f 90       	pop	r0
     bf4:	1f 90       	pop	r1
     bf6:	18 95       	reti

00000bf8 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
     bf8:	1f 92       	push	r1
     bfa:	0f 92       	push	r0
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	0f 92       	push	r0
     c00:	11 24       	eor	r1, r1
     c02:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     c0a:	8f 91       	pop	r24
     c0c:	0f 90       	pop	r0
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	0f 90       	pop	r0
     c12:	1f 90       	pop	r1
     c14:	18 95       	reti

00000c16 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
     c16:	e9 e4       	ldi	r30, 0x49	; 73
     c18:	f1 e0       	ldi	r31, 0x01	; 1
     c1a:	90 81       	ld	r25, Z
     c1c:	90 7f       	andi	r25, 0xF0	; 240
     c1e:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
     c20:	90 81       	ld	r25, Z
     c22:	8f 70       	andi	r24, 0x0F	; 15
     c24:	98 2b       	or	r25, r24
     c26:	90 83       	st	Z, r25
     c28:	08 95       	ret

00000c2a <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
     c2a:	8f ef       	ldi	r24, 0xFF	; 255
     c2c:	08 95       	ret

00000c2e <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
     c2e:	08 95       	ret

00000c30 <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
     c30:	08 95       	ret

00000c32 <rf_security_disable>:
}



void rf_security_disable()
{
     c32:	08 95       	ret

00000c34 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	08 95       	ret

00000c38 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
     c38:	80 91 e8 04 	lds	r24, 0x04E8
     c3c:	90 91 e9 04 	lds	r25, 0x04E9
     c40:	08 95       	ret

00000c42 <rf_flush_rx_fifo>:



inline void rf_flush_rx_fifo()
{
     c42:	08 95       	ret

00000c44 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	08 95       	ret

00000c48 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	08 95       	ret

00000c4c <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	08 95       	ret

00000c50 <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
     c50:	08 95       	ret

00000c52 <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
     c52:	08 95       	ret

00000c54 <rf_test_mode>:
}



void rf_test_mode()
{
     c54:	08 95       	ret

00000c56 <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
     c56:	08 95       	ret

00000c58 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
     c58:	08 95       	ret

00000c5a <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
     c5a:	08 95       	ret

00000c5c <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
     c5c:	08 95       	ret

00000c5e <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
     c5e:	08 95       	ret

00000c60 <rf_cc2591_tx_on>:
	PORTG	|= 0x1;
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	
	DDRG	&= ~(0x1);  // Set RXTX as input
     c60:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
     c62:	8d b1       	in	r24, 0x0d	; 13
     c64:	80 6e       	ori	r24, 0xE0	; 224
     c66:	8d b9       	out	0x0d, r24	; 13
	// PAEN=1  EN=0  HGM=x RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0xA0;
     c68:	8e b1       	in	r24, 0x0e	; 14
     c6a:	80 6a       	ori	r24, 0xA0	; 160
     c6c:	8e b9       	out	0x0e, r24	; 14
     c6e:	08 95       	ret

00000c70 <rf_cc2591_rx_on>:
	DDRG	|= 0x1;
	PORTG	&= ~(0x1);
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	DDRG	&= ~(0x1);  // Set RXTX as input
     c70:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
     c72:	8d b1       	in	r24, 0x0d	; 13
     c74:	80 6e       	ori	r24, 0xE0	; 224
     c76:	8d b9       	out	0x0d, r24	; 13
	// PAEN=0  EN=1  HGM=1 RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0x60;
     c78:	8e b1       	in	r24, 0x0e	; 14
     c7a:	80 66       	ori	r24, 0x60	; 96
     c7c:	8e b9       	out	0x0e, r24	; 14
     c7e:	08 95       	ret

00000c80 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
     c80:	cf 92       	push	r12
     c82:	df 92       	push	r13
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	27 97       	sbiw	r28, 0x07	; 7
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
     ca0:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
     ca4:	e0 91 ed 04 	lds	r30, 0x04ED
     ca8:	f0 91 ee 04 	lds	r31, 0x04EE
     cac:	c0 80       	ld	r12, Z
     cae:	d3 80       	ldd	r13, Z+3	; 0x03
     cb0:	e5 80       	ldd	r14, Z+5	; 0x05
     cb2:	f6 80       	ldd	r15, Z+6	; 0x06
     cb4:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
     cb6:	0e 94 8a 04 	call	0x914	; 0x914 <rf_rx_packet_nonblock>
	if (err < 1) {
     cba:	18 16       	cp	r1, r24
     cbc:	1c f0       	brlt	.+6      	; 0xcc4 <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	93 e0       	ldi	r25, 0x03	; 3
     cc2:	06 c0       	rjmp	.+12     	; 0xcd0 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
     cc4:	f7 01       	movw	r30, r14
     cc6:	10 81       	ld	r17, Z
	if (ttl == 0) {
     cc8:	11 11       	cpse	r17, r1
     cca:	07 c0       	rjmp	.+14     	; 0xcda <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
     ccc:	82 e2       	ldi	r24, 0x22	; 34
     cce:	93 e0       	ldi	r25, 0x03	; 3
     cd0:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <puts>
#endif
		nrk_int_enable();
     cd4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>
		return;
     cd8:	31 c0       	rjmp	.+98     	; 0xd3c <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
     cda:	15 30       	cpi	r17, 0x05	; 5
     cdc:	21 f4       	brne	.+8      	; 0xce6 <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
     cde:	8a e0       	ldi	r24, 0x0A	; 10
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 29 26 	call	0x4c52	; 0x4c52 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
     ce6:	c7 01       	movw	r24, r14
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	9f 93       	push	r25
     cec:	8f 93       	push	r24
     cee:	80 2f       	mov	r24, r16
     cf0:	99 27       	eor	r25, r25
     cf2:	87 fd       	sbrc	r24, 7
     cf4:	90 95       	com	r25
     cf6:	9f 93       	push	r25
     cf8:	0f 93       	push	r16
     cfa:	1f 92       	push	r1
     cfc:	1f 93       	push	r17
     cfe:	1f 92       	push	r1
     d00:	cf 92       	push	r12
     d02:	84 e4       	ldi	r24, 0x44	; 68
     d04:	93 e0       	ldi	r25, 0x03	; 3
     d06:	9f 93       	push	r25
     d08:	8f 93       	push	r24
     d0a:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
     d0e:	fd 82       	std	Y+5, r15	; 0x05
     d10:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
     d12:	11 50       	subi	r17, 0x01	; 1
     d14:	f7 01       	movw	r30, r14
     d16:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
     d18:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
     d1a:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
     d1c:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
     d1e:	8f ef       	ldi	r24, 0xFF	; 255
     d20:	9f ef       	ldi	r25, 0xFF	; 255
     d22:	9a 83       	std	Y+2, r25	; 0x02
     d24:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
     d26:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
     d2a:	ce 01       	movw	r24, r28
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <rf_tx_packet>
#endif
	return;
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
}
     d3c:	27 96       	adiw	r28, 0x07	; 7
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	df 90       	pop	r13
     d56:	cf 90       	pop	r12
     d58:	08 95       	ret

00000d5a <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
     d5a:	1f 92       	push	r1
     d5c:	0f 92       	push	r0
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	0f 92       	push	r0
     d62:	11 24       	eor	r1, r1
     d64:	0b b6       	in	r0, 0x3b	; 59
     d66:	0f 92       	push	r0
     d68:	2f 93       	push	r18
     d6a:	3f 93       	push	r19
     d6c:	4f 93       	push	r20
     d6e:	5f 93       	push	r21
     d70:	6f 93       	push	r22
     d72:	7f 93       	push	r23
     d74:	8f 93       	push	r24
     d76:	9f 93       	push	r25
     d78:	af 93       	push	r26
     d7a:	bf 93       	push	r27
     d7c:	ef 93       	push	r30
     d7e:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 91 7b 01 	lds	r25, 0x017B
     d86:	89 17       	cp	r24, r25
     d88:	10 f4       	brcc	.+4      	; 0xd8e <__vector_60+0x34>
     d8a:	8f 5f       	subi	r24, 0xFF	; 255
     d8c:	fa cf       	rjmp	.-12     	; 0xd82 <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

   if((PHY_RSSI >> RX_CRC_VALID) & 0x1){
     d8e:	80 91 46 01 	lds	r24, 0x0146
     d92:	87 ff       	sbrs	r24, 7
     d94:	04 c0       	rjmp	.+8      	; 0xd9e <__vector_60+0x44>
      rx_ready = 1;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	80 93 22 05 	sts	0x0522, r24
     d9c:	04 c0       	rjmp	.+8      	; 0xda6 <__vector_60+0x4c>
   } else {
      printf("RX end failed checksum!\r\n");
     d9e:	8d e6       	ldi	r24, 0x6D	; 109
     da0:	93 e0       	ldi	r25, 0x03	; 3
     da2:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <puts>
   }
   IRQ_STATUS = (1 << RX_END);
     da6:	88 e0       	ldi	r24, 0x08	; 8
     da8:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
     dac:	80 91 46 01 	lds	r24, 0x0146
     db0:	87 ff       	sbrs	r24, 7
     db2:	05 c0       	rjmp	.+10     	; 0xdbe <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
     db4:	80 91 ea 04 	lds	r24, 0x04EA
     db8:	81 11       	cpse	r24, r1
     dba:	0e 94 40 06 	call	0xc80	; 0xc80 <rf_glossy_interrupt>
	}

	if(rx_end_func)
     dbe:	e0 91 cd 03 	lds	r30, 0x03CD
     dc2:	f0 91 ce 03 	lds	r31, 0x03CE
     dc6:	30 97       	sbiw	r30, 0x00	; 0
     dc8:	09 f0       	breq	.+2      	; 0xdcc <__vector_60+0x72>
		rx_end_func();
     dca:	09 95       	icall

	return;
}
     dcc:	ff 91       	pop	r31
     dce:	ef 91       	pop	r30
     dd0:	bf 91       	pop	r27
     dd2:	af 91       	pop	r26
     dd4:	9f 91       	pop	r25
     dd6:	8f 91       	pop	r24
     dd8:	7f 91       	pop	r23
     dda:	6f 91       	pop	r22
     ddc:	5f 91       	pop	r21
     dde:	4f 91       	pop	r20
     de0:	3f 91       	pop	r19
     de2:	2f 91       	pop	r18
     de4:	0f 90       	pop	r0
     de6:	0b be       	out	0x3b, r0	; 59
     de8:	0f 90       	pop	r0
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	0f 90       	pop	r0
     dee:	1f 90       	pop	r1
     df0:	18 95       	reti

00000df2 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
     df2:	a7 ef       	ldi	r26, 0xF7	; 247
     df4:	b4 e0       	ldi	r27, 0x04	; 4
     df6:	fc 01       	movw	r30, r24
     df8:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
     dfa:	20 81       	ld	r18, Z
     dfc:	2d 93       	st	X+, r18
      AES_KEY = key[i];
     dfe:	21 91       	ld	r18, Z+
     e00:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
     e04:	e8 17       	cp	r30, r24
     e06:	f9 07       	cpc	r31, r25
     e08:	c1 f7       	brne	.-16     	; 0xdfa <aes_setkey+0x8>
     e0a:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
     e0c:	10 92 3e 01 	sts	0x013E, r1
     e10:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
     e12:	e1 f7       	brne	.-8      	; 0xe0c <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
     e14:	80 e8       	ldi	r24, 0x80	; 128
     e16:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
     e1a:	80 91 3d 01 	lds	r24, 0x013D
     e1e:	80 ff       	sbrs	r24, 0
     e20:	fc cf       	rjmp	.-8      	; 0xe1a <aes_setkey+0x28>
     e22:	ea e0       	ldi	r30, 0x0A	; 10
     e24:	f5 e0       	ldi	r31, 0x05	; 5
     e26:	80 e1       	ldi	r24, 0x10	; 16
     e28:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
     e2a:	90 91 3f 01 	lds	r25, 0x013F
     e2e:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
     e30:	8e 13       	cpse	r24, r30
     e32:	fb cf       	rjmp	.-10     	; 0xe2a <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
     e34:	08 95       	ret

00000e36 <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
     e3c:	66 23       	and	r22, r22
     e3e:	09 f4       	brne	.+2      	; 0xe42 <aes_encrypt+0xc>
     e40:	45 c0       	rjmp	.+138    	; 0xecc <aes_encrypt+0x96>
     e42:	86 2f       	mov	r24, r22
     e44:	8f 70       	andi	r24, 0x0F	; 15
     e46:	09 f0       	breq	.+2      	; 0xe4a <aes_encrypt+0x14>
     e48:	41 c0       	rjmp	.+130    	; 0xecc <aes_encrypt+0x96>
     e4a:	e7 ef       	ldi	r30, 0xF7	; 247
     e4c:	f4 e0       	ldi	r31, 0x04	; 4
     e4e:	90 e1       	ldi	r25, 0x10	; 16
     e50:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
     e52:	21 91       	ld	r18, Z+
     e54:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
     e58:	9e 13       	cpse	r25, r30
     e5a:	fb cf       	rjmp	.-10     	; 0xe52 <aes_encrypt+0x1c>
     e5c:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     e5e:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
     e60:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     e62:	40 e1       	ldi	r20, 0x10	; 16
     e64:	94 9f       	mul	r25, r20
     e66:	90 01       	movw	r18, r0
     e68:	11 24       	eor	r1, r1
     e6a:	26 17       	cp	r18, r22
     e6c:	37 07       	cpc	r19, r23
     e6e:	7c f5       	brge	.+94     	; 0xece <aes_encrypt+0x98>
      if(i==0)
     e70:	91 11       	cpse	r25, r1
     e72:	03 c0       	rjmp	.+6      	; 0xe7a <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
     e74:	10 92 3c 01 	sts	0x013C, r1
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
     e7a:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	2a 0f       	add	r18, r26
     e84:	3b 1f       	adc	r19, r27
     e86:	e9 01       	movw	r28, r18
     e88:	c4 0f       	add	r28, r20
     e8a:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
     e8c:	f8 81       	ld	r31, Y
     e8e:	f0 93 3e 01 	sts	0x013E, r31
     e92:	4f 5f       	subi	r20, 0xFF	; 255
     e94:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
     e96:	40 31       	cpi	r20, 0x10	; 16
     e98:	51 05       	cpc	r21, r1
     e9a:	a9 f7       	brne	.-22     	; 0xe86 <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
     e9c:	40 91 3c 01 	lds	r20, 0x013C
     ea0:	40 68       	ori	r20, 0x80	; 128
     ea2:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
     ea6:	40 91 3d 01 	lds	r20, 0x013D
     eaa:	40 ff       	sbrs	r20, 0
     eac:	fc cf       	rjmp	.-8      	; 0xea6 <aes_encrypt+0x70>
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
     eb2:	f0 91 3e 01 	lds	r31, 0x013E
     eb6:	e9 01       	movw	r28, r18
     eb8:	c4 0f       	add	r28, r20
     eba:	d5 1f       	adc	r29, r21
     ebc:	f8 83       	st	Y, r31
     ebe:	4f 5f       	subi	r20, 0xFF	; 255
     ec0:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
     ec2:	40 31       	cpi	r20, 0x10	; 16
     ec4:	51 05       	cpc	r21, r1
     ec6:	a9 f7       	brne	.-22     	; 0xeb2 <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     ec8:	9f 5f       	subi	r25, 0xFF	; 255
     eca:	cb cf       	rjmp	.-106    	; 0xe62 <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	08 95       	ret

00000ed4 <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
     ede:	61 30       	cpi	r22, 0x01	; 1
     ee0:	09 f4       	brne	.+2      	; 0xee4 <aes_decrypt+0x10>
     ee2:	58 c0       	rjmp	.+176    	; 0xf94 <aes_decrypt+0xc0>
     ee4:	86 2f       	mov	r24, r22
     ee6:	8f 70       	andi	r24, 0x0F	; 15
     ee8:	09 f0       	breq	.+2      	; 0xeec <aes_decrypt+0x18>
     eea:	54 c0       	rjmp	.+168    	; 0xf94 <aes_decrypt+0xc0>
     eec:	ea e0       	ldi	r30, 0x0A	; 10
     eee:	f5 e0       	ldi	r31, 0x05	; 5
     ef0:	90 e1       	ldi	r25, 0x10	; 16
     ef2:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
     ef4:	21 91       	ld	r18, Z+
     ef6:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
     efa:	9e 13       	cpse	r25, r30
     efc:	fb cf       	rjmp	.-10     	; 0xef4 <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
     efe:	62 95       	swap	r22
     f00:	6f 70       	andi	r22, 0x0F	; 15
     f02:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
     f04:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
     f06:	6f 3f       	cpi	r22, 0xFF	; 255
     f08:	09 f4       	brne	.+2      	; 0xf0c <aes_decrypt+0x38>
     f0a:	45 c0       	rjmp	.+138    	; 0xf96 <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
     f0c:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
     f10:	46 2f       	mov	r20, r22
     f12:	55 27       	eor	r21, r21
     f14:	47 fd       	sbrc	r20, 7
     f16:	50 95       	com	r21
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	ed 01       	movw	r28, r26
     f1e:	90 e1       	ldi	r25, 0x10	; 16
     f20:	69 02       	muls	r22, r25
     f22:	c0 0d       	add	r28, r0
     f24:	d1 1d       	adc	r29, r1
     f26:	11 24       	eor	r1, r1
     f28:	fe 01       	movw	r30, r28
     f2a:	e2 0f       	add	r30, r18
     f2c:	f3 1f       	adc	r31, r19
     f2e:	90 81       	ld	r25, Z
     f30:	90 93 3e 01 	sts	0x013E, r25
     f34:	2f 5f       	subi	r18, 0xFF	; 255
     f36:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
     f38:	20 31       	cpi	r18, 0x10	; 16
     f3a:	31 05       	cpc	r19, r1
     f3c:	a9 f7       	brne	.-22     	; 0xf28 <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
     f3e:	90 91 3c 01 	lds	r25, 0x013C
     f42:	90 68       	ori	r25, 0x80	; 128
     f44:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
     f48:	90 91 3d 01 	lds	r25, 0x013D
     f4c:	90 ff       	sbrs	r25, 0
     f4e:	fc cf       	rjmp	.-8      	; 0xf48 <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
     f50:	41 50       	subi	r20, 0x01	; 1
     f52:	51 09       	sbc	r21, r1
     f54:	94 e0       	ldi	r25, 0x04	; 4
     f56:	44 0f       	add	r20, r20
     f58:	55 1f       	adc	r21, r21
     f5a:	9a 95       	dec	r25
     f5c:	e1 f7       	brne	.-8      	; 0xf56 <aes_decrypt+0x82>
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
     f62:	90 91 3e 01 	lds	r25, 0x013E
     f66:	8e 01       	movw	r16, r28
     f68:	02 0f       	add	r16, r18
     f6a:	13 1f       	adc	r17, r19
     f6c:	f8 01       	movw	r30, r16
     f6e:	90 83       	st	Z, r25
         if(i!=0)
     f70:	66 23       	and	r22, r22
     f72:	49 f0       	breq	.+18     	; 0xf86 <aes_decrypt+0xb2>
     f74:	f9 01       	movw	r30, r18
     f76:	e4 0f       	add	r30, r20
     f78:	f5 1f       	adc	r31, r21
     f7a:	ea 0f       	add	r30, r26
     f7c:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
     f7e:	e0 81       	ld	r30, Z
     f80:	9e 27       	eor	r25, r30
     f82:	f8 01       	movw	r30, r16
     f84:	90 83       	st	Z, r25
     f86:	2f 5f       	subi	r18, 0xFF	; 255
     f88:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
     f8a:	20 31       	cpi	r18, 0x10	; 16
     f8c:	31 05       	cpc	r19, r1
     f8e:	49 f7       	brne	.-46     	; 0xf62 <aes_decrypt+0x8e>
     f90:	61 50       	subi	r22, 0x01	; 1
     f92:	b9 cf       	rjmp	.-142    	; 0xf06 <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	08 95       	ret

00000fa0 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
     fa0:	90 91 c0 00 	lds	r25, 0x00C0
     fa4:	95 ff       	sbrs	r25, 5
     fa6:	fc cf       	rjmp	.-8      	; 0xfa0 <putc0>
     fa8:	90 91 c0 00 	lds	r25, 0x00C0
     fac:	9f 7d       	andi	r25, 0xDF	; 223
     fae:	90 93 c0 00 	sts	0x00C0, r25
     fb2:	80 93 c6 00 	sts	0x00C6, r24
     fb6:	08 95       	ret

00000fb8 <__vector_25>:
static uint16_t uart_rx_buf_start,uart_rx_buf_end;
static char uart_rx_buf[MAX_RX_UART_BUF];
static nrk_sig_t uart_rx_signal;

SIGNAL(USART0_RX_vect)
{
     fb8:	1f 92       	push	r1
     fba:	0f 92       	push	r0
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	0f 92       	push	r0
     fc0:	11 24       	eor	r1, r1
     fc2:	0b b6       	in	r0, 0x3b	; 59
     fc4:	0f 92       	push	r0
     fc6:	2f 93       	push	r18
     fc8:	3f 93       	push	r19
     fca:	4f 93       	push	r20
     fcc:	5f 93       	push	r21
     fce:	6f 93       	push	r22
     fd0:	7f 93       	push	r23
     fd2:	8f 93       	push	r24
     fd4:	9f 93       	push	r25
     fd6:	af 93       	push	r26
     fd8:	bf 93       	push	r27
     fda:	ef 93       	push	r30
     fdc:	ff 93       	push	r31
char c;
uint8_t sig;
nrk_int_disable();
     fde:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <nrk_int_disable>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
     fe2:	80 91 c0 00 	lds	r24, 0x00C0
     fe6:	87 ff       	sbrs	r24, 7
     fe8:	fc cf       	rjmp	.-8      	; 0xfe2 <__vector_25+0x2a>
     fea:	80 91 c0 00 	lds	r24, 0x00C0
     fee:	8f 77       	andi	r24, 0x7F	; 127
     ff0:	80 93 c0 00 	sts	0x00C0, r24
     ff4:	20 91 c6 00 	lds	r18, 0x00C6
   uart_rx_buf[uart_rx_buf_end]=c;
     ff8:	80 91 e2 03 	lds	r24, 0x03E2
     ffc:	90 91 e3 03 	lds	r25, 0x03E3
    1000:	fc 01       	movw	r30, r24
    1002:	ee 52       	subi	r30, 0x2E	; 46
    1004:	fc 4f       	sbci	r31, 0xFC	; 252
    1006:	20 83       	st	Z, r18
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    1008:	01 96       	adiw	r24, 0x01	; 1
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
    100a:	80 31       	cpi	r24, 0x10	; 16
    100c:	91 05       	cpc	r25, r1
    100e:	29 f0       	breq	.+10     	; 0x101a <__vector_25+0x62>
// cli();
//DISABLE_UART0_RX_INT(); //this will enable nrk int
   UART0_WAIT_AND_RECEIVE(c);
   uart_rx_buf[uart_rx_buf_end]=c;
   //if(uart_rx_buf_end==uart_rx_buf_start) sig=1; else sig=0;
   uart_rx_buf_end++;
    1010:	90 93 e3 03 	sts	0x03E3, r25
    1014:	80 93 e2 03 	sts	0x03E2, r24
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <__vector_25+0x6a>
   if(uart_rx_buf_end==MAX_RX_UART_BUF) {
	   uart_rx_buf_end=0;
    101a:	10 92 e3 03 	sts	0x03E3, r1
    101e:	10 92 e2 03 	sts	0x03E2, r1
		   }
   //if(uart_rx_buf_end==uart_rx_buf_start) nrk_kprintf(PSTR("Buf overflow!\r\n" ));
   nrk_event_signal(uart_rx_signal);
    1022:	80 91 d1 03 	lds	r24, 0x03D1
    1026:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <nrk_event_signal>
CLEAR_UART0_RX_INT();
    102a:	80 91 c0 00 	lds	r24, 0x00C0
    102e:	8f 77       	andi	r24, 0x7F	; 127
    1030:	80 93 c0 00 	sts	0x00C0, r24
//ENABLE_UART0_RX_INT();
// sei();
nrk_int_enable();
    1034:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>
}
    1038:	ff 91       	pop	r31
    103a:	ef 91       	pop	r30
    103c:	bf 91       	pop	r27
    103e:	af 91       	pop	r26
    1040:	9f 91       	pop	r25
    1042:	8f 91       	pop	r24
    1044:	7f 91       	pop	r23
    1046:	6f 91       	pop	r22
    1048:	5f 91       	pop	r21
    104a:	4f 91       	pop	r20
    104c:	3f 91       	pop	r19
    104e:	2f 91       	pop	r18
    1050:	0f 90       	pop	r0
    1052:	0b be       	out	0x3b, r0	; 59
    1054:	0f 90       	pop	r0
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	0f 90       	pop	r0
    105a:	1f 90       	pop	r1
    105c:	18 95       	reti

0000105e <nrk_uart_data_ready>:
   return tmp;
}

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==0)
    105e:	81 11       	cpse	r24, r1
    1060:	0d c0       	rjmp	.+26     	; 0x107c <nrk_uart_data_ready+0x1e>
        {
        //if( UCSR0A & BM(RXC0) ) return 1;
	if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	40 91 e4 03 	lds	r20, 0x03E4
    1068:	50 91 e5 03 	lds	r21, 0x03E5
    106c:	20 91 e2 03 	lds	r18, 0x03E2
    1070:	30 91 e3 03 	lds	r19, 0x03E3
    1074:	42 17       	cp	r20, r18
    1076:	53 07       	cpc	r21, r19
    1078:	51 f4       	brne	.+20     	; 0x108e <nrk_uart_data_ready+0x30>
    107a:	08 c0       	rjmp	.+16     	; 0x108c <nrk_uart_data_ready+0x2e>
        }
if(uart_num==1)
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	31 f4       	brne	.+12     	; 0x108c <nrk_uart_data_ready+0x2e>
	{
        if( UCSR1A & BM(RXC1) ) return 1;
    1080:	80 91 c8 00 	lds	r24, 0x00C8
    1084:	88 1f       	adc	r24, r24
    1086:	88 27       	eor	r24, r24
    1088:	88 1f       	adc	r24, r24
    108a:	08 95       	ret
	//if(uart_rx_buf_start!=uart_rx_buf_end) return 1;
	}
return 0;
    108c:	80 e0       	ldi	r24, 0x00	; 0
}
    108e:	08 95       	ret

00001090 <nrk_uart_rx_signal_get>:

nrk_sig_t nrk_uart_rx_signal_get()
{
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    1090:	80 91 d1 03 	lds	r24, 0x03D1
    1094:	8f 3f       	cpi	r24, 0xFF	; 255
    1096:	19 f4       	brne	.+6      	; 0x109e <nrk_uart_rx_signal_get+0xe>
    1098:	8e e0       	ldi	r24, 0x0E	; 14
    109a:	0e 94 8b 10 	call	0x2116	; 0x2116 <nrk_error_add>
   return uart_rx_signal;
}
    109e:	80 91 d1 03 	lds	r24, 0x03D1
    10a2:	08 95       	ret

000010a4 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    10a8:	fc 01       	movw	r30, r24
    10aa:	24 91       	lpm	r18, Z
    10ac:	ec 01       	movw	r28, r24
    10ae:	21 96       	adiw	r28, 0x01	; 1
    10b0:	22 23       	and	r18, r18
    10b2:	51 f0       	breq	.+20     	; 0x10c8 <nrk_kprintf+0x24>
        putchar(c);
    10b4:	60 91 d6 06 	lds	r22, 0x06D6
    10b8:	70 91 d7 06 	lds	r23, 0x06D7
    10bc:	82 2f       	mov	r24, r18
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 dd 25 	call	0x4bba	; 0x4bba <fputc>
    10c4:	ce 01       	movw	r24, r28
    10c6:	f0 cf       	rjmp	.-32     	; 0x10a8 <nrk_kprintf+0x4>
}
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	08 95       	ret

000010ce <getc0>:
char getc0()
{
char tmp;
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
    10ce:	20 91 e4 03 	lds	r18, 0x03E4
    10d2:	30 91 e5 03 	lds	r19, 0x03E5
    10d6:	80 91 e2 03 	lds	r24, 0x03E2
    10da:	90 91 e3 03 	lds	r25, 0x03E3
    10de:	28 17       	cp	r18, r24
    10e0:	39 07       	cpc	r19, r25
    10e2:	69 f4       	brne	.+26     	; 0x10fe <getc0+0x30>
    10e4:	80 91 d1 03 	lds	r24, 0x03D1
    10e8:	0e 94 9f 12 	call	0x253e	; 0x253e <nrk_signal_register>
    10ec:	60 91 d1 03 	lds	r22, 0x03D1
    10f0:	77 27       	eor	r23, r23
    10f2:	67 fd       	sbrc	r22, 7
    10f4:	70 95       	com	r23
    10f6:	87 2f       	mov	r24, r23
    10f8:	97 2f       	mov	r25, r23
    10fa:	0e 94 42 13 	call	0x2684	; 0x2684 <nrk_event_wait>
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
    10fe:	6f 3f       	cpi	r22, 0xFF	; 255
    1100:	21 f4       	brne	.+8      	; 0x110a <getc0+0x3c>
    1102:	84 eb       	ldi	r24, 0xB4	; 180
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	0e 94 52 08 	call	0x10a4	; 0x10a4 <nrk_kprintf>
   tmp=uart_rx_buf[uart_rx_buf_start];
    110a:	20 91 e4 03 	lds	r18, 0x03E4
    110e:	30 91 e5 03 	lds	r19, 0x03E5
    1112:	f9 01       	movw	r30, r18
    1114:	ee 52       	subi	r30, 0x2E	; 46
    1116:	fc 4f       	sbci	r31, 0xFC	; 252
    1118:	80 81       	ld	r24, Z
   uart_rx_buf_start++;
    111a:	2f 5f       	subi	r18, 0xFF	; 255
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    111e:	20 31       	cpi	r18, 0x10	; 16
    1120:	31 05       	cpc	r19, r1
    1122:	28 f4       	brcc	.+10     	; 0x112e <getc0+0x60>
int8_t v;

if(uart_rx_buf_start==uart_rx_buf_end) { nrk_signal_register(uart_rx_signal); v=nrk_event_wait(uart_rx_signal); }
if(v==NRK_ERROR ) nrk_kprintf(PSTR("uart rx sig failed\r\n" ));
   tmp=uart_rx_buf[uart_rx_buf_start];
   uart_rx_buf_start++;
    1124:	30 93 e5 03 	sts	0x03E5, r19
    1128:	20 93 e4 03 	sts	0x03E4, r18
    112c:	08 95       	ret
   if(uart_rx_buf_start>=MAX_RX_UART_BUF) { uart_rx_buf_start=0; }
    112e:	10 92 e5 03 	sts	0x03E5, r1
    1132:	10 92 e4 03 	sts	0x03E4, r1

   return tmp;
}
    1136:	08 95       	ret

00001138 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    1138:	86 e0       	ldi	r24, 0x06	; 6
    113a:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    113c:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    113e:	88 ef       	ldi	r24, 0xF8	; 248
    1140:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    1142:	80 ef       	ldi	r24, 0xF0	; 240
    1144:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    1146:	82 e0       	ldi	r24, 0x02	; 2
    1148:	8d b9       	out	0x0d, r24	; 13
    114a:	08 95       	ret

0000114c <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    114c:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <PORT_INIT>

00001150 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1150:	8f 3f       	cpi	r24, 0xFF	; 255
    1152:	09 f4       	brne	.+2      	; 0x1156 <nrk_gpio_set+0x6>
    1154:	6c c0       	rjmp	.+216    	; 0x122e <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    1156:	e8 2f       	mov	r30, r24
    1158:	e7 70       	andi	r30, 0x07	; 7
    115a:	4e 2f       	mov	r20, r30
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	47 30       	cpi	r20, 0x07	; 7
    1160:	51 05       	cpc	r21, r1
    1162:	08 f0       	brcs	.+2      	; 0x1166 <nrk_gpio_set+0x16>
    1164:	64 c0       	rjmp	.+200    	; 0x122e <nrk_gpio_set+0xde>
    1166:	fa 01       	movw	r30, r20
    1168:	e0 57       	subi	r30, 0x70	; 112
    116a:	ff 4f       	sbci	r31, 0xFF	; 255
    116c:	86 95       	lsr	r24
    116e:	86 95       	lsr	r24
    1170:	86 95       	lsr	r24
    1172:	0c 94 58 25 	jmp	0x4ab0	; 0x4ab0 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1176:	42 b1       	in	r20, 0x02	; 2
    1178:	21 e0       	ldi	r18, 0x01	; 1
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	b9 01       	movw	r22, r18
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <nrk_gpio_set+0x34>
    1180:	66 0f       	add	r22, r22
    1182:	77 1f       	adc	r23, r23
    1184:	8a 95       	dec	r24
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <nrk_gpio_set+0x30>
    1188:	cb 01       	movw	r24, r22
    118a:	84 2b       	or	r24, r20
    118c:	82 b9       	out	0x02, r24	; 2
    118e:	4d c0       	rjmp	.+154    	; 0x122a <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1190:	45 b1       	in	r20, 0x05	; 5
    1192:	21 e0       	ldi	r18, 0x01	; 1
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	b9 01       	movw	r22, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <nrk_gpio_set+0x4e>
    119a:	66 0f       	add	r22, r22
    119c:	77 1f       	adc	r23, r23
    119e:	8a 95       	dec	r24
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <nrk_gpio_set+0x4a>
    11a2:	cb 01       	movw	r24, r22
    11a4:	84 2b       	or	r24, r20
    11a6:	85 b9       	out	0x05, r24	; 5
    11a8:	40 c0       	rjmp	.+128    	; 0x122a <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    11aa:	48 b1       	in	r20, 0x08	; 8
    11ac:	21 e0       	ldi	r18, 0x01	; 1
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	b9 01       	movw	r22, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <nrk_gpio_set+0x68>
    11b4:	66 0f       	add	r22, r22
    11b6:	77 1f       	adc	r23, r23
    11b8:	8a 95       	dec	r24
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <nrk_gpio_set+0x64>
    11bc:	cb 01       	movw	r24, r22
    11be:	84 2b       	or	r24, r20
    11c0:	88 b9       	out	0x08, r24	; 8
    11c2:	33 c0       	rjmp	.+102    	; 0x122a <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    11c4:	4b b1       	in	r20, 0x0b	; 11
    11c6:	21 e0       	ldi	r18, 0x01	; 1
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	b9 01       	movw	r22, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <nrk_gpio_set+0x82>
    11ce:	66 0f       	add	r22, r22
    11d0:	77 1f       	adc	r23, r23
    11d2:	8a 95       	dec	r24
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <nrk_gpio_set+0x7e>
    11d6:	cb 01       	movw	r24, r22
    11d8:	84 2b       	or	r24, r20
    11da:	8b b9       	out	0x0b, r24	; 11
    11dc:	26 c0       	rjmp	.+76     	; 0x122a <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    11de:	4e b1       	in	r20, 0x0e	; 14
    11e0:	21 e0       	ldi	r18, 0x01	; 1
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	b9 01       	movw	r22, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <nrk_gpio_set+0x9c>
    11e8:	66 0f       	add	r22, r22
    11ea:	77 1f       	adc	r23, r23
    11ec:	8a 95       	dec	r24
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <nrk_gpio_set+0x98>
    11f0:	cb 01       	movw	r24, r22
    11f2:	84 2b       	or	r24, r20
    11f4:	8e b9       	out	0x0e, r24	; 14
    11f6:	19 c0       	rjmp	.+50     	; 0x122a <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    11f8:	41 b3       	in	r20, 0x11	; 17
    11fa:	21 e0       	ldi	r18, 0x01	; 1
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	b9 01       	movw	r22, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <nrk_gpio_set+0xb6>
    1202:	66 0f       	add	r22, r22
    1204:	77 1f       	adc	r23, r23
    1206:	8a 95       	dec	r24
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <nrk_gpio_set+0xb2>
    120a:	cb 01       	movw	r24, r22
    120c:	84 2b       	or	r24, r20
    120e:	81 bb       	out	0x11, r24	; 17
    1210:	0c c0       	rjmp	.+24     	; 0x122a <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1212:	44 b3       	in	r20, 0x14	; 20
    1214:	21 e0       	ldi	r18, 0x01	; 1
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	b9 01       	movw	r22, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <nrk_gpio_set+0xd0>
    121c:	66 0f       	add	r22, r22
    121e:	77 1f       	adc	r23, r23
    1220:	8a 95       	dec	r24
    1222:	e2 f7       	brpl	.-8      	; 0x121c <nrk_gpio_set+0xcc>
    1224:	cb 01       	movw	r24, r22
    1226:	84 2b       	or	r24, r20
    1228:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    122a:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    122c:	08 95       	ret
                default: return -1;
    122e:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1230:	08 95       	ret

00001232 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1232:	8f 3f       	cpi	r24, 0xFF	; 255
    1234:	09 f4       	brne	.+2      	; 0x1238 <nrk_gpio_clr+0x6>
    1236:	73 c0       	rjmp	.+230    	; 0x131e <nrk_gpio_clr+0xec>
        switch (pin & 0x07) {
    1238:	e8 2f       	mov	r30, r24
    123a:	e7 70       	andi	r30, 0x07	; 7
    123c:	4e 2f       	mov	r20, r30
    123e:	50 e0       	ldi	r21, 0x00	; 0
    1240:	47 30       	cpi	r20, 0x07	; 7
    1242:	51 05       	cpc	r21, r1
    1244:	08 f0       	brcs	.+2      	; 0x1248 <nrk_gpio_clr+0x16>
    1246:	6b c0       	rjmp	.+214    	; 0x131e <nrk_gpio_clr+0xec>
    1248:	fa 01       	movw	r30, r20
    124a:	e9 56       	subi	r30, 0x69	; 105
    124c:	ff 4f       	sbci	r31, 0xFF	; 255
    124e:	86 95       	lsr	r24
    1250:	86 95       	lsr	r24
    1252:	86 95       	lsr	r24
    1254:	0c 94 58 25 	jmp	0x4ab0	; 0x4ab0 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1258:	42 b1       	in	r20, 0x02	; 2
    125a:	21 e0       	ldi	r18, 0x01	; 1
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	b9 01       	movw	r22, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <nrk_gpio_clr+0x34>
    1262:	66 0f       	add	r22, r22
    1264:	77 1f       	adc	r23, r23
    1266:	8a 95       	dec	r24
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <nrk_gpio_clr+0x30>
    126a:	cb 01       	movw	r24, r22
    126c:	80 95       	com	r24
    126e:	84 23       	and	r24, r20
    1270:	82 b9       	out	0x02, r24	; 2
    1272:	53 c0       	rjmp	.+166    	; 0x131a <nrk_gpio_clr+0xe8>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1274:	45 b1       	in	r20, 0x05	; 5
    1276:	21 e0       	ldi	r18, 0x01	; 1
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	b9 01       	movw	r22, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <nrk_gpio_clr+0x50>
    127e:	66 0f       	add	r22, r22
    1280:	77 1f       	adc	r23, r23
    1282:	8a 95       	dec	r24
    1284:	e2 f7       	brpl	.-8      	; 0x127e <nrk_gpio_clr+0x4c>
    1286:	cb 01       	movw	r24, r22
    1288:	80 95       	com	r24
    128a:	84 23       	and	r24, r20
    128c:	85 b9       	out	0x05, r24	; 5
    128e:	45 c0       	rjmp	.+138    	; 0x131a <nrk_gpio_clr+0xe8>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1290:	48 b1       	in	r20, 0x08	; 8
    1292:	21 e0       	ldi	r18, 0x01	; 1
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	b9 01       	movw	r22, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <nrk_gpio_clr+0x6c>
    129a:	66 0f       	add	r22, r22
    129c:	77 1f       	adc	r23, r23
    129e:	8a 95       	dec	r24
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <nrk_gpio_clr+0x68>
    12a2:	cb 01       	movw	r24, r22
    12a4:	80 95       	com	r24
    12a6:	84 23       	and	r24, r20
    12a8:	88 b9       	out	0x08, r24	; 8
    12aa:	37 c0       	rjmp	.+110    	; 0x131a <nrk_gpio_clr+0xe8>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    12ac:	4b b1       	in	r20, 0x0b	; 11
    12ae:	21 e0       	ldi	r18, 0x01	; 1
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	b9 01       	movw	r22, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <nrk_gpio_clr+0x88>
    12b6:	66 0f       	add	r22, r22
    12b8:	77 1f       	adc	r23, r23
    12ba:	8a 95       	dec	r24
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <nrk_gpio_clr+0x84>
    12be:	cb 01       	movw	r24, r22
    12c0:	80 95       	com	r24
    12c2:	84 23       	and	r24, r20
    12c4:	8b b9       	out	0x0b, r24	; 11
    12c6:	29 c0       	rjmp	.+82     	; 0x131a <nrk_gpio_clr+0xe8>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    12c8:	4e b1       	in	r20, 0x0e	; 14
    12ca:	21 e0       	ldi	r18, 0x01	; 1
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	b9 01       	movw	r22, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <nrk_gpio_clr+0xa4>
    12d2:	66 0f       	add	r22, r22
    12d4:	77 1f       	adc	r23, r23
    12d6:	8a 95       	dec	r24
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <nrk_gpio_clr+0xa0>
    12da:	cb 01       	movw	r24, r22
    12dc:	80 95       	com	r24
    12de:	84 23       	and	r24, r20
    12e0:	8e b9       	out	0x0e, r24	; 14
    12e2:	1b c0       	rjmp	.+54     	; 0x131a <nrk_gpio_clr+0xe8>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    12e4:	41 b3       	in	r20, 0x11	; 17
    12e6:	21 e0       	ldi	r18, 0x01	; 1
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	b9 01       	movw	r22, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <nrk_gpio_clr+0xc0>
    12ee:	66 0f       	add	r22, r22
    12f0:	77 1f       	adc	r23, r23
    12f2:	8a 95       	dec	r24
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <nrk_gpio_clr+0xbc>
    12f6:	cb 01       	movw	r24, r22
    12f8:	80 95       	com	r24
    12fa:	84 23       	and	r24, r20
    12fc:	81 bb       	out	0x11, r24	; 17
    12fe:	0d c0       	rjmp	.+26     	; 0x131a <nrk_gpio_clr+0xe8>
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1300:	44 b3       	in	r20, 0x14	; 20
    1302:	21 e0       	ldi	r18, 0x01	; 1
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	b9 01       	movw	r22, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <nrk_gpio_clr+0xdc>
    130a:	66 0f       	add	r22, r22
    130c:	77 1f       	adc	r23, r23
    130e:	8a 95       	dec	r24
    1310:	e2 f7       	brpl	.-8      	; 0x130a <nrk_gpio_clr+0xd8>
    1312:	cb 01       	movw	r24, r22
    1314:	80 95       	com	r24
    1316:	84 23       	and	r24, r20
    1318:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    131a:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    131c:	08 95       	ret
                default: return -1;
    131e:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1320:	08 95       	ret

00001322 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1322:	8f 3f       	cpi	r24, 0xFF	; 255
    1324:	31 f1       	breq	.+76     	; 0x1372 <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    1326:	e8 2f       	mov	r30, r24
    1328:	e7 70       	andi	r30, 0x07	; 7
    132a:	4e 2f       	mov	r20, r30
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	47 30       	cpi	r20, 0x07	; 7
    1330:	51 05       	cpc	r21, r1
    1332:	f8 f4       	brcc	.+62     	; 0x1372 <nrk_gpio_get+0x50>
    1334:	fa 01       	movw	r30, r20
    1336:	e2 56       	subi	r30, 0x62	; 98
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	28 2f       	mov	r18, r24
    133c:	26 95       	lsr	r18
    133e:	26 95       	lsr	r18
    1340:	26 95       	lsr	r18
    1342:	0c 94 58 25 	jmp	0x4ab0	; 0x4ab0 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    1346:	90 b1       	in	r25, 0x00	; 0
    1348:	0b c0       	rjmp	.+22     	; 0x1360 <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    134a:	93 b1       	in	r25, 0x03	; 3
    134c:	09 c0       	rjmp	.+18     	; 0x1360 <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    134e:	96 b1       	in	r25, 0x06	; 6
    1350:	07 c0       	rjmp	.+14     	; 0x1360 <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    1352:	99 b1       	in	r25, 0x09	; 9
    1354:	05 c0       	rjmp	.+10     	; 0x1360 <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    1356:	9c b1       	in	r25, 0x0c	; 12
    1358:	03 c0       	rjmp	.+6      	; 0x1360 <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    135a:	9f b1       	in	r25, 0x0f	; 15
    135c:	01 c0       	rjmp	.+2      	; 0x1360 <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    135e:	92 b3       	in	r25, 0x12	; 18
    1360:	89 2f       	mov	r24, r25
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 c0       	rjmp	.+4      	; 0x136a <nrk_gpio_get+0x48>
    1366:	95 95       	asr	r25
    1368:	87 95       	ror	r24
    136a:	2a 95       	dec	r18
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <nrk_gpio_get+0x44>
    136e:	81 70       	andi	r24, 0x01	; 1
    1370:	08 95       	ret
                default: return -1;
    1372:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1374:	08 95       	ret

00001376 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1376:	8f 3f       	cpi	r24, 0xFF	; 255
    1378:	09 f4       	brne	.+2      	; 0x137c <nrk_gpio_toggle+0x6>
    137a:	06 c1       	rjmp	.+524    	; 0x1588 <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    137c:	e8 2f       	mov	r30, r24
    137e:	e7 70       	andi	r30, 0x07	; 7
    1380:	4e 2f       	mov	r20, r30
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	47 30       	cpi	r20, 0x07	; 7
    1386:	51 05       	cpc	r21, r1
    1388:	08 f0       	brcs	.+2      	; 0x138c <nrk_gpio_toggle+0x16>
    138a:	fe c0       	rjmp	.+508    	; 0x1588 <nrk_gpio_toggle+0x212>
    138c:	fa 01       	movw	r30, r20
    138e:	eb 55       	subi	r30, 0x5B	; 91
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	86 95       	lsr	r24
    1394:	86 95       	lsr	r24
    1396:	86 95       	lsr	r24
    1398:	0c 94 58 25 	jmp	0x4ab0	; 0x4ab0 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    139c:	20 b1       	in	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	08 2e       	mov	r0, r24
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <nrk_gpio_toggle+0x32>
    13a4:	35 95       	asr	r19
    13a6:	27 95       	ror	r18
    13a8:	0a 94       	dec	r0
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    13ac:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    13ae:	20 fd       	sbrc	r18, 0
    13b0:	0b c0       	rjmp	.+22     	; 0x13c8 <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    13b2:	21 e0       	ldi	r18, 0x01	; 1
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	b9 01       	movw	r22, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <nrk_gpio_toggle+0x48>
    13ba:	66 0f       	add	r22, r22
    13bc:	77 1f       	adc	r23, r23
    13be:	8a 95       	dec	r24
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <nrk_gpio_toggle+0x44>
    13c2:	cb 01       	movw	r24, r22
    13c4:	84 2b       	or	r24, r20
    13c6:	0b c0       	rjmp	.+22     	; 0x13de <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    13c8:	21 e0       	ldi	r18, 0x01	; 1
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	b9 01       	movw	r22, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <nrk_gpio_toggle+0x5e>
    13d0:	66 0f       	add	r22, r22
    13d2:	77 1f       	adc	r23, r23
    13d4:	8a 95       	dec	r24
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <nrk_gpio_toggle+0x5a>
    13d8:	cb 01       	movw	r24, r22
    13da:	80 95       	com	r24
    13dc:	84 23       	and	r24, r20
    13de:	82 b9       	out	0x02, r24	; 2
    13e0:	16 c0       	rjmp	.+44     	; 0x140e <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    13e2:	23 b1       	in	r18, 0x03	; 3
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	08 2e       	mov	r0, r24
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <nrk_gpio_toggle+0x78>
    13ea:	35 95       	asr	r19
    13ec:	27 95       	ror	r18
    13ee:	0a 94       	dec	r0
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    13f2:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    13f4:	20 fd       	sbrc	r18, 0
    13f6:	0d c0       	rjmp	.+26     	; 0x1412 <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    13f8:	21 e0       	ldi	r18, 0x01	; 1
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	b9 01       	movw	r22, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <nrk_gpio_toggle+0x8e>
    1400:	66 0f       	add	r22, r22
    1402:	77 1f       	adc	r23, r23
    1404:	8a 95       	dec	r24
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <nrk_gpio_toggle+0x8a>
    1408:	cb 01       	movw	r24, r22
    140a:	84 2b       	or	r24, r20
    140c:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    1412:	21 e0       	ldi	r18, 0x01	; 1
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	b9 01       	movw	r22, r18
    1418:	02 c0       	rjmp	.+4      	; 0x141e <nrk_gpio_toggle+0xa8>
    141a:	66 0f       	add	r22, r22
    141c:	77 1f       	adc	r23, r23
    141e:	8a 95       	dec	r24
    1420:	e2 f7       	brpl	.-8      	; 0x141a <nrk_gpio_toggle+0xa4>
    1422:	cb 01       	movw	r24, r22
    1424:	80 95       	com	r24
    1426:	84 23       	and	r24, r20
    1428:	f1 cf       	rjmp	.-30     	; 0x140c <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    142a:	26 b1       	in	r18, 0x06	; 6
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	08 2e       	mov	r0, r24
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <nrk_gpio_toggle+0xc0>
    1432:	35 95       	asr	r19
    1434:	27 95       	ror	r18
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    143a:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    143c:	20 fd       	sbrc	r18, 0
    143e:	0b c0       	rjmp	.+22     	; 0x1456 <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1440:	21 e0       	ldi	r18, 0x01	; 1
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	b9 01       	movw	r22, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <nrk_gpio_toggle+0xd6>
    1448:	66 0f       	add	r22, r22
    144a:	77 1f       	adc	r23, r23
    144c:	8a 95       	dec	r24
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <nrk_gpio_toggle+0xd2>
    1450:	cb 01       	movw	r24, r22
    1452:	84 2b       	or	r24, r20
    1454:	0b c0       	rjmp	.+22     	; 0x146c <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    1456:	21 e0       	ldi	r18, 0x01	; 1
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	b9 01       	movw	r22, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <nrk_gpio_toggle+0xec>
    145e:	66 0f       	add	r22, r22
    1460:	77 1f       	adc	r23, r23
    1462:	8a 95       	dec	r24
    1464:	e2 f7       	brpl	.-8      	; 0x145e <nrk_gpio_toggle+0xe8>
    1466:	cb 01       	movw	r24, r22
    1468:	80 95       	com	r24
    146a:	84 23       	and	r24, r20
    146c:	88 b9       	out	0x08, r24	; 8
    146e:	cf cf       	rjmp	.-98     	; 0x140e <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    1470:	29 b1       	in	r18, 0x09	; 9
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	08 2e       	mov	r0, r24
    1476:	02 c0       	rjmp	.+4      	; 0x147c <nrk_gpio_toggle+0x106>
    1478:	35 95       	asr	r19
    147a:	27 95       	ror	r18
    147c:	0a 94       	dec	r0
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    1480:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    1482:	20 fd       	sbrc	r18, 0
    1484:	0b c0       	rjmp	.+22     	; 0x149c <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    1486:	21 e0       	ldi	r18, 0x01	; 1
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	b9 01       	movw	r22, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <nrk_gpio_toggle+0x11c>
    148e:	66 0f       	add	r22, r22
    1490:	77 1f       	adc	r23, r23
    1492:	8a 95       	dec	r24
    1494:	e2 f7       	brpl	.-8      	; 0x148e <nrk_gpio_toggle+0x118>
    1496:	cb 01       	movw	r24, r22
    1498:	84 2b       	or	r24, r20
    149a:	0b c0       	rjmp	.+22     	; 0x14b2 <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    149c:	21 e0       	ldi	r18, 0x01	; 1
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	b9 01       	movw	r22, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <nrk_gpio_toggle+0x132>
    14a4:	66 0f       	add	r22, r22
    14a6:	77 1f       	adc	r23, r23
    14a8:	8a 95       	dec	r24
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <nrk_gpio_toggle+0x12e>
    14ac:	cb 01       	movw	r24, r22
    14ae:	80 95       	com	r24
    14b0:	84 23       	and	r24, r20
    14b2:	8b b9       	out	0x0b, r24	; 11
    14b4:	ac cf       	rjmp	.-168    	; 0x140e <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    14b6:	2c b1       	in	r18, 0x0c	; 12
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	08 2e       	mov	r0, r24
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <nrk_gpio_toggle+0x14c>
    14be:	35 95       	asr	r19
    14c0:	27 95       	ror	r18
    14c2:	0a 94       	dec	r0
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    14c6:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    14c8:	20 fd       	sbrc	r18, 0
    14ca:	0b c0       	rjmp	.+22     	; 0x14e2 <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    14cc:	21 e0       	ldi	r18, 0x01	; 1
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	b9 01       	movw	r22, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <nrk_gpio_toggle+0x162>
    14d4:	66 0f       	add	r22, r22
    14d6:	77 1f       	adc	r23, r23
    14d8:	8a 95       	dec	r24
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <nrk_gpio_toggle+0x15e>
    14dc:	cb 01       	movw	r24, r22
    14de:	84 2b       	or	r24, r20
    14e0:	0b c0       	rjmp	.+22     	; 0x14f8 <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    14e2:	21 e0       	ldi	r18, 0x01	; 1
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	b9 01       	movw	r22, r18
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <nrk_gpio_toggle+0x178>
    14ea:	66 0f       	add	r22, r22
    14ec:	77 1f       	adc	r23, r23
    14ee:	8a 95       	dec	r24
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <nrk_gpio_toggle+0x174>
    14f2:	cb 01       	movw	r24, r22
    14f4:	80 95       	com	r24
    14f6:	84 23       	and	r24, r20
    14f8:	8e b9       	out	0x0e, r24	; 14
    14fa:	89 cf       	rjmp	.-238    	; 0x140e <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    14fc:	2f b1       	in	r18, 0x0f	; 15
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	08 2e       	mov	r0, r24
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <nrk_gpio_toggle+0x192>
    1504:	35 95       	asr	r19
    1506:	27 95       	ror	r18
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    150c:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    150e:	20 fd       	sbrc	r18, 0
    1510:	0b c0       	rjmp	.+22     	; 0x1528 <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    1512:	21 e0       	ldi	r18, 0x01	; 1
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	b9 01       	movw	r22, r18
    1518:	02 c0       	rjmp	.+4      	; 0x151e <nrk_gpio_toggle+0x1a8>
    151a:	66 0f       	add	r22, r22
    151c:	77 1f       	adc	r23, r23
    151e:	8a 95       	dec	r24
    1520:	e2 f7       	brpl	.-8      	; 0x151a <nrk_gpio_toggle+0x1a4>
    1522:	cb 01       	movw	r24, r22
    1524:	84 2b       	or	r24, r20
    1526:	0b c0       	rjmp	.+22     	; 0x153e <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    1528:	21 e0       	ldi	r18, 0x01	; 1
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	b9 01       	movw	r22, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <nrk_gpio_toggle+0x1be>
    1530:	66 0f       	add	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	8a 95       	dec	r24
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <nrk_gpio_toggle+0x1ba>
    1538:	cb 01       	movw	r24, r22
    153a:	80 95       	com	r24
    153c:	84 23       	and	r24, r20
    153e:	81 bb       	out	0x11, r24	; 17
    1540:	66 cf       	rjmp	.-308    	; 0x140e <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    1542:	22 b3       	in	r18, 0x12	; 18
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	08 2e       	mov	r0, r24
    1548:	02 c0       	rjmp	.+4      	; 0x154e <nrk_gpio_toggle+0x1d8>
    154a:	35 95       	asr	r19
    154c:	27 95       	ror	r18
    154e:	0a 94       	dec	r0
    1550:	e2 f7       	brpl	.-8      	; 0x154a <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    1552:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    1554:	20 fd       	sbrc	r18, 0
    1556:	0b c0       	rjmp	.+22     	; 0x156e <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    1558:	21 e0       	ldi	r18, 0x01	; 1
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	b9 01       	movw	r22, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <nrk_gpio_toggle+0x1ee>
    1560:	66 0f       	add	r22, r22
    1562:	77 1f       	adc	r23, r23
    1564:	8a 95       	dec	r24
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <nrk_gpio_toggle+0x1ea>
    1568:	cb 01       	movw	r24, r22
    156a:	84 2b       	or	r24, r20
    156c:	0b c0       	rjmp	.+22     	; 0x1584 <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    156e:	21 e0       	ldi	r18, 0x01	; 1
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	b9 01       	movw	r22, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <nrk_gpio_toggle+0x204>
    1576:	66 0f       	add	r22, r22
    1578:	77 1f       	adc	r23, r23
    157a:	8a 95       	dec	r24
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <nrk_gpio_toggle+0x200>
    157e:	cb 01       	movw	r24, r22
    1580:	80 95       	com	r24
    1582:	84 23       	and	r24, r20
    1584:	84 bb       	out	0x14, r24	; 20
    1586:	43 cf       	rjmp	.-378    	; 0x140e <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    1588:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    158a:	08 95       	ret

0000158c <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    158c:	8f 3f       	cpi	r24, 0xFF	; 255
    158e:	09 f4       	brne	.+2      	; 0x1592 <nrk_gpio_direction+0x6>
    1590:	d5 c0       	rjmp	.+426    	; 0x173c <nrk_gpio_direction+0x1b0>
    1592:	e8 2f       	mov	r30, r24
    1594:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    1596:	4e 2f       	mov	r20, r30
    1598:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    159a:	61 11       	cpse	r22, r1
    159c:	67 c0       	rjmp	.+206    	; 0x166c <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    159e:	47 30       	cpi	r20, 0x07	; 7
    15a0:	51 05       	cpc	r21, r1
    15a2:	08 f0       	brcs	.+2      	; 0x15a6 <nrk_gpio_direction+0x1a>
    15a4:	cb c0       	rjmp	.+406    	; 0x173c <nrk_gpio_direction+0x1b0>
    15a6:	fa 01       	movw	r30, r20
    15a8:	e4 55       	subi	r30, 0x54	; 84
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	86 95       	lsr	r24
    15ae:	86 95       	lsr	r24
    15b0:	86 95       	lsr	r24
    15b2:	0c 94 58 25 	jmp	0x4ab0	; 0x4ab0 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    15b6:	41 b1       	in	r20, 0x01	; 1
    15b8:	21 e0       	ldi	r18, 0x01	; 1
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	b9 01       	movw	r22, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <nrk_gpio_direction+0x38>
    15c0:	66 0f       	add	r22, r22
    15c2:	77 1f       	adc	r23, r23
    15c4:	8a 95       	dec	r24
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <nrk_gpio_direction+0x34>
    15c8:	cb 01       	movw	r24, r22
    15ca:	80 95       	com	r24
    15cc:	84 23       	and	r24, r20
    15ce:	65 c0       	rjmp	.+202    	; 0x169a <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    15d0:	44 b1       	in	r20, 0x04	; 4
    15d2:	21 e0       	ldi	r18, 0x01	; 1
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	b9 01       	movw	r22, r18
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <nrk_gpio_direction+0x52>
    15da:	66 0f       	add	r22, r22
    15dc:	77 1f       	adc	r23, r23
    15de:	8a 95       	dec	r24
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <nrk_gpio_direction+0x4e>
    15e2:	cb 01       	movw	r24, r22
    15e4:	80 95       	com	r24
    15e6:	84 23       	and	r24, r20
    15e8:	65 c0       	rjmp	.+202    	; 0x16b4 <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    15ea:	47 b1       	in	r20, 0x07	; 7
    15ec:	21 e0       	ldi	r18, 0x01	; 1
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	b9 01       	movw	r22, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <nrk_gpio_direction+0x6c>
    15f4:	66 0f       	add	r22, r22
    15f6:	77 1f       	adc	r23, r23
    15f8:	8a 95       	dec	r24
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <nrk_gpio_direction+0x68>
    15fc:	cb 01       	movw	r24, r22
    15fe:	80 95       	com	r24
    1600:	84 23       	and	r24, r20
    1602:	65 c0       	rjmp	.+202    	; 0x16ce <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    1604:	4a b1       	in	r20, 0x0a	; 10
    1606:	21 e0       	ldi	r18, 0x01	; 1
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	b9 01       	movw	r22, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <nrk_gpio_direction+0x86>
    160e:	66 0f       	add	r22, r22
    1610:	77 1f       	adc	r23, r23
    1612:	8a 95       	dec	r24
    1614:	e2 f7       	brpl	.-8      	; 0x160e <nrk_gpio_direction+0x82>
    1616:	cb 01       	movw	r24, r22
    1618:	80 95       	com	r24
    161a:	84 23       	and	r24, r20
    161c:	65 c0       	rjmp	.+202    	; 0x16e8 <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    161e:	4d b1       	in	r20, 0x0d	; 13
    1620:	21 e0       	ldi	r18, 0x01	; 1
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	b9 01       	movw	r22, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <nrk_gpio_direction+0xa0>
    1628:	66 0f       	add	r22, r22
    162a:	77 1f       	adc	r23, r23
    162c:	8a 95       	dec	r24
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <nrk_gpio_direction+0x9c>
    1630:	cb 01       	movw	r24, r22
    1632:	80 95       	com	r24
    1634:	84 23       	and	r24, r20
    1636:	65 c0       	rjmp	.+202    	; 0x1702 <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    1638:	40 b3       	in	r20, 0x10	; 16
    163a:	21 e0       	ldi	r18, 0x01	; 1
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	b9 01       	movw	r22, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <nrk_gpio_direction+0xba>
    1642:	66 0f       	add	r22, r22
    1644:	77 1f       	adc	r23, r23
    1646:	8a 95       	dec	r24
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <nrk_gpio_direction+0xb6>
    164a:	cb 01       	movw	r24, r22
    164c:	80 95       	com	r24
    164e:	84 23       	and	r24, r20
    1650:	65 c0       	rjmp	.+202    	; 0x171c <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    1652:	43 b3       	in	r20, 0x13	; 19
    1654:	21 e0       	ldi	r18, 0x01	; 1
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	b9 01       	movw	r22, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <nrk_gpio_direction+0xd4>
    165c:	66 0f       	add	r22, r22
    165e:	77 1f       	adc	r23, r23
    1660:	8a 95       	dec	r24
    1662:	e2 f7       	brpl	.-8      	; 0x165c <nrk_gpio_direction+0xd0>
    1664:	cb 01       	movw	r24, r22
    1666:	80 95       	com	r24
    1668:	84 23       	and	r24, r20
    166a:	65 c0       	rjmp	.+202    	; 0x1736 <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    166c:	47 30       	cpi	r20, 0x07	; 7
    166e:	51 05       	cpc	r21, r1
    1670:	08 f0       	brcs	.+2      	; 0x1674 <nrk_gpio_direction+0xe8>
    1672:	64 c0       	rjmp	.+200    	; 0x173c <nrk_gpio_direction+0x1b0>
    1674:	fa 01       	movw	r30, r20
    1676:	ed 54       	subi	r30, 0x4D	; 77
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	86 95       	lsr	r24
    167c:	86 95       	lsr	r24
    167e:	86 95       	lsr	r24
    1680:	0c 94 58 25 	jmp	0x4ab0	; 0x4ab0 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    1684:	41 b1       	in	r20, 0x01	; 1
    1686:	21 e0       	ldi	r18, 0x01	; 1
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	b9 01       	movw	r22, r18
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <nrk_gpio_direction+0x106>
    168e:	66 0f       	add	r22, r22
    1690:	77 1f       	adc	r23, r23
    1692:	8a 95       	dec	r24
    1694:	e2 f7       	brpl	.-8      	; 0x168e <nrk_gpio_direction+0x102>
    1696:	cb 01       	movw	r24, r22
    1698:	84 2b       	or	r24, r20
    169a:	81 b9       	out	0x01, r24	; 1
    169c:	4d c0       	rjmp	.+154    	; 0x1738 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    169e:	44 b1       	in	r20, 0x04	; 4
    16a0:	21 e0       	ldi	r18, 0x01	; 1
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	b9 01       	movw	r22, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <nrk_gpio_direction+0x120>
    16a8:	66 0f       	add	r22, r22
    16aa:	77 1f       	adc	r23, r23
    16ac:	8a 95       	dec	r24
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <nrk_gpio_direction+0x11c>
    16b0:	cb 01       	movw	r24, r22
    16b2:	84 2b       	or	r24, r20
    16b4:	84 b9       	out	0x04, r24	; 4
    16b6:	40 c0       	rjmp	.+128    	; 0x1738 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    16b8:	47 b1       	in	r20, 0x07	; 7
    16ba:	21 e0       	ldi	r18, 0x01	; 1
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	b9 01       	movw	r22, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <nrk_gpio_direction+0x13a>
    16c2:	66 0f       	add	r22, r22
    16c4:	77 1f       	adc	r23, r23
    16c6:	8a 95       	dec	r24
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <nrk_gpio_direction+0x136>
    16ca:	cb 01       	movw	r24, r22
    16cc:	84 2b       	or	r24, r20
    16ce:	87 b9       	out	0x07, r24	; 7
    16d0:	33 c0       	rjmp	.+102    	; 0x1738 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    16d2:	4a b1       	in	r20, 0x0a	; 10
    16d4:	21 e0       	ldi	r18, 0x01	; 1
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	b9 01       	movw	r22, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <nrk_gpio_direction+0x154>
    16dc:	66 0f       	add	r22, r22
    16de:	77 1f       	adc	r23, r23
    16e0:	8a 95       	dec	r24
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <nrk_gpio_direction+0x150>
    16e4:	cb 01       	movw	r24, r22
    16e6:	84 2b       	or	r24, r20
    16e8:	8a b9       	out	0x0a, r24	; 10
    16ea:	26 c0       	rjmp	.+76     	; 0x1738 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    16ec:	4d b1       	in	r20, 0x0d	; 13
    16ee:	21 e0       	ldi	r18, 0x01	; 1
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	b9 01       	movw	r22, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <nrk_gpio_direction+0x16e>
    16f6:	66 0f       	add	r22, r22
    16f8:	77 1f       	adc	r23, r23
    16fa:	8a 95       	dec	r24
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <nrk_gpio_direction+0x16a>
    16fe:	cb 01       	movw	r24, r22
    1700:	84 2b       	or	r24, r20
    1702:	8d b9       	out	0x0d, r24	; 13
    1704:	19 c0       	rjmp	.+50     	; 0x1738 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    1706:	40 b3       	in	r20, 0x10	; 16
    1708:	21 e0       	ldi	r18, 0x01	; 1
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	b9 01       	movw	r22, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <nrk_gpio_direction+0x188>
    1710:	66 0f       	add	r22, r22
    1712:	77 1f       	adc	r23, r23
    1714:	8a 95       	dec	r24
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <nrk_gpio_direction+0x184>
    1718:	cb 01       	movw	r24, r22
    171a:	84 2b       	or	r24, r20
    171c:	80 bb       	out	0x10, r24	; 16
    171e:	0c c0       	rjmp	.+24     	; 0x1738 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    1720:	43 b3       	in	r20, 0x13	; 19
    1722:	21 e0       	ldi	r18, 0x01	; 1
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	b9 01       	movw	r22, r18
    1728:	02 c0       	rjmp	.+4      	; 0x172e <nrk_gpio_direction+0x1a2>
    172a:	66 0f       	add	r22, r22
    172c:	77 1f       	adc	r23, r23
    172e:	8a 95       	dec	r24
    1730:	e2 f7       	brpl	.-8      	; 0x172a <nrk_gpio_direction+0x19e>
    1732:	cb 01       	movw	r24, r22
    1734:	84 2b       	or	r24, r20
    1736:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    1738:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    173a:	08 95       	ret
                        default: return -1;
    173c:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    173e:	08 95       	ret

00001740 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    1740:	81 11       	cpse	r24, r1
    1742:	06 c0       	rjmp	.+12     	; 0x1750 <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    1744:	80 b1       	in	r24, 0x00	; 0
    1746:	86 95       	lsr	r24
    1748:	81 70       	andi	r24, 0x01	; 1
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	89 27       	eor	r24, r25
    174e:	08 95       	ret
	} 
return -1;
    1750:	8f ef       	ldi	r24, 0xFF	; 255
}
    1752:	08 95       	ret

00001754 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	11 f4       	brne	.+4      	; 0x175c <nrk_led_toggle+0x8>
    1758:	83 e2       	ldi	r24, 0x23	; 35
    175a:	0d c0       	rjmp	.+26     	; 0x1776 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    175c:	81 30       	cpi	r24, 0x01	; 1
    175e:	91 05       	cpc	r25, r1
    1760:	11 f4       	brne	.+4      	; 0x1766 <nrk_led_toggle+0x12>
    1762:	8b e2       	ldi	r24, 0x2B	; 43
    1764:	08 c0       	rjmp	.+16     	; 0x1776 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    1766:	82 30       	cpi	r24, 0x02	; 2
    1768:	91 05       	cpc	r25, r1
    176a:	11 f4       	brne	.+4      	; 0x1770 <nrk_led_toggle+0x1c>
    176c:	83 e3       	ldi	r24, 0x33	; 51
    176e:	03 c0       	rjmp	.+6      	; 0x1776 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    1770:	03 97       	sbiw	r24, 0x03	; 3
    1772:	29 f4       	brne	.+10     	; 0x177e <nrk_led_toggle+0x2a>
    1774:	8b e3       	ldi	r24, 0x3B	; 59
    1776:	0e 94 bb 09 	call	0x1376	; 0x1376 <nrk_gpio_toggle>
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	08 95       	ret
return -1;
    177e:	8f ef       	ldi	r24, 0xFF	; 255
}
    1780:	08 95       	ret

00001782 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	11 f4       	brne	.+4      	; 0x178a <nrk_led_clr+0x8>
    1786:	83 e2       	ldi	r24, 0x23	; 35
    1788:	0d c0       	rjmp	.+26     	; 0x17a4 <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	91 05       	cpc	r25, r1
    178e:	11 f4       	brne	.+4      	; 0x1794 <nrk_led_clr+0x12>
    1790:	8b e2       	ldi	r24, 0x2B	; 43
    1792:	08 c0       	rjmp	.+16     	; 0x17a4 <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    1794:	82 30       	cpi	r24, 0x02	; 2
    1796:	91 05       	cpc	r25, r1
    1798:	11 f4       	brne	.+4      	; 0x179e <nrk_led_clr+0x1c>
    179a:	83 e3       	ldi	r24, 0x33	; 51
    179c:	03 c0       	rjmp	.+6      	; 0x17a4 <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    179e:	03 97       	sbiw	r24, 0x03	; 3
    17a0:	29 f4       	brne	.+10     	; 0x17ac <nrk_led_clr+0x2a>
    17a2:	8b e3       	ldi	r24, 0x3B	; 59
    17a4:	0e 94 a8 08 	call	0x1150	; 0x1150 <nrk_gpio_set>
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	08 95       	ret
return -1;
    17ac:	8f ef       	ldi	r24, 0xFF	; 255
}
    17ae:	08 95       	ret

000017b0 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	11 f4       	brne	.+4      	; 0x17b8 <nrk_led_set+0x8>
    17b4:	83 e2       	ldi	r24, 0x23	; 35
    17b6:	0d c0       	rjmp	.+26     	; 0x17d2 <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	91 05       	cpc	r25, r1
    17bc:	11 f4       	brne	.+4      	; 0x17c2 <nrk_led_set+0x12>
    17be:	8b e2       	ldi	r24, 0x2B	; 43
    17c0:	08 c0       	rjmp	.+16     	; 0x17d2 <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    17c2:	82 30       	cpi	r24, 0x02	; 2
    17c4:	91 05       	cpc	r25, r1
    17c6:	11 f4       	brne	.+4      	; 0x17cc <nrk_led_set+0x1c>
    17c8:	83 e3       	ldi	r24, 0x33	; 51
    17ca:	03 c0       	rjmp	.+6      	; 0x17d2 <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    17cc:	03 97       	sbiw	r24, 0x03	; 3
    17ce:	29 f4       	brne	.+10     	; 0x17da <nrk_led_set+0x2a>
    17d0:	8b e3       	ldi	r24, 0x3B	; 59
    17d2:	0e 94 19 09 	call	0x1232	; 0x1232 <nrk_gpio_clr>
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	08 95       	ret
return -1;
    17da:	8f ef       	ldi	r24, 0xFF	; 255
}
    17dc:	08 95       	ret

000017de <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    17de:	88 23       	and	r24, r24
    17e0:	19 f0       	breq	.+6      	; 0x17e8 <nrk_gpio_pullups+0xa>
    17e2:	85 b7       	in	r24, 0x35	; 53
    17e4:	8f 7e       	andi	r24, 0xEF	; 239
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    17e8:	85 b7       	in	r24, 0x35	; 53
    17ea:	80 61       	ori	r24, 0x10	; 16
    17ec:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	08 95       	ret

000017f2 <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    17f2:	90 91 c8 00 	lds	r25, 0x00C8
    17f6:	95 ff       	sbrs	r25, 5
    17f8:	fc cf       	rjmp	.-8      	; 0x17f2 <putc1>
    17fa:	80 93 ce 00 	sts	0x00CE, r24
    17fe:	08 95       	ret

00001800 <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    1800:	90 93 c5 00 	sts	0x00C5, r25
    1804:	80 93 c4 00 	sts	0x00C4, r24
    1808:	86 e0       	ldi	r24, 0x06	; 6
    180a:	80 93 c2 00 	sts	0x00C2, r24
    180e:	e1 ec       	ldi	r30, 0xC1	; 193
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	8b 7f       	andi	r24, 0xFB	; 251
    1816:	80 83       	st	Z, r24
    1818:	a0 ec       	ldi	r26, 0xC0	; 192
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	8c 91       	ld	r24, X
    181e:	82 60       	ori	r24, 0x02	; 2
    1820:	8c 93       	st	X, r24
ENABLE_UART0();
    1822:	80 81       	ld	r24, Z
    1824:	88 61       	ori	r24, 0x18	; 24
    1826:	80 83       	st	Z, r24
    1828:	08 95       	ret

0000182a <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    182a:	90 93 cd 00 	sts	0x00CD, r25
    182e:	80 93 cc 00 	sts	0x00CC, r24
    1832:	86 e0       	ldi	r24, 0x06	; 6
    1834:	80 93 ca 00 	sts	0x00CA, r24
    1838:	e9 ec       	ldi	r30, 0xC9	; 201
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	8b 7f       	andi	r24, 0xFB	; 251
    1840:	80 83       	st	Z, r24
    1842:	a8 ec       	ldi	r26, 0xC8	; 200
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	8c 91       	ld	r24, X
    1848:	82 60       	ori	r24, 0x02	; 2
    184a:	8c 93       	st	X, r24
ENABLE_UART1();
    184c:	80 81       	ld	r24, Z
    184e:	88 61       	ori	r24, 0x18	; 24
    1850:	80 83       	st	Z, r24
    1852:	08 95       	ret

00001854 <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    1854:	0e 94 00 0c 	call	0x1800	; 0x1800 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    1858:	67 e6       	ldi	r22, 0x67	; 103
    185a:	78 e0       	ldi	r23, 0x08	; 8
    185c:	80 ed       	ldi	r24, 0xD0	; 208
    185e:	97 e0       	ldi	r25, 0x07	; 7
    1860:	0e 94 92 25 	call	0x4b24	; 0x4b24 <fdevopen>
    1864:	90 93 d7 06 	sts	0x06D7, r25
    1868:	80 93 d6 06 	sts	0x06D6, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    186c:	67 e6       	ldi	r22, 0x67	; 103
    186e:	78 e0       	ldi	r23, 0x08	; 8
    1870:	80 ed       	ldi	r24, 0xD0	; 208
    1872:	97 e0       	ldi	r25, 0x07	; 7
    1874:	0e 94 92 25 	call	0x4b24	; 0x4b24 <fdevopen>
    1878:	90 93 d5 06 	sts	0x06D5, r25
    187c:	80 93 d4 06 	sts	0x06D4, r24

#ifdef NRK_UART_BUF
   uart_rx_signal=nrk_signal_create();
    1880:	0e 94 8f 11 	call	0x231e	; 0x231e <nrk_signal_create>
    1884:	80 93 d1 03 	sts	0x03D1, r24
   if(uart_rx_signal==NRK_ERROR) nrk_error_add(NRK_SIGNAL_CREATE_ERROR);
    1888:	8f 3f       	cpi	r24, 0xFF	; 255
    188a:	19 f4       	brne	.+6      	; 0x1892 <nrk_setup_uart+0x3e>
    188c:	8e e0       	ldi	r24, 0x0E	; 14
    188e:	0e 94 8b 10 	call	0x2116	; 0x2116 <nrk_error_add>
   uart_rx_buf_start=0;
    1892:	10 92 e5 03 	sts	0x03E5, r1
    1896:	10 92 e4 03 	sts	0x03E4, r1
   uart_rx_buf_end=0;
    189a:	10 92 e3 03 	sts	0x03E3, r1
    189e:	10 92 e2 03 	sts	0x03E2, r1
   ENABLE_UART0_RX_INT();
    18a2:	80 91 c1 00 	lds	r24, 0x00C1
    18a6:	80 68       	ori	r24, 0x80	; 128
    18a8:	80 93 c1 00 	sts	0x00C1, r24
    18ac:	08 95       	ret

000018ae <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    18ae:	80 91 c8 00 	lds	r24, 0x00C8
    18b2:	87 ff       	sbrs	r24, 7
    18b4:	fc cf       	rjmp	.-8      	; 0x18ae <getc1>
    18b6:	80 91 c8 00 	lds	r24, 0x00C8
    18ba:	8f 77       	andi	r24, 0x7F	; 127
    18bc:	80 93 c8 00 	sts	0x00C8, r24
    18c0:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    18c4:	08 95       	ret

000018c6 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	d1 f7       	brne	.-12     	; 0x18c6 <halWait>

} // halWait
    18d2:	08 95       	ret

000018d4 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    18d4:	0c 94 ed 26 	jmp	0x4dda	; 0x4dda <__eerd_byte_m128rfa1>

000018d8 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    18d8:	0e 94 f5 26 	call	0x4dea	; 0x4dea <__eewr_byte_m128rfa1>
}
    18dc:	08 95       	ret

000018de <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    18de:	ef 92       	push	r14
    18e0:	ff 92       	push	r15
    18e2:	0f 93       	push	r16
    18e4:	1f 93       	push	r17
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__eerd_byte_m128rfa1>
    18f4:	18 2f       	mov	r17, r24
    18f6:	f7 01       	movw	r30, r14
    18f8:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__eerd_byte_m128rfa1>
    1902:	08 2f       	mov	r16, r24
    1904:	f7 01       	movw	r30, r14
    1906:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    1908:	82 e0       	ldi	r24, 0x02	; 2
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__eerd_byte_m128rfa1>
    1910:	d8 2f       	mov	r29, r24
    1912:	f7 01       	movw	r30, r14
    1914:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    1916:	83 e0       	ldi	r24, 0x03	; 3
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__eerd_byte_m128rfa1>
    191e:	c8 2f       	mov	r28, r24
    1920:	f7 01       	movw	r30, r14
    1922:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    1924:	84 e0       	ldi	r24, 0x04	; 4
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__eerd_byte_m128rfa1>
    192c:	10 0f       	add	r17, r16
    192e:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    1930:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    1932:	8c 17       	cp	r24, r28
    1934:	11 f0       	breq	.+4      	; 0x193a <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    1936:	8f ef       	ldi	r24, 0xFF	; 255
    1938:	01 c0       	rjmp	.+2      	; 0x193c <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    193a:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	ff 90       	pop	r15
    1946:	ef 90       	pop	r14
    1948:	08 95       	ret

0000194a <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    1950:	85 e0       	ldi	r24, 0x05	; 5
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__eerd_byte_m128rfa1>
    1958:	88 83       	st	Y, r24
return NRK_OK;
}
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	08 95       	ret

00001962 <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    1962:	fc 01       	movw	r30, r24
    1964:	60 81       	ld	r22, Z
    1966:	86 e0       	ldi	r24, 0x06	; 6
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 f5 26 	call	0x4dea	; 0x4dea <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	08 95       	ret

00001972 <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    1978:	86 e0       	ldi	r24, 0x06	; 6
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__eerd_byte_m128rfa1>
    1980:	88 83       	st	Y, r24
  return NRK_OK;
}
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	08 95       	ret

0000198a <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	8c 01       	movw	r16, r24
    1994:	c0 e0       	ldi	r28, 0x00	; 0
    1996:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    1998:	ce 01       	movw	r24, r28
    199a:	08 96       	adiw	r24, 0x08	; 8
    199c:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__eerd_byte_m128rfa1>
    19a0:	f8 01       	movw	r30, r16
    19a2:	81 93       	st	Z+, r24
    19a4:	8f 01       	movw	r16, r30
    19a6:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    19a8:	c0 31       	cpi	r28, 0x10	; 16
    19aa:	d1 05       	cpc	r29, r1
    19ac:	a9 f7       	brne	.-22     	; 0x1998 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	08 95       	ret

000019ba <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    19ba:	0f 93       	push	r16
    19bc:	1f 93       	push	r17
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	8c 01       	movw	r16, r24
    19c4:	c0 e0       	ldi	r28, 0x00	; 0
    19c6:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    19c8:	f8 01       	movw	r30, r16
    19ca:	61 91       	ld	r22, Z+
    19cc:	8f 01       	movw	r16, r30
    19ce:	ce 01       	movw	r24, r28
    19d0:	08 96       	adiw	r24, 0x08	; 8
    19d2:	0e 94 f5 26 	call	0x4dea	; 0x4dea <__eewr_byte_m128rfa1>
    19d6:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    19d8:	c0 31       	cpi	r28, 0x10	; 16
    19da:	d1 05       	cpc	r29, r1
    19dc:	a9 f7       	brne	.-22     	; 0x19c8 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	08 95       	ret

000019ea <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    19f0:	87 e0       	ldi	r24, 0x07	; 7
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 ed 26 	call	0x4dda	; 0x4dda <__eerd_byte_m128rfa1>
    19f8:	88 83       	st	Y, r24
  return NRK_OK;
}
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    1a02:	fc 01       	movw	r30, r24
    1a04:	60 81       	ld	r22, Z
    1a06:	87 e0       	ldi	r24, 0x07	; 7
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	0e 94 f5 26 	call	0x4dea	; 0x4dea <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	08 95       	ret

00001a12 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    1a12:	f8 94       	cli
    1a14:	08 95       	ret

00001a16 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    1a16:	78 94       	sei
    1a18:	08 95       	ret

00001a1a <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    1a1a:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <nrk_int_disable>
while(1);
    1a1e:	ff cf       	rjmp	.-2      	; 0x1a1e <nrk_halt+0x4>

00001a20 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	a3 97       	sbiw	r28, 0x23	; 35
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    1a34:	0e 94 8f 11 	call	0x231e	; 0x231e <nrk_signal_create>
    1a38:	80 93 36 06 	sts	0x0636, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    1a3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a3e:	21 f4       	brne	.+8      	; 0x1a48 <nrk_init+0x28>
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	8e e0       	ldi	r24, 0x0E	; 14
    1a44:	0e 94 99 10 	call	0x2132	; 0x2132 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    1a48:	0e 94 69 20 	call	0x40d2	; 0x40d2 <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    1a4c:	80 ff       	sbrs	r24, 0
    1a4e:	04 c0       	rjmp	.+8      	; 0x1a58 <nrk_init+0x38>
    1a50:	60 e0       	ldi	r22, 0x00	; 0
    1a52:	86 e0       	ldi	r24, 0x06	; 6
    1a54:	0e 94 99 10 	call	0x2132	; 0x2132 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    1a58:	10 92 39 06 	sts	0x0639, r1
    nrk_cur_task_TCB = NULL;
    1a5c:	10 92 47 06 	sts	0x0647, r1
    1a60:	10 92 46 06 	sts	0x0646, r1
    
    nrk_high_ready_TCB = NULL;
    1a64:	10 92 38 06 	sts	0x0638, r1
    1a68:	10 92 37 06 	sts	0x0637, r1
    nrk_high_ready_prio = 0; 
    1a6c:	10 92 48 06 	sts	0x0648, r1
	nrk_stats_reset();
   #endif

    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    1a70:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <_nrk_reserve_init>
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    1a74:	10 92 45 06 	sts	0x0645, r1
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    1a7c:	2f ef       	ldi	r18, 0xFF	; 255
    1a7e:	fc 01       	movw	r30, r24
    1a80:	e7 5d       	subi	r30, 0xD7	; 215
    1a82:	f9 4f       	sbci	r31, 0xF9	; 249
    1a84:	20 83       	st	Z, r18
    nrk_sem_list[i].value=-1;
    1a86:	22 83       	std	Z+2, r18	; 0x02
    nrk_sem_list[i].resource_ceiling=-1;
    1a88:	21 83       	std	Z+1, r18	; 0x01
    1a8a:	03 96       	adiw	r24, 0x03	; 3
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
    1a8c:	8c 30       	cpi	r24, 0x0C	; 12
    1a8e:	91 05       	cpc	r25, r1
    1a90:	b1 f7       	brne	.-20     	; 0x1a7e <nrk_init+0x5e>
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1a96:	33 e6       	ldi	r19, 0x63	; 99
        nrk_task_TCB[i].task_ID = -1; 
    1a98:	2f ef       	ldi	r18, 0xFF	; 255
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	eb 5d       	subi	r30, 0xDB	; 219
    1a9e:	fa 4f       	sbci	r31, 0xFA	; 250
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1aa0:	32 87       	std	Z+10, r19	; 0x0a
        nrk_task_TCB[i].task_ID = -1; 
    1aa2:	20 87       	std	Z+8, r18	; 0x08
    1aa4:	8b 96       	adiw	r24, 0x2b	; 43
    //nrk_resource_count[i]=-1;
    //nrk_resource_value[i]=-1;
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
    1aa6:	82 30       	cpi	r24, 0x02	; 2
    1aa8:	41 e0       	ldi	r20, 0x01	; 1
    1aaa:	94 07       	cpc	r25, r20
    1aac:	b1 f7       	brne	.-20     	; 0x1a9a <nrk_init+0x7a>
    1aae:	e9 e4       	ldi	r30, 0x49	; 73
    1ab0:	f6 e0       	ldi	r31, 0x06	; 6
    1ab2:	cf 01       	movw	r24, r30
    1ab4:	05 96       	adiw	r24, 0x05	; 5
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1ab6:	94 83       	std	Z+4, r25	; 0x04
    1ab8:	83 83       	std	Z+3, r24	; 0x03
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1aba:	f7 83       	std	Z+7, r31	; 0x07
    1abc:	e6 83       	std	Z+6, r30	; 0x06
    1abe:	fc 01       	movw	r30, r24
        nrk_task_TCB[i].task_ID = -1; 
        }
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
    1ac0:	86 e0       	ldi	r24, 0x06	; 6
    1ac2:	e7 36       	cpi	r30, 0x67	; 103
    1ac4:	f8 07       	cpc	r31, r24
    1ac6:	a9 f7       	brne	.-22     	; 0x1ab2 <nrk_init+0x92>
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    1ac8:	10 92 4b 06 	sts	0x064B, r1
    1acc:	10 92 4a 06 	sts	0x064A, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    1ad0:	10 92 6b 06 	sts	0x066B, r1
    1ad4:	10 92 6a 06 	sts	0x066A, r1
	_head_node = NULL;
    1ad8:	10 92 3c 06 	sts	0x063C, r1
    1adc:	10 92 3b 06 	sts	0x063B, r1
	_free_node = &_nrk_readyQ[0];
    1ae0:	89 e4       	ldi	r24, 0x49	; 73
    1ae2:	96 e0       	ldi	r25, 0x06	; 6
    1ae4:	90 93 24 05 	sts	0x0524, r25
    1ae8:	80 93 23 05 	sts	0x0523, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    1aec:	60 e8       	ldi	r22, 0x80	; 128
    1aee:	7a e1       	ldi	r23, 0x1A	; 26
    1af0:	ce 01       	movw	r24, r28
    1af2:	01 96       	adiw	r24, 0x01	; 1
    1af4:	0e 94 a1 22 	call	0x4542	; 0x4542 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    1af8:	40 e8       	ldi	r20, 0x80	; 128
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	64 e6       	ldi	r22, 0x64	; 100
    1afe:	74 e0       	ldi	r23, 0x04	; 4
    1b00:	ce 01       	movw	r24, r28
    1b02:	01 96       	adiw	r24, 0x01	; 1
    1b04:	0e 94 a5 22 	call	0x454a	; 0x454a <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    1b08:	85 e5       	ldi	r24, 0x55	; 85
    1b0a:	80 93 64 04 	sts	0x0464, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    1b0e:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    1b10:	1c 86       	std	Y+12, r1	; 0x0c
    1b12:	1d 86       	std	Y+13, r1	; 0x0d
    1b14:	1e 86       	std	Y+14, r1	; 0x0e
    1b16:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    1b18:	18 8a       	std	Y+16, r1	; 0x10
    1b1a:	19 8a       	std	Y+17, r1	; 0x11
    1b1c:	1a 8a       	std	Y+18, r1	; 0x12
    1b1e:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    1b20:	1c 8a       	std	Y+20, r1	; 0x14
    1b22:	1d 8a       	std	Y+21, r1	; 0x15
    1b24:	1e 8a       	std	Y+22, r1	; 0x16
    1b26:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    1b28:	18 8e       	std	Y+24, r1	; 0x18
    1b2a:	19 8e       	std	Y+25, r1	; 0x19
    1b2c:	1a 8e       	std	Y+26, r1	; 0x1a
    1b2e:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    1b30:	1c 8e       	std	Y+28, r1	; 0x1c
    1b32:	1d 8e       	std	Y+29, r1	; 0x1d
    1b34:	1e 8e       	std	Y+30, r1	; 0x1e
    1b36:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    1b38:	18 a2       	std	Y+32, r1	; 0x20
    1b3a:	19 a2       	std	Y+33, r1	; 0x21
    1b3c:	1a a2       	std	Y+34, r1	; 0x22
    1b3e:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    1b44:	92 e0       	ldi	r25, 0x02	; 2
    1b46:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    1b48:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <nrk_activate_task>
	
}
    1b52:	a3 96       	adiw	r28, 0x23	; 35
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	df 91       	pop	r29
    1b60:	cf 91       	pop	r28
    1b62:	08 95       	ret

00001b64 <nrk_start>:




void nrk_start (void)
{
    1b64:	0d e2       	ldi	r16, 0x2D	; 45
    1b66:	15 e0       	ldi	r17, 0x05	; 5
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1b68:	c0 e0       	ldi	r28, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    1b6a:	f8 01       	movw	r30, r16
    1b6c:	d0 80       	ld	r13, Z
	// only check activated tasks
	if(task_ID!=-1)
    1b6e:	ff ef       	ldi	r31, 0xFF	; 255
    1b70:	df 12       	cpse	r13, r31
    1b72:	22 c0       	rjmp	.+68     	; 0x1bb8 <nrk_start+0x54>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    1b74:	cf 5f       	subi	r28, 0xFF	; 255
    1b76:	05 5d       	subi	r16, 0xD5	; 213
    1b78:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7a:	c6 30       	cpi	r28, 0x06	; 6
    1b7c:	b1 f7       	brne	.-20     	; 0x1b6a <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    1b7e:	0e 94 b0 14 	call	0x2960	; 0x2960 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    1b82:	2b e2       	ldi	r18, 0x2B	; 43
    1b84:	82 02       	muls	r24, r18
    1b86:	c0 01       	movw	r24, r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	eb 5d       	subi	r30, 0xDB	; 219
    1b8e:	fa 4f       	sbci	r31, 0xFA	; 250
    1b90:	82 85       	ldd	r24, Z+10	; 0x0a
    1b92:	80 93 48 06 	sts	0x0648, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    1b96:	f0 93 47 06 	sts	0x0647, r31
    1b9a:	e0 93 46 06 	sts	0x0646, r30
    1b9e:	f0 93 38 06 	sts	0x0638, r31
    1ba2:	e0 93 37 06 	sts	0x0637, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    1ba6:	80 93 39 06 	sts	0x0639, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    1baa:	0e 94 17 23 	call	0x462e	; 0x462e <nrk_target_start>
    nrk_stack_pointer_init(); 
    1bae:	0e 94 01 23 	call	0x4602	; 0x4602 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    1bb2:	0e 94 1b 23 	call	0x4636	; 0x4636 <nrk_start_high_ready_task>
    1bb6:	16 c0       	rjmp	.+44     	; 0x1be4 <nrk_start+0x80>
    1bb8:	8d e2       	ldi	r24, 0x2D	; 45
    1bba:	e8 2e       	mov	r14, r24
    1bbc:	85 e0       	ldi	r24, 0x05	; 5
    1bbe:	f8 2e       	mov	r15, r24
    1bc0:	d0 e0       	ldi	r29, 0x00	; 0
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    1bc2:	cd 17       	cp	r28, r29
    1bc4:	41 f0       	breq	.+16     	; 0x1bd6 <nrk_start+0x72>
    1bc6:	f7 01       	movw	r30, r14
    1bc8:	80 81       	ld	r24, Z
    1bca:	d8 12       	cpse	r13, r24
    1bcc:	04 c0       	rjmp	.+8      	; 0x1bd6 <nrk_start+0x72>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    1bce:	6d 2d       	mov	r22, r13
    1bd0:	85 e0       	ldi	r24, 0x05	; 5
    1bd2:	0e 94 99 10 	call	0x2132	; 0x2132 <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    1bd6:	df 5f       	subi	r29, 0xFF	; 255
    1bd8:	fb e2       	ldi	r31, 0x2B	; 43
    1bda:	ef 0e       	add	r14, r31
    1bdc:	f1 1c       	adc	r15, r1
    1bde:	d6 30       	cpi	r29, 0x06	; 6
    1be0:	81 f7       	brne	.-32     	; 0x1bc2 <nrk_start+0x5e>
    1be2:	c8 cf       	rjmp	.-112    	; 0x1b74 <nrk_start+0x10>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    1be4:	ff cf       	rjmp	.-2      	; 0x1be4 <nrk_start+0x80>

00001be6 <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    1be6:	cf 92       	push	r12
    1be8:	df 92       	push	r13
    1bea:	ef 92       	push	r14
    1bec:	ff 92       	push	r15
    1bee:	0f 93       	push	r16
    1bf0:	1f 93       	push	r17
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	ec 01       	movw	r28, r24
    1bf8:	8b 01       	movw	r16, r22
    1bfa:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    1bfc:	89 85       	ldd	r24, Y+9	; 0x09
    1bfe:	82 30       	cpi	r24, 0x02	; 2
    1c00:	21 f0       	breq	.+8      	; 0x1c0a <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    1c02:	80 91 35 06 	lds	r24, 0x0635
    1c06:	88 83       	st	Y, r24
    1c08:	01 c0       	rjmp	.+2      	; 0x1c0c <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    1c0a:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    1c0c:	80 91 35 06 	lds	r24, 0x0635
    1c10:	86 30       	cpi	r24, 0x06	; 6
    1c12:	20 f0       	brcs	.+8      	; 0x1c1c <nrk_TCB_init+0x36>
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	87 e0       	ldi	r24, 0x07	; 7
    1c18:	0e 94 99 10 	call	0x2132	; 0x2132 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    1c1c:	89 85       	ldd	r24, Y+9	; 0x09
    1c1e:	82 30       	cpi	r24, 0x02	; 2
    1c20:	29 f0       	breq	.+10     	; 0x1c2c <nrk_TCB_init+0x46>
    1c22:	80 91 35 06 	lds	r24, 0x0635
    1c26:	8f 5f       	subi	r24, 0xFF	; 255
    1c28:	80 93 35 06 	sts	0x0635, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    1c2c:	80 91 35 06 	lds	r24, 0x0635
    1c30:	81 11       	cpse	r24, r1
    1c32:	03 c0       	rjmp	.+6      	; 0x1c3a <nrk_TCB_init+0x54>
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	80 93 35 06 	sts	0x0635, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    1c3a:	38 81       	ld	r19, Y
    1c3c:	2b e2       	ldi	r18, 0x2B	; 43
    1c3e:	32 03       	mulsu	r19, r18
    1c40:	f0 01       	movw	r30, r0
    1c42:	11 24       	eor	r1, r1
    1c44:	eb 5d       	subi	r30, 0xDB	; 219
    1c46:	fa 4f       	sbci	r31, 0xFA	; 250
    1c48:	11 83       	std	Z+1, r17	; 0x01
    1c4a:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    1c4c:	88 85       	ldd	r24, Y+8	; 0x08
    1c4e:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    1c50:	38 81       	ld	r19, Y
    1c52:	32 03       	mulsu	r19, r18
    1c54:	f0 01       	movw	r30, r0
    1c56:	11 24       	eor	r1, r1
    1c58:	eb 5d       	subi	r30, 0xDB	; 219
    1c5a:	fa 4f       	sbci	r31, 0xFA	; 250
    1c5c:	83 e0       	ldi	r24, 0x03	; 3
    1c5e:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    1c60:	38 81       	ld	r19, Y
    1c62:	32 03       	mulsu	r19, r18
    1c64:	f0 01       	movw	r30, r0
    1c66:	11 24       	eor	r1, r1
    1c68:	eb 5d       	subi	r30, 0xDB	; 219
    1c6a:	fa 4f       	sbci	r31, 0xFA	; 250
    1c6c:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    1c6e:	08 81       	ld	r16, Y
    1c70:	02 03       	mulsu	r16, r18
    1c72:	80 01       	movw	r16, r0
    1c74:	11 24       	eor	r1, r1
    1c76:	0b 5d       	subi	r16, 0xDB	; 219
    1c78:	1a 4f       	sbci	r17, 0xFA	; 250
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    1c7e:	ce 01       	movw	r24, r28
    1c80:	0b 96       	adiw	r24, 0x0b	; 11
    1c82:	0e 94 16 1a 	call	0x342c	; 0x342c <_nrk_time_to_ticks_long>
    1c86:	f8 01       	movw	r30, r16
    1c88:	61 a3       	std	Z+33, r22	; 0x21
    1c8a:	72 a3       	std	Z+34, r23	; 0x22
    1c8c:	83 a3       	std	Z+35, r24	; 0x23
    1c8e:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    1c90:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c92:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c94:	ad 85       	ldd	r26, Y+13	; 0x0d
    1c96:	be 85       	ldd	r27, Y+14	; 0x0e
    1c98:	88 33       	cpi	r24, 0x38	; 56
    1c9a:	99 48       	sbci	r25, 0x89	; 137
    1c9c:	a1 44       	sbci	r26, 0x41	; 65
    1c9e:	b1 05       	cpc	r27, r1
    1ca0:	20 f0       	brcs	.+8      	; 0x1caa <nrk_TCB_init+0xc4>
    1ca2:	68 81       	ld	r22, Y
    1ca4:	86 e1       	ldi	r24, 0x16	; 22
    1ca6:	0e 94 99 10 	call	0x2132	; 0x2132 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    1caa:	c8 80       	ld	r12, Y
    1cac:	dd 24       	eor	r13, r13
    1cae:	c7 fc       	sbrc	r12, 7
    1cb0:	d0 94       	com	r13
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	4b 96       	adiw	r24, 0x1b	; 27
    1cb6:	0e 94 16 1a 	call	0x342c	; 0x342c <_nrk_time_to_ticks_long>
    1cba:	1b e2       	ldi	r17, 0x2B	; 43
    1cbc:	1c 9d       	mul	r17, r12
    1cbe:	f0 01       	movw	r30, r0
    1cc0:	1d 9d       	mul	r17, r13
    1cc2:	f0 0d       	add	r31, r0
    1cc4:	11 24       	eor	r1, r1
    1cc6:	eb 5d       	subi	r30, 0xDB	; 219
    1cc8:	fa 4f       	sbci	r31, 0xFA	; 250
    1cca:	65 8b       	std	Z+21, r22	; 0x15
    1ccc:	76 8b       	std	Z+22, r23	; 0x16
    1cce:	87 8b       	std	Z+23, r24	; 0x17
    1cd0:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    1cd2:	28 81       	ld	r18, Y
    1cd4:	21 03       	mulsu	r18, r17
    1cd6:	c0 01       	movw	r24, r0
    1cd8:	11 24       	eor	r1, r1
    1cda:	9c 01       	movw	r18, r24
    1cdc:	2b 5d       	subi	r18, 0xDB	; 219
    1cde:	3a 4f       	sbci	r19, 0xFA	; 250
    1ce0:	69 01       	movw	r12, r18
    1ce2:	f9 01       	movw	r30, r18
    1ce4:	45 89       	ldd	r20, Z+21	; 0x15
    1ce6:	56 89       	ldd	r21, Z+22	; 0x16
    1ce8:	67 89       	ldd	r22, Z+23	; 0x17
    1cea:	70 8d       	ldd	r23, Z+24	; 0x18
    1cec:	81 a1       	ldd	r24, Z+33	; 0x21
    1cee:	92 a1       	ldd	r25, Z+34	; 0x22
    1cf0:	a3 a1       	ldd	r26, Z+35	; 0x23
    1cf2:	b4 a1       	ldd	r27, Z+36	; 0x24
    1cf4:	84 0f       	add	r24, r20
    1cf6:	95 1f       	adc	r25, r21
    1cf8:	a6 1f       	adc	r26, r22
    1cfa:	b7 1f       	adc	r27, r23
    1cfc:	81 8f       	std	Z+25, r24	; 0x19
    1cfe:	92 8f       	std	Z+26, r25	; 0x1a
    1d00:	a3 8f       	std	Z+27, r26	; 0x1b
    1d02:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    1d04:	ce 01       	movw	r24, r28
    1d06:	43 96       	adiw	r24, 0x13	; 19
    1d08:	0e 94 16 1a 	call	0x342c	; 0x342c <_nrk_time_to_ticks_long>
    1d0c:	f6 01       	movw	r30, r12
    1d0e:	65 a3       	std	Z+37, r22	; 0x25
    1d10:	76 a3       	std	Z+38, r23	; 0x26
    1d12:	87 a3       	std	Z+39, r24	; 0x27
    1d14:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    1d16:	28 81       	ld	r18, Y
    1d18:	21 03       	mulsu	r18, r17
    1d1a:	f0 01       	movw	r30, r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	eb 5d       	subi	r30, 0xDB	; 219
    1d20:	fa 4f       	sbci	r31, 0xFA	; 250
    1d22:	85 a1       	ldd	r24, Z+37	; 0x25
    1d24:	96 a1       	ldd	r25, Z+38	; 0x26
    1d26:	a7 a1       	ldd	r26, Z+39	; 0x27
    1d28:	b0 a5       	ldd	r27, Z+40	; 0x28
    1d2a:	85 8f       	std	Z+29, r24	; 0x1d
    1d2c:	96 8f       	std	Z+30, r25	; 0x1e
    1d2e:	a7 8f       	std	Z+31, r26	; 0x1f
    1d30:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	92 a7       	std	Z+42, r25	; 0x2a
    1d38:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    1d3a:	f3 82       	std	Z+3, r15	; 0x03
    1d3c:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    1d3e:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	1f 91       	pop	r17
    1d46:	0f 91       	pop	r16
    1d48:	ff 90       	pop	r15
    1d4a:	ef 90       	pop	r14
    1d4c:	df 90       	pop	r13
    1d4e:	cf 90       	pop	r12
    1d50:	08 95       	ret

00001d52 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    1d52:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <_nrk_scheduler>

00001d56 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    1d56:	85 e6       	ldi	r24, 0x65	; 101
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	08 95       	ret

00001d5c <_nrk_errno_set>:
    1d5c:	e0 91 46 06 	lds	r30, 0x0646
    1d60:	f0 91 47 06 	lds	r31, 0x0647
    1d64:	84 87       	std	Z+12, r24	; 0x0c
    1d66:	08 95       	ret

00001d68 <nrk_errno_get>:
    nrk_cur_task_TCB->errno = error_code;
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    1d68:	e0 91 46 06 	lds	r30, 0x0646
    1d6c:	f0 91 47 06 	lds	r31, 0x0647
}
    1d70:	84 85       	ldd	r24, Z+12	; 0x0c
    1d72:	08 95       	ret

00001d74 <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    1d74:	fc 01       	movw	r30, r24
    if (error_num == 0)
    1d76:	80 91 63 04 	lds	r24, 0x0463
    1d7a:	88 23       	and	r24, r24
    1d7c:	31 f0       	breq	.+12     	; 0x1d8a <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    1d7e:	db 01       	movw	r26, r22
    1d80:	8c 93       	st	X, r24
    *task_id = error_task;
    1d82:	80 91 e9 03 	lds	r24, 0x03E9
    1d86:	80 83       	st	Z, r24
    return 1;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
}
    1d8a:	08 95       	ret

00001d8c <nrk_error_handle>:
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    1d8c:	10 92 63 04 	sts	0x0463, r1
    1d90:	08 95       	ret

00001d92 <clear_regs>:
}

inline void clear_regs()
{

        GTCCR=0;
    1d92:	13 bc       	out	0x23, r1	; 35
        ASSR=0;
    1d94:	10 92 b6 00 	sts	0x00B6, r1

        OCR0B=0;
    1d98:	18 bc       	out	0x28, r1	; 40
        OCR0A=0;
    1d9a:	17 bc       	out	0x27, r1	; 39
        TCNT0=0;
    1d9c:	16 bc       	out	0x26, r1	; 38
        TCCR0B=0;
    1d9e:	15 bc       	out	0x25, r1	; 37
        TCCR0A=0;
    1da0:	14 bc       	out	0x24, r1	; 36

        EIMSK=0;
    1da2:	1d ba       	out	0x1d, r1	; 29
        EIFR=0;
    1da4:	1c ba       	out	0x1c, r1	; 28
        PCIFR=0;
    1da6:	1b ba       	out	0x1b, r1	; 27


        OCR3B =0;
    1da8:	10 92 9b 00 	sts	0x009B, r1
    1dac:	10 92 9a 00 	sts	0x009A, r1
        OCR3A =0;
    1db0:	10 92 99 00 	sts	0x0099, r1
    1db4:	10 92 98 00 	sts	0x0098, r1
        TCNT3 =0;
    1db8:	10 92 95 00 	sts	0x0095, r1
    1dbc:	10 92 94 00 	sts	0x0094, r1
        TCCR3B=0;
    1dc0:	10 92 91 00 	sts	0x0091, r1
        TCCR3A=0;
    1dc4:	10 92 90 00 	sts	0x0090, r1
        TIFR3=0;
    1dc8:	18 ba       	out	0x18, r1	; 24
        TIMSK3=0;
    1dca:	10 92 71 00 	sts	0x0071, r1


        OCR2B =0;
    1dce:	10 92 b4 00 	sts	0x00B4, r1
        OCR2A =0;
    1dd2:	10 92 b3 00 	sts	0x00B3, r1
        TCNT2 =0;
    1dd6:	10 92 b2 00 	sts	0x00B2, r1
        TCCR2B=0;
    1dda:	10 92 b1 00 	sts	0x00B1, r1
        TCCR2A=0;
    1dde:	e0 eb       	ldi	r30, 0xB0	; 176
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	10 82       	st	Z, r1
        TCCR2A=0;
    1de4:	10 82       	st	Z, r1
        TIFR2=0;
    1de6:	17 ba       	out	0x17, r1	; 23
        TIMSK2=0;
    1de8:	10 92 70 00 	sts	0x0070, r1


	// set all bits to 1 in order to clear
	MCUSR=0xff;
    1dec:	8f ef       	ldi	r24, 0xFF	; 255
    1dee:	84 bf       	out	0x34, r24	; 52
    1df0:	08 95       	ret

00001df2 <pause>:
    }

}

void pause()
{
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	1f 92       	push	r1
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1dfc:	19 82       	std	Y+1, r1	; 0x01
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	84 36       	cpi	r24, 0x64	; 100
    1e02:	40 f4       	brcc	.+16     	; 0x1e14 <pause+0x22>
        nrk_spin_wait_us (2000);
    1e04:	80 ed       	ldi	r24, 0xD0	; 208
    1e06:	97 e0       	ldi	r25, 0x07	; 7
    1e08:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	8f 5f       	subi	r24, 0xFF	; 255
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	f5 cf       	rjmp	.-22     	; 0x1dfe <pause+0xc>
        nrk_spin_wait_us (2000);
}
    1e14:	0f 90       	pop	r0
    1e16:	df 91       	pop	r29
    1e18:	cf 91       	pop	r28
    1e1a:	08 95       	ret

00001e1c <blink_dash>:

}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <nrk_led_set>
    pause();
    1e24:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <pause>
    pause();
    1e28:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <pause>
    pause();
    1e2c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <pause>
    nrk_led_clr(GREEN_LED);
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	0e 94 c1 0b 	call	0x1782	; 0x1782 <nrk_led_clr>
    pause();
    1e38:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <pause>

00001e3c <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <nrk_led_set>
    pause();
    1e44:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <pause>
    nrk_led_clr(GREEN_LED);
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <nrk_led_clr>
    pause();
    1e50:	0c 94 f9 0e 	jmp	0x1df2	; 0x1df2 <pause>

00001e54 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    1e54:	ff 92       	push	r15
    1e56:	0f 93       	push	r16
    1e58:	1f 93       	push	r17
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <blink_morse_code_error+0xc>
    1e60:	1f 92       	push	r1
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    1e66:	1f 92       	push	r1
    1e68:	8f 93       	push	r24
    1e6a:	86 e8       	ldi	r24, 0x86	; 134
    1e6c:	93 e0       	ldi	r25, 0x03	; 3
    1e6e:	9f 93       	push	r25
    1e70:	8f 93       	push	r24
    1e72:	8e 01       	movw	r16, r28
    1e74:	0f 5f       	subi	r16, 0xFF	; 255
    1e76:	1f 4f       	sbci	r17, 0xFF	; 255
    1e78:	1f 93       	push	r17
    1e7a:	0f 93       	push	r16
    1e7c:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <sprintf>

    for(i=0; i<strlen(str); i++ )
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	f1 2c       	mov	r15, r1
    1e8e:	f8 01       	movw	r30, r16
    1e90:	01 90       	ld	r0, Z+
    1e92:	00 20       	and	r0, r0
    1e94:	e9 f7       	brne	.-6      	; 0x1e90 <blink_morse_code_error+0x3c>
    1e96:	31 97       	sbiw	r30, 0x01	; 1
    1e98:	e0 1b       	sub	r30, r16
    1e9a:	f1 0b       	sbc	r31, r17
    1e9c:	8f 2d       	mov	r24, r15
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	8e 17       	cp	r24, r30
    1ea2:	9f 07       	cpc	r25, r31
    1ea4:	08 f0       	brcs	.+2      	; 0x1ea8 <blink_morse_code_error+0x54>
    1ea6:	5d c0       	rjmp	.+186    	; 0x1f62 <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    1ea8:	f8 01       	movw	r30, r16
    1eaa:	e8 0f       	add	r30, r24
    1eac:	f9 1f       	adc	r31, r25
    1eae:	e0 81       	ld	r30, Z
    1eb0:	8e 2f       	mov	r24, r30
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	f0 97       	sbiw	r30, 0x30	; 48
    1eb8:	ea 30       	cpi	r30, 0x0A	; 10
    1eba:	f1 05       	cpc	r31, r1
    1ebc:	08 f0       	brcs	.+2      	; 0x1ec0 <blink_morse_code_error+0x6c>
    1ebe:	49 c0       	rjmp	.+146    	; 0x1f52 <blink_morse_code_error+0xfe>
    1ec0:	e6 54       	subi	r30, 0x46	; 70
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	0c 94 58 25 	jmp	0x4ab0	; 0x4ab0 <__tablejump2__>
        {
        case '0':
            blink_dash();
    1ec8:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <blink_dash>
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    1ece:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <blink_dot>
            blink_dash();
    1ed2:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <blink_dash>
            blink_dash();
    1ed6:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <blink_dash>
            blink_dash();
    1eda:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <blink_dash>
            blink_dash();
    1ede:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <blink_dash>
            break;
    1ee2:	37 c0       	rjmp	.+110    	; 0x1f52 <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    1ee4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <blink_dot>
            blink_dot();
    1ee8:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <blink_dot>
    1eec:	f4 cf       	rjmp	.-24     	; 0x1ed6 <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    1eee:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <blink_dot>
            blink_dot();
    1ef2:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <blink_dot>
            blink_dot();
    1ef6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <blink_dot>
    1efa:	ef cf       	rjmp	.-34     	; 0x1eda <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    1efc:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <blink_dot>
            blink_dot();
    1f00:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <blink_dot>
            blink_dot();
    1f04:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <blink_dot>
            blink_dot();
    1f08:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <blink_dot>
    1f0c:	e8 cf       	rjmp	.-48     	; 0x1ede <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    1f0e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <blink_dot>
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    1f14:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <blink_dash>
            blink_dot();
    1f18:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <blink_dot>
    1f1c:	04 c0       	rjmp	.+8      	; 0x1f26 <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    1f1e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <blink_dash>
            blink_dash();
    1f22:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <blink_dash>
            blink_dot();
    1f26:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <blink_dot>
    1f2a:	06 c0       	rjmp	.+12     	; 0x1f38 <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    1f2c:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <blink_dash>
            blink_dash();
    1f30:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <blink_dash>
            blink_dash();
    1f34:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <blink_dash>
            blink_dot();
    1f38:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <blink_dot>
    1f3c:	08 c0       	rjmp	.+16     	; 0x1f4e <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    1f3e:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <blink_dash>
            blink_dash();
    1f42:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <blink_dash>
            blink_dash();
    1f46:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <blink_dash>
            blink_dash();
    1f4a:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <blink_dash>
            blink_dot();
    1f4e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <blink_dot>
            break;
        }
        pause();
    1f52:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <pause>
        pause();
    1f56:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <pause>
        pause();
    1f5a:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    1f5e:	f3 94       	inc	r15
    1f60:	96 cf       	rjmp	.-212    	; 0x1e8e <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	ff 90       	pop	r15
    1f72:	08 95       	ret

00001f74 <nrk_error_print>:

}


inline int8_t nrk_error_print ()
{
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
uint8_t i,t;




    if (error_num == 0)
    1f7c:	80 91 63 04 	lds	r24, 0x0463
    1f80:	88 23       	and	r24, r24
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <nrk_error_print+0x12>
    1f84:	c2 c0       	rjmp	.+388    	; 0x210a <nrk_error_print+0x196>
        return 0;


// If looping, we need to disable the watchdog and interrupts
#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        nrk_int_disable ();
    1f86:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <nrk_int_disable>
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
        printf ("%d", error_task);
    1f8a:	06 e8       	ldi	r16, 0x86	; 134
    1f8c:	13 e0       	ldi	r17, 0x03	; 3
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    1f8e:	85 ef       	ldi	r24, 0xF5	; 245
    1f90:	93 e0       	ldi	r25, 0x03	; 3
    1f92:	0e 94 52 08 	call	0x10a4	; 0x10a4 <nrk_kprintf>
        printf ("%d", error_task);
    1f96:	80 91 e9 03 	lds	r24, 0x03E9
    1f9a:	1f 92       	push	r1
    1f9c:	8f 93       	push	r24
    1f9e:	1f 93       	push	r17
    1fa0:	0f 93       	push	r16
    1fa2:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <printf>
        nrk_kprintf (PSTR ("): "));
    1fa6:	81 ef       	ldi	r24, 0xF1	; 241
    1fa8:	93 e0       	ldi	r25, 0x03	; 3
    1faa:	0e 94 52 08 	call	0x10a4	; 0x10a4 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	80 91 63 04 	lds	r24, 0x0463
    1fba:	88 31       	cpi	r24, 0x18	; 24
    1fbc:	10 f0       	brcs	.+4      	; 0x1fc2 <nrk_error_print+0x4e>
            error_num = NRK_UNKOWN;
    1fbe:	10 92 63 04 	sts	0x0463, r1
        switch (error_num)
    1fc2:	e0 91 63 04 	lds	r30, 0x0463
    1fc6:	8e 2f       	mov	r24, r30
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	fc 01       	movw	r30, r24
    1fcc:	31 97       	sbiw	r30, 0x01	; 1
    1fce:	e6 31       	cpi	r30, 0x16	; 22
    1fd0:	f1 05       	cpc	r31, r1
    1fd2:	08 f0       	brcs	.+2      	; 0x1fd6 <nrk_error_print+0x62>
    1fd4:	46 c0       	rjmp	.+140    	; 0x2062 <nrk_error_print+0xee>
    1fd6:	ec 53       	subi	r30, 0x3C	; 60
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	0c 94 58 25 	jmp	0x4ab0	; 0x4ab0 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    1fde:	85 eb       	ldi	r24, 0xB5	; 181
    1fe0:	93 e0       	ldi	r25, 0x03	; 3
    1fe2:	41 c0       	rjmp	.+130    	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    1fe4:	8e e8       	ldi	r24, 0x8E	; 142
    1fe6:	93 e0       	ldi	r25, 0x03	; 3
    1fe8:	3e c0       	rjmp	.+124    	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    1fea:	8a e7       	ldi	r24, 0x7A	; 122
    1fec:	93 e0       	ldi	r25, 0x03	; 3
    1fee:	3b c0       	rjmp	.+118    	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    1ff0:	84 e6       	ldi	r24, 0x64	; 100
    1ff2:	93 e0       	ldi	r25, 0x03	; 3
    1ff4:	38 c0       	rjmp	.+112    	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    1ff6:	89 e4       	ldi	r24, 0x49	; 73
    1ff8:	93 e0       	ldi	r25, 0x03	; 3
    1ffa:	35 c0       	rjmp	.+106    	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    1ffc:	83 e3       	ldi	r24, 0x33	; 51
    1ffe:	93 e0       	ldi	r25, 0x03	; 3
    2000:	32 c0       	rjmp	.+100    	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    2002:	8b e1       	ldi	r24, 0x1B	; 27
    2004:	93 e0       	ldi	r25, 0x03	; 3
    2006:	2f c0       	rjmp	.+94     	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    2008:	88 e0       	ldi	r24, 0x08	; 8
    200a:	93 e0       	ldi	r25, 0x03	; 3
    200c:	2c c0       	rjmp	.+88     	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    200e:	85 ef       	ldi	r24, 0xF5	; 245
    2010:	92 e0       	ldi	r25, 0x02	; 2
    2012:	29 c0       	rjmp	.+82     	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    2014:	87 ed       	ldi	r24, 0xD7	; 215
    2016:	92 e0       	ldi	r25, 0x02	; 2
    2018:	26 c0       	rjmp	.+76     	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    201a:	82 eb       	ldi	r24, 0xB2	; 178
    201c:	92 e0       	ldi	r25, 0x02	; 2
    201e:	23 c0       	rjmp	.+70     	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    2020:	86 ea       	ldi	r24, 0xA6	; 166
    2022:	92 e0       	ldi	r25, 0x02	; 2
    2024:	20 c0       	rjmp	.+64     	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    2026:	8b e8       	ldi	r24, 0x8B	; 139
    2028:	92 e0       	ldi	r25, 0x02	; 2
    202a:	1d c0       	rjmp	.+58     	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    202c:	8c e7       	ldi	r24, 0x7C	; 124
    202e:	92 e0       	ldi	r25, 0x02	; 2
    2030:	1a c0       	rjmp	.+52     	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    2032:	88 e6       	ldi	r24, 0x68	; 104
    2034:	92 e0       	ldi	r25, 0x02	; 2
    2036:	17 c0       	rjmp	.+46     	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    2038:	87 e5       	ldi	r24, 0x57	; 87
    203a:	92 e0       	ldi	r25, 0x02	; 2
    203c:	14 c0       	rjmp	.+40     	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    203e:	83 e4       	ldi	r24, 0x43	; 67
    2040:	92 e0       	ldi	r25, 0x02	; 2
    2042:	11 c0       	rjmp	.+34     	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    2044:	83 e2       	ldi	r24, 0x23	; 35
    2046:	92 e0       	ldi	r25, 0x02	; 2
    2048:	0e c0       	rjmp	.+28     	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    204a:	8b e0       	ldi	r24, 0x0B	; 11
    204c:	92 e0       	ldi	r25, 0x02	; 2
    204e:	0b c0       	rjmp	.+22     	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    2050:	80 ef       	ldi	r24, 0xF0	; 240
    2052:	91 e0       	ldi	r25, 0x01	; 1
    2054:	08 c0       	rjmp	.+16     	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    2056:	8f ed       	ldi	r24, 0xDF	; 223
    2058:	91 e0       	ldi	r25, 0x01	; 1
    205a:	05 c0       	rjmp	.+10     	; 0x2066 <nrk_error_print+0xf2>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    205c:	80 ed       	ldi	r24, 0xD0	; 208
    205e:	91 e0       	ldi	r25, 0x01	; 1
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <nrk_error_print+0xf2>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    2062:	89 ec       	ldi	r24, 0xC9	; 201
    2064:	91 e0       	ldi	r25, 0x01	; 1
    2066:	0e 94 52 08 	call	0x10a4	; 0x10a4 <nrk_kprintf>
        }
        putchar ('\r');
    206a:	60 91 d6 06 	lds	r22, 0x06D6
    206e:	70 91 d7 06 	lds	r23, 0x06D7
    2072:	8d e0       	ldi	r24, 0x0D	; 13
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0e 94 dd 25 	call	0x4bba	; 0x4bba <fputc>
        putchar ('\n');
    207a:	60 91 d6 06 	lds	r22, 0x06D6
    207e:	70 91 d7 06 	lds	r23, 0x06D7
    2082:	8a e0       	ldi	r24, 0x0A	; 10
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 dd 25 	call	0x4bba	; 0x4bba <fputc>
    208a:	c4 e1       	ldi	r28, 0x14	; 20


#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
    208c:	82 e0       	ldi	r24, 0x02	; 2
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <nrk_led_set>
            nrk_led_clr (3);
    2094:	83 e0       	ldi	r24, 0x03	; 3
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	0e 94 c1 0b 	call	0x1782	; 0x1782 <nrk_led_clr>
    209c:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    209e:	88 ee       	ldi	r24, 0xE8	; 232
    20a0:	93 e0       	ldi	r25, 0x03	; 3
    20a2:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <nrk_spin_wait_us>
    20a6:	d1 50       	subi	r29, 0x01	; 1
#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    20a8:	d1 f7       	brne	.-12     	; 0x209e <nrk_error_print+0x12a>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    20aa:	83 e0       	ldi	r24, 0x03	; 3
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <nrk_led_set>
            nrk_led_clr (2);
    20b2:	82 e0       	ldi	r24, 0x02	; 2
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	0e 94 c1 0b 	call	0x1782	; 0x1782 <nrk_led_clr>
    20ba:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    20bc:	88 ee       	ldi	r24, 0xE8	; 232
    20be:	93 e0       	ldi	r25, 0x03	; 3
    20c0:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <nrk_spin_wait_us>
    20c4:	d1 50       	subi	r29, 0x01	; 1
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    20c6:	d1 f7       	brne	.-12     	; 0x20bc <nrk_error_print+0x148>
    20c8:	c1 50       	subi	r28, 0x01	; 1
        putchar ('\r');
        putchar ('\n');


#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
    20ca:	01 f7       	brne	.-64     	; 0x208c <nrk_error_print+0x118>
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }

        nrk_led_clr(2);
    20cc:	82 e0       	ldi	r24, 0x02	; 2
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <nrk_led_clr>
        nrk_led_clr(3);
    20d4:	83 e0       	ldi	r24, 0x03	; 3
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0e 94 c1 0b 	call	0x1782	; 0x1782 <nrk_led_clr>
        blink_morse_code_error( error_task );
    20dc:	80 91 e9 03 	lds	r24, 0x03E9
    20e0:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <blink_morse_code_error>
        pause();
    20e4:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <pause>
        nrk_led_set(2);
    20e8:	82 e0       	ldi	r24, 0x02	; 2
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <nrk_led_set>
        pause();
    20f0:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <pause>
        nrk_led_clr(2);
    20f4:	82 e0       	ldi	r24, 0x02	; 2
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	0e 94 c1 0b 	call	0x1782	; 0x1782 <nrk_led_clr>
        pause();
    20fc:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <pause>
        blink_morse_code_error( error_num);
    2100:	80 91 63 04 	lds	r24, 0x0463
    2104:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <blink_morse_code_error>
}
    2108:	42 cf       	rjmp	.-380    	; 0x1f8e <nrk_error_print+0x1a>


#endif

    return error_num;
}
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	1f 91       	pop	r17
    2112:	0f 91       	pop	r16
    2114:	08 95       	ret

00002116 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    2116:	80 93 63 04 	sts	0x0463, r24
    error_task = nrk_cur_task_TCB->task_ID;
    211a:	e0 91 46 06 	lds	r30, 0x0646
    211e:	f0 91 47 06 	lds	r31, 0x0647
    2122:	80 85       	ldd	r24, Z+8	; 0x08
    2124:	80 93 e9 03 	sts	0x03E9, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2128:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <nrk_error_print>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    212c:	10 92 63 04 	sts	0x0463, r1
    2130:	08 95       	ret

00002132 <nrk_kernel_error_add>:

}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    2132:	80 93 63 04 	sts	0x0463, r24
    error_task = task;
    2136:	60 93 e9 03 	sts	0x03E9, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    213a:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <nrk_error_print>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    213e:	10 92 63 04 	sts	0x0463, r1
    2142:	08 95       	ret

00002144 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    2144:	6f 92       	push	r6
    2146:	7f 92       	push	r7
    2148:	8f 92       	push	r8
    214a:	9f 92       	push	r9
    214c:	af 92       	push	r10
    214e:	bf 92       	push	r11
    2150:	cf 92       	push	r12
    2152:	df 92       	push	r13
    2154:	ef 92       	push	r14
    2156:	ff 92       	push	r15
    2158:	0f 93       	push	r16
    215a:	1f 93       	push	r17
    215c:	cf 93       	push	r28
    215e:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	94 e0       	ldi	r25, 0x04	; 4
    2164:	0e 94 52 08 	call	0x10a4	; 0x10a4 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    2168:	e0 91 46 06 	lds	r30, 0x0646
    216c:	f0 91 47 06 	lds	r31, 0x0647
    2170:	80 85       	ldd	r24, Z+8	; 0x08
    2172:	28 2f       	mov	r18, r24
    2174:	33 27       	eor	r19, r19
    2176:	27 fd       	sbrc	r18, 7
    2178:	30 95       	com	r19
    217a:	3f 93       	push	r19
    217c:	8f 93       	push	r24
    217e:	89 e8       	ldi	r24, 0x89	; 137
    2180:	93 e0       	ldi	r25, 0x03	; 3
    2182:	9f 93       	push	r25
    2184:	8f 93       	push	r24
    2186:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    218a:	e0 91 46 06 	lds	r30, 0x0646
    218e:	f0 91 47 06 	lds	r31, 0x0647
    2192:	c2 81       	ldd	r28, Z+2	; 0x02
    2194:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	8d eb       	ldi	r24, 0xBD	; 189
    219c:	93 e0       	ldi	r25, 0x03	; 3
    219e:	9f 93       	push	r25
    21a0:	8f 93       	push	r24
    21a2:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <printf>
    printf( "canary = %x ",*stkc );
    21a6:	88 81       	ld	r24, Y
    21a8:	1f 92       	push	r1
    21aa:	8f 93       	push	r24
    21ac:	82 e9       	ldi	r24, 0x92	; 146
    21ae:	93 e0       	ldi	r25, 0x03	; 3
    21b0:	9f 93       	push	r25
    21b2:	8f 93       	push	r24
    21b4:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    21b8:	e0 91 46 06 	lds	r30, 0x0646
    21bc:	f0 91 47 06 	lds	r31, 0x0647
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    21c0:	81 81       	ldd	r24, Z+1	; 0x01
    21c2:	8f 93       	push	r24
    21c4:	80 81       	ld	r24, Z
    21c6:	8f 93       	push	r24
    21c8:	8f e9       	ldi	r24, 0x9F	; 159
    21ca:	93 e0       	ldi	r25, 0x03	; 3
    21cc:	9f 93       	push	r25
    21ce:	8f 93       	push	r24
    21d0:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    21d4:	80 91 47 06 	lds	r24, 0x0647
    21d8:	8f 93       	push	r24
    21da:	80 91 46 06 	lds	r24, 0x0646
    21de:	8f 93       	push	r24
    21e0:	89 ea       	ldi	r24, 0xA9	; 169
    21e2:	93 e0       	ldi	r25, 0x03	; 3
    21e4:	9f 93       	push	r25
    21e6:	8f 93       	push	r24
    21e8:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <printf>
    21ec:	c5 e2       	ldi	r28, 0x25	; 37
    21ee:	d5 e0       	ldi	r29, 0x05	; 5
    21f0:	ed b7       	in	r30, 0x3d	; 61
    21f2:	fe b7       	in	r31, 0x3e	; 62
    21f4:	74 96       	adiw	r30, 0x14	; 20
    21f6:	0f b6       	in	r0, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	fe bf       	out	0x3e, r31	; 62
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	ed bf       	out	0x3d, r30	; 61
    2200:	00 e0       	ldi	r16, 0x00	; 0
    2202:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2204:	89 eb       	ldi	r24, 0xB9	; 185
    2206:	68 2e       	mov	r6, r24
    2208:	83 e0       	ldi	r24, 0x03	; 3
    220a:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    220c:	92 e9       	ldi	r25, 0x92	; 146
    220e:	89 2e       	mov	r8, r25
    2210:	93 e0       	ldi	r25, 0x03	; 3
    2212:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2214:	2f e9       	ldi	r18, 0x9F	; 159
    2216:	a2 2e       	mov	r10, r18
    2218:	23 e0       	ldi	r18, 0x03	; 3
    221a:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    221c:	39 ea       	ldi	r19, 0xA9	; 169
    221e:	c3 2e       	mov	r12, r19
    2220:	33 e0       	ldi	r19, 0x03	; 3
    2222:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    2224:	ea 80       	ldd	r14, Y+2	; 0x02
    2226:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2228:	ff 92       	push	r15
    222a:	ef 92       	push	r14
    222c:	1f 93       	push	r17
    222e:	0f 93       	push	r16
    2230:	7f 92       	push	r7
    2232:	6f 92       	push	r6
    2234:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <printf>
        printf( "canary = %x ",*stkc );
    2238:	f7 01       	movw	r30, r14
    223a:	80 81       	ld	r24, Z
    223c:	1f 92       	push	r1
    223e:	8f 93       	push	r24
    2240:	9f 92       	push	r9
    2242:	8f 92       	push	r8
    2244:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	8f 93       	push	r24
    224c:	88 81       	ld	r24, Y
    224e:	8f 93       	push	r24
    2250:	bf 92       	push	r11
    2252:	af 92       	push	r10
    2254:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	df 92       	push	r13
    225e:	cf 92       	push	r12
    2260:	0e 94 15 26 	call	0x4c2a	; 0x4c2a <printf>
    2264:	0f 5f       	subi	r16, 0xFF	; 255
    2266:	1f 4f       	sbci	r17, 0xFF	; 255
    2268:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    226a:	ed b7       	in	r30, 0x3d	; 61
    226c:	fe b7       	in	r31, 0x3e	; 62
    226e:	72 96       	adiw	r30, 0x12	; 18
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	fe bf       	out	0x3e, r31	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	ed bf       	out	0x3d, r30	; 61
    227a:	06 30       	cpi	r16, 0x06	; 6
    227c:	11 05       	cpc	r17, r1
    227e:	91 f6       	brne	.-92     	; 0x2224 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	1f 91       	pop	r17
    2286:	0f 91       	pop	r16
    2288:	ff 90       	pop	r15
    228a:	ef 90       	pop	r14
    228c:	df 90       	pop	r13
    228e:	cf 90       	pop	r12
    2290:	bf 90       	pop	r11
    2292:	af 90       	pop	r10
    2294:	9f 90       	pop	r9
    2296:	8f 90       	pop	r8
    2298:	7f 90       	pop	r7
    229a:	6f 90       	pop	r6
    229c:	08 95       	ret

0000229e <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    229e:	cf 93       	push	r28
    22a0:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    22a2:	e0 91 46 06 	lds	r30, 0x0646
    22a6:	f0 91 47 06 	lds	r31, 0x0647
    22aa:	c2 81       	ldd	r28, Z+2	; 0x02
    22ac:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    22ae:	88 81       	ld	r24, Y
    22b0:	85 35       	cpi	r24, 0x55	; 85
    22b2:	39 f0       	breq	.+14     	; 0x22c2 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    22b4:	0e 94 a2 10 	call	0x2144	; 0x2144 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	0e 94 8b 10 	call	0x2116	; 0x2116 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    22be:	85 e5       	ldi	r24, 0x55	; 85
    22c0:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    22c2:	e0 91 46 06 	lds	r30, 0x0646
    22c6:	f0 91 47 06 	lds	r31, 0x0647
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    22ca:	80 81       	ld	r24, Z
    22cc:	91 81       	ldd	r25, Z+1	; 0x01
    22ce:	81 15       	cp	r24, r1
    22d0:	92 44       	sbci	r25, 0x42	; 66
    22d2:	38 f0       	brcs	.+14     	; 0x22e2 <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    22d4:	0e 94 a2 10 	call	0x2144	; 0x2144 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    22d8:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    22de:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <nrk_error_add>




#endif
}
    22e2:	df 91       	pop	r29
    22e4:	cf 91       	pop	r28
    22e6:	08 95       	ret

000022e8 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    22e8:	2b e2       	ldi	r18, 0x2B	; 43
    22ea:	82 02       	muls	r24, r18
    22ec:	c0 01       	movw	r24, r0
    22ee:	11 24       	eor	r1, r1
    22f0:	fc 01       	movw	r30, r24
    22f2:	eb 5d       	subi	r30, 0xDB	; 219
    22f4:	fa 4f       	sbci	r31, 0xFA	; 250
    22f6:	a2 81       	ldd	r26, Z+2	; 0x02
    22f8:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    22fa:	8c 91       	ld	r24, X
    22fc:	85 35       	cpi	r24, 0x55	; 85
    22fe:	19 f0       	breq	.+6      	; 0x2306 <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    2300:	85 e5       	ldi	r24, 0x55	; 85
    2302:	8c 93       	st	X, r24
    2304:	08 c0       	rjmp	.+16     	; 0x2316 <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2306:	80 81       	ld	r24, Z
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	81 15       	cp	r24, r1
    230c:	92 44       	sbci	r25, 0x42	; 66
    230e:	28 f0       	brcs	.+10     	; 0x231a <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2310:	82 e1       	ldi	r24, 0x12	; 18
    2312:	0e 94 8b 10 	call	0x2116	; 0x2116 <nrk_error_add>
        return NRK_ERROR;
    2316:	8f ef       	ldi	r24, 0xFF	; 255
    2318:	08 95       	ret
    }
#endif
    return NRK_OK;
    231a:	81 e0       	ldi	r24, 0x01	; 1
}
    231c:	08 95       	ret

0000231e <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    231e:	0f 93       	push	r16
    2320:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    2322:	40 91 eb 03 	lds	r20, 0x03EB
    2326:	50 91 ec 03 	lds	r21, 0x03EC
    232a:	60 91 ed 03 	lds	r22, 0x03ED
    232e:	70 91 ee 03 	lds	r23, 0x03EE
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	8a 01       	movw	r16, r20
    2338:	9b 01       	movw	r18, r22
    233a:	08 2e       	mov	r0, r24
    233c:	04 c0       	rjmp	.+8      	; 0x2346 <nrk_signal_create+0x28>
    233e:	36 95       	lsr	r19
    2340:	27 95       	ror	r18
    2342:	17 95       	ror	r17
    2344:	07 95       	ror	r16
    2346:	0a 94       	dec	r0
    2348:	d2 f7       	brpl	.-12     	; 0x233e <nrk_signal_create+0x20>
    234a:	00 fd       	sbrc	r16, 0
    234c:	19 c0       	rjmp	.+50     	; 0x2380 <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    234e:	01 e0       	ldi	r16, 0x01	; 1
    2350:	10 e0       	ldi	r17, 0x00	; 0
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	08 2e       	mov	r0, r24
    2358:	04 c0       	rjmp	.+8      	; 0x2362 <nrk_signal_create+0x44>
    235a:	00 0f       	add	r16, r16
    235c:	11 1f       	adc	r17, r17
    235e:	22 1f       	adc	r18, r18
    2360:	33 1f       	adc	r19, r19
    2362:	0a 94       	dec	r0
    2364:	d2 f7       	brpl	.-12     	; 0x235a <nrk_signal_create+0x3c>
    2366:	40 2b       	or	r20, r16
    2368:	51 2b       	or	r21, r17
    236a:	62 2b       	or	r22, r18
    236c:	73 2b       	or	r23, r19
    236e:	40 93 eb 03 	sts	0x03EB, r20
    2372:	50 93 ec 03 	sts	0x03EC, r21
    2376:	60 93 ed 03 	sts	0x03ED, r22
    237a:	70 93 ee 03 	sts	0x03EE, r23
			return i;
    237e:	05 c0       	rjmp	.+10     	; 0x238a <nrk_signal_create+0x6c>
    2380:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    2382:	80 32       	cpi	r24, 0x20	; 32
    2384:	91 05       	cpc	r25, r1
    2386:	b9 f6       	brne	.-82     	; 0x2336 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    2388:	8f ef       	ldi	r24, 0xFF	; 255


}
    238a:	1f 91       	pop	r17
    238c:	0f 91       	pop	r16
    238e:	08 95       	ret

00002390 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    2390:	e0 91 46 06 	lds	r30, 0x0646
    2394:	f0 91 47 06 	lds	r31, 0x0647
    2398:	65 85       	ldd	r22, Z+13	; 0x0d
    239a:	76 85       	ldd	r23, Z+14	; 0x0e
    239c:	87 85       	ldd	r24, Z+15	; 0x0f
    239e:	90 89       	ldd	r25, Z+16	; 0x10
}
    23a0:	08 95       	ret

000023a2 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    23a2:	cf 92       	push	r12
    23a4:	df 92       	push	r13
    23a6:	ef 92       	push	r14
    23a8:	ff 92       	push	r15
    23aa:	0f 93       	push	r16
    23ac:	1f 93       	push	r17
    23ae:	cf 93       	push	r28
    23b0:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    23b2:	c1 2c       	mov	r12, r1
    23b4:	d1 2c       	mov	r13, r1
    23b6:	76 01       	movw	r14, r12
    23b8:	c3 94       	inc	r12
    23ba:	08 2e       	mov	r0, r24
    23bc:	04 c0       	rjmp	.+8      	; 0x23c6 <nrk_signal_delete+0x24>
    23be:	cc 0c       	add	r12, r12
    23c0:	dd 1c       	adc	r13, r13
    23c2:	ee 1c       	adc	r14, r14
    23c4:	ff 1c       	adc	r15, r15
    23c6:	0a 94       	dec	r0
    23c8:	d2 f7       	brpl	.-12     	; 0x23be <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    23ca:	40 91 eb 03 	lds	r20, 0x03EB
    23ce:	50 91 ec 03 	lds	r21, 0x03EC
    23d2:	60 91 ed 03 	lds	r22, 0x03ED
    23d6:	70 91 ee 03 	lds	r23, 0x03EE
    23da:	4c 21       	and	r20, r12
    23dc:	5d 21       	and	r21, r13
    23de:	6e 21       	and	r22, r14
    23e0:	7f 21       	and	r23, r15
    23e2:	45 2b       	or	r20, r21
    23e4:	46 2b       	or	r20, r22
    23e6:	47 2b       	or	r20, r23
    23e8:	09 f4       	brne	.+2      	; 0x23ec <nrk_signal_delete+0x4a>
    23ea:	60 c0       	rjmp	.+192    	; 0x24ac <nrk_signal_delete+0x10a>
    23ec:	08 2f       	mov	r16, r24

	nrk_int_disable();
    23ee:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <nrk_int_disable>
    23f2:	ee e2       	ldi	r30, 0x2E	; 46
    23f4:	f5 e0       	ldi	r31, 0x05	; 5
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    23f6:	b7 01       	movw	r22, r14
    23f8:	a6 01       	movw	r20, r12
    23fa:	40 95       	com	r20
    23fc:	50 95       	com	r21
    23fe:	60 95       	com	r22
    2400:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2402:	13 e0       	ldi	r17, 0x03	; 3
    2404:	df 01       	movw	r26, r30
    2406:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    2408:	8c 91       	ld	r24, X
    240a:	8f 3f       	cpi	r24, 0xFF	; 255
    240c:	39 f1       	breq	.+78     	; 0x245c <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    240e:	84 81       	ldd	r24, Z+4	; 0x04
    2410:	95 81       	ldd	r25, Z+5	; 0x05
    2412:	a6 81       	ldd	r26, Z+6	; 0x06
    2414:	b7 81       	ldd	r27, Z+7	; 0x07
    2416:	8c 15       	cp	r24, r12
    2418:	9d 05       	cpc	r25, r13
    241a:	ae 05       	cpc	r26, r14
    241c:	bf 05       	cpc	r27, r15
    241e:	51 f4       	brne	.+20     	; 0x2434 <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    2420:	10 86       	std	Z+8, r1	; 0x08
    2422:	11 86       	std	Z+9, r1	; 0x09
    2424:	12 86       	std	Z+10, r1	; 0x0a
    2426:	13 86       	std	Z+11, r1	; 0x0b
    2428:	9f 01       	movw	r18, r30
    242a:	22 50       	subi	r18, 0x02	; 2
    242c:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    242e:	e9 01       	movw	r28, r18
    2430:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2432:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2434:	84 23       	and	r24, r20
    2436:	95 23       	and	r25, r21
    2438:	a6 23       	and	r26, r22
    243a:	b7 23       	and	r27, r23
    243c:	84 83       	std	Z+4, r24	; 0x04
    243e:	95 83       	std	Z+5, r25	; 0x05
    2440:	a6 83       	std	Z+6, r26	; 0x06
    2442:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2444:	80 85       	ldd	r24, Z+8	; 0x08
    2446:	91 85       	ldd	r25, Z+9	; 0x09
    2448:	a2 85       	ldd	r26, Z+10	; 0x0a
    244a:	b3 85       	ldd	r27, Z+11	; 0x0b
    244c:	84 23       	and	r24, r20
    244e:	95 23       	and	r25, r21
    2450:	a6 23       	and	r26, r22
    2452:	b7 23       	and	r27, r23
    2454:	80 87       	std	Z+8, r24	; 0x08
    2456:	91 87       	std	Z+9, r25	; 0x09
    2458:	a2 87       	std	Z+10, r26	; 0x0a
    245a:	b3 87       	std	Z+11, r27	; 0x0b
    245c:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    245e:	d6 e0       	ldi	r29, 0x06	; 6
    2460:	e0 33       	cpi	r30, 0x30	; 48
    2462:	fd 07       	cpc	r31, r29
    2464:	79 f6       	brne	.-98     	; 0x2404 <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    2466:	8e ef       	ldi	r24, 0xFE	; 254
    2468:	9f ef       	ldi	r25, 0xFF	; 255
    246a:	af ef       	ldi	r26, 0xFF	; 255
    246c:	bf ef       	ldi	r27, 0xFF	; 255
    246e:	04 c0       	rjmp	.+8      	; 0x2478 <nrk_signal_delete+0xd6>
    2470:	88 0f       	add	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	aa 1f       	adc	r26, r26
    2476:	bb 1f       	adc	r27, r27
    2478:	0a 95       	dec	r16
    247a:	d2 f7       	brpl	.-12     	; 0x2470 <nrk_signal_delete+0xce>
    247c:	40 91 eb 03 	lds	r20, 0x03EB
    2480:	50 91 ec 03 	lds	r21, 0x03EC
    2484:	60 91 ed 03 	lds	r22, 0x03ED
    2488:	70 91 ee 03 	lds	r23, 0x03EE
    248c:	84 23       	and	r24, r20
    248e:	95 23       	and	r25, r21
    2490:	a6 23       	and	r26, r22
    2492:	b7 23       	and	r27, r23
    2494:	80 93 eb 03 	sts	0x03EB, r24
    2498:	90 93 ec 03 	sts	0x03EC, r25
    249c:	a0 93 ed 03 	sts	0x03ED, r26
    24a0:	b0 93 ee 03 	sts	0x03EE, r27
	nrk_int_enable();
    24a4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>

	return NRK_OK;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	01 c0       	rjmp	.+2      	; 0x24ae <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    24ac:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	1f 91       	pop	r17
    24b4:	0f 91       	pop	r16
    24b6:	ff 90       	pop	r15
    24b8:	ef 90       	pop	r14
    24ba:	df 90       	pop	r13
    24bc:	cf 90       	pop	r12
    24be:	08 95       	ret

000024c0 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    24c4:	41 e0       	ldi	r20, 0x01	; 1
    24c6:	50 e0       	ldi	r21, 0x00	; 0
    24c8:	60 e0       	ldi	r22, 0x00	; 0
    24ca:	70 e0       	ldi	r23, 0x00	; 0
    24cc:	8a 01       	movw	r16, r20
    24ce:	9b 01       	movw	r18, r22
    24d0:	04 c0       	rjmp	.+8      	; 0x24da <nrk_signal_unregister+0x1a>
    24d2:	00 0f       	add	r16, r16
    24d4:	11 1f       	adc	r17, r17
    24d6:	22 1f       	adc	r18, r18
    24d8:	33 1f       	adc	r19, r19
    24da:	8a 95       	dec	r24
    24dc:	d2 f7       	brpl	.-12     	; 0x24d2 <nrk_signal_unregister+0x12>
    24de:	d9 01       	movw	r26, r18
    24e0:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    24e2:	e0 91 46 06 	lds	r30, 0x0646
    24e6:	f0 91 47 06 	lds	r31, 0x0647
    24ea:	45 85       	ldd	r20, Z+13	; 0x0d
    24ec:	56 85       	ldd	r21, Z+14	; 0x0e
    24ee:	67 85       	ldd	r22, Z+15	; 0x0f
    24f0:	70 89       	ldd	r23, Z+16	; 0x10
    24f2:	04 23       	and	r16, r20
    24f4:	15 23       	and	r17, r21
    24f6:	26 23       	and	r18, r22
    24f8:	37 23       	and	r19, r23
    24fa:	01 2b       	or	r16, r17
    24fc:	02 2b       	or	r16, r18
    24fe:	03 2b       	or	r16, r19
    2500:	d1 f0       	breq	.+52     	; 0x2536 <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    2502:	80 95       	com	r24
    2504:	90 95       	com	r25
    2506:	a0 95       	com	r26
    2508:	b0 95       	com	r27
    250a:	48 23       	and	r20, r24
    250c:	59 23       	and	r21, r25
    250e:	6a 23       	and	r22, r26
    2510:	7b 23       	and	r23, r27
    2512:	45 87       	std	Z+13, r20	; 0x0d
    2514:	56 87       	std	Z+14, r21	; 0x0e
    2516:	67 87       	std	Z+15, r22	; 0x0f
    2518:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    251a:	41 89       	ldd	r20, Z+17	; 0x11
    251c:	52 89       	ldd	r21, Z+18	; 0x12
    251e:	63 89       	ldd	r22, Z+19	; 0x13
    2520:	74 89       	ldd	r23, Z+20	; 0x14
    2522:	84 23       	and	r24, r20
    2524:	95 23       	and	r25, r21
    2526:	a6 23       	and	r26, r22
    2528:	b7 23       	and	r27, r23
    252a:	81 8b       	std	Z+17, r24	; 0x11
    252c:	92 8b       	std	Z+18, r25	; 0x12
    252e:	a3 8b       	std	Z+19, r26	; 0x13
    2530:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	01 c0       	rjmp	.+2      	; 0x2538 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    2536:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    2538:	1f 91       	pop	r17
    253a:	0f 91       	pop	r16
    253c:	08 95       	ret

0000253e <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    253e:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    2540:	40 91 eb 03 	lds	r20, 0x03EB
    2544:	50 91 ec 03 	lds	r21, 0x03EC
    2548:	60 91 ed 03 	lds	r22, 0x03ED
    254c:	70 91 ee 03 	lds	r23, 0x03EE
    2550:	08 2e       	mov	r0, r24
    2552:	04 c0       	rjmp	.+8      	; 0x255c <nrk_signal_register+0x1e>
    2554:	76 95       	lsr	r23
    2556:	67 95       	ror	r22
    2558:	57 95       	ror	r21
    255a:	47 95       	ror	r20
    255c:	0a 94       	dec	r0
    255e:	d2 f7       	brpl	.-12     	; 0x2554 <nrk_signal_register+0x16>
    2560:	40 ff       	sbrs	r20, 0
    2562:	1d c0       	rjmp	.+58     	; 0x259e <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    2564:	e0 91 46 06 	lds	r30, 0x0646
    2568:	f0 91 47 06 	lds	r31, 0x0647
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	a0 e0       	ldi	r26, 0x00	; 0
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	04 c0       	rjmp	.+8      	; 0x257e <nrk_signal_register+0x40>
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	aa 1f       	adc	r26, r26
    257c:	bb 1f       	adc	r27, r27
    257e:	2a 95       	dec	r18
    2580:	d2 f7       	brpl	.-12     	; 0x2576 <nrk_signal_register+0x38>
    2582:	45 85       	ldd	r20, Z+13	; 0x0d
    2584:	56 85       	ldd	r21, Z+14	; 0x0e
    2586:	67 85       	ldd	r22, Z+15	; 0x0f
    2588:	70 89       	ldd	r23, Z+16	; 0x10
    258a:	84 2b       	or	r24, r20
    258c:	95 2b       	or	r25, r21
    258e:	a6 2b       	or	r26, r22
    2590:	b7 2b       	or	r27, r23
    2592:	85 87       	std	Z+13, r24	; 0x0d
    2594:	96 87       	std	Z+14, r25	; 0x0e
    2596:	a7 87       	std	Z+15, r26	; 0x0f
    2598:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	08 95       	ret
	}
            
	return NRK_ERROR;
    259e:	8f ef       	ldi	r24, 0xFF	; 255
}
    25a0:	08 95       	ret

000025a2 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    25a2:	cf 92       	push	r12
    25a4:	df 92       	push	r13
    25a6:	ef 92       	push	r14
    25a8:	ff 92       	push	r15
    25aa:	cf 93       	push	r28
	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;
    uint8_t timer;

	sig_mask=SIG(sig_id);
    25ac:	c1 2c       	mov	r12, r1
    25ae:	d1 2c       	mov	r13, r1
    25b0:	76 01       	movw	r14, r12
    25b2:	c3 94       	inc	r12
    25b4:	04 c0       	rjmp	.+8      	; 0x25be <nrk_event_signal+0x1c>
    25b6:	cc 0c       	add	r12, r12
    25b8:	dd 1c       	adc	r13, r13
    25ba:	ee 1c       	adc	r14, r14
    25bc:	ff 1c       	adc	r15, r15
    25be:	8a 95       	dec	r24
    25c0:	d2 f7       	brpl	.-12     	; 0x25b6 <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    25c2:	80 91 eb 03 	lds	r24, 0x03EB
    25c6:	90 91 ec 03 	lds	r25, 0x03EC
    25ca:	a0 91 ed 03 	lds	r26, 0x03ED
    25ce:	b0 91 ee 03 	lds	r27, 0x03EE
    25d2:	8c 21       	and	r24, r12
    25d4:	9d 21       	and	r25, r13
    25d6:	ae 21       	and	r26, r14
    25d8:	bf 21       	and	r27, r15
    25da:	89 2b       	or	r24, r25
    25dc:	8a 2b       	or	r24, r26
    25de:	8b 2b       	or	r24, r27
    25e0:	11 f4       	brne	.+4      	; 0x25e6 <nrk_event_signal+0x44>
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	44 c0       	rjmp	.+136    	; 0x266e <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    25e6:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <nrk_int_disable>
    25ea:	ec e2       	ldi	r30, 0x2C	; 44
    25ec:	f5 e0       	ldi	r31, 0x05	; 5
    25ee:	ae e2       	ldi	r26, 0x2E	; 46
    25f0:	b5 e0       	ldi	r27, 0x05	; 5

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    25f2:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    25f4:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    25f6:	90 81       	ld	r25, Z
    25f8:	91 30       	cpi	r25, 0x01	; 1
    25fa:	b9 f4       	brne	.+46     	; 0x262a <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    25fc:	42 85       	ldd	r20, Z+10	; 0x0a
    25fe:	53 85       	ldd	r21, Z+11	; 0x0b
    2600:	64 85       	ldd	r22, Z+12	; 0x0c
    2602:	75 85       	ldd	r23, Z+13	; 0x0d
    2604:	4c 21       	and	r20, r12
    2606:	5d 21       	and	r21, r13
    2608:	6e 21       	and	r22, r14
    260a:	7f 21       	and	r23, r15
    260c:	45 2b       	or	r20, r21
    260e:	46 2b       	or	r20, r22
    2610:	47 2b       	or	r20, r23
    2612:	59 f0       	breq	.+22     	; 0x262a <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2614:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    2616:	16 86       	std	Z+14, r1	; 0x0e
    2618:	17 86       	std	Z+15, r1	; 0x0f
    261a:	10 8a       	std	Z+16, r1	; 0x10
    261c:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    261e:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    2620:	c2 86       	std	Z+10, r12	; 0x0a
    2622:	d3 86       	std	Z+11, r13	; 0x0b
    2624:	e4 86       	std	Z+12, r14	; 0x0c
    2626:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    2628:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    262a:	90 81       	ld	r25, Z
    262c:	92 30       	cpi	r25, 0x02	; 2
    262e:	a1 f4       	brne	.+40     	; 0x2658 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    2630:	42 85       	ldd	r20, Z+10	; 0x0a
    2632:	53 85       	ldd	r21, Z+11	; 0x0b
    2634:	64 85       	ldd	r22, Z+12	; 0x0c
    2636:	75 85       	ldd	r23, Z+13	; 0x0d
    2638:	4c 15       	cp	r20, r12
    263a:	5d 05       	cpc	r21, r13
    263c:	6e 05       	cpc	r22, r14
    263e:	7f 05       	cpc	r23, r15
    2640:	59 f4       	brne	.+22     	; 0x2658 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2642:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    2644:	16 86       	std	Z+14, r1	; 0x0e
    2646:	17 86       	std	Z+15, r1	; 0x0f
    2648:	10 8a       	std	Z+16, r1	; 0x10
    264a:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    264c:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    264e:	12 86       	std	Z+10, r1	; 0x0a
    2650:	13 86       	std	Z+11, r1	; 0x0b
    2652:	14 86       	std	Z+12, r1	; 0x0c
    2654:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    2656:	c1 e0       	ldi	r28, 0x01	; 1
    2658:	bb 96       	adiw	r30, 0x2b	; 43
    265a:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    265c:	96 e0       	ldi	r25, 0x06	; 6
    265e:	ee 32       	cpi	r30, 0x2E	; 46
    2660:	f9 07       	cpc	r31, r25
    2662:	49 f6       	brne	.-110    	; 0x25f6 <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    2664:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>
	if(event_occured)
    2668:	c1 11       	cpse	r28, r1
    266a:	05 c0       	rjmp	.+10     	; 0x2676 <nrk_event_signal+0xd4>
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    266c:	82 e0       	ldi	r24, 0x02	; 2
    266e:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <_nrk_errno_set>
	return NRK_ERROR;
    2672:	8f ef       	ldi	r24, 0xFF	; 255
    2674:	01 c0       	rjmp	.+2      	; 0x2678 <nrk_event_signal+0xd6>
            			_nrk_set_next_wakeup (timer);
			}	
		else
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
    2676:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    2678:	cf 91       	pop	r28
    267a:	ff 90       	pop	r15
    267c:	ef 90       	pop	r14
    267e:	df 90       	pop	r13
    2680:	cf 90       	pop	r12
    2682:	08 95       	ret

00002684 <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    2684:	0f 93       	push	r16
    2686:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    2688:	e0 91 46 06 	lds	r30, 0x0646
    268c:	f0 91 47 06 	lds	r31, 0x0647
    2690:	05 85       	ldd	r16, Z+13	; 0x0d
    2692:	16 85       	ldd	r17, Z+14	; 0x0e
    2694:	27 85       	ldd	r18, Z+15	; 0x0f
    2696:	30 89       	ldd	r19, Z+16	; 0x10
    2698:	06 23       	and	r16, r22
    269a:	17 23       	and	r17, r23
    269c:	28 23       	and	r18, r24
    269e:	39 23       	and	r19, r25
    26a0:	01 15       	cp	r16, r1
    26a2:	11 05       	cpc	r17, r1
    26a4:	21 05       	cpc	r18, r1
    26a6:	31 05       	cpc	r19, r1
    26a8:	11 f1       	breq	.+68     	; 0x26ee <nrk_event_wait+0x6a>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    26ae:	81 8b       	std	Z+17, r24	; 0x11
    26b0:	92 8b       	std	Z+18, r25	; 0x12
    26b2:	a3 8b       	std	Z+19, r26	; 0x13
    26b4:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    26b6:	21 e0       	ldi	r18, 0x01	; 1
    26b8:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    26ba:	00 90 36 06 	lds	r0, 0x0636
    26be:	04 c0       	rjmp	.+8      	; 0x26c8 <nrk_event_wait+0x44>
    26c0:	b6 95       	lsr	r27
    26c2:	a7 95       	ror	r26
    26c4:	97 95       	ror	r25
    26c6:	87 95       	ror	r24
    26c8:	0a 94       	dec	r0
    26ca:	d2 f7       	brpl	.-12     	; 0x26c0 <nrk_event_wait+0x3c>
    26cc:	80 ff       	sbrs	r24, 0
    26ce:	03 c0       	rjmp	.+6      	; 0x26d6 <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    26d0:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <nrk_wait_until_nw>
    26d4:	04 c0       	rjmp	.+8      	; 0x26de <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	0e 94 f6 16 	call	0x2dec	; 0x2dec <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    26de:	e0 91 46 06 	lds	r30, 0x0646
    26e2:	f0 91 47 06 	lds	r31, 0x0647
    26e6:	01 89       	ldd	r16, Z+17	; 0x11
    26e8:	12 89       	ldd	r17, Z+18	; 0x12
    26ea:	23 89       	ldd	r18, Z+19	; 0x13
    26ec:	34 89       	ldd	r19, Z+20	; 0x14
}
    26ee:	c9 01       	movw	r24, r18
    26f0:	b8 01       	movw	r22, r16
    26f2:	1f 91       	pop	r17
    26f4:	0f 91       	pop	r16
    26f6:	08 95       	ret

000026f8 <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    26f8:	90 91 45 06 	lds	r25, 0x0645
    26fc:	93 30       	cpi	r25, 0x03	; 3
    26fe:	d0 f4       	brcc	.+52     	; 0x2734 <nrk_sem_create+0x3c>
    2700:	a9 e2       	ldi	r26, 0x29	; 41
    2702:	b6 e0       	ldi	r27, 0x06	; 6
    2704:	e0 e0       	ldi	r30, 0x00	; 0
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    2706:	2c 91       	ld	r18, X
    2708:	2f 3f       	cpi	r18, 0xFF	; 255
    270a:	21 f0       	breq	.+8      	; 0x2714 <nrk_sem_create+0x1c>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    270c:	ef 5f       	subi	r30, 0xFF	; 255
    270e:	13 96       	adiw	r26, 0x03	; 3
    2710:	e4 30       	cpi	r30, 0x04	; 4
    2712:	c9 f7       	brne	.-14     	; 0x2706 <nrk_sem_create+0xe>
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	9f 01       	movw	r18, r30
    2718:	22 0f       	add	r18, r18
    271a:	33 1f       	adc	r19, r19
    271c:	e2 0f       	add	r30, r18
    271e:	f3 1f       	adc	r31, r19
    2720:	e7 5d       	subi	r30, 0xD7	; 215
    2722:	f9 4f       	sbci	r31, 0xF9	; 249
    2724:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    2726:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    2728:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    272a:	9f 5f       	subi	r25, 0xFF	; 255
    272c:	90 93 45 06 	sts	0x0645, r25
	return	&nrk_sem_list[i];
    2730:	cf 01       	movw	r24, r30
    2732:	08 95       	ret

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    2738:	08 95       	ret

0000273a <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    273a:	26 e0       	ldi	r18, 0x06	; 6
    273c:	89 32       	cpi	r24, 0x29	; 41
    273e:	92 07       	cpc	r25, r18
    2740:	69 f0       	breq	.+26     	; 0x275c <nrk_get_resource_index+0x22>
    2742:	26 e0       	ldi	r18, 0x06	; 6
    2744:	8c 32       	cpi	r24, 0x2C	; 44
    2746:	92 07       	cpc	r25, r18
    2748:	59 f0       	breq	.+22     	; 0x2760 <nrk_get_resource_index+0x26>
    274a:	26 e0       	ldi	r18, 0x06	; 6
    274c:	8f 32       	cpi	r24, 0x2F	; 47
    274e:	92 07       	cpc	r25, r18
    2750:	49 f0       	breq	.+18     	; 0x2764 <nrk_get_resource_index+0x2a>
    2752:	82 53       	subi	r24, 0x32	; 50
    2754:	96 40       	sbci	r25, 0x06	; 6
    2756:	41 f4       	brne	.+16     	; 0x2768 <nrk_get_resource_index+0x2e>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    2758:	83 e0       	ldi	r24, 0x03	; 3
    275a:	08 95       	ret
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	08 95       	ret
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	08 95       	ret
    2764:	82 e0       	ldi	r24, 0x02	; 2
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
    2766:	08 95       	ret
	return NRK_ERROR;
    2768:	8f ef       	ldi	r24, 0xFF	; 255
}
    276a:	08 95       	ret

0000276c <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    276c:	0e 94 9d 13 	call	0x273a	; 0x273a <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2770:	8f 3f       	cpi	r24, 0xFF	; 255
    2772:	11 f4       	brne	.+4      	; 0x2778 <nrk_sem_query+0xc>
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	03 c0       	rjmp	.+6      	; 0x277e <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2778:	84 30       	cpi	r24, 0x04	; 4
    277a:	29 f4       	brne	.+10     	; 0x2786 <nrk_sem_query+0x1a>
    277c:	82 e0       	ldi	r24, 0x02	; 2
    277e:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <_nrk_errno_set>
    2782:	8f ef       	ldi	r24, 0xFF	; 255
    2784:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    2786:	99 27       	eor	r25, r25
    2788:	87 fd       	sbrc	r24, 7
    278a:	90 95       	com	r25
    278c:	fc 01       	movw	r30, r24
    278e:	ee 0f       	add	r30, r30
    2790:	ff 1f       	adc	r31, r31
    2792:	8e 0f       	add	r24, r30
    2794:	9f 1f       	adc	r25, r31
    2796:	fc 01       	movw	r30, r24
    2798:	e7 5d       	subi	r30, 0xD7	; 215
    279a:	f9 4f       	sbci	r31, 0xF9	; 249
    279c:	82 81       	ldd	r24, Z+2	; 0x02
}
    279e:	08 95       	ret

000027a0 <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    27a0:	ef 92       	push	r14
    27a2:	ff 92       	push	r15
    27a4:	0f 93       	push	r16
    27a6:	1f 93       	push	r17
    27a8:	cf 93       	push	r28
    27aa:	df 93       	push	r29
    27ac:	1f 92       	push	r1
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    27b2:	0e 94 9d 13 	call	0x273a	; 0x273a <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    27b6:	8f 3f       	cpi	r24, 0xFF	; 255
    27b8:	11 f4       	brne	.+4      	; 0x27be <nrk_sem_pend+0x1e>
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	03 c0       	rjmp	.+6      	; 0x27c4 <nrk_sem_pend+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    27be:	84 30       	cpi	r24, 0x04	; 4
    27c0:	29 f4       	brne	.+10     	; 0x27cc <nrk_sem_pend+0x2c>
    27c2:	82 e0       	ldi	r24, 0x02	; 2
    27c4:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <_nrk_errno_set>
    27c8:	8f ef       	ldi	r24, 0xFF	; 255
    27ca:	41 c0       	rjmp	.+130    	; 0x284e <nrk_sem_pend+0xae>
	
	nrk_int_disable();
    27cc:	89 83       	std	Y+1, r24	; 0x01
    27ce:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	e8 2e       	mov	r14, r24
    27d6:	ff 24       	eor	r15, r15
    27d8:	e7 fc       	sbrc	r14, 7
    27da:	f0 94       	com	r15
    27dc:	87 01       	movw	r16, r14
    27de:	00 0f       	add	r16, r16
    27e0:	11 1f       	adc	r17, r17
    27e2:	f8 01       	movw	r30, r16
    27e4:	ee 0d       	add	r30, r14
    27e6:	ff 1d       	adc	r31, r15
    27e8:	e7 5d       	subi	r30, 0xD7	; 215
    27ea:	f9 4f       	sbci	r31, 0xF9	; 249
    27ec:	92 81       	ldd	r25, Z+2	; 0x02
    27ee:	91 11       	cpse	r25, r1
    27f0:	16 c0       	rjmp	.+44     	; 0x281e <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    27f2:	e0 91 46 06 	lds	r30, 0x0646
    27f6:	f0 91 47 06 	lds	r31, 0x0647
    27fa:	97 81       	ldd	r25, Z+7	; 0x07
    27fc:	92 60       	ori	r25, 0x02	; 2
    27fe:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    2800:	99 27       	eor	r25, r25
    2802:	87 fd       	sbrc	r24, 7
    2804:	90 95       	com	r25
    2806:	a9 2f       	mov	r26, r25
    2808:	b9 2f       	mov	r27, r25
    280a:	81 8b       	std	Z+17, r24	; 0x11
    280c:	92 8b       	std	Z+18, r25	; 0x12
    280e:	a3 8b       	std	Z+19, r26	; 0x13
    2810:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    2812:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    281e:	0e 0d       	add	r16, r14
    2820:	1f 1d       	adc	r17, r15
    2822:	d8 01       	movw	r26, r16
    2824:	a7 5d       	subi	r26, 0xD7	; 215
    2826:	b9 4f       	sbci	r27, 0xF9	; 249
    2828:	12 96       	adiw	r26, 0x02	; 2
    282a:	8c 91       	ld	r24, X
    282c:	12 97       	sbiw	r26, 0x02	; 2
    282e:	81 50       	subi	r24, 0x01	; 1
    2830:	12 96       	adiw	r26, 0x02	; 2
    2832:	8c 93       	st	X, r24
    2834:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    2836:	e0 91 46 06 	lds	r30, 0x0646
    283a:	f0 91 47 06 	lds	r31, 0x0647
    283e:	11 96       	adiw	r26, 0x01	; 1
    2840:	8c 91       	ld	r24, X
    2842:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    2848:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>

	return NRK_OK;
    284c:	81 e0       	ldi	r24, 0x01	; 1
}
    284e:	0f 90       	pop	r0
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	1f 91       	pop	r17
    2856:	0f 91       	pop	r16
    2858:	ff 90       	pop	r15
    285a:	ef 90       	pop	r14
    285c:	08 95       	ret

0000285e <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    285e:	0f 93       	push	r16
    2860:	1f 93       	push	r17
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	1f 92       	push	r1
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    286c:	0e 94 9d 13 	call	0x273a	; 0x273a <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2870:	8f 3f       	cpi	r24, 0xFF	; 255
    2872:	11 f4       	brne	.+4      	; 0x2878 <nrk_sem_post+0x1a>
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	03 c0       	rjmp	.+6      	; 0x287e <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2878:	84 30       	cpi	r24, 0x04	; 4
    287a:	29 f4       	brne	.+10     	; 0x2886 <nrk_sem_post+0x28>
    287c:	82 e0       	ldi	r24, 0x02	; 2
    287e:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <_nrk_errno_set>
    2882:	8f ef       	ldi	r24, 0xFF	; 255
    2884:	44 c0       	rjmp	.+136    	; 0x290e <nrk_sem_post+0xb0>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    2886:	48 2f       	mov	r20, r24
    2888:	55 27       	eor	r21, r21
    288a:	47 fd       	sbrc	r20, 7
    288c:	50 95       	com	r21
    288e:	9a 01       	movw	r18, r20
    2890:	22 0f       	add	r18, r18
    2892:	33 1f       	adc	r19, r19
    2894:	24 0f       	add	r18, r20
    2896:	35 1f       	adc	r19, r21
    2898:	89 01       	movw	r16, r18
    289a:	07 5d       	subi	r16, 0xD7	; 215
    289c:	19 4f       	sbci	r17, 0xF9	; 249
    289e:	f8 01       	movw	r30, r16
    28a0:	22 81       	ldd	r18, Z+2	; 0x02
    28a2:	90 81       	ld	r25, Z
    28a4:	29 17       	cp	r18, r25
    28a6:	94 f5       	brge	.+100    	; 0x290c <nrk_sem_post+0xae>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    28a8:	89 83       	std	Y+1, r24	; 0x01
    28aa:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <nrk_int_disable>

		nrk_sem_list[id].value++;
    28ae:	f8 01       	movw	r30, r16
    28b0:	92 81       	ldd	r25, Z+2	; 0x02
    28b2:	9f 5f       	subi	r25, 0xFF	; 255
    28b4:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    28b6:	e0 91 46 06 	lds	r30, 0x0646
    28ba:	f0 91 47 06 	lds	r31, 0x0647
    28be:	14 82       	std	Z+4, r1	; 0x04
    28c0:	ec e2       	ldi	r30, 0x2C	; 44
    28c2:	f5 e0       	ldi	r31, 0x05	; 5

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	99 27       	eor	r25, r25
    28c8:	87 fd       	sbrc	r24, 7
    28ca:	90 95       	com	r25
    28cc:	a9 2f       	mov	r26, r25
    28ce:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    28d0:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    28d2:	30 81       	ld	r19, Z
    28d4:	32 30       	cpi	r19, 0x02	; 2
    28d6:	99 f4       	brne	.+38     	; 0x28fe <nrk_sem_post+0xa0>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    28d8:	42 85       	ldd	r20, Z+10	; 0x0a
    28da:	53 85       	ldd	r21, Z+11	; 0x0b
    28dc:	64 85       	ldd	r22, Z+12	; 0x0c
    28de:	75 85       	ldd	r23, Z+13	; 0x0d
    28e0:	48 17       	cp	r20, r24
    28e2:	59 07       	cpc	r21, r25
    28e4:	6a 07       	cpc	r22, r26
    28e6:	7b 07       	cpc	r23, r27
    28e8:	51 f4       	brne	.+20     	; 0x28fe <nrk_sem_post+0xa0>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    28ea:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    28ec:	16 86       	std	Z+14, r1	; 0x0e
    28ee:	17 86       	std	Z+15, r1	; 0x0f
    28f0:	10 8a       	std	Z+16, r1	; 0x10
    28f2:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    28f4:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    28f6:	12 86       	std	Z+10, r1	; 0x0a
    28f8:	13 86       	std	Z+11, r1	; 0x0b
    28fa:	14 86       	std	Z+12, r1	; 0x0c
    28fc:	15 86       	std	Z+13, r1	; 0x0d
    28fe:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2900:	36 e0       	ldi	r19, 0x06	; 6
    2902:	ee 32       	cpi	r30, 0x2E	; 46
    2904:	f3 07       	cpc	r31, r19
    2906:	29 f7       	brne	.-54     	; 0x28d2 <nrk_sem_post+0x74>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    2908:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>
	}
		
return NRK_OK;
    290c:	81 e0       	ldi	r24, 0x01	; 1
}
    290e:	0f 90       	pop	r0
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	1f 91       	pop	r17
    2916:	0f 91       	pop	r16
    2918:	08 95       	ret

0000291a <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    291a:	0e 94 9d 13 	call	0x273a	; 0x273a <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    291e:	8f 3f       	cpi	r24, 0xFF	; 255
    2920:	11 f4       	brne	.+4      	; 0x2926 <nrk_sem_delete+0xc>
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	03 c0       	rjmp	.+6      	; 0x292c <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2926:	84 30       	cpi	r24, 0x04	; 4
    2928:	29 f4       	brne	.+10     	; 0x2934 <nrk_sem_delete+0x1a>
    292a:	82 e0       	ldi	r24, 0x02	; 2
    292c:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <_nrk_errno_set>
    2930:	8f ef       	ldi	r24, 0xFF	; 255
    2932:	08 95       	ret

	nrk_sem_list[id].count=-1;
    2934:	99 27       	eor	r25, r25
    2936:	87 fd       	sbrc	r24, 7
    2938:	90 95       	com	r25
    293a:	fc 01       	movw	r30, r24
    293c:	ee 0f       	add	r30, r30
    293e:	ff 1f       	adc	r31, r31
    2940:	8e 0f       	add	r24, r30
    2942:	9f 1f       	adc	r25, r31
    2944:	fc 01       	movw	r30, r24
    2946:	e7 5d       	subi	r30, 0xD7	; 215
    2948:	f9 4f       	sbci	r31, 0xF9	; 249
    294a:	8f ef       	ldi	r24, 0xFF	; 255
    294c:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    294e:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    2950:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    2952:	80 91 45 06 	lds	r24, 0x0645
    2956:	81 50       	subi	r24, 0x01	; 1
    2958:	80 93 45 06 	sts	0x0645, r24
return NRK_OK;
    295c:	81 e0       	ldi	r24, 0x01	; 1
}
    295e:	08 95       	ret

00002960 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    2960:	e0 91 3b 06 	lds	r30, 0x063B
    2964:	f0 91 3c 06 	lds	r31, 0x063C
}
    2968:	80 81       	ld	r24, Z
    296a:	08 95       	ret

0000296c <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    296c:	e0 91 3b 06 	lds	r30, 0x063B
    2970:	f0 91 3c 06 	lds	r31, 0x063C
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    2974:	30 97       	sbiw	r30, 0x00	; 0
    2976:	21 f0       	breq	.+8      	; 0x2980 <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    2978:	03 80       	ldd	r0, Z+3	; 0x03
    297a:	f4 81       	ldd	r31, Z+4	; 0x04
    297c:	e0 2d       	mov	r30, r0
    297e:	fa cf       	rjmp	.-12     	; 0x2974 <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    2980:	08 95       	ret

00002982 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    2982:	af 92       	push	r10
    2984:	bf 92       	push	r11
    2986:	cf 92       	push	r12
    2988:	df 92       	push	r13
    298a:	ef 92       	push	r14
    298c:	ff 92       	push	r15
    298e:	0f 93       	push	r16
    2990:	1f 93       	push	r17
    2992:	cf 93       	push	r28
    2994:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    2996:	e0 91 23 05 	lds	r30, 0x0523
    299a:	f0 91 24 05 	lds	r31, 0x0524
    299e:	30 97       	sbiw	r30, 0x00	; 0
    29a0:	09 f4       	brne	.+2      	; 0x29a4 <nrk_add_to_readyQ+0x22>
    29a2:	90 c0       	rjmp	.+288    	; 0x2ac4 <nrk_add_to_readyQ+0x142>
    {
        return;
    }


    NextNode = _head_node;
    29a4:	00 91 3b 06 	lds	r16, 0x063B
    29a8:	10 91 3c 06 	lds	r17, 0x063C
    CurNode = _free_node;

    if (_head_node != NULL)
    29ac:	01 15       	cp	r16, r1
    29ae:	11 05       	cpc	r17, r1
    29b0:	09 f4       	brne	.+2      	; 0x29b4 <nrk_add_to_readyQ+0x32>
    29b2:	4c c0       	rjmp	.+152    	; 0x2a4c <nrk_add_to_readyQ+0xca>
    29b4:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    29b6:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    29b8:	58 2f       	mov	r21, r24
    29ba:	54 03       	mulsu	r21, r20
    29bc:	90 01       	movw	r18, r0
    29be:	11 24       	eor	r1, r1
    29c0:	2b 5d       	subi	r18, 0xDB	; 219
    29c2:	3a 4f       	sbci	r19, 0xFA	; 250
    29c4:	79 01       	movw	r14, r18
    29c6:	9a e0       	ldi	r25, 0x0A	; 10
    29c8:	e9 0e       	add	r14, r25
    29ca:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    29cc:	69 01       	movw	r12, r18
    29ce:	c4 e0       	ldi	r28, 0x04	; 4
    29d0:	cc 0e       	add	r12, r28
    29d2:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    29d4:	59 01       	movw	r10, r18
    29d6:	db e0       	ldi	r29, 0x0B	; 11
    29d8:	ad 0e       	add	r10, r29
    29da:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    29dc:	2c 91       	ld	r18, X
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	42 9f       	mul	r20, r18
    29e2:	b0 01       	movw	r22, r0
    29e4:	43 9f       	mul	r20, r19
    29e6:	70 0d       	add	r23, r0
    29e8:	11 24       	eor	r1, r1
    29ea:	6b 5d       	subi	r22, 0xDB	; 219
    29ec:	7a 4f       	sbci	r23, 0xFA	; 250
    29ee:	eb 01       	movw	r28, r22
    29f0:	9c 81       	ldd	r25, Y+4	; 0x04
    29f2:	99 23       	and	r25, r25
    29f4:	29 f0       	breq	.+10     	; 0x2a00 <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    29f6:	5b 85       	ldd	r21, Y+11	; 0x0b
    29f8:	e7 01       	movw	r28, r14
    29fa:	98 81       	ld	r25, Y
    29fc:	59 17       	cp	r21, r25
    29fe:	40 f1       	brcs	.+80     	; 0x2a50 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    2a00:	e6 01       	movw	r28, r12
    2a02:	98 81       	ld	r25, Y
    2a04:	99 23       	and	r25, r25
    2a06:	69 f0       	breq	.+26     	; 0x2a22 <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    2a08:	42 9f       	mul	r20, r18
    2a0a:	b0 01       	movw	r22, r0
    2a0c:	43 9f       	mul	r20, r19
    2a0e:	70 0d       	add	r23, r0
    2a10:	11 24       	eor	r1, r1
    2a12:	6b 5d       	subi	r22, 0xDB	; 219
    2a14:	7a 4f       	sbci	r23, 0xFA	; 250
    2a16:	eb 01       	movw	r28, r22
    2a18:	5a 85       	ldd	r21, Y+10	; 0x0a
    2a1a:	e5 01       	movw	r28, r10
    2a1c:	98 81       	ld	r25, Y
    2a1e:	59 17       	cp	r21, r25
    2a20:	b8 f0       	brcs	.+46     	; 0x2a50 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    2a22:	42 9f       	mul	r20, r18
    2a24:	b0 01       	movw	r22, r0
    2a26:	43 9f       	mul	r20, r19
    2a28:	70 0d       	add	r23, r0
    2a2a:	11 24       	eor	r1, r1
    2a2c:	9b 01       	movw	r18, r22
    2a2e:	2b 5d       	subi	r18, 0xDB	; 219
    2a30:	3a 4f       	sbci	r19, 0xFA	; 250
    2a32:	e9 01       	movw	r28, r18
    2a34:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a36:	e7 01       	movw	r28, r14
    2a38:	98 81       	ld	r25, Y
    2a3a:	29 17       	cp	r18, r25
    2a3c:	48 f0       	brcs	.+18     	; 0x2a50 <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    2a3e:	13 96       	adiw	r26, 0x03	; 3
    2a40:	0d 90       	ld	r0, X+
    2a42:	bc 91       	ld	r27, X
    2a44:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    2a46:	10 97       	sbiw	r26, 0x00	; 0
    2a48:	49 f6       	brne	.-110    	; 0x29dc <nrk_add_to_readyQ+0x5a>
    2a4a:	02 c0       	rjmp	.+4      	; 0x2a50 <nrk_add_to_readyQ+0xce>
    2a4c:	a0 e0       	ldi	r26, 0x00	; 0
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    2a50:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    2a52:	c3 81       	ldd	r28, Z+3	; 0x03
    2a54:	d4 81       	ldd	r29, Z+4	; 0x04
    2a56:	d0 93 24 05 	sts	0x0524, r29
    2a5a:	c0 93 23 05 	sts	0x0523, r28

    if (NextNode == _head_node)
    2a5e:	a0 17       	cp	r26, r16
    2a60:	b1 07       	cpc	r27, r17
    2a62:	b1 f4       	brne	.+44     	; 0x2a90 <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    2a64:	10 97       	sbiw	r26, 0x00	; 0
    2a66:	49 f0       	breq	.+18     	; 0x2a7a <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    2a68:	b4 83       	std	Z+4, r27	; 0x04
    2a6a:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    2a6c:	12 82       	std	Z+2, r1	; 0x02
    2a6e:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    2a70:	12 96       	adiw	r26, 0x02	; 2
    2a72:	fc 93       	st	X, r31
    2a74:	ee 93       	st	-X, r30
    2a76:	11 97       	sbiw	r26, 0x01	; 1
    2a78:	06 c0       	rjmp	.+12     	; 0x2a86 <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    2a7a:	14 82       	std	Z+4, r1	; 0x04
    2a7c:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    2a7e:	12 82       	std	Z+2, r1	; 0x02
    2a80:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    2a82:	fa 83       	std	Y+2, r31	; 0x02
    2a84:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    2a86:	f0 93 3c 06 	sts	0x063C, r31
    2a8a:	e0 93 3b 06 	sts	0x063B, r30
    2a8e:	1a c0       	rjmp	.+52     	; 0x2ac4 <nrk_add_to_readyQ+0x142>
    2a90:	11 96       	adiw	r26, 0x01	; 1
    2a92:	8d 91       	ld	r24, X+
    2a94:	9c 91       	ld	r25, X
    2a96:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    2a98:	ac 17       	cp	r26, r28
    2a9a:	bd 07       	cpc	r27, r29
    2a9c:	59 f0       	breq	.+22     	; 0x2ab4 <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    2a9e:	92 83       	std	Z+2, r25	; 0x02
    2aa0:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    2aa2:	b4 83       	std	Z+4, r27	; 0x04
    2aa4:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    2aa6:	11 96       	adiw	r26, 0x01	; 1
    2aa8:	cd 91       	ld	r28, X+
    2aaa:	dc 91       	ld	r29, X
    2aac:	12 97       	sbiw	r26, 0x02	; 2
    2aae:	fc 83       	std	Y+4, r31	; 0x04
    2ab0:	eb 83       	std	Y+3, r30	; 0x03
    2ab2:	04 c0       	rjmp	.+8      	; 0x2abc <nrk_add_to_readyQ+0x13a>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    2ab4:	14 82       	std	Z+4, r1	; 0x04
    2ab6:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    2ab8:	92 83       	std	Z+2, r25	; 0x02
    2aba:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    2abc:	12 96       	adiw	r26, 0x02	; 2
    2abe:	fc 93       	st	X, r31
    2ac0:	ee 93       	st	-X, r30
    2ac2:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    2ac4:	df 91       	pop	r29
    2ac6:	cf 91       	pop	r28
    2ac8:	1f 91       	pop	r17
    2aca:	0f 91       	pop	r16
    2acc:	ff 90       	pop	r15
    2ace:	ef 90       	pop	r14
    2ad0:	df 90       	pop	r13
    2ad2:	cf 90       	pop	r12
    2ad4:	bf 90       	pop	r11
    2ad6:	af 90       	pop	r10
    2ad8:	08 95       	ret

00002ada <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    2ada:	cf 93       	push	r28
    2adc:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    2ade:	e0 91 3b 06 	lds	r30, 0x063B
    2ae2:	f0 91 3c 06 	lds	r31, 0x063C
    2ae6:	30 97       	sbiw	r30, 0x00	; 0
    2ae8:	09 f4       	brne	.+2      	; 0x2aec <nrk_rem_from_readyQ+0x12>
    2aea:	44 c0       	rjmp	.+136    	; 0x2b74 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    2aec:	99 27       	eor	r25, r25
    2aee:	87 fd       	sbrc	r24, 7
    2af0:	90 95       	com	r25
    2af2:	20 81       	ld	r18, Z
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	28 17       	cp	r18, r24
    2af8:	39 07       	cpc	r19, r25
    2afa:	81 f4       	brne	.+32     	; 0x2b1c <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    2afc:	a3 81       	ldd	r26, Z+3	; 0x03
    2afe:	b4 81       	ldd	r27, Z+4	; 0x04
    2b00:	b0 93 3c 06 	sts	0x063C, r27
    2b04:	a0 93 3b 06 	sts	0x063B, r26
        _head_node->Prev = NULL;
    2b08:	12 96       	adiw	r26, 0x02	; 2
    2b0a:	1c 92       	st	X, r1
    2b0c:	1e 92       	st	-X, r1
    2b0e:	11 97       	sbiw	r26, 0x01	; 1
    2b10:	18 c0       	rjmp	.+48     	; 0x2b42 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    2b12:	03 80       	ldd	r0, Z+3	; 0x03
    2b14:	f4 81       	ldd	r31, Z+4	; 0x04
    2b16:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    2b18:	30 97       	sbiw	r30, 0x00	; 0
    2b1a:	61 f1       	breq	.+88     	; 0x2b74 <nrk_rem_from_readyQ+0x9a>
    2b1c:	20 81       	ld	r18, Z
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	28 17       	cp	r18, r24
    2b22:	39 07       	cpc	r19, r25
    2b24:	b1 f7       	brne	.-20     	; 0x2b12 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    2b26:	c1 81       	ldd	r28, Z+1	; 0x01
    2b28:	d2 81       	ldd	r29, Z+2	; 0x02
    2b2a:	83 81       	ldd	r24, Z+3	; 0x03
    2b2c:	94 81       	ldd	r25, Z+4	; 0x04
    2b2e:	9c 83       	std	Y+4, r25	; 0x04
    2b30:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    2b32:	a3 81       	ldd	r26, Z+3	; 0x03
    2b34:	b4 81       	ldd	r27, Z+4	; 0x04
    2b36:	10 97       	sbiw	r26, 0x00	; 0
    2b38:	21 f0       	breq	.+8      	; 0x2b42 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    2b3a:	12 96       	adiw	r26, 0x02	; 2
    2b3c:	dc 93       	st	X, r29
    2b3e:	ce 93       	st	-X, r28
    2b40:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    2b42:	a0 91 23 05 	lds	r26, 0x0523
    2b46:	b0 91 24 05 	lds	r27, 0x0524
    2b4a:	10 97       	sbiw	r26, 0x00	; 0
    2b4c:	39 f4       	brne	.+14     	; 0x2b5c <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    2b4e:	f0 93 24 05 	sts	0x0524, r31
    2b52:	e0 93 23 05 	sts	0x0523, r30
        _free_node->Next = NULL;
    2b56:	14 82       	std	Z+4, r1	; 0x04
    2b58:	13 82       	std	Z+3, r1	; 0x03
    2b5a:	0a c0       	rjmp	.+20     	; 0x2b70 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    2b5c:	b4 83       	std	Z+4, r27	; 0x04
    2b5e:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    2b60:	12 96       	adiw	r26, 0x02	; 2
    2b62:	fc 93       	st	X, r31
    2b64:	ee 93       	st	-X, r30
    2b66:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    2b68:	f0 93 24 05 	sts	0x0524, r31
    2b6c:	e0 93 23 05 	sts	0x0523, r30
    }
    _free_node->Prev = NULL;
    2b70:	12 82       	std	Z+2, r1	; 0x02
    2b72:	11 82       	std	Z+1, r1	; 0x01
}
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	08 95       	ret

00002b7a <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    2b7a:	ef 92       	push	r14
    2b7c:	ff 92       	push	r15
    2b7e:	0f 93       	push	r16
    2b80:	1f 93       	push	r17
    2b82:	cf 93       	push	r28
    2b84:	df 93       	push	r29
    2b86:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    2b88:	4b 81       	ldd	r20, Y+3	; 0x03
    2b8a:	5c 81       	ldd	r21, Y+4	; 0x04
    2b8c:	69 81       	ldd	r22, Y+1	; 0x01
    2b8e:	7a 81       	ldd	r23, Y+2	; 0x02
    2b90:	8d 81       	ldd	r24, Y+5	; 0x05
    2b92:	9e 81       	ldd	r25, Y+6	; 0x06
    2b94:	0e 94 c3 22 	call	0x4586	; 0x4586 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    2b98:	2f 81       	ldd	r18, Y+7	; 0x07
    2b9a:	22 23       	and	r18, r18
    2b9c:	71 f0       	breq	.+28     	; 0x2bba <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    2b9e:	4b 81       	ldd	r20, Y+3	; 0x03
    2ba0:	5c 81       	ldd	r21, Y+4	; 0x04
    2ba2:	e1 2c       	mov	r14, r1
    2ba4:	f1 2c       	mov	r15, r1
    2ba6:	00 e0       	ldi	r16, 0x00	; 0
    2ba8:	10 e0       	ldi	r17, 0x00	; 0
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	bc 01       	movw	r22, r24
    2bb0:	ce 01       	movw	r24, r28
    2bb2:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    2bb6:	1f 82       	std	Y+7, r1	; 0x07
    2bb8:	0c c0       	rjmp	.+24     	; 0x2bd2 <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    2bba:	e8 81       	ld	r30, Y
    2bbc:	2b e2       	ldi	r18, 0x2B	; 43
    2bbe:	e2 02       	muls	r30, r18
    2bc0:	f0 01       	movw	r30, r0
    2bc2:	11 24       	eor	r1, r1
    2bc4:	eb 5d       	subi	r30, 0xDB	; 219
    2bc6:	fa 4f       	sbci	r31, 0xFA	; 250
    2bc8:	21 85       	ldd	r18, Z+9	; 0x09
    2bca:	23 30       	cpi	r18, 0x03	; 3
    2bcc:	b9 f4       	brne	.+46     	; 0x2bfc <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    2bce:	91 83       	std	Z+1, r25	; 0x01
    2bd0:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    2bd2:	e8 81       	ld	r30, Y
    2bd4:	8b e2       	ldi	r24, 0x2B	; 43
    2bd6:	e8 02       	muls	r30, r24
    2bd8:	f0 01       	movw	r30, r0
    2bda:	11 24       	eor	r1, r1
    2bdc:	eb 5d       	subi	r30, 0xDB	; 219
    2bde:	fa 4f       	sbci	r31, 0xFA	; 250
    2be0:	85 89       	ldd	r24, Z+21	; 0x15
    2be2:	96 89       	ldd	r25, Z+22	; 0x16
    2be4:	a7 89       	ldd	r26, Z+23	; 0x17
    2be6:	b0 8d       	ldd	r27, Z+24	; 0x18
    2be8:	89 2b       	or	r24, r25
    2bea:	8a 2b       	or	r24, r26
    2bec:	8b 2b       	or	r24, r27
    2bee:	41 f4       	brne	.+16     	; 0x2c00 <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    2bf0:	82 e0       	ldi	r24, 0x02	; 2
    2bf2:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    2bf4:	88 81       	ld	r24, Y
    2bf6:	0e 94 c1 14 	call	0x2982	; 0x2982 <nrk_add_to_readyQ>
    2bfa:	02 c0       	rjmp	.+4      	; 0x2c00 <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    2bfc:	8f ef       	ldi	r24, 0xFF	; 255
    2bfe:	01 c0       	rjmp	.+2      	; 0x2c02 <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    2c00:	81 e0       	ldi	r24, 0x01	; 1
}
    2c02:	df 91       	pop	r29
    2c04:	cf 91       	pop	r28
    2c06:	1f 91       	pop	r17
    2c08:	0f 91       	pop	r16
    2c0a:	ff 90       	pop	r15
    2c0c:	ef 90       	pop	r14
    2c0e:	08 95       	ret

00002c10 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    2c10:	1f 93       	push	r17
    2c12:	cf 93       	push	r28
    2c14:	df 93       	push	r29
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	28 97       	sbiw	r28, 0x08	; 8
    2c1c:	0f b6       	in	r0, 0x3f	; 63
    2c1e:	f8 94       	cli
    2c20:	de bf       	out	0x3e, r29	; 62
    2c22:	0f be       	out	0x3f, r0	; 63
    2c24:	cd bf       	out	0x3d, r28	; 61
    2c26:	29 83       	std	Y+1, r18	; 0x01
    2c28:	3a 83       	std	Y+2, r19	; 0x02
    2c2a:	4b 83       	std	Y+3, r20	; 0x03
    2c2c:	5c 83       	std	Y+4, r21	; 0x04
    2c2e:	6d 83       	std	Y+5, r22	; 0x05
    2c30:	7e 83       	std	Y+6, r23	; 0x06
    2c32:	8f 83       	std	Y+7, r24	; 0x07
    2c34:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    2c36:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    2c3a:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_nrk_os_timer_get>
    2c3e:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    2c40:	ce 01       	movw	r24, r28
    2c42:	01 96       	adiw	r24, 0x01	; 1
    2c44:	0e 94 16 1a 	call	0x342c	; 0x342c <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    2c48:	63 30       	cpi	r22, 0x03	; 3
    2c4a:	71 05       	cpc	r23, r1
    2c4c:	98 f0       	brcs	.+38     	; 0x2c74 <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2c4e:	e0 91 46 06 	lds	r30, 0x0646
    2c52:	f0 91 47 06 	lds	r31, 0x0647
    2c56:	21 2f       	mov	r18, r17
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	62 0f       	add	r22, r18
    2c5c:	73 1f       	adc	r23, r19
    2c5e:	cb 01       	movw	r24, r22
    2c60:	a0 e0       	ldi	r26, 0x00	; 0
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	85 8b       	std	Z+21, r24	; 0x15
    2c66:	96 8b       	std	Z+22, r25	; 0x16
    2c68:	a7 8b       	std	Z+23, r26	; 0x17
    2c6a:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    2c6c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>

    return NRK_OK;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	01 c0       	rjmp	.+2      	; 0x2c76 <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    2c74:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    2c76:	28 96       	adiw	r28, 0x08	; 8
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	de bf       	out	0x3e, r29	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	df 91       	pop	r29
    2c84:	cf 91       	pop	r28
    2c86:	1f 91       	pop	r17
    2c88:	08 95       	ret

00002c8a <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    2c8a:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    2c8e:	e0 91 46 06 	lds	r30, 0x0646
    2c92:	f0 91 47 06 	lds	r31, 0x0647
    2c96:	85 81       	ldd	r24, Z+5	; 0x05
    2c98:	81 11       	cpse	r24, r1
    2c9a:	f7 cf       	rjmp	.-18     	; 0x2c8a <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    2c9c:	08 95       	ret

00002c9e <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    2c9e:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    2ca0:	0e 94 4f 11 	call	0x229e	; 0x229e <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2ca4:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    2ca8:	e0 91 46 06 	lds	r30, 0x0646
    2cac:	f0 91 47 06 	lds	r31, 0x0647
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	92 a7       	std	Z+42, r25	; 0x2a
    2cb6:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    2cb8:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2cba:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_nrk_os_timer_get>
    2cbe:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2cc0:	88 3f       	cpi	r24, 0xF8	; 248
    2cc2:	80 f4       	brcc	.+32     	; 0x2ce4 <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2cc4:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <_nrk_get_next_wakeup>
    2cc8:	2c 2f       	mov	r18, r28
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	2f 5f       	subi	r18, 0xFF	; 255
    2cce:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	28 17       	cp	r18, r24
    2cd4:	39 07       	cpc	r19, r25
    2cd6:	34 f4       	brge	.+12     	; 0x2ce4 <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    2cd8:	82 e0       	ldi	r24, 0x02	; 2
    2cda:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    2cdc:	80 93 56 04 	sts	0x0456, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2ce0:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2ce4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2ce8:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	cf 91       	pop	r28
    2cf0:	08 95       	ret

00002cf2 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    2cf2:	e0 91 46 06 	lds	r30, 0x0646
    2cf6:	f0 91 47 06 	lds	r31, 0x0647
    2cfa:	80 85       	ldd	r24, Z+8	; 0x08
    2cfc:	0e 94 6d 15 	call	0x2ada	; 0x2ada <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    2d00:	e0 91 46 06 	lds	r30, 0x0646
    2d04:	f0 91 47 06 	lds	r31, 0x0647
    2d08:	84 e0       	ldi	r24, 0x04	; 4
    2d0a:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    2d0c:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <nrk_wait_until_next_period>
    return NRK_OK;
}
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	08 95       	ret

00002d14 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    2d14:	cf 93       	push	r28
    2d16:	df 93       	push	r29
    2d18:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    2d1a:	0e 94 4f 11 	call	0x229e	; 0x229e <nrk_stack_check>

    if (p == 0)
    2d1e:	20 97       	sbiw	r28, 0x00	; 0
    2d20:	11 f4       	brne	.+4      	; 0x2d26 <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    2d22:	c1 e0       	ldi	r28, 0x01	; 1
    2d24:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2d26:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2d2a:	e0 91 46 06 	lds	r30, 0x0646
    2d2e:	f0 91 47 06 	lds	r31, 0x0647
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    2d36:	d2 a7       	std	Z+42, r29	; 0x2a
    2d38:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    2d3a:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_nrk_os_timer_get>
    2d3e:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    2d40:	88 3f       	cpi	r24, 0xF8	; 248
    2d42:	80 f4       	brcc	.+32     	; 0x2d64 <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2d44:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <_nrk_get_next_wakeup>
    2d48:	2c 2f       	mov	r18, r28
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	2f 5f       	subi	r18, 0xFF	; 255
    2d4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	28 17       	cp	r18, r24
    2d54:	39 07       	cpc	r19, r25
    2d56:	34 f4       	brge	.+12     	; 0x2d64 <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    2d58:	82 e0       	ldi	r24, 0x02	; 2
    2d5a:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2d5c:	80 93 56 04 	sts	0x0456, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2d60:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2d64:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2d68:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	df 91       	pop	r29
    2d70:	cf 91       	pop	r28
    2d72:	08 95       	ret

00002d74 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    2d74:	ef 92       	push	r14
    2d76:	ff 92       	push	r15
    2d78:	0f 93       	push	r16
    2d7a:	1f 93       	push	r17
    2d7c:	cf 93       	push	r28
    2d7e:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    2d80:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2d84:	e0 91 46 06 	lds	r30, 0x0646
    2d88:	f0 91 47 06 	lds	r31, 0x0647
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2d90:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_nrk_os_timer_get>
    2d94:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    2d96:	e0 91 46 06 	lds	r30, 0x0646
    2d9a:	f0 91 47 06 	lds	r31, 0x0647
    2d9e:	e8 2e       	mov	r14, r24
    2da0:	f1 2c       	mov	r15, r1
    2da2:	c7 01       	movw	r24, r14
    2da4:	80 0f       	add	r24, r16
    2da6:	91 1f       	adc	r25, r17
    2da8:	a0 e0       	ldi	r26, 0x00	; 0
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	85 8b       	std	Z+21, r24	; 0x15
    2dae:	96 8b       	std	Z+22, r25	; 0x16
    2db0:	a7 8b       	std	Z+23, r26	; 0x17
    2db2:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2db4:	c8 3f       	cpi	r28, 0xF8	; 248
    2db6:	78 f4       	brcc	.+30     	; 0x2dd6 <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2db8:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <_nrk_get_next_wakeup>
    2dbc:	9f ef       	ldi	r25, 0xFF	; 255
    2dbe:	e9 1a       	sub	r14, r25
    2dc0:	f9 0a       	sbc	r15, r25
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	e8 16       	cp	r14, r24
    2dc6:	f9 06       	cpc	r15, r25
    2dc8:	34 f4       	brge	.+12     	; 0x2dd6 <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    2dca:	82 e0       	ldi	r24, 0x02	; 2
    2dcc:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2dce:	80 93 56 04 	sts	0x0456, r24
            _nrk_set_next_wakeup (timer);
    2dd2:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2dd6:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2dda:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	cf 91       	pop	r28
    2de2:	1f 91       	pop	r17
    2de4:	0f 91       	pop	r16
    2de6:	ff 90       	pop	r15
    2de8:	ef 90       	pop	r14
    2dea:	08 95       	ret

00002dec <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    2dec:	cf 93       	push	r28
    2dee:	df 93       	push	r29
    2df0:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    2df2:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2df6:	e0 91 46 06 	lds	r30, 0x0646
    2dfa:	f0 91 47 06 	lds	r31, 0x0647
    2dfe:	21 e0       	ldi	r18, 0x01	; 1
    2e00:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    2e02:	ce 01       	movw	r24, r28
    2e04:	a0 e0       	ldi	r26, 0x00	; 0
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	85 8b       	std	Z+21, r24	; 0x15
    2e0a:	96 8b       	std	Z+22, r25	; 0x16
    2e0c:	a7 8b       	std	Z+23, r26	; 0x17
    2e0e:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    2e10:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_nrk_os_timer_get>
    2e14:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2e16:	88 3f       	cpi	r24, 0xF8	; 248
    2e18:	80 f4       	brcc	.+32     	; 0x2e3a <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2e1a:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <_nrk_get_next_wakeup>
    2e1e:	2c 2f       	mov	r18, r28
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	2f 5f       	subi	r18, 0xFF	; 255
    2e24:	3f 4f       	sbci	r19, 0xFF	; 255
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	28 17       	cp	r18, r24
    2e2a:	39 07       	cpc	r19, r25
    2e2c:	34 f4       	brge	.+12     	; 0x2e3a <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    2e2e:	82 e0       	ldi	r24, 0x02	; 2
    2e30:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2e32:	80 93 56 04 	sts	0x0456, r24
            _nrk_set_next_wakeup (timer);
    2e36:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2e3a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2e3e:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	df 91       	pop	r29
    2e46:	cf 91       	pop	r28
    2e48:	08 95       	ret

00002e4a <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    2e4a:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    2e4c:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2e50:	e0 91 46 06 	lds	r30, 0x0646
    2e54:	f0 91 47 06 	lds	r31, 0x0647
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    2e5c:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    2e5e:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_nrk_os_timer_get>
    2e62:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2e64:	88 3f       	cpi	r24, 0xF8	; 248
    2e66:	80 f4       	brcc	.+32     	; 0x2e88 <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2e68:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <_nrk_get_next_wakeup>
    2e6c:	2c 2f       	mov	r18, r28
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	2f 5f       	subi	r18, 0xFF	; 255
    2e72:	3f 4f       	sbci	r19, 0xFF	; 255
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	28 17       	cp	r18, r24
    2e78:	39 07       	cpc	r19, r25
    2e7a:	34 f4       	brge	.+12     	; 0x2e88 <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    2e7c:	82 e0       	ldi	r24, 0x02	; 2
    2e7e:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2e80:	80 93 56 04 	sts	0x0456, r24
            _nrk_set_next_wakeup (timer);
    2e84:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2e88:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2e8c:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	cf 91       	pop	r28
    2e94:	08 95       	ret

00002e96 <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    2e96:	1f 93       	push	r17
    2e98:	cf 93       	push	r28
    2e9a:	df 93       	push	r29
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    2ea0:	28 97       	sbiw	r28, 0x08	; 8
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	f8 94       	cli
    2ea6:	de bf       	out	0x3e, r29	; 62
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	cd bf       	out	0x3d, r28	; 61
    2eac:	29 83       	std	Y+1, r18	; 0x01
    2eae:	3a 83       	std	Y+2, r19	; 0x02
    2eb0:	4b 83       	std	Y+3, r20	; 0x03
    2eb2:	5c 83       	std	Y+4, r21	; 0x04
    2eb4:	6d 83       	std	Y+5, r22	; 0x05
    2eb6:	7e 83       	std	Y+6, r23	; 0x06
    2eb8:	8f 83       	std	Y+7, r24	; 0x07
    2eba:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    2ebc:	0e 94 4f 11 	call	0x229e	; 0x229e <nrk_stack_check>

    nrk_int_disable ();
    2ec0:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2ec4:	e0 91 46 06 	lds	r30, 0x0646
    2ec8:	f0 91 47 06 	lds	r31, 0x0647
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	92 a7       	std	Z+42, r25	; 0x2a
    2ed6:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    2ed8:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_nrk_os_timer_get>
    2edc:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    2ede:	ce 01       	movw	r24, r28
    2ee0:	01 96       	adiw	r24, 0x01	; 1
    2ee2:	0e 94 16 1a 	call	0x342c	; 0x342c <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2ee6:	e0 91 46 06 	lds	r30, 0x0646
    2eea:	f0 91 47 06 	lds	r31, 0x0647
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	81 0f       	add	r24, r17
    2ef4:	91 1d       	adc	r25, r1
    2ef6:	a1 1d       	adc	r26, r1
    2ef8:	b1 1d       	adc	r27, r1
    2efa:	85 8b       	std	Z+21, r24	; 0x15
    2efc:	96 8b       	std	Z+22, r25	; 0x16
    2efe:	a7 8b       	std	Z+23, r26	; 0x17
    2f00:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2f02:	18 3f       	cpi	r17, 0xF8	; 248
    2f04:	80 f4       	brcc	.+32     	; 0x2f26 <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2f06:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <_nrk_get_next_wakeup>
    2f0a:	21 2f       	mov	r18, r17
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	2f 5f       	subi	r18, 0xFF	; 255
    2f10:	3f 4f       	sbci	r19, 0xFF	; 255
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	28 17       	cp	r18, r24
    2f16:	39 07       	cpc	r19, r25
    2f18:	34 f4       	brge	.+12     	; 0x2f26 <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    2f1a:	82 e0       	ldi	r24, 0x02	; 2
    2f1c:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    2f1e:	80 93 56 04 	sts	0x0456, r24
            _nrk_set_next_wakeup (timer);
    2f22:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    2f26:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    2f2a:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	28 96       	adiw	r28, 0x08	; 8
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	df 91       	pop	r29
    2f3e:	cf 91       	pop	r28
    2f40:	1f 91       	pop	r17
    2f42:	08 95       	ret

00002f44 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    2f44:	8f 92       	push	r8
    2f46:	9f 92       	push	r9
    2f48:	af 92       	push	r10
    2f4a:	bf 92       	push	r11
    2f4c:	cf 92       	push	r12
    2f4e:	df 92       	push	r13
    2f50:	ef 92       	push	r14
    2f52:	ff 92       	push	r15
    2f54:	0f 93       	push	r16
    2f56:	1f 93       	push	r17
    2f58:	cf 93       	push	r28
    2f5a:	df 93       	push	r29
    2f5c:	cd b7       	in	r28, 0x3d	; 61
    2f5e:	de b7       	in	r29, 0x3e	; 62
    2f60:	60 97       	sbiw	r28, 0x10	; 16
    2f62:	0f b6       	in	r0, 0x3f	; 63
    2f64:	f8 94       	cli
    2f66:	de bf       	out	0x3e, r29	; 62
    2f68:	0f be       	out	0x3f, r0	; 63
    2f6a:	cd bf       	out	0x3d, r28	; 61
    2f6c:	29 87       	std	Y+9, r18	; 0x09
    2f6e:	3a 87       	std	Y+10, r19	; 0x0a
    2f70:	4b 87       	std	Y+11, r20	; 0x0b
    2f72:	5c 87       	std	Y+12, r21	; 0x0c
    2f74:	6d 87       	std	Y+13, r22	; 0x0d
    2f76:	7e 87       	std	Y+14, r23	; 0x0e
    2f78:	8f 87       	std	Y+15, r24	; 0x0f
    2f7a:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    2f7c:	ce 01       	movw	r24, r28
    2f7e:	01 96       	adiw	r24, 0x01	; 1
    2f80:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    2f84:	89 80       	ldd	r8, Y+1	; 0x01
    2f86:	9a 80       	ldd	r9, Y+2	; 0x02
    2f88:	ab 80       	ldd	r10, Y+3	; 0x03
    2f8a:	bc 80       	ldd	r11, Y+4	; 0x04
    2f8c:	cd 80       	ldd	r12, Y+5	; 0x05
    2f8e:	de 80       	ldd	r13, Y+6	; 0x06
    2f90:	ef 80       	ldd	r14, Y+7	; 0x07
    2f92:	f8 84       	ldd	r15, Y+8	; 0x08
    2f94:	09 85       	ldd	r16, Y+9	; 0x09
    2f96:	1a 85       	ldd	r17, Y+10	; 0x0a
    2f98:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f9a:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f9c:	4d 85       	ldd	r20, Y+13	; 0x0d
    2f9e:	5e 85       	ldd	r21, Y+14	; 0x0e
    2fa0:	6f 85       	ldd	r22, Y+15	; 0x0f
    2fa2:	78 89       	ldd	r23, Y+16	; 0x10
    2fa4:	ce 01       	movw	r24, r28
    2fa6:	09 96       	adiw	r24, 0x09	; 9
    2fa8:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    2fac:	8f 3f       	cpi	r24, 0xFF	; 255
    2fae:	61 f0       	breq	.+24     	; 0x2fc8 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    2fb0:	29 85       	ldd	r18, Y+9	; 0x09
    2fb2:	3a 85       	ldd	r19, Y+10	; 0x0a
    2fb4:	4b 85       	ldd	r20, Y+11	; 0x0b
    2fb6:	5c 85       	ldd	r21, Y+12	; 0x0c
    2fb8:	6d 85       	ldd	r22, Y+13	; 0x0d
    2fba:	7e 85       	ldd	r23, Y+14	; 0x0e
    2fbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fbe:	98 89       	ldd	r25, Y+16	; 0x10
    2fc0:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <nrk_wait>

    return NRK_OK;
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    2fc8:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    2fca:	60 96       	adiw	r28, 0x10	; 16
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	f8 94       	cli
    2fd0:	de bf       	out	0x3e, r29	; 62
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	cd bf       	out	0x3d, r28	; 61
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	1f 91       	pop	r17
    2fdc:	0f 91       	pop	r16
    2fde:	ff 90       	pop	r15
    2fe0:	ef 90       	pop	r14
    2fe2:	df 90       	pop	r13
    2fe4:	cf 90       	pop	r12
    2fe6:	bf 90       	pop	r11
    2fe8:	af 90       	pop	r10
    2fea:	9f 90       	pop	r9
    2fec:	8f 90       	pop	r8
    2fee:	08 95       	ret

00002ff0 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    2ff0:	e0 91 46 06 	lds	r30, 0x0646
    2ff4:	f0 91 47 06 	lds	r31, 0x0647
}
    2ff8:	80 85       	ldd	r24, Z+8	; 0x08
    2ffa:	08 95       	ret

00002ffc <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
    3000:	cf 93       	push	r28
    3002:	df 93       	push	r29
    3004:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    3006:	1c 82       	std	Y+4, r1	; 0x04
    3008:	1d 82       	std	Y+5, r1	; 0x05
    300a:	1e 82       	std	Y+6, r1	; 0x06
    300c:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    300e:	80 91 3d 06 	lds	r24, 0x063D
    3012:	90 91 3e 06 	lds	r25, 0x063E
    3016:	a0 91 3f 06 	lds	r26, 0x063F
    301a:	b0 91 40 06 	lds	r27, 0x0640
    301e:	88 83       	st	Y, r24
    3020:	99 83       	std	Y+1, r25	; 0x01
    3022:	aa 83       	std	Y+2, r26	; 0x02
    3024:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    3026:	80 91 41 06 	lds	r24, 0x0641
    302a:	90 91 42 06 	lds	r25, 0x0642
    302e:	a0 91 43 06 	lds	r26, 0x0643
    3032:	b0 91 44 06 	lds	r27, 0x0644
    3036:	8c 83       	std	Y+4, r24	; 0x04
    3038:	9d 83       	std	Y+5, r25	; 0x05
    303a:	ae 83       	std	Y+6, r26	; 0x06
    303c:	bf 83       	std	Y+7, r27	; 0x07
 
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    303e:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_nrk_os_timer_get>
    3042:	a8 2f       	mov	r26, r24
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	23 eb       	ldi	r18, 0xB3	; 179
    3048:	36 ee       	ldi	r19, 0xE6	; 230
    304a:	4e e0       	ldi	r20, 0x0E	; 14
    304c:	50 e0       	ldi	r21, 0x00	; 0
    304e:	0e 94 bc 24 	call	0x4978	; 0x4978 <__muluhisi3>
    3052:	0c 81       	ldd	r16, Y+4	; 0x04
    3054:	1d 81       	ldd	r17, Y+5	; 0x05
    3056:	2e 81       	ldd	r18, Y+6	; 0x06
    3058:	3f 81       	ldd	r19, Y+7	; 0x07
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	80 0f       	add	r24, r16
    3060:	91 1f       	adc	r25, r17
    3062:	a2 1f       	adc	r26, r18
    3064:	b3 1f       	adc	r27, r19
    3066:	8c 83       	std	Y+4, r24	; 0x04
    3068:	9d 83       	std	Y+5, r25	; 0x05
    306a:	ae 83       	std	Y+6, r26	; 0x06
    306c:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    306e:	8c 81       	ldd	r24, Y+4	; 0x04
    3070:	9d 81       	ldd	r25, Y+5	; 0x05
    3072:	ae 81       	ldd	r26, Y+6	; 0x06
    3074:	bf 81       	ldd	r27, Y+7	; 0x07
    3076:	81 15       	cp	r24, r1
    3078:	2a ec       	ldi	r18, 0xCA	; 202
    307a:	92 07       	cpc	r25, r18
    307c:	2a e9       	ldi	r18, 0x9A	; 154
    307e:	a2 07       	cpc	r26, r18
    3080:	2b e3       	ldi	r18, 0x3B	; 59
    3082:	b2 07       	cpc	r27, r18
    3084:	98 f0       	brcs	.+38     	; 0x30ac <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    3086:	9a 5c       	subi	r25, 0xCA	; 202
    3088:	aa 49       	sbci	r26, 0x9A	; 154
    308a:	bb 43       	sbci	r27, 0x3B	; 59
    308c:	8c 83       	std	Y+4, r24	; 0x04
    308e:	9d 83       	std	Y+5, r25	; 0x05
    3090:	ae 83       	std	Y+6, r26	; 0x06
    3092:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    3094:	88 81       	ld	r24, Y
    3096:	99 81       	ldd	r25, Y+1	; 0x01
    3098:	aa 81       	ldd	r26, Y+2	; 0x02
    309a:	bb 81       	ldd	r27, Y+3	; 0x03
    309c:	01 96       	adiw	r24, 0x01	; 1
    309e:	a1 1d       	adc	r26, r1
    30a0:	b1 1d       	adc	r27, r1
    30a2:	88 83       	st	Y, r24
    30a4:	99 83       	std	Y+1, r25	; 0x01
    30a6:	aa 83       	std	Y+2, r26	; 0x02
    30a8:	bb 83       	std	Y+3, r27	; 0x03
    30aa:	e1 cf       	rjmp	.-62     	; 0x306e <nrk_time_get+0x72>
    }

}
    30ac:	df 91       	pop	r29
    30ae:	cf 91       	pop	r28
    30b0:	1f 91       	pop	r17
    30b2:	0f 91       	pop	r16
    30b4:	08 95       	ret

000030b6 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    30b6:	8f 92       	push	r8
    30b8:	9f 92       	push	r9
    30ba:	af 92       	push	r10
    30bc:	bf 92       	push	r11
    30be:	cf 92       	push	r12
    30c0:	df 92       	push	r13
    30c2:	ef 92       	push	r14
    30c4:	ff 92       	push	r15
    30c6:	0f 93       	push	r16
    30c8:	1f 93       	push	r17
    30ca:	cf 93       	push	r28
    30cc:	df 93       	push	r29
    30ce:	cd b7       	in	r28, 0x3d	; 61
    30d0:	de b7       	in	r29, 0x3e	; 62
    30d2:	60 97       	sbiw	r28, 0x10	; 16
    30d4:	0f b6       	in	r0, 0x3f	; 63
    30d6:	f8 94       	cli
    30d8:	de bf       	out	0x3e, r29	; 62
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	cd bf       	out	0x3d, r28	; 61
    30de:	fc 01       	movw	r30, r24
    30e0:	09 83       	std	Y+1, r16	; 0x01
    30e2:	1a 83       	std	Y+2, r17	; 0x02
    30e4:	2b 83       	std	Y+3, r18	; 0x03
    30e6:	3c 83       	std	Y+4, r19	; 0x04
    30e8:	4d 83       	std	Y+5, r20	; 0x05
    30ea:	5e 83       	std	Y+6, r21	; 0x06
    30ec:	6f 83       	std	Y+7, r22	; 0x07
    30ee:	78 87       	std	Y+8, r23	; 0x08
    30f0:	89 86       	std	Y+9, r8	; 0x09
    30f2:	9a 86       	std	Y+10, r9	; 0x0a
    30f4:	ab 86       	std	Y+11, r10	; 0x0b
    30f6:	bc 86       	std	Y+12, r11	; 0x0c
    30f8:	cd 86       	std	Y+13, r12	; 0x0d
    30fa:	de 86       	std	Y+14, r13	; 0x0e
    30fc:	ef 86       	std	Y+15, r14	; 0x0f
    30fe:	f8 8a       	std	Y+16, r15	; 0x10
    3100:	09 81       	ldd	r16, Y+1	; 0x01
    3102:	1a 81       	ldd	r17, Y+2	; 0x02
    3104:	2b 81       	ldd	r18, Y+3	; 0x03
    3106:	3c 81       	ldd	r19, Y+4	; 0x04
    3108:	4d 81       	ldd	r20, Y+5	; 0x05
    310a:	5e 81       	ldd	r21, Y+6	; 0x06
    310c:	6f 81       	ldd	r22, Y+7	; 0x07
    310e:	78 85       	ldd	r23, Y+8	; 0x08
    3110:	c9 84       	ldd	r12, Y+9	; 0x09
    3112:	da 84       	ldd	r13, Y+10	; 0x0a
    3114:	eb 84       	ldd	r14, Y+11	; 0x0b
    3116:	fc 84       	ldd	r15, Y+12	; 0x0c
    3118:	8d 85       	ldd	r24, Y+13	; 0x0d
    311a:	9e 85       	ldd	r25, Y+14	; 0x0e
    311c:	af 85       	ldd	r26, Y+15	; 0x0f
    311e:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    3120:	0c 15       	cp	r16, r12
    3122:	1d 05       	cpc	r17, r13
    3124:	2e 05       	cpc	r18, r14
    3126:	3f 05       	cpc	r19, r15
    3128:	f0 f1       	brcs	.+124    	; 0x31a6 <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    312a:	c0 16       	cp	r12, r16
    312c:	d1 06       	cpc	r13, r17
    312e:	e2 06       	cpc	r14, r18
    3130:	f3 06       	cpc	r15, r19
    3132:	91 f4       	brne	.+36     	; 0x3158 <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    3134:	48 17       	cp	r20, r24
    3136:	59 07       	cpc	r21, r25
    3138:	6a 07       	cpc	r22, r26
    313a:	7b 07       	cpc	r23, r27
    313c:	a0 f1       	brcs	.+104    	; 0x31a6 <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    313e:	48 1b       	sub	r20, r24
    3140:	59 0b       	sbc	r21, r25
    3142:	6a 0b       	sbc	r22, r26
    3144:	7b 0b       	sbc	r23, r27
    3146:	44 83       	std	Z+4, r20	; 0x04
    3148:	55 83       	std	Z+5, r21	; 0x05
    314a:	66 83       	std	Z+6, r22	; 0x06
    314c:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    314e:	10 82       	st	Z, r1
    3150:	11 82       	std	Z+1, r1	; 0x01
    3152:	12 82       	std	Z+2, r1	; 0x02
    3154:	13 82       	std	Z+3, r1	; 0x03
    3156:	25 c0       	rjmp	.+74     	; 0x31a2 <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    3158:	48 17       	cp	r20, r24
    315a:	59 07       	cpc	r21, r25
    315c:	6a 07       	cpc	r22, r26
    315e:	7b 07       	cpc	r23, r27
    3160:	80 f4       	brcc	.+32     	; 0x3182 <nrk_time_sub+0xcc>
{
	high.secs--;
    3162:	01 50       	subi	r16, 0x01	; 1
    3164:	11 09       	sbc	r17, r1
    3166:	21 09       	sbc	r18, r1
    3168:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    316a:	0c 19       	sub	r16, r12
    316c:	1d 09       	sbc	r17, r13
    316e:	2e 09       	sbc	r18, r14
    3170:	3f 09       	sbc	r19, r15
    3172:	00 83       	st	Z, r16
    3174:	11 83       	std	Z+1, r17	; 0x01
    3176:	22 83       	std	Z+2, r18	; 0x02
    3178:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    317a:	56 53       	subi	r21, 0x36	; 54
    317c:	65 46       	sbci	r22, 0x65	; 101
    317e:	74 4c       	sbci	r23, 0xC4	; 196
    3180:	08 c0       	rjmp	.+16     	; 0x3192 <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    3182:	0c 19       	sub	r16, r12
    3184:	1d 09       	sbc	r17, r13
    3186:	2e 09       	sbc	r18, r14
    3188:	3f 09       	sbc	r19, r15
    318a:	00 83       	st	Z, r16
    318c:	11 83       	std	Z+1, r17	; 0x01
    318e:	22 83       	std	Z+2, r18	; 0x02
    3190:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    3192:	48 1b       	sub	r20, r24
    3194:	59 0b       	sbc	r21, r25
    3196:	6a 0b       	sbc	r22, r26
    3198:	7b 0b       	sbc	r23, r27
    319a:	44 83       	std	Z+4, r20	; 0x04
    319c:	55 83       	std	Z+5, r21	; 0x05
    319e:	66 83       	std	Z+6, r22	; 0x06
    31a0:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	01 c0       	rjmp	.+2      	; 0x31a8 <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    31a6:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    31a8:	60 96       	adiw	r28, 0x10	; 16
    31aa:	0f b6       	in	r0, 0x3f	; 63
    31ac:	f8 94       	cli
    31ae:	de bf       	out	0x3e, r29	; 62
    31b0:	0f be       	out	0x3f, r0	; 63
    31b2:	cd bf       	out	0x3d, r28	; 61
    31b4:	df 91       	pop	r29
    31b6:	cf 91       	pop	r28
    31b8:	1f 91       	pop	r17
    31ba:	0f 91       	pop	r16
    31bc:	ff 90       	pop	r15
    31be:	ef 90       	pop	r14
    31c0:	df 90       	pop	r13
    31c2:	cf 90       	pop	r12
    31c4:	bf 90       	pop	r11
    31c6:	af 90       	pop	r10
    31c8:	9f 90       	pop	r9
    31ca:	8f 90       	pop	r8
    31cc:	08 95       	ret

000031ce <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    31ce:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    31d0:	44 81       	ldd	r20, Z+4	; 0x04
    31d2:	55 81       	ldd	r21, Z+5	; 0x05
    31d4:	66 81       	ldd	r22, Z+6	; 0x06
    31d6:	77 81       	ldd	r23, Z+7	; 0x07
    31d8:	41 15       	cp	r20, r1
    31da:	8a ec       	ldi	r24, 0xCA	; 202
    31dc:	58 07       	cpc	r21, r24
    31de:	8a e9       	ldi	r24, 0x9A	; 154
    31e0:	68 07       	cpc	r22, r24
    31e2:	8b e3       	ldi	r24, 0x3B	; 59
    31e4:	78 07       	cpc	r23, r24
    31e6:	98 f0       	brcs	.+38     	; 0x320e <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    31e8:	5a 5c       	subi	r21, 0xCA	; 202
    31ea:	6a 49       	sbci	r22, 0x9A	; 154
    31ec:	7b 43       	sbci	r23, 0x3B	; 59
    31ee:	44 83       	std	Z+4, r20	; 0x04
    31f0:	55 83       	std	Z+5, r21	; 0x05
    31f2:	66 83       	std	Z+6, r22	; 0x06
    31f4:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    31f6:	80 81       	ld	r24, Z
    31f8:	91 81       	ldd	r25, Z+1	; 0x01
    31fa:	a2 81       	ldd	r26, Z+2	; 0x02
    31fc:	b3 81       	ldd	r27, Z+3	; 0x03
    31fe:	01 96       	adiw	r24, 0x01	; 1
    3200:	a1 1d       	adc	r26, r1
    3202:	b1 1d       	adc	r27, r1
    3204:	80 83       	st	Z, r24
    3206:	91 83       	std	Z+1, r25	; 0x01
    3208:	a2 83       	std	Z+2, r26	; 0x02
    320a:	b3 83       	std	Z+3, r27	; 0x03
    320c:	e1 cf       	rjmp	.-62     	; 0x31d0 <nrk_time_compact_nanos+0x2>
    }
}
    320e:	08 95       	ret

00003210 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    3210:	8f 92       	push	r8
    3212:	9f 92       	push	r9
    3214:	af 92       	push	r10
    3216:	bf 92       	push	r11
    3218:	cf 92       	push	r12
    321a:	df 92       	push	r13
    321c:	ef 92       	push	r14
    321e:	ff 92       	push	r15
    3220:	0f 93       	push	r16
    3222:	1f 93       	push	r17
    3224:	cf 93       	push	r28
    3226:	df 93       	push	r29
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
    322c:	60 97       	sbiw	r28, 0x10	; 16
    322e:	0f b6       	in	r0, 0x3f	; 63
    3230:	f8 94       	cli
    3232:	de bf       	out	0x3e, r29	; 62
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	cd bf       	out	0x3d, r28	; 61
    3238:	09 83       	std	Y+1, r16	; 0x01
    323a:	1a 83       	std	Y+2, r17	; 0x02
    323c:	2b 83       	std	Y+3, r18	; 0x03
    323e:	3c 83       	std	Y+4, r19	; 0x04
    3240:	4d 83       	std	Y+5, r20	; 0x05
    3242:	5e 83       	std	Y+6, r21	; 0x06
    3244:	6f 83       	std	Y+7, r22	; 0x07
    3246:	78 87       	std	Y+8, r23	; 0x08
    3248:	89 86       	std	Y+9, r8	; 0x09
    324a:	9a 86       	std	Y+10, r9	; 0x0a
    324c:	ab 86       	std	Y+11, r10	; 0x0b
    324e:	bc 86       	std	Y+12, r11	; 0x0c
    3250:	cd 86       	std	Y+13, r12	; 0x0d
    3252:	de 86       	std	Y+14, r13	; 0x0e
    3254:	ef 86       	std	Y+15, r14	; 0x0f
    3256:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    3258:	09 85       	ldd	r16, Y+9	; 0x09
    325a:	1a 85       	ldd	r17, Y+10	; 0x0a
    325c:	2b 85       	ldd	r18, Y+11	; 0x0b
    325e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3260:	49 81       	ldd	r20, Y+1	; 0x01
    3262:	5a 81       	ldd	r21, Y+2	; 0x02
    3264:	6b 81       	ldd	r22, Y+3	; 0x03
    3266:	7c 81       	ldd	r23, Y+4	; 0x04
    3268:	40 0f       	add	r20, r16
    326a:	51 1f       	adc	r21, r17
    326c:	62 1f       	adc	r22, r18
    326e:	73 1f       	adc	r23, r19
    3270:	fc 01       	movw	r30, r24
    3272:	40 83       	st	Z, r20
    3274:	51 83       	std	Z+1, r21	; 0x01
    3276:	62 83       	std	Z+2, r22	; 0x02
    3278:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    327a:	0d 85       	ldd	r16, Y+13	; 0x0d
    327c:	1e 85       	ldd	r17, Y+14	; 0x0e
    327e:	2f 85       	ldd	r18, Y+15	; 0x0f
    3280:	38 89       	ldd	r19, Y+16	; 0x10
    3282:	4d 81       	ldd	r20, Y+5	; 0x05
    3284:	5e 81       	ldd	r21, Y+6	; 0x06
    3286:	6f 81       	ldd	r22, Y+7	; 0x07
    3288:	78 85       	ldd	r23, Y+8	; 0x08
    328a:	40 0f       	add	r20, r16
    328c:	51 1f       	adc	r21, r17
    328e:	62 1f       	adc	r22, r18
    3290:	73 1f       	adc	r23, r19
    3292:	44 83       	std	Z+4, r20	; 0x04
    3294:	55 83       	std	Z+5, r21	; 0x05
    3296:	66 83       	std	Z+6, r22	; 0x06
    3298:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    329a:	0e 94 e7 18 	call	0x31ce	; 0x31ce <nrk_time_compact_nanos>
return NRK_OK;
}
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	60 96       	adiw	r28, 0x10	; 16
    32a2:	0f b6       	in	r0, 0x3f	; 63
    32a4:	f8 94       	cli
    32a6:	de bf       	out	0x3e, r29	; 62
    32a8:	0f be       	out	0x3f, r0	; 63
    32aa:	cd bf       	out	0x3d, r28	; 61
    32ac:	df 91       	pop	r29
    32ae:	cf 91       	pop	r28
    32b0:	1f 91       	pop	r17
    32b2:	0f 91       	pop	r16
    32b4:	ff 90       	pop	r15
    32b6:	ef 90       	pop	r14
    32b8:	df 90       	pop	r13
    32ba:	cf 90       	pop	r12
    32bc:	bf 90       	pop	r11
    32be:	af 90       	pop	r10
    32c0:	9f 90       	pop	r9
    32c2:	8f 90       	pop	r8
    32c4:	08 95       	ret

000032c6 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    32c6:	ed e3       	ldi	r30, 0x3D	; 61
    32c8:	f6 e0       	ldi	r31, 0x06	; 6
    32ca:	60 83       	st	Z, r22
    32cc:	71 83       	std	Z+1, r23	; 0x01
    32ce:	82 83       	std	Z+2, r24	; 0x02
    32d0:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    32d2:	24 83       	std	Z+4, r18	; 0x04
    32d4:	35 83       	std	Z+5, r19	; 0x05
    32d6:	46 83       	std	Z+6, r20	; 0x06
    32d8:	57 83       	std	Z+7, r21	; 0x07
    32da:	08 95       	ret

000032dc <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    32dc:	2f 92       	push	r2
    32de:	3f 92       	push	r3
    32e0:	4f 92       	push	r4
    32e2:	5f 92       	push	r5
    32e4:	6f 92       	push	r6
    32e6:	7f 92       	push	r7
    32e8:	8f 92       	push	r8
    32ea:	9f 92       	push	r9
    32ec:	af 92       	push	r10
    32ee:	bf 92       	push	r11
    32f0:	cf 92       	push	r12
    32f2:	df 92       	push	r13
    32f4:	ef 92       	push	r14
    32f6:	ff 92       	push	r15
    32f8:	0f 93       	push	r16
    32fa:	1f 93       	push	r17
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    32fc:	fc 01       	movw	r30, r24
    32fe:	c0 80       	ld	r12, Z
    3300:	d1 80       	ldd	r13, Z+1	; 0x01
    3302:	e2 80       	ldd	r14, Z+2	; 0x02
    3304:	f3 80       	ldd	r15, Z+3	; 0x03
    3306:	64 81       	ldd	r22, Z+4	; 0x04
    3308:	75 81       	ldd	r23, Z+5	; 0x05
    330a:	86 81       	ldd	r24, Z+6	; 0x06
    330c:	97 81       	ldd	r25, Z+7	; 0x07
    330e:	c1 14       	cp	r12, r1
    3310:	d1 04       	cpc	r13, r1
    3312:	e1 04       	cpc	r14, r1
    3314:	f1 04       	cpc	r15, r1
    3316:	c1 f1       	breq	.+112    	; 0x3388 <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3318:	f2 e4       	ldi	r31, 0x42	; 66
    331a:	cf 16       	cp	r12, r31
    331c:	d1 04       	cpc	r13, r1
    331e:	e1 04       	cpc	r14, r1
    3320:	f1 04       	cpc	r15, r1
    3322:	d0 f5       	brcc	.+116    	; 0x3398 <_nrk_time_to_ticks+0xbc>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    3324:	1b 01       	movw	r2, r22
    3326:	2c 01       	movw	r4, r24
    3328:	61 2c       	mov	r6, r1
    332a:	71 2c       	mov	r7, r1
    332c:	43 01       	movw	r8, r6
    332e:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3330:	8e 2f       	mov	r24, r30
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	a0 e0       	ldi	r26, 0x00	; 0
    3336:	b0 e0       	ldi	r27, 0x00	; 0
    3338:	8c 15       	cp	r24, r12
    333a:	9d 05       	cpc	r25, r13
    333c:	ae 05       	cpc	r26, r14
    333e:	bf 05       	cpc	r27, r15
    3340:	88 f4       	brcc	.+34     	; 0x3364 <_nrk_time_to_ticks+0x88>
    3342:	91 01       	movw	r18, r2
    3344:	a2 01       	movw	r20, r4
    3346:	b3 01       	movw	r22, r6
    3348:	c4 01       	movw	r24, r8
    334a:	36 53       	subi	r19, 0x36	; 54
    334c:	45 46       	sbci	r20, 0x65	; 101
    334e:	54 4c       	sbci	r21, 0xC4	; 196
    3350:	6f 4f       	sbci	r22, 0xFF	; 255
    3352:	7f 4f       	sbci	r23, 0xFF	; 255
    3354:	8f 4f       	sbci	r24, 0xFF	; 255
    3356:	9f 4f       	sbci	r25, 0xFF	; 255
    3358:	19 01       	movw	r2, r18
    335a:	2a 01       	movw	r4, r20
    335c:	3b 01       	movw	r6, r22
    335e:	4c 01       	movw	r8, r24
    3360:	ef 5f       	subi	r30, 0xFF	; 255
    3362:	e6 cf       	rjmp	.-52     	; 0x3330 <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3364:	83 eb       	ldi	r24, 0xB3	; 179
    3366:	a8 2e       	mov	r10, r24
    3368:	96 ee       	ldi	r25, 0xE6	; 230
    336a:	b9 2e       	mov	r11, r25
    336c:	2e e0       	ldi	r18, 0x0E	; 14
    336e:	c2 2e       	mov	r12, r18
    3370:	d1 2c       	mov	r13, r1
    3372:	e1 2c       	mov	r14, r1
    3374:	f1 2c       	mov	r15, r1
    3376:	00 e0       	ldi	r16, 0x00	; 0
    3378:	10 e0       	ldi	r17, 0x00	; 0
    337a:	91 01       	movw	r18, r2
    337c:	a2 01       	movw	r20, r4
    337e:	b3 01       	movw	r22, r6
    3380:	c4 01       	movw	r24, r8
    3382:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <__udivdi3>
    3386:	06 c0       	rjmp	.+12     	; 0x3394 <_nrk_time_to_ticks+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    3388:	23 eb       	ldi	r18, 0xB3	; 179
    338a:	36 ee       	ldi	r19, 0xE6	; 230
    338c:	4e e0       	ldi	r20, 0x0E	; 14
    338e:	50 e0       	ldi	r21, 0x00	; 0
    3390:	0e 94 d7 24 	call	0x49ae	; 0x49ae <__udivmodsi4>
    3394:	c9 01       	movw	r24, r18
    3396:	02 c0       	rjmp	.+4      	; 0x339c <_nrk_time_to_ticks+0xc0>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    339c:	1f 91       	pop	r17
    339e:	0f 91       	pop	r16
    33a0:	ff 90       	pop	r15
    33a2:	ef 90       	pop	r14
    33a4:	df 90       	pop	r13
    33a6:	cf 90       	pop	r12
    33a8:	bf 90       	pop	r11
    33aa:	af 90       	pop	r10
    33ac:	9f 90       	pop	r9
    33ae:	8f 90       	pop	r8
    33b0:	7f 90       	pop	r7
    33b2:	6f 90       	pop	r6
    33b4:	5f 90       	pop	r5
    33b6:	4f 90       	pop	r4
    33b8:	3f 90       	pop	r3
    33ba:	2f 90       	pop	r2
    33bc:	08 95       	ret

000033be <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    33be:	cf 92       	push	r12
    33c0:	df 92       	push	r13
    33c2:	ef 92       	push	r14
    33c4:	ff 92       	push	r15
    33c6:	cf 93       	push	r28
    33c8:	df 93       	push	r29
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
    33ce:	28 97       	sbiw	r28, 0x08	; 8
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	de bf       	out	0x3e, r29	; 62
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    33da:	6b 01       	movw	r12, r22
    33dc:	7c 01       	movw	r14, r24
    33de:	2a e0       	ldi	r18, 0x0A	; 10
    33e0:	f6 94       	lsr	r15
    33e2:	e7 94       	ror	r14
    33e4:	d7 94       	ror	r13
    33e6:	c7 94       	ror	r12
    33e8:	2a 95       	dec	r18
    33ea:	d1 f7       	brne	.-12     	; 0x33e0 <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    33ec:	c9 82       	std	Y+1, r12	; 0x01
    33ee:	da 82       	std	Y+2, r13	; 0x02
    33f0:	eb 82       	std	Y+3, r14	; 0x03
    33f2:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    33f4:	9b 01       	movw	r18, r22
    33f6:	ac 01       	movw	r20, r24
    33f8:	33 70       	andi	r19, 0x03	; 3
    33fa:	44 27       	eor	r20, r20
    33fc:	55 27       	eor	r21, r21
    33fe:	63 eb       	ldi	r22, 0xB3	; 179
    3400:	76 ee       	ldi	r23, 0xE6	; 230
    3402:	8e e0       	ldi	r24, 0x0E	; 14
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	0e 94 c7 24 	call	0x498e	; 0x498e <__mulsi3>

return t;
    340a:	2c 2d       	mov	r18, r12
    340c:	3a 81       	ldd	r19, Y+2	; 0x02
    340e:	4b 81       	ldd	r20, Y+3	; 0x03
    3410:	5c 81       	ldd	r21, Y+4	; 0x04
}
    3412:	28 96       	adiw	r28, 0x08	; 8
    3414:	0f b6       	in	r0, 0x3f	; 63
    3416:	f8 94       	cli
    3418:	de bf       	out	0x3e, r29	; 62
    341a:	0f be       	out	0x3f, r0	; 63
    341c:	cd bf       	out	0x3d, r28	; 61
    341e:	df 91       	pop	r29
    3420:	cf 91       	pop	r28
    3422:	ff 90       	pop	r15
    3424:	ef 90       	pop	r14
    3426:	df 90       	pop	r13
    3428:	cf 90       	pop	r12
    342a:	08 95       	ret

0000342c <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    342c:	2f 92       	push	r2
    342e:	3f 92       	push	r3
    3430:	4f 92       	push	r4
    3432:	5f 92       	push	r5
    3434:	6f 92       	push	r6
    3436:	7f 92       	push	r7
    3438:	8f 92       	push	r8
    343a:	9f 92       	push	r9
    343c:	af 92       	push	r10
    343e:	bf 92       	push	r11
    3440:	cf 92       	push	r12
    3442:	df 92       	push	r13
    3444:	ef 92       	push	r14
    3446:	ff 92       	push	r15
    3448:	0f 93       	push	r16
    344a:	1f 93       	push	r17
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    344c:	fc 01       	movw	r30, r24
    344e:	c0 80       	ld	r12, Z
    3450:	d1 80       	ldd	r13, Z+1	; 0x01
    3452:	e2 80       	ldd	r14, Z+2	; 0x02
    3454:	f3 80       	ldd	r15, Z+3	; 0x03
    3456:	64 81       	ldd	r22, Z+4	; 0x04
    3458:	75 81       	ldd	r23, Z+5	; 0x05
    345a:	86 81       	ldd	r24, Z+6	; 0x06
    345c:	97 81       	ldd	r25, Z+7	; 0x07
    345e:	c1 14       	cp	r12, r1
    3460:	d1 04       	cpc	r13, r1
    3462:	e1 04       	cpc	r14, r1
    3464:	f1 04       	cpc	r15, r1
    3466:	99 f1       	breq	.+102    	; 0x34ce <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    3468:	1b 01       	movw	r2, r22
    346a:	2c 01       	movw	r4, r24
    346c:	61 2c       	mov	r6, r1
    346e:	71 2c       	mov	r7, r1
    3470:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3472:	e0 e0       	ldi	r30, 0x00	; 0
    3474:	8e 2f       	mov	r24, r30
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	a0 e0       	ldi	r26, 0x00	; 0
    347a:	b0 e0       	ldi	r27, 0x00	; 0
    347c:	8c 15       	cp	r24, r12
    347e:	9d 05       	cpc	r25, r13
    3480:	ae 05       	cpc	r26, r14
    3482:	bf 05       	cpc	r27, r15
    3484:	88 f4       	brcc	.+34     	; 0x34a8 <_nrk_time_to_ticks_long+0x7c>
    3486:	91 01       	movw	r18, r2
    3488:	a2 01       	movw	r20, r4
    348a:	b3 01       	movw	r22, r6
    348c:	c4 01       	movw	r24, r8
    348e:	36 53       	subi	r19, 0x36	; 54
    3490:	45 46       	sbci	r20, 0x65	; 101
    3492:	54 4c       	sbci	r21, 0xC4	; 196
    3494:	6f 4f       	sbci	r22, 0xFF	; 255
    3496:	7f 4f       	sbci	r23, 0xFF	; 255
    3498:	8f 4f       	sbci	r24, 0xFF	; 255
    349a:	9f 4f       	sbci	r25, 0xFF	; 255
    349c:	19 01       	movw	r2, r18
    349e:	2a 01       	movw	r4, r20
    34a0:	3b 01       	movw	r6, r22
    34a2:	4c 01       	movw	r8, r24
    34a4:	ef 5f       	subi	r30, 0xFF	; 255
    34a6:	e6 cf       	rjmp	.-52     	; 0x3474 <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    34a8:	83 eb       	ldi	r24, 0xB3	; 179
    34aa:	a8 2e       	mov	r10, r24
    34ac:	96 ee       	ldi	r25, 0xE6	; 230
    34ae:	b9 2e       	mov	r11, r25
    34b0:	2e e0       	ldi	r18, 0x0E	; 14
    34b2:	c2 2e       	mov	r12, r18
    34b4:	d1 2c       	mov	r13, r1
    34b6:	e1 2c       	mov	r14, r1
    34b8:	f1 2c       	mov	r15, r1
    34ba:	00 e0       	ldi	r16, 0x00	; 0
    34bc:	10 e0       	ldi	r17, 0x00	; 0
    34be:	91 01       	movw	r18, r2
    34c0:	a2 01       	movw	r20, r4
    34c2:	b3 01       	movw	r22, r6
    34c4:	c4 01       	movw	r24, r8
    34c6:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <__udivdi3>
    34ca:	ca 01       	movw	r24, r20
    34cc:	07 c0       	rjmp	.+14     	; 0x34dc <_nrk_time_to_ticks_long+0xb0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    34ce:	23 eb       	ldi	r18, 0xB3	; 179
    34d0:	36 ee       	ldi	r19, 0xE6	; 230
    34d2:	4e e0       	ldi	r20, 0x0E	; 14
    34d4:	50 e0       	ldi	r21, 0x00	; 0
    34d6:	0e 94 d7 24 	call	0x49ae	; 0x49ae <__udivmodsi4>
    34da:	ca 01       	movw	r24, r20
}
return ticks;
}
    34dc:	b9 01       	movw	r22, r18
    34de:	1f 91       	pop	r17
    34e0:	0f 91       	pop	r16
    34e2:	ff 90       	pop	r15
    34e4:	ef 90       	pop	r14
    34e6:	df 90       	pop	r13
    34e8:	cf 90       	pop	r12
    34ea:	bf 90       	pop	r11
    34ec:	af 90       	pop	r10
    34ee:	9f 90       	pop	r9
    34f0:	8f 90       	pop	r8
    34f2:	7f 90       	pop	r7
    34f4:	6f 90       	pop	r6
    34f6:	5f 90       	pop	r5
    34f8:	4f 90       	pop	r4
    34fa:	3f 90       	pop	r3
    34fc:	2f 90       	pop	r2
    34fe:	08 95       	ret

00003500 <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    3500:	c2 e0       	ldi	r28, 0x02	; 2
{
  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    3502:	d1 e0       	ldi	r29, 0x01	; 1
{
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{
  nrk_stack_check(); 
    3504:	0e 94 4f 11 	call	0x229e	; 0x229e <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    3508:	0e 94 87 1f 	call	0x3f0e	; 0x3f0e <_nrk_get_next_wakeup>
    350c:	84 30       	cpi	r24, 0x04	; 4
    350e:	28 f4       	brcc	.+10     	; 0x351a <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    3510:	d0 93 3a 06 	sts	0x063A, r29
	    nrk_idle();
    3514:	0e 94 96 22 	call	0x452c	; 0x452c <nrk_idle>
    3518:	08 c0       	rjmp	.+16     	; 0x352a <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    351a:	8a e0       	ldi	r24, 0x0A	; 10
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    3522:	c0 93 3a 06 	sts	0x063A, r28
	    nrk_sleep();
    3526:	0e 94 8a 22 	call	0x4514	; 0x4514 <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    352a:	80 91 64 04 	lds	r24, 0x0464
    352e:	85 35       	cpi	r24, 0x55	; 85
    3530:	19 f0       	breq	.+6      	; 0x3538 <nrk_idle_task+0x38>
    3532:	88 e0       	ldi	r24, 0x08	; 8
    3534:	0e 94 8b 10 	call	0x2116	; 0x2116 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3538:	80 91 fe 3f 	lds	r24, 0x3FFE
    353c:	85 35       	cpi	r24, 0x55	; 85
    353e:	11 f3       	breq	.-60     	; 0x3504 <nrk_idle_task+0x4>
    3540:	88 e0       	ldi	r24, 0x08	; 8
    3542:	0e 94 8b 10 	call	0x2116	; 0x2116 <nrk_error_add>
    3546:	de cf       	rjmp	.-68     	; 0x3504 <nrk_idle_task+0x4>

00003548 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    3548:	2f 92       	push	r2
    354a:	3f 92       	push	r3
    354c:	4f 92       	push	r4
    354e:	5f 92       	push	r5
    3550:	6f 92       	push	r6
    3552:	7f 92       	push	r7
    3554:	8f 92       	push	r8
    3556:	9f 92       	push	r9
    3558:	af 92       	push	r10
    355a:	bf 92       	push	r11
    355c:	cf 92       	push	r12
    355e:	df 92       	push	r13
    3560:	ef 92       	push	r14
    3562:	ff 92       	push	r15
    3564:	0f 93       	push	r16
    3566:	1f 93       	push	r17
    3568:	cf 93       	push	r28
    356a:	df 93       	push	r29
    356c:	00 d0       	rcall	.+0      	; 0x356e <_nrk_scheduler+0x26>
    356e:	00 d0       	rcall	.+0      	; 0x3570 <_nrk_scheduler+0x28>
    3570:	1f 92       	push	r1
    3572:	cd b7       	in	r28, 0x3d	; 61
    3574:	de b7       	in	r29, 0x3e	; 62

    //nrk_int_enable();   // this should be removed...  Not needed


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_precision_os_timer_reset();
    3576:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <_nrk_precision_os_timer_reset>
    _nrk_high_speed_timer_reset();
    357a:	0e 94 d9 1e 	call	0x3db2	; 0x3db2 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    357e:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_nrk_high_speed_timer_get>
    3582:	9b 83       	std	Y+3, r25	; 0x03
    3584:	8a 83       	std	Y+2, r24	; 0x02
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    3586:	8a ef       	ldi	r24, 0xFA	; 250
    3588:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    358c:	a0 91 56 04 	lds	r26, 0x0456
    3590:	b0 e0       	ldi	r27, 0x00	; 0
    3592:	23 eb       	ldi	r18, 0xB3	; 179
    3594:	36 ee       	ldi	r19, 0xE6	; 230
    3596:	4e e0       	ldi	r20, 0x0E	; 14
    3598:	50 e0       	ldi	r21, 0x00	; 0
    359a:	0e 94 bc 24 	call	0x4978	; 0x4978 <__muluhisi3>
    359e:	00 91 41 06 	lds	r16, 0x0641
    35a2:	10 91 42 06 	lds	r17, 0x0642
    35a6:	20 91 43 06 	lds	r18, 0x0643
    35aa:	30 91 44 06 	lds	r19, 0x0644
    35ae:	6b 01       	movw	r12, r22
    35b0:	7c 01       	movw	r14, r24
    35b2:	c0 0e       	add	r12, r16
    35b4:	d1 1e       	adc	r13, r17
    35b6:	e2 1e       	adc	r14, r18
    35b8:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    35ba:	c7 01       	movw	r24, r14
    35bc:	b6 01       	movw	r22, r12
    35be:	23 eb       	ldi	r18, 0xB3	; 179
    35c0:	36 ee       	ldi	r19, 0xE6	; 230
    35c2:	4e e0       	ldi	r20, 0x0E	; 14
    35c4:	50 e0       	ldi	r21, 0x00	; 0
    35c6:	0e 94 d7 24 	call	0x49ae	; 0x49ae <__udivmodsi4>
    35ca:	26 01       	movw	r4, r12
    35cc:	37 01       	movw	r6, r14
    35ce:	46 1a       	sub	r4, r22
    35d0:	57 0a       	sbc	r5, r23
    35d2:	68 0a       	sbc	r6, r24
    35d4:	79 0a       	sbc	r7, r25
    35d6:	d3 01       	movw	r26, r6
    35d8:	c2 01       	movw	r24, r4
    35da:	00 91 3d 06 	lds	r16, 0x063D
    35de:	10 91 3e 06 	lds	r17, 0x063E
    35e2:	20 91 3f 06 	lds	r18, 0x063F
    35e6:	30 91 40 06 	lds	r19, 0x0640

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    35ea:	43 eb       	ldi	r20, 0xB3	; 179
    35ec:	84 2e       	mov	r8, r20
    35ee:	46 ee       	ldi	r20, 0xE6	; 230
    35f0:	94 2e       	mov	r9, r20
    35f2:	4e e0       	ldi	r20, 0x0E	; 14
    35f4:	a4 2e       	mov	r10, r20
    35f6:	b1 2c       	mov	r11, r1
    35f8:	68 01       	movw	r12, r16
    35fa:	79 01       	movw	r14, r18
    35fc:	4f ef       	ldi	r20, 0xFF	; 255
    35fe:	c4 1a       	sub	r12, r20
    3600:	d4 0a       	sbc	r13, r20
    3602:	e4 0a       	sbc	r14, r20
    3604:	f4 0a       	sbc	r15, r20
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    3606:	81 15       	cp	r24, r1
    3608:	5a ec       	ldi	r21, 0xCA	; 202
    360a:	95 07       	cpc	r25, r21
    360c:	5a e9       	ldi	r21, 0x9A	; 154
    360e:	a5 07       	cpc	r26, r21
    3610:	5b e3       	ldi	r21, 0x3B	; 59
    3612:	b5 07       	cpc	r27, r21
    3614:	c8 f0       	brcs	.+50     	; 0x3648 <_nrk_scheduler+0x100>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    3616:	2c 01       	movw	r4, r24
    3618:	3d 01       	movw	r6, r26
    361a:	2a ec       	ldi	r18, 0xCA	; 202
    361c:	52 1a       	sub	r5, r18
    361e:	2a e9       	ldi	r18, 0x9A	; 154
    3620:	62 0a       	sbc	r6, r18
    3622:	2b e3       	ldi	r18, 0x3B	; 59
    3624:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3626:	c3 01       	movw	r24, r6
    3628:	b2 01       	movw	r22, r4
    362a:	a5 01       	movw	r20, r10
    362c:	94 01       	movw	r18, r8
    362e:	0e 94 d7 24 	call	0x49ae	; 0x49ae <__udivmodsi4>
    3632:	a3 01       	movw	r20, r6
    3634:	92 01       	movw	r18, r4
    3636:	26 1b       	sub	r18, r22
    3638:	37 0b       	sbc	r19, r23
    363a:	48 0b       	sbc	r20, r24
    363c:	59 0b       	sbc	r21, r25
    363e:	da 01       	movw	r26, r20
    3640:	c9 01       	movw	r24, r18
    3642:	97 01       	movw	r18, r14
    3644:	86 01       	movw	r16, r12
    3646:	d8 cf       	rjmp	.-80     	; 0x35f8 <_nrk_scheduler+0xb0>
    3648:	80 93 41 06 	sts	0x0641, r24
    364c:	90 93 42 06 	sts	0x0642, r25
    3650:	a0 93 43 06 	sts	0x0643, r26
    3654:	b0 93 44 06 	sts	0x0644, r27
    3658:	00 93 3d 06 	sts	0x063D, r16
    365c:	10 93 3e 06 	sts	0x063E, r17
    3660:	20 93 3f 06 	sts	0x063F, r18
    3664:	30 93 40 06 	sts	0x0640, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    3668:	e0 91 46 06 	lds	r30, 0x0646
    366c:	f0 91 47 06 	lds	r31, 0x0647
    3670:	85 81       	ldd	r24, Z+5	; 0x05
    3672:	88 23       	and	r24, r24
    3674:	39 f1       	breq	.+78     	; 0x36c4 <_nrk_scheduler+0x17c>
    3676:	81 85       	ldd	r24, Z+9	; 0x09
    3678:	84 30       	cpi	r24, 0x04	; 4
    367a:	21 f1       	breq	.+72     	; 0x36c4 <_nrk_scheduler+0x17c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    367c:	87 81       	ldd	r24, Z+7	; 0x07
    367e:	82 30       	cpi	r24, 0x02	; 2
    3680:	29 f0       	breq	.+10     	; 0x368c <_nrk_scheduler+0x144>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    3682:	88 23       	and	r24, r24
    3684:	41 f0       	breq	.+16     	; 0x3696 <_nrk_scheduler+0x14e>
    3686:	86 81       	ldd	r24, Z+6	; 0x06
    3688:	81 11       	cpse	r24, r1
    368a:	02 c0       	rjmp	.+4      	; 0x3690 <_nrk_scheduler+0x148>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    368c:	85 e0       	ldi	r24, 0x05	; 5
    368e:	01 c0       	rjmp	.+2      	; 0x3692 <_nrk_scheduler+0x14a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3690:	83 e0       	ldi	r24, 0x03	; 3
    3692:	81 87       	std	Z+9, r24	; 0x09
    3694:	14 c0       	rjmp	.+40     	; 0x36be <_nrk_scheduler+0x176>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3696:	83 e0       	ldi	r24, 0x03	; 3
    3698:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    369a:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    369c:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    369e:	85 89       	ldd	r24, Z+21	; 0x15
    36a0:	96 89       	ldd	r25, Z+22	; 0x16
    36a2:	a7 89       	ldd	r26, Z+23	; 0x17
    36a4:	b0 8d       	ldd	r27, Z+24	; 0x18
    36a6:	89 2b       	or	r24, r25
    36a8:	8a 2b       	or	r24, r26
    36aa:	8b 2b       	or	r24, r27
    36ac:	41 f4       	brne	.+16     	; 0x36be <_nrk_scheduler+0x176>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    36ae:	81 8d       	ldd	r24, Z+25	; 0x19
    36b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    36b2:	a3 8d       	ldd	r26, Z+27	; 0x1b
    36b4:	b4 8d       	ldd	r27, Z+28	; 0x1c
    36b6:	85 8b       	std	Z+21, r24	; 0x15
    36b8:	96 8b       	std	Z+22, r25	; 0x16
    36ba:	a7 8b       	std	Z+23, r26	; 0x17
    36bc:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    36be:	80 85       	ldd	r24, Z+8	; 0x08
    36c0:	0e 94 6d 15 	call	0x2ada	; 0x2ada <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    36c4:	e0 91 46 06 	lds	r30, 0x0646
    36c8:	f0 91 47 06 	lds	r31, 0x0647
    36cc:	85 a1       	ldd	r24, Z+37	; 0x25
    36ce:	96 a1       	ldd	r25, Z+38	; 0x26
    36d0:	a7 a1       	ldd	r26, Z+39	; 0x27
    36d2:	b0 a5       	ldd	r27, Z+40	; 0x28
    36d4:	89 2b       	or	r24, r25
    36d6:	8a 2b       	or	r24, r26
    36d8:	8b 2b       	or	r24, r27
    36da:	09 f4       	brne	.+2      	; 0x36de <_nrk_scheduler+0x196>
    36dc:	44 c0       	rjmp	.+136    	; 0x3766 <_nrk_scheduler+0x21e>
    36de:	20 85       	ldd	r18, Z+8	; 0x08
    36e0:	22 23       	and	r18, r18
    36e2:	09 f4       	brne	.+2      	; 0x36e6 <_nrk_scheduler+0x19e>
    36e4:	40 c0       	rjmp	.+128    	; 0x3766 <_nrk_scheduler+0x21e>
    36e6:	81 85       	ldd	r24, Z+9	; 0x09
    36e8:	84 30       	cpi	r24, 0x04	; 4
    36ea:	e9 f1       	breq	.+122    	; 0x3766 <_nrk_scheduler+0x21e>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    36ec:	85 8d       	ldd	r24, Z+29	; 0x1d
    36ee:	96 8d       	ldd	r25, Z+30	; 0x1e
    36f0:	a7 8d       	ldd	r26, Z+31	; 0x1f
    36f2:	b0 a1       	ldd	r27, Z+32	; 0x20
    36f4:	40 91 56 04 	lds	r20, 0x0456
    36f8:	50 e0       	ldi	r21, 0x00	; 0
    36fa:	60 e0       	ldi	r22, 0x00	; 0
    36fc:	70 e0       	ldi	r23, 0x00	; 0
    36fe:	84 17       	cp	r24, r20
    3700:	95 07       	cpc	r25, r21
    3702:	a6 07       	cpc	r26, r22
    3704:	b7 07       	cpc	r27, r23
    3706:	68 f4       	brcc	.+26     	; 0x3722 <_nrk_scheduler+0x1da>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    3708:	62 2f       	mov	r22, r18
    370a:	82 e0       	ldi	r24, 0x02	; 2
    370c:	0e 94 99 10 	call	0x2132	; 0x2132 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    3710:	e0 91 46 06 	lds	r30, 0x0646
    3714:	f0 91 47 06 	lds	r31, 0x0647
    3718:	15 8e       	std	Z+29, r1	; 0x1d
    371a:	16 8e       	std	Z+30, r1	; 0x1e
    371c:	17 8e       	std	Z+31, r1	; 0x1f
    371e:	10 a2       	std	Z+32, r1	; 0x20
    3720:	08 c0       	rjmp	.+16     	; 0x3732 <_nrk_scheduler+0x1ea>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    3722:	84 1b       	sub	r24, r20
    3724:	95 0b       	sbc	r25, r21
    3726:	a6 0b       	sbc	r26, r22
    3728:	b7 0b       	sbc	r27, r23
    372a:	85 8f       	std	Z+29, r24	; 0x1d
    372c:	96 8f       	std	Z+30, r25	; 0x1e
    372e:	a7 8f       	std	Z+31, r26	; 0x1f
    3730:	b0 a3       	std	Z+32, r27	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    3732:	e0 91 46 06 	lds	r30, 0x0646
    3736:	f0 91 47 06 	lds	r31, 0x0647
    373a:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    373c:	85 8d       	ldd	r24, Z+29	; 0x1d
    373e:	96 8d       	ldd	r25, Z+30	; 0x1e
    3740:	a7 8d       	ldd	r26, Z+31	; 0x1f
    3742:	b0 a1       	ldd	r27, Z+32	; 0x20
    3744:	89 2b       	or	r24, r25
    3746:	8a 2b       	or	r24, r26
    3748:	8b 2b       	or	r24, r27
    374a:	69 f4       	brne	.+26     	; 0x3766 <_nrk_scheduler+0x21e>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    374c:	61 2f       	mov	r22, r17
    374e:	83 e0       	ldi	r24, 0x03	; 3
    3750:	0e 94 99 10 	call	0x2132	; 0x2132 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3754:	e0 91 46 06 	lds	r30, 0x0646
    3758:	f0 91 47 06 	lds	r31, 0x0647
    375c:	83 e0       	ldi	r24, 0x03	; 3
    375e:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    3760:	81 2f       	mov	r24, r17
    3762:	0e 94 6d 15 	call	0x2ada	; 0x2ada <nrk_rem_from_readyQ>
    3766:	8e e2       	ldi	r24, 0x2E	; 46
    3768:	95 e0       	ldi	r25, 0x05	; 5
    376a:	9d 83       	std	Y+5, r25	; 0x05
    376c:	8c 83       	std	Y+4, r24	; 0x04

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    376e:	00 e6       	ldi	r16, 0x60	; 96
    3770:	1a ee       	ldi	r17, 0xEA	; 234
    3772:	31 2c       	mov	r3, r1
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3774:	9a ef       	ldi	r25, 0xFA	; 250
    3776:	c9 2e       	mov	r12, r25
    3778:	d1 2c       	mov	r13, r1
    377a:	e1 2c       	mov	r14, r1
    377c:	f1 2c       	mov	r15, r1
                nrk_task_TCB[task_ID].nw_flag=0;
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    nrk_task_TCB[task_ID].task_state = READY;
    377e:	22 e0       	ldi	r18, 0x02	; 2
    3780:	22 2e       	mov	r2, r18
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    3782:	81 2c       	mov	r8, r1
    3784:	91 2c       	mov	r9, r1
    3786:	54 01       	movw	r10, r8
    3788:	83 94       	inc	r8
    378a:	ec 81       	ldd	r30, Y+4	; 0x04
    378c:	fd 81       	ldd	r31, Y+5	; 0x05
    378e:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    3790:	80 81       	ld	r24, Z
    3792:	8f 3f       	cpi	r24, 0xFF	; 255
    3794:	09 f4       	brne	.+2      	; 0x3798 <_nrk_scheduler+0x250>
    3796:	ff c0       	rjmp	.+510    	; 0x3996 <_nrk_scheduler+0x44e>
    3798:	ec 81       	ldd	r30, Y+4	; 0x04
    379a:	fd 81       	ldd	r31, Y+5	; 0x05
    379c:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    379e:	10 82       	st	Z, r1
    37a0:	ec 81       	ldd	r30, Y+4	; 0x04
    37a2:	fd 81       	ldd	r31, Y+5	; 0x05
    37a4:	f0 81       	ld	r31, Z
    37a6:	f9 83       	std	Y+1, r31	; 0x01
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    37a8:	88 23       	and	r24, r24
    37aa:	09 f4       	brne	.+2      	; 0x37ae <_nrk_scheduler+0x266>
    37ac:	68 c0       	rjmp	.+208    	; 0x387e <_nrk_scheduler+0x336>
    37ae:	f4 30       	cpi	r31, 0x04	; 4
    37b0:	09 f4       	brne	.+2      	; 0x37b4 <_nrk_scheduler+0x26c>
    37b2:	f1 c0       	rjmp	.+482    	; 0x3996 <_nrk_scheduler+0x44e>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    37b4:	ec 81       	ldd	r30, Y+4	; 0x04
    37b6:	fd 81       	ldd	r31, Y+5	; 0x05
    37b8:	44 84       	ldd	r4, Z+12	; 0x0c
    37ba:	55 84       	ldd	r5, Z+13	; 0x0d
    37bc:	66 84       	ldd	r6, Z+14	; 0x0e
    37be:	77 84       	ldd	r7, Z+15	; 0x0f
    37c0:	60 91 56 04 	lds	r22, 0x0456
    37c4:	70 e0       	ldi	r23, 0x00	; 0
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	46 16       	cp	r4, r22
    37cc:	57 06       	cpc	r5, r23
    37ce:	68 06       	cpc	r6, r24
    37d0:	79 06       	cpc	r7, r25
    37d2:	48 f0       	brcs	.+18     	; 0x37e6 <_nrk_scheduler+0x29e>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    37d4:	46 1a       	sub	r4, r22
    37d6:	57 0a       	sbc	r5, r23
    37d8:	68 0a       	sbc	r6, r24
    37da:	79 0a       	sbc	r7, r25
    37dc:	44 86       	std	Z+12, r4	; 0x0c
    37de:	55 86       	std	Z+13, r5	; 0x0d
    37e0:	66 86       	std	Z+14, r6	; 0x0e
    37e2:	77 86       	std	Z+15, r7	; 0x0f
    37e4:	06 c0       	rjmp	.+12     	; 0x37f2 <_nrk_scheduler+0x2aa>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    37e6:	ec 81       	ldd	r30, Y+4	; 0x04
    37e8:	fd 81       	ldd	r31, Y+5	; 0x05
    37ea:	14 86       	std	Z+12, r1	; 0x0c
    37ec:	15 86       	std	Z+13, r1	; 0x0d
    37ee:	16 86       	std	Z+14, r1	; 0x0e
    37f0:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    37f2:	ec 81       	ldd	r30, Y+4	; 0x04
    37f4:	fd 81       	ldd	r31, Y+5	; 0x05
    37f6:	40 88       	ldd	r4, Z+16	; 0x10
    37f8:	51 88       	ldd	r5, Z+17	; 0x11
    37fa:	62 88       	ldd	r6, Z+18	; 0x12
    37fc:	73 88       	ldd	r7, Z+19	; 0x13
    37fe:	46 16       	cp	r4, r22
    3800:	57 06       	cpc	r5, r23
    3802:	68 06       	cpc	r6, r24
    3804:	79 06       	cpc	r7, r25
    3806:	48 f0       	brcs	.+18     	; 0x381a <_nrk_scheduler+0x2d2>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    3808:	a3 01       	movw	r20, r6
    380a:	92 01       	movw	r18, r4
    380c:	26 1b       	sub	r18, r22
    380e:	37 0b       	sbc	r19, r23
    3810:	48 0b       	sbc	r20, r24
    3812:	59 0b       	sbc	r21, r25
    3814:	da 01       	movw	r26, r20
    3816:	c9 01       	movw	r24, r18
    3818:	13 c0       	rjmp	.+38     	; 0x3840 <_nrk_scheduler+0x2f8>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    381a:	ec 81       	ldd	r30, Y+4	; 0x04
    381c:	fd 81       	ldd	r31, Y+5	; 0x05
    381e:	20 8d       	ldd	r18, Z+24	; 0x18
    3820:	31 8d       	ldd	r19, Z+25	; 0x19
    3822:	42 8d       	ldd	r20, Z+26	; 0x1a
    3824:	53 8d       	ldd	r21, Z+27	; 0x1b
    3826:	62 17       	cp	r22, r18
    3828:	73 07       	cpc	r23, r19
    382a:	84 07       	cpc	r24, r20
    382c:	95 07       	cpc	r25, r21
    382e:	68 f4       	brcc	.+26     	; 0x384a <_nrk_scheduler+0x302>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    3830:	29 01       	movw	r4, r18
    3832:	3a 01       	movw	r6, r20
    3834:	46 1a       	sub	r4, r22
    3836:	57 0a       	sbc	r5, r23
    3838:	68 0a       	sbc	r6, r24
    383a:	79 0a       	sbc	r7, r25
    383c:	d3 01       	movw	r26, r6
    383e:	c2 01       	movw	r24, r4
    3840:	80 8b       	std	Z+16, r24	; 0x10
    3842:	91 8b       	std	Z+17, r25	; 0x11
    3844:	a2 8b       	std	Z+18, r26	; 0x12
    3846:	b3 8b       	std	Z+19, r27	; 0x13
    3848:	08 c0       	rjmp	.+16     	; 0x385a <_nrk_scheduler+0x312>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    384a:	0e 94 d7 24 	call	0x49ae	; 0x49ae <__udivmodsi4>
    384e:	ec 81       	ldd	r30, Y+4	; 0x04
    3850:	fd 81       	ldd	r31, Y+5	; 0x05
    3852:	60 8b       	std	Z+16, r22	; 0x10
    3854:	71 8b       	std	Z+17, r23	; 0x11
    3856:	82 8b       	std	Z+18, r24	; 0x12
    3858:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    385a:	ec 81       	ldd	r30, Y+4	; 0x04
    385c:	fd 81       	ldd	r31, Y+5	; 0x05
    385e:	80 89       	ldd	r24, Z+16	; 0x10
    3860:	91 89       	ldd	r25, Z+17	; 0x11
    3862:	a2 89       	ldd	r26, Z+18	; 0x12
    3864:	b3 89       	ldd	r27, Z+19	; 0x13
    3866:	89 2b       	or	r24, r25
    3868:	8a 2b       	or	r24, r26
    386a:	8b 2b       	or	r24, r27
    386c:	41 f4       	brne	.+16     	; 0x387e <_nrk_scheduler+0x336>
    386e:	80 8d       	ldd	r24, Z+24	; 0x18
    3870:	91 8d       	ldd	r25, Z+25	; 0x19
    3872:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3874:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3876:	80 8b       	std	Z+16, r24	; 0x10
    3878:	91 8b       	std	Z+17, r25	; 0x11
    387a:	a2 8b       	std	Z+18, r26	; 0x12
    387c:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    387e:	f9 81       	ldd	r31, Y+1	; 0x01
    3880:	f3 30       	cpi	r31, 0x03	; 3
    3882:	09 f0       	breq	.+2      	; 0x3886 <_nrk_scheduler+0x33e>
    3884:	88 c0       	rjmp	.+272    	; 0x3996 <_nrk_scheduler+0x44e>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    3886:	ec 81       	ldd	r30, Y+4	; 0x04
    3888:	fd 81       	ldd	r31, Y+5	; 0x05
    388a:	84 85       	ldd	r24, Z+12	; 0x0c
    388c:	95 85       	ldd	r25, Z+13	; 0x0d
    388e:	a6 85       	ldd	r26, Z+14	; 0x0e
    3890:	b7 85       	ldd	r27, Z+15	; 0x0f
    3892:	89 2b       	or	r24, r25
    3894:	8a 2b       	or	r24, r26
    3896:	8b 2b       	or	r24, r27
    3898:	09 f0       	breq	.+2      	; 0x389c <_nrk_scheduler+0x354>
    389a:	6a c0       	rjmp	.+212    	; 0x3970 <_nrk_scheduler+0x428>
    389c:	df 01       	movw	r26, r30
    389e:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    38a0:	8c 91       	ld	r24, X
    38a2:	9f 01       	movw	r18, r30
    38a4:	23 50       	subi	r18, 0x03	; 3
    38a6:	31 09       	sbc	r19, r1
    38a8:	88 23       	and	r24, r24
    38aa:	a9 f0       	breq	.+42     	; 0x38d6 <_nrk_scheduler+0x38e>
    38ac:	f9 01       	movw	r30, r18
    38ae:	80 81       	ld	r24, Z
    38b0:	88 23       	and	r24, r24
    38b2:	89 f0       	breq	.+34     	; 0x38d6 <_nrk_scheduler+0x38e>
    38b4:	b5 01       	movw	r22, r10
    38b6:	a4 01       	movw	r20, r8
    38b8:	00 90 36 06 	lds	r0, 0x0636
    38bc:	04 c0       	rjmp	.+8      	; 0x38c6 <_nrk_scheduler+0x37e>
    38be:	44 0f       	add	r20, r20
    38c0:	55 1f       	adc	r21, r21
    38c2:	66 1f       	adc	r22, r22
    38c4:	77 1f       	adc	r23, r23
    38c6:	0a 94       	dec	r0
    38c8:	d2 f7       	brpl	.-12     	; 0x38be <_nrk_scheduler+0x376>
    38ca:	ec 81       	ldd	r30, Y+4	; 0x04
    38cc:	fd 81       	ldd	r31, Y+5	; 0x05
    38ce:	40 87       	std	Z+8, r20	; 0x08
    38d0:	51 87       	std	Z+9, r21	; 0x09
    38d2:	62 87       	std	Z+10, r22	; 0x0a
    38d4:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    38d6:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    38d8:	f9 01       	movw	r30, r18
    38da:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    38dc:	ec 81       	ldd	r30, Y+4	; 0x04
    38de:	fd 81       	ldd	r31, Y+5	; 0x05
    38e0:	a0 a1       	ldd	r26, Z+32	; 0x20
    38e2:	b1 a1       	ldd	r27, Z+33	; 0x21
    38e4:	40 8c       	ldd	r4, Z+24	; 0x18
    38e6:	51 8c       	ldd	r5, Z+25	; 0x19
    38e8:	62 8c       	ldd	r6, Z+26	; 0x1a
    38ea:	73 8c       	ldd	r7, Z+27	; 0x1b
    38ec:	44 8d       	ldd	r20, Z+28	; 0x1c
    38ee:	55 8d       	ldd	r21, Z+29	; 0x1d
    38f0:	66 8d       	ldd	r22, Z+30	; 0x1e
    38f2:	77 8d       	ldd	r23, Z+31	; 0x1f
    38f4:	a1 30       	cpi	r26, 0x01	; 1
    38f6:	b1 05       	cpc	r27, r1
    38f8:	c9 f4       	brne	.+50     	; 0x392c <_nrk_scheduler+0x3e4>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    38fa:	44 8b       	std	Z+20, r20	; 0x14
    38fc:	55 8b       	std	Z+21, r21	; 0x15
    38fe:	66 8b       	std	Z+22, r22	; 0x16
    3900:	77 8b       	std	Z+23, r23	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    3902:	20 82       	st	Z, r2
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    3904:	80 89       	ldd	r24, Z+16	; 0x10
    3906:	91 89       	ldd	r25, Z+17	; 0x11
    3908:	a2 89       	ldd	r26, Z+18	; 0x12
    390a:	b3 89       	ldd	r27, Z+19	; 0x13
    390c:	84 87       	std	Z+12, r24	; 0x0c
    390e:	95 87       	std	Z+13, r25	; 0x0d
    3910:	a6 87       	std	Z+14, r26	; 0x0e
    3912:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3914:	45 28       	or	r4, r5
    3916:	46 28       	or	r4, r6
    3918:	47 28       	or	r4, r7
    391a:	21 f4       	brne	.+8      	; 0x3924 <_nrk_scheduler+0x3dc>
    391c:	c4 86       	std	Z+12, r12	; 0x0c
    391e:	d5 86       	std	Z+13, r13	; 0x0d
    3920:	e6 86       	std	Z+14, r14	; 0x0e
    3922:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    3924:	83 2d       	mov	r24, r3
    3926:	0e 94 c1 14 	call	0x2982	; 0x2982 <nrk_add_to_readyQ>
    392a:	22 c0       	rjmp	.+68     	; 0x3970 <_nrk_scheduler+0x428>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    392c:	ec 81       	ldd	r30, Y+4	; 0x04
    392e:	fd 81       	ldd	r31, Y+5	; 0x05
    3930:	44 8b       	std	Z+20, r20	; 0x14
    3932:	55 8b       	std	Z+21, r21	; 0x15
    3934:	66 8b       	std	Z+22, r22	; 0x16
    3936:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3938:	11 97       	sbiw	r26, 0x01	; 1
    393a:	a3 01       	movw	r20, r6
    393c:	92 01       	movw	r18, r4
    393e:	0e 94 bc 24 	call	0x4978	; 0x4978 <__muluhisi3>
    3942:	64 87       	std	Z+12, r22	; 0x0c
    3944:	75 87       	std	Z+13, r23	; 0x0d
    3946:	86 87       	std	Z+14, r24	; 0x0e
    3948:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    394a:	60 8b       	std	Z+16, r22	; 0x10
    394c:	71 8b       	std	Z+17, r23	; 0x11
    394e:	82 8b       	std	Z+18, r24	; 0x12
    3950:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3952:	45 28       	or	r4, r5
    3954:	46 28       	or	r4, r6
    3956:	47 28       	or	r4, r7
    3958:	21 f4       	brne	.+8      	; 0x3962 <_nrk_scheduler+0x41a>
    395a:	c4 86       	std	Z+12, r12	; 0x0c
    395c:	d5 86       	std	Z+13, r13	; 0x0d
    395e:	e6 86       	std	Z+14, r14	; 0x0e
    3960:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    3962:	44 24       	eor	r4, r4
    3964:	43 94       	inc	r4
    3966:	51 2c       	mov	r5, r1
    3968:	ec 81       	ldd	r30, Y+4	; 0x04
    396a:	fd 81       	ldd	r31, Y+5	; 0x05
    396c:	51 a2       	std	Z+33, r5	; 0x21
    396e:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    3970:	ec 81       	ldd	r30, Y+4	; 0x04
    3972:	fd 81       	ldd	r31, Y+5	; 0x05
    3974:	84 85       	ldd	r24, Z+12	; 0x0c
    3976:	95 85       	ldd	r25, Z+13	; 0x0d
    3978:	a6 85       	ldd	r26, Z+14	; 0x0e
    397a:	b7 85       	ldd	r27, Z+15	; 0x0f
    397c:	00 97       	sbiw	r24, 0x00	; 0
    397e:	a1 05       	cpc	r26, r1
    3980:	b1 05       	cpc	r27, r1
    3982:	49 f0       	breq	.+18     	; 0x3996 <_nrk_scheduler+0x44e>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    3984:	a8 01       	movw	r20, r16
    3986:	60 e0       	ldi	r22, 0x00	; 0
    3988:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    398a:	84 17       	cp	r24, r20
    398c:	95 07       	cpc	r25, r21
    398e:	a6 07       	cpc	r26, r22
    3990:	b7 07       	cpc	r27, r23
    3992:	08 f4       	brcc	.+2      	; 0x3996 <_nrk_scheduler+0x44e>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    3994:	8c 01       	movw	r16, r24
    3996:	33 94       	inc	r3
    3998:	2c 81       	ldd	r18, Y+4	; 0x04
    399a:	3d 81       	ldd	r19, Y+5	; 0x05
    399c:	25 5d       	subi	r18, 0xD5	; 213
    399e:	3f 4f       	sbci	r19, 0xFF	; 255
    39a0:	3d 83       	std	Y+5, r19	; 0x05
    39a2:	2c 83       	std	Y+4, r18	; 0x04

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    39a4:	36 e0       	ldi	r19, 0x06	; 6
    39a6:	33 12       	cpse	r3, r19
    39a8:	f0 ce       	rjmp	.-544    	; 0x378a <_nrk_scheduler+0x242>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    39aa:	0e 94 b0 14 	call	0x2960	; 0x2960 <nrk_get_high_ready_task_ID>
    39ae:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    39b0:	4b e2       	ldi	r20, 0x2B	; 43
    39b2:	84 02       	muls	r24, r20
    39b4:	f0 01       	movw	r30, r0
    39b6:	11 24       	eor	r1, r1
    39b8:	eb 5d       	subi	r30, 0xDB	; 219
    39ba:	fa 4f       	sbci	r31, 0xFA	; 250
    39bc:	22 85       	ldd	r18, Z+10	; 0x0a
    39be:	20 93 48 06 	sts	0x0648, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    39c2:	f0 93 38 06 	sts	0x0638, r31
    39c6:	e0 93 37 06 	sts	0x0637, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    39ca:	88 23       	and	r24, r24
    39cc:	f9 f0       	breq	.+62     	; 0x3a0c <_nrk_scheduler+0x4c4>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    39ce:	85 a1       	ldd	r24, Z+37	; 0x25
    39d0:	96 a1       	ldd	r25, Z+38	; 0x26
    39d2:	a7 a1       	ldd	r26, Z+39	; 0x27
    39d4:	b0 a5       	ldd	r27, Z+40	; 0x28
    39d6:	89 2b       	or	r24, r25
    39d8:	8a 2b       	or	r24, r26
    39da:	8b 2b       	or	r24, r27
    39dc:	99 f0       	breq	.+38     	; 0x3a04 <_nrk_scheduler+0x4bc>
    39de:	85 8d       	ldd	r24, Z+29	; 0x1d
    39e0:	96 8d       	ldd	r25, Z+30	; 0x1e
    39e2:	a7 8d       	ldd	r26, Z+31	; 0x1f
    39e4:	b0 a1       	ldd	r27, Z+32	; 0x20
    39e6:	8a 3f       	cpi	r24, 0xFA	; 250
    39e8:	91 05       	cpc	r25, r1
    39ea:	a1 05       	cpc	r26, r1
    39ec:	b1 05       	cpc	r27, r1
    39ee:	50 f4       	brcc	.+20     	; 0x3a04 <_nrk_scheduler+0x4bc>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    39f0:	a8 01       	movw	r20, r16
    39f2:	60 e0       	ldi	r22, 0x00	; 0
    39f4:	70 e0       	ldi	r23, 0x00	; 0
    39f6:	84 17       	cp	r24, r20
    39f8:	95 07       	cpc	r25, r21
    39fa:	a6 07       	cpc	r26, r22
    39fc:	b7 07       	cpc	r27, r23
    39fe:	e8 f4       	brcc	.+58     	; 0x3a3a <_nrk_scheduler+0x4f2>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    3a00:	8c 01       	movw	r16, r24
    3a02:	1b c0       	rjmp	.+54     	; 0x3a3a <_nrk_scheduler+0x4f2>
    3a04:	0b 3f       	cpi	r16, 0xFB	; 251
    3a06:	11 05       	cpc	r17, r1
    3a08:	c0 f0       	brcs	.+48     	; 0x3a3a <_nrk_scheduler+0x4f2>
    3a0a:	12 c0       	rjmp	.+36     	; 0x3a30 <_nrk_scheduler+0x4e8>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    3a0c:	04 30       	cpi	r16, 0x04	; 4
    3a0e:	11 05       	cpc	r17, r1
    3a10:	a0 f0       	brcs	.+40     	; 0x3a3a <_nrk_scheduler+0x4f2>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    3a12:	c8 01       	movw	r24, r16
    3a14:	03 97       	sbiw	r24, 0x03	; 3
    3a16:	8a 3f       	cpi	r24, 0xFA	; 250
    3a18:	91 05       	cpc	r25, r1
    3a1a:	38 f4       	brcc	.+14     	; 0x3a2a <_nrk_scheduler+0x4e2>
    3a1c:	8c 01       	movw	r16, r24
    3a1e:	82 30       	cpi	r24, 0x02	; 2
    3a20:	91 05       	cpc	r25, r1
    3a22:	58 f4       	brcc	.+22     	; 0x3a3a <_nrk_scheduler+0x4f2>
    3a24:	02 e0       	ldi	r16, 0x02	; 2
    3a26:	10 e0       	ldi	r17, 0x00	; 0
    3a28:	08 c0       	rjmp	.+16     	; 0x3a3a <_nrk_scheduler+0x4f2>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    3a2a:	0d 3f       	cpi	r16, 0xFD	; 253
    3a2c:	11 05       	cpc	r17, r1
    3a2e:	19 f0       	breq	.+6      	; 0x3a36 <_nrk_scheduler+0x4ee>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    3a30:	0a ef       	ldi	r16, 0xFA	; 250
    3a32:	10 e0       	ldi	r17, 0x00	; 0
    3a34:	02 c0       	rjmp	.+4      	; 0x3a3a <_nrk_scheduler+0x4f2>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    3a36:	07 ef       	ldi	r16, 0xF7	; 247
    3a38:	10 e0       	ldi	r17, 0x00	; 0
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    3a3a:	20 93 39 06 	sts	0x0639, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    3a3e:	f0 93 47 06 	sts	0x0647, r31
    3a42:	e0 93 46 06 	sts	0x0646, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    3a46:	00 93 56 04 	sts	0x0456, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    3a4a:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_nrk_os_timer_get>
    3a4e:	28 2f       	mov	r18, r24
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	2f 5f       	subi	r18, 0xFF	; 255
    3a54:	3f 4f       	sbci	r19, 0xFF	; 255
    3a56:	20 17       	cp	r18, r16
    3a58:	31 07       	cpc	r19, r17
    3a5a:	40 f0       	brcs	.+16     	; 0x3a6c <_nrk_scheduler+0x524>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    3a5c:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_nrk_os_timer_get>
    3a60:	08 2f       	mov	r16, r24
    3a62:	10 e0       	ldi	r17, 0x00	; 0
    3a64:	0e 5f       	subi	r16, 0xFE	; 254
    3a66:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    3a68:	00 93 56 04 	sts	0x0456, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    3a6c:	f1 10       	cpse	r15, r1
    3a6e:	10 92 3a 06 	sts	0x063A, r1

    _nrk_set_next_wakeup(next_wake);
    3a72:	80 2f       	mov	r24, r16
    3a74:	0e 94 8b 1f 	call	0x3f16	; 0x3f16 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    3a78:	6c ed       	ldi	r22, 0xDC	; 220
    3a7a:	75 e0       	ldi	r23, 0x05	; 5
    3a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a80:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    3a84:	0e 94 10 23 	call	0x4620	; 0x4620 <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    3a88:	0f 90       	pop	r0
    3a8a:	0f 90       	pop	r0
    3a8c:	0f 90       	pop	r0
    3a8e:	0f 90       	pop	r0
    3a90:	0f 90       	pop	r0
    3a92:	df 91       	pop	r29
    3a94:	cf 91       	pop	r28
    3a96:	1f 91       	pop	r17
    3a98:	0f 91       	pop	r16
    3a9a:	ff 90       	pop	r15
    3a9c:	ef 90       	pop	r14
    3a9e:	df 90       	pop	r13
    3aa0:	cf 90       	pop	r12
    3aa2:	bf 90       	pop	r11
    3aa4:	af 90       	pop	r10
    3aa6:	9f 90       	pop	r9
    3aa8:	8f 90       	pop	r8
    3aaa:	7f 90       	pop	r7
    3aac:	6f 90       	pop	r6
    3aae:	5f 90       	pop	r5
    3ab0:	4f 90       	pop	r4
    3ab2:	3f 90       	pop	r3
    3ab4:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    3ab6:	0c 94 1b 23 	jmp	0x4636	; 0x4636 <nrk_start_high_ready_task>

00003aba <_nrk_reserve_init>:
    3aba:	ed e6       	ldi	r30, 0x6D	; 109
    3abc:	f6 e0       	ldi	r31, 0x06	; 6
    3abe:	8f ef       	ldi	r24, 0xFF	; 255
    3ac0:	80 8b       	std	Z+16, r24	; 0x10
    3ac2:	83 a3       	std	Z+35, r24	; 0x23
    3ac4:	86 ab       	std	Z+54, r24	; 0x36
    3ac6:	80 93 b6 06 	sts	0x06B6, r24
    3aca:	80 93 c9 06 	sts	0x06C9, r24
    3ace:	08 95       	ret

00003ad0 <nrk_reserve_create>:
}

// This function returns the id of a free reserve
// This returns NRK_ERROR if there are no free reserves
int8_t nrk_reserve_create ()
{
    3ad0:	ed e7       	ldi	r30, 0x7D	; 125
    3ad2:	f6 e0       	ldi	r31, 0x06	; 6
    3ad4:	80 e0       	ldi	r24, 0x00	; 0
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
  int8_t i;
  for (i = 0; i < NRK_MAX_RESERVES; i++) {
    if (_nrk_reserve[i].active == -1) {
    3ad8:	20 81       	ld	r18, Z
    3ada:	2f 3f       	cpi	r18, 0xFF	; 255
    3adc:	59 f4       	brne	.+22     	; 0x3af4 <nrk_reserve_create+0x24>
      // Check and Accept
      _nrk_reserve[i].active = 1;
    3ade:	23 e1       	ldi	r18, 0x13	; 19
    3ae0:	28 9f       	mul	r18, r24
    3ae2:	f0 01       	movw	r30, r0
    3ae4:	29 9f       	mul	r18, r25
    3ae6:	f0 0d       	add	r31, r0
    3ae8:	11 24       	eor	r1, r1
    3aea:	e3 59       	subi	r30, 0x93	; 147
    3aec:	f9 4f       	sbci	r31, 0xF9	; 249
    3aee:	91 e0       	ldi	r25, 0x01	; 1
    3af0:	90 8b       	std	Z+16, r25	; 0x10
      return i;
    3af2:	08 95       	ret
    3af4:	01 96       	adiw	r24, 0x01	; 1
    3af6:	73 96       	adiw	r30, 0x13	; 19
// This function returns the id of a free reserve
// This returns NRK_ERROR if there are no free reserves
int8_t nrk_reserve_create ()
{
  int8_t i;
  for (i = 0; i < NRK_MAX_RESERVES; i++) {
    3af8:	85 30       	cpi	r24, 0x05	; 5
    3afa:	91 05       	cpc	r25, r1
    3afc:	69 f7       	brne	.-38     	; 0x3ad8 <nrk_reserve_create+0x8>
      _nrk_reserve[i].active = 1;
      return i;
    }
  }

  return NRK_ERROR;
    3afe:	8f ef       	ldi	r24, 0xFF	; 255
}
    3b00:	08 95       	ret

00003b02 <nrk_reserve_delete>:
// This function frees a current reserve
// This returns NRK_ERROR if the reserve does not exist
int8_t nrk_reserve_delete (uint8_t reserve_id)
{
  int8_t i;
  if (reserve_id >= 0 && reserve_id < NRK_MAX_RESERVES) {
    3b02:	85 30       	cpi	r24, 0x05	; 5
    3b04:	38 f4       	brcc	.+14     	; 0x3b14 <nrk_reserve_delete+0x12>
    if (_nrk_reserve[i].active == 1) {
    3b06:	ed e6       	ldi	r30, 0x6D	; 109
    3b08:	f6 e0       	ldi	r31, 0x06	; 6
    3b0a:	80 89       	ldd	r24, Z+16	; 0x10
    3b0c:	81 30       	cpi	r24, 0x01	; 1
    3b0e:	11 f4       	brne	.+4      	; 0x3b14 <nrk_reserve_delete+0x12>
      _nrk_reserve[i].active = 0;
    3b10:	10 8a       	std	Z+16, r1	; 0x10
      return NRK_OK;
    3b12:	08 95       	ret
    }
  }
  return NRK_ERROR;
    3b14:	8f ef       	ldi	r24, 0xFF	; 255
}
    3b16:	08 95       	ret

00003b18 <_nrk_reserve_update>:
  return (_nrk_reserve[reserve_id].set_access -
          _nrk_reserve[reserve_id].cur_access);
}

void _nrk_reserve_update (uint8_t reserve_id)
{
    3b18:	0f 93       	push	r16
    3b1a:	1f 93       	push	r17
    3b1c:	cf 93       	push	r28
    3b1e:	df 93       	push	r29
    3b20:	cd b7       	in	r28, 0x3d	; 61
    3b22:	de b7       	in	r29, 0x3e	; 62
    3b24:	28 97       	sbiw	r28, 0x08	; 8
    3b26:	0f b6       	in	r0, 0x3f	; 63
    3b28:	f8 94       	cli
    3b2a:	de bf       	out	0x3e, r29	; 62
    3b2c:	0f be       	out	0x3f, r0	; 63
    3b2e:	cd bf       	out	0x3d, r28	; 61
    3b30:	08 2f       	mov	r16, r24
  nrk_time_t t;

  nrk_int_disable ();
    3b32:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <nrk_int_disable>
  nrk_time_get (&t);
    3b36:	ce 01       	movw	r24, r28
    3b38:	01 96       	adiw	r24, 0x01	; 1
    3b3a:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <nrk_time_get>

  _nrk_reserve[reserve_id].cur_time = (int32_t) _nrk_time_to_ticks_long (&t);
    3b3e:	10 e0       	ldi	r17, 0x00	; 0
    3b40:	ce 01       	movw	r24, r28
    3b42:	01 96       	adiw	r24, 0x01	; 1
    3b44:	0e 94 16 1a 	call	0x342c	; 0x342c <_nrk_time_to_ticks_long>
    3b48:	23 e1       	ldi	r18, 0x13	; 19
    3b4a:	20 9f       	mul	r18, r16
    3b4c:	f0 01       	movw	r30, r0
    3b4e:	21 9f       	mul	r18, r17
    3b50:	f0 0d       	add	r31, r0
    3b52:	11 24       	eor	r1, r1
    3b54:	e3 59       	subi	r30, 0x93	; 147
    3b56:	f9 4f       	sbci	r31, 0xF9	; 249
    3b58:	60 87       	std	Z+8, r22	; 0x08
    3b5a:	71 87       	std	Z+9, r23	; 0x09
    3b5c:	82 87       	std	Z+10, r24	; 0x0a
    3b5e:	93 87       	std	Z+11, r25	; 0x0b
  if (_nrk_reserve[reserve_id].cur_time >= _nrk_reserve[reserve_id].set_time) {
    3b60:	04 81       	ldd	r16, Z+4	; 0x04
    3b62:	15 81       	ldd	r17, Z+5	; 0x05
    3b64:	26 81       	ldd	r18, Z+6	; 0x06
    3b66:	37 81       	ldd	r19, Z+7	; 0x07
    3b68:	60 17       	cp	r22, r16
    3b6a:	71 07       	cpc	r23, r17
    3b6c:	82 07       	cpc	r24, r18
    3b6e:	93 07       	cpc	r25, r19
    3b70:	80 f0       	brcs	.+32     	; 0x3b92 <_nrk_reserve_update+0x7a>
    // If the reserve is passed its period then replenish it
    _nrk_reserve[reserve_id].set_time =
      _nrk_reserve[reserve_id].cur_time +
    3b72:	00 81       	ld	r16, Z
    3b74:	11 81       	ldd	r17, Z+1	; 0x01
    3b76:	22 81       	ldd	r18, Z+2	; 0x02
    3b78:	33 81       	ldd	r19, Z+3	; 0x03
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	80 0f       	add	r24, r16
    3b80:	91 1f       	adc	r25, r17
    3b82:	a2 1f       	adc	r26, r18
    3b84:	b3 1f       	adc	r27, r19
  nrk_time_get (&t);

  _nrk_reserve[reserve_id].cur_time = (int32_t) _nrk_time_to_ticks_long (&t);
  if (_nrk_reserve[reserve_id].cur_time >= _nrk_reserve[reserve_id].set_time) {
    // If the reserve is passed its period then replenish it
    _nrk_reserve[reserve_id].set_time =
    3b86:	84 83       	std	Z+4, r24	; 0x04
    3b88:	95 83       	std	Z+5, r25	; 0x05
    3b8a:	a6 83       	std	Z+6, r26	; 0x06
    3b8c:	b7 83       	std	Z+7, r27	; 0x07
      _nrk_reserve[reserve_id].cur_time +
      _nrk_reserve[reserve_id].period_ticks;
    _nrk_reserve[reserve_id].cur_access = 0;
    3b8e:	17 86       	std	Z+15, r1	; 0x0f
    3b90:	16 86       	std	Z+14, r1	; 0x0e
  }
  nrk_int_enable ();
    3b92:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>

}
    3b96:	28 96       	adiw	r28, 0x08	; 8
    3b98:	0f b6       	in	r0, 0x3f	; 63
    3b9a:	f8 94       	cli
    3b9c:	de bf       	out	0x3e, r29	; 62
    3b9e:	0f be       	out	0x3f, r0	; 63
    3ba0:	cd bf       	out	0x3d, r28	; 61
    3ba2:	df 91       	pop	r29
    3ba4:	cf 91       	pop	r28
    3ba6:	1f 91       	pop	r17
    3ba8:	0f 91       	pop	r16
    3baa:	08 95       	ret

00003bac <nrk_reserve_get>:




uint8_t nrk_reserve_get (uint8_t reserve_id)
{
    3bac:	cf 93       	push	r28
    3bae:	df 93       	push	r29

  if (reserve_id >= NRK_MAX_RESERVES) {
    3bb0:	85 30       	cpi	r24, 0x05	; 5
    3bb2:	10 f0       	brcs	.+4      	; 0x3bb8 <nrk_reserve_get+0xc>
    _nrk_errno_set (1);
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	0a c0       	rjmp	.+20     	; 0x3bcc <nrk_reserve_get+0x20>
    return 0;
  }
  if (_nrk_reserve[reserve_id].active == -1) {
    3bb8:	93 e1       	ldi	r25, 0x13	; 19
    3bba:	89 9f       	mul	r24, r25
    3bbc:	e0 01       	movw	r28, r0
    3bbe:	11 24       	eor	r1, r1
    3bc0:	c3 59       	subi	r28, 0x93	; 147
    3bc2:	d9 4f       	sbci	r29, 0xF9	; 249
    3bc4:	98 89       	ldd	r25, Y+16	; 0x10
    3bc6:	9f 3f       	cpi	r25, 0xFF	; 255
    3bc8:	21 f4       	brne	.+8      	; 0x3bd2 <nrk_reserve_get+0x26>
    // Reserve isn't active 
    _nrk_errno_set (2);
    3bca:	82 e0       	ldi	r24, 0x02	; 2
    3bcc:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <_nrk_errno_set>
    3bd0:	0b c0       	rjmp	.+22     	; 0x3be8 <nrk_reserve_get+0x3c>
    return 0;
  }

  _nrk_reserve_update (reserve_id);
    3bd2:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <_nrk_reserve_update>

  if (_nrk_reserve[reserve_id].cur_access >
    3bd6:	2e 85       	ldd	r18, Y+14	; 0x0e
    3bd8:	3f 85       	ldd	r19, Y+15	; 0x0f
      _nrk_reserve[reserve_id].set_access)
    3bda:	8c 85       	ldd	r24, Y+12	; 0x0c
    3bdc:	9d 85       	ldd	r25, Y+13	; 0x0d
    return 0;
  }

  _nrk_reserve_update (reserve_id);

  if (_nrk_reserve[reserve_id].cur_access >
    3bde:	82 17       	cp	r24, r18
    3be0:	93 07       	cpc	r25, r19
    3be2:	14 f0       	brlt	.+4      	; 0x3be8 <nrk_reserve_get+0x3c>
      _nrk_reserve[reserve_id].set_access)
    return 0;
  return (_nrk_reserve[reserve_id].set_access -
    3be4:	82 1b       	sub	r24, r18
    3be6:	01 c0       	rjmp	.+2      	; 0x3bea <nrk_reserve_get+0x3e>

  _nrk_reserve_update (reserve_id);

  if (_nrk_reserve[reserve_id].cur_access >
      _nrk_reserve[reserve_id].set_access)
    return 0;
    3be8:	80 e0       	ldi	r24, 0x00	; 0
  return (_nrk_reserve[reserve_id].set_access -
          _nrk_reserve[reserve_id].cur_access);
}
    3bea:	df 91       	pop	r29
    3bec:	cf 91       	pop	r28
    3bee:	08 95       	ret

00003bf0 <nrk_reserve_consume>:
  nrk_int_enable ();

}

int8_t nrk_reserve_consume (uint8_t reserve_id)
{
    3bf0:	1f 93       	push	r17
    3bf2:	cf 93       	push	r28
    3bf4:	df 93       	push	r29

  if (reserve_id >= NRK_MAX_RESERVES) {
    3bf6:	85 30       	cpi	r24, 0x05	; 5
    3bf8:	20 f0       	brcs	.+8      	; 0x3c02 <nrk_reserve_consume+0x12>
    _nrk_errno_set (1);
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <_nrk_errno_set>
    3c00:	23 c0       	rjmp	.+70     	; 0x3c48 <nrk_reserve_consume+0x58>
    return NRK_ERROR;
  }
  if (_nrk_reserve[reserve_id].active == -1) {
    3c02:	93 e1       	ldi	r25, 0x13	; 19
    3c04:	89 9f       	mul	r24, r25
    3c06:	e0 01       	movw	r28, r0
    3c08:	11 24       	eor	r1, r1
    3c0a:	c3 59       	subi	r28, 0x93	; 147
    3c0c:	d9 4f       	sbci	r29, 0xF9	; 249
    3c0e:	18 89       	ldd	r17, Y+16	; 0x10
    3c10:	1f 3f       	cpi	r17, 0xFF	; 255
    3c12:	21 f4       	brne	.+8      	; 0x3c1c <nrk_reserve_consume+0x2c>
    _nrk_errno_set (2);
    3c14:	82 e0       	ldi	r24, 0x02	; 2
    3c16:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <_nrk_errno_set>
    return NRK_ERROR;
    3c1a:	17 c0       	rjmp	.+46     	; 0x3c4a <nrk_reserve_consume+0x5a>
  }

  _nrk_reserve_update (reserve_id);
    3c1c:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <_nrk_reserve_update>

  if ((_nrk_reserve[reserve_id].set_access <=
       _nrk_reserve[reserve_id].cur_access)) {
    3c20:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c22:	9f 85       	ldd	r25, Y+15	; 0x0f
    return NRK_ERROR;
  }

  _nrk_reserve_update (reserve_id);

  if ((_nrk_reserve[reserve_id].set_access <=
    3c24:	2c 85       	ldd	r18, Y+12	; 0x0c
    3c26:	3d 85       	ldd	r19, Y+13	; 0x0d
    3c28:	82 17       	cp	r24, r18
    3c2a:	93 07       	cpc	r25, r19
    3c2c:	44 f0       	brlt	.+16     	; 0x3c3e <nrk_reserve_consume+0x4e>
       _nrk_reserve[reserve_id].cur_access)) {
    // You violated your resource (like MJ after a little boy)
    nrk_int_enable ();
    3c2e:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>
    if (_nrk_reserve[reserve_id].error != NULL)
    3c32:	e9 89       	ldd	r30, Y+17	; 0x11
    3c34:	fa 89       	ldd	r31, Y+18	; 0x12
    3c36:	30 97       	sbiw	r30, 0x00	; 0
    3c38:	39 f0       	breq	.+14     	; 0x3c48 <nrk_reserve_consume+0x58>
      _nrk_reserve[reserve_id].error ();
    3c3a:	09 95       	icall
    3c3c:	05 c0       	rjmp	.+10     	; 0x3c48 <nrk_reserve_consume+0x58>
    return NRK_ERROR;
  }
  else {
    // Reserve is fine. Take some of it.
    _nrk_reserve[reserve_id].cur_access++;
    3c3e:	01 96       	adiw	r24, 0x01	; 1
    3c40:	9f 87       	std	Y+15, r25	; 0x0f
    3c42:	8e 87       	std	Y+14, r24	; 0x0e
  }


  return NRK_OK;
    3c44:	11 e0       	ldi	r17, 0x01	; 1
    3c46:	01 c0       	rjmp	.+2      	; 0x3c4a <nrk_reserve_consume+0x5a>
       _nrk_reserve[reserve_id].cur_access)) {
    // You violated your resource (like MJ after a little boy)
    nrk_int_enable ();
    if (_nrk_reserve[reserve_id].error != NULL)
      _nrk_reserve[reserve_id].error ();
    return NRK_ERROR;
    3c48:	1f ef       	ldi	r17, 0xFF	; 255
    _nrk_reserve[reserve_id].cur_access++;
  }


  return NRK_OK;
}
    3c4a:	81 2f       	mov	r24, r17
    3c4c:	df 91       	pop	r29
    3c4e:	cf 91       	pop	r28
    3c50:	1f 91       	pop	r17
    3c52:	08 95       	ret

00003c54 <nrk_reserve_set>:

int8_t nrk_reserve_set (uint8_t id, nrk_time_t * period, int16_t access_count,
                        void *errhandler)
{
    3c54:	8f 92       	push	r8
    3c56:	9f 92       	push	r9
    3c58:	af 92       	push	r10
    3c5a:	bf 92       	push	r11
    3c5c:	cf 92       	push	r12
    3c5e:	df 92       	push	r13
    3c60:	ef 92       	push	r14
    3c62:	ff 92       	push	r15
    3c64:	0f 93       	push	r16
    3c66:	1f 93       	push	r17
    3c68:	cf 93       	push	r28
    3c6a:	df 93       	push	r29
    3c6c:	cd b7       	in	r28, 0x3d	; 61
    3c6e:	de b7       	in	r29, 0x3e	; 62
    3c70:	28 97       	sbiw	r28, 0x08	; 8
    3c72:	0f b6       	in	r0, 0x3f	; 63
    3c74:	f8 94       	cli
    3c76:	de bf       	out	0x3e, r29	; 62
    3c78:	0f be       	out	0x3f, r0	; 63
    3c7a:	cd bf       	out	0x3d, r28	; 61
  nrk_time_t tmp_time;

  if (id >= NRK_MAX_RESERVES)
    3c7c:	85 30       	cpi	r24, 0x05	; 5
    3c7e:	08 f0       	brcs	.+2      	; 0x3c82 <nrk_reserve_set+0x2e>
    3c80:	4a c0       	rjmp	.+148    	; 0x3d16 <nrk_reserve_set+0xc2>
    return NRK_ERROR;
  if (_nrk_reserve[id].active == -1)
    3c82:	93 e1       	ldi	r25, 0x13	; 19
    3c84:	89 9f       	mul	r24, r25
    3c86:	80 01       	movw	r16, r0
    3c88:	11 24       	eor	r1, r1
    3c8a:	03 59       	subi	r16, 0x93	; 147
    3c8c:	19 4f       	sbci	r17, 0xF9	; 249
    3c8e:	f8 01       	movw	r30, r16
    3c90:	80 89       	ldd	r24, Z+16	; 0x10
    3c92:	8f 3f       	cpi	r24, 0xFF	; 255
    3c94:	09 f4       	brne	.+2      	; 0x3c98 <nrk_reserve_set+0x44>
    3c96:	40 c0       	rjmp	.+128    	; 0x3d18 <nrk_reserve_set+0xc4>
    3c98:	79 01       	movw	r14, r18
    3c9a:	6a 01       	movw	r12, r20
    3c9c:	fb 01       	movw	r30, r22
    return NRK_ERROR;

  tmp_time.secs = period->secs;
    3c9e:	80 81       	ld	r24, Z
    3ca0:	91 81       	ldd	r25, Z+1	; 0x01
    3ca2:	a2 81       	ldd	r26, Z+2	; 0x02
    3ca4:	b3 81       	ldd	r27, Z+3	; 0x03
    3ca6:	89 83       	std	Y+1, r24	; 0x01
    3ca8:	9a 83       	std	Y+2, r25	; 0x02
    3caa:	ab 83       	std	Y+3, r26	; 0x03
    3cac:	bc 83       	std	Y+4, r27	; 0x04
  tmp_time.nano_secs = period->nano_secs;
    3cae:	84 81       	ldd	r24, Z+4	; 0x04
    3cb0:	95 81       	ldd	r25, Z+5	; 0x05
    3cb2:	a6 81       	ldd	r26, Z+6	; 0x06
    3cb4:	b7 81       	ldd	r27, Z+7	; 0x07
    3cb6:	8d 83       	std	Y+5, r24	; 0x05
    3cb8:	9e 83       	std	Y+6, r25	; 0x06
    3cba:	af 83       	std	Y+7, r26	; 0x07
    3cbc:	b8 87       	std	Y+8, r27	; 0x08
  _nrk_reserve[id].period_ticks = _nrk_time_to_ticks_long (&tmp_time);
    3cbe:	ce 01       	movw	r24, r28
    3cc0:	01 96       	adiw	r24, 0x01	; 1
    3cc2:	0e 94 16 1a 	call	0x342c	; 0x342c <_nrk_time_to_ticks_long>
    3cc6:	f8 01       	movw	r30, r16
    3cc8:	60 83       	st	Z, r22
    3cca:	71 83       	std	Z+1, r23	; 0x01
    3ccc:	82 83       	std	Z+2, r24	; 0x02
    3cce:	93 83       	std	Z+3, r25	; 0x03
  _nrk_reserve[id].set_access = access_count;
    3cd0:	d5 86       	std	Z+13, r13	; 0x0d
    3cd2:	c4 86       	std	Z+12, r12	; 0x0c
  _nrk_reserve[id].cur_access = 0;
    3cd4:	17 86       	std	Z+15, r1	; 0x0f
    3cd6:	16 86       	std	Z+14, r1	; 0x0e

  nrk_time_get (&tmp_time);
    3cd8:	ce 01       	movw	r24, r28
    3cda:	01 96       	adiw	r24, 0x01	; 1
    3cdc:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <nrk_time_get>
  _nrk_reserve[id].cur_time = (uint32_t) _nrk_time_to_ticks_long (&tmp_time);
    3ce0:	ce 01       	movw	r24, r28
    3ce2:	01 96       	adiw	r24, 0x01	; 1
    3ce4:	0e 94 16 1a 	call	0x342c	; 0x342c <_nrk_time_to_ticks_long>
    3ce8:	f8 01       	movw	r30, r16
    3cea:	60 87       	std	Z+8, r22	; 0x08
    3cec:	71 87       	std	Z+9, r23	; 0x09
    3cee:	82 87       	std	Z+10, r24	; 0x0a
    3cf0:	93 87       	std	Z+11, r25	; 0x0b
  _nrk_reserve[id].set_time =
    _nrk_reserve[id].cur_time + _nrk_reserve[id].period_ticks;
    3cf2:	80 80       	ld	r8, Z
    3cf4:	91 80       	ldd	r9, Z+1	; 0x01
    3cf6:	a2 80       	ldd	r10, Z+2	; 0x02
    3cf8:	b3 80       	ldd	r11, Z+3	; 0x03
    3cfa:	dc 01       	movw	r26, r24
    3cfc:	cb 01       	movw	r24, r22
    3cfe:	88 0d       	add	r24, r8
    3d00:	99 1d       	adc	r25, r9
    3d02:	aa 1d       	adc	r26, r10
    3d04:	bb 1d       	adc	r27, r11
  _nrk_reserve[id].set_access = access_count;
  _nrk_reserve[id].cur_access = 0;

  nrk_time_get (&tmp_time);
  _nrk_reserve[id].cur_time = (uint32_t) _nrk_time_to_ticks_long (&tmp_time);
  _nrk_reserve[id].set_time =
    3d06:	84 83       	std	Z+4, r24	; 0x04
    3d08:	95 83       	std	Z+5, r25	; 0x05
    3d0a:	a6 83       	std	Z+6, r26	; 0x06
    3d0c:	b7 83       	std	Z+7, r27	; 0x07
    _nrk_reserve[id].cur_time + _nrk_reserve[id].period_ticks;
  _nrk_reserve[id].error = (void *) errhandler;
    3d0e:	f2 8a       	std	Z+18, r15	; 0x12
    3d10:	e1 8a       	std	Z+17, r14	; 0x11

  return NRK_OK;
    3d12:	81 e0       	ldi	r24, 0x01	; 1
    3d14:	01 c0       	rjmp	.+2      	; 0x3d18 <nrk_reserve_set+0xc4>
                        void *errhandler)
{
  nrk_time_t tmp_time;

  if (id >= NRK_MAX_RESERVES)
    return NRK_ERROR;
    3d16:	8f ef       	ldi	r24, 0xFF	; 255
  _nrk_reserve[id].set_time =
    _nrk_reserve[id].cur_time + _nrk_reserve[id].period_ticks;
  _nrk_reserve[id].error = (void *) errhandler;

  return NRK_OK;
}
    3d18:	28 96       	adiw	r28, 0x08	; 8
    3d1a:	0f b6       	in	r0, 0x3f	; 63
    3d1c:	f8 94       	cli
    3d1e:	de bf       	out	0x3e, r29	; 62
    3d20:	0f be       	out	0x3f, r0	; 63
    3d22:	cd bf       	out	0x3d, r28	; 61
    3d24:	df 91       	pop	r29
    3d26:	cf 91       	pop	r28
    3d28:	1f 91       	pop	r17
    3d2a:	0f 91       	pop	r16
    3d2c:	ff 90       	pop	r15
    3d2e:	ef 90       	pop	r14
    3d30:	df 90       	pop	r13
    3d32:	cf 90       	pop	r12
    3d34:	bf 90       	pop	r11
    3d36:	af 90       	pop	r10
    3d38:	9f 90       	pop	r9
    3d3a:	8f 90       	pop	r8
    3d3c:	08 95       	ret

00003d3e <nrk_spin_wait_us>:
	...
    3d56:	01 97       	sbiw	r24, 0x01	; 1
    3d58:	91 f7       	brne	.-28     	; 0x3d3e <nrk_spin_wait_us>
    3d5a:	08 95       	ret

00003d5c <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    3d5c:	10 92 21 01 	sts	0x0121, r1
    3d60:	08 95       	ret

00003d62 <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    3d62:	89 e0       	ldi	r24, 0x09	; 9
    3d64:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    3d68:	8d e8       	ldi	r24, 0x8D	; 141
    3d6a:	9c e3       	ldi	r25, 0x3C	; 60
    3d6c:	90 93 29 01 	sts	0x0129, r25
    3d70:	80 93 28 01 	sts	0x0128, r24
    3d74:	08 95       	ret

00003d76 <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3d76:	10 92 25 01 	sts	0x0125, r1
    3d7a:	10 92 24 01 	sts	0x0124, r1
    3d7e:	08 95       	ret

00003d80 <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    3d80:	cf 93       	push	r28
    3d82:	df 93       	push	r29
    3d84:	00 d0       	rcall	.+0      	; 0x3d86 <_nrk_precision_os_timer_get+0x6>
    3d86:	cd b7       	in	r28, 0x3d	; 61
    3d88:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    3d8a:	80 91 24 01 	lds	r24, 0x0124
    3d8e:	90 91 25 01 	lds	r25, 0x0125
    3d92:	9a 83       	std	Y+2, r25	; 0x02
    3d94:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3d9a:	0f 90       	pop	r0
    3d9c:	0f 90       	pop	r0
    3d9e:	df 91       	pop	r29
    3da0:	cf 91       	pop	r28
    3da2:	08 95       	ret

00003da4 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    3da4:	10 92 81 00 	sts	0x0081, r1
    3da8:	08 95       	ret

00003daa <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	80 93 81 00 	sts	0x0081, r24
    3db0:	08 95       	ret

00003db2 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3db2:	83 b5       	in	r24, 0x23	; 35
    3db4:	81 60       	ori	r24, 0x01	; 1
    3db6:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    3db8:	10 92 85 00 	sts	0x0085, r1
    3dbc:	10 92 84 00 	sts	0x0084, r1
    3dc0:	08 95       	ret

00003dc2 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    3dc2:	cf 93       	push	r28
    3dc4:	df 93       	push	r29
    3dc6:	00 d0       	rcall	.+0      	; 0x3dc8 <_nrk_high_speed_timer_get+0x6>
    3dc8:	cd b7       	in	r28, 0x3d	; 61
    3dca:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    3dcc:	80 91 84 00 	lds	r24, 0x0084
    3dd0:	90 91 85 00 	lds	r25, 0x0085
    3dd4:	9a 83       	std	Y+2, r25	; 0x02
    3dd6:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    3dd8:	89 81       	ldd	r24, Y+1	; 0x01
    3dda:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3ddc:	0f 90       	pop	r0
    3dde:	0f 90       	pop	r0
    3de0:	df 91       	pop	r29
    3de2:	cf 91       	pop	r28
    3de4:	08 95       	ret

00003de6 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    3de6:	cf 92       	push	r12
    3de8:	df 92       	push	r13
    3dea:	ef 92       	push	r14
    3dec:	ff 92       	push	r15
    3dee:	cf 93       	push	r28
    3df0:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    3df2:	ec 01       	movw	r28, r24
    3df4:	cc 0f       	add	r28, r28
    3df6:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    3df8:	c9 37       	cpi	r28, 0x79	; 121
    3dfa:	8f ef       	ldi	r24, 0xFF	; 255
    3dfc:	d8 07       	cpc	r29, r24
    3dfe:	10 f0       	brcs	.+4      	; 0x3e04 <nrk_high_speed_timer_wait+0x1e>
    3e00:	c0 e0       	ldi	r28, 0x00	; 0
    3e02:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    3e04:	6b 01       	movw	r12, r22
    3e06:	e1 2c       	mov	r14, r1
    3e08:	f1 2c       	mov	r15, r1
    3e0a:	cc 0e       	add	r12, r28
    3e0c:	dd 1e       	adc	r13, r29
    3e0e:	e1 1c       	adc	r14, r1
    3e10:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	c8 16       	cp	r12, r24
    3e16:	d1 04       	cpc	r13, r1
    3e18:	e8 06       	cpc	r14, r24
    3e1a:	f1 04       	cpc	r15, r1
    3e1c:	40 f0       	brcs	.+16     	; 0x3e2e <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    3e1e:	81 e0       	ldi	r24, 0x01	; 1
    3e20:	e8 1a       	sub	r14, r24
    3e22:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    3e24:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_nrk_high_speed_timer_get>
    3e28:	c8 17       	cp	r28, r24
    3e2a:	d9 07       	cpc	r29, r25
    3e2c:	d8 f3       	brcs	.-10     	; 0x3e24 <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    3e2e:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_nrk_high_speed_timer_get>
    3e32:	8c 15       	cp	r24, r12
    3e34:	9d 05       	cpc	r25, r13
    3e36:	d8 f3       	brcs	.-10     	; 0x3e2e <nrk_high_speed_timer_wait+0x48>
}
    3e38:	df 91       	pop	r29
    3e3a:	cf 91       	pop	r28
    3e3c:	ff 90       	pop	r15
    3e3e:	ef 90       	pop	r14
    3e40:	df 90       	pop	r13
    3e42:	cf 90       	pop	r12
    3e44:	08 95       	ret

00003e46 <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    3e46:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    3e4a:	e0 e7       	ldi	r30, 0x70	; 112
    3e4c:	f0 e0       	ldi	r31, 0x00	; 0
    3e4e:	80 81       	ld	r24, Z
    3e50:	8d 7f       	andi	r24, 0xFD	; 253
    3e52:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    3e54:	80 81       	ld	r24, Z
    3e56:	8e 7f       	andi	r24, 0xFE	; 254
    3e58:	80 83       	st	Z, r24
    3e5a:	08 95       	ret

00003e5c <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    3e5c:	80 93 b2 00 	sts	0x00B2, r24
    3e60:	08 95       	ret

00003e62 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    3e62:	e0 e7       	ldi	r30, 0x70	; 112
    3e64:	f0 e0       	ldi	r31, 0x00	; 0
    3e66:	80 81       	ld	r24, Z
    3e68:	83 60       	ori	r24, 0x03	; 3
    3e6a:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    3e6c:	83 e0       	ldi	r24, 0x03	; 3
    3e6e:	80 93 b1 00 	sts	0x00B1, r24
    3e72:	08 95       	ret

00003e74 <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    3e74:	83 b5       	in	r24, 0x23	; 35
    3e76:	82 60       	ori	r24, 0x02	; 2
    3e78:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    3e7a:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    3e7e:	10 92 ea 03 	sts	0x03EA, r1
    _nrk_prev_timer_val=0;
    3e82:	10 92 56 04 	sts	0x0456, r1
    3e86:	08 95       	ret

00003e88 <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    3e88:	cf 93       	push	r28
    3e8a:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    3e8c:	8e ef       	ldi	r24, 0xFE	; 254
    3e8e:	80 93 56 04 	sts	0x0456, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    3e92:	80 e2       	ldi	r24, 0x20	; 32
    3e94:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    3e98:	80 91 56 04 	lds	r24, 0x0456
    3e9c:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    3ea0:	83 e0       	ldi	r24, 0x03	; 3
    3ea2:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    3ea4:	92 e0       	ldi	r25, 0x02	; 2
    3ea6:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    3eaa:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    3eae:	93 b5       	in	r25, 0x23	; 35
    3eb0:	92 60       	ori	r25, 0x02	; 2
    3eb2:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    3eb4:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    3eb6:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    3eb8:	83 b5       	in	r24, 0x23	; 35
    3eba:	82 60       	ori	r24, 0x02	; 2
    3ebc:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    3ebe:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    3ec2:	81 e0       	ldi	r24, 0x01	; 1
    3ec4:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    3ec8:	10 92 85 00 	sts	0x0085, r1
    3ecc:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3ed0:	83 b5       	in	r24, 0x23	; 35
    3ed2:	82 60       	ori	r24, 0x02	; 2
    3ed4:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3ed6:	83 b5       	in	r24, 0x23	; 35
    3ed8:	81 60       	ori	r24, 0x01	; 1
    3eda:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    3edc:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    3ee0:	c4 e2       	ldi	r28, 0x24	; 36
    3ee2:	d1 e0       	ldi	r29, 0x01	; 1
    3ee4:	19 82       	std	Y+1, r1	; 0x01
    3ee6:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3ee8:	83 b5       	in	r24, 0x23	; 35
    3eea:	82 60       	ori	r24, 0x02	; 2
    3eec:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3eee:	83 b5       	in	r24, 0x23	; 35
    3ef0:	81 60       	ori	r24, 0x01	; 1
    3ef2:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    3ef4:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3ef8:	19 82       	std	Y+1, r1	; 0x01
    3efa:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    3efc:	0e 94 31 1f 	call	0x3e62	; 0x3e62 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    3f00:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    3f04:	10 92 ea 03 	sts	0x03EA, r1
}
    3f08:	df 91       	pop	r29
    3f0a:	cf 91       	pop	r28
    3f0c:	08 95       	ret

00003f0e <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    3f0e:	80 91 b3 00 	lds	r24, 0x00B3
}
    3f12:	8f 5f       	subi	r24, 0xFF	; 255
    3f14:	08 95       	ret

00003f16 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    3f16:	81 50       	subi	r24, 0x01	; 1
    3f18:	80 93 b3 00 	sts	0x00B3, r24
    3f1c:	08 95       	ret

00003f1e <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3f1e:	81 11       	cpse	r24, r1
    3f20:	02 c0       	rjmp	.+4      	; 0x3f26 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    3f22:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    3f26:	8f ef       	ldi	r24, 0xFF	; 255
    3f28:	08 95       	ret

00003f2a <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3f2a:	81 11       	cpse	r24, r1
    3f2c:	06 c0       	rjmp	.+12     	; 0x3f3a <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    3f2e:	10 92 95 00 	sts	0x0095, r1
    3f32:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    3f36:	81 e0       	ldi	r24, 0x01	; 1
    3f38:	08 95       	ret
	}
return NRK_ERROR;
    3f3a:	8f ef       	ldi	r24, 0xFF	; 255
}
    3f3c:	08 95       	ret

00003f3e <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3f3e:	81 11       	cpse	r24, r1
    3f40:	05 c0       	rjmp	.+10     	; 0x3f4c <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    3f42:	80 91 94 00 	lds	r24, 0x0094
    3f46:	90 91 95 00 	lds	r25, 0x0095
    3f4a:	08 95       	ret
	}
return 0;
    3f4c:	80 e0       	ldi	r24, 0x00	; 0
    3f4e:	90 e0       	ldi	r25, 0x00	; 0

}
    3f50:	08 95       	ret

00003f52 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    3f52:	81 11       	cpse	r24, r1
    3f54:	05 c0       	rjmp	.+10     	; 0x3f60 <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    3f56:	82 e0       	ldi	r24, 0x02	; 2
    3f58:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	08 95       	ret
	}
return NRK_ERROR;
    3f60:	8f ef       	ldi	r24, 0xFF	; 255
}
    3f62:	08 95       	ret

00003f64 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    3f64:	81 11       	cpse	r24, r1
    3f66:	35 c0       	rjmp	.+106    	; 0x3fd2 <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    3f68:	cb 01       	movw	r24, r22
    3f6a:	01 97       	sbiw	r24, 0x01	; 1
    3f6c:	05 97       	sbiw	r24, 0x05	; 5
    3f6e:	10 f4       	brcc	.+4      	; 0x3f74 <nrk_timer_int_configure+0x10>
    3f70:	60 93 55 04 	sts	0x0455, r22
	TCCR3A = 0;  
    3f74:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    3f78:	88 e0       	ldi	r24, 0x08	; 8
    3f7a:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    3f7e:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    3f82:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    3f86:	30 93 e7 03 	sts	0x03E7, r19
    3f8a:	20 93 e6 03 	sts	0x03E6, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    3f8e:	80 91 55 04 	lds	r24, 0x0455
    3f92:	81 30       	cpi	r24, 0x01	; 1
    3f94:	21 f4       	brne	.+8      	; 0x3f9e <nrk_timer_int_configure+0x3a>
    3f96:	80 91 91 00 	lds	r24, 0x0091
    3f9a:	81 60       	ori	r24, 0x01	; 1
    3f9c:	11 c0       	rjmp	.+34     	; 0x3fc0 <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    3f9e:	82 30       	cpi	r24, 0x02	; 2
    3fa0:	21 f4       	brne	.+8      	; 0x3faa <nrk_timer_int_configure+0x46>
    3fa2:	80 91 91 00 	lds	r24, 0x0091
    3fa6:	82 60       	ori	r24, 0x02	; 2
    3fa8:	0b c0       	rjmp	.+22     	; 0x3fc0 <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    3faa:	83 30       	cpi	r24, 0x03	; 3
    3fac:	21 f4       	brne	.+8      	; 0x3fb6 <nrk_timer_int_configure+0x52>
    3fae:	80 91 91 00 	lds	r24, 0x0091
    3fb2:	83 60       	ori	r24, 0x03	; 3
    3fb4:	05 c0       	rjmp	.+10     	; 0x3fc0 <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    3fb6:	84 30       	cpi	r24, 0x04	; 4
    3fb8:	31 f4       	brne	.+12     	; 0x3fc6 <nrk_timer_int_configure+0x62>
    3fba:	80 91 91 00 	lds	r24, 0x0091
    3fbe:	84 60       	ori	r24, 0x04	; 4
    3fc0:	80 93 91 00 	sts	0x0091, r24
    3fc4:	08 c0       	rjmp	.+16     	; 0x3fd6 <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    3fc6:	85 30       	cpi	r24, 0x05	; 5
    3fc8:	31 f4       	brne	.+12     	; 0x3fd6 <nrk_timer_int_configure+0x72>
    3fca:	80 91 91 00 	lds	r24, 0x0091
    3fce:	85 60       	ori	r24, 0x05	; 5
    3fd0:	f7 cf       	rjmp	.-18     	; 0x3fc0 <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    3fd2:	8f ef       	ldi	r24, 0xFF	; 255
    3fd4:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    3fd8:	08 95       	ret

00003fda <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    3fda:	80 91 b2 00 	lds	r24, 0x00B2
}
    3fde:	08 95       	ret

00003fe0 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    3fe0:	1f 92       	push	r1
    3fe2:	0f 92       	push	r0
    3fe4:	0f b6       	in	r0, 0x3f	; 63
    3fe6:	0f 92       	push	r0
    3fe8:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3fea:	60 e0       	ldi	r22, 0x00	; 0
    3fec:	8a e0       	ldi	r24, 0x0A	; 10
    3fee:	0e 94 99 10 	call	0x2132	; 0x2132 <nrk_kernel_error_add>
	while(1);
    3ff2:	ff cf       	rjmp	.-2      	; 0x3ff2 <__vector_default+0x12>

00003ff4 <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    3ff4:	0f 92       	push	r0
    3ff6:	0f b6       	in	r0, 0x3f	; 63
    3ff8:	0f 92       	push	r0
    3ffa:	1f 92       	push	r1
    3ffc:	2f 92       	push	r2
    3ffe:	3f 92       	push	r3
    4000:	4f 92       	push	r4
    4002:	5f 92       	push	r5
    4004:	6f 92       	push	r6
    4006:	7f 92       	push	r7
    4008:	8f 92       	push	r8
    400a:	9f 92       	push	r9
    400c:	af 92       	push	r10
    400e:	bf 92       	push	r11
    4010:	cf 92       	push	r12
    4012:	df 92       	push	r13
    4014:	ef 92       	push	r14
    4016:	ff 92       	push	r15
    4018:	0f 93       	push	r16
    401a:	1f 93       	push	r17
    401c:	2f 93       	push	r18
    401e:	3f 93       	push	r19
    4020:	4f 93       	push	r20
    4022:	5f 93       	push	r21
    4024:	6f 93       	push	r22
    4026:	7f 93       	push	r23
    4028:	8f 93       	push	r24
    402a:	9f 93       	push	r25
    402c:	af 93       	push	r26
    402e:	bf 93       	push	r27
    4030:	cf 93       	push	r28
    4032:	df 93       	push	r29
    4034:	ef 93       	push	r30
    4036:	ff 93       	push	r31
    4038:	a0 91 46 06 	lds	r26, 0x0646
    403c:	b0 91 47 06 	lds	r27, 0x0647
    4040:	0d b6       	in	r0, 0x3d	; 61
    4042:	0d 92       	st	X+, r0
    4044:	0e b6       	in	r0, 0x3e	; 62
    4046:	0d 92       	st	X+, r0
    4048:	1f 92       	push	r1
    404a:	a0 91 ef 03 	lds	r26, 0x03EF
    404e:	b0 91 f0 03 	lds	r27, 0x03F0
    4052:	1e 90       	ld	r1, -X
    4054:	be bf       	out	0x3e, r27	; 62
    4056:	ad bf       	out	0x3d, r26	; 61
    4058:	08 95       	ret

0000405a <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    405a:	1f 92       	push	r1
    405c:	0f 92       	push	r0
    405e:	0f b6       	in	r0, 0x3f	; 63
    4060:	0f 92       	push	r0
    4062:	11 24       	eor	r1, r1
    4064:	0b b6       	in	r0, 0x3b	; 59
    4066:	0f 92       	push	r0
    4068:	2f 93       	push	r18
    406a:	3f 93       	push	r19
    406c:	4f 93       	push	r20
    406e:	5f 93       	push	r21
    4070:	6f 93       	push	r22
    4072:	7f 93       	push	r23
    4074:	8f 93       	push	r24
    4076:	9f 93       	push	r25
    4078:	af 93       	push	r26
    407a:	bf 93       	push	r27
    407c:	ef 93       	push	r30
    407e:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    4080:	e0 91 e6 03 	lds	r30, 0x03E6
    4084:	f0 91 e7 03 	lds	r31, 0x03E7
    4088:	30 97       	sbiw	r30, 0x00	; 0
    408a:	11 f0       	breq	.+4      	; 0x4090 <__vector_32+0x36>
    408c:	09 95       	icall
    408e:	04 c0       	rjmp	.+8      	; 0x4098 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4090:	60 e0       	ldi	r22, 0x00	; 0
    4092:	8a e0       	ldi	r24, 0x0A	; 10
    4094:	0e 94 99 10 	call	0x2132	; 0x2132 <nrk_kernel_error_add>
	return;  	
}
    4098:	ff 91       	pop	r31
    409a:	ef 91       	pop	r30
    409c:	bf 91       	pop	r27
    409e:	af 91       	pop	r26
    40a0:	9f 91       	pop	r25
    40a2:	8f 91       	pop	r24
    40a4:	7f 91       	pop	r23
    40a6:	6f 91       	pop	r22
    40a8:	5f 91       	pop	r21
    40aa:	4f 91       	pop	r20
    40ac:	3f 91       	pop	r19
    40ae:	2f 91       	pop	r18
    40b0:	0f 90       	pop	r0
    40b2:	0b be       	out	0x3b, r0	; 59
    40b4:	0f 90       	pop	r0
    40b6:	0f be       	out	0x3f, r0	; 63
    40b8:	0f 90       	pop	r0
    40ba:	1f 90       	pop	r1
    40bc:	18 95       	reti

000040be <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    40be:	1f 92       	push	r1
    40c0:	0f 92       	push	r0
    40c2:	0f b6       	in	r0, 0x3f	; 63
    40c4:	0f 92       	push	r0
    40c6:	11 24       	eor	r1, r1

	return;  	
} 
    40c8:	0f 90       	pop	r0
    40ca:	0f be       	out	0x3f, r0	; 63
    40cc:	0f 90       	pop	r0
    40ce:	1f 90       	pop	r1
    40d0:	18 95       	reti

000040d2 <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    40d2:	04 b6       	in	r0, 0x34	; 52
    40d4:	03 fe       	sbrs	r0, 3
    40d6:	02 c0       	rjmp	.+4      	; 0x40dc <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    40d8:	80 e1       	ldi	r24, 0x10	; 16
    40da:	01 c0       	rjmp	.+2      	; 0x40de <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    40dc:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    40de:	04 b6       	in	r0, 0x34	; 52
    40e0:	02 fe       	sbrs	r0, 2
    40e2:	06 c0       	rjmp	.+12     	; 0x40f0 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    40e4:	94 b7       	in	r25, 0x34	; 52
    40e6:	9b 7f       	andi	r25, 0xFB	; 251
    40e8:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    40ea:	04 b6       	in	r0, 0x34	; 52
    40ec:	00 fe       	sbrs	r0, 0
		error|=0x04;
    40ee:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    40f0:	04 b6       	in	r0, 0x34	; 52
    40f2:	01 fe       	sbrs	r0, 1
    40f4:	05 c0       	rjmp	.+10     	; 0x4100 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    40f6:	94 b7       	in	r25, 0x34	; 52
    40f8:	9d 7f       	andi	r25, 0xFD	; 253
    40fa:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    40fc:	82 60       	ori	r24, 0x02	; 2
    40fe:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    4100:	81 11       	cpse	r24, r1
    4102:	0c c0       	rjmp	.+24     	; 0x411c <_nrk_startup_error+0x4a>


// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    4104:	04 b6       	in	r0, 0x34	; 52
    4106:	00 fe       	sbrs	r0, 0
    4108:	04 c0       	rjmp	.+8      	; 0x4112 <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    410a:	94 b7       	in	r25, 0x34	; 52
    410c:	9e 7f       	andi	r25, 0xFE	; 254
    410e:	94 bf       	out	0x34, r25	; 52
    4110:	01 c0       	rjmp	.+2      	; 0x4114 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    4112:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    4114:	90 91 b0 00 	lds	r25, 0x00B0
    4118:	91 11       	cpse	r25, r1
    411a:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    411c:	08 95       	ret

0000411e <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    411e:	81 11       	cpse	r24, r1
    4120:	02 c0       	rjmp	.+4      	; 0x4126 <nrk_ext_int_enable+0x8>
    4122:	e8 9a       	sbi	0x1d, 0	; 29
    4124:	39 c0       	rjmp	.+114    	; 0x4198 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    4126:	81 30       	cpi	r24, 0x01	; 1
    4128:	11 f4       	brne	.+4      	; 0x412e <nrk_ext_int_enable+0x10>
    412a:	e9 9a       	sbi	0x1d, 1	; 29
    412c:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    412e:	82 30       	cpi	r24, 0x02	; 2
    4130:	11 f4       	brne	.+4      	; 0x4136 <nrk_ext_int_enable+0x18>
    4132:	ea 9a       	sbi	0x1d, 2	; 29
    4134:	31 c0       	rjmp	.+98     	; 0x4198 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    4136:	83 30       	cpi	r24, 0x03	; 3
    4138:	21 f4       	brne	.+8      	; 0x4142 <nrk_ext_int_enable+0x24>
    413a:	80 91 6b 00 	lds	r24, 0x006B
    413e:	81 60       	ori	r24, 0x01	; 1
    4140:	29 c0       	rjmp	.+82     	; 0x4194 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    4142:	84 30       	cpi	r24, 0x04	; 4
    4144:	21 f4       	brne	.+8      	; 0x414e <nrk_ext_int_enable+0x30>
    4146:	80 91 6b 00 	lds	r24, 0x006B
    414a:	82 60       	ori	r24, 0x02	; 2
    414c:	23 c0       	rjmp	.+70     	; 0x4194 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    414e:	85 30       	cpi	r24, 0x05	; 5
    4150:	21 f4       	brne	.+8      	; 0x415a <nrk_ext_int_enable+0x3c>
    4152:	80 91 6b 00 	lds	r24, 0x006B
    4156:	84 60       	ori	r24, 0x04	; 4
    4158:	1d c0       	rjmp	.+58     	; 0x4194 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    415a:	86 30       	cpi	r24, 0x06	; 6
    415c:	21 f4       	brne	.+8      	; 0x4166 <nrk_ext_int_enable+0x48>
    415e:	80 91 6b 00 	lds	r24, 0x006B
    4162:	88 60       	ori	r24, 0x08	; 8
    4164:	17 c0       	rjmp	.+46     	; 0x4194 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    4166:	87 30       	cpi	r24, 0x07	; 7
    4168:	21 f4       	brne	.+8      	; 0x4172 <nrk_ext_int_enable+0x54>
    416a:	80 91 6b 00 	lds	r24, 0x006B
    416e:	80 61       	ori	r24, 0x10	; 16
    4170:	11 c0       	rjmp	.+34     	; 0x4194 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    4172:	88 30       	cpi	r24, 0x08	; 8
    4174:	21 f4       	brne	.+8      	; 0x417e <nrk_ext_int_enable+0x60>
    4176:	80 91 6b 00 	lds	r24, 0x006B
    417a:	80 62       	ori	r24, 0x20	; 32
    417c:	0b c0       	rjmp	.+22     	; 0x4194 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    417e:	89 30       	cpi	r24, 0x09	; 9
    4180:	21 f4       	brne	.+8      	; 0x418a <nrk_ext_int_enable+0x6c>
    4182:	80 91 6b 00 	lds	r24, 0x006B
    4186:	80 64       	ori	r24, 0x40	; 64
    4188:	05 c0       	rjmp	.+10     	; 0x4194 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    418a:	8a 30       	cpi	r24, 0x0A	; 10
    418c:	39 f4       	brne	.+14     	; 0x419c <nrk_ext_int_enable+0x7e>
    418e:	80 91 6b 00 	lds	r24, 0x006B
    4192:	80 68       	ori	r24, 0x80	; 128
    4194:	80 93 6b 00 	sts	0x006B, r24
    4198:	81 e0       	ldi	r24, 0x01	; 1
    419a:	08 95       	ret
return NRK_ERROR;
    419c:	8f ef       	ldi	r24, 0xFF	; 255
}
    419e:	08 95       	ret

000041a0 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    41a0:	81 11       	cpse	r24, r1
    41a2:	02 c0       	rjmp	.+4      	; 0x41a8 <nrk_ext_int_disable+0x8>
    41a4:	e8 98       	cbi	0x1d, 0	; 29
    41a6:	39 c0       	rjmp	.+114    	; 0x421a <__stack+0x1b>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    41a8:	81 30       	cpi	r24, 0x01	; 1
    41aa:	11 f4       	brne	.+4      	; 0x41b0 <nrk_ext_int_disable+0x10>
    41ac:	e9 98       	cbi	0x1d, 1	; 29
    41ae:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    41b0:	82 30       	cpi	r24, 0x02	; 2
    41b2:	11 f4       	brne	.+4      	; 0x41b8 <nrk_ext_int_disable+0x18>
    41b4:	e9 98       	cbi	0x1d, 1	; 29
    41b6:	31 c0       	rjmp	.+98     	; 0x421a <__stack+0x1b>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    41b8:	83 30       	cpi	r24, 0x03	; 3
    41ba:	21 f4       	brne	.+8      	; 0x41c4 <nrk_ext_int_disable+0x24>
    41bc:	80 91 6b 00 	lds	r24, 0x006B
    41c0:	8e 7f       	andi	r24, 0xFE	; 254
    41c2:	29 c0       	rjmp	.+82     	; 0x4216 <__stack+0x17>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    41c4:	84 30       	cpi	r24, 0x04	; 4
    41c6:	21 f4       	brne	.+8      	; 0x41d0 <nrk_ext_int_disable+0x30>
    41c8:	80 91 6b 00 	lds	r24, 0x006B
    41cc:	8d 7f       	andi	r24, 0xFD	; 253
    41ce:	23 c0       	rjmp	.+70     	; 0x4216 <__stack+0x17>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    41d0:	85 30       	cpi	r24, 0x05	; 5
    41d2:	21 f4       	brne	.+8      	; 0x41dc <nrk_ext_int_disable+0x3c>
    41d4:	80 91 6b 00 	lds	r24, 0x006B
    41d8:	8b 7f       	andi	r24, 0xFB	; 251
    41da:	1d c0       	rjmp	.+58     	; 0x4216 <__stack+0x17>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    41dc:	86 30       	cpi	r24, 0x06	; 6
    41de:	21 f4       	brne	.+8      	; 0x41e8 <nrk_ext_int_disable+0x48>
    41e0:	80 91 6b 00 	lds	r24, 0x006B
    41e4:	87 7f       	andi	r24, 0xF7	; 247
    41e6:	17 c0       	rjmp	.+46     	; 0x4216 <__stack+0x17>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    41e8:	87 30       	cpi	r24, 0x07	; 7
    41ea:	21 f4       	brne	.+8      	; 0x41f4 <nrk_ext_int_disable+0x54>
    41ec:	80 91 6b 00 	lds	r24, 0x006B
    41f0:	8f 7e       	andi	r24, 0xEF	; 239
    41f2:	11 c0       	rjmp	.+34     	; 0x4216 <__stack+0x17>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    41f4:	88 30       	cpi	r24, 0x08	; 8
    41f6:	21 f4       	brne	.+8      	; 0x4200 <__stack+0x1>
    41f8:	80 91 6b 00 	lds	r24, 0x006B
    41fc:	8f 7d       	andi	r24, 0xDF	; 223
    41fe:	0b c0       	rjmp	.+22     	; 0x4216 <__stack+0x17>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    4200:	89 30       	cpi	r24, 0x09	; 9
    4202:	21 f4       	brne	.+8      	; 0x420c <__stack+0xd>
    4204:	80 91 6b 00 	lds	r24, 0x006B
    4208:	8f 7b       	andi	r24, 0xBF	; 191
    420a:	05 c0       	rjmp	.+10     	; 0x4216 <__stack+0x17>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    420c:	8a 30       	cpi	r24, 0x0A	; 10
    420e:	39 f4       	brne	.+14     	; 0x421e <__stack+0x1f>
    4210:	80 91 6b 00 	lds	r24, 0x006B
    4214:	8f 77       	andi	r24, 0x7F	; 127
    4216:	80 93 6b 00 	sts	0x006B, r24
    421a:	81 e0       	ldi	r24, 0x01	; 1
    421c:	08 95       	ret
return NRK_ERROR;
    421e:	8f ef       	ldi	r24, 0xFF	; 255
}
    4220:	08 95       	ret

00004222 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    4222:	81 11       	cpse	r24, r1
    4224:	26 c0       	rjmp	.+76     	; 0x4272 <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    4226:	50 93 cf 06 	sts	0x06CF, r21
    422a:	40 93 ce 06 	sts	0x06CE, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    422e:	61 11       	cpse	r22, r1
    4230:	04 c0       	rjmp	.+8      	; 0x423a <nrk_ext_int_configure+0x18>
    4232:	80 91 69 00 	lds	r24, 0x0069
    4236:	8c 7f       	andi	r24, 0xFC	; 252
    4238:	3d c0       	rjmp	.+122    	; 0x42b4 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    423a:	61 30       	cpi	r22, 0x01	; 1
    423c:	49 f4       	brne	.+18     	; 0x4250 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    423e:	80 91 69 00 	lds	r24, 0x0069
    4242:	8d 7f       	andi	r24, 0xFD	; 253
    4244:	80 93 69 00 	sts	0x0069, r24
    4248:	80 91 69 00 	lds	r24, 0x0069
    424c:	81 60       	ori	r24, 0x01	; 1
    424e:	32 c0       	rjmp	.+100    	; 0x42b4 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4250:	62 30       	cpi	r22, 0x02	; 2
    4252:	49 f4       	brne	.+18     	; 0x4266 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    4254:	80 91 69 00 	lds	r24, 0x0069
    4258:	82 60       	ori	r24, 0x02	; 2
    425a:	80 93 69 00 	sts	0x0069, r24
    425e:	80 91 69 00 	lds	r24, 0x0069
    4262:	8e 7f       	andi	r24, 0xFE	; 254
    4264:	27 c0       	rjmp	.+78     	; 0x42b4 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    4266:	63 30       	cpi	r22, 0x03	; 3
    4268:	39 f5       	brne	.+78     	; 0x42b8 <nrk_ext_int_configure+0x96>
    426a:	80 91 69 00 	lds	r24, 0x0069
    426e:	83 60       	ori	r24, 0x03	; 3
    4270:	21 c0       	rjmp	.+66     	; 0x42b4 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    4272:	81 30       	cpi	r24, 0x01	; 1
    4274:	49 f5       	brne	.+82     	; 0x42c8 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    4276:	50 93 cd 06 	sts	0x06CD, r21
    427a:	40 93 cc 06 	sts	0x06CC, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    427e:	61 11       	cpse	r22, r1
    4280:	04 c0       	rjmp	.+8      	; 0x428a <nrk_ext_int_configure+0x68>
    4282:	80 91 69 00 	lds	r24, 0x0069
    4286:	83 7f       	andi	r24, 0xF3	; 243
    4288:	15 c0       	rjmp	.+42     	; 0x42b4 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    428a:	61 30       	cpi	r22, 0x01	; 1
    428c:	49 f4       	brne	.+18     	; 0x42a0 <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    428e:	80 91 69 00 	lds	r24, 0x0069
    4292:	87 7f       	andi	r24, 0xF7	; 247
    4294:	80 93 69 00 	sts	0x0069, r24
    4298:	80 91 69 00 	lds	r24, 0x0069
    429c:	84 60       	ori	r24, 0x04	; 4
    429e:	0a c0       	rjmp	.+20     	; 0x42b4 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    42a0:	62 30       	cpi	r22, 0x02	; 2
    42a2:	61 f4       	brne	.+24     	; 0x42bc <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    42a4:	80 91 69 00 	lds	r24, 0x0069
    42a8:	88 60       	ori	r24, 0x08	; 8
    42aa:	80 93 69 00 	sts	0x0069, r24
    42ae:	80 91 69 00 	lds	r24, 0x0069
    42b2:	8b 7f       	andi	r24, 0xFB	; 251
    42b4:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    42b8:	81 e0       	ldi	r24, 0x01	; 1
    42ba:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    42bc:	63 30       	cpi	r22, 0x03	; 3
    42be:	e1 f7       	brne	.-8      	; 0x42b8 <nrk_ext_int_configure+0x96>
    42c0:	80 91 69 00 	lds	r24, 0x0069
    42c4:	8c 60       	ori	r24, 0x0C	; 12
    42c6:	f6 cf       	rjmp	.-20     	; 0x42b4 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    42c8:	82 30       	cpi	r24, 0x02	; 2
    42ca:	31 f5       	brne	.+76     	; 0x4318 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    42cc:	50 93 d1 06 	sts	0x06D1, r21
    42d0:	40 93 d0 06 	sts	0x06D0, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    42d4:	61 11       	cpse	r22, r1
    42d6:	04 c0       	rjmp	.+8      	; 0x42e0 <nrk_ext_int_configure+0xbe>
    42d8:	80 91 69 00 	lds	r24, 0x0069
    42dc:	8f 7c       	andi	r24, 0xCF	; 207
    42de:	ea cf       	rjmp	.-44     	; 0x42b4 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    42e0:	61 30       	cpi	r22, 0x01	; 1
    42e2:	49 f4       	brne	.+18     	; 0x42f6 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    42e4:	80 91 69 00 	lds	r24, 0x0069
    42e8:	8f 7d       	andi	r24, 0xDF	; 223
    42ea:	80 93 69 00 	sts	0x0069, r24
    42ee:	80 91 69 00 	lds	r24, 0x0069
    42f2:	80 61       	ori	r24, 0x10	; 16
    42f4:	df cf       	rjmp	.-66     	; 0x42b4 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    42f6:	62 30       	cpi	r22, 0x02	; 2
    42f8:	49 f4       	brne	.+18     	; 0x430c <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    42fa:	80 91 69 00 	lds	r24, 0x0069
    42fe:	80 62       	ori	r24, 0x20	; 32
    4300:	80 93 69 00 	sts	0x0069, r24
    4304:	80 91 69 00 	lds	r24, 0x0069
    4308:	8f 7e       	andi	r24, 0xEF	; 239
    430a:	d4 cf       	rjmp	.-88     	; 0x42b4 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    430c:	63 30       	cpi	r22, 0x03	; 3
    430e:	a1 f6       	brne	.-88     	; 0x42b8 <nrk_ext_int_configure+0x96>
    4310:	80 91 69 00 	lds	r24, 0x0069
    4314:	80 63       	ori	r24, 0x30	; 48
    4316:	ce cf       	rjmp	.-100    	; 0x42b4 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    4318:	83 50       	subi	r24, 0x03	; 3
    431a:	88 30       	cpi	r24, 0x08	; 8
    431c:	50 f4       	brcc	.+20     	; 0x4332 <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    431e:	80 91 68 00 	lds	r24, 0x0068
    4322:	81 60       	ori	r24, 0x01	; 1
    4324:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    4328:	50 93 d3 06 	sts	0x06D3, r21
    432c:	40 93 d2 06 	sts	0x06D2, r20
    4330:	c3 cf       	rjmp	.-122    	; 0x42b8 <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    4332:	8f ef       	ldi	r24, 0xFF	; 255
}
    4334:	08 95       	ret

00004336 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    4336:	1f 92       	push	r1
    4338:	0f 92       	push	r0
    433a:	0f b6       	in	r0, 0x3f	; 63
    433c:	0f 92       	push	r0
    433e:	11 24       	eor	r1, r1
    4340:	0b b6       	in	r0, 0x3b	; 59
    4342:	0f 92       	push	r0
    4344:	2f 93       	push	r18
    4346:	3f 93       	push	r19
    4348:	4f 93       	push	r20
    434a:	5f 93       	push	r21
    434c:	6f 93       	push	r22
    434e:	7f 93       	push	r23
    4350:	8f 93       	push	r24
    4352:	9f 93       	push	r25
    4354:	af 93       	push	r26
    4356:	bf 93       	push	r27
    4358:	ef 93       	push	r30
    435a:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    435c:	e0 91 d2 06 	lds	r30, 0x06D2
    4360:	f0 91 d3 06 	lds	r31, 0x06D3
    4364:	30 97       	sbiw	r30, 0x00	; 0
    4366:	11 f0       	breq	.+4      	; 0x436c <__vector_9+0x36>
    4368:	09 95       	icall
    436a:	04 c0       	rjmp	.+8      	; 0x4374 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    436c:	60 e0       	ldi	r22, 0x00	; 0
    436e:	8a e0       	ldi	r24, 0x0A	; 10
    4370:	0e 94 99 10 	call	0x2132	; 0x2132 <nrk_kernel_error_add>
	return;  	
}
    4374:	ff 91       	pop	r31
    4376:	ef 91       	pop	r30
    4378:	bf 91       	pop	r27
    437a:	af 91       	pop	r26
    437c:	9f 91       	pop	r25
    437e:	8f 91       	pop	r24
    4380:	7f 91       	pop	r23
    4382:	6f 91       	pop	r22
    4384:	5f 91       	pop	r21
    4386:	4f 91       	pop	r20
    4388:	3f 91       	pop	r19
    438a:	2f 91       	pop	r18
    438c:	0f 90       	pop	r0
    438e:	0b be       	out	0x3b, r0	; 59
    4390:	0f 90       	pop	r0
    4392:	0f be       	out	0x3f, r0	; 63
    4394:	0f 90       	pop	r0
    4396:	1f 90       	pop	r1
    4398:	18 95       	reti

0000439a <__vector_1>:


SIGNAL(INT0_vect) {
    439a:	1f 92       	push	r1
    439c:	0f 92       	push	r0
    439e:	0f b6       	in	r0, 0x3f	; 63
    43a0:	0f 92       	push	r0
    43a2:	11 24       	eor	r1, r1
    43a4:	0b b6       	in	r0, 0x3b	; 59
    43a6:	0f 92       	push	r0
    43a8:	2f 93       	push	r18
    43aa:	3f 93       	push	r19
    43ac:	4f 93       	push	r20
    43ae:	5f 93       	push	r21
    43b0:	6f 93       	push	r22
    43b2:	7f 93       	push	r23
    43b4:	8f 93       	push	r24
    43b6:	9f 93       	push	r25
    43b8:	af 93       	push	r26
    43ba:	bf 93       	push	r27
    43bc:	ef 93       	push	r30
    43be:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    43c0:	e0 91 ce 06 	lds	r30, 0x06CE
    43c4:	f0 91 cf 06 	lds	r31, 0x06CF
    43c8:	30 97       	sbiw	r30, 0x00	; 0
    43ca:	11 f0       	breq	.+4      	; 0x43d0 <__vector_1+0x36>
    43cc:	09 95       	icall
    43ce:	04 c0       	rjmp	.+8      	; 0x43d8 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    43d0:	60 e0       	ldi	r22, 0x00	; 0
    43d2:	8a e0       	ldi	r24, 0x0A	; 10
    43d4:	0e 94 99 10 	call	0x2132	; 0x2132 <nrk_kernel_error_add>
	return;  	
}
    43d8:	ff 91       	pop	r31
    43da:	ef 91       	pop	r30
    43dc:	bf 91       	pop	r27
    43de:	af 91       	pop	r26
    43e0:	9f 91       	pop	r25
    43e2:	8f 91       	pop	r24
    43e4:	7f 91       	pop	r23
    43e6:	6f 91       	pop	r22
    43e8:	5f 91       	pop	r21
    43ea:	4f 91       	pop	r20
    43ec:	3f 91       	pop	r19
    43ee:	2f 91       	pop	r18
    43f0:	0f 90       	pop	r0
    43f2:	0b be       	out	0x3b, r0	; 59
    43f4:	0f 90       	pop	r0
    43f6:	0f be       	out	0x3f, r0	; 63
    43f8:	0f 90       	pop	r0
    43fa:	1f 90       	pop	r1
    43fc:	18 95       	reti

000043fe <__vector_2>:

SIGNAL(INT1_vect) {
    43fe:	1f 92       	push	r1
    4400:	0f 92       	push	r0
    4402:	0f b6       	in	r0, 0x3f	; 63
    4404:	0f 92       	push	r0
    4406:	11 24       	eor	r1, r1
    4408:	0b b6       	in	r0, 0x3b	; 59
    440a:	0f 92       	push	r0
    440c:	2f 93       	push	r18
    440e:	3f 93       	push	r19
    4410:	4f 93       	push	r20
    4412:	5f 93       	push	r21
    4414:	6f 93       	push	r22
    4416:	7f 93       	push	r23
    4418:	8f 93       	push	r24
    441a:	9f 93       	push	r25
    441c:	af 93       	push	r26
    441e:	bf 93       	push	r27
    4420:	ef 93       	push	r30
    4422:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    4424:	e0 91 cc 06 	lds	r30, 0x06CC
    4428:	f0 91 cd 06 	lds	r31, 0x06CD
    442c:	30 97       	sbiw	r30, 0x00	; 0
    442e:	11 f0       	breq	.+4      	; 0x4434 <__vector_2+0x36>
    4430:	09 95       	icall
    4432:	04 c0       	rjmp	.+8      	; 0x443c <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4434:	60 e0       	ldi	r22, 0x00	; 0
    4436:	8a e0       	ldi	r24, 0x0A	; 10
    4438:	0e 94 99 10 	call	0x2132	; 0x2132 <nrk_kernel_error_add>
	return;  	
}
    443c:	ff 91       	pop	r31
    443e:	ef 91       	pop	r30
    4440:	bf 91       	pop	r27
    4442:	af 91       	pop	r26
    4444:	9f 91       	pop	r25
    4446:	8f 91       	pop	r24
    4448:	7f 91       	pop	r23
    444a:	6f 91       	pop	r22
    444c:	5f 91       	pop	r21
    444e:	4f 91       	pop	r20
    4450:	3f 91       	pop	r19
    4452:	2f 91       	pop	r18
    4454:	0f 90       	pop	r0
    4456:	0b be       	out	0x3b, r0	; 59
    4458:	0f 90       	pop	r0
    445a:	0f be       	out	0x3f, r0	; 63
    445c:	0f 90       	pop	r0
    445e:	1f 90       	pop	r1
    4460:	18 95       	reti

00004462 <__vector_3>:

SIGNAL(INT2_vect) {
    4462:	1f 92       	push	r1
    4464:	0f 92       	push	r0
    4466:	0f b6       	in	r0, 0x3f	; 63
    4468:	0f 92       	push	r0
    446a:	11 24       	eor	r1, r1
    446c:	0b b6       	in	r0, 0x3b	; 59
    446e:	0f 92       	push	r0
    4470:	2f 93       	push	r18
    4472:	3f 93       	push	r19
    4474:	4f 93       	push	r20
    4476:	5f 93       	push	r21
    4478:	6f 93       	push	r22
    447a:	7f 93       	push	r23
    447c:	8f 93       	push	r24
    447e:	9f 93       	push	r25
    4480:	af 93       	push	r26
    4482:	bf 93       	push	r27
    4484:	ef 93       	push	r30
    4486:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    4488:	e0 91 d0 06 	lds	r30, 0x06D0
    448c:	f0 91 d1 06 	lds	r31, 0x06D1
    4490:	30 97       	sbiw	r30, 0x00	; 0
    4492:	11 f0       	breq	.+4      	; 0x4498 <__vector_3+0x36>
    4494:	09 95       	icall
    4496:	04 c0       	rjmp	.+8      	; 0x44a0 <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4498:	60 e0       	ldi	r22, 0x00	; 0
    449a:	8a e0       	ldi	r24, 0x0A	; 10
    449c:	0e 94 99 10 	call	0x2132	; 0x2132 <nrk_kernel_error_add>
	return;  	
}
    44a0:	ff 91       	pop	r31
    44a2:	ef 91       	pop	r30
    44a4:	bf 91       	pop	r27
    44a6:	af 91       	pop	r26
    44a8:	9f 91       	pop	r25
    44aa:	8f 91       	pop	r24
    44ac:	7f 91       	pop	r23
    44ae:	6f 91       	pop	r22
    44b0:	5f 91       	pop	r21
    44b2:	4f 91       	pop	r20
    44b4:	3f 91       	pop	r19
    44b6:	2f 91       	pop	r18
    44b8:	0f 90       	pop	r0
    44ba:	0b be       	out	0x3b, r0	; 59
    44bc:	0f 90       	pop	r0
    44be:	0f be       	out	0x3f, r0	; 63
    44c0:	0f 90       	pop	r0
    44c2:	1f 90       	pop	r1
    44c4:	18 95       	reti

000044c6 <nrk_watchdog_disable>:
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    44c6:	a8 95       	wdr
#include <util/atomic.h>

void nrk_watchdog_disable()
{
nrk_watchdog_reset();
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    44c8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    44ca:	f8 94       	cli
{
	MCUSR &= ~(1<<WDRF);
    44cc:	84 b7       	in	r24, 0x34	; 52
    44ce:	87 7f       	andi	r24, 0xF7	; 247
    44d0:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE) | (1<<WDE);
    44d2:	e0 e6       	ldi	r30, 0x60	; 96
    44d4:	f0 e0       	ldi	r31, 0x00	; 0
    44d6:	80 81       	ld	r24, Z
    44d8:	88 61       	ori	r24, 0x18	; 24
    44da:	80 83       	st	Z, r24
	WDTCSR = 0;
    44dc:	10 82       	st	Z, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    44de:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    44e0:	08 95       	ret

000044e2 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    44e2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    44e4:	f8 94       	cli
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    44e6:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
{
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    44e8:	84 b7       	in	r24, 0x34	; 52
    44ea:	87 7f       	andi	r24, 0xF7	; 247
    44ec:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    44ee:	e0 e6       	ldi	r30, 0x60	; 96
    44f0:	f0 e0       	ldi	r31, 0x00	; 0
    44f2:	80 81       	ld	r24, Z
    44f4:	88 61       	ori	r24, 0x18	; 24
    44f6:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    44f8:	8d e0       	ldi	r24, 0x0D	; 13
    44fa:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    44fc:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    44fe:	08 95       	ret

00004500 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4500:	04 b6       	in	r0, 0x34	; 52
    4502:	03 fe       	sbrs	r0, 3
    4504:	02 c0       	rjmp	.+4      	; 0x450a <nrk_watchdog_check+0xa>
return NRK_ERROR;
    4506:	8f ef       	ldi	r24, 0xFF	; 255
    4508:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    450a:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    450c:	08 95       	ret

0000450e <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    450e:	a8 95       	wdr
    4510:	08 95       	ret

00004512 <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    4512:	08 95       	ret

00004514 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    4514:	83 b7       	in	r24, 0x33	; 51
    4516:	81 7f       	andi	r24, 0xF1	; 241
    4518:	86 60       	ori	r24, 0x06	; 6
    451a:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    451c:	83 b7       	in	r24, 0x33	; 51
    451e:	81 60       	ori	r24, 0x01	; 1
    4520:	83 bf       	out	0x33, r24	; 51
    4522:	88 95       	sleep
    4524:	83 b7       	in	r24, 0x33	; 51
    4526:	8e 7f       	andi	r24, 0xFE	; 254
    4528:	83 bf       	out	0x33, r24	; 51
    452a:	08 95       	ret

0000452c <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    452c:	83 b7       	in	r24, 0x33	; 51
    452e:	81 7f       	andi	r24, 0xF1	; 241
    4530:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4532:	83 b7       	in	r24, 0x33	; 51
    4534:	81 60       	ori	r24, 0x01	; 1
    4536:	83 bf       	out	0x33, r24	; 51
    4538:	88 95       	sleep
    453a:	83 b7       	in	r24, 0x33	; 51
    453c:	8e 7f       	andi	r24, 0xFE	; 254
    453e:	83 bf       	out	0x33, r24	; 51
    4540:	08 95       	ret

00004542 <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    4542:	fc 01       	movw	r30, r24
    4544:	76 83       	std	Z+6, r23	; 0x06
    4546:	65 83       	std	Z+5, r22	; 0x05
    4548:	08 95       	ret

0000454a <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    454a:	ef 92       	push	r14
    454c:	ff 92       	push	r15
    454e:	0f 93       	push	r16
    4550:	1f 93       	push	r17
    4552:	cf 93       	push	r28
    4554:	df 93       	push	r29
    4556:	8c 01       	movw	r16, r24
    4558:	7b 01       	movw	r14, r22
    455a:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    455c:	40 32       	cpi	r20, 0x20	; 32
    455e:	51 05       	cpc	r21, r1
    4560:	18 f4       	brcc	.+6      	; 0x4568 <nrk_task_set_stk+0x1e>
    4562:	81 e1       	ldi	r24, 0x11	; 17
    4564:	0e 94 8b 10 	call	0x2116	; 0x2116 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    4568:	21 97       	sbiw	r28, 0x01	; 1
    456a:	ce 0d       	add	r28, r14
    456c:	df 1d       	adc	r29, r15
    456e:	f8 01       	movw	r30, r16
    4570:	d2 83       	std	Z+2, r29	; 0x02
    4572:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    4574:	f4 82       	std	Z+4, r15	; 0x04
    4576:	e3 82       	std	Z+3, r14	; 0x03

}
    4578:	df 91       	pop	r29
    457a:	cf 91       	pop	r28
    457c:	1f 91       	pop	r17
    457e:	0f 91       	pop	r16
    4580:	ff 90       	pop	r15
    4582:	ef 90       	pop	r14
    4584:	08 95       	ret

00004586 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    4586:	25 e5       	ldi	r18, 0x55	; 85
    4588:	fa 01       	movw	r30, r20
    458a:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    458c:	fb 01       	movw	r30, r22
    458e:	32 97       	sbiw	r30, 0x02	; 2
    4590:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    4592:	31 96       	adiw	r30, 0x01	; 1
    4594:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    4596:	33 97       	sbiw	r30, 0x03	; 3
    4598:	11 82       	std	Z+1, r1	; 0x01
    459a:	10 82       	st	Z, r1
    *(--stk) = 0;       
    459c:	32 97       	sbiw	r30, 0x02	; 2
    459e:	11 82       	std	Z+1, r1	; 0x01
    45a0:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    45a2:	32 97       	sbiw	r30, 0x02	; 2
    45a4:	11 82       	std	Z+1, r1	; 0x01
    45a6:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    45a8:	32 97       	sbiw	r30, 0x02	; 2
    45aa:	11 82       	std	Z+1, r1	; 0x01
    45ac:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    45ae:	32 97       	sbiw	r30, 0x02	; 2
    45b0:	11 82       	std	Z+1, r1	; 0x01
    45b2:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    45b4:	32 97       	sbiw	r30, 0x02	; 2
    45b6:	11 82       	std	Z+1, r1	; 0x01
    45b8:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    45ba:	32 97       	sbiw	r30, 0x02	; 2
    45bc:	11 82       	std	Z+1, r1	; 0x01
    45be:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45c0:	32 97       	sbiw	r30, 0x02	; 2
    45c2:	11 82       	std	Z+1, r1	; 0x01
    45c4:	10 82       	st	Z, r1

    *(--stk) = 0; 
    45c6:	32 97       	sbiw	r30, 0x02	; 2
    45c8:	11 82       	std	Z+1, r1	; 0x01
    45ca:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45cc:	32 97       	sbiw	r30, 0x02	; 2
    45ce:	11 82       	std	Z+1, r1	; 0x01
    45d0:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45d2:	32 97       	sbiw	r30, 0x02	; 2
    45d4:	11 82       	std	Z+1, r1	; 0x01
    45d6:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45d8:	32 97       	sbiw	r30, 0x02	; 2
    45da:	11 82       	std	Z+1, r1	; 0x01
    45dc:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45de:	32 97       	sbiw	r30, 0x02	; 2
    45e0:	11 82       	std	Z+1, r1	; 0x01
    45e2:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45e4:	32 97       	sbiw	r30, 0x02	; 2
    45e6:	11 82       	std	Z+1, r1	; 0x01
    45e8:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45ea:	32 97       	sbiw	r30, 0x02	; 2
    45ec:	11 82       	std	Z+1, r1	; 0x01
    45ee:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45f0:	32 97       	sbiw	r30, 0x02	; 2
    45f2:	11 82       	std	Z+1, r1	; 0x01
    45f4:	10 82       	st	Z, r1
    *(--stk) = 0;
    45f6:	cb 01       	movw	r24, r22
    45f8:	84 97       	sbiw	r24, 0x24	; 36
    45fa:	fc 01       	movw	r30, r24
    45fc:	11 82       	std	Z+1, r1	; 0x01
    45fe:	10 82       	st	Z, r1


    return ((void *)stk);
}
    4600:	08 95       	ret

00004602 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    4602:	85 e5       	ldi	r24, 0x55	; 85
    4604:	80 93 fe 3f 	sts	0x3FFE, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    4608:	ee ef       	ldi	r30, 0xFE	; 254
    460a:	f1 e4       	ldi	r31, 0x41	; 65
    460c:	f0 93 f0 03 	sts	0x03F0, r31
    4610:	e0 93 ef 03 	sts	0x03EF, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4614:	89 ea       	ldi	r24, 0xA9	; 169
    4616:	9e e0       	ldi	r25, 0x0E	; 14
    4618:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    461a:	80 93 ff 41 	sts	0x41FF, r24
    461e:	08 95       	ret

00004620 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4620:	89 ea       	ldi	r24, 0xA9	; 169
    4622:	9e e0       	ldi	r25, 0x0E	; 14
    4624:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4628:	80 93 ff 41 	sts	0x41FF, r24
    462c:	08 95       	ret

0000462e <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    462e:	0e 94 44 1f 	call	0x3e88	; 0x3e88 <_nrk_setup_timer>
  nrk_int_enable();  
    4632:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <nrk_int_enable>

00004636 <nrk_start_high_ready_task>:
    4636:	a0 91 37 06 	lds	r26, 0x0637
    463a:	b0 91 38 06 	lds	r27, 0x0638
    463e:	cd 91       	ld	r28, X+
    4640:	cd bf       	out	0x3d, r28	; 61
    4642:	dd 91       	ld	r29, X+
    4644:	de bf       	out	0x3e, r29	; 62
    4646:	ff 91       	pop	r31
    4648:	ef 91       	pop	r30
    464a:	df 91       	pop	r29
    464c:	cf 91       	pop	r28
    464e:	bf 91       	pop	r27
    4650:	af 91       	pop	r26
    4652:	9f 91       	pop	r25
    4654:	8f 91       	pop	r24
    4656:	7f 91       	pop	r23
    4658:	6f 91       	pop	r22
    465a:	5f 91       	pop	r21
    465c:	4f 91       	pop	r20
    465e:	3f 91       	pop	r19
    4660:	2f 91       	pop	r18
    4662:	1f 91       	pop	r17
    4664:	0f 91       	pop	r16
    4666:	ff 90       	pop	r15
    4668:	ef 90       	pop	r14
    466a:	df 90       	pop	r13
    466c:	cf 90       	pop	r12
    466e:	bf 90       	pop	r11
    4670:	af 90       	pop	r10
    4672:	9f 90       	pop	r9
    4674:	8f 90       	pop	r8
    4676:	7f 90       	pop	r7
    4678:	6f 90       	pop	r6
    467a:	5f 90       	pop	r5
    467c:	4f 90       	pop	r4
    467e:	3f 90       	pop	r3
    4680:	2f 90       	pop	r2
    4682:	1f 90       	pop	r1
    4684:	0f 90       	pop	r0
    4686:	0f be       	out	0x3f, r0	; 63
    4688:	0f 90       	pop	r0
    468a:	18 95       	reti

0000468c <main>:
}

void main(){
	nrk_setup_ports();
    468c:	0e 94 a6 08 	call	0x114c	; 0x114c <nrk_setup_ports>
	nrk_setup_uart(UART_BAUDRATE_115K2);
    4690:	80 e1       	ldi	r24, 0x10	; 16
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	0e 94 2a 0c 	call	0x1854	; 0x1854 <nrk_setup_uart>
	nrk_init();
    4698:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <nrk_init>
	nrk_int_enable();
    469c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <nrk_int_enable>
	pRRI.ackRequest = 0;
    46a0:	10 92 5e 04 	sts	0x045E, r1
	pRRI.max_length = 100;
    46a4:	84 e6       	ldi	r24, 0x64	; 100
    46a6:	80 93 5b 04 	sts	0x045B, r24
	pRRI.pPayload = buf;
    46aa:	81 ef       	ldi	r24, 0xF1	; 241
    46ac:	93 e0       	ldi	r25, 0x03	; 3
    46ae:	90 93 5d 04 	sts	0x045D, r25
    46b2:	80 93 5c 04 	sts	0x045C, r24
	rf_power_up();
    46b6:	0e 94 95 02 	call	0x52a	; 0x52a <rf_power_up>
	rf_init(&pRRI, 13, 0xFFFF, 0x0);
    46ba:	20 e0       	ldi	r18, 0x00	; 0
    46bc:	30 e0       	ldi	r19, 0x00	; 0
    46be:	4f ef       	ldi	r20, 0xFF	; 255
    46c0:	5f ef       	ldi	r21, 0xFF	; 255
    46c2:	6d e0       	ldi	r22, 0x0D	; 13
    46c4:	87 e5       	ldi	r24, 0x57	; 87
    46c6:	94 e0       	ldi	r25, 0x04	; 4
    46c8:	0e 94 f5 02 	call	0x5ea	; 0x5ea <rf_init>
	rx_start_callback(rf_start_callback);
    46cc:	85 e3       	ldi	r24, 0x35	; 53
    46ce:	92 e0       	ldi	r25, 0x02	; 2
    46d0:	0e 94 e6 02 	call	0x5cc	; 0x5cc <rx_start_callback>
	rx_end_callback(rf_finish_callback);
    46d4:	8d e3       	ldi	r24, 0x3D	; 61
    46d6:	92 e0       	ldi	r25, 0x02	; 2
    46d8:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <rx_end_callback>
	rf_rx_on();
    46dc:	0e 94 65 03 	call	0x6ca	; 0x6ca <rf_rx_on>
	printf("finished initialization\r\n");
    46e0:	83 e9       	ldi	r24, 0x93	; 147
    46e2:	92 e0       	ldi	r25, 0x02	; 2
    46e4:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <puts>
	while (1){
		continue;
	}
    46e8:	ff cf       	rjmp	.-2      	; 0x46e8 <main+0x5c>

000046ea <vfprintf>:
    46ea:	6f 92       	push	r6
    46ec:	7f 92       	push	r7
    46ee:	8f 92       	push	r8
    46f0:	9f 92       	push	r9
    46f2:	af 92       	push	r10
    46f4:	bf 92       	push	r11
    46f6:	cf 92       	push	r12
    46f8:	df 92       	push	r13
    46fa:	ef 92       	push	r14
    46fc:	ff 92       	push	r15
    46fe:	0f 93       	push	r16
    4700:	1f 93       	push	r17
    4702:	cf 93       	push	r28
    4704:	df 93       	push	r29
    4706:	cd b7       	in	r28, 0x3d	; 61
    4708:	de b7       	in	r29, 0x3e	; 62
    470a:	2c 97       	sbiw	r28, 0x0c	; 12
    470c:	0f b6       	in	r0, 0x3f	; 63
    470e:	f8 94       	cli
    4710:	de bf       	out	0x3e, r29	; 62
    4712:	0f be       	out	0x3f, r0	; 63
    4714:	cd bf       	out	0x3d, r28	; 61
    4716:	6c 01       	movw	r12, r24
    4718:	5b 01       	movw	r10, r22
    471a:	7a 01       	movw	r14, r20
    471c:	fc 01       	movw	r30, r24
    471e:	17 82       	std	Z+7, r1	; 0x07
    4720:	16 82       	std	Z+6, r1	; 0x06
    4722:	83 81       	ldd	r24, Z+3	; 0x03
    4724:	81 ff       	sbrs	r24, 1
    4726:	0e c1       	rjmp	.+540    	; 0x4944 <vfprintf+0x25a>
    4728:	ce 01       	movw	r24, r28
    472a:	01 96       	adiw	r24, 0x01	; 1
    472c:	4c 01       	movw	r8, r24
    472e:	f6 01       	movw	r30, r12
    4730:	03 81       	ldd	r16, Z+3	; 0x03
    4732:	f5 01       	movw	r30, r10
    4734:	03 fd       	sbrc	r16, 3
    4736:	15 91       	lpm	r17, Z+
    4738:	03 ff       	sbrs	r16, 3
    473a:	11 91       	ld	r17, Z+
    473c:	5f 01       	movw	r10, r30
    473e:	11 23       	and	r17, r17
    4740:	09 f4       	brne	.+2      	; 0x4744 <vfprintf+0x5a>
    4742:	fc c0       	rjmp	.+504    	; 0x493c <vfprintf+0x252>
    4744:	15 32       	cpi	r17, 0x25	; 37
    4746:	49 f4       	brne	.+18     	; 0x475a <vfprintf+0x70>
    4748:	03 fd       	sbrc	r16, 3
    474a:	15 91       	lpm	r17, Z+
    474c:	03 ff       	sbrs	r16, 3
    474e:	11 91       	ld	r17, Z+
    4750:	5f 01       	movw	r10, r30
    4752:	15 32       	cpi	r17, 0x25	; 37
    4754:	11 f0       	breq	.+4      	; 0x475a <vfprintf+0x70>
    4756:	20 e0       	ldi	r18, 0x00	; 0
    4758:	1b c0       	rjmp	.+54     	; 0x4790 <vfprintf+0xa6>
    475a:	b6 01       	movw	r22, r12
    475c:	81 2f       	mov	r24, r17
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	0e 94 dd 25 	call	0x4bba	; 0x4bba <fputc>
    4764:	37 01       	movw	r6, r14
    4766:	73 01       	movw	r14, r6
    4768:	e2 cf       	rjmp	.-60     	; 0x472e <vfprintf+0x44>
    476a:	11 23       	and	r17, r17
    476c:	09 f4       	brne	.+2      	; 0x4770 <vfprintf+0x86>
    476e:	e6 c0       	rjmp	.+460    	; 0x493c <vfprintf+0x252>
    4770:	61 2f       	mov	r22, r17
    4772:	70 e0       	ldi	r23, 0x00	; 0
    4774:	87 e1       	ldi	r24, 0x17	; 23
    4776:	94 e0       	ldi	r25, 0x04	; 4
    4778:	2c 87       	std	Y+12, r18	; 0x0c
    477a:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <strchr_P>
    477e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4780:	89 2b       	or	r24, r25
    4782:	49 f0       	breq	.+18     	; 0x4796 <vfprintf+0xac>
    4784:	f5 01       	movw	r30, r10
    4786:	03 fd       	sbrc	r16, 3
    4788:	15 91       	lpm	r17, Z+
    478a:	03 ff       	sbrs	r16, 3
    478c:	11 91       	ld	r17, Z+
    478e:	5f 01       	movw	r10, r30
    4790:	27 ff       	sbrs	r18, 7
    4792:	eb cf       	rjmp	.-42     	; 0x476a <vfprintf+0x80>
    4794:	09 c0       	rjmp	.+18     	; 0x47a8 <vfprintf+0xbe>
    4796:	13 32       	cpi	r17, 0x23	; 35
    4798:	29 f0       	breq	.+10     	; 0x47a4 <vfprintf+0xba>
    479a:	1c 36       	cpi	r17, 0x6C	; 108
    479c:	09 f0       	breq	.+2      	; 0x47a0 <vfprintf+0xb6>
    479e:	d5 c0       	rjmp	.+426    	; 0x494a <vfprintf+0x260>
    47a0:	20 68       	ori	r18, 0x80	; 128
    47a2:	f0 cf       	rjmp	.-32     	; 0x4784 <vfprintf+0x9a>
    47a4:	20 e1       	ldi	r18, 0x10	; 16
    47a6:	ee cf       	rjmp	.-36     	; 0x4784 <vfprintf+0x9a>
    47a8:	02 2f       	mov	r16, r18
    47aa:	11 23       	and	r17, r17
    47ac:	09 f4       	brne	.+2      	; 0x47b0 <vfprintf+0xc6>
    47ae:	c6 c0       	rjmp	.+396    	; 0x493c <vfprintf+0x252>
    47b0:	61 2f       	mov	r22, r17
    47b2:	70 e0       	ldi	r23, 0x00	; 0
    47b4:	80 e1       	ldi	r24, 0x10	; 16
    47b6:	94 e0       	ldi	r25, 0x04	; 4
    47b8:	2c 87       	std	Y+12, r18	; 0x0c
    47ba:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <strchr_P>
    47be:	2c 85       	ldd	r18, Y+12	; 0x0c
    47c0:	89 2b       	or	r24, r25
    47c2:	41 f0       	breq	.+16     	; 0x47d4 <vfprintf+0xea>
    47c4:	37 01       	movw	r6, r14
    47c6:	f4 e0       	ldi	r31, 0x04	; 4
    47c8:	6f 0e       	add	r6, r31
    47ca:	71 1c       	adc	r7, r1
    47cc:	b6 01       	movw	r22, r12
    47ce:	8f e3       	ldi	r24, 0x3F	; 63
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	11 c0       	rjmp	.+34     	; 0x47f6 <vfprintf+0x10c>
    47d4:	13 36       	cpi	r17, 0x63	; 99
    47d6:	39 f0       	breq	.+14     	; 0x47e6 <vfprintf+0xfc>
    47d8:	13 37       	cpi	r17, 0x73	; 115
    47da:	81 f0       	breq	.+32     	; 0x47fc <vfprintf+0x112>
    47dc:	13 35       	cpi	r17, 0x53	; 83
    47de:	19 f5       	brne	.+70     	; 0x4826 <vfprintf+0x13c>
    47e0:	02 2f       	mov	r16, r18
    47e2:	01 60       	ori	r16, 0x01	; 1
    47e4:	0b c0       	rjmp	.+22     	; 0x47fc <vfprintf+0x112>
    47e6:	37 01       	movw	r6, r14
    47e8:	82 e0       	ldi	r24, 0x02	; 2
    47ea:	68 0e       	add	r6, r24
    47ec:	71 1c       	adc	r7, r1
    47ee:	b6 01       	movw	r22, r12
    47f0:	f7 01       	movw	r30, r14
    47f2:	80 81       	ld	r24, Z
    47f4:	91 81       	ldd	r25, Z+1	; 0x01
    47f6:	0e 94 dd 25 	call	0x4bba	; 0x4bba <fputc>
    47fa:	b5 cf       	rjmp	.-150    	; 0x4766 <vfprintf+0x7c>
    47fc:	37 01       	movw	r6, r14
    47fe:	f2 e0       	ldi	r31, 0x02	; 2
    4800:	6f 0e       	add	r6, r31
    4802:	71 1c       	adc	r7, r1
    4804:	f7 01       	movw	r30, r14
    4806:	e0 80       	ld	r14, Z
    4808:	f1 80       	ldd	r15, Z+1	; 0x01
    480a:	f7 01       	movw	r30, r14
    480c:	00 fd       	sbrc	r16, 0
    480e:	85 91       	lpm	r24, Z+
    4810:	00 ff       	sbrs	r16, 0
    4812:	81 91       	ld	r24, Z+
    4814:	7f 01       	movw	r14, r30
    4816:	88 23       	and	r24, r24
    4818:	09 f4       	brne	.+2      	; 0x481c <vfprintf+0x132>
    481a:	a5 cf       	rjmp	.-182    	; 0x4766 <vfprintf+0x7c>
    481c:	b6 01       	movw	r22, r12
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	0e 94 dd 25 	call	0x4bba	; 0x4bba <fputc>
    4824:	f2 cf       	rjmp	.-28     	; 0x480a <vfprintf+0x120>
    4826:	14 36       	cpi	r17, 0x64	; 100
    4828:	11 f0       	breq	.+4      	; 0x482e <vfprintf+0x144>
    482a:	19 36       	cpi	r17, 0x69	; 105
    482c:	29 f5       	brne	.+74     	; 0x4878 <vfprintf+0x18e>
    482e:	37 01       	movw	r6, r14
    4830:	27 ff       	sbrs	r18, 7
    4832:	09 c0       	rjmp	.+18     	; 0x4846 <vfprintf+0x15c>
    4834:	f4 e0       	ldi	r31, 0x04	; 4
    4836:	6f 0e       	add	r6, r31
    4838:	71 1c       	adc	r7, r1
    483a:	f7 01       	movw	r30, r14
    483c:	60 81       	ld	r22, Z
    483e:	71 81       	ldd	r23, Z+1	; 0x01
    4840:	82 81       	ldd	r24, Z+2	; 0x02
    4842:	93 81       	ldd	r25, Z+3	; 0x03
    4844:	0a c0       	rjmp	.+20     	; 0x485a <vfprintf+0x170>
    4846:	f2 e0       	ldi	r31, 0x02	; 2
    4848:	6f 0e       	add	r6, r31
    484a:	71 1c       	adc	r7, r1
    484c:	f7 01       	movw	r30, r14
    484e:	60 81       	ld	r22, Z
    4850:	71 81       	ldd	r23, Z+1	; 0x01
    4852:	88 27       	eor	r24, r24
    4854:	77 fd       	sbrc	r23, 7
    4856:	80 95       	com	r24
    4858:	98 2f       	mov	r25, r24
    485a:	02 2f       	mov	r16, r18
    485c:	0f 7e       	andi	r16, 0xEF	; 239
    485e:	97 ff       	sbrs	r25, 7
    4860:	08 c0       	rjmp	.+16     	; 0x4872 <vfprintf+0x188>
    4862:	90 95       	com	r25
    4864:	80 95       	com	r24
    4866:	70 95       	com	r23
    4868:	61 95       	neg	r22
    486a:	7f 4f       	sbci	r23, 0xFF	; 255
    486c:	8f 4f       	sbci	r24, 0xFF	; 255
    486e:	9f 4f       	sbci	r25, 0xFF	; 255
    4870:	00 64       	ori	r16, 0x40	; 64
    4872:	2a e0       	ldi	r18, 0x0A	; 10
    4874:	30 e0       	ldi	r19, 0x00	; 0
    4876:	33 c0       	rjmp	.+102    	; 0x48de <vfprintf+0x1f4>
    4878:	10 37       	cpi	r17, 0x70	; 112
    487a:	99 f0       	breq	.+38     	; 0x48a2 <vfprintf+0x1b8>
    487c:	40 f4       	brcc	.+16     	; 0x488e <vfprintf+0x1a4>
    487e:	18 35       	cpi	r17, 0x58	; 88
    4880:	b1 f0       	breq	.+44     	; 0x48ae <vfprintf+0x1c4>
    4882:	1f 36       	cpi	r17, 0x6F	; 111
    4884:	09 f0       	breq	.+2      	; 0x4888 <vfprintf+0x19e>
    4886:	5a c0       	rjmp	.+180    	; 0x493c <vfprintf+0x252>
    4888:	28 e0       	ldi	r18, 0x08	; 8
    488a:	30 e0       	ldi	r19, 0x00	; 0
    488c:	14 c0       	rjmp	.+40     	; 0x48b6 <vfprintf+0x1cc>
    488e:	15 37       	cpi	r17, 0x75	; 117
    4890:	19 f0       	breq	.+6      	; 0x4898 <vfprintf+0x1ae>
    4892:	18 37       	cpi	r17, 0x78	; 120
    4894:	41 f0       	breq	.+16     	; 0x48a6 <vfprintf+0x1bc>
    4896:	52 c0       	rjmp	.+164    	; 0x493c <vfprintf+0x252>
    4898:	02 2f       	mov	r16, r18
    489a:	0f 7e       	andi	r16, 0xEF	; 239
    489c:	2a e0       	ldi	r18, 0x0A	; 10
    489e:	30 e0       	ldi	r19, 0x00	; 0
    48a0:	0a c0       	rjmp	.+20     	; 0x48b6 <vfprintf+0x1cc>
    48a2:	02 2f       	mov	r16, r18
    48a4:	00 61       	ori	r16, 0x10	; 16
    48a6:	04 62       	ori	r16, 0x24	; 36
    48a8:	20 e1       	ldi	r18, 0x10	; 16
    48aa:	30 e0       	ldi	r19, 0x00	; 0
    48ac:	04 c0       	rjmp	.+8      	; 0x48b6 <vfprintf+0x1cc>
    48ae:	02 2f       	mov	r16, r18
    48b0:	04 60       	ori	r16, 0x04	; 4
    48b2:	20 e1       	ldi	r18, 0x10	; 16
    48b4:	32 e0       	ldi	r19, 0x02	; 2
    48b6:	37 01       	movw	r6, r14
    48b8:	07 ff       	sbrs	r16, 7
    48ba:	09 c0       	rjmp	.+18     	; 0x48ce <vfprintf+0x1e4>
    48bc:	f4 e0       	ldi	r31, 0x04	; 4
    48be:	6f 0e       	add	r6, r31
    48c0:	71 1c       	adc	r7, r1
    48c2:	f7 01       	movw	r30, r14
    48c4:	60 81       	ld	r22, Z
    48c6:	71 81       	ldd	r23, Z+1	; 0x01
    48c8:	82 81       	ldd	r24, Z+2	; 0x02
    48ca:	93 81       	ldd	r25, Z+3	; 0x03
    48cc:	08 c0       	rjmp	.+16     	; 0x48de <vfprintf+0x1f4>
    48ce:	f2 e0       	ldi	r31, 0x02	; 2
    48d0:	6f 0e       	add	r6, r31
    48d2:	71 1c       	adc	r7, r1
    48d4:	f7 01       	movw	r30, r14
    48d6:	60 81       	ld	r22, Z
    48d8:	71 81       	ldd	r23, Z+1	; 0x01
    48da:	80 e0       	ldi	r24, 0x00	; 0
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	a4 01       	movw	r20, r8
    48e0:	0e 94 8f 26 	call	0x4d1e	; 0x4d1e <__ultoa_invert>
    48e4:	18 2f       	mov	r17, r24
    48e6:	18 19       	sub	r17, r8
    48e8:	06 ff       	sbrs	r16, 6
    48ea:	05 c0       	rjmp	.+10     	; 0x48f6 <vfprintf+0x20c>
    48ec:	b6 01       	movw	r22, r12
    48ee:	8d e2       	ldi	r24, 0x2D	; 45
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    48f2:	0e 94 dd 25 	call	0x4bba	; 0x4bba <fputc>
    48f6:	04 ff       	sbrs	r16, 4
    48f8:	15 c0       	rjmp	.+42     	; 0x4924 <vfprintf+0x23a>
    48fa:	fe 01       	movw	r30, r28
    48fc:	e1 0f       	add	r30, r17
    48fe:	f1 1d       	adc	r31, r1
    4900:	80 81       	ld	r24, Z
    4902:	80 33       	cpi	r24, 0x30	; 48
    4904:	79 f0       	breq	.+30     	; 0x4924 <vfprintf+0x23a>
    4906:	b6 01       	movw	r22, r12
    4908:	80 e3       	ldi	r24, 0x30	; 48
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	0e 94 dd 25 	call	0x4bba	; 0x4bba <fputc>
    4910:	02 ff       	sbrs	r16, 2
    4912:	08 c0       	rjmp	.+16     	; 0x4924 <vfprintf+0x23a>
    4914:	00 72       	andi	r16, 0x20	; 32
    4916:	80 2f       	mov	r24, r16
    4918:	90 e0       	ldi	r25, 0x00	; 0
    491a:	b6 01       	movw	r22, r12
    491c:	88 5a       	subi	r24, 0xA8	; 168
    491e:	9f 4f       	sbci	r25, 0xFF	; 255
    4920:	0e 94 dd 25 	call	0x4bba	; 0x4bba <fputc>
    4924:	11 50       	subi	r17, 0x01	; 1
    4926:	f4 01       	movw	r30, r8
    4928:	e1 0f       	add	r30, r17
    492a:	f1 1d       	adc	r31, r1
    492c:	80 81       	ld	r24, Z
    492e:	b6 01       	movw	r22, r12
    4930:	90 e0       	ldi	r25, 0x00	; 0
    4932:	0e 94 dd 25 	call	0x4bba	; 0x4bba <fputc>
    4936:	11 11       	cpse	r17, r1
    4938:	f5 cf       	rjmp	.-22     	; 0x4924 <vfprintf+0x23a>
    493a:	15 cf       	rjmp	.-470    	; 0x4766 <vfprintf+0x7c>
    493c:	f6 01       	movw	r30, r12
    493e:	86 81       	ldd	r24, Z+6	; 0x06
    4940:	97 81       	ldd	r25, Z+7	; 0x07
    4942:	05 c0       	rjmp	.+10     	; 0x494e <vfprintf+0x264>
    4944:	8f ef       	ldi	r24, 0xFF	; 255
    4946:	9f ef       	ldi	r25, 0xFF	; 255
    4948:	02 c0       	rjmp	.+4      	; 0x494e <vfprintf+0x264>
    494a:	02 2f       	mov	r16, r18
    494c:	31 cf       	rjmp	.-414    	; 0x47b0 <vfprintf+0xc6>
    494e:	2c 96       	adiw	r28, 0x0c	; 12
    4950:	0f b6       	in	r0, 0x3f	; 63
    4952:	f8 94       	cli
    4954:	de bf       	out	0x3e, r29	; 62
    4956:	0f be       	out	0x3f, r0	; 63
    4958:	cd bf       	out	0x3d, r28	; 61
    495a:	df 91       	pop	r29
    495c:	cf 91       	pop	r28
    495e:	1f 91       	pop	r17
    4960:	0f 91       	pop	r16
    4962:	ff 90       	pop	r15
    4964:	ef 90       	pop	r14
    4966:	df 90       	pop	r13
    4968:	cf 90       	pop	r12
    496a:	bf 90       	pop	r11
    496c:	af 90       	pop	r10
    496e:	9f 90       	pop	r9
    4970:	8f 90       	pop	r8
    4972:	7f 90       	pop	r7
    4974:	6f 90       	pop	r6
    4976:	08 95       	ret

00004978 <__muluhisi3>:
    4978:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <__umulhisi3>
    497c:	a5 9f       	mul	r26, r21
    497e:	90 0d       	add	r25, r0
    4980:	b4 9f       	mul	r27, r20
    4982:	90 0d       	add	r25, r0
    4984:	a4 9f       	mul	r26, r20
    4986:	80 0d       	add	r24, r0
    4988:	91 1d       	adc	r25, r1
    498a:	11 24       	eor	r1, r1
    498c:	08 95       	ret

0000498e <__mulsi3>:
    498e:	db 01       	movw	r26, r22
    4990:	8f 93       	push	r24
    4992:	9f 93       	push	r25
    4994:	0e 94 bc 24 	call	0x4978	; 0x4978 <__muluhisi3>
    4998:	bf 91       	pop	r27
    499a:	af 91       	pop	r26
    499c:	a2 9f       	mul	r26, r18
    499e:	80 0d       	add	r24, r0
    49a0:	91 1d       	adc	r25, r1
    49a2:	a3 9f       	mul	r26, r19
    49a4:	90 0d       	add	r25, r0
    49a6:	b2 9f       	mul	r27, r18
    49a8:	90 0d       	add	r25, r0
    49aa:	11 24       	eor	r1, r1
    49ac:	08 95       	ret

000049ae <__udivmodsi4>:
    49ae:	a1 e2       	ldi	r26, 0x21	; 33
    49b0:	1a 2e       	mov	r1, r26
    49b2:	aa 1b       	sub	r26, r26
    49b4:	bb 1b       	sub	r27, r27
    49b6:	fd 01       	movw	r30, r26
    49b8:	0d c0       	rjmp	.+26     	; 0x49d4 <__udivmodsi4_ep>

000049ba <__udivmodsi4_loop>:
    49ba:	aa 1f       	adc	r26, r26
    49bc:	bb 1f       	adc	r27, r27
    49be:	ee 1f       	adc	r30, r30
    49c0:	ff 1f       	adc	r31, r31
    49c2:	a2 17       	cp	r26, r18
    49c4:	b3 07       	cpc	r27, r19
    49c6:	e4 07       	cpc	r30, r20
    49c8:	f5 07       	cpc	r31, r21
    49ca:	20 f0       	brcs	.+8      	; 0x49d4 <__udivmodsi4_ep>
    49cc:	a2 1b       	sub	r26, r18
    49ce:	b3 0b       	sbc	r27, r19
    49d0:	e4 0b       	sbc	r30, r20
    49d2:	f5 0b       	sbc	r31, r21

000049d4 <__udivmodsi4_ep>:
    49d4:	66 1f       	adc	r22, r22
    49d6:	77 1f       	adc	r23, r23
    49d8:	88 1f       	adc	r24, r24
    49da:	99 1f       	adc	r25, r25
    49dc:	1a 94       	dec	r1
    49de:	69 f7       	brne	.-38     	; 0x49ba <__udivmodsi4_loop>
    49e0:	60 95       	com	r22
    49e2:	70 95       	com	r23
    49e4:	80 95       	com	r24
    49e6:	90 95       	com	r25
    49e8:	9b 01       	movw	r18, r22
    49ea:	ac 01       	movw	r20, r24
    49ec:	bd 01       	movw	r22, r26
    49ee:	cf 01       	movw	r24, r30
    49f0:	08 95       	ret

000049f2 <__umoddi3>:
    49f2:	68 94       	set
    49f4:	01 c0       	rjmp	.+2      	; 0x49f8 <__udivdi3_umoddi3>

000049f6 <__udivdi3>:
    49f6:	e8 94       	clt

000049f8 <__udivdi3_umoddi3>:
    49f8:	8f 92       	push	r8
    49fa:	9f 92       	push	r9
    49fc:	cf 93       	push	r28
    49fe:	df 93       	push	r29
    4a00:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <__udivmod64>
    4a04:	df 91       	pop	r29
    4a06:	cf 91       	pop	r28
    4a08:	9f 90       	pop	r9
    4a0a:	8f 90       	pop	r8
    4a0c:	08 95       	ret

00004a0e <__udivmod64>:
    4a0e:	88 24       	eor	r8, r8
    4a10:	99 24       	eor	r9, r9
    4a12:	f4 01       	movw	r30, r8
    4a14:	e4 01       	movw	r28, r8
    4a16:	b0 e4       	ldi	r27, 0x40	; 64
    4a18:	9f 93       	push	r25
    4a1a:	aa 27       	eor	r26, r26
    4a1c:	9a 15       	cp	r25, r10
    4a1e:	8b 04       	cpc	r8, r11
    4a20:	9c 04       	cpc	r9, r12
    4a22:	ed 05       	cpc	r30, r13
    4a24:	fe 05       	cpc	r31, r14
    4a26:	cf 05       	cpc	r28, r15
    4a28:	d0 07       	cpc	r29, r16
    4a2a:	a1 07       	cpc	r26, r17
    4a2c:	98 f4       	brcc	.+38     	; 0x4a54 <__udivmod64+0x46>
    4a2e:	ad 2f       	mov	r26, r29
    4a30:	dc 2f       	mov	r29, r28
    4a32:	cf 2f       	mov	r28, r31
    4a34:	fe 2f       	mov	r31, r30
    4a36:	e9 2d       	mov	r30, r9
    4a38:	98 2c       	mov	r9, r8
    4a3a:	89 2e       	mov	r8, r25
    4a3c:	98 2f       	mov	r25, r24
    4a3e:	87 2f       	mov	r24, r23
    4a40:	76 2f       	mov	r23, r22
    4a42:	65 2f       	mov	r22, r21
    4a44:	54 2f       	mov	r21, r20
    4a46:	43 2f       	mov	r20, r19
    4a48:	32 2f       	mov	r19, r18
    4a4a:	22 27       	eor	r18, r18
    4a4c:	b8 50       	subi	r27, 0x08	; 8
    4a4e:	31 f7       	brne	.-52     	; 0x4a1c <__udivmod64+0xe>
    4a50:	bf 91       	pop	r27
    4a52:	27 c0       	rjmp	.+78     	; 0x4aa2 <__udivmod64+0x94>
    4a54:	1b 2e       	mov	r1, r27
    4a56:	bf 91       	pop	r27
    4a58:	bb 27       	eor	r27, r27
    4a5a:	22 0f       	add	r18, r18
    4a5c:	33 1f       	adc	r19, r19
    4a5e:	44 1f       	adc	r20, r20
    4a60:	55 1f       	adc	r21, r21
    4a62:	66 1f       	adc	r22, r22
    4a64:	77 1f       	adc	r23, r23
    4a66:	88 1f       	adc	r24, r24
    4a68:	99 1f       	adc	r25, r25
    4a6a:	88 1c       	adc	r8, r8
    4a6c:	99 1c       	adc	r9, r9
    4a6e:	ee 1f       	adc	r30, r30
    4a70:	ff 1f       	adc	r31, r31
    4a72:	cc 1f       	adc	r28, r28
    4a74:	dd 1f       	adc	r29, r29
    4a76:	aa 1f       	adc	r26, r26
    4a78:	bb 1f       	adc	r27, r27
    4a7a:	8a 14       	cp	r8, r10
    4a7c:	9b 04       	cpc	r9, r11
    4a7e:	ec 05       	cpc	r30, r12
    4a80:	fd 05       	cpc	r31, r13
    4a82:	ce 05       	cpc	r28, r14
    4a84:	df 05       	cpc	r29, r15
    4a86:	a0 07       	cpc	r26, r16
    4a88:	b1 07       	cpc	r27, r17
    4a8a:	48 f0       	brcs	.+18     	; 0x4a9e <__udivmod64+0x90>
    4a8c:	8a 18       	sub	r8, r10
    4a8e:	9b 08       	sbc	r9, r11
    4a90:	ec 09       	sbc	r30, r12
    4a92:	fd 09       	sbc	r31, r13
    4a94:	ce 09       	sbc	r28, r14
    4a96:	df 09       	sbc	r29, r15
    4a98:	a0 0b       	sbc	r26, r16
    4a9a:	b1 0b       	sbc	r27, r17
    4a9c:	21 60       	ori	r18, 0x01	; 1
    4a9e:	1a 94       	dec	r1
    4aa0:	e1 f6       	brne	.-72     	; 0x4a5a <__udivmod64+0x4c>
    4aa2:	2e f4       	brtc	.+10     	; 0x4aae <__udivmod64+0xa0>
    4aa4:	94 01       	movw	r18, r8
    4aa6:	af 01       	movw	r20, r30
    4aa8:	be 01       	movw	r22, r28
    4aaa:	cd 01       	movw	r24, r26
    4aac:	00 0c       	add	r0, r0
    4aae:	08 95       	ret

00004ab0 <__tablejump2__>:
    4ab0:	ee 0f       	add	r30, r30
    4ab2:	ff 1f       	adc	r31, r31
    4ab4:	00 24       	eor	r0, r0
    4ab6:	00 1c       	adc	r0, r0
    4ab8:	0b be       	out	0x3b, r0	; 59
    4aba:	07 90       	elpm	r0, Z+
    4abc:	f6 91       	elpm	r31, Z
    4abe:	e0 2d       	mov	r30, r0
    4ac0:	09 94       	ijmp

00004ac2 <__umulhisi3>:
    4ac2:	a2 9f       	mul	r26, r18
    4ac4:	b0 01       	movw	r22, r0
    4ac6:	b3 9f       	mul	r27, r19
    4ac8:	c0 01       	movw	r24, r0
    4aca:	a3 9f       	mul	r26, r19
    4acc:	70 0d       	add	r23, r0
    4ace:	81 1d       	adc	r24, r1
    4ad0:	11 24       	eor	r1, r1
    4ad2:	91 1d       	adc	r25, r1
    4ad4:	b2 9f       	mul	r27, r18
    4ad6:	70 0d       	add	r23, r0
    4ad8:	81 1d       	adc	r24, r1
    4ada:	11 24       	eor	r1, r1
    4adc:	91 1d       	adc	r25, r1
    4ade:	08 95       	ret

00004ae0 <strchr_P>:
    4ae0:	fc 01       	movw	r30, r24
    4ae2:	05 90       	lpm	r0, Z+
    4ae4:	06 16       	cp	r0, r22
    4ae6:	21 f0       	breq	.+8      	; 0x4af0 <strchr_P+0x10>
    4ae8:	00 20       	and	r0, r0
    4aea:	d9 f7       	brne	.-10     	; 0x4ae2 <strchr_P+0x2>
    4aec:	c0 01       	movw	r24, r0
    4aee:	08 95       	ret
    4af0:	31 97       	sbiw	r30, 0x01	; 1
    4af2:	cf 01       	movw	r24, r30
    4af4:	08 95       	ret

00004af6 <memcpy>:
    4af6:	fb 01       	movw	r30, r22
    4af8:	dc 01       	movw	r26, r24
    4afa:	02 c0       	rjmp	.+4      	; 0x4b00 <memcpy+0xa>
    4afc:	01 90       	ld	r0, Z+
    4afe:	0d 92       	st	X+, r0
    4b00:	41 50       	subi	r20, 0x01	; 1
    4b02:	50 40       	sbci	r21, 0x00	; 0
    4b04:	d8 f7       	brcc	.-10     	; 0x4afc <memcpy+0x6>
    4b06:	08 95       	ret

00004b08 <strncmp>:
    4b08:	fb 01       	movw	r30, r22
    4b0a:	dc 01       	movw	r26, r24
    4b0c:	41 50       	subi	r20, 0x01	; 1
    4b0e:	50 40       	sbci	r21, 0x00	; 0
    4b10:	30 f0       	brcs	.+12     	; 0x4b1e <strncmp+0x16>
    4b12:	8d 91       	ld	r24, X+
    4b14:	01 90       	ld	r0, Z+
    4b16:	80 19       	sub	r24, r0
    4b18:	19 f4       	brne	.+6      	; 0x4b20 <strncmp+0x18>
    4b1a:	00 20       	and	r0, r0
    4b1c:	b9 f7       	brne	.-18     	; 0x4b0c <strncmp+0x4>
    4b1e:	88 1b       	sub	r24, r24
    4b20:	99 0b       	sbc	r25, r25
    4b22:	08 95       	ret

00004b24 <fdevopen>:
    4b24:	0f 93       	push	r16
    4b26:	1f 93       	push	r17
    4b28:	cf 93       	push	r28
    4b2a:	df 93       	push	r29
    4b2c:	00 97       	sbiw	r24, 0x00	; 0
    4b2e:	31 f4       	brne	.+12     	; 0x4b3c <fdevopen+0x18>
    4b30:	61 15       	cp	r22, r1
    4b32:	71 05       	cpc	r23, r1
    4b34:	19 f4       	brne	.+6      	; 0x4b3c <fdevopen+0x18>
    4b36:	80 e0       	ldi	r24, 0x00	; 0
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	3a c0       	rjmp	.+116    	; 0x4bb0 <fdevopen+0x8c>
    4b3c:	8b 01       	movw	r16, r22
    4b3e:	ec 01       	movw	r28, r24
    4b40:	6e e0       	ldi	r22, 0x0E	; 14
    4b42:	70 e0       	ldi	r23, 0x00	; 0
    4b44:	81 e0       	ldi	r24, 0x01	; 1
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	0e 94 03 27 	call	0x4e06	; 0x4e06 <calloc>
    4b4c:	fc 01       	movw	r30, r24
    4b4e:	00 97       	sbiw	r24, 0x00	; 0
    4b50:	91 f3       	breq	.-28     	; 0x4b36 <fdevopen+0x12>
    4b52:	80 e8       	ldi	r24, 0x80	; 128
    4b54:	83 83       	std	Z+3, r24	; 0x03
    4b56:	01 15       	cp	r16, r1
    4b58:	11 05       	cpc	r17, r1
    4b5a:	71 f0       	breq	.+28     	; 0x4b78 <fdevopen+0x54>
    4b5c:	13 87       	std	Z+11, r17	; 0x0b
    4b5e:	02 87       	std	Z+10, r16	; 0x0a
    4b60:	81 e8       	ldi	r24, 0x81	; 129
    4b62:	83 83       	std	Z+3, r24	; 0x03
    4b64:	80 91 d4 06 	lds	r24, 0x06D4
    4b68:	90 91 d5 06 	lds	r25, 0x06D5
    4b6c:	89 2b       	or	r24, r25
    4b6e:	21 f4       	brne	.+8      	; 0x4b78 <fdevopen+0x54>
    4b70:	f0 93 d5 06 	sts	0x06D5, r31
    4b74:	e0 93 d4 06 	sts	0x06D4, r30
    4b78:	20 97       	sbiw	r28, 0x00	; 0
    4b7a:	c9 f0       	breq	.+50     	; 0x4bae <fdevopen+0x8a>
    4b7c:	d1 87       	std	Z+9, r29	; 0x09
    4b7e:	c0 87       	std	Z+8, r28	; 0x08
    4b80:	83 81       	ldd	r24, Z+3	; 0x03
    4b82:	82 60       	ori	r24, 0x02	; 2
    4b84:	83 83       	std	Z+3, r24	; 0x03
    4b86:	80 91 d6 06 	lds	r24, 0x06D6
    4b8a:	90 91 d7 06 	lds	r25, 0x06D7
    4b8e:	89 2b       	or	r24, r25
    4b90:	71 f4       	brne	.+28     	; 0x4bae <fdevopen+0x8a>
    4b92:	f0 93 d7 06 	sts	0x06D7, r31
    4b96:	e0 93 d6 06 	sts	0x06D6, r30
    4b9a:	80 91 d8 06 	lds	r24, 0x06D8
    4b9e:	90 91 d9 06 	lds	r25, 0x06D9
    4ba2:	89 2b       	or	r24, r25
    4ba4:	21 f4       	brne	.+8      	; 0x4bae <fdevopen+0x8a>
    4ba6:	f0 93 d9 06 	sts	0x06D9, r31
    4baa:	e0 93 d8 06 	sts	0x06D8, r30
    4bae:	cf 01       	movw	r24, r30
    4bb0:	df 91       	pop	r29
    4bb2:	cf 91       	pop	r28
    4bb4:	1f 91       	pop	r17
    4bb6:	0f 91       	pop	r16
    4bb8:	08 95       	ret

00004bba <fputc>:
    4bba:	0f 93       	push	r16
    4bbc:	1f 93       	push	r17
    4bbe:	cf 93       	push	r28
    4bc0:	df 93       	push	r29
    4bc2:	fb 01       	movw	r30, r22
    4bc4:	23 81       	ldd	r18, Z+3	; 0x03
    4bc6:	21 fd       	sbrc	r18, 1
    4bc8:	03 c0       	rjmp	.+6      	; 0x4bd0 <fputc+0x16>
    4bca:	8f ef       	ldi	r24, 0xFF	; 255
    4bcc:	9f ef       	ldi	r25, 0xFF	; 255
    4bce:	28 c0       	rjmp	.+80     	; 0x4c20 <fputc+0x66>
    4bd0:	22 ff       	sbrs	r18, 2
    4bd2:	16 c0       	rjmp	.+44     	; 0x4c00 <fputc+0x46>
    4bd4:	46 81       	ldd	r20, Z+6	; 0x06
    4bd6:	57 81       	ldd	r21, Z+7	; 0x07
    4bd8:	24 81       	ldd	r18, Z+4	; 0x04
    4bda:	35 81       	ldd	r19, Z+5	; 0x05
    4bdc:	42 17       	cp	r20, r18
    4bde:	53 07       	cpc	r21, r19
    4be0:	44 f4       	brge	.+16     	; 0x4bf2 <fputc+0x38>
    4be2:	a0 81       	ld	r26, Z
    4be4:	b1 81       	ldd	r27, Z+1	; 0x01
    4be6:	9d 01       	movw	r18, r26
    4be8:	2f 5f       	subi	r18, 0xFF	; 255
    4bea:	3f 4f       	sbci	r19, 0xFF	; 255
    4bec:	31 83       	std	Z+1, r19	; 0x01
    4bee:	20 83       	st	Z, r18
    4bf0:	8c 93       	st	X, r24
    4bf2:	26 81       	ldd	r18, Z+6	; 0x06
    4bf4:	37 81       	ldd	r19, Z+7	; 0x07
    4bf6:	2f 5f       	subi	r18, 0xFF	; 255
    4bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    4bfa:	37 83       	std	Z+7, r19	; 0x07
    4bfc:	26 83       	std	Z+6, r18	; 0x06
    4bfe:	10 c0       	rjmp	.+32     	; 0x4c20 <fputc+0x66>
    4c00:	eb 01       	movw	r28, r22
    4c02:	09 2f       	mov	r16, r25
    4c04:	18 2f       	mov	r17, r24
    4c06:	00 84       	ldd	r0, Z+8	; 0x08
    4c08:	f1 85       	ldd	r31, Z+9	; 0x09
    4c0a:	e0 2d       	mov	r30, r0
    4c0c:	09 95       	icall
    4c0e:	89 2b       	or	r24, r25
    4c10:	e1 f6       	brne	.-72     	; 0x4bca <fputc+0x10>
    4c12:	8e 81       	ldd	r24, Y+6	; 0x06
    4c14:	9f 81       	ldd	r25, Y+7	; 0x07
    4c16:	01 96       	adiw	r24, 0x01	; 1
    4c18:	9f 83       	std	Y+7, r25	; 0x07
    4c1a:	8e 83       	std	Y+6, r24	; 0x06
    4c1c:	81 2f       	mov	r24, r17
    4c1e:	90 2f       	mov	r25, r16
    4c20:	df 91       	pop	r29
    4c22:	cf 91       	pop	r28
    4c24:	1f 91       	pop	r17
    4c26:	0f 91       	pop	r16
    4c28:	08 95       	ret

00004c2a <printf>:
    4c2a:	cf 93       	push	r28
    4c2c:	df 93       	push	r29
    4c2e:	cd b7       	in	r28, 0x3d	; 61
    4c30:	de b7       	in	r29, 0x3e	; 62
    4c32:	ae 01       	movw	r20, r28
    4c34:	4b 5f       	subi	r20, 0xFB	; 251
    4c36:	5f 4f       	sbci	r21, 0xFF	; 255
    4c38:	fa 01       	movw	r30, r20
    4c3a:	61 91       	ld	r22, Z+
    4c3c:	71 91       	ld	r23, Z+
    4c3e:	af 01       	movw	r20, r30
    4c40:	80 91 d6 06 	lds	r24, 0x06D6
    4c44:	90 91 d7 06 	lds	r25, 0x06D7
    4c48:	0e 94 75 23 	call	0x46ea	; 0x46ea <vfprintf>
    4c4c:	df 91       	pop	r29
    4c4e:	cf 91       	pop	r28
    4c50:	08 95       	ret

00004c52 <putchar>:
    4c52:	60 91 d6 06 	lds	r22, 0x06D6
    4c56:	70 91 d7 06 	lds	r23, 0x06D7
    4c5a:	0c 94 dd 25 	jmp	0x4bba	; 0x4bba <fputc>

00004c5e <puts>:
    4c5e:	0f 93       	push	r16
    4c60:	1f 93       	push	r17
    4c62:	cf 93       	push	r28
    4c64:	df 93       	push	r29
    4c66:	e0 91 d6 06 	lds	r30, 0x06D6
    4c6a:	f0 91 d7 06 	lds	r31, 0x06D7
    4c6e:	23 81       	ldd	r18, Z+3	; 0x03
    4c70:	21 ff       	sbrs	r18, 1
    4c72:	1b c0       	rjmp	.+54     	; 0x4caa <puts+0x4c>
    4c74:	8c 01       	movw	r16, r24
    4c76:	d0 e0       	ldi	r29, 0x00	; 0
    4c78:	c0 e0       	ldi	r28, 0x00	; 0
    4c7a:	f8 01       	movw	r30, r16
    4c7c:	81 91       	ld	r24, Z+
    4c7e:	8f 01       	movw	r16, r30
    4c80:	60 91 d6 06 	lds	r22, 0x06D6
    4c84:	70 91 d7 06 	lds	r23, 0x06D7
    4c88:	db 01       	movw	r26, r22
    4c8a:	18 96       	adiw	r26, 0x08	; 8
    4c8c:	ed 91       	ld	r30, X+
    4c8e:	fc 91       	ld	r31, X
    4c90:	19 97       	sbiw	r26, 0x09	; 9
    4c92:	88 23       	and	r24, r24
    4c94:	31 f0       	breq	.+12     	; 0x4ca2 <puts+0x44>
    4c96:	09 95       	icall
    4c98:	89 2b       	or	r24, r25
    4c9a:	79 f3       	breq	.-34     	; 0x4c7a <puts+0x1c>
    4c9c:	df ef       	ldi	r29, 0xFF	; 255
    4c9e:	cf ef       	ldi	r28, 0xFF	; 255
    4ca0:	ec cf       	rjmp	.-40     	; 0x4c7a <puts+0x1c>
    4ca2:	8a e0       	ldi	r24, 0x0A	; 10
    4ca4:	09 95       	icall
    4ca6:	89 2b       	or	r24, r25
    4ca8:	19 f0       	breq	.+6      	; 0x4cb0 <puts+0x52>
    4caa:	8f ef       	ldi	r24, 0xFF	; 255
    4cac:	9f ef       	ldi	r25, 0xFF	; 255
    4cae:	02 c0       	rjmp	.+4      	; 0x4cb4 <puts+0x56>
    4cb0:	8d 2f       	mov	r24, r29
    4cb2:	9c 2f       	mov	r25, r28
    4cb4:	df 91       	pop	r29
    4cb6:	cf 91       	pop	r28
    4cb8:	1f 91       	pop	r17
    4cba:	0f 91       	pop	r16
    4cbc:	08 95       	ret

00004cbe <sprintf>:
    4cbe:	0f 93       	push	r16
    4cc0:	1f 93       	push	r17
    4cc2:	cf 93       	push	r28
    4cc4:	df 93       	push	r29
    4cc6:	cd b7       	in	r28, 0x3d	; 61
    4cc8:	de b7       	in	r29, 0x3e	; 62
    4cca:	2e 97       	sbiw	r28, 0x0e	; 14
    4ccc:	0f b6       	in	r0, 0x3f	; 63
    4cce:	f8 94       	cli
    4cd0:	de bf       	out	0x3e, r29	; 62
    4cd2:	0f be       	out	0x3f, r0	; 63
    4cd4:	cd bf       	out	0x3d, r28	; 61
    4cd6:	0d 89       	ldd	r16, Y+21	; 0x15
    4cd8:	1e 89       	ldd	r17, Y+22	; 0x16
    4cda:	86 e0       	ldi	r24, 0x06	; 6
    4cdc:	8c 83       	std	Y+4, r24	; 0x04
    4cde:	1a 83       	std	Y+2, r17	; 0x02
    4ce0:	09 83       	std	Y+1, r16	; 0x01
    4ce2:	8f ef       	ldi	r24, 0xFF	; 255
    4ce4:	9f e7       	ldi	r25, 0x7F	; 127
    4ce6:	9e 83       	std	Y+6, r25	; 0x06
    4ce8:	8d 83       	std	Y+5, r24	; 0x05
    4cea:	ae 01       	movw	r20, r28
    4cec:	47 5e       	subi	r20, 0xE7	; 231
    4cee:	5f 4f       	sbci	r21, 0xFF	; 255
    4cf0:	6f 89       	ldd	r22, Y+23	; 0x17
    4cf2:	78 8d       	ldd	r23, Y+24	; 0x18
    4cf4:	ce 01       	movw	r24, r28
    4cf6:	01 96       	adiw	r24, 0x01	; 1
    4cf8:	0e 94 75 23 	call	0x46ea	; 0x46ea <vfprintf>
    4cfc:	2f 81       	ldd	r18, Y+7	; 0x07
    4cfe:	38 85       	ldd	r19, Y+8	; 0x08
    4d00:	f8 01       	movw	r30, r16
    4d02:	e2 0f       	add	r30, r18
    4d04:	f3 1f       	adc	r31, r19
    4d06:	10 82       	st	Z, r1
    4d08:	2e 96       	adiw	r28, 0x0e	; 14
    4d0a:	0f b6       	in	r0, 0x3f	; 63
    4d0c:	f8 94       	cli
    4d0e:	de bf       	out	0x3e, r29	; 62
    4d10:	0f be       	out	0x3f, r0	; 63
    4d12:	cd bf       	out	0x3d, r28	; 61
    4d14:	df 91       	pop	r29
    4d16:	cf 91       	pop	r28
    4d18:	1f 91       	pop	r17
    4d1a:	0f 91       	pop	r16
    4d1c:	08 95       	ret

00004d1e <__ultoa_invert>:
    4d1e:	fa 01       	movw	r30, r20
    4d20:	aa 27       	eor	r26, r26
    4d22:	28 30       	cpi	r18, 0x08	; 8
    4d24:	51 f1       	breq	.+84     	; 0x4d7a <__ultoa_invert+0x5c>
    4d26:	20 31       	cpi	r18, 0x10	; 16
    4d28:	81 f1       	breq	.+96     	; 0x4d8a <__ultoa_invert+0x6c>
    4d2a:	e8 94       	clt
    4d2c:	6f 93       	push	r22
    4d2e:	6e 7f       	andi	r22, 0xFE	; 254
    4d30:	6e 5f       	subi	r22, 0xFE	; 254
    4d32:	7f 4f       	sbci	r23, 0xFF	; 255
    4d34:	8f 4f       	sbci	r24, 0xFF	; 255
    4d36:	9f 4f       	sbci	r25, 0xFF	; 255
    4d38:	af 4f       	sbci	r26, 0xFF	; 255
    4d3a:	b1 e0       	ldi	r27, 0x01	; 1
    4d3c:	3e d0       	rcall	.+124    	; 0x4dba <__ultoa_invert+0x9c>
    4d3e:	b4 e0       	ldi	r27, 0x04	; 4
    4d40:	3c d0       	rcall	.+120    	; 0x4dba <__ultoa_invert+0x9c>
    4d42:	67 0f       	add	r22, r23
    4d44:	78 1f       	adc	r23, r24
    4d46:	89 1f       	adc	r24, r25
    4d48:	9a 1f       	adc	r25, r26
    4d4a:	a1 1d       	adc	r26, r1
    4d4c:	68 0f       	add	r22, r24
    4d4e:	79 1f       	adc	r23, r25
    4d50:	8a 1f       	adc	r24, r26
    4d52:	91 1d       	adc	r25, r1
    4d54:	a1 1d       	adc	r26, r1
    4d56:	6a 0f       	add	r22, r26
    4d58:	71 1d       	adc	r23, r1
    4d5a:	81 1d       	adc	r24, r1
    4d5c:	91 1d       	adc	r25, r1
    4d5e:	a1 1d       	adc	r26, r1
    4d60:	20 d0       	rcall	.+64     	; 0x4da2 <__ultoa_invert+0x84>
    4d62:	09 f4       	brne	.+2      	; 0x4d66 <__ultoa_invert+0x48>
    4d64:	68 94       	set
    4d66:	3f 91       	pop	r19
    4d68:	2a e0       	ldi	r18, 0x0A	; 10
    4d6a:	26 9f       	mul	r18, r22
    4d6c:	11 24       	eor	r1, r1
    4d6e:	30 19       	sub	r19, r0
    4d70:	30 5d       	subi	r19, 0xD0	; 208
    4d72:	31 93       	st	Z+, r19
    4d74:	de f6       	brtc	.-74     	; 0x4d2c <__ultoa_invert+0xe>
    4d76:	cf 01       	movw	r24, r30
    4d78:	08 95       	ret
    4d7a:	46 2f       	mov	r20, r22
    4d7c:	47 70       	andi	r20, 0x07	; 7
    4d7e:	40 5d       	subi	r20, 0xD0	; 208
    4d80:	41 93       	st	Z+, r20
    4d82:	b3 e0       	ldi	r27, 0x03	; 3
    4d84:	0f d0       	rcall	.+30     	; 0x4da4 <__ultoa_invert+0x86>
    4d86:	c9 f7       	brne	.-14     	; 0x4d7a <__ultoa_invert+0x5c>
    4d88:	f6 cf       	rjmp	.-20     	; 0x4d76 <__ultoa_invert+0x58>
    4d8a:	46 2f       	mov	r20, r22
    4d8c:	4f 70       	andi	r20, 0x0F	; 15
    4d8e:	40 5d       	subi	r20, 0xD0	; 208
    4d90:	4a 33       	cpi	r20, 0x3A	; 58
    4d92:	18 f0       	brcs	.+6      	; 0x4d9a <__ultoa_invert+0x7c>
    4d94:	49 5d       	subi	r20, 0xD9	; 217
    4d96:	31 fd       	sbrc	r19, 1
    4d98:	40 52       	subi	r20, 0x20	; 32
    4d9a:	41 93       	st	Z+, r20
    4d9c:	02 d0       	rcall	.+4      	; 0x4da2 <__ultoa_invert+0x84>
    4d9e:	a9 f7       	brne	.-22     	; 0x4d8a <__ultoa_invert+0x6c>
    4da0:	ea cf       	rjmp	.-44     	; 0x4d76 <__ultoa_invert+0x58>
    4da2:	b4 e0       	ldi	r27, 0x04	; 4
    4da4:	a6 95       	lsr	r26
    4da6:	97 95       	ror	r25
    4da8:	87 95       	ror	r24
    4daa:	77 95       	ror	r23
    4dac:	67 95       	ror	r22
    4dae:	ba 95       	dec	r27
    4db0:	c9 f7       	brne	.-14     	; 0x4da4 <__ultoa_invert+0x86>
    4db2:	00 97       	sbiw	r24, 0x00	; 0
    4db4:	61 05       	cpc	r22, r1
    4db6:	71 05       	cpc	r23, r1
    4db8:	08 95       	ret
    4dba:	9b 01       	movw	r18, r22
    4dbc:	ac 01       	movw	r20, r24
    4dbe:	0a 2e       	mov	r0, r26
    4dc0:	06 94       	lsr	r0
    4dc2:	57 95       	ror	r21
    4dc4:	47 95       	ror	r20
    4dc6:	37 95       	ror	r19
    4dc8:	27 95       	ror	r18
    4dca:	ba 95       	dec	r27
    4dcc:	c9 f7       	brne	.-14     	; 0x4dc0 <__ultoa_invert+0xa2>
    4dce:	62 0f       	add	r22, r18
    4dd0:	73 1f       	adc	r23, r19
    4dd2:	84 1f       	adc	r24, r20
    4dd4:	95 1f       	adc	r25, r21
    4dd6:	a0 1d       	adc	r26, r0
    4dd8:	08 95       	ret

00004dda <__eerd_byte_m128rfa1>:
    4dda:	f9 99       	sbic	0x1f, 1	; 31
    4ddc:	fe cf       	rjmp	.-4      	; 0x4dda <__eerd_byte_m128rfa1>
    4dde:	92 bd       	out	0x22, r25	; 34
    4de0:	81 bd       	out	0x21, r24	; 33
    4de2:	f8 9a       	sbi	0x1f, 0	; 31
    4de4:	99 27       	eor	r25, r25
    4de6:	80 b5       	in	r24, 0x20	; 32
    4de8:	08 95       	ret

00004dea <__eewr_byte_m128rfa1>:
    4dea:	26 2f       	mov	r18, r22

00004dec <__eewr_r18_m128rfa1>:
    4dec:	f9 99       	sbic	0x1f, 1	; 31
    4dee:	fe cf       	rjmp	.-4      	; 0x4dec <__eewr_r18_m128rfa1>
    4df0:	1f ba       	out	0x1f, r1	; 31
    4df2:	92 bd       	out	0x22, r25	; 34
    4df4:	81 bd       	out	0x21, r24	; 33
    4df6:	20 bd       	out	0x20, r18	; 32
    4df8:	0f b6       	in	r0, 0x3f	; 63
    4dfa:	f8 94       	cli
    4dfc:	fa 9a       	sbi	0x1f, 2	; 31
    4dfe:	f9 9a       	sbi	0x1f, 1	; 31
    4e00:	0f be       	out	0x3f, r0	; 63
    4e02:	01 96       	adiw	r24, 0x01	; 1
    4e04:	08 95       	ret

00004e06 <calloc>:
    4e06:	0f 93       	push	r16
    4e08:	1f 93       	push	r17
    4e0a:	cf 93       	push	r28
    4e0c:	df 93       	push	r29
    4e0e:	86 9f       	mul	r24, r22
    4e10:	80 01       	movw	r16, r0
    4e12:	87 9f       	mul	r24, r23
    4e14:	10 0d       	add	r17, r0
    4e16:	96 9f       	mul	r25, r22
    4e18:	10 0d       	add	r17, r0
    4e1a:	11 24       	eor	r1, r1
    4e1c:	c8 01       	movw	r24, r16
    4e1e:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <malloc>
    4e22:	ec 01       	movw	r28, r24
    4e24:	00 97       	sbiw	r24, 0x00	; 0
    4e26:	29 f0       	breq	.+10     	; 0x4e32 <calloc+0x2c>
    4e28:	a8 01       	movw	r20, r16
    4e2a:	60 e0       	ldi	r22, 0x00	; 0
    4e2c:	70 e0       	ldi	r23, 0x00	; 0
    4e2e:	0e 94 4c 28 	call	0x5098	; 0x5098 <memset>
    4e32:	ce 01       	movw	r24, r28
    4e34:	df 91       	pop	r29
    4e36:	cf 91       	pop	r28
    4e38:	1f 91       	pop	r17
    4e3a:	0f 91       	pop	r16
    4e3c:	08 95       	ret

00004e3e <malloc>:
    4e3e:	cf 93       	push	r28
    4e40:	df 93       	push	r29
    4e42:	82 30       	cpi	r24, 0x02	; 2
    4e44:	91 05       	cpc	r25, r1
    4e46:	10 f4       	brcc	.+4      	; 0x4e4c <malloc+0xe>
    4e48:	82 e0       	ldi	r24, 0x02	; 2
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	e0 91 dc 06 	lds	r30, 0x06DC
    4e50:	f0 91 dd 06 	lds	r31, 0x06DD
    4e54:	20 e0       	ldi	r18, 0x00	; 0
    4e56:	30 e0       	ldi	r19, 0x00	; 0
    4e58:	c0 e0       	ldi	r28, 0x00	; 0
    4e5a:	d0 e0       	ldi	r29, 0x00	; 0
    4e5c:	30 97       	sbiw	r30, 0x00	; 0
    4e5e:	11 f1       	breq	.+68     	; 0x4ea4 <malloc+0x66>
    4e60:	40 81       	ld	r20, Z
    4e62:	51 81       	ldd	r21, Z+1	; 0x01
    4e64:	48 17       	cp	r20, r24
    4e66:	59 07       	cpc	r21, r25
    4e68:	c0 f0       	brcs	.+48     	; 0x4e9a <malloc+0x5c>
    4e6a:	48 17       	cp	r20, r24
    4e6c:	59 07       	cpc	r21, r25
    4e6e:	61 f4       	brne	.+24     	; 0x4e88 <malloc+0x4a>
    4e70:	82 81       	ldd	r24, Z+2	; 0x02
    4e72:	93 81       	ldd	r25, Z+3	; 0x03
    4e74:	20 97       	sbiw	r28, 0x00	; 0
    4e76:	19 f0       	breq	.+6      	; 0x4e7e <malloc+0x40>
    4e78:	9b 83       	std	Y+3, r25	; 0x03
    4e7a:	8a 83       	std	Y+2, r24	; 0x02
    4e7c:	2b c0       	rjmp	.+86     	; 0x4ed4 <malloc+0x96>
    4e7e:	90 93 dd 06 	sts	0x06DD, r25
    4e82:	80 93 dc 06 	sts	0x06DC, r24
    4e86:	26 c0       	rjmp	.+76     	; 0x4ed4 <malloc+0x96>
    4e88:	21 15       	cp	r18, r1
    4e8a:	31 05       	cpc	r19, r1
    4e8c:	19 f0       	breq	.+6      	; 0x4e94 <malloc+0x56>
    4e8e:	42 17       	cp	r20, r18
    4e90:	53 07       	cpc	r21, r19
    4e92:	18 f4       	brcc	.+6      	; 0x4e9a <malloc+0x5c>
    4e94:	9a 01       	movw	r18, r20
    4e96:	be 01       	movw	r22, r28
    4e98:	df 01       	movw	r26, r30
    4e9a:	ef 01       	movw	r28, r30
    4e9c:	02 80       	ldd	r0, Z+2	; 0x02
    4e9e:	f3 81       	ldd	r31, Z+3	; 0x03
    4ea0:	e0 2d       	mov	r30, r0
    4ea2:	dc cf       	rjmp	.-72     	; 0x4e5c <malloc+0x1e>
    4ea4:	21 15       	cp	r18, r1
    4ea6:	31 05       	cpc	r19, r1
    4ea8:	09 f1       	breq	.+66     	; 0x4eec <malloc+0xae>
    4eaa:	28 1b       	sub	r18, r24
    4eac:	39 0b       	sbc	r19, r25
    4eae:	24 30       	cpi	r18, 0x04	; 4
    4eb0:	31 05       	cpc	r19, r1
    4eb2:	90 f4       	brcc	.+36     	; 0x4ed8 <malloc+0x9a>
    4eb4:	12 96       	adiw	r26, 0x02	; 2
    4eb6:	8d 91       	ld	r24, X+
    4eb8:	9c 91       	ld	r25, X
    4eba:	13 97       	sbiw	r26, 0x03	; 3
    4ebc:	61 15       	cp	r22, r1
    4ebe:	71 05       	cpc	r23, r1
    4ec0:	21 f0       	breq	.+8      	; 0x4eca <malloc+0x8c>
    4ec2:	fb 01       	movw	r30, r22
    4ec4:	93 83       	std	Z+3, r25	; 0x03
    4ec6:	82 83       	std	Z+2, r24	; 0x02
    4ec8:	04 c0       	rjmp	.+8      	; 0x4ed2 <malloc+0x94>
    4eca:	90 93 dd 06 	sts	0x06DD, r25
    4ece:	80 93 dc 06 	sts	0x06DC, r24
    4ed2:	fd 01       	movw	r30, r26
    4ed4:	32 96       	adiw	r30, 0x02	; 2
    4ed6:	44 c0       	rjmp	.+136    	; 0x4f60 <malloc+0x122>
    4ed8:	fd 01       	movw	r30, r26
    4eda:	e2 0f       	add	r30, r18
    4edc:	f3 1f       	adc	r31, r19
    4ede:	81 93       	st	Z+, r24
    4ee0:	91 93       	st	Z+, r25
    4ee2:	22 50       	subi	r18, 0x02	; 2
    4ee4:	31 09       	sbc	r19, r1
    4ee6:	2d 93       	st	X+, r18
    4ee8:	3c 93       	st	X, r19
    4eea:	3a c0       	rjmp	.+116    	; 0x4f60 <malloc+0x122>
    4eec:	20 91 da 06 	lds	r18, 0x06DA
    4ef0:	30 91 db 06 	lds	r19, 0x06DB
    4ef4:	23 2b       	or	r18, r19
    4ef6:	41 f4       	brne	.+16     	; 0x4f08 <malloc+0xca>
    4ef8:	20 91 12 02 	lds	r18, 0x0212
    4efc:	30 91 13 02 	lds	r19, 0x0213
    4f00:	30 93 db 06 	sts	0x06DB, r19
    4f04:	20 93 da 06 	sts	0x06DA, r18
    4f08:	20 91 10 02 	lds	r18, 0x0210
    4f0c:	30 91 11 02 	lds	r19, 0x0211
    4f10:	21 15       	cp	r18, r1
    4f12:	31 05       	cpc	r19, r1
    4f14:	41 f4       	brne	.+16     	; 0x4f26 <malloc+0xe8>
    4f16:	2d b7       	in	r18, 0x3d	; 61
    4f18:	3e b7       	in	r19, 0x3e	; 62
    4f1a:	40 91 14 02 	lds	r20, 0x0214
    4f1e:	50 91 15 02 	lds	r21, 0x0215
    4f22:	24 1b       	sub	r18, r20
    4f24:	35 0b       	sbc	r19, r21
    4f26:	e0 91 da 06 	lds	r30, 0x06DA
    4f2a:	f0 91 db 06 	lds	r31, 0x06DB
    4f2e:	e2 17       	cp	r30, r18
    4f30:	f3 07       	cpc	r31, r19
    4f32:	a0 f4       	brcc	.+40     	; 0x4f5c <malloc+0x11e>
    4f34:	2e 1b       	sub	r18, r30
    4f36:	3f 0b       	sbc	r19, r31
    4f38:	28 17       	cp	r18, r24
    4f3a:	39 07       	cpc	r19, r25
    4f3c:	78 f0       	brcs	.+30     	; 0x4f5c <malloc+0x11e>
    4f3e:	ac 01       	movw	r20, r24
    4f40:	4e 5f       	subi	r20, 0xFE	; 254
    4f42:	5f 4f       	sbci	r21, 0xFF	; 255
    4f44:	24 17       	cp	r18, r20
    4f46:	35 07       	cpc	r19, r21
    4f48:	48 f0       	brcs	.+18     	; 0x4f5c <malloc+0x11e>
    4f4a:	4e 0f       	add	r20, r30
    4f4c:	5f 1f       	adc	r21, r31
    4f4e:	50 93 db 06 	sts	0x06DB, r21
    4f52:	40 93 da 06 	sts	0x06DA, r20
    4f56:	81 93       	st	Z+, r24
    4f58:	91 93       	st	Z+, r25
    4f5a:	02 c0       	rjmp	.+4      	; 0x4f60 <malloc+0x122>
    4f5c:	e0 e0       	ldi	r30, 0x00	; 0
    4f5e:	f0 e0       	ldi	r31, 0x00	; 0
    4f60:	cf 01       	movw	r24, r30
    4f62:	df 91       	pop	r29
    4f64:	cf 91       	pop	r28
    4f66:	08 95       	ret

00004f68 <free>:
    4f68:	0f 93       	push	r16
    4f6a:	1f 93       	push	r17
    4f6c:	cf 93       	push	r28
    4f6e:	df 93       	push	r29
    4f70:	00 97       	sbiw	r24, 0x00	; 0
    4f72:	09 f4       	brne	.+2      	; 0x4f76 <free+0xe>
    4f74:	8c c0       	rjmp	.+280    	; 0x508e <free+0x126>
    4f76:	fc 01       	movw	r30, r24
    4f78:	32 97       	sbiw	r30, 0x02	; 2
    4f7a:	13 82       	std	Z+3, r1	; 0x03
    4f7c:	12 82       	std	Z+2, r1	; 0x02
    4f7e:	00 91 dc 06 	lds	r16, 0x06DC
    4f82:	10 91 dd 06 	lds	r17, 0x06DD
    4f86:	01 15       	cp	r16, r1
    4f88:	11 05       	cpc	r17, r1
    4f8a:	81 f4       	brne	.+32     	; 0x4fac <free+0x44>
    4f8c:	20 81       	ld	r18, Z
    4f8e:	31 81       	ldd	r19, Z+1	; 0x01
    4f90:	82 0f       	add	r24, r18
    4f92:	93 1f       	adc	r25, r19
    4f94:	20 91 da 06 	lds	r18, 0x06DA
    4f98:	30 91 db 06 	lds	r19, 0x06DB
    4f9c:	28 17       	cp	r18, r24
    4f9e:	39 07       	cpc	r19, r25
    4fa0:	79 f5       	brne	.+94     	; 0x5000 <free+0x98>
    4fa2:	f0 93 db 06 	sts	0x06DB, r31
    4fa6:	e0 93 da 06 	sts	0x06DA, r30
    4faa:	71 c0       	rjmp	.+226    	; 0x508e <free+0x126>
    4fac:	d8 01       	movw	r26, r16
    4fae:	40 e0       	ldi	r20, 0x00	; 0
    4fb0:	50 e0       	ldi	r21, 0x00	; 0
    4fb2:	ae 17       	cp	r26, r30
    4fb4:	bf 07       	cpc	r27, r31
    4fb6:	50 f4       	brcc	.+20     	; 0x4fcc <free+0x64>
    4fb8:	12 96       	adiw	r26, 0x02	; 2
    4fba:	2d 91       	ld	r18, X+
    4fbc:	3c 91       	ld	r19, X
    4fbe:	13 97       	sbiw	r26, 0x03	; 3
    4fc0:	ad 01       	movw	r20, r26
    4fc2:	21 15       	cp	r18, r1
    4fc4:	31 05       	cpc	r19, r1
    4fc6:	09 f1       	breq	.+66     	; 0x500a <free+0xa2>
    4fc8:	d9 01       	movw	r26, r18
    4fca:	f3 cf       	rjmp	.-26     	; 0x4fb2 <free+0x4a>
    4fcc:	9d 01       	movw	r18, r26
    4fce:	da 01       	movw	r26, r20
    4fd0:	33 83       	std	Z+3, r19	; 0x03
    4fd2:	22 83       	std	Z+2, r18	; 0x02
    4fd4:	60 81       	ld	r22, Z
    4fd6:	71 81       	ldd	r23, Z+1	; 0x01
    4fd8:	86 0f       	add	r24, r22
    4fda:	97 1f       	adc	r25, r23
    4fdc:	82 17       	cp	r24, r18
    4fde:	93 07       	cpc	r25, r19
    4fe0:	69 f4       	brne	.+26     	; 0x4ffc <free+0x94>
    4fe2:	ec 01       	movw	r28, r24
    4fe4:	28 81       	ld	r18, Y
    4fe6:	39 81       	ldd	r19, Y+1	; 0x01
    4fe8:	26 0f       	add	r18, r22
    4fea:	37 1f       	adc	r19, r23
    4fec:	2e 5f       	subi	r18, 0xFE	; 254
    4fee:	3f 4f       	sbci	r19, 0xFF	; 255
    4ff0:	31 83       	std	Z+1, r19	; 0x01
    4ff2:	20 83       	st	Z, r18
    4ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ff8:	93 83       	std	Z+3, r25	; 0x03
    4ffa:	82 83       	std	Z+2, r24	; 0x02
    4ffc:	45 2b       	or	r20, r21
    4ffe:	29 f4       	brne	.+10     	; 0x500a <free+0xa2>
    5000:	f0 93 dd 06 	sts	0x06DD, r31
    5004:	e0 93 dc 06 	sts	0x06DC, r30
    5008:	42 c0       	rjmp	.+132    	; 0x508e <free+0x126>
    500a:	13 96       	adiw	r26, 0x03	; 3
    500c:	fc 93       	st	X, r31
    500e:	ee 93       	st	-X, r30
    5010:	12 97       	sbiw	r26, 0x02	; 2
    5012:	ed 01       	movw	r28, r26
    5014:	49 91       	ld	r20, Y+
    5016:	59 91       	ld	r21, Y+
    5018:	9e 01       	movw	r18, r28
    501a:	24 0f       	add	r18, r20
    501c:	35 1f       	adc	r19, r21
    501e:	e2 17       	cp	r30, r18
    5020:	f3 07       	cpc	r31, r19
    5022:	71 f4       	brne	.+28     	; 0x5040 <free+0xd8>
    5024:	80 81       	ld	r24, Z
    5026:	91 81       	ldd	r25, Z+1	; 0x01
    5028:	84 0f       	add	r24, r20
    502a:	95 1f       	adc	r25, r21
    502c:	02 96       	adiw	r24, 0x02	; 2
    502e:	11 96       	adiw	r26, 0x01	; 1
    5030:	9c 93       	st	X, r25
    5032:	8e 93       	st	-X, r24
    5034:	82 81       	ldd	r24, Z+2	; 0x02
    5036:	93 81       	ldd	r25, Z+3	; 0x03
    5038:	13 96       	adiw	r26, 0x03	; 3
    503a:	9c 93       	st	X, r25
    503c:	8e 93       	st	-X, r24
    503e:	12 97       	sbiw	r26, 0x02	; 2
    5040:	e0 e0       	ldi	r30, 0x00	; 0
    5042:	f0 e0       	ldi	r31, 0x00	; 0
    5044:	d8 01       	movw	r26, r16
    5046:	12 96       	adiw	r26, 0x02	; 2
    5048:	8d 91       	ld	r24, X+
    504a:	9c 91       	ld	r25, X
    504c:	13 97       	sbiw	r26, 0x03	; 3
    504e:	00 97       	sbiw	r24, 0x00	; 0
    5050:	19 f0       	breq	.+6      	; 0x5058 <free+0xf0>
    5052:	f8 01       	movw	r30, r16
    5054:	8c 01       	movw	r16, r24
    5056:	f6 cf       	rjmp	.-20     	; 0x5044 <free+0xdc>
    5058:	8d 91       	ld	r24, X+
    505a:	9c 91       	ld	r25, X
    505c:	98 01       	movw	r18, r16
    505e:	2e 5f       	subi	r18, 0xFE	; 254
    5060:	3f 4f       	sbci	r19, 0xFF	; 255
    5062:	82 0f       	add	r24, r18
    5064:	93 1f       	adc	r25, r19
    5066:	20 91 da 06 	lds	r18, 0x06DA
    506a:	30 91 db 06 	lds	r19, 0x06DB
    506e:	28 17       	cp	r18, r24
    5070:	39 07       	cpc	r19, r25
    5072:	69 f4       	brne	.+26     	; 0x508e <free+0x126>
    5074:	30 97       	sbiw	r30, 0x00	; 0
    5076:	29 f4       	brne	.+10     	; 0x5082 <free+0x11a>
    5078:	10 92 dd 06 	sts	0x06DD, r1
    507c:	10 92 dc 06 	sts	0x06DC, r1
    5080:	02 c0       	rjmp	.+4      	; 0x5086 <free+0x11e>
    5082:	13 82       	std	Z+3, r1	; 0x03
    5084:	12 82       	std	Z+2, r1	; 0x02
    5086:	10 93 db 06 	sts	0x06DB, r17
    508a:	00 93 da 06 	sts	0x06DA, r16
    508e:	df 91       	pop	r29
    5090:	cf 91       	pop	r28
    5092:	1f 91       	pop	r17
    5094:	0f 91       	pop	r16
    5096:	08 95       	ret

00005098 <memset>:
    5098:	dc 01       	movw	r26, r24
    509a:	01 c0       	rjmp	.+2      	; 0x509e <memset+0x6>
    509c:	6d 93       	st	X+, r22
    509e:	41 50       	subi	r20, 0x01	; 1
    50a0:	50 40       	sbci	r21, 0x00	; 0
    50a2:	e0 f7       	brcc	.-8      	; 0x509c <memset+0x4>
    50a4:	08 95       	ret

000050a6 <_exit>:
    50a6:	f8 94       	cli

000050a8 <__stop_program>:
    50a8:	ff cf       	rjmp	.-2      	; 0x50a8 <__stop_program>
