   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 336               		.section	.rodata.str1.1,"aMS",@progbits,1
 337               	.LC0:
 338 0000 7374 6172 		.string	"started packet rx\r"
 338      7465 6420 
 338      7061 636B 
 338      6574 2072 
 338      780D 00
 339               		.text
 341               	.global	callback1
 343               	callback1:
 344               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *  Contributing Authors (specific to this file):
  23:main.c        **** *  Zane Starr
  24:main.c        **** *******************************************************************************/
  25:main.c        **** 
  26:main.c        **** 
  27:main.c        **** #include <nrk.h>
  28:main.c        **** #include <include.h>
  29:main.c        **** #include <ulib.h>
  30:main.c        **** #include <stdio.h>
  31:main.c        **** #include <avr/sleep.h>
  32:main.c        **** #include <hal.h>
  33:main.c        **** #include <nrk_error.h>
  34:main.c        **** #include <nrk_timer.h>
  35:main.c        **** #include <nrk_driver_list.h>
  36:main.c        **** #include <nrk_driver.h>
  37:main.c        **** #include <hal_firefly3.h>
  38:main.c        **** #include <avr/interrupt.h>
  39:main.c        **** #include <nrk_pin_define.h>
  40:main.c        **** #include <nrk_events.h>
  41:main.c        **** #include <basic_rf.h>
  42:main.c        **** #include <avr/wdt.h>
  43:main.c        **** #include <avr/eeprom.h>
  44:main.c        **** 
  45:main.c        **** 
  46:main.c        **** 
  47:main.c        **** #define BUFFER_SIZE 80
  48:main.c        **** #define BASE_MS 200
  49:main.c        **** #define MAC_ADDR        0x0003
  50:main.c        **** 
  51:main.c        **** RF_RX_INFO rfRxInfo;
  52:main.c        **** 
  53:main.c        **** nrk_task_type RX_TASK;
  54:main.c        **** NRK_STK rx_task_stack[NRK_APP_STACKSIZE];
  55:main.c        **** void rx_task (void);
  56:main.c        **** 
  57:main.c        **** void nrk_create_taskset ();
  58:main.c        **** 
  59:main.c        **** uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
  60:main.c        **** 
  61:main.c        **** uint8_t packet_len=0;
  62:main.c        **** uint8_t packet_ready=0;
  63:main.c        **** 
  64:main.c        **** char buf[BUFFER_SIZE];
  65:main.c        **** //char receive_buf[BUFFER_SIZE];
  66:main.c        **** 
  67:main.c        **** void nrk_create_taskset();
  68:main.c        **** 
  69:main.c        **** int
  70:main.c        **** main ()
  71:main.c        **** {
  72:main.c        ****   nrk_setup_ports();
  73:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  74:main.c        **** 
  75:main.c        ****   printf( PSTR("starting...\r\n") );
  76:main.c        ****   
  77:main.c        ****   nrk_init();
  78:main.c        ****   nrk_time_set(0,0);
  79:main.c        **** 
  80:main.c        ****   nrk_create_taskset ();
  81:main.c        ****   nrk_start();
  82:main.c        ****   
  83:main.c        ****   return 0;
  84:main.c        **** }
  85:main.c        **** 
  86:main.c        **** RF_RX_INFO *rf_rx_callback(RF_RX_INFO *pRRI)
  87:main.c        **** {
  88:main.c        **** 	//printf("received packet!\r\n");
  89:main.c        **** 	return pRRI;
  90:main.c        **** }
  91:main.c        **** 
  92:main.c        **** void callback1()
  93:main.c        **** {
 346               	.LM0:
 347               	.LFBB1:
 348               	/* prologue: function */
 349               	/* frame size = 0 */
 350               	/* stack size = 0 */
 351               	.L__stack_usage = 0
  94:main.c        **** 	printf("started packet rx\r\n");
 353               	.LM1:
 354 0000 80E0      		ldi r24,lo8(.LC0)
 355 0002 90E0      		ldi r25,hi8(.LC0)
 356 0004 0C94 0000 		jmp puts
 358               	.Lscope1:
 360               		.stabd	78,0,0
 361               		.section	.rodata.str1.1
 362               	.LC1:
 363 0013 6669 6E69 		.string	"finished packet rx\r"
 363      7368 6564 
 363      2070 6163 
 363      6B65 7420 
 363      7278 0D00 
 364               		.text
 366               	.global	callback2
 368               	callback2:
 369               		.stabd	46,0,0
  95:main.c        **** }
  96:main.c        **** 
  97:main.c        **** void callback2()
  98:main.c        **** {
 371               	.LM2:
 372               	.LFBB2:
 373               	/* prologue: function */
 374               	/* frame size = 0 */
 375               	/* stack size = 0 */
 376               	.L__stack_usage = 0
  99:main.c        **** 	printf("finished packet rx\r\n");
 378               	.LM3:
 379 0008 80E0      		ldi r24,lo8(.LC1)
 380 000a 90E0      		ldi r25,hi8(.LC1)
 381 000c 0E94 0000 		call puts
 100:main.c        **** 	rf_rx_off();
 383               	.LM4:
 384 0010 0E94 0000 		call rf_rx_off
 101:main.c        **** 	rf_rx_on();
 386               	.LM5:
 387 0014 0C94 0000 		jmp rf_rx_on
 389               	.Lscope2:
 391               		.stabd	78,0,0
 392               		.section	.rodata.str1.1
 393               	.LC2:
 394 0027 5761 6974 		.string	"Waiting for packet...\r"
 394      696E 6720 
 394      666F 7220 
 394      7061 636B 
 394      6574 2E2E 
 395               		.text
 397               	.global	rx_task
 399               	rx_task:
 400               		.stabd	46,0,0
 102:main.c        **** }
 103:main.c        **** 
 104:main.c        **** void rx_task ()
 105:main.c        **** {
 402               	.LM6:
 403               	.LFBB3:
 404               	/* prologue: function */
 405               	/* frame size = 0 */
 406               	/* stack size = 0 */
 407               	.L__stack_usage = 0
 106:main.c        ****   uint8_t cnt,i,length,n;
 107:main.c        ****  
 108:main.c        ****   rfRxInfo.pPayload = rx_buf;
 409               	.LM7:
 410 0018 80E0      		ldi r24,lo8(rx_buf)
 411 001a 90E0      		ldi r25,hi8(rx_buf)
 412 001c 9093 0000 		sts rfRxInfo+5+1,r25
 413 0020 8093 0000 		sts rfRxInfo+5,r24
 109:main.c        ****   rfRxInfo.max_length = RF_MAX_PAYLOAD_SIZE;
 415               	.LM8:
 416 0024 84E7      		ldi r24,lo8(116)
 417 0026 8093 0000 		sts rfRxInfo+4,r24
 110:main.c        ****   rfRxInfo.ackRequest= 0;
 419               	.LM9:
 420 002a 1092 0000 		sts rfRxInfo+7,__zero_reg__
 111:main.c        ****   nrk_int_enable();
 422               	.LM10:
 423 002e 0E94 0000 		call nrk_int_enable
 112:main.c        ****   rf_init (&rfRxInfo, 13, 0xffff, 0x0);
 425               	.LM11:
 426 0032 20E0      		ldi r18,0
 427 0034 30E0      		ldi r19,0
 428 0036 4FEF      		ldi r20,lo8(-1)
 429 0038 5FEF      		ldi r21,lo8(-1)
 430 003a 6DE0      		ldi r22,lo8(13)
 431 003c 80E0      		ldi r24,lo8(rfRxInfo)
 432 003e 90E0      		ldi r25,hi8(rfRxInfo)
 433 0040 0E94 0000 		call rf_init
 113:main.c        ****   printf( "Waiting for packet...\r\n" );
 435               	.LM12:
 436 0044 80E0      		ldi r24,lo8(.LC2)
 437 0046 90E0      		ldi r25,hi8(.LC2)
 438 0048 0E94 0000 		call puts
 114:main.c        **** 
 115:main.c        ****   rx_start_callback(callback1);
 440               	.LM13:
 441 004c 80E0      		ldi r24,lo8(gs(callback1))
 442 004e 90E0      		ldi r25,hi8(gs(callback1))
 443 0050 0E94 0000 		call rx_start_callback
 116:main.c        ****   rx_end_callback(callback2);
 445               	.LM14:
 446 0054 80E0      		ldi r24,lo8(gs(callback2))
 447 0056 90E0      		ldi r25,hi8(gs(callback2))
 448 0058 0E94 0000 		call rx_end_callback
 449               	.L4:
 117:main.c        ****   while(1){
 118:main.c        **** 	  rf_rx_on();
 451               	.LM15:
 452 005c 0E94 0000 		call rf_rx_on
 119:main.c        **** 	  nrk_wait_until_next_period();
 454               	.LM16:
 455 0060 0E94 0000 		call nrk_wait_until_next_period
 120:main.c        **** 	
 121:main.c        **** 	/*
 122:main.c        **** 	rf_polling_rx_on();
 123:main.c        **** 	while ((n = rf_rx_check_sfd()) == 0)
 124:main.c        **** 	  continue; 
 125:main.c        **** 	if (n != 0) {
 126:main.c        **** 	  n = 0;
 127:main.c        **** 	  // Packet on its way
 128:main.c        **** 	  cnt=0;
 129:main.c        **** 	  while ((n = rf_polling_rx_packet ()) == 0) {
 130:main.c        **** 		if (cnt > 50) {
 131:main.c        **** 		  //printf( "PKT Timeout\r\n" );
 132:main.c        **** 		  break;		// huge timeout as failsafe
 133:main.c        **** 		}
 134:main.c        **** 		halWait(4000);
 135:main.c        **** 		cnt++;
 136:main.c        **** 	  }
 137:main.c        **** 	}
 138:main.c        **** 
 139:main.c        **** 	//rf_rx_off();
 140:main.c        **** 	if (n == 1) {
 141:main.c        **** 	  nrk_led_toggle(RED_LED);
 142:main.c        **** 	  nrk_led_toggle(GREEN_LED);
 143:main.c        **** 	  // CRC and checksum passed
 144:main.c        **** 	  //printf("packet received\r\n");
 145:main.c        **** 	  for(i=0; i<rfRxInfo.length; i++ )
 146:main.c        **** 		printf( "%c", rfRxInfo.pPayload[i]);
 147:main.c        **** 	  printf(",%d\r\n",rfRxInfo.rssi);
 148:main.c        **** 	} 
 149:main.c        **** 	else if(n != 0){ 
 150:main.c        **** 	  //printf( "CRC failed!\r\n" ); nrk_led_set(RED_LED); 
 151:main.c        **** 	}*/
 152:main.c        ****   }
 457               	.LM17:
 458 0064 00C0      		rjmp .L4
 460               	.Lscope3:
 462               		.stabd	78,0,0
 465               	.global	rf_rx_callback
 467               	rf_rx_callback:
 468               		.stabd	46,0,0
  87:main.c        **** 	//printf("received packet!\r\n");
 470               	.LM18:
 471               	.LFBB4:
 472               	/* prologue: function */
 473               	/* frame size = 0 */
 474               	/* stack size = 0 */
 475               	.L__stack_usage = 0
  90:main.c        **** 
 477               	.LM19:
 478 0066 0895      		ret
 480               	.Lscope4:
 482               		.stabd	78,0,0
 484               	.global	nrk_create_taskset
 486               	nrk_create_taskset:
 487               		.stabd	46,0,0
 153:main.c        **** }
 154:main.c        **** 
 155:main.c        **** void
 156:main.c        **** nrk_create_taskset()
 157:main.c        **** {
 489               	.LM20:
 490               	.LFBB5:
 491 0068 CF93      		push r28
 492 006a DF93      		push r29
 493               	/* prologue: function */
 494               	/* frame size = 0 */
 495               	/* stack size = 2 */
 496               	.L__stack_usage = 2
 158:main.c        ****   RX_TASK.task = rx_task;
 498               	.LM21:
 499 006c C0E0      		ldi r28,lo8(RX_TASK)
 500 006e D0E0      		ldi r29,hi8(RX_TASK)
 501 0070 80E0      		ldi r24,lo8(gs(rx_task))
 502 0072 90E0      		ldi r25,hi8(gs(rx_task))
 503 0074 9E83      		std Y+6,r25
 504 0076 8D83      		std Y+5,r24
 159:main.c        ****   nrk_task_set_stk( &RX_TASK, rx_task_stack, NRK_APP_STACKSIZE);
 506               	.LM22:
 507 0078 40E0      		ldi r20,0
 508 007a 51E0      		ldi r21,lo8(1)
 509 007c 60E0      		ldi r22,lo8(rx_task_stack)
 510 007e 70E0      		ldi r23,hi8(rx_task_stack)
 511 0080 CE01      		movw r24,r28
 512 0082 0E94 0000 		call nrk_task_set_stk
 160:main.c        ****   RX_TASK.prio = 2;
 514               	.LM23:
 515 0086 82E0      		ldi r24,lo8(2)
 516 0088 8887      		std Y+8,r24
 161:main.c        ****   RX_TASK.FirstActivation = TRUE;
 518               	.LM24:
 519 008a 81E0      		ldi r24,lo8(1)
 520 008c 8F83      		std Y+7,r24
 162:main.c        ****   RX_TASK.Type = BASIC_TASK;
 522               	.LM25:
 523 008e 8987      		std Y+9,r24
 163:main.c        ****   RX_TASK.SchType = PREEMPTIVE;
 525               	.LM26:
 526 0090 8A87      		std Y+10,r24
 164:main.c        ****   RX_TASK.period.secs = 1;
 528               	.LM27:
 529 0092 81E0      		ldi r24,lo8(1)
 530 0094 90E0      		ldi r25,0
 531 0096 A0E0      		ldi r26,0
 532 0098 B0E0      		ldi r27,0
 533 009a 8B87      		std Y+11,r24
 534 009c 9C87      		std Y+12,r25
 535 009e AD87      		std Y+13,r26
 536 00a0 BE87      		std Y+14,r27
 165:main.c        ****   RX_TASK.period.nano_secs = 0;
 538               	.LM28:
 539 00a2 1F86      		std Y+15,__zero_reg__
 540 00a4 188A      		std Y+16,__zero_reg__
 541 00a6 198A      		std Y+17,__zero_reg__
 542 00a8 1A8A      		std Y+18,__zero_reg__
 166:main.c        ****   RX_TASK.cpu_reserve.secs = 0;
 544               	.LM29:
 545 00aa 1B8A      		std Y+19,__zero_reg__
 546 00ac 1C8A      		std Y+20,__zero_reg__
 547 00ae 1D8A      		std Y+21,__zero_reg__
 548 00b0 1E8A      		std Y+22,__zero_reg__
 167:main.c        ****   RX_TASK.cpu_reserve.nano_secs = 0 * NANOS_PER_MS;
 550               	.LM30:
 551 00b2 1F8A      		std Y+23,__zero_reg__
 552 00b4 188E      		std Y+24,__zero_reg__
 553 00b6 198E      		std Y+25,__zero_reg__
 554 00b8 1A8E      		std Y+26,__zero_reg__
 168:main.c        ****   RX_TASK.offset.secs = 0;
 556               	.LM31:
 557 00ba 1B8E      		std Y+27,__zero_reg__
 558 00bc 1C8E      		std Y+28,__zero_reg__
 559 00be 1D8E      		std Y+29,__zero_reg__
 560 00c0 1E8E      		std Y+30,__zero_reg__
 169:main.c        ****   RX_TASK.offset.nano_secs = 0;
 562               	.LM32:
 563 00c2 1F8E      		std Y+31,__zero_reg__
 564 00c4 18A2      		std Y+32,__zero_reg__
 565 00c6 19A2      		std Y+33,__zero_reg__
 566 00c8 1AA2      		std Y+34,__zero_reg__
 170:main.c        ****   nrk_activate_task (&RX_TASK);
 568               	.LM33:
 569 00ca CE01      		movw r24,r28
 570               	/* epilogue start */
 171:main.c        **** }
 572               	.LM34:
 573 00cc DF91      		pop r29
 574 00ce CF91      		pop r28
 170:main.c        ****   nrk_activate_task (&RX_TASK);
 576               	.LM35:
 577 00d0 0C94 0000 		jmp nrk_activate_task
 579               	.Lscope5:
 581               		.stabd	78,0,0
 582               		.section	.rodata.str1.1
 583               	.LC3:
 584 003e 7374 6172 		.string	"starting...\r"
 584      7469 6E67 
 584      2E2E 2E0D 
 584      00
 585               		.section	.text.startup,"ax",@progbits
 587               	.global	main
 589               	main:
 590               		.stabd	46,0,0
  71:main.c        ****   nrk_setup_ports();
 592               	.LM36:
 593               	.LFBB6:
 594               	/* prologue: function */
 595               	/* frame size = 0 */
 596               	/* stack size = 0 */
 597               	.L__stack_usage = 0
  72:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 599               	.LM37:
 600 0000 0E94 0000 		call nrk_setup_ports
  73:main.c        **** 
 602               	.LM38:
 603 0004 80E1      		ldi r24,lo8(16)
 604 0006 90E0      		ldi r25,0
 605 0008 0E94 0000 		call nrk_setup_uart
  75:main.c        ****   
 607               	.LM39:
 608 000c 80E0      		ldi r24,lo8(.LC3)
 609 000e 90E0      		ldi r25,hi8(.LC3)
 610 0010 0E94 0000 		call puts
  77:main.c        ****   nrk_time_set(0,0);
 612               	.LM40:
 613 0014 0E94 0000 		call nrk_init
  78:main.c        **** 
 615               	.LM41:
 616 0018 20E0      		ldi r18,0
 617 001a 30E0      		ldi r19,0
 618 001c A901      		movw r20,r18
 619 001e 60E0      		ldi r22,0
 620 0020 70E0      		ldi r23,0
 621 0022 CB01      		movw r24,r22
 622 0024 0E94 0000 		call nrk_time_set
  80:main.c        ****   nrk_start();
 624               	.LM42:
 625 0028 0E94 0000 		call nrk_create_taskset
  81:main.c        ****   
 627               	.LM43:
 628 002c 0E94 0000 		call nrk_start
  84:main.c        **** 
 630               	.LM44:
 631 0030 80E0      		ldi r24,0
 632 0032 90E0      		ldi r25,0
 633 0034 0895      		ret
 635               	.Lscope6:
 637               		.stabd	78,0,0
 638               		.comm	buf,80,1
 639               	.global	packet_ready
 640               		.section .bss
 643               	packet_ready:
 644 0000 00        		.zero	1
 645               	.global	packet_len
 648               	packet_len:
 649 0001 00        		.zero	1
 650               		.comm	rx_buf,116,1
 651               		.comm	rx_task_stack,256,1
 652               		.comm	RX_TASK,35,1
 653               		.comm	rfRxInfo,12,1
 654               		.comm	app_timer0_prescale,1,1
 655               		.comm	app_timer0_callback,2,1
 656               		.comm	_nrk_time_trigger,1,1
 657               		.comm	_nrk_prev_timer_val,1,1
 658               		.comm	error_num,1,1
 659               		.comm	error_task,1,1
 660               		.comm	nrk_kernel_stk_ptr,2,1
 661               		.comm	nrk_idle_task_stk,128,1
 662               		.comm	_nrk_signal_list,4,1
 679               		.text
 681               	.Letext0:
 682               		.ident	"GCC: (GNU) 4.9.2"
 683               	.global __do_copy_data
 684               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//cccyf2sr.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//cccyf2sr.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//cccyf2sr.s:4      *ABS*:000000000000003f __SREG__
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//cccyf2sr.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//cccyf2sr.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//cccyf2sr.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//cccyf2sr.s:343    .text:0000000000000000 callback1
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//cccyf2sr.s:368    .text:0000000000000008 callback2
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//cccyf2sr.s:399    .text:0000000000000018 rx_task
                            *COM*:0000000000000074 rx_buf
                            *COM*:000000000000000c rfRxInfo
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//cccyf2sr.s:467    .text:0000000000000066 rf_rx_callback
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//cccyf2sr.s:486    .text:0000000000000068 nrk_create_taskset
                            *COM*:0000000000000023 RX_TASK
                            *COM*:0000000000000100 rx_task_stack
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//cccyf2sr.s:589    .text.startup:0000000000000000 main
                            *COM*:0000000000000050 buf
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//cccyf2sr.s:643    .bss:0000000000000000 packet_ready
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//cccyf2sr.s:648    .bss:0000000000000001 packet_len
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
puts
rf_rx_off
rf_rx_on
nrk_int_enable
rf_init
rx_start_callback
rx_end_callback
nrk_wait_until_next_period
nrk_task_set_stk
nrk_activate_task
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_time_set
nrk_start
__do_copy_data
__do_clear_bss
