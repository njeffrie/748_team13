
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000164  00800200  00004c24  00004cb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004c24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002bb  00800364  00800364  00004e1c  2**0
                  ALLOC
  3 .stab         0000f3f0  00000000  00000000  00004e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008783  00000000  00000000  0001420c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0001c98f  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  0001c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  0001db00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  0001eb72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  0001eb8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 10 02 	jmp	0x420	; 0x420 <__ctors_end>
       4:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__vector_1>
       8:	0c 94 8d 1f 	jmp	0x3f1a	; 0x3f1a <__vector_2>
       c:	0c 94 bf 1f 	jmp	0x3f7e	; 0x3f7e <__vector_3>
      10:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      14:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      18:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      1c:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      20:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      24:	0c 94 29 1f 	jmp	0x3e52	; 0x3e52 <__vector_9>
      28:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      2c:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      30:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      34:	0c 94 88 1d 	jmp	0x3b10	; 0x3b10 <__vector_13>
      38:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      3c:	0c 94 88 1d 	jmp	0x3b10	; 0x3b10 <__vector_13>
      40:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      44:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      48:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      4c:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      50:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      54:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      58:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      5c:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      60:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      64:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      68:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      6c:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      70:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      74:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      78:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      7c:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      80:	0c 94 bb 1d 	jmp	0x3b76	; 0x3b76 <__vector_32>
      84:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      88:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      8c:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      90:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      94:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      98:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      9c:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      a0:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      a4:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      a8:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      ac:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      b0:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      b4:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      b8:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      bc:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      c0:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      c4:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      c8:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      cc:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      d0:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      d4:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      d8:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      dc:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      e0:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
      e4:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__vector_57>
      e8:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__vector_58>
      ec:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__vector_59>
      f0:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <__vector_60>
      f4:	0c 94 59 05 	jmp	0xab2	; 0xab2 <__vector_61>
      f8:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__vector_62>
      fc:	0c 94 38 05 	jmp	0xa70	; 0xa70 <__vector_63>
     100:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__vector_64>
     104:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
     108:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
     10c:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
     110:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
     114:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
     118:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
     11c:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__bad_interrupt>
     120:	d8 07       	cpc	r29, r24
     122:	e5 07       	cpc	r30, r21
     124:	f2 07       	cpc	r31, r18
     126:	ff 07       	cpc	r31, r31
     128:	0c 08       	sbc	r0, r12
     12a:	19 08       	sbc	r1, r9
     12c:	26 08       	sbc	r2, r6
     12e:	49 08       	sbc	r4, r9
     130:	57 08       	sbc	r5, r7
     132:	65 08       	sbc	r6, r5
     134:	73 08       	sbc	r7, r3
     136:	81 08       	sbc	r8, r1
     138:	8f 08       	sbc	r8, r15
     13a:	9d 08       	sbc	r9, r13
     13c:	c0 08       	sbc	r12, r0
     13e:	c2 08       	sbc	r12, r2
     140:	c4 08       	sbc	r12, r4
     142:	c6 08       	sbc	r12, r6
     144:	c8 08       	sbc	r12, r8
     146:	ca 08       	sbc	r12, r10
     148:	cc 08       	sbc	r12, r12
     14a:	eb 08       	sbc	r14, r11
     14c:	0e 09       	sbc	r16, r14
     14e:	32 09       	sbc	r19, r2
     150:	55 09       	sbc	r21, r5
     152:	78 09       	sbc	r23, r8
     154:	9b 09       	sbc	r25, r11
     156:	be 09       	sbc	r27, r14
     158:	f8 09       	sbc	r31, r8
     15a:	05 0a       	sbc	r0, r21
     15c:	12 0a       	sbc	r1, r18
     15e:	1f 0a       	sbc	r1, r31
     160:	2c 0a       	sbc	r2, r28
     162:	39 0a       	sbc	r3, r25
     164:	46 0a       	sbc	r4, r22
     166:	5f 0a       	sbc	r5, r31
     168:	6c 0a       	sbc	r6, r28
     16a:	79 0a       	sbc	r7, r25
     16c:	86 0a       	sbc	r8, r22
     16e:	93 0a       	sbc	r9, r19
     170:	a0 0a       	sbc	r10, r16
     172:	ad 0a       	sbc	r10, r29
     174:	1a 0e       	add	r1, r26
     176:	20 0e       	add	r2, r16
     178:	23 0e       	add	r2, r19
     17a:	26 0e       	add	r2, r22
     17c:	29 0e       	add	r2, r25
     17e:	2c 0e       	add	r2, r28
     180:	32 0e       	add	r3, r18
     182:	2f 0e       	add	r2, r31
     184:	35 0e       	add	r3, r21
     186:	38 0e       	add	r3, r24
     188:	3b 0e       	add	r3, r27
     18a:	44 0e       	add	r4, r20
     18c:	47 0e       	add	r4, r23
     18e:	4a 0e       	add	r4, r26
     190:	4d 0e       	add	r4, r29
     192:	41 0e       	add	r4, r17
     194:	17 0e       	add	r1, r23
     196:	1d 0e       	add	r1, r29
     198:	50 0e       	add	r5, r16
     19a:	53 0e       	add	r5, r19
     19c:	3e 0e       	add	r3, r30
     19e:	14 0e       	add	r1, r20
     1a0:	0a 0f       	add	r16, r26
     1a2:	0d 0f       	add	r16, r29
     1a4:	18 0f       	add	r17, r24
     1a6:	1d 0f       	add	r17, r29
     1a8:	24 0f       	add	r18, r20
     1aa:	2d 0f       	add	r18, r29
     1ac:	30 0f       	add	r19, r16
     1ae:	35 0f       	add	r19, r21
     1b0:	3c 0f       	add	r19, r28
     1b2:	45 0f       	add	r20, r21

000001b4 <__trampolines_end>:
     1b4:	55 4e       	sbci	r21, 0xE5	; 229
     1b6:	4b 4f       	sbci	r20, 0xFB	; 251
     1b8:	57 4e       	sbci	r21, 0xE7	; 231
	...

000001bb <__c.3397>:
     1bb:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000001ca <__c.3394>:
     1ca:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

000001db <__c.3391>:
     1db:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1eb:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

000001f6 <__c.3388>:
     1f6:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     206:	20 53 69 67 6e 61 6c 00                              Signal.

0000020e <__c.3385>:
     20e:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     21e:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

0000022e <__c.3382>:
     22e:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     23e:	72 6f 72 00                                         ror.

00000242 <__c.3379>:
     242:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000253 <__c.3376>:
     253:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     263:	61 72 74 00                                         art.

00000267 <__c.3373>:
     267:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000276 <__c.3370>:
     276:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     286:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000291 <__c.3367>:
     291:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000029d <__c.3364>:
     29d:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     2ad:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     2bd:	20 6f 6b 3f 00                                       ok?.

000002c2 <__c.3361>:
     2c2:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2d2:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002e0 <__c.3358>:
     2e0:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     2f0:	72 74 00                                            rt.

000002f3 <__c.3355>:
     2f3:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     303:	49 44 00                                            ID.

00000306 <__c.3352>:
     306:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     316:	20 57 61 6b 65 75 70 00                              Wakeup.

0000031e <__c.3349>:
     31e:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     32e:	6c 61 74 65 64 00                                   lated.

00000334 <__c.3346>:
     334:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     344:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000034f <__c.3343>:
     34f:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     35f:	69 6e 74 65 72 00                                   inter.

00000365 <__c.3340>:
     365:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     375:	6c 6f 77 00                                         low.

00000379 <__c.3337>:
     379:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     389:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     399:	6e 6f 75 67 68 21 00                                nough!.

000003a0 <__c.3333>:
     3a0:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     3b0:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     3c0:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     3d0:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

000003dc <__c.3330>:
     3dc:	29 3a 20 00                                         ): .

000003e0 <__c.3328>:
     3e0:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000003ec <__c.3312>:
     3ec:	4e 52 4b 20 48 61 6c 74 2e 2e 2e 0d 0a 00           NRK Halt......

000003fa <__c.3246>:
     3fa:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000409 <__c.2228>:
     409:	45 46 47 65 66 67 00                                EFGefg.

00000410 <__c.2222>:
     410:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000420 <__ctors_end>:
     420:	11 24       	eor	r1, r1
     422:	1f be       	out	0x3f, r1	; 63
     424:	cf ef       	ldi	r28, 0xFF	; 255
     426:	d1 e4       	ldi	r29, 0x41	; 65
     428:	de bf       	out	0x3e, r29	; 62
     42a:	cd bf       	out	0x3d, r28	; 61

0000042c <__do_copy_data>:
     42c:	13 e0       	ldi	r17, 0x03	; 3
     42e:	a0 e0       	ldi	r26, 0x00	; 0
     430:	b2 e0       	ldi	r27, 0x02	; 2
     432:	e4 e2       	ldi	r30, 0x24	; 36
     434:	fc e4       	ldi	r31, 0x4C	; 76
     436:	00 e0       	ldi	r16, 0x00	; 0
     438:	0b bf       	out	0x3b, r16	; 59
     43a:	02 c0       	rjmp	.+4      	; 0x440 <__do_copy_data+0x14>
     43c:	07 90       	elpm	r0, Z+
     43e:	0d 92       	st	X+, r0
     440:	a4 36       	cpi	r26, 0x64	; 100
     442:	b1 07       	cpc	r27, r17
     444:	d9 f7       	brne	.-10     	; 0x43c <__do_copy_data+0x10>

00000446 <__do_clear_bss>:
     446:	16 e0       	ldi	r17, 0x06	; 6
     448:	a4 e6       	ldi	r26, 0x64	; 100
     44a:	b3 e0       	ldi	r27, 0x03	; 3
     44c:	01 c0       	rjmp	.+2      	; 0x450 <.do_clear_bss_start>

0000044e <.do_clear_bss_loop>:
     44e:	1d 92       	st	X+, r1

00000450 <.do_clear_bss_start>:
     450:	af 31       	cpi	r26, 0x1F	; 31
     452:	b1 07       	cpc	r27, r17
     454:	e1 f7       	brne	.-8      	; 0x44e <.do_clear_bss_loop>
     456:	0e 94 d4 20 	call	0x41a8	; 0x41a8 <main>
     45a:	0c 94 10 26 	jmp	0x4c20	; 0x4c20 <_exit>

0000045e <__bad_interrupt>:
     45e:	0c 94 7e 1d 	jmp	0x3afc	; 0x3afc <__vector_default>

00000462 <rf_rx_callback>:
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
	// Any code here gets called the instant a packet is received from the interrupt   
	return pRRI;
}
     462:	08 95       	ret

00000464 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     464:	90 91 41 01 	lds	r25, 0x0141
     468:	9f 71       	andi	r25, 0x1F	; 31
     46a:	9f 31       	cpi	r25, 0x1F	; 31
     46c:	d9 f3       	breq	.-10     	; 0x464 <rf_cmd>
		continue;
	TRX_STATE = cmd;
     46e:	80 93 42 01 	sts	0x0142, r24
     472:	08 95       	ret

00000474 <set_wireless_prog>:
uint8_t reset_val[] = {0x43, 0x15, 0xa6, 0xd9, 0x3d, 0x31, 0x82, 0xf1, 0x8c, 0xa7, 0x4f, 0xc5, 0x99, 0x97, 0x04, 0xac};


void set_wireless_prog(uint8_t val)
{
   wireless_prog = val;
     474:	80 93 64 03 	sts	0x0364, r24
     478:	08 95       	ret

0000047a <rf_enable_glossy>:
}

void rf_enable_glossy()
{
	use_glossy = 1;
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	80 93 70 04 	sts	0x0470, r24
     480:	08 95       	ret

00000482 <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
     482:	10 92 70 04 	sts	0x0470, r1
     486:	08 95       	ret

00000488 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     488:	80 91 41 01 	lds	r24, 0x0141
     48c:	8f 71       	andi	r24, 0x1F	; 31
     48e:	8f 31       	cpi	r24, 0x1F	; 31
     490:	d9 f3       	breq	.-10     	; 0x488 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     492:	80 91 41 01 	lds	r24, 0x0141
     496:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
     498:	e1 f0       	breq	.+56     	; 0x4d2 <rf_power_down+0x4a>
     49a:	8f 30       	cpi	r24, 0x0F	; 15
     49c:	d1 f0       	breq	.+52     	; 0x4d2 <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
     49e:	80 91 41 01 	lds	r24, 0x0141
     4a2:	8f 71       	andi	r24, 0x1F	; 31
     4a4:	88 30       	cpi	r24, 0x08	; 8
     4a6:	31 f4       	brne	.+12     	; 0x4b4 <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
     4a8:	80 91 39 01 	lds	r24, 0x0139
     4ac:	82 60       	ori	r24, 0x02	; 2
     4ae:	80 93 39 01 	sts	0x0139, r24
     4b2:	0b c0       	rjmp	.+22     	; 0x4ca <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
     4b4:	88 e0       	ldi	r24, 0x08	; 8
     4b6:	0e 94 32 02 	call	0x464	; 0x464 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
     4ba:	80 91 41 01 	lds	r24, 0x0141
     4be:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
     4c0:	88 30       	cpi	r24, 0x08	; 8
     4c2:	d9 f7       	brne	.-10     	; 0x4ba <rf_power_down+0x32>
     4c4:	f1 cf       	rjmp	.-30     	; 0x4a8 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
     4c6:	8f 30       	cpi	r24, 0x0F	; 15
     4c8:	21 f0       	breq	.+8      	; 0x4d2 <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
     4ca:	80 91 41 01 	lds	r24, 0x0141
     4ce:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
     4d0:	d1 f7       	brne	.-12     	; 0x4c6 <rf_power_down+0x3e>
     4d2:	08 95       	ret

000004d4 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     4d4:	80 91 41 01 	lds	r24, 0x0141
     4d8:	8f 71       	andi	r24, 0x1F	; 31
     4da:	8f 31       	cpi	r24, 0x1F	; 31
     4dc:	d9 f3       	breq	.-10     	; 0x4d4 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     4de:	80 91 41 01 	lds	r24, 0x0141
     4e2:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
     4e4:	11 f0       	breq	.+4      	; 0x4ea <rf_power_up+0x16>
     4e6:	8f 30       	cpi	r24, 0x0F	; 15
     4e8:	51 f4       	brne	.+20     	; 0x4fe <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
     4ea:	80 91 39 01 	lds	r24, 0x0139
     4ee:	8d 7f       	andi	r24, 0xFD	; 253
     4f0:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
     4f4:	80 91 41 01 	lds	r24, 0x0141
     4f8:	8f 71       	andi	r24, 0x1F	; 31
     4fa:	88 30       	cpi	r24, 0x08	; 8
     4fc:	d9 f7       	brne	.-10     	; 0x4f4 <rf_power_up+0x20>
     4fe:	08 95       	ret

00000500 <rf_pll_on>:
	TRX_STATE = cmd;
}

void rf_pll_on()
{
   rf_cmd(PLL_ON);
     500:	89 e0       	ldi	r24, 0x09	; 9
     502:	0c 94 32 02 	jmp	0x464	; 0x464 <rf_cmd>

00000506 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
     506:	e5 e4       	ldi	r30, 0x45	; 69
     508:	f1 e0       	ldi	r31, 0x01	; 1
     50a:	90 81       	ld	r25, Z
     50c:	90 7f       	andi	r25, 0xF0	; 240
     50e:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
     510:	90 81       	ld	r25, Z
     512:	8f 70       	andi	r24, 0x0F	; 15
     514:	98 2b       	or	r25, r24
     516:	90 83       	st	Z, r25
     518:	08 95       	ret

0000051a <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
     51a:	e7 e5       	ldi	r30, 0x57	; 87
     51c:	f1 e0       	ldi	r31, 0x01	; 1
     51e:	80 81       	ld	r24, Z
     520:	8d 7f       	andi	r24, 0xFD	; 253
     522:	80 83       	st	Z, r24
     524:	08 95       	ret

00000526 <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
     526:	e7 e5       	ldi	r30, 0x57	; 87
     528:	f1 e0       	ldi	r31, 0x01	; 1
     52a:	80 81       	ld	r24, Z
     52c:	82 60       	ori	r24, 0x02	; 2
     52e:	80 83       	st	Z, r24
     530:	08 95       	ret

00000532 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
     532:	ee e6       	ldi	r30, 0x6E	; 110
     534:	f1 e0       	ldi	r31, 0x01	; 1
     536:	80 81       	ld	r24, Z
     538:	8f 7e       	andi	r24, 0xEF	; 239
     53a:	80 83       	st	Z, r24
     53c:	08 95       	ret

0000053e <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
     53e:	ee e6       	ldi	r30, 0x6E	; 110
     540:	f1 e0       	ldi	r31, 0x01	; 1
     542:	80 81       	ld	r24, Z
     544:	80 61       	ori	r24, 0x10	; 16
     546:	80 83       	st	Z, r24
     548:	08 95       	ret

0000054a <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
     54a:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
     54e:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
     552:	90 93 7b 04 	sts	0x047B, r25
     556:	80 93 7a 04 	sts	0x047A, r24
     55a:	08 95       	ret

0000055c <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
     55c:	90 93 75 04 	sts	0x0475, r25
     560:	80 93 74 04 	sts	0x0474, r24
	PHY_CC_CCA &= ~(0x1F);
     564:	e8 e4       	ldi	r30, 0x48	; 72
     566:	f1 e0       	ldi	r31, 0x01	; 1
     568:	80 81       	ld	r24, Z
     56a:	80 7e       	andi	r24, 0xE0	; 224
     56c:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
     56e:	80 81       	ld	r24, Z
     570:	68 2b       	or	r22, r24
     572:	60 83       	st	Z, r22
     574:	08 95       	ret

00000576 <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
     576:	90 93 68 03 	sts	0x0368, r25
     57a:	80 93 67 03 	sts	0x0367, r24
     57e:	08 95       	ret

00000580 <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
     580:	90 93 66 03 	sts	0x0366, r25
     584:	80 93 65 03 	sts	0x0365, r24
     588:	08 95       	ret

0000058a <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	fc 01       	movw	r30, r24
     594:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
     596:	80 e2       	ldi	r24, 0x20	; 32
     598:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
     59c:	80 ec       	ldi	r24, 0xC0	; 192
     59e:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
     5a2:	60 62       	ori	r22, 0x20	; 32
     5a4:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
     5a8:	85 ec       	ldi	r24, 0xC5	; 197
     5aa:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
     5ae:	87 ea       	ldi	r24, 0xA7	; 167
     5b0:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
     5b4:	80 e8       	ldi	r24, 0x80	; 128
     5b6:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
     5ba:	20 93 60 01 	sts	0x0160, r18
     5be:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
     5c2:	40 93 62 01 	sts	0x0162, r20
     5c6:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     5ca:	c6 e4       	ldi	r28, 0x46	; 70
     5cc:	d1 e0       	ldi	r29, 0x01	; 1
     5ce:	08 81       	ld	r16, Y
     5d0:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     5d2:	98 81       	ld	r25, Y
     5d4:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     5d6:	30 2f       	mov	r19, r16
     5d8:	32 95       	swap	r19
     5da:	36 95       	lsr	r19
     5dc:	37 70       	andi	r19, 0x07	; 7
     5de:	60 e4       	ldi	r22, 0x40	; 64
     5e0:	36 9f       	mul	r19, r22
     5e2:	80 01       	movw	r16, r0
     5e4:	11 24       	eor	r1, r1
     5e6:	22 95       	swap	r18
     5e8:	26 95       	lsr	r18
     5ea:	23 70       	andi	r18, 0x03	; 3
     5ec:	62 2f       	mov	r22, r18
     5ee:	60 2b       	or	r22, r16
     5f0:	82 95       	swap	r24
     5f2:	86 95       	lsr	r24
     5f4:	83 70       	andi	r24, 0x03	; 3
     5f6:	70 e1       	ldi	r23, 0x10	; 16
     5f8:	87 9f       	mul	r24, r23
     5fa:	90 01       	movw	r18, r0
     5fc:	11 24       	eor	r1, r1
     5fe:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     600:	92 95       	swap	r25
     602:	96 95       	lsr	r25
     604:	93 70       	andi	r25, 0x03	; 3
     606:	84 e0       	ldi	r24, 0x04	; 4
     608:	98 9f       	mul	r25, r24
     60a:	b0 01       	movw	r22, r0
     60c:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     60e:	62 2b       	or	r22, r18
     610:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     614:	88 81       	ld	r24, Y
     616:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     618:	92 95       	swap	r25
     61a:	96 95       	lsr	r25
     61c:	93 70       	andi	r25, 0x03	; 3
     61e:	39 2f       	mov	r19, r25
     620:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     622:	98 2f       	mov	r25, r24
     624:	92 95       	swap	r25
     626:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     628:	93 2b       	or	r25, r19
     62a:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
     62e:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
   
   /* Enable all radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
     638:	c4 e7       	ldi	r28, 0x74	; 116
     63a:	d4 e0       	ldi	r29, 0x04	; 4
     63c:	f9 83       	std	Y+1, r31	; 0x01
     63e:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
     640:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
     642:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
     644:	5d 83       	std	Y+5, r21	; 0x05
     646:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
     648:	bf 83       	std	Y+7, r27	; 0x07
     64a:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
     64c:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 93 8f 04 	sts	0x048F, r24
   rx_ready = 0;
     654:	10 92 ab 04 	sts	0x04AB, r1
   tx_done = 0;
     658:	10 92 7e 04 	sts	0x047E, r1

	use_glossy = 0;
     65c:	10 92 70 04 	sts	0x0470, r1

} // rf_init() 
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	08 95       	ret

0000066a <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
     66a:	86 e1       	ldi	r24, 0x16	; 22
     66c:	0c 94 32 02 	jmp	0x464	; 0x464 <rf_cmd>

00000670 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
     670:	86 e1       	ldi	r24, 0x16	; 22
     672:	0c 94 32 02 	jmp	0x464	; 0x464 <rf_cmd>

00000676 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
   rf_cmd(TRX_OFF);
     676:	88 e0       	ldi	r24, 0x08	; 8
     678:	0e 94 32 02 	call	0x464	; 0x464 <rf_cmd>
   rx_ready = 0;
     67c:	10 92 ab 04 	sts	0x04AB, r1
     680:	08 95       	ret

00000682 <rf_tx_packet>:
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------


uint8_t rf_tx_packet(RF_TX_INFO *pRTI)
{
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	fc 01       	movw	r30, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
     68c:	80 91 8f 04 	lds	r24, 0x048F
     690:	81 11       	cpse	r24, r1
     692:	02 c0       	rjmp	.+4      	; 0x698 <rf_tx_packet+0x16>
		return NRK_ERROR;
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	ab c0       	rjmp	.+342    	; 0x7ee <rf_tx_packet+0x16c>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
     698:	26 81       	ldd	r18, Z+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     69a:	80 91 76 04 	lds	r24, 0x0476
     69e:	8f 5f       	subi	r24, 0xFF	; 255
     6a0:	80 93 76 04 	sts	0x0476, r24
	machead->fcf = fcf;
     6a4:	90 91 81 01 	lds	r25, 0x0181
     6a8:	90 7e       	andi	r25, 0xE0	; 224
     6aa:	91 60       	ori	r25, 0x01	; 1
     6ac:	20 fb       	bst	r18, 0
     6ae:	95 f9       	bld	r25, 5
     6b0:	9f 73       	andi	r25, 0x3F	; 63
     6b2:	90 64       	ori	r25, 0x40	; 64
     6b4:	90 93 81 01 	sts	0x0181, r25
     6b8:	88 e8       	ldi	r24, 0x88	; 136
     6ba:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
     6be:	80 91 70 04 	lds	r24, 0x0470
     6c2:	88 23       	and	r24, r24
     6c4:	61 f0       	breq	.+24     	; 0x6de <rf_tx_packet+0x5c>
		machead->seq_num = 0xFF;
     6c6:	8f ef       	ldi	r24, 0xFF	; 255
     6c8:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
     6cc:	8a ea       	ldi	r24, 0xAA	; 170
     6ce:	9a ea       	ldi	r25, 0xAA	; 170
     6d0:	90 93 89 01 	sts	0x0189, r25
     6d4:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	9f ef       	ldi	r25, 0xFF	; 255
     6dc:	10 c0       	rjmp	.+32     	; 0x6fe <rf_tx_packet+0x7c>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
     6de:	80 91 76 04 	lds	r24, 0x0476
     6e2:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
     6e6:	20 91 61 01 	lds	r18, 0x0161
     6ea:	80 91 60 01 	lds	r24, 0x0160
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	92 2b       	or	r25, r18
     6f2:	90 93 89 01 	sts	0x0189, r25
     6f6:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = pRTI->destAddr;
     6fa:	80 81       	ld	r24, Z
     6fc:	91 81       	ldd	r25, Z+1	; 0x01
     6fe:	90 93 87 01 	sts	0x0187, r25
     702:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
     706:	20 91 63 01 	lds	r18, 0x0163
     70a:	80 91 62 01 	lds	r24, 0x0162
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	92 2b       	or	r25, r18
     712:	90 93 85 01 	sts	0x0185, r25
     716:	80 93 84 01 	sts	0x0184, r24
     71a:	8f 01       	movw	r16, r30
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
     71c:	42 81       	ldd	r20, Z+2	; 0x02
     71e:	55 27       	eor	r21, r21
     720:	47 fd       	sbrc	r20, 7
     722:	50 95       	com	r21
     724:	63 81       	ldd	r22, Z+3	; 0x03
     726:	74 81       	ldd	r23, Z+4	; 0x04
     728:	8a e8       	ldi	r24, 0x8A	; 138
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	0e 94 31 23 	call	0x4662	; 0x4662 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
     730:	f8 01       	movw	r30, r16
     732:	82 81       	ldd	r24, Z+2	; 0x02
     734:	85 5f       	subi	r24, 0xF5	; 245
     736:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     73a:	80 91 41 01 	lds	r24, 0x0141
     73e:	d8 2f       	mov	r29, r24
     740:	df 71       	andi	r29, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     742:	9f ef       	ldi	r25, 0xFF	; 255
     744:	9d 0f       	add	r25, r29
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     746:	92 30       	cpi	r25, 0x02	; 2
     748:	c0 f3       	brcs	.-16     	; 0x73a <rf_tx_packet+0xb8>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     74a:	d1 31       	cpi	r29, 0x11	; 17
     74c:	b1 f3       	breq	.-20     	; 0x73a <rf_tx_packet+0xb8>
     74e:	d2 31       	cpi	r29, 0x12	; 18
     750:	a1 f3       	breq	.-24     	; 0x73a <rf_tx_packet+0xb8>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     752:	df 31       	cpi	r29, 0x1F	; 31
     754:	91 f3       	breq	.-28     	; 0x73a <rf_tx_packet+0xb8>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     756:	98 ef       	ldi	r25, 0xF8	; 248
     758:	9d 0f       	add	r25, r29
     75a:	92 30       	cpi	r25, 0x02	; 2
     75c:	20 f0       	brcs	.+8      	; 0x766 <rf_tx_packet+0xe4>
     75e:	8f 70       	andi	r24, 0x0F	; 15
     760:	86 30       	cpi	r24, 0x06	; 6
     762:	09 f0       	breq	.+2      	; 0x766 <rf_tx_packet+0xe4>
     764:	97 cf       	rjmp	.-210    	; 0x694 <rf_tx_packet+0x12>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
     766:	86 e1       	ldi	r24, 0x16	; 22
     768:	0e 94 32 02 	call	0x464	; 0x464 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
     76c:	f8 01       	movw	r30, r16
     76e:	85 81       	ldd	r24, Z+5	; 0x05
     770:	81 11       	cpse	r24, r1
     772:	0b c0       	rjmp	.+22     	; 0x78a <rf_tx_packet+0x108>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
     774:	89 e0       	ldi	r24, 0x09	; 9
     776:	0e 94 32 02 	call	0x464	; 0x464 <rf_cmd>
	if(pRTI->ackRequest)
     77a:	f8 01       	movw	r30, r16
     77c:	86 81       	ldd	r24, Z+6	; 0x06
     77e:	88 23       	and	r24, r24
     780:	91 f0       	breq	.+36     	; 0x7a6 <rf_tx_packet+0x124>
		rf_cmd(TX_ARET_ON);
     782:	89 e1       	ldi	r24, 0x19	; 25
     784:	0e 94 32 02 	call	0x464	; 0x464 <rf_cmd>
     788:	0e c0       	rjmp	.+28     	; 0x7a6 <rf_tx_packet+0x124>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
     78a:	80 91 48 01 	lds	r24, 0x0148
     78e:	80 68       	ori	r24, 0x80	; 128
     790:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
     794:	80 91 41 01 	lds	r24, 0x0141
     798:	87 ff       	sbrs	r24, 7
     79a:	fc cf       	rjmp	.-8      	; 0x794 <rf_tx_packet+0x112>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
     79c:	80 91 41 01 	lds	r24, 0x0141
     7a0:	86 ff       	sbrs	r24, 6
     7a2:	78 cf       	rjmp	.-272    	; 0x694 <rf_tx_packet+0x12>
     7a4:	e7 cf       	rjmp	.-50     	; 0x774 <rf_tx_packet+0xf2>
	
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

   tx_done = 0;
     7a6:	10 92 7e 04 	sts	0x047E, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
     7aa:	82 e0       	ldi	r24, 0x02	; 2
     7ac:	0e 94 32 02 	call	0x464	; 0x464 <rf_cmd>
   for(i=0; (i<65000) && !tx_done; i++){
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	20 91 7e 04 	lds	r18, 0x047E
     7b8:	21 11       	cpse	r18, r1
     7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <rf_tx_packet+0x144>
     7bc:	01 96       	adiw	r24, 0x01	; 1
     7be:	88 3e       	cpi	r24, 0xE8	; 232
     7c0:	fd ef       	ldi	r31, 0xFD	; 253
     7c2:	9f 07       	cpc	r25, r31
     7c4:	b9 f7       	brne	.-18     	; 0x7b4 <rf_tx_packet+0x132>
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     7c6:	f8 01       	movw	r30, r16
     7c8:	26 81       	ldd	r18, Z+6	; 0x06
     7ca:	22 23       	and	r18, r18
     7cc:	31 f0       	breq	.+12     	; 0x7da <rf_tx_packet+0x158>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
     7ce:	20 91 42 01 	lds	r18, 0x0142
     7d2:	22 95       	swap	r18
     7d4:	26 95       	lsr	r18
     7d6:	27 70       	andi	r18, 0x07	; 7
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     7d8:	29 f4       	brne	.+10     	; 0x7e4 <rf_tx_packet+0x162>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
     7da:	88 3e       	cpi	r24, 0xE8	; 232
     7dc:	9d 4f       	sbci	r25, 0xFD	; 253
     7de:	11 f0       	breq	.+4      	; 0x7e4 <rf_tx_packet+0x162>
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     7e0:	c1 e0       	ldi	r28, 0x01	; 1
     7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <rf_tx_packet+0x164>
     7e4:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
     7e6:	8d 2f       	mov	r24, r29
     7e8:	0e 94 32 02 	call	0x464	; 0x464 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
     7ec:	8c 2f       	mov	r24, r28
}
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	08 95       	ret

000007f8 <rf_tx_packet_resend>:
uint8_t rf_tx_packet_resend()
{
   uint8_t trx_error;
   uint16_t i;

   tx_done = 0;
     7f8:	10 92 7e 04 	sts	0x047E, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
     7fc:	82 e0       	ldi	r24, 0x02	; 2
     7fe:	0e 94 32 02 	call	0x464	; 0x464 <rf_cmd>
     802:	88 ee       	ldi	r24, 0xE8	; 232
     804:	9d ef       	ldi	r25, 0xFD	; 253
   for(i=0; (i<65000) && !tx_done; i++)
     806:	20 91 7e 04 	lds	r18, 0x047E
     80a:	21 11       	cpse	r18, r1
     80c:	04 c0       	rjmp	.+8      	; 0x816 <rf_tx_packet_resend+0x1e>
     80e:	01 97       	sbiw	r24, 0x01	; 1
     810:	d1 f7       	brne	.-12     	; 0x806 <rf_tx_packet_resend+0xe>
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
     812:	8f ef       	ldi	r24, 0xFF	; 255

   return trx_error;
}
     814:	08 95       	ret
   tx_done = 0;
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
   for(i=0; (i<65000) && !tx_done; i++)
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	08 95       	ret

0000081a <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
     81e:	80 91 8f 04 	lds	r24, 0x048F
     822:	88 23       	and	r24, r24
     824:	41 f1       	breq	.+80     	; 0x876 <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     826:	80 91 41 01 	lds	r24, 0x0141
     82a:	c8 2f       	mov	r28, r24
     82c:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     82e:	9f ef       	ldi	r25, 0xFF	; 255
     830:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     832:	92 30       	cpi	r25, 0x02	; 2
     834:	c0 f3       	brcs	.-16     	; 0x826 <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     836:	c1 31       	cpi	r28, 0x11	; 17
     838:	b1 f3       	breq	.-20     	; 0x826 <rf_cca_check+0xc>
     83a:	c2 31       	cpi	r28, 0x12	; 18
     83c:	a1 f3       	breq	.-24     	; 0x826 <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     83e:	cf 31       	cpi	r28, 0x1F	; 31
     840:	91 f3       	breq	.-28     	; 0x826 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     842:	c8 30       	cpi	r28, 0x08	; 8
     844:	19 f0       	breq	.+6      	; 0x84c <rf_cca_check+0x32>
     846:	8f 70       	andi	r24, 0x0F	; 15
     848:	86 30       	cpi	r24, 0x06	; 6
     84a:	a9 f4       	brne	.+42     	; 0x876 <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
     84c:	86 e1       	ldi	r24, 0x16	; 22
     84e:	0e 94 32 02 	call	0x464	; 0x464 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
     852:	80 91 48 01 	lds	r24, 0x0148
     856:	80 68       	ori	r24, 0x80	; 128
     858:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
     85c:	80 91 41 01 	lds	r24, 0x0141
     860:	87 ff       	sbrs	r24, 7
     862:	fc cf       	rjmp	.-8      	; 0x85c <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     864:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
     868:	8c 2f       	mov	r24, r28
     86a:	0e 94 32 02 	call	0x464	; 0x464 <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     86e:	d6 fb       	bst	r29, 6
     870:	88 27       	eor	r24, r24
     872:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
     874:	01 c0       	rjmp	.+2      	; 0x878 <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
     876:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	08 95       	ret

0000087e <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
     87e:	80 91 8f 04 	lds	r24, 0x048F
     882:	88 23       	and	r24, r24
     884:	09 f4       	brne	.+2      	; 0x888 <rf_rx_packet_nonblock+0xa>
     886:	e3 c0       	rjmp	.+454    	; 0xa4e <rf_rx_packet_nonblock+0x1d0>
		return NRK_ERROR;

   if(!rx_ready)
     888:	80 91 ab 04 	lds	r24, 0x04AB
     88c:	88 23       	and	r24, r24
     88e:	09 f4       	brne	.+2      	; 0x892 <rf_rx_packet_nonblock+0x14>
     890:	dc c0       	rjmp	.+440    	; 0xa4a <rf_rx_packet_nonblock+0x1cc>
      return 0;
   else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
     892:	80 91 7b 01 	lds	r24, 0x017B
     896:	e0 91 74 04 	lds	r30, 0x0474
     89a:	f0 91 75 04 	lds	r31, 0x0475
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	02 97       	sbiw	r24, 0x02	; 2
     8a2:	24 81       	ldd	r18, Z+4	; 0x04
     8a4:	33 27       	eor	r19, r19
     8a6:	27 fd       	sbrc	r18, 7
     8a8:	30 95       	com	r19
     8aa:	28 17       	cp	r18, r24
     8ac:	39 07       	cpc	r19, r25
     8ae:	0c f4       	brge	.+2      	; 0x8b2 <rf_rx_packet_nonblock+0x34>
     8b0:	ce c0       	rjmp	.+412    	; 0xa4e <rf_rx_packet_nonblock+0x1d0>
		return NRK_ERROR;


	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
     8b2:	e0 91 74 04 	lds	r30, 0x0474
     8b6:	f0 91 75 04 	lds	r31, 0x0475
     8ba:	80 91 82 01 	lds	r24, 0x0182
     8be:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
     8c0:	e0 91 74 04 	lds	r30, 0x0474
     8c4:	f0 91 75 04 	lds	r31, 0x0475
     8c8:	80 91 87 01 	lds	r24, 0x0187
     8cc:	90 91 88 01 	lds	r25, 0x0188
     8d0:	92 83       	std	Z+2, r25	; 0x02
     8d2:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
     8d4:	e0 91 74 04 	lds	r30, 0x0474
     8d8:	f0 91 75 04 	lds	r31, 0x0475
     8dc:	80 91 7b 01 	lds	r24, 0x017B
     8e0:	8b 50       	subi	r24, 0x0B	; 11
     8e2:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
     8e4:	a0 91 74 04 	lds	r26, 0x0474
     8e8:	b0 91 75 04 	lds	r27, 0x0475
     8ec:	e0 91 74 04 	lds	r30, 0x0474
     8f0:	f0 91 75 04 	lds	r31, 0x0475
     8f4:	13 96       	adiw	r26, 0x03	; 3
     8f6:	9c 91       	ld	r25, X
     8f8:	84 81       	ldd	r24, Z+4	; 0x04
     8fa:	89 17       	cp	r24, r25
     8fc:	3c f0       	brlt	.+14     	; 0x90c <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
     8fe:	e0 91 74 04 	lds	r30, 0x0474
     902:	f0 91 75 04 	lds	r31, 0x0475
     906:	83 81       	ldd	r24, Z+3	; 0x03
     908:	87 ff       	sbrs	r24, 7
     90a:	0d c0       	rjmp	.+26     	; 0x926 <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
     90c:	10 92 ab 04 	sts	0x04AB, r1
      TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     910:	80 91 4c 01 	lds	r24, 0x014C
     914:	8f 77       	andi	r24, 0x7F	; 127
     916:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     91a:	80 91 4c 01 	lds	r24, 0x014C
     91e:	80 68       	ori	r24, 0x80	; 128
     920:	80 93 4c 01 	sts	0x014C, r24
     924:	94 c0       	rjmp	.+296    	; 0xa4e <rf_rx_packet_nonblock+0x1d0>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
     926:	a0 91 74 04 	lds	r26, 0x0474
     92a:	b0 91 75 04 	lds	r27, 0x0475
      TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
     92e:	e0 91 74 04 	lds	r30, 0x0474
     932:	f0 91 75 04 	lds	r31, 0x0475
     936:	13 96       	adiw	r26, 0x03	; 3
     938:	4c 91       	ld	r20, X
     93a:	55 27       	eor	r21, r21
     93c:	47 fd       	sbrc	r20, 7
     93e:	50 95       	com	r21
     940:	69 e8       	ldi	r22, 0x89	; 137
     942:	71 e0       	ldi	r23, 0x01	; 1
     944:	85 81       	ldd	r24, Z+5	; 0x05
     946:	96 81       	ldd	r25, Z+6	; 0x06
     948:	0e 94 31 23 	call	0x4662	; 0x4662 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);

   /* if reset packet received, perform reset */
   if(wireless_prog && (rfSettings.pRxInfo->length == 16)){
     94c:	80 91 64 03 	lds	r24, 0x0364
     950:	88 23       	and	r24, r24
     952:	09 f4       	brne	.+2      	; 0x956 <rf_rx_packet_nonblock+0xd8>
     954:	3e c0       	rjmp	.+124    	; 0x9d2 <rf_rx_packet_nonblock+0x154>
     956:	e0 91 74 04 	lds	r30, 0x0474
     95a:	f0 91 75 04 	lds	r31, 0x0475
     95e:	83 81       	ldd	r24, Z+3	; 0x03
     960:	80 31       	cpi	r24, 0x10	; 16
     962:	b9 f5       	brne	.+110    	; 0x9d2 <rf_rx_packet_nonblock+0x154>
      if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 4) == 0){
     964:	e0 91 74 04 	lds	r30, 0x0474
     968:	f0 91 75 04 	lds	r31, 0x0475
     96c:	65 81       	ldd	r22, Z+5	; 0x05
     96e:	76 81       	ldd	r23, Z+6	; 0x06
     970:	44 e0       	ldi	r20, 0x04	; 4
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	92 e0       	ldi	r25, 0x02	; 2
     978:	0e 94 41 23 	call	0x4682	; 0x4682 <strncmp>
     97c:	89 2b       	or	r24, r25
     97e:	49 f5       	brne	.+82     	; 0x9d2 <rf_rx_packet_nonblock+0x154>
         if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 16) == 0){
     980:	e0 91 74 04 	lds	r30, 0x0474
     984:	f0 91 75 04 	lds	r31, 0x0475
     988:	65 81       	ldd	r22, Z+5	; 0x05
     98a:	76 81       	ldd	r23, Z+6	; 0x06
     98c:	40 e1       	ldi	r20, 0x10	; 16
     98e:	50 e0       	ldi	r21, 0x00	; 0
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	92 e0       	ldi	r25, 0x02	; 2
     994:	0e 94 41 23 	call	0x4682	; 0x4682 <strncmp>
     998:	89 2b       	or	r24, r25
     99a:	d9 f4       	brne	.+54     	; 0x9d2 <rf_rx_packet_nonblock+0x154>
            wdt_enable(WDTO_500MS);
     99c:	9d e0       	ldi	r25, 0x0D	; 13
     99e:	88 e1       	ldi	r24, 0x18	; 24
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	a8 95       	wdr
     9a6:	80 93 60 00 	sts	0x0060, r24
     9aa:	0f be       	out	0x3f, r0	; 63
     9ac:	90 93 60 00 	sts	0x0060, r25
            nrk_led_set(0);
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <nrk_led_set>
            nrk_led_set(1);
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <nrk_led_set>
            nrk_led_set(2);
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <nrk_led_set>
            nrk_led_set(3);
     9c8:	83 e0       	ldi	r24, 0x03	; 3
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <nrk_led_set>
     9d0:	ff cf       	rjmp	.-2      	; 0x9d0 <rf_rx_packet_nonblock+0x152>
      }
   }

	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
     9d2:	e0 91 74 04 	lds	r30, 0x0474
     9d6:	f0 91 75 04 	lds	r31, 0x0475
     9da:	80 91 80 01 	lds	r24, 0x0180
     9de:	85 fb       	bst	r24, 5
     9e0:	88 27       	eor	r24, r24
     9e2:	80 f9       	bld	r24, 0
     9e4:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
     9e6:	e0 91 74 04 	lds	r30, 0x0474
     9ea:	f0 91 75 04 	lds	r31, 0x0475
     9ee:	80 91 47 01 	lds	r24, 0x0147
     9f2:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
     9f4:	e0 91 74 04 	lds	r30, 0x0474
     9f8:	f0 91 75 04 	lds	r31, 0x0475
     9fc:	80 91 46 01 	lds	r24, 0x0146
     a00:	86 95       	lsr	r24
     a02:	86 95       	lsr	r24
     a04:	86 95       	lsr	r24
     a06:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
     a08:	e0 91 74 04 	lds	r30, 0x0474
     a0c:	f0 91 75 04 	lds	r31, 0x0475
     a10:	80 91 47 01 	lds	r24, 0x0147
     a14:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
     a16:	a0 91 74 04 	lds	r26, 0x0474
     a1a:	b0 91 75 04 	lds	r27, 0x0475
     a1e:	e0 91 7b 01 	lds	r30, 0x017B
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	e0 58       	subi	r30, 0x80	; 128
     a26:	fe 4f       	sbci	r31, 0xFE	; 254
     a28:	80 81       	ld	r24, Z
     a2a:	1b 96       	adiw	r26, 0x0b	; 11
     a2c:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
     a2e:	10 92 ab 04 	sts	0x04AB, r1
   TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     a32:	80 91 4c 01 	lds	r24, 0x014C
     a36:	8f 77       	andi	r24, 0x7F	; 127
     a38:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     a3c:	80 91 4c 01 	lds	r24, 0x014C
     a40:	80 68       	ori	r24, 0x80	; 128
     a42:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

   if(!rx_ready)
      return 0;
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
     a4e:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
   TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
     a50:	08 95       	ret

00000a52 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
     a52:	1f 92       	push	r1
     a54:	0f 92       	push	r0
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	0f 92       	push	r0
     a5a:	11 24       	eor	r1, r1
     a5c:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
     a5e:	80 e8       	ldi	r24, 0x80	; 128
     a60:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     a64:	8f 91       	pop	r24
     a66:	0f 90       	pop	r0
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	0f 90       	pop	r0
     a6c:	1f 90       	pop	r1
     a6e:	18 95       	reti

00000a70 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
     a70:	1f 92       	push	r1
     a72:	0f 92       	push	r0
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	0f 92       	push	r0
     a78:	11 24       	eor	r1, r1
     a7a:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	80 93 7e 04 	sts	0x047E, r24
   IRQ_STATUS = (1 << TX_END);
     a82:	80 e4       	ldi	r24, 0x40	; 64
     a84:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
     a88:	8f 91       	pop	r24
     a8a:	0f 90       	pop	r0
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	0f 90       	pop	r0
     a90:	1f 90       	pop	r1
     a92:	18 95       	reti

00000a94 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
     a94:	1f 92       	push	r1
     a96:	0f 92       	push	r0
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	0f 92       	push	r0
     a9c:	11 24       	eor	r1, r1
     a9e:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
     aa0:	80 e2       	ldi	r24, 0x20	; 32
     aa2:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     aa6:	8f 91       	pop	r24
     aa8:	0f 90       	pop	r0
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	0f 90       	pop	r0
     aae:	1f 90       	pop	r1
     ab0:	18 95       	reti

00000ab2 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
     ab2:	1f 92       	push	r1
     ab4:	0f 92       	push	r0
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	0f 92       	push	r0
     aba:	11 24       	eor	r1, r1
     abc:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
     abe:	80 e1       	ldi	r24, 0x10	; 16
     ac0:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     ac4:	8f 91       	pop	r24
     ac6:	0f 90       	pop	r0
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	0f 90       	pop	r0
     acc:	1f 90       	pop	r1
     ace:	18 95       	reti

00000ad0 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
     ad0:	1f 92       	push	r1
     ad2:	0f 92       	push	r0
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	0f 92       	push	r0
     ad8:	11 24       	eor	r1, r1
     ada:	0b b6       	in	r0, 0x3b	; 59
     adc:	0f 92       	push	r0
     ade:	2f 93       	push	r18
     ae0:	3f 93       	push	r19
     ae2:	4f 93       	push	r20
     ae4:	5f 93       	push	r21
     ae6:	6f 93       	push	r22
     ae8:	7f 93       	push	r23
     aea:	8f 93       	push	r24
     aec:	9f 93       	push	r25
     aee:	af 93       	push	r26
     af0:	bf 93       	push	r27
     af2:	ef 93       	push	r30
     af4:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
     af6:	84 e0       	ldi	r24, 0x04	; 4
     af8:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
     afc:	e0 91 67 03 	lds	r30, 0x0367
     b00:	f0 91 68 03 	lds	r31, 0x0368
     b04:	30 97       	sbiw	r30, 0x00	; 0
     b06:	09 f0       	breq	.+2      	; 0xb0a <__vector_59+0x3a>
		rx_start_func();
     b08:	09 95       	icall

	return;
}
     b0a:	ff 91       	pop	r31
     b0c:	ef 91       	pop	r30
     b0e:	bf 91       	pop	r27
     b10:	af 91       	pop	r26
     b12:	9f 91       	pop	r25
     b14:	8f 91       	pop	r24
     b16:	7f 91       	pop	r23
     b18:	6f 91       	pop	r22
     b1a:	5f 91       	pop	r21
     b1c:	4f 91       	pop	r20
     b1e:	3f 91       	pop	r19
     b20:	2f 91       	pop	r18
     b22:	0f 90       	pop	r0
     b24:	0b be       	out	0x3b, r0	; 59
     b26:	0f 90       	pop	r0
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	0f 90       	pop	r0
     b2c:	1f 90       	pop	r1
     b2e:	18 95       	reti

00000b30 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
     b30:	1f 92       	push	r1
     b32:	0f 92       	push	r0
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	0f 92       	push	r0
     b38:	11 24       	eor	r1, r1
     b3a:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     b42:	8f 91       	pop	r24
     b44:	0f 90       	pop	r0
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	0f 90       	pop	r0
     b4a:	1f 90       	pop	r1
     b4c:	18 95       	reti

00000b4e <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
     b4e:	1f 92       	push	r1
     b50:	0f 92       	push	r0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	0f 92       	push	r0
     b56:	11 24       	eor	r1, r1
     b58:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     b60:	8f 91       	pop	r24
     b62:	0f 90       	pop	r0
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	0f 90       	pop	r0
     b68:	1f 90       	pop	r1
     b6a:	18 95       	reti

00000b6c <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
     b6c:	e9 e4       	ldi	r30, 0x49	; 73
     b6e:	f1 e0       	ldi	r31, 0x01	; 1
     b70:	90 81       	ld	r25, Z
     b72:	90 7f       	andi	r25, 0xF0	; 240
     b74:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
     b76:	90 81       	ld	r25, Z
     b78:	8f 70       	andi	r24, 0x0F	; 15
     b7a:	98 2b       	or	r25, r24
     b7c:	90 83       	st	Z, r25
     b7e:	08 95       	ret

00000b80 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
     b80:	8f ef       	ldi	r24, 0xFF	; 255
     b82:	08 95       	ret

00000b84 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
     b84:	08 95       	ret

00000b86 <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
     b86:	08 95       	ret

00000b88 <rf_security_disable>:
}



void rf_security_disable()
{
     b88:	08 95       	ret

00000b8a <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
     b8a:	8f ef       	ldi	r24, 0xFF	; 255
     b8c:	08 95       	ret

00000b8e <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
     b8e:	80 91 6e 04 	lds	r24, 0x046E
     b92:	90 91 6f 04 	lds	r25, 0x046F
     b96:	08 95       	ret

00000b98 <rf_flush_rx_fifo>:



inline void rf_flush_rx_fifo()
{
     b98:	08 95       	ret

00000b9a <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	08 95       	ret

00000b9e <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	08 95       	ret

00000ba2 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	08 95       	ret

00000ba6 <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
     ba6:	08 95       	ret

00000ba8 <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
     ba8:	08 95       	ret

00000baa <rf_test_mode>:
}



void rf_test_mode()
{
     baa:	08 95       	ret

00000bac <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
     bac:	08 95       	ret

00000bae <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
     bae:	08 95       	ret

00000bb0 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
     bb0:	08 95       	ret

00000bb2 <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
     bb2:	08 95       	ret

00000bb4 <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
     bb4:	08 95       	ret

00000bb6 <rf_cc2591_tx_on>:
	PORTG	|= 0x1;
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	
	DDRG	&= ~(0x1);  // Set RXTX as input
     bb6:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
     bb8:	8d b1       	in	r24, 0x0d	; 13
     bba:	80 6e       	ori	r24, 0xE0	; 224
     bbc:	8d b9       	out	0x0d, r24	; 13
	// PAEN=1  EN=0  HGM=x RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0xA0;
     bbe:	8e b1       	in	r24, 0x0e	; 14
     bc0:	80 6a       	ori	r24, 0xA0	; 160
     bc2:	8e b9       	out	0x0e, r24	; 14
     bc4:	08 95       	ret

00000bc6 <rf_cc2591_rx_on>:
	DDRG	|= 0x1;
	PORTG	&= ~(0x1);
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	DDRG	&= ~(0x1);  // Set RXTX as input
     bc6:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
     bc8:	8d b1       	in	r24, 0x0d	; 13
     bca:	80 6e       	ori	r24, 0xE0	; 224
     bcc:	8d b9       	out	0x0d, r24	; 13
	// PAEN=0  EN=1  HGM=1 RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0x60;
     bce:	8e b1       	in	r24, 0x0e	; 14
     bd0:	80 66       	ori	r24, 0x60	; 96
     bd2:	8e b9       	out	0x0e, r24	; 14
     bd4:	08 95       	ret

00000bd6 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
     bd6:	cf 92       	push	r12
     bd8:	df 92       	push	r13
     bda:	ef 92       	push	r14
     bdc:	ff 92       	push	r15
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	27 97       	sbiw	r28, 0x07	; 7
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
     bf6:	0e 94 12 0c 	call	0x1824	; 0x1824 <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
     bfa:	e0 91 74 04 	lds	r30, 0x0474
     bfe:	f0 91 75 04 	lds	r31, 0x0475
     c02:	c0 80       	ld	r12, Z
     c04:	d3 80       	ldd	r13, Z+3	; 0x03
     c06:	e5 80       	ldd	r14, Z+5	; 0x05
     c08:	f6 80       	ldd	r15, Z+6	; 0x06
     c0a:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
     c0c:	0e 94 3f 04 	call	0x87e	; 0x87e <rf_rx_packet_nonblock>
	if (err < 1) {
     c10:	18 16       	cp	r1, r24
     c12:	1c f0       	brlt	.+6      	; 0xc1a <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
     c14:	8c e9       	ldi	r24, 0x9C	; 156
     c16:	92 e0       	ldi	r25, 0x02	; 2
     c18:	06 c0       	rjmp	.+12     	; 0xc26 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
     c1a:	f7 01       	movw	r30, r14
     c1c:	10 81       	ld	r17, Z
	if (ttl == 0) {
     c1e:	11 11       	cpse	r17, r1
     c20:	07 c0       	rjmp	.+14     	; 0xc30 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
     c22:	8b eb       	ldi	r24, 0xBB	; 187
     c24:	92 e0       	ldi	r25, 0x02	; 2
     c26:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <puts>
#endif
		nrk_int_enable();
     c2a:	0e 94 14 0c 	call	0x1828	; 0x1828 <nrk_int_enable>
		return;
     c2e:	31 c0       	rjmp	.+98     	; 0xc92 <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
     c30:	15 30       	cpi	r17, 0x05	; 5
     c32:	21 f4       	brne	.+8      	; 0xc3c <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
     c34:	8a e0       	ldi	r24, 0x0A	; 10
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 e6 23 	call	0x47cc	; 0x47cc <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
     c3c:	c7 01       	movw	r24, r14
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	9f 93       	push	r25
     c42:	8f 93       	push	r24
     c44:	80 2f       	mov	r24, r16
     c46:	99 27       	eor	r25, r25
     c48:	87 fd       	sbrc	r24, 7
     c4a:	90 95       	com	r25
     c4c:	9f 93       	push	r25
     c4e:	0f 93       	push	r16
     c50:	1f 92       	push	r1
     c52:	1f 93       	push	r17
     c54:	1f 92       	push	r1
     c56:	cf 92       	push	r12
     c58:	8d ed       	ldi	r24, 0xDD	; 221
     c5a:	92 e0       	ldi	r25, 0x02	; 2
     c5c:	9f 93       	push	r25
     c5e:	8f 93       	push	r24
     c60:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
     c64:	fd 82       	std	Y+5, r15	; 0x05
     c66:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
     c68:	11 50       	subi	r17, 0x01	; 1
     c6a:	f7 01       	movw	r30, r14
     c6c:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
     c6e:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
     c70:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
     c72:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
     c74:	8f ef       	ldi	r24, 0xFF	; 255
     c76:	9f ef       	ldi	r25, 0xFF	; 255
     c78:	9a 83       	std	Y+2, r25	; 0x02
     c7a:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
     c7c:	0e 94 14 0c 	call	0x1828	; 0x1828 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
     c80:	ce 01       	movw	r24, r28
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	0e 94 41 03 	call	0x682	; 0x682 <rf_tx_packet>
#endif
	return;
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
}
     c92:	27 96       	adiw	r28, 0x07	; 7
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	ff 90       	pop	r15
     ca8:	ef 90       	pop	r14
     caa:	df 90       	pop	r13
     cac:	cf 90       	pop	r12
     cae:	08 95       	ret

00000cb0 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
     cb0:	1f 92       	push	r1
     cb2:	0f 92       	push	r0
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	0f 92       	push	r0
     cb8:	11 24       	eor	r1, r1
     cba:	0b b6       	in	r0, 0x3b	; 59
     cbc:	0f 92       	push	r0
     cbe:	2f 93       	push	r18
     cc0:	3f 93       	push	r19
     cc2:	4f 93       	push	r20
     cc4:	5f 93       	push	r21
     cc6:	6f 93       	push	r22
     cc8:	7f 93       	push	r23
     cca:	8f 93       	push	r24
     ccc:	9f 93       	push	r25
     cce:	af 93       	push	r26
     cd0:	bf 93       	push	r27
     cd2:	ef 93       	push	r30
     cd4:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 91 7b 01 	lds	r25, 0x017B
     cdc:	89 17       	cp	r24, r25
     cde:	10 f4       	brcc	.+4      	; 0xce4 <__vector_60+0x34>
     ce0:	8f 5f       	subi	r24, 0xFF	; 255
     ce2:	fa cf       	rjmp	.-12     	; 0xcd8 <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

   if((PHY_RSSI >> RX_CRC_VALID) & 0x1){
     ce4:	80 91 46 01 	lds	r24, 0x0146
     ce8:	87 ff       	sbrs	r24, 7
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__vector_60+0x44>
      rx_ready = 1;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	80 93 ab 04 	sts	0x04AB, r24
     cf2:	04 c0       	rjmp	.+8      	; 0xcfc <__vector_60+0x4c>
   } else {
      printf("RX end failed checksum!\r\n");
     cf4:	86 e0       	ldi	r24, 0x06	; 6
     cf6:	93 e0       	ldi	r25, 0x03	; 3
     cf8:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <puts>
   }
   IRQ_STATUS = (1 << RX_END);
     cfc:	88 e0       	ldi	r24, 0x08	; 8
     cfe:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
     d02:	80 91 46 01 	lds	r24, 0x0146
     d06:	87 ff       	sbrs	r24, 7
     d08:	05 c0       	rjmp	.+10     	; 0xd14 <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
     d0a:	80 91 70 04 	lds	r24, 0x0470
     d0e:	81 11       	cpse	r24, r1
     d10:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <rf_glossy_interrupt>
	}

	if(rx_end_func)
     d14:	e0 91 65 03 	lds	r30, 0x0365
     d18:	f0 91 66 03 	lds	r31, 0x0366
     d1c:	30 97       	sbiw	r30, 0x00	; 0
     d1e:	09 f0       	breq	.+2      	; 0xd22 <__vector_60+0x72>
		rx_end_func();
     d20:	09 95       	icall

	return;
}
     d22:	ff 91       	pop	r31
     d24:	ef 91       	pop	r30
     d26:	bf 91       	pop	r27
     d28:	af 91       	pop	r26
     d2a:	9f 91       	pop	r25
     d2c:	8f 91       	pop	r24
     d2e:	7f 91       	pop	r23
     d30:	6f 91       	pop	r22
     d32:	5f 91       	pop	r21
     d34:	4f 91       	pop	r20
     d36:	3f 91       	pop	r19
     d38:	2f 91       	pop	r18
     d3a:	0f 90       	pop	r0
     d3c:	0b be       	out	0x3b, r0	; 59
     d3e:	0f 90       	pop	r0
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	0f 90       	pop	r0
     d44:	1f 90       	pop	r1
     d46:	18 95       	reti

00000d48 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
     d48:	af e7       	ldi	r26, 0x7F	; 127
     d4a:	b4 e0       	ldi	r27, 0x04	; 4
     d4c:	fc 01       	movw	r30, r24
     d4e:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
     d50:	20 81       	ld	r18, Z
     d52:	2d 93       	st	X+, r18
      AES_KEY = key[i];
     d54:	21 91       	ld	r18, Z+
     d56:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
     d5a:	e8 17       	cp	r30, r24
     d5c:	f9 07       	cpc	r31, r25
     d5e:	c1 f7       	brne	.-16     	; 0xd50 <aes_setkey+0x8>
     d60:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
     d62:	10 92 3e 01 	sts	0x013E, r1
     d66:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
     d68:	e1 f7       	brne	.-8      	; 0xd62 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
     d6a:	80 e8       	ldi	r24, 0x80	; 128
     d6c:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
     d70:	80 91 3d 01 	lds	r24, 0x013D
     d74:	80 ff       	sbrs	r24, 0
     d76:	fc cf       	rjmp	.-8      	; 0xd70 <aes_setkey+0x28>
     d78:	e2 e9       	ldi	r30, 0x92	; 146
     d7a:	f4 e0       	ldi	r31, 0x04	; 4
     d7c:	80 e1       	ldi	r24, 0x10	; 16
     d7e:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
     d80:	90 91 3f 01 	lds	r25, 0x013F
     d84:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
     d86:	8e 13       	cpse	r24, r30
     d88:	fb cf       	rjmp	.-10     	; 0xd80 <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
     d8a:	08 95       	ret

00000d8c <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
     d92:	66 23       	and	r22, r22
     d94:	09 f4       	brne	.+2      	; 0xd98 <aes_encrypt+0xc>
     d96:	45 c0       	rjmp	.+138    	; 0xe22 <aes_encrypt+0x96>
     d98:	86 2f       	mov	r24, r22
     d9a:	8f 70       	andi	r24, 0x0F	; 15
     d9c:	09 f0       	breq	.+2      	; 0xda0 <aes_encrypt+0x14>
     d9e:	41 c0       	rjmp	.+130    	; 0xe22 <aes_encrypt+0x96>
     da0:	ef e7       	ldi	r30, 0x7F	; 127
     da2:	f4 e0       	ldi	r31, 0x04	; 4
     da4:	90 e1       	ldi	r25, 0x10	; 16
     da6:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
     da8:	21 91       	ld	r18, Z+
     daa:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
     dae:	9e 13       	cpse	r25, r30
     db0:	fb cf       	rjmp	.-10     	; 0xda8 <aes_encrypt+0x1c>
     db2:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     db4:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
     db6:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     db8:	40 e1       	ldi	r20, 0x10	; 16
     dba:	94 9f       	mul	r25, r20
     dbc:	90 01       	movw	r18, r0
     dbe:	11 24       	eor	r1, r1
     dc0:	26 17       	cp	r18, r22
     dc2:	37 07       	cpc	r19, r23
     dc4:	7c f5       	brge	.+94     	; 0xe24 <aes_encrypt+0x98>
      if(i==0)
     dc6:	91 11       	cpse	r25, r1
     dc8:	03 c0       	rjmp	.+6      	; 0xdd0 <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
     dca:	10 92 3c 01 	sts	0x013C, r1
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
     dd0:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
     dd4:	40 e0       	ldi	r20, 0x00	; 0
     dd6:	50 e0       	ldi	r21, 0x00	; 0
     dd8:	2a 0f       	add	r18, r26
     dda:	3b 1f       	adc	r19, r27
     ddc:	e9 01       	movw	r28, r18
     dde:	c4 0f       	add	r28, r20
     de0:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
     de2:	f8 81       	ld	r31, Y
     de4:	f0 93 3e 01 	sts	0x013E, r31
     de8:	4f 5f       	subi	r20, 0xFF	; 255
     dea:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
     dec:	40 31       	cpi	r20, 0x10	; 16
     dee:	51 05       	cpc	r21, r1
     df0:	a9 f7       	brne	.-22     	; 0xddc <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
     df2:	40 91 3c 01 	lds	r20, 0x013C
     df6:	40 68       	ori	r20, 0x80	; 128
     df8:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
     dfc:	40 91 3d 01 	lds	r20, 0x013D
     e00:	40 ff       	sbrs	r20, 0
     e02:	fc cf       	rjmp	.-8      	; 0xdfc <aes_encrypt+0x70>
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
     e08:	f0 91 3e 01 	lds	r31, 0x013E
     e0c:	e9 01       	movw	r28, r18
     e0e:	c4 0f       	add	r28, r20
     e10:	d5 1f       	adc	r29, r21
     e12:	f8 83       	st	Y, r31
     e14:	4f 5f       	subi	r20, 0xFF	; 255
     e16:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
     e18:	40 31       	cpi	r20, 0x10	; 16
     e1a:	51 05       	cpc	r21, r1
     e1c:	a9 f7       	brne	.-22     	; 0xe08 <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
     e1e:	9f 5f       	subi	r25, 0xFF	; 255
     e20:	cb cf       	rjmp	.-106    	; 0xdb8 <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
     e22:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	08 95       	ret

00000e2a <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
     e34:	61 30       	cpi	r22, 0x01	; 1
     e36:	09 f4       	brne	.+2      	; 0xe3a <aes_decrypt+0x10>
     e38:	58 c0       	rjmp	.+176    	; 0xeea <aes_decrypt+0xc0>
     e3a:	86 2f       	mov	r24, r22
     e3c:	8f 70       	andi	r24, 0x0F	; 15
     e3e:	09 f0       	breq	.+2      	; 0xe42 <aes_decrypt+0x18>
     e40:	54 c0       	rjmp	.+168    	; 0xeea <aes_decrypt+0xc0>
     e42:	e2 e9       	ldi	r30, 0x92	; 146
     e44:	f4 e0       	ldi	r31, 0x04	; 4
     e46:	90 e1       	ldi	r25, 0x10	; 16
     e48:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
     e4a:	21 91       	ld	r18, Z+
     e4c:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
     e50:	9e 13       	cpse	r25, r30
     e52:	fb cf       	rjmp	.-10     	; 0xe4a <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
     e54:	62 95       	swap	r22
     e56:	6f 70       	andi	r22, 0x0F	; 15
     e58:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
     e5a:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
     e5c:	6f 3f       	cpi	r22, 0xFF	; 255
     e5e:	09 f4       	brne	.+2      	; 0xe62 <aes_decrypt+0x38>
     e60:	45 c0       	rjmp	.+138    	; 0xeec <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
     e62:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
     e66:	46 2f       	mov	r20, r22
     e68:	55 27       	eor	r21, r21
     e6a:	47 fd       	sbrc	r20, 7
     e6c:	50 95       	com	r21
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	ed 01       	movw	r28, r26
     e74:	90 e1       	ldi	r25, 0x10	; 16
     e76:	69 02       	muls	r22, r25
     e78:	c0 0d       	add	r28, r0
     e7a:	d1 1d       	adc	r29, r1
     e7c:	11 24       	eor	r1, r1
     e7e:	fe 01       	movw	r30, r28
     e80:	e2 0f       	add	r30, r18
     e82:	f3 1f       	adc	r31, r19
     e84:	90 81       	ld	r25, Z
     e86:	90 93 3e 01 	sts	0x013E, r25
     e8a:	2f 5f       	subi	r18, 0xFF	; 255
     e8c:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
     e8e:	20 31       	cpi	r18, 0x10	; 16
     e90:	31 05       	cpc	r19, r1
     e92:	a9 f7       	brne	.-22     	; 0xe7e <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
     e94:	90 91 3c 01 	lds	r25, 0x013C
     e98:	90 68       	ori	r25, 0x80	; 128
     e9a:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
     e9e:	90 91 3d 01 	lds	r25, 0x013D
     ea2:	90 ff       	sbrs	r25, 0
     ea4:	fc cf       	rjmp	.-8      	; 0xe9e <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
     ea6:	41 50       	subi	r20, 0x01	; 1
     ea8:	51 09       	sbc	r21, r1
     eaa:	94 e0       	ldi	r25, 0x04	; 4
     eac:	44 0f       	add	r20, r20
     eae:	55 1f       	adc	r21, r21
     eb0:	9a 95       	dec	r25
     eb2:	e1 f7       	brne	.-8      	; 0xeac <aes_decrypt+0x82>
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
     eb8:	90 91 3e 01 	lds	r25, 0x013E
     ebc:	8e 01       	movw	r16, r28
     ebe:	02 0f       	add	r16, r18
     ec0:	13 1f       	adc	r17, r19
     ec2:	f8 01       	movw	r30, r16
     ec4:	90 83       	st	Z, r25
         if(i!=0)
     ec6:	66 23       	and	r22, r22
     ec8:	49 f0       	breq	.+18     	; 0xedc <aes_decrypt+0xb2>
     eca:	f9 01       	movw	r30, r18
     ecc:	e4 0f       	add	r30, r20
     ece:	f5 1f       	adc	r31, r21
     ed0:	ea 0f       	add	r30, r26
     ed2:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
     ed4:	e0 81       	ld	r30, Z
     ed6:	9e 27       	eor	r25, r30
     ed8:	f8 01       	movw	r30, r16
     eda:	90 83       	st	Z, r25
     edc:	2f 5f       	subi	r18, 0xFF	; 255
     ede:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
     ee0:	20 31       	cpi	r18, 0x10	; 16
     ee2:	31 05       	cpc	r19, r1
     ee4:	49 f7       	brne	.-46     	; 0xeb8 <aes_decrypt+0x8e>
     ee6:	61 50       	subi	r22, 0x01	; 1
     ee8:	b9 cf       	rjmp	.-142    	; 0xe5c <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
     eea:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	08 95       	ret

00000ef6 <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
     ef6:	80 91 c0 00 	lds	r24, 0x00C0
     efa:	87 ff       	sbrs	r24, 7
     efc:	fc cf       	rjmp	.-8      	; 0xef6 <getc0>
     efe:	80 91 c0 00 	lds	r24, 0x00C0
     f02:	8f 77       	andi	r24, 0x7F	; 127
     f04:	80 93 c0 00 	sts	0x00C0, r24
     f08:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
     f0c:	08 95       	ret

00000f0e <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
     f0e:	90 91 c0 00 	lds	r25, 0x00C0
     f12:	95 ff       	sbrs	r25, 5
     f14:	fc cf       	rjmp	.-8      	; 0xf0e <putc0>
     f16:	90 91 c0 00 	lds	r25, 0x00C0
     f1a:	9f 7d       	andi	r25, 0xDF	; 223
     f1c:	90 93 c0 00 	sts	0x00C0, r25
     f20:	80 93 c6 00 	sts	0x00C6, r24
     f24:	08 95       	ret

00000f26 <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
     f26:	8f ef       	ldi	r24, 0xFF	; 255
     f28:	08 95       	ret

00000f2a <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	19 f4       	brne	.+6      	; 0xf34 <nrk_uart_data_ready+0xa>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
     f2e:	80 91 c8 00 	lds	r24, 0x00C8
     f32:	04 c0       	rjmp	.+8      	; 0xf3c <nrk_uart_data_ready+0x12>
        }
if(uart_num==0)
     f34:	81 11       	cpse	r24, r1
     f36:	06 c0       	rjmp	.+12     	; 0xf44 <nrk_uart_data_ready+0x1a>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
     f38:	80 91 c0 00 	lds	r24, 0x00C0
     f3c:	88 1f       	adc	r24, r24
     f3e:	88 27       	eor	r24, r24
     f40:	88 1f       	adc	r24, r24
     f42:	08 95       	ret
        }
return 0;
     f44:	80 e0       	ldi	r24, 0x00	; 0
}
     f46:	08 95       	ret

00000f48 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
     f4c:	fc 01       	movw	r30, r24
     f4e:	24 91       	lpm	r18, Z
     f50:	ec 01       	movw	r28, r24
     f52:	21 96       	adiw	r28, 0x01	; 1
     f54:	22 23       	and	r18, r18
     f56:	51 f0       	breq	.+20     	; 0xf6c <nrk_kprintf+0x24>
        putchar(c);
     f58:	60 91 17 06 	lds	r22, 0x0617
     f5c:	70 91 18 06 	lds	r23, 0x0618
     f60:	82 2f       	mov	r24, r18
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 9a 23 	call	0x4734	; 0x4734 <fputc>
     f68:	ce 01       	movw	r24, r28
     f6a:	f0 cf       	rjmp	.-32     	; 0xf4c <nrk_kprintf+0x4>
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
     f72:	86 e0       	ldi	r24, 0x06	; 6
     f74:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
     f76:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
     f78:	88 ef       	ldi	r24, 0xF8	; 248
     f7a:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
     f7c:	80 ef       	ldi	r24, 0xF0	; 240
     f7e:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	8d b9       	out	0x0d, r24	; 13
     f84:	08 95       	ret

00000f86 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
     f86:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <PORT_INIT>

00000f8a <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
     f8a:	8f 3f       	cpi	r24, 0xFF	; 255
     f8c:	09 f4       	brne	.+2      	; 0xf90 <nrk_gpio_set+0x6>
     f8e:	6c c0       	rjmp	.+216    	; 0x1068 <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
     f90:	e8 2f       	mov	r30, r24
     f92:	e7 70       	andi	r30, 0x07	; 7
     f94:	4e 2f       	mov	r20, r30
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	47 30       	cpi	r20, 0x07	; 7
     f9a:	51 05       	cpc	r21, r1
     f9c:	08 f0       	brcs	.+2      	; 0xfa0 <nrk_gpio_set+0x16>
     f9e:	64 c0       	rjmp	.+200    	; 0x1068 <nrk_gpio_set+0xde>
     fa0:	fa 01       	movw	r30, r20
     fa2:	e0 57       	subi	r30, 0x70	; 112
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	86 95       	lsr	r24
     fa8:	86 95       	lsr	r24
     faa:	86 95       	lsr	r24
     fac:	0c 94 0e 23 	jmp	0x461c	; 0x461c <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
     fb0:	42 b1       	in	r20, 0x02	; 2
     fb2:	21 e0       	ldi	r18, 0x01	; 1
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	b9 01       	movw	r22, r18
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <nrk_gpio_set+0x34>
     fba:	66 0f       	add	r22, r22
     fbc:	77 1f       	adc	r23, r23
     fbe:	8a 95       	dec	r24
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <nrk_gpio_set+0x30>
     fc2:	cb 01       	movw	r24, r22
     fc4:	84 2b       	or	r24, r20
     fc6:	82 b9       	out	0x02, r24	; 2
     fc8:	4d c0       	rjmp	.+154    	; 0x1064 <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
     fca:	45 b1       	in	r20, 0x05	; 5
     fcc:	21 e0       	ldi	r18, 0x01	; 1
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	b9 01       	movw	r22, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <nrk_gpio_set+0x4e>
     fd4:	66 0f       	add	r22, r22
     fd6:	77 1f       	adc	r23, r23
     fd8:	8a 95       	dec	r24
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <nrk_gpio_set+0x4a>
     fdc:	cb 01       	movw	r24, r22
     fde:	84 2b       	or	r24, r20
     fe0:	85 b9       	out	0x05, r24	; 5
     fe2:	40 c0       	rjmp	.+128    	; 0x1064 <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
     fe4:	48 b1       	in	r20, 0x08	; 8
     fe6:	21 e0       	ldi	r18, 0x01	; 1
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	b9 01       	movw	r22, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <nrk_gpio_set+0x68>
     fee:	66 0f       	add	r22, r22
     ff0:	77 1f       	adc	r23, r23
     ff2:	8a 95       	dec	r24
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <nrk_gpio_set+0x64>
     ff6:	cb 01       	movw	r24, r22
     ff8:	84 2b       	or	r24, r20
     ffa:	88 b9       	out	0x08, r24	; 8
     ffc:	33 c0       	rjmp	.+102    	; 0x1064 <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
     ffe:	4b b1       	in	r20, 0x0b	; 11
    1000:	21 e0       	ldi	r18, 0x01	; 1
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	b9 01       	movw	r22, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <nrk_gpio_set+0x82>
    1008:	66 0f       	add	r22, r22
    100a:	77 1f       	adc	r23, r23
    100c:	8a 95       	dec	r24
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <nrk_gpio_set+0x7e>
    1010:	cb 01       	movw	r24, r22
    1012:	84 2b       	or	r24, r20
    1014:	8b b9       	out	0x0b, r24	; 11
    1016:	26 c0       	rjmp	.+76     	; 0x1064 <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1018:	4e b1       	in	r20, 0x0e	; 14
    101a:	21 e0       	ldi	r18, 0x01	; 1
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	b9 01       	movw	r22, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <nrk_gpio_set+0x9c>
    1022:	66 0f       	add	r22, r22
    1024:	77 1f       	adc	r23, r23
    1026:	8a 95       	dec	r24
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <nrk_gpio_set+0x98>
    102a:	cb 01       	movw	r24, r22
    102c:	84 2b       	or	r24, r20
    102e:	8e b9       	out	0x0e, r24	; 14
    1030:	19 c0       	rjmp	.+50     	; 0x1064 <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1032:	41 b3       	in	r20, 0x11	; 17
    1034:	21 e0       	ldi	r18, 0x01	; 1
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	b9 01       	movw	r22, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <nrk_gpio_set+0xb6>
    103c:	66 0f       	add	r22, r22
    103e:	77 1f       	adc	r23, r23
    1040:	8a 95       	dec	r24
    1042:	e2 f7       	brpl	.-8      	; 0x103c <nrk_gpio_set+0xb2>
    1044:	cb 01       	movw	r24, r22
    1046:	84 2b       	or	r24, r20
    1048:	81 bb       	out	0x11, r24	; 17
    104a:	0c c0       	rjmp	.+24     	; 0x1064 <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    104c:	44 b3       	in	r20, 0x14	; 20
    104e:	21 e0       	ldi	r18, 0x01	; 1
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	b9 01       	movw	r22, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <nrk_gpio_set+0xd0>
    1056:	66 0f       	add	r22, r22
    1058:	77 1f       	adc	r23, r23
    105a:	8a 95       	dec	r24
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <nrk_gpio_set+0xcc>
    105e:	cb 01       	movw	r24, r22
    1060:	84 2b       	or	r24, r20
    1062:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    1064:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1066:	08 95       	ret
                default: return -1;
    1068:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    106a:	08 95       	ret

0000106c <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    106c:	8f 3f       	cpi	r24, 0xFF	; 255
    106e:	09 f4       	brne	.+2      	; 0x1072 <nrk_gpio_clr+0x6>
    1070:	73 c0       	rjmp	.+230    	; 0x1158 <nrk_gpio_clr+0xec>
        switch (pin & 0x07) {
    1072:	e8 2f       	mov	r30, r24
    1074:	e7 70       	andi	r30, 0x07	; 7
    1076:	4e 2f       	mov	r20, r30
    1078:	50 e0       	ldi	r21, 0x00	; 0
    107a:	47 30       	cpi	r20, 0x07	; 7
    107c:	51 05       	cpc	r21, r1
    107e:	08 f0       	brcs	.+2      	; 0x1082 <nrk_gpio_clr+0x16>
    1080:	6b c0       	rjmp	.+214    	; 0x1158 <nrk_gpio_clr+0xec>
    1082:	fa 01       	movw	r30, r20
    1084:	e9 56       	subi	r30, 0x69	; 105
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	86 95       	lsr	r24
    108a:	86 95       	lsr	r24
    108c:	86 95       	lsr	r24
    108e:	0c 94 0e 23 	jmp	0x461c	; 0x461c <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1092:	42 b1       	in	r20, 0x02	; 2
    1094:	21 e0       	ldi	r18, 0x01	; 1
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	b9 01       	movw	r22, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <nrk_gpio_clr+0x34>
    109c:	66 0f       	add	r22, r22
    109e:	77 1f       	adc	r23, r23
    10a0:	8a 95       	dec	r24
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <nrk_gpio_clr+0x30>
    10a4:	cb 01       	movw	r24, r22
    10a6:	80 95       	com	r24
    10a8:	84 23       	and	r24, r20
    10aa:	82 b9       	out	0x02, r24	; 2
    10ac:	53 c0       	rjmp	.+166    	; 0x1154 <nrk_gpio_clr+0xe8>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    10ae:	45 b1       	in	r20, 0x05	; 5
    10b0:	21 e0       	ldi	r18, 0x01	; 1
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	b9 01       	movw	r22, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <nrk_gpio_clr+0x50>
    10b8:	66 0f       	add	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	8a 95       	dec	r24
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <nrk_gpio_clr+0x4c>
    10c0:	cb 01       	movw	r24, r22
    10c2:	80 95       	com	r24
    10c4:	84 23       	and	r24, r20
    10c6:	85 b9       	out	0x05, r24	; 5
    10c8:	45 c0       	rjmp	.+138    	; 0x1154 <nrk_gpio_clr+0xe8>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    10ca:	48 b1       	in	r20, 0x08	; 8
    10cc:	21 e0       	ldi	r18, 0x01	; 1
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	b9 01       	movw	r22, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <nrk_gpio_clr+0x6c>
    10d4:	66 0f       	add	r22, r22
    10d6:	77 1f       	adc	r23, r23
    10d8:	8a 95       	dec	r24
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <nrk_gpio_clr+0x68>
    10dc:	cb 01       	movw	r24, r22
    10de:	80 95       	com	r24
    10e0:	84 23       	and	r24, r20
    10e2:	88 b9       	out	0x08, r24	; 8
    10e4:	37 c0       	rjmp	.+110    	; 0x1154 <nrk_gpio_clr+0xe8>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    10e6:	4b b1       	in	r20, 0x0b	; 11
    10e8:	21 e0       	ldi	r18, 0x01	; 1
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	b9 01       	movw	r22, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <nrk_gpio_clr+0x88>
    10f0:	66 0f       	add	r22, r22
    10f2:	77 1f       	adc	r23, r23
    10f4:	8a 95       	dec	r24
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <nrk_gpio_clr+0x84>
    10f8:	cb 01       	movw	r24, r22
    10fa:	80 95       	com	r24
    10fc:	84 23       	and	r24, r20
    10fe:	8b b9       	out	0x0b, r24	; 11
    1100:	29 c0       	rjmp	.+82     	; 0x1154 <nrk_gpio_clr+0xe8>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1102:	4e b1       	in	r20, 0x0e	; 14
    1104:	21 e0       	ldi	r18, 0x01	; 1
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	b9 01       	movw	r22, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <nrk_gpio_clr+0xa4>
    110c:	66 0f       	add	r22, r22
    110e:	77 1f       	adc	r23, r23
    1110:	8a 95       	dec	r24
    1112:	e2 f7       	brpl	.-8      	; 0x110c <nrk_gpio_clr+0xa0>
    1114:	cb 01       	movw	r24, r22
    1116:	80 95       	com	r24
    1118:	84 23       	and	r24, r20
    111a:	8e b9       	out	0x0e, r24	; 14
    111c:	1b c0       	rjmp	.+54     	; 0x1154 <nrk_gpio_clr+0xe8>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    111e:	41 b3       	in	r20, 0x11	; 17
    1120:	21 e0       	ldi	r18, 0x01	; 1
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	b9 01       	movw	r22, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <nrk_gpio_clr+0xc0>
    1128:	66 0f       	add	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	8a 95       	dec	r24
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <nrk_gpio_clr+0xbc>
    1130:	cb 01       	movw	r24, r22
    1132:	80 95       	com	r24
    1134:	84 23       	and	r24, r20
    1136:	81 bb       	out	0x11, r24	; 17
    1138:	0d c0       	rjmp	.+26     	; 0x1154 <nrk_gpio_clr+0xe8>
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    113a:	44 b3       	in	r20, 0x14	; 20
    113c:	21 e0       	ldi	r18, 0x01	; 1
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	b9 01       	movw	r22, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <nrk_gpio_clr+0xdc>
    1144:	66 0f       	add	r22, r22
    1146:	77 1f       	adc	r23, r23
    1148:	8a 95       	dec	r24
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <nrk_gpio_clr+0xd8>
    114c:	cb 01       	movw	r24, r22
    114e:	80 95       	com	r24
    1150:	84 23       	and	r24, r20
    1152:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    1154:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1156:	08 95       	ret
                default: return -1;
    1158:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    115a:	08 95       	ret

0000115c <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    115c:	8f 3f       	cpi	r24, 0xFF	; 255
    115e:	31 f1       	breq	.+76     	; 0x11ac <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    1160:	e8 2f       	mov	r30, r24
    1162:	e7 70       	andi	r30, 0x07	; 7
    1164:	4e 2f       	mov	r20, r30
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	47 30       	cpi	r20, 0x07	; 7
    116a:	51 05       	cpc	r21, r1
    116c:	f8 f4       	brcc	.+62     	; 0x11ac <nrk_gpio_get+0x50>
    116e:	fa 01       	movw	r30, r20
    1170:	e2 56       	subi	r30, 0x62	; 98
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	28 2f       	mov	r18, r24
    1176:	26 95       	lsr	r18
    1178:	26 95       	lsr	r18
    117a:	26 95       	lsr	r18
    117c:	0c 94 0e 23 	jmp	0x461c	; 0x461c <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    1180:	90 b1       	in	r25, 0x00	; 0
    1182:	0b c0       	rjmp	.+22     	; 0x119a <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    1184:	93 b1       	in	r25, 0x03	; 3
    1186:	09 c0       	rjmp	.+18     	; 0x119a <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    1188:	96 b1       	in	r25, 0x06	; 6
    118a:	07 c0       	rjmp	.+14     	; 0x119a <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    118c:	99 b1       	in	r25, 0x09	; 9
    118e:	05 c0       	rjmp	.+10     	; 0x119a <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    1190:	9c b1       	in	r25, 0x0c	; 12
    1192:	03 c0       	rjmp	.+6      	; 0x119a <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    1194:	9f b1       	in	r25, 0x0f	; 15
    1196:	01 c0       	rjmp	.+2      	; 0x119a <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    1198:	92 b3       	in	r25, 0x12	; 18
    119a:	89 2f       	mov	r24, r25
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <nrk_gpio_get+0x48>
    11a0:	95 95       	asr	r25
    11a2:	87 95       	ror	r24
    11a4:	2a 95       	dec	r18
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <nrk_gpio_get+0x44>
    11a8:	81 70       	andi	r24, 0x01	; 1
    11aa:	08 95       	ret
                default: return -1;
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    11ae:	08 95       	ret

000011b0 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    11b0:	8f 3f       	cpi	r24, 0xFF	; 255
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <nrk_gpio_toggle+0x6>
    11b4:	06 c1       	rjmp	.+524    	; 0x13c2 <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    11b6:	e8 2f       	mov	r30, r24
    11b8:	e7 70       	andi	r30, 0x07	; 7
    11ba:	4e 2f       	mov	r20, r30
    11bc:	50 e0       	ldi	r21, 0x00	; 0
    11be:	47 30       	cpi	r20, 0x07	; 7
    11c0:	51 05       	cpc	r21, r1
    11c2:	08 f0       	brcs	.+2      	; 0x11c6 <nrk_gpio_toggle+0x16>
    11c4:	fe c0       	rjmp	.+508    	; 0x13c2 <nrk_gpio_toggle+0x212>
    11c6:	fa 01       	movw	r30, r20
    11c8:	eb 55       	subi	r30, 0x5B	; 91
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	86 95       	lsr	r24
    11ce:	86 95       	lsr	r24
    11d0:	86 95       	lsr	r24
    11d2:	0c 94 0e 23 	jmp	0x461c	; 0x461c <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    11d6:	20 b1       	in	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	08 2e       	mov	r0, r24
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <nrk_gpio_toggle+0x32>
    11de:	35 95       	asr	r19
    11e0:	27 95       	ror	r18
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    11e6:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    11e8:	20 fd       	sbrc	r18, 0
    11ea:	0b c0       	rjmp	.+22     	; 0x1202 <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    11ec:	21 e0       	ldi	r18, 0x01	; 1
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	b9 01       	movw	r22, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <nrk_gpio_toggle+0x48>
    11f4:	66 0f       	add	r22, r22
    11f6:	77 1f       	adc	r23, r23
    11f8:	8a 95       	dec	r24
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <nrk_gpio_toggle+0x44>
    11fc:	cb 01       	movw	r24, r22
    11fe:	84 2b       	or	r24, r20
    1200:	0b c0       	rjmp	.+22     	; 0x1218 <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    1202:	21 e0       	ldi	r18, 0x01	; 1
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	b9 01       	movw	r22, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <nrk_gpio_toggle+0x5e>
    120a:	66 0f       	add	r22, r22
    120c:	77 1f       	adc	r23, r23
    120e:	8a 95       	dec	r24
    1210:	e2 f7       	brpl	.-8      	; 0x120a <nrk_gpio_toggle+0x5a>
    1212:	cb 01       	movw	r24, r22
    1214:	80 95       	com	r24
    1216:	84 23       	and	r24, r20
    1218:	82 b9       	out	0x02, r24	; 2
    121a:	16 c0       	rjmp	.+44     	; 0x1248 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    121c:	23 b1       	in	r18, 0x03	; 3
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	08 2e       	mov	r0, r24
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <nrk_gpio_toggle+0x78>
    1224:	35 95       	asr	r19
    1226:	27 95       	ror	r18
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    122c:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    122e:	20 fd       	sbrc	r18, 0
    1230:	0d c0       	rjmp	.+26     	; 0x124c <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1232:	21 e0       	ldi	r18, 0x01	; 1
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	b9 01       	movw	r22, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <nrk_gpio_toggle+0x8e>
    123a:	66 0f       	add	r22, r22
    123c:	77 1f       	adc	r23, r23
    123e:	8a 95       	dec	r24
    1240:	e2 f7       	brpl	.-8      	; 0x123a <nrk_gpio_toggle+0x8a>
    1242:	cb 01       	movw	r24, r22
    1244:	84 2b       	or	r24, r20
    1246:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    124c:	21 e0       	ldi	r18, 0x01	; 1
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	b9 01       	movw	r22, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <nrk_gpio_toggle+0xa8>
    1254:	66 0f       	add	r22, r22
    1256:	77 1f       	adc	r23, r23
    1258:	8a 95       	dec	r24
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <nrk_gpio_toggle+0xa4>
    125c:	cb 01       	movw	r24, r22
    125e:	80 95       	com	r24
    1260:	84 23       	and	r24, r20
    1262:	f1 cf       	rjmp	.-30     	; 0x1246 <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1264:	26 b1       	in	r18, 0x06	; 6
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	08 2e       	mov	r0, r24
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <nrk_gpio_toggle+0xc0>
    126c:	35 95       	asr	r19
    126e:	27 95       	ror	r18
    1270:	0a 94       	dec	r0
    1272:	e2 f7       	brpl	.-8      	; 0x126c <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1274:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1276:	20 fd       	sbrc	r18, 0
    1278:	0b c0       	rjmp	.+22     	; 0x1290 <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    127a:	21 e0       	ldi	r18, 0x01	; 1
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	b9 01       	movw	r22, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <nrk_gpio_toggle+0xd6>
    1282:	66 0f       	add	r22, r22
    1284:	77 1f       	adc	r23, r23
    1286:	8a 95       	dec	r24
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <nrk_gpio_toggle+0xd2>
    128a:	cb 01       	movw	r24, r22
    128c:	84 2b       	or	r24, r20
    128e:	0b c0       	rjmp	.+22     	; 0x12a6 <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    1290:	21 e0       	ldi	r18, 0x01	; 1
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	b9 01       	movw	r22, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <nrk_gpio_toggle+0xec>
    1298:	66 0f       	add	r22, r22
    129a:	77 1f       	adc	r23, r23
    129c:	8a 95       	dec	r24
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <nrk_gpio_toggle+0xe8>
    12a0:	cb 01       	movw	r24, r22
    12a2:	80 95       	com	r24
    12a4:	84 23       	and	r24, r20
    12a6:	88 b9       	out	0x08, r24	; 8
    12a8:	cf cf       	rjmp	.-98     	; 0x1248 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    12aa:	29 b1       	in	r18, 0x09	; 9
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	08 2e       	mov	r0, r24
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <nrk_gpio_toggle+0x106>
    12b2:	35 95       	asr	r19
    12b4:	27 95       	ror	r18
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    12ba:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    12bc:	20 fd       	sbrc	r18, 0
    12be:	0b c0       	rjmp	.+22     	; 0x12d6 <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    12c0:	21 e0       	ldi	r18, 0x01	; 1
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	b9 01       	movw	r22, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <nrk_gpio_toggle+0x11c>
    12c8:	66 0f       	add	r22, r22
    12ca:	77 1f       	adc	r23, r23
    12cc:	8a 95       	dec	r24
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <nrk_gpio_toggle+0x118>
    12d0:	cb 01       	movw	r24, r22
    12d2:	84 2b       	or	r24, r20
    12d4:	0b c0       	rjmp	.+22     	; 0x12ec <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    12d6:	21 e0       	ldi	r18, 0x01	; 1
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	b9 01       	movw	r22, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <nrk_gpio_toggle+0x132>
    12de:	66 0f       	add	r22, r22
    12e0:	77 1f       	adc	r23, r23
    12e2:	8a 95       	dec	r24
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <nrk_gpio_toggle+0x12e>
    12e6:	cb 01       	movw	r24, r22
    12e8:	80 95       	com	r24
    12ea:	84 23       	and	r24, r20
    12ec:	8b b9       	out	0x0b, r24	; 11
    12ee:	ac cf       	rjmp	.-168    	; 0x1248 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    12f0:	2c b1       	in	r18, 0x0c	; 12
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	08 2e       	mov	r0, r24
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <nrk_gpio_toggle+0x14c>
    12f8:	35 95       	asr	r19
    12fa:	27 95       	ror	r18
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    1300:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    1302:	20 fd       	sbrc	r18, 0
    1304:	0b c0       	rjmp	.+22     	; 0x131c <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    1306:	21 e0       	ldi	r18, 0x01	; 1
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	b9 01       	movw	r22, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <nrk_gpio_toggle+0x162>
    130e:	66 0f       	add	r22, r22
    1310:	77 1f       	adc	r23, r23
    1312:	8a 95       	dec	r24
    1314:	e2 f7       	brpl	.-8      	; 0x130e <nrk_gpio_toggle+0x15e>
    1316:	cb 01       	movw	r24, r22
    1318:	84 2b       	or	r24, r20
    131a:	0b c0       	rjmp	.+22     	; 0x1332 <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    131c:	21 e0       	ldi	r18, 0x01	; 1
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	b9 01       	movw	r22, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <nrk_gpio_toggle+0x178>
    1324:	66 0f       	add	r22, r22
    1326:	77 1f       	adc	r23, r23
    1328:	8a 95       	dec	r24
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <nrk_gpio_toggle+0x174>
    132c:	cb 01       	movw	r24, r22
    132e:	80 95       	com	r24
    1330:	84 23       	and	r24, r20
    1332:	8e b9       	out	0x0e, r24	; 14
    1334:	89 cf       	rjmp	.-238    	; 0x1248 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    1336:	2f b1       	in	r18, 0x0f	; 15
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	08 2e       	mov	r0, r24
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <nrk_gpio_toggle+0x192>
    133e:	35 95       	asr	r19
    1340:	27 95       	ror	r18
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    1346:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    1348:	20 fd       	sbrc	r18, 0
    134a:	0b c0       	rjmp	.+22     	; 0x1362 <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    134c:	21 e0       	ldi	r18, 0x01	; 1
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	b9 01       	movw	r22, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <nrk_gpio_toggle+0x1a8>
    1354:	66 0f       	add	r22, r22
    1356:	77 1f       	adc	r23, r23
    1358:	8a 95       	dec	r24
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <nrk_gpio_toggle+0x1a4>
    135c:	cb 01       	movw	r24, r22
    135e:	84 2b       	or	r24, r20
    1360:	0b c0       	rjmp	.+22     	; 0x1378 <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    1362:	21 e0       	ldi	r18, 0x01	; 1
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	b9 01       	movw	r22, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <nrk_gpio_toggle+0x1be>
    136a:	66 0f       	add	r22, r22
    136c:	77 1f       	adc	r23, r23
    136e:	8a 95       	dec	r24
    1370:	e2 f7       	brpl	.-8      	; 0x136a <nrk_gpio_toggle+0x1ba>
    1372:	cb 01       	movw	r24, r22
    1374:	80 95       	com	r24
    1376:	84 23       	and	r24, r20
    1378:	81 bb       	out	0x11, r24	; 17
    137a:	66 cf       	rjmp	.-308    	; 0x1248 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    137c:	22 b3       	in	r18, 0x12	; 18
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	08 2e       	mov	r0, r24
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <nrk_gpio_toggle+0x1d8>
    1384:	35 95       	asr	r19
    1386:	27 95       	ror	r18
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    138c:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    138e:	20 fd       	sbrc	r18, 0
    1390:	0b c0       	rjmp	.+22     	; 0x13a8 <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    1392:	21 e0       	ldi	r18, 0x01	; 1
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	b9 01       	movw	r22, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <nrk_gpio_toggle+0x1ee>
    139a:	66 0f       	add	r22, r22
    139c:	77 1f       	adc	r23, r23
    139e:	8a 95       	dec	r24
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <nrk_gpio_toggle+0x1ea>
    13a2:	cb 01       	movw	r24, r22
    13a4:	84 2b       	or	r24, r20
    13a6:	0b c0       	rjmp	.+22     	; 0x13be <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    13a8:	21 e0       	ldi	r18, 0x01	; 1
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	b9 01       	movw	r22, r18
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <nrk_gpio_toggle+0x204>
    13b0:	66 0f       	add	r22, r22
    13b2:	77 1f       	adc	r23, r23
    13b4:	8a 95       	dec	r24
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <nrk_gpio_toggle+0x200>
    13b8:	cb 01       	movw	r24, r22
    13ba:	80 95       	com	r24
    13bc:	84 23       	and	r24, r20
    13be:	84 bb       	out	0x14, r24	; 20
    13c0:	43 cf       	rjmp	.-378    	; 0x1248 <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    13c2:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    13c4:	08 95       	ret

000013c6 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    13c6:	8f 3f       	cpi	r24, 0xFF	; 255
    13c8:	09 f4       	brne	.+2      	; 0x13cc <nrk_gpio_direction+0x6>
    13ca:	d5 c0       	rjmp	.+426    	; 0x1576 <nrk_gpio_direction+0x1b0>
    13cc:	e8 2f       	mov	r30, r24
    13ce:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    13d0:	4e 2f       	mov	r20, r30
    13d2:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    13d4:	61 11       	cpse	r22, r1
    13d6:	67 c0       	rjmp	.+206    	; 0x14a6 <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    13d8:	47 30       	cpi	r20, 0x07	; 7
    13da:	51 05       	cpc	r21, r1
    13dc:	08 f0       	brcs	.+2      	; 0x13e0 <nrk_gpio_direction+0x1a>
    13de:	cb c0       	rjmp	.+406    	; 0x1576 <nrk_gpio_direction+0x1b0>
    13e0:	fa 01       	movw	r30, r20
    13e2:	e4 55       	subi	r30, 0x54	; 84
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	86 95       	lsr	r24
    13e8:	86 95       	lsr	r24
    13ea:	86 95       	lsr	r24
    13ec:	0c 94 0e 23 	jmp	0x461c	; 0x461c <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    13f0:	41 b1       	in	r20, 0x01	; 1
    13f2:	21 e0       	ldi	r18, 0x01	; 1
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	b9 01       	movw	r22, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <nrk_gpio_direction+0x38>
    13fa:	66 0f       	add	r22, r22
    13fc:	77 1f       	adc	r23, r23
    13fe:	8a 95       	dec	r24
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <nrk_gpio_direction+0x34>
    1402:	cb 01       	movw	r24, r22
    1404:	80 95       	com	r24
    1406:	84 23       	and	r24, r20
    1408:	65 c0       	rjmp	.+202    	; 0x14d4 <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    140a:	44 b1       	in	r20, 0x04	; 4
    140c:	21 e0       	ldi	r18, 0x01	; 1
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	b9 01       	movw	r22, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <nrk_gpio_direction+0x52>
    1414:	66 0f       	add	r22, r22
    1416:	77 1f       	adc	r23, r23
    1418:	8a 95       	dec	r24
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <nrk_gpio_direction+0x4e>
    141c:	cb 01       	movw	r24, r22
    141e:	80 95       	com	r24
    1420:	84 23       	and	r24, r20
    1422:	65 c0       	rjmp	.+202    	; 0x14ee <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    1424:	47 b1       	in	r20, 0x07	; 7
    1426:	21 e0       	ldi	r18, 0x01	; 1
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	b9 01       	movw	r22, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <nrk_gpio_direction+0x6c>
    142e:	66 0f       	add	r22, r22
    1430:	77 1f       	adc	r23, r23
    1432:	8a 95       	dec	r24
    1434:	e2 f7       	brpl	.-8      	; 0x142e <nrk_gpio_direction+0x68>
    1436:	cb 01       	movw	r24, r22
    1438:	80 95       	com	r24
    143a:	84 23       	and	r24, r20
    143c:	65 c0       	rjmp	.+202    	; 0x1508 <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    143e:	4a b1       	in	r20, 0x0a	; 10
    1440:	21 e0       	ldi	r18, 0x01	; 1
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	b9 01       	movw	r22, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <nrk_gpio_direction+0x86>
    1448:	66 0f       	add	r22, r22
    144a:	77 1f       	adc	r23, r23
    144c:	8a 95       	dec	r24
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <nrk_gpio_direction+0x82>
    1450:	cb 01       	movw	r24, r22
    1452:	80 95       	com	r24
    1454:	84 23       	and	r24, r20
    1456:	65 c0       	rjmp	.+202    	; 0x1522 <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    1458:	4d b1       	in	r20, 0x0d	; 13
    145a:	21 e0       	ldi	r18, 0x01	; 1
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	b9 01       	movw	r22, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <nrk_gpio_direction+0xa0>
    1462:	66 0f       	add	r22, r22
    1464:	77 1f       	adc	r23, r23
    1466:	8a 95       	dec	r24
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <nrk_gpio_direction+0x9c>
    146a:	cb 01       	movw	r24, r22
    146c:	80 95       	com	r24
    146e:	84 23       	and	r24, r20
    1470:	65 c0       	rjmp	.+202    	; 0x153c <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    1472:	40 b3       	in	r20, 0x10	; 16
    1474:	21 e0       	ldi	r18, 0x01	; 1
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	b9 01       	movw	r22, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <nrk_gpio_direction+0xba>
    147c:	66 0f       	add	r22, r22
    147e:	77 1f       	adc	r23, r23
    1480:	8a 95       	dec	r24
    1482:	e2 f7       	brpl	.-8      	; 0x147c <nrk_gpio_direction+0xb6>
    1484:	cb 01       	movw	r24, r22
    1486:	80 95       	com	r24
    1488:	84 23       	and	r24, r20
    148a:	65 c0       	rjmp	.+202    	; 0x1556 <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    148c:	43 b3       	in	r20, 0x13	; 19
    148e:	21 e0       	ldi	r18, 0x01	; 1
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	b9 01       	movw	r22, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <nrk_gpio_direction+0xd4>
    1496:	66 0f       	add	r22, r22
    1498:	77 1f       	adc	r23, r23
    149a:	8a 95       	dec	r24
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <nrk_gpio_direction+0xd0>
    149e:	cb 01       	movw	r24, r22
    14a0:	80 95       	com	r24
    14a2:	84 23       	and	r24, r20
    14a4:	65 c0       	rjmp	.+202    	; 0x1570 <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    14a6:	47 30       	cpi	r20, 0x07	; 7
    14a8:	51 05       	cpc	r21, r1
    14aa:	08 f0       	brcs	.+2      	; 0x14ae <nrk_gpio_direction+0xe8>
    14ac:	64 c0       	rjmp	.+200    	; 0x1576 <nrk_gpio_direction+0x1b0>
    14ae:	fa 01       	movw	r30, r20
    14b0:	ed 54       	subi	r30, 0x4D	; 77
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	86 95       	lsr	r24
    14b6:	86 95       	lsr	r24
    14b8:	86 95       	lsr	r24
    14ba:	0c 94 0e 23 	jmp	0x461c	; 0x461c <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    14be:	41 b1       	in	r20, 0x01	; 1
    14c0:	21 e0       	ldi	r18, 0x01	; 1
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	b9 01       	movw	r22, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <nrk_gpio_direction+0x106>
    14c8:	66 0f       	add	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	8a 95       	dec	r24
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <nrk_gpio_direction+0x102>
    14d0:	cb 01       	movw	r24, r22
    14d2:	84 2b       	or	r24, r20
    14d4:	81 b9       	out	0x01, r24	; 1
    14d6:	4d c0       	rjmp	.+154    	; 0x1572 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    14d8:	44 b1       	in	r20, 0x04	; 4
    14da:	21 e0       	ldi	r18, 0x01	; 1
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	b9 01       	movw	r22, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <nrk_gpio_direction+0x120>
    14e2:	66 0f       	add	r22, r22
    14e4:	77 1f       	adc	r23, r23
    14e6:	8a 95       	dec	r24
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <nrk_gpio_direction+0x11c>
    14ea:	cb 01       	movw	r24, r22
    14ec:	84 2b       	or	r24, r20
    14ee:	84 b9       	out	0x04, r24	; 4
    14f0:	40 c0       	rjmp	.+128    	; 0x1572 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    14f2:	47 b1       	in	r20, 0x07	; 7
    14f4:	21 e0       	ldi	r18, 0x01	; 1
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	b9 01       	movw	r22, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <nrk_gpio_direction+0x13a>
    14fc:	66 0f       	add	r22, r22
    14fe:	77 1f       	adc	r23, r23
    1500:	8a 95       	dec	r24
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <nrk_gpio_direction+0x136>
    1504:	cb 01       	movw	r24, r22
    1506:	84 2b       	or	r24, r20
    1508:	87 b9       	out	0x07, r24	; 7
    150a:	33 c0       	rjmp	.+102    	; 0x1572 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    150c:	4a b1       	in	r20, 0x0a	; 10
    150e:	21 e0       	ldi	r18, 0x01	; 1
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	b9 01       	movw	r22, r18
    1514:	02 c0       	rjmp	.+4      	; 0x151a <nrk_gpio_direction+0x154>
    1516:	66 0f       	add	r22, r22
    1518:	77 1f       	adc	r23, r23
    151a:	8a 95       	dec	r24
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <nrk_gpio_direction+0x150>
    151e:	cb 01       	movw	r24, r22
    1520:	84 2b       	or	r24, r20
    1522:	8a b9       	out	0x0a, r24	; 10
    1524:	26 c0       	rjmp	.+76     	; 0x1572 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    1526:	4d b1       	in	r20, 0x0d	; 13
    1528:	21 e0       	ldi	r18, 0x01	; 1
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	b9 01       	movw	r22, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <nrk_gpio_direction+0x16e>
    1530:	66 0f       	add	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	8a 95       	dec	r24
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <nrk_gpio_direction+0x16a>
    1538:	cb 01       	movw	r24, r22
    153a:	84 2b       	or	r24, r20
    153c:	8d b9       	out	0x0d, r24	; 13
    153e:	19 c0       	rjmp	.+50     	; 0x1572 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    1540:	40 b3       	in	r20, 0x10	; 16
    1542:	21 e0       	ldi	r18, 0x01	; 1
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	b9 01       	movw	r22, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <nrk_gpio_direction+0x188>
    154a:	66 0f       	add	r22, r22
    154c:	77 1f       	adc	r23, r23
    154e:	8a 95       	dec	r24
    1550:	e2 f7       	brpl	.-8      	; 0x154a <nrk_gpio_direction+0x184>
    1552:	cb 01       	movw	r24, r22
    1554:	84 2b       	or	r24, r20
    1556:	80 bb       	out	0x10, r24	; 16
    1558:	0c c0       	rjmp	.+24     	; 0x1572 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    155a:	43 b3       	in	r20, 0x13	; 19
    155c:	21 e0       	ldi	r18, 0x01	; 1
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	b9 01       	movw	r22, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <nrk_gpio_direction+0x1a2>
    1564:	66 0f       	add	r22, r22
    1566:	77 1f       	adc	r23, r23
    1568:	8a 95       	dec	r24
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <nrk_gpio_direction+0x19e>
    156c:	cb 01       	movw	r24, r22
    156e:	84 2b       	or	r24, r20
    1570:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    1572:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    1574:	08 95       	ret
                        default: return -1;
    1576:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    1578:	08 95       	ret

0000157a <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    157a:	81 11       	cpse	r24, r1
    157c:	06 c0       	rjmp	.+12     	; 0x158a <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    157e:	80 b1       	in	r24, 0x00	; 0
    1580:	86 95       	lsr	r24
    1582:	81 70       	andi	r24, 0x01	; 1
    1584:	91 e0       	ldi	r25, 0x01	; 1
    1586:	89 27       	eor	r24, r25
    1588:	08 95       	ret
	} 
return -1;
    158a:	8f ef       	ldi	r24, 0xFF	; 255
}
    158c:	08 95       	ret

0000158e <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	11 f4       	brne	.+4      	; 0x1596 <nrk_led_toggle+0x8>
    1592:	83 e2       	ldi	r24, 0x23	; 35
    1594:	0d c0       	rjmp	.+26     	; 0x15b0 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	91 05       	cpc	r25, r1
    159a:	11 f4       	brne	.+4      	; 0x15a0 <nrk_led_toggle+0x12>
    159c:	8b e2       	ldi	r24, 0x2B	; 43
    159e:	08 c0       	rjmp	.+16     	; 0x15b0 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    15a0:	82 30       	cpi	r24, 0x02	; 2
    15a2:	91 05       	cpc	r25, r1
    15a4:	11 f4       	brne	.+4      	; 0x15aa <nrk_led_toggle+0x1c>
    15a6:	83 e3       	ldi	r24, 0x33	; 51
    15a8:	03 c0       	rjmp	.+6      	; 0x15b0 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    15aa:	03 97       	sbiw	r24, 0x03	; 3
    15ac:	29 f4       	brne	.+10     	; 0x15b8 <nrk_led_toggle+0x2a>
    15ae:	8b e3       	ldi	r24, 0x3B	; 59
    15b0:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <nrk_gpio_toggle>
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	08 95       	ret
return -1;
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
}
    15ba:	08 95       	ret

000015bc <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	11 f4       	brne	.+4      	; 0x15c4 <nrk_led_clr+0x8>
    15c0:	83 e2       	ldi	r24, 0x23	; 35
    15c2:	0d c0       	rjmp	.+26     	; 0x15de <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	91 05       	cpc	r25, r1
    15c8:	11 f4       	brne	.+4      	; 0x15ce <nrk_led_clr+0x12>
    15ca:	8b e2       	ldi	r24, 0x2B	; 43
    15cc:	08 c0       	rjmp	.+16     	; 0x15de <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    15ce:	82 30       	cpi	r24, 0x02	; 2
    15d0:	91 05       	cpc	r25, r1
    15d2:	11 f4       	brne	.+4      	; 0x15d8 <nrk_led_clr+0x1c>
    15d4:	83 e3       	ldi	r24, 0x33	; 51
    15d6:	03 c0       	rjmp	.+6      	; 0x15de <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    15d8:	03 97       	sbiw	r24, 0x03	; 3
    15da:	29 f4       	brne	.+10     	; 0x15e6 <nrk_led_clr+0x2a>
    15dc:	8b e3       	ldi	r24, 0x3B	; 59
    15de:	0e 94 c5 07 	call	0xf8a	; 0xf8a <nrk_gpio_set>
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	08 95       	ret
return -1;
    15e6:	8f ef       	ldi	r24, 0xFF	; 255
}
    15e8:	08 95       	ret

000015ea <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	11 f4       	brne	.+4      	; 0x15f2 <nrk_led_set+0x8>
    15ee:	83 e2       	ldi	r24, 0x23	; 35
    15f0:	0d c0       	rjmp	.+26     	; 0x160c <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	91 05       	cpc	r25, r1
    15f6:	11 f4       	brne	.+4      	; 0x15fc <nrk_led_set+0x12>
    15f8:	8b e2       	ldi	r24, 0x2B	; 43
    15fa:	08 c0       	rjmp	.+16     	; 0x160c <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    15fc:	82 30       	cpi	r24, 0x02	; 2
    15fe:	91 05       	cpc	r25, r1
    1600:	11 f4       	brne	.+4      	; 0x1606 <nrk_led_set+0x1c>
    1602:	83 e3       	ldi	r24, 0x33	; 51
    1604:	03 c0       	rjmp	.+6      	; 0x160c <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    1606:	03 97       	sbiw	r24, 0x03	; 3
    1608:	29 f4       	brne	.+10     	; 0x1614 <nrk_led_set+0x2a>
    160a:	8b e3       	ldi	r24, 0x3B	; 59
    160c:	0e 94 36 08 	call	0x106c	; 0x106c <nrk_gpio_clr>
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	08 95       	ret
return -1;
    1614:	8f ef       	ldi	r24, 0xFF	; 255
}
    1616:	08 95       	ret

00001618 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    1618:	88 23       	and	r24, r24
    161a:	19 f0       	breq	.+6      	; 0x1622 <nrk_gpio_pullups+0xa>
    161c:	85 b7       	in	r24, 0x35	; 53
    161e:	8f 7e       	andi	r24, 0xEF	; 239
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    1622:	85 b7       	in	r24, 0x35	; 53
    1624:	80 61       	ori	r24, 0x10	; 16
    1626:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	08 95       	ret

0000162c <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    162c:	90 91 c8 00 	lds	r25, 0x00C8
    1630:	95 ff       	sbrs	r25, 5
    1632:	fc cf       	rjmp	.-8      	; 0x162c <putc1>
    1634:	80 93 ce 00 	sts	0x00CE, r24
    1638:	08 95       	ret

0000163a <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    163a:	90 93 c5 00 	sts	0x00C5, r25
    163e:	80 93 c4 00 	sts	0x00C4, r24
    1642:	86 e0       	ldi	r24, 0x06	; 6
    1644:	80 93 c2 00 	sts	0x00C2, r24
    1648:	e1 ec       	ldi	r30, 0xC1	; 193
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	8b 7f       	andi	r24, 0xFB	; 251
    1650:	80 83       	st	Z, r24
    1652:	a0 ec       	ldi	r26, 0xC0	; 192
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	8c 91       	ld	r24, X
    1658:	82 60       	ori	r24, 0x02	; 2
    165a:	8c 93       	st	X, r24
ENABLE_UART0();
    165c:	80 81       	ld	r24, Z
    165e:	88 61       	ori	r24, 0x18	; 24
    1660:	80 83       	st	Z, r24
    1662:	08 95       	ret

00001664 <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    1664:	90 93 cd 00 	sts	0x00CD, r25
    1668:	80 93 cc 00 	sts	0x00CC, r24
    166c:	86 e0       	ldi	r24, 0x06	; 6
    166e:	80 93 ca 00 	sts	0x00CA, r24
    1672:	e9 ec       	ldi	r30, 0xC9	; 201
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	8b 7f       	andi	r24, 0xFB	; 251
    167a:	80 83       	st	Z, r24
    167c:	a8 ec       	ldi	r26, 0xC8	; 200
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	8c 91       	ld	r24, X
    1682:	82 60       	ori	r24, 0x02	; 2
    1684:	8c 93       	st	X, r24
ENABLE_UART1();
    1686:	80 81       	ld	r24, Z
    1688:	88 61       	ori	r24, 0x18	; 24
    168a:	80 83       	st	Z, r24
    168c:	08 95       	ret

0000168e <nrk_setup_uart>:
 *
 * More advanced UART usage will require manually
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    1692:	0e 94 1d 0b 	call	0x163a	; 0x163a <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    1696:	6b e7       	ldi	r22, 0x7B	; 123
    1698:	77 e0       	ldi	r23, 0x07	; 7
    169a:	87 e8       	ldi	r24, 0x87	; 135
    169c:	97 e0       	ldi	r25, 0x07	; 7
    169e:	0e 94 4f 23 	call	0x469e	; 0x469e <fdevopen>
    16a2:	c5 e1       	ldi	r28, 0x15	; 21
    16a4:	d6 e0       	ldi	r29, 0x06	; 6
    16a6:	9b 83       	std	Y+3, r25	; 0x03
    16a8:	8a 83       	std	Y+2, r24	; 0x02
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    16aa:	6b e7       	ldi	r22, 0x7B	; 123
    16ac:	77 e0       	ldi	r23, 0x07	; 7
    16ae:	87 e8       	ldi	r24, 0x87	; 135
    16b0:	97 e0       	ldi	r25, 0x07	; 7
    16b2:	0e 94 4f 23 	call	0x469e	; 0x469e <fdevopen>
    16b6:	99 83       	std	Y+1, r25	; 0x01
    16b8:	88 83       	st	Y, r24
   uart_rx_buf_start=0;
   uart_rx_buf_end=0;
   ENABLE_UART0_RX_INT();
#endif

}
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	08 95       	ret

000016c0 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    16c0:	80 91 c8 00 	lds	r24, 0x00C8
    16c4:	87 ff       	sbrs	r24, 7
    16c6:	fc cf       	rjmp	.-8      	; 0x16c0 <getc1>
    16c8:	80 91 c8 00 	lds	r24, 0x00C8
    16cc:	8f 77       	andi	r24, 0x7F	; 127
    16ce:	80 93 c8 00 	sts	0x00C8, r24
    16d2:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    16d6:	08 95       	ret

000016d8 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	d1 f7       	brne	.-12     	; 0x16d8 <halWait>

} // halWait
    16e4:	08 95       	ret

000016e6 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    16e6:	0c 94 aa 24 	jmp	0x4954	; 0x4954 <__eerd_byte_m128rfa1>

000016ea <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    16ea:	0e 94 b2 24 	call	0x4964	; 0x4964 <__eewr_byte_m128rfa1>
}
    16ee:	08 95       	ret

000016f0 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    16f0:	ef 92       	push	r14
    16f2:	ff 92       	push	r15
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 aa 24 	call	0x4954	; 0x4954 <__eerd_byte_m128rfa1>
    1706:	18 2f       	mov	r17, r24
    1708:	f7 01       	movw	r30, r14
    170a:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0e 94 aa 24 	call	0x4954	; 0x4954 <__eerd_byte_m128rfa1>
    1714:	08 2f       	mov	r16, r24
    1716:	f7 01       	movw	r30, r14
    1718:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    171a:	82 e0       	ldi	r24, 0x02	; 2
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0e 94 aa 24 	call	0x4954	; 0x4954 <__eerd_byte_m128rfa1>
    1722:	d8 2f       	mov	r29, r24
    1724:	f7 01       	movw	r30, r14
    1726:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    1728:	83 e0       	ldi	r24, 0x03	; 3
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 aa 24 	call	0x4954	; 0x4954 <__eerd_byte_m128rfa1>
    1730:	c8 2f       	mov	r28, r24
    1732:	f7 01       	movw	r30, r14
    1734:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    1736:	84 e0       	ldi	r24, 0x04	; 4
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	0e 94 aa 24 	call	0x4954	; 0x4954 <__eerd_byte_m128rfa1>
    173e:	10 0f       	add	r17, r16
    1740:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    1742:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    1744:	8c 17       	cp	r24, r28
    1746:	11 f0       	breq	.+4      	; 0x174c <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    1748:	8f ef       	ldi	r24, 0xFF	; 255
    174a:	01 c0       	rjmp	.+2      	; 0x174e <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    174c:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	1f 91       	pop	r17
    1754:	0f 91       	pop	r16
    1756:	ff 90       	pop	r15
    1758:	ef 90       	pop	r14
    175a:	08 95       	ret

0000175c <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    1762:	85 e0       	ldi	r24, 0x05	; 5
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	0e 94 aa 24 	call	0x4954	; 0x4954 <__eerd_byte_m128rfa1>
    176a:	88 83       	st	Y, r24
return NRK_OK;
}
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	08 95       	ret

00001774 <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    1774:	fc 01       	movw	r30, r24
    1776:	60 81       	ld	r22, Z
    1778:	86 e0       	ldi	r24, 0x06	; 6
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 b2 24 	call	0x4964	; 0x4964 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	08 95       	ret

00001784 <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    178a:	86 e0       	ldi	r24, 0x06	; 6
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0e 94 aa 24 	call	0x4954	; 0x4954 <__eerd_byte_m128rfa1>
    1792:	88 83       	st	Y, r24
  return NRK_OK;
}
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	08 95       	ret

0000179c <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	8c 01       	movw	r16, r24
    17a6:	c0 e0       	ldi	r28, 0x00	; 0
    17a8:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    17aa:	ce 01       	movw	r24, r28
    17ac:	08 96       	adiw	r24, 0x08	; 8
    17ae:	0e 94 aa 24 	call	0x4954	; 0x4954 <__eerd_byte_m128rfa1>
    17b2:	f8 01       	movw	r30, r16
    17b4:	81 93       	st	Z+, r24
    17b6:	8f 01       	movw	r16, r30
    17b8:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    17ba:	c0 31       	cpi	r28, 0x10	; 16
    17bc:	d1 05       	cpc	r29, r1
    17be:	a9 f7       	brne	.-22     	; 0x17aa <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	08 95       	ret

000017cc <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	8c 01       	movw	r16, r24
    17d6:	c0 e0       	ldi	r28, 0x00	; 0
    17d8:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    17da:	f8 01       	movw	r30, r16
    17dc:	61 91       	ld	r22, Z+
    17de:	8f 01       	movw	r16, r30
    17e0:	ce 01       	movw	r24, r28
    17e2:	08 96       	adiw	r24, 0x08	; 8
    17e4:	0e 94 b2 24 	call	0x4964	; 0x4964 <__eewr_byte_m128rfa1>
    17e8:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    17ea:	c0 31       	cpi	r28, 0x10	; 16
    17ec:	d1 05       	cpc	r29, r1
    17ee:	a9 f7       	brne	.-22     	; 0x17da <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	1f 91       	pop	r17
    17f8:	0f 91       	pop	r16
    17fa:	08 95       	ret

000017fc <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    1802:	87 e0       	ldi	r24, 0x07	; 7
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 aa 24 	call	0x4954	; 0x4954 <__eerd_byte_m128rfa1>
    180a:	88 83       	st	Y, r24
  return NRK_OK;
}
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	08 95       	ret

00001814 <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    1814:	fc 01       	movw	r30, r24
    1816:	60 81       	ld	r22, Z
    1818:	87 e0       	ldi	r24, 0x07	; 7
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0e 94 b2 24 	call	0x4964	; 0x4964 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	08 95       	ret

00001824 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    1824:	f8 94       	cli
    1826:	08 95       	ret

00001828 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    1828:	78 94       	sei
    182a:	08 95       	ret

0000182c <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    182c:	0e 94 12 0c 	call	0x1824	; 0x1824 <nrk_int_disable>
while(1);
    1830:	ff cf       	rjmp	.-2      	; 0x1830 <nrk_halt+0x4>

00001832 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	a3 97       	sbiw	r28, 0x23	; 35
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    1846:	0e 94 ac 10 	call	0x2158	; 0x2158 <nrk_signal_create>
    184a:	80 93 e0 05 	sts	0x05E0, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    184e:	8f 3f       	cpi	r24, 0xFF	; 255
    1850:	21 f4       	brne	.+8      	; 0x185a <nrk_init+0x28>
    1852:	60 e0       	ldi	r22, 0x00	; 0
    1854:	8e e0       	ldi	r24, 0x0E	; 14
    1856:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    185a:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    185e:	80 ff       	sbrs	r24, 0
    1860:	04 c0       	rjmp	.+8      	; 0x186a <nrk_init+0x38>
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	86 e0       	ldi	r24, 0x06	; 6
    1866:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    186a:	10 92 e3 05 	sts	0x05E3, r1
    nrk_cur_task_TCB = NULL;
    186e:	10 92 f1 05 	sts	0x05F1, r1
    1872:	10 92 f0 05 	sts	0x05F0, r1
    
    nrk_high_ready_TCB = NULL;
    1876:	10 92 e2 05 	sts	0x05E2, r1
    187a:	10 92 e1 05 	sts	0x05E1, r1
    nrk_high_ready_prio = 0; 
    187e:	10 92 f2 05 	sts	0x05F2, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    1882:	10 92 ef 05 	sts	0x05EF, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    1886:	8f ef       	ldi	r24, 0xFF	; 255
    1888:	80 93 dc 05 	sts	0x05DC, r24
    nrk_sem_list[i].value=-1;
    188c:	80 93 de 05 	sts	0x05DE, r24
    nrk_sem_list[i].resource_ceiling=-1;
    1890:	80 93 dd 05 	sts	0x05DD, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1894:	93 e6       	ldi	r25, 0x63	; 99
    1896:	90 93 38 05 	sts	0x0538, r25
        nrk_task_TCB[i].task_ID = -1; 
    189a:	80 93 36 05 	sts	0x0536, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    189e:	90 93 63 05 	sts	0x0563, r25
        nrk_task_TCB[i].task_ID = -1; 
    18a2:	80 93 61 05 	sts	0x0561, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    18a6:	90 93 8e 05 	sts	0x058E, r25
        nrk_task_TCB[i].task_ID = -1; 
    18aa:	80 93 8c 05 	sts	0x058C, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    18ae:	90 93 b9 05 	sts	0x05B9, r25
        nrk_task_TCB[i].task_ID = -1; 
    18b2:	80 93 b7 05 	sts	0x05B7, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    18b6:	83 ef       	ldi	r24, 0xF3	; 243
    18b8:	95 e0       	ldi	r25, 0x05	; 5
    18ba:	28 ef       	ldi	r18, 0xF8	; 248
    18bc:	35 e0       	ldi	r19, 0x05	; 5
    18be:	30 93 f7 05 	sts	0x05F7, r19
    18c2:	20 93 f6 05 	sts	0x05F6, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    18c6:	90 93 fa 05 	sts	0x05FA, r25
    18ca:	80 93 f9 05 	sts	0x05F9, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    18ce:	4d ef       	ldi	r20, 0xFD	; 253
    18d0:	55 e0       	ldi	r21, 0x05	; 5
    18d2:	50 93 fc 05 	sts	0x05FC, r21
    18d6:	40 93 fb 05 	sts	0x05FB, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    18da:	30 93 ff 05 	sts	0x05FF, r19
    18de:	20 93 fe 05 	sts	0x05FE, r18
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    18e2:	22 e0       	ldi	r18, 0x02	; 2
    18e4:	36 e0       	ldi	r19, 0x06	; 6
    18e6:	30 93 01 06 	sts	0x0601, r19
    18ea:	20 93 00 06 	sts	0x0600, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    18ee:	50 93 04 06 	sts	0x0604, r21
    18f2:	40 93 03 06 	sts	0x0603, r20
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    18f6:	47 e0       	ldi	r20, 0x07	; 7
    18f8:	56 e0       	ldi	r21, 0x06	; 6
    18fa:	50 93 06 06 	sts	0x0606, r21
    18fe:	40 93 05 06 	sts	0x0605, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1902:	30 93 09 06 	sts	0x0609, r19
    1906:	20 93 08 06 	sts	0x0608, r18
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    190a:	10 92 f5 05 	sts	0x05F5, r1
    190e:	10 92 f4 05 	sts	0x05F4, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    1912:	10 92 0b 06 	sts	0x060B, r1
    1916:	10 92 0a 06 	sts	0x060A, r1
	_head_node = NULL;
    191a:	10 92 e6 05 	sts	0x05E6, r1
    191e:	10 92 e5 05 	sts	0x05E5, r1
	_free_node = &_nrk_readyQ[0];
    1922:	90 93 2d 05 	sts	0x052D, r25
    1926:	80 93 2c 05 	sts	0x052C, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    192a:	6e e6       	ldi	r22, 0x6E	; 110
    192c:	79 e1       	ldi	r23, 0x19	; 25
    192e:	ce 01       	movw	r24, r28
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	0e 94 2f 20 	call	0x405e	; 0x405e <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    1936:	40 e8       	ldi	r20, 0x80	; 128
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	6c ea       	ldi	r22, 0xAC	; 172
    193c:	74 e0       	ldi	r23, 0x04	; 4
    193e:	ce 01       	movw	r24, r28
    1940:	01 96       	adiw	r24, 0x01	; 1
    1942:	0e 94 33 20 	call	0x4066	; 0x4066 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    1946:	85 e5       	ldi	r24, 0x55	; 85
    1948:	80 93 ac 04 	sts	0x04AC, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    194c:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    194e:	1c 86       	std	Y+12, r1	; 0x0c
    1950:	1d 86       	std	Y+13, r1	; 0x0d
    1952:	1e 86       	std	Y+14, r1	; 0x0e
    1954:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    1956:	18 8a       	std	Y+16, r1	; 0x10
    1958:	19 8a       	std	Y+17, r1	; 0x11
    195a:	1a 8a       	std	Y+18, r1	; 0x12
    195c:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    195e:	1c 8a       	std	Y+20, r1	; 0x14
    1960:	1d 8a       	std	Y+21, r1	; 0x15
    1962:	1e 8a       	std	Y+22, r1	; 0x16
    1964:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    1966:	18 8e       	std	Y+24, r1	; 0x18
    1968:	19 8e       	std	Y+25, r1	; 0x19
    196a:	1a 8e       	std	Y+26, r1	; 0x1a
    196c:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    196e:	1c 8e       	std	Y+28, r1	; 0x1c
    1970:	1d 8e       	std	Y+29, r1	; 0x1d
    1972:	1e 8e       	std	Y+30, r1	; 0x1e
    1974:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    1976:	18 a2       	std	Y+32, r1	; 0x20
    1978:	19 a2       	std	Y+33, r1	; 0x21
    197a:	1a a2       	std	Y+34, r1	; 0x22
    197c:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    1982:	92 e0       	ldi	r25, 0x02	; 2
    1984:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    1986:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    1988:	ce 01       	movw	r24, r28
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	0e 94 ab 14 	call	0x2956	; 0x2956 <nrk_activate_task>
	
}
    1990:	a3 96       	adiw	r28, 0x23	; 35
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	de bf       	out	0x3e, r29	; 62
    1998:	0f be       	out	0x3f, r0	; 63
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	df 91       	pop	r29
    199e:	cf 91       	pop	r28
    19a0:	08 95       	ret

000019a2 <nrk_start>:




void nrk_start (void)
{
    19a2:	06 e3       	ldi	r16, 0x36	; 54
    19a4:	15 e0       	ldi	r17, 0x05	; 5
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    19a6:	c0 e0       	ldi	r28, 0x00	; 0
    {
	task_ID = nrk_task_TCB[i].task_ID;
    19a8:	f8 01       	movw	r30, r16
    19aa:	d0 80       	ld	r13, Z
	// only check activated tasks
	if(task_ID!=-1)
    19ac:	ff ef       	ldi	r31, 0xFF	; 255
    19ae:	df 12       	cpse	r13, r31
    19b0:	22 c0       	rjmp	.+68     	; 0x19f6 <nrk_start+0x54>
	/*
		- Get highest priority task from rdy list
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    19b2:	cf 5f       	subi	r28, 0xFF	; 255
    19b4:	05 5d       	subi	r16, 0xD5	; 213
    19b6:	1f 4f       	sbci	r17, 0xFF	; 255
    19b8:	c4 30       	cpi	r28, 0x04	; 4
    19ba:	b1 f7       	brne	.-20     	; 0x19a8 <nrk_start+0x6>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    19bc:	0e 94 9e 13 	call	0x273c	; 0x273c <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    19c0:	2b e2       	ldi	r18, 0x2B	; 43
    19c2:	82 02       	muls	r24, r18
    19c4:	c0 01       	movw	r24, r0
    19c6:	11 24       	eor	r1, r1
    19c8:	fc 01       	movw	r30, r24
    19ca:	e2 5d       	subi	r30, 0xD2	; 210
    19cc:	fa 4f       	sbci	r31, 0xFA	; 250
    19ce:	82 85       	ldd	r24, Z+10	; 0x0a
    19d0:	80 93 f2 05 	sts	0x05F2, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    19d4:	f0 93 f1 05 	sts	0x05F1, r31
    19d8:	e0 93 f0 05 	sts	0x05F0, r30
    19dc:	f0 93 e2 05 	sts	0x05E2, r31
    19e0:	e0 93 e1 05 	sts	0x05E1, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    19e4:	80 93 e3 05 	sts	0x05E3, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    19e8:	0e 94 a5 20 	call	0x414a	; 0x414a <nrk_target_start>
    nrk_stack_pointer_init(); 
    19ec:	0e 94 8f 20 	call	0x411e	; 0x411e <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    19f0:	0e 94 a9 20 	call	0x4152	; 0x4152 <nrk_start_high_ready_task>
    19f4:	16 c0       	rjmp	.+44     	; 0x1a22 <nrk_start+0x80>
    19f6:	86 e3       	ldi	r24, 0x36	; 54
    19f8:	e8 2e       	mov	r14, r24
    19fa:	85 e0       	ldi	r24, 0x05	; 5
    19fc:	f8 2e       	mov	r15, r24
    19fe:	d0 e0       	ldi	r29, 0x00	; 0
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    1a00:	cd 17       	cp	r28, r29
    1a02:	41 f0       	breq	.+16     	; 0x1a14 <nrk_start+0x72>
    1a04:	f7 01       	movw	r30, r14
    1a06:	80 81       	ld	r24, Z
    1a08:	d8 12       	cpse	r13, r24
    1a0a:	04 c0       	rjmp	.+8      	; 0x1a14 <nrk_start+0x72>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    1a0c:	6d 2d       	mov	r22, r13
    1a0e:	85 e0       	ldi	r24, 0x05	; 5
    1a10:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_kernel_error_add>
    {
	task_ID = nrk_task_TCB[i].task_ID;
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
    1a14:	df 5f       	subi	r29, 0xFF	; 255
    1a16:	fb e2       	ldi	r31, 0x2B	; 43
    1a18:	ef 0e       	add	r14, r31
    1a1a:	f1 1c       	adc	r15, r1
    1a1c:	d4 30       	cpi	r29, 0x04	; 4
    1a1e:	81 f7       	brne	.-32     	; 0x1a00 <nrk_start+0x5e>
    1a20:	c8 cf       	rjmp	.-112    	; 0x19b2 <nrk_start+0x10>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    1a22:	ff cf       	rjmp	.-2      	; 0x1a22 <nrk_start+0x80>

00001a24 <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    1a24:	cf 92       	push	r12
    1a26:	df 92       	push	r13
    1a28:	ef 92       	push	r14
    1a2a:	ff 92       	push	r15
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	ec 01       	movw	r28, r24
    1a36:	8b 01       	movw	r16, r22
    1a38:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    1a3a:	89 85       	ldd	r24, Y+9	; 0x09
    1a3c:	82 30       	cpi	r24, 0x02	; 2
    1a3e:	21 f0       	breq	.+8      	; 0x1a48 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    1a40:	80 91 df 05 	lds	r24, 0x05DF
    1a44:	88 83       	st	Y, r24
    1a46:	01 c0       	rjmp	.+2      	; 0x1a4a <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    1a48:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    1a4a:	80 91 df 05 	lds	r24, 0x05DF
    1a4e:	84 30       	cpi	r24, 0x04	; 4
    1a50:	20 f0       	brcs	.+8      	; 0x1a5a <nrk_TCB_init+0x36>
    1a52:	60 e0       	ldi	r22, 0x00	; 0
    1a54:	87 e0       	ldi	r24, 0x07	; 7
    1a56:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    1a5a:	89 85       	ldd	r24, Y+9	; 0x09
    1a5c:	82 30       	cpi	r24, 0x02	; 2
    1a5e:	29 f0       	breq	.+10     	; 0x1a6a <nrk_TCB_init+0x46>
    1a60:	80 91 df 05 	lds	r24, 0x05DF
    1a64:	8f 5f       	subi	r24, 0xFF	; 255
    1a66:	80 93 df 05 	sts	0x05DF, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    1a6a:	80 91 df 05 	lds	r24, 0x05DF
    1a6e:	81 11       	cpse	r24, r1
    1a70:	03 c0       	rjmp	.+6      	; 0x1a78 <nrk_TCB_init+0x54>
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	80 93 df 05 	sts	0x05DF, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    1a78:	38 81       	ld	r19, Y
    1a7a:	2b e2       	ldi	r18, 0x2B	; 43
    1a7c:	32 03       	mulsu	r19, r18
    1a7e:	f0 01       	movw	r30, r0
    1a80:	11 24       	eor	r1, r1
    1a82:	e2 5d       	subi	r30, 0xD2	; 210
    1a84:	fa 4f       	sbci	r31, 0xFA	; 250
    1a86:	11 83       	std	Z+1, r17	; 0x01
    1a88:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    1a8a:	88 85       	ldd	r24, Y+8	; 0x08
    1a8c:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    1a8e:	38 81       	ld	r19, Y
    1a90:	32 03       	mulsu	r19, r18
    1a92:	f0 01       	movw	r30, r0
    1a94:	11 24       	eor	r1, r1
    1a96:	e2 5d       	subi	r30, 0xD2	; 210
    1a98:	fa 4f       	sbci	r31, 0xFA	; 250
    1a9a:	83 e0       	ldi	r24, 0x03	; 3
    1a9c:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    1a9e:	38 81       	ld	r19, Y
    1aa0:	32 03       	mulsu	r19, r18
    1aa2:	f0 01       	movw	r30, r0
    1aa4:	11 24       	eor	r1, r1
    1aa6:	e2 5d       	subi	r30, 0xD2	; 210
    1aa8:	fa 4f       	sbci	r31, 0xFA	; 250
    1aaa:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    1aac:	08 81       	ld	r16, Y
    1aae:	02 03       	mulsu	r16, r18
    1ab0:	80 01       	movw	r16, r0
    1ab2:	11 24       	eor	r1, r1
    1ab4:	02 5d       	subi	r16, 0xD2	; 210
    1ab6:	1a 4f       	sbci	r17, 0xFA	; 250
    1ab8:	f8 01       	movw	r30, r16
    1aba:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    1abc:	ce 01       	movw	r24, r28
    1abe:	0b 96       	adiw	r24, 0x0b	; 11
    1ac0:	0e 94 04 19 	call	0x3208	; 0x3208 <_nrk_time_to_ticks_long>
    1ac4:	f8 01       	movw	r30, r16
    1ac6:	61 a3       	std	Z+33, r22	; 0x21
    1ac8:	72 a3       	std	Z+34, r23	; 0x22
    1aca:	83 a3       	std	Z+35, r24	; 0x23
    1acc:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    1ace:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ad0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ad2:	ad 85       	ldd	r26, Y+13	; 0x0d
    1ad4:	be 85       	ldd	r27, Y+14	; 0x0e
    1ad6:	88 33       	cpi	r24, 0x38	; 56
    1ad8:	99 48       	sbci	r25, 0x89	; 137
    1ada:	a1 44       	sbci	r26, 0x41	; 65
    1adc:	b1 05       	cpc	r27, r1
    1ade:	20 f0       	brcs	.+8      	; 0x1ae8 <nrk_TCB_init+0xc4>
    1ae0:	68 81       	ld	r22, Y
    1ae2:	86 e1       	ldi	r24, 0x16	; 22
    1ae4:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    1ae8:	c8 80       	ld	r12, Y
    1aea:	dd 24       	eor	r13, r13
    1aec:	c7 fc       	sbrc	r12, 7
    1aee:	d0 94       	com	r13
    1af0:	ce 01       	movw	r24, r28
    1af2:	4b 96       	adiw	r24, 0x1b	; 27
    1af4:	0e 94 04 19 	call	0x3208	; 0x3208 <_nrk_time_to_ticks_long>
    1af8:	1b e2       	ldi	r17, 0x2B	; 43
    1afa:	1c 9d       	mul	r17, r12
    1afc:	f0 01       	movw	r30, r0
    1afe:	1d 9d       	mul	r17, r13
    1b00:	f0 0d       	add	r31, r0
    1b02:	11 24       	eor	r1, r1
    1b04:	e2 5d       	subi	r30, 0xD2	; 210
    1b06:	fa 4f       	sbci	r31, 0xFA	; 250
    1b08:	65 8b       	std	Z+21, r22	; 0x15
    1b0a:	76 8b       	std	Z+22, r23	; 0x16
    1b0c:	87 8b       	std	Z+23, r24	; 0x17
    1b0e:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    1b10:	28 81       	ld	r18, Y
    1b12:	21 03       	mulsu	r18, r17
    1b14:	c0 01       	movw	r24, r0
    1b16:	11 24       	eor	r1, r1
    1b18:	9c 01       	movw	r18, r24
    1b1a:	22 5d       	subi	r18, 0xD2	; 210
    1b1c:	3a 4f       	sbci	r19, 0xFA	; 250
    1b1e:	69 01       	movw	r12, r18
    1b20:	f9 01       	movw	r30, r18
    1b22:	45 89       	ldd	r20, Z+21	; 0x15
    1b24:	56 89       	ldd	r21, Z+22	; 0x16
    1b26:	67 89       	ldd	r22, Z+23	; 0x17
    1b28:	70 8d       	ldd	r23, Z+24	; 0x18
    1b2a:	81 a1       	ldd	r24, Z+33	; 0x21
    1b2c:	92 a1       	ldd	r25, Z+34	; 0x22
    1b2e:	a3 a1       	ldd	r26, Z+35	; 0x23
    1b30:	b4 a1       	ldd	r27, Z+36	; 0x24
    1b32:	84 0f       	add	r24, r20
    1b34:	95 1f       	adc	r25, r21
    1b36:	a6 1f       	adc	r26, r22
    1b38:	b7 1f       	adc	r27, r23
    1b3a:	81 8f       	std	Z+25, r24	; 0x19
    1b3c:	92 8f       	std	Z+26, r25	; 0x1a
    1b3e:	a3 8f       	std	Z+27, r26	; 0x1b
    1b40:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    1b42:	ce 01       	movw	r24, r28
    1b44:	43 96       	adiw	r24, 0x13	; 19
    1b46:	0e 94 04 19 	call	0x3208	; 0x3208 <_nrk_time_to_ticks_long>
    1b4a:	f6 01       	movw	r30, r12
    1b4c:	65 a3       	std	Z+37, r22	; 0x25
    1b4e:	76 a3       	std	Z+38, r23	; 0x26
    1b50:	87 a3       	std	Z+39, r24	; 0x27
    1b52:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    1b54:	28 81       	ld	r18, Y
    1b56:	21 03       	mulsu	r18, r17
    1b58:	f0 01       	movw	r30, r0
    1b5a:	11 24       	eor	r1, r1
    1b5c:	e2 5d       	subi	r30, 0xD2	; 210
    1b5e:	fa 4f       	sbci	r31, 0xFA	; 250
    1b60:	85 a1       	ldd	r24, Z+37	; 0x25
    1b62:	96 a1       	ldd	r25, Z+38	; 0x26
    1b64:	a7 a1       	ldd	r26, Z+39	; 0x27
    1b66:	b0 a5       	ldd	r27, Z+40	; 0x28
    1b68:	85 8f       	std	Z+29, r24	; 0x1d
    1b6a:	96 8f       	std	Z+30, r25	; 0x1e
    1b6c:	a7 8f       	std	Z+31, r26	; 0x1f
    1b6e:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	92 a7       	std	Z+42, r25	; 0x2a
    1b76:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    1b78:	f3 82       	std	Z+3, r15	; 0x03
    1b7a:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    1b7c:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	1f 91       	pop	r17
    1b84:	0f 91       	pop	r16
    1b86:	ff 90       	pop	r15
    1b88:	ef 90       	pop	r14
    1b8a:	df 90       	pop	r13
    1b8c:	cf 90       	pop	r12
    1b8e:	08 95       	ret

00001b90 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    1b90:	0c 94 88 19 	jmp	0x3310	; 0x3310 <_nrk_scheduler>

00001b94 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    1b94:	85 e6       	ldi	r24, 0x65	; 101
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	08 95       	ret

00001b9a <_nrk_errno_set>:
    1b9a:	e0 91 f0 05 	lds	r30, 0x05F0
    1b9e:	f0 91 f1 05 	lds	r31, 0x05F1
    1ba2:	84 87       	std	Z+12, r24	; 0x0c
    1ba4:	08 95       	ret

00001ba6 <nrk_errno_get>:
    nrk_cur_task_TCB->errno = error_code;
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    1ba6:	e0 91 f0 05 	lds	r30, 0x05F0
    1baa:	f0 91 f1 05 	lds	r31, 0x05F1
}
    1bae:	84 85       	ldd	r24, Z+12	; 0x0c
    1bb0:	08 95       	ret

00001bb2 <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    1bb2:	fc 01       	movw	r30, r24
    if (error_num == 0)
    1bb4:	80 91 aa 04 	lds	r24, 0x04AA
    1bb8:	88 23       	and	r24, r24
    1bba:	31 f0       	breq	.+12     	; 0x1bc8 <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    1bbc:	db 01       	movw	r26, r22
    1bbe:	8c 93       	st	X, r24
    *task_id = error_task;
    1bc0:	80 91 71 04 	lds	r24, 0x0471
    1bc4:	80 83       	st	Z, r24
    return 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
}
    1bc8:	08 95       	ret

00001bca <nrk_error_print>:
uint8_t i,t;




    if (error_num == 0)
    1bca:	80 91 aa 04 	lds	r24, 0x04AA
    1bce:	88 23       	and	r24, r24
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <nrk_error_print+0xa>
    1bd2:	83 c0       	rjmp	.+262    	; 0x1cda <nrk_error_print+0x110>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    1bd4:	80 ee       	ldi	r24, 0xE0	; 224
    1bd6:	93 e0       	ldi	r25, 0x03	; 3
    1bd8:	0e 94 a4 07 	call	0xf48	; 0xf48 <nrk_kprintf>
        printf ("%d", error_task);
    1bdc:	80 91 71 04 	lds	r24, 0x0471
    1be0:	1f 92       	push	r1
    1be2:	8f 93       	push	r24
    1be4:	8f e1       	ldi	r24, 0x1F	; 31
    1be6:	93 e0       	ldi	r25, 0x03	; 3
    1be8:	9f 93       	push	r25
    1bea:	8f 93       	push	r24
    1bec:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <printf>
        nrk_kprintf (PSTR ("): "));
    1bf0:	8c ed       	ldi	r24, 0xDC	; 220
    1bf2:	93 e0       	ldi	r25, 0x03	; 3
    1bf4:	0e 94 a4 07 	call	0xf48	; 0xf48 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	80 91 aa 04 	lds	r24, 0x04AA
    1c04:	88 31       	cpi	r24, 0x18	; 24
    1c06:	10 f0       	brcs	.+4      	; 0x1c0c <nrk_error_print+0x42>
            error_num = NRK_UNKOWN;
    1c08:	10 92 aa 04 	sts	0x04AA, r1
        switch (error_num)
    1c0c:	e0 91 aa 04 	lds	r30, 0x04AA
    1c10:	8e 2f       	mov	r24, r30
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	fc 01       	movw	r30, r24
    1c16:	31 97       	sbiw	r30, 0x01	; 1
    1c18:	e6 31       	cpi	r30, 0x16	; 22
    1c1a:	f1 05       	cpc	r31, r1
    1c1c:	08 f0       	brcs	.+2      	; 0x1c20 <nrk_error_print+0x56>
    1c1e:	46 c0       	rjmp	.+140    	; 0x1cac <nrk_error_print+0xe2>
    1c20:	e6 54       	subi	r30, 0x46	; 70
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	0c 94 0e 23 	jmp	0x461c	; 0x461c <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    1c28:	80 ea       	ldi	r24, 0xA0	; 160
    1c2a:	93 e0       	ldi	r25, 0x03	; 3
    1c2c:	41 c0       	rjmp	.+130    	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    1c2e:	89 e7       	ldi	r24, 0x79	; 121
    1c30:	93 e0       	ldi	r25, 0x03	; 3
    1c32:	3e c0       	rjmp	.+124    	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    1c34:	85 e6       	ldi	r24, 0x65	; 101
    1c36:	93 e0       	ldi	r25, 0x03	; 3
    1c38:	3b c0       	rjmp	.+118    	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    1c3a:	8f e4       	ldi	r24, 0x4F	; 79
    1c3c:	93 e0       	ldi	r25, 0x03	; 3
    1c3e:	38 c0       	rjmp	.+112    	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    1c40:	84 e3       	ldi	r24, 0x34	; 52
    1c42:	93 e0       	ldi	r25, 0x03	; 3
    1c44:	35 c0       	rjmp	.+106    	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    1c46:	8e e1       	ldi	r24, 0x1E	; 30
    1c48:	93 e0       	ldi	r25, 0x03	; 3
    1c4a:	32 c0       	rjmp	.+100    	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    1c4c:	86 e0       	ldi	r24, 0x06	; 6
    1c4e:	93 e0       	ldi	r25, 0x03	; 3
    1c50:	2f c0       	rjmp	.+94     	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    1c52:	83 ef       	ldi	r24, 0xF3	; 243
    1c54:	92 e0       	ldi	r25, 0x02	; 2
    1c56:	2c c0       	rjmp	.+88     	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    1c58:	80 ee       	ldi	r24, 0xE0	; 224
    1c5a:	92 e0       	ldi	r25, 0x02	; 2
    1c5c:	29 c0       	rjmp	.+82     	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    1c5e:	82 ec       	ldi	r24, 0xC2	; 194
    1c60:	92 e0       	ldi	r25, 0x02	; 2
    1c62:	26 c0       	rjmp	.+76     	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    1c64:	8d e9       	ldi	r24, 0x9D	; 157
    1c66:	92 e0       	ldi	r25, 0x02	; 2
    1c68:	23 c0       	rjmp	.+70     	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    1c6a:	81 e9       	ldi	r24, 0x91	; 145
    1c6c:	92 e0       	ldi	r25, 0x02	; 2
    1c6e:	20 c0       	rjmp	.+64     	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    1c70:	86 e7       	ldi	r24, 0x76	; 118
    1c72:	92 e0       	ldi	r25, 0x02	; 2
    1c74:	1d c0       	rjmp	.+58     	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    1c76:	87 e6       	ldi	r24, 0x67	; 103
    1c78:	92 e0       	ldi	r25, 0x02	; 2
    1c7a:	1a c0       	rjmp	.+52     	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    1c7c:	83 e5       	ldi	r24, 0x53	; 83
    1c7e:	92 e0       	ldi	r25, 0x02	; 2
    1c80:	17 c0       	rjmp	.+46     	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    1c82:	82 e4       	ldi	r24, 0x42	; 66
    1c84:	92 e0       	ldi	r25, 0x02	; 2
    1c86:	14 c0       	rjmp	.+40     	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    1c88:	8e e2       	ldi	r24, 0x2E	; 46
    1c8a:	92 e0       	ldi	r25, 0x02	; 2
    1c8c:	11 c0       	rjmp	.+34     	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    1c8e:	8e e0       	ldi	r24, 0x0E	; 14
    1c90:	92 e0       	ldi	r25, 0x02	; 2
    1c92:	0e c0       	rjmp	.+28     	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    1c94:	86 ef       	ldi	r24, 0xF6	; 246
    1c96:	91 e0       	ldi	r25, 0x01	; 1
    1c98:	0b c0       	rjmp	.+22     	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    1c9a:	8b ed       	ldi	r24, 0xDB	; 219
    1c9c:	91 e0       	ldi	r25, 0x01	; 1
    1c9e:	08 c0       	rjmp	.+16     	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    1ca0:	8a ec       	ldi	r24, 0xCA	; 202
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	05 c0       	rjmp	.+10     	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    1ca6:	8b eb       	ldi	r24, 0xBB	; 187
    1ca8:	91 e0       	ldi	r25, 0x01	; 1
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <nrk_error_print+0xe6>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    1cac:	84 eb       	ldi	r24, 0xB4	; 180
    1cae:	91 e0       	ldi	r25, 0x01	; 1
    1cb0:	0e 94 a4 07 	call	0xf48	; 0xf48 <nrk_kprintf>
        }
        putchar ('\r');
    1cb4:	60 91 17 06 	lds	r22, 0x0617
    1cb8:	70 91 18 06 	lds	r23, 0x0618
    1cbc:	8d e0       	ldi	r24, 0x0D	; 13
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	0e 94 9a 23 	call	0x4734	; 0x4734 <fputc>
        putchar ('\n');
    1cc4:	60 91 17 06 	lds	r22, 0x0617
    1cc8:	70 91 18 06 	lds	r23, 0x0618
    1ccc:	8a e0       	ldi	r24, 0x0A	; 10
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	0e 94 9a 23 	call	0x4734	; 0x4734 <fputc>
}


#endif

    return error_num;
    1cd4:	80 91 aa 04 	lds	r24, 0x04AA
    1cd8:	08 95       	ret




    if (error_num == 0)
        return 0;
    1cda:	80 e0       	ldi	r24, 0x00	; 0


#endif

    return error_num;
}
    1cdc:	08 95       	ret

00001cde <clear_regs>:

inline void clear_regs()
{

        GTCCR=0;
    1cde:	13 bc       	out	0x23, r1	; 35
        ASSR=0;
    1ce0:	10 92 b6 00 	sts	0x00B6, r1

        OCR0B=0;
    1ce4:	18 bc       	out	0x28, r1	; 40
        OCR0A=0;
    1ce6:	17 bc       	out	0x27, r1	; 39
        TCNT0=0;
    1ce8:	16 bc       	out	0x26, r1	; 38
        TCCR0B=0;
    1cea:	15 bc       	out	0x25, r1	; 37
        TCCR0A=0;
    1cec:	14 bc       	out	0x24, r1	; 36

        EIMSK=0;
    1cee:	1d ba       	out	0x1d, r1	; 29
        EIFR=0;
    1cf0:	1c ba       	out	0x1c, r1	; 28
        PCIFR=0;
    1cf2:	1b ba       	out	0x1b, r1	; 27


        OCR3B =0;
    1cf4:	10 92 9b 00 	sts	0x009B, r1
    1cf8:	10 92 9a 00 	sts	0x009A, r1
        OCR3A =0;
    1cfc:	10 92 99 00 	sts	0x0099, r1
    1d00:	10 92 98 00 	sts	0x0098, r1
        TCNT3 =0;
    1d04:	10 92 95 00 	sts	0x0095, r1
    1d08:	10 92 94 00 	sts	0x0094, r1
        TCCR3B=0;
    1d0c:	10 92 91 00 	sts	0x0091, r1
        TCCR3A=0;
    1d10:	10 92 90 00 	sts	0x0090, r1
        TIFR3=0;
    1d14:	18 ba       	out	0x18, r1	; 24
        TIMSK3=0;
    1d16:	10 92 71 00 	sts	0x0071, r1


        OCR2B =0;
    1d1a:	10 92 b4 00 	sts	0x00B4, r1
        OCR2A =0;
    1d1e:	10 92 b3 00 	sts	0x00B3, r1
        TCNT2 =0;
    1d22:	10 92 b2 00 	sts	0x00B2, r1
        TCCR2B=0;
    1d26:	10 92 b1 00 	sts	0x00B1, r1
        TCCR2A=0;
    1d2a:	e0 eb       	ldi	r30, 0xB0	; 176
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	10 82       	st	Z, r1
        TCCR2A=0;
    1d30:	10 82       	st	Z, r1
        TIFR2=0;
    1d32:	17 ba       	out	0x17, r1	; 23
        TIMSK2=0;
    1d34:	10 92 70 00 	sts	0x0070, r1


	// set all bits to 1 in order to clear
	MCUSR=0xff;
    1d38:	8f ef       	ldi	r24, 0xFF	; 255
    1d3a:	84 bf       	out	0x34, r24	; 52
    1d3c:	08 95       	ret

00001d3e <pause>:
    }

}

void pause()
{
    1d3e:	cf 93       	push	r28
    1d40:	df 93       	push	r29
    1d42:	1f 92       	push	r1
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1d48:	19 82       	std	Y+1, r1	; 0x01
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	84 36       	cpi	r24, 0x64	; 100
    1d4e:	40 f4       	brcc	.+16     	; 0x1d60 <pause+0x22>
        nrk_spin_wait_us (2000);
    1d50:	80 ed       	ldi	r24, 0xD0	; 208
    1d52:	97 e0       	ldi	r25, 0x07	; 7
    1d54:	0e 94 2d 1c 	call	0x385a	; 0x385a <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	8f 5f       	subi	r24, 0xFF	; 255
    1d5c:	89 83       	std	Y+1, r24	; 0x01
    1d5e:	f5 cf       	rjmp	.-22     	; 0x1d4a <pause+0xc>
        nrk_spin_wait_us (2000);
}
    1d60:	0f 90       	pop	r0
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	08 95       	ret

00001d68 <blink_dash>:

}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <nrk_led_set>
    pause();
    1d70:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <pause>
    pause();
    1d74:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <pause>
    pause();
    1d78:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <pause>
    nrk_led_clr(GREEN_LED);
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	0e 94 de 0a 	call	0x15bc	; 0x15bc <nrk_led_clr>
    pause();
    1d84:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <pause>

00001d88 <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <nrk_led_set>
    pause();
    1d90:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <pause>
    nrk_led_clr(GREEN_LED);
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	0e 94 de 0a 	call	0x15bc	; 0x15bc <nrk_led_clr>
    pause();
    1d9c:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <pause>

00001da0 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    1da0:	ff 92       	push	r15
    1da2:	0f 93       	push	r16
    1da4:	1f 93       	push	r17
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <blink_morse_code_error+0xc>
    1dac:	1f 92       	push	r1
    1dae:	cd b7       	in	r28, 0x3d	; 61
    1db0:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    1db2:	1f 92       	push	r1
    1db4:	8f 93       	push	r24
    1db6:	8f e1       	ldi	r24, 0x1F	; 31
    1db8:	93 e0       	ldi	r25, 0x03	; 3
    1dba:	9f 93       	push	r25
    1dbc:	8f 93       	push	r24
    1dbe:	8e 01       	movw	r16, r28
    1dc0:	0f 5f       	subi	r16, 0xFF	; 255
    1dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc4:	1f 93       	push	r17
    1dc6:	0f 93       	push	r16
    1dc8:	0e 94 1c 24 	call	0x4838	; 0x4838 <sprintf>

    for(i=0; i<strlen(str); i++ )
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	f1 2c       	mov	r15, r1
    1dda:	f8 01       	movw	r30, r16
    1ddc:	01 90       	ld	r0, Z+
    1dde:	00 20       	and	r0, r0
    1de0:	e9 f7       	brne	.-6      	; 0x1ddc <blink_morse_code_error+0x3c>
    1de2:	31 97       	sbiw	r30, 0x01	; 1
    1de4:	e0 1b       	sub	r30, r16
    1de6:	f1 0b       	sbc	r31, r17
    1de8:	8f 2d       	mov	r24, r15
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	8e 17       	cp	r24, r30
    1dee:	9f 07       	cpc	r25, r31
    1df0:	08 f0       	brcs	.+2      	; 0x1df4 <blink_morse_code_error+0x54>
    1df2:	5d c0       	rjmp	.+186    	; 0x1eae <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    1df4:	f8 01       	movw	r30, r16
    1df6:	e8 0f       	add	r30, r24
    1df8:	f9 1f       	adc	r31, r25
    1dfa:	e0 81       	ld	r30, Z
    1dfc:	8e 2f       	mov	r24, r30
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	fc 01       	movw	r30, r24
    1e02:	f0 97       	sbiw	r30, 0x30	; 48
    1e04:	ea 30       	cpi	r30, 0x0A	; 10
    1e06:	f1 05       	cpc	r31, r1
    1e08:	08 f0       	brcs	.+2      	; 0x1e0c <blink_morse_code_error+0x6c>
    1e0a:	49 c0       	rjmp	.+146    	; 0x1e9e <blink_morse_code_error+0xfe>
    1e0c:	e0 53       	subi	r30, 0x30	; 48
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	0c 94 0e 23 	jmp	0x461c	; 0x461c <__tablejump2__>
        {
        case '0':
            blink_dash();
    1e14:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <blink_dash>
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    1e1a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <blink_dot>
            blink_dash();
    1e1e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <blink_dash>
            blink_dash();
    1e22:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <blink_dash>
            blink_dash();
    1e26:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <blink_dash>
            blink_dash();
    1e2a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <blink_dash>
            break;
    1e2e:	37 c0       	rjmp	.+110    	; 0x1e9e <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    1e30:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <blink_dot>
            blink_dot();
    1e34:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <blink_dot>
    1e38:	f4 cf       	rjmp	.-24     	; 0x1e22 <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    1e3a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <blink_dot>
            blink_dot();
    1e3e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <blink_dot>
            blink_dot();
    1e42:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <blink_dot>
    1e46:	ef cf       	rjmp	.-34     	; 0x1e26 <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    1e48:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <blink_dot>
            blink_dot();
    1e4c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <blink_dot>
            blink_dot();
    1e50:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <blink_dot>
            blink_dot();
    1e54:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <blink_dot>
    1e58:	e8 cf       	rjmp	.-48     	; 0x1e2a <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    1e5a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <blink_dot>
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    1e60:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <blink_dash>
            blink_dot();
    1e64:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <blink_dot>
    1e68:	04 c0       	rjmp	.+8      	; 0x1e72 <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    1e6a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <blink_dash>
            blink_dash();
    1e6e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <blink_dash>
            blink_dot();
    1e72:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <blink_dot>
    1e76:	06 c0       	rjmp	.+12     	; 0x1e84 <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    1e78:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <blink_dash>
            blink_dash();
    1e7c:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <blink_dash>
            blink_dash();
    1e80:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <blink_dash>
            blink_dot();
    1e84:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <blink_dot>
    1e88:	08 c0       	rjmp	.+16     	; 0x1e9a <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    1e8a:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <blink_dash>
            blink_dash();
    1e8e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <blink_dash>
            blink_dash();
    1e92:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <blink_dash>
            blink_dash();
    1e96:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <blink_dash>
            blink_dot();
    1e9a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <blink_dot>
            break;
        }
        pause();
    1e9e:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <pause>
        pause();
    1ea2:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <pause>
        pause();
    1ea6:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    1eaa:	f3 94       	inc	r15
    1eac:	96 cf       	rjmp	.-212    	; 0x1dda <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	ff 90       	pop	r15
    1ebe:	08 95       	ret

00001ec0 <nrk_error_handle>:
    int8_t i=0,t=0;



#ifdef NRK_HALT_ON_ERROR
        nrk_int_disable ();
    1ec0:	0e 94 12 0c 	call	0x1824	; 0x1824 <nrk_int_disable>
#endif



#ifdef NRK_HALT_ON_ERROR
    nrk_watchdog_disable();
    1ec4:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <nrk_watchdog_disable>
    nrk_int_disable ();
    1ec8:	0e 94 12 0c 	call	0x1824	; 0x1824 <nrk_int_disable>
    nrk_kprintf( PSTR("NRK Halt...\r\n" ));
    1ecc:	8c ee       	ldi	r24, 0xEC	; 236
    1ece:	93 e0       	ldi	r25, 0x03	; 3
    1ed0:	0e 94 a4 07 	call	0xf48	; 0xf48 <nrk_kprintf>
    return 1;
}


inline void nrk_error_handle()
{
    1ed4:	c4 e1       	ldi	r28, 0x14	; 20

    while (1)
    {
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
    1ed6:	82 e0       	ldi	r24, 0x02	; 2
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <nrk_led_set>
            nrk_led_clr (3);
    1ede:	83 e0       	ldi	r24, 0x03	; 3
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	0e 94 de 0a 	call	0x15bc	; 0x15bc <nrk_led_clr>
    1ee6:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    1ee8:	88 ee       	ldi	r24, 0xE8	; 232
    1eea:	93 e0       	ldi	r25, 0x03	; 3
    1eec:	0e 94 2d 1c 	call	0x385a	; 0x385a <nrk_spin_wait_us>
    1ef0:	d1 50       	subi	r29, 0x01	; 1
    {
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    1ef2:	d1 f7       	brne	.-12     	; 0x1ee8 <nrk_error_handle+0x28>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    1ef4:	83 e0       	ldi	r24, 0x03	; 3
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <nrk_led_set>
            nrk_led_clr (2);
    1efc:	82 e0       	ldi	r24, 0x02	; 2
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	0e 94 de 0a 	call	0x15bc	; 0x15bc <nrk_led_clr>
    1f04:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    1f06:	88 ee       	ldi	r24, 0xE8	; 232
    1f08:	93 e0       	ldi	r25, 0x03	; 3
    1f0a:	0e 94 2d 1c 	call	0x385a	; 0x385a <nrk_spin_wait_us>
    1f0e:	d1 50       	subi	r29, 0x01	; 1
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    1f10:	d1 f7       	brne	.-12     	; 0x1f06 <nrk_error_handle+0x46>
    1f12:	c1 50       	subi	r28, 0x01	; 1
    nrk_int_disable ();
    nrk_kprintf( PSTR("NRK Halt...\r\n" ));

    while (1)
    {
        for(i=0; i<20; i++ )
    1f14:	01 f7       	brne	.-64     	; 0x1ed6 <nrk_error_handle+0x16>
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }
        nrk_led_clr (3);
    1f16:	83 e0       	ldi	r24, 0x03	; 3
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <nrk_led_clr>
        nrk_led_clr (2);
    1f1e:	82 e0       	ldi	r24, 0x02	; 2
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	0e 94 de 0a 	call	0x15bc	; 0x15bc <nrk_led_clr>
        blink_morse_code_error( error_task );
    1f26:	80 91 71 04 	lds	r24, 0x0471
    1f2a:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <blink_morse_code_error>
        pause();
    1f2e:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <pause>
        nrk_led_set(2);
    1f32:	82 e0       	ldi	r24, 0x02	; 2
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <nrk_led_set>
        pause();
    1f3a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <pause>
        nrk_led_clr(2);
    1f3e:	82 e0       	ldi	r24, 0x02	; 2
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	0e 94 de 0a 	call	0x15bc	; 0x15bc <nrk_led_clr>
        pause();
    1f46:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <pause>
        blink_morse_code_error( error_num);
    1f4a:	80 91 aa 04 	lds	r24, 0x04AA
    1f4e:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <blink_morse_code_error>
    }
    1f52:	c0 cf       	rjmp	.-128    	; 0x1ed4 <nrk_error_handle+0x14>

00001f54 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    1f54:	80 93 aa 04 	sts	0x04AA, r24
    error_task = nrk_cur_task_TCB->task_ID;
    1f58:	e0 91 f0 05 	lds	r30, 0x05F0
    1f5c:	f0 91 f1 05 	lds	r31, 0x05F1
    1f60:	80 85       	ldd	r24, Z+8	; 0x08
    1f62:	80 93 71 04 	sts	0x0471, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    1f66:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <nrk_error_print>
#endif 

nrk_error_handle();
    1f6a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <nrk_error_handle>

00001f6e <nrk_kernel_error_add>:

}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    1f6e:	80 93 aa 04 	sts	0x04AA, r24
    error_task = task;
    1f72:	60 93 71 04 	sts	0x0471, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    1f76:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <nrk_error_print>
#endif 

nrk_error_handle();
    1f7a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <nrk_error_handle>

00001f7e <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    1f7e:	6f 92       	push	r6
    1f80:	7f 92       	push	r7
    1f82:	8f 92       	push	r8
    1f84:	9f 92       	push	r9
    1f86:	af 92       	push	r10
    1f88:	bf 92       	push	r11
    1f8a:	cf 92       	push	r12
    1f8c:	df 92       	push	r13
    1f8e:	ef 92       	push	r14
    1f90:	ff 92       	push	r15
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    1f9a:	8a ef       	ldi	r24, 0xFA	; 250
    1f9c:	93 e0       	ldi	r25, 0x03	; 3
    1f9e:	0e 94 a4 07 	call	0xf48	; 0xf48 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    1fa2:	e0 91 f0 05 	lds	r30, 0x05F0
    1fa6:	f0 91 f1 05 	lds	r31, 0x05F1
    1faa:	80 85       	ldd	r24, Z+8	; 0x08
    1fac:	28 2f       	mov	r18, r24
    1fae:	33 27       	eor	r19, r19
    1fb0:	27 fd       	sbrc	r18, 7
    1fb2:	30 95       	com	r19
    1fb4:	3f 93       	push	r19
    1fb6:	8f 93       	push	r24
    1fb8:	82 e2       	ldi	r24, 0x22	; 34
    1fba:	93 e0       	ldi	r25, 0x03	; 3
    1fbc:	9f 93       	push	r25
    1fbe:	8f 93       	push	r24
    1fc0:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    1fc4:	e0 91 f0 05 	lds	r30, 0x05F0
    1fc8:	f0 91 f1 05 	lds	r31, 0x05F1
    1fcc:	c2 81       	ldd	r28, Z+2	; 0x02
    1fce:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	86 e5       	ldi	r24, 0x56	; 86
    1fd6:	93 e0       	ldi	r25, 0x03	; 3
    1fd8:	9f 93       	push	r25
    1fda:	8f 93       	push	r24
    1fdc:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <printf>
    printf( "canary = %x ",*stkc );
    1fe0:	88 81       	ld	r24, Y
    1fe2:	1f 92       	push	r1
    1fe4:	8f 93       	push	r24
    1fe6:	8b e2       	ldi	r24, 0x2B	; 43
    1fe8:	93 e0       	ldi	r25, 0x03	; 3
    1fea:	9f 93       	push	r25
    1fec:	8f 93       	push	r24
    1fee:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    1ff2:	e0 91 f0 05 	lds	r30, 0x05F0
    1ff6:	f0 91 f1 05 	lds	r31, 0x05F1
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    1ffa:	81 81       	ldd	r24, Z+1	; 0x01
    1ffc:	8f 93       	push	r24
    1ffe:	80 81       	ld	r24, Z
    2000:	8f 93       	push	r24
    2002:	88 e3       	ldi	r24, 0x38	; 56
    2004:	93 e0       	ldi	r25, 0x03	; 3
    2006:	9f 93       	push	r25
    2008:	8f 93       	push	r24
    200a:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    200e:	80 91 f1 05 	lds	r24, 0x05F1
    2012:	8f 93       	push	r24
    2014:	80 91 f0 05 	lds	r24, 0x05F0
    2018:	8f 93       	push	r24
    201a:	82 e4       	ldi	r24, 0x42	; 66
    201c:	93 e0       	ldi	r25, 0x03	; 3
    201e:	9f 93       	push	r25
    2020:	8f 93       	push	r24
    2022:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <printf>
    2026:	ce e2       	ldi	r28, 0x2E	; 46
    2028:	d5 e0       	ldi	r29, 0x05	; 5
    202a:	ed b7       	in	r30, 0x3d	; 61
    202c:	fe b7       	in	r31, 0x3e	; 62
    202e:	74 96       	adiw	r30, 0x14	; 20
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	fe bf       	out	0x3e, r31	; 62
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	ed bf       	out	0x3d, r30	; 61
    203a:	00 e0       	ldi	r16, 0x00	; 0
    203c:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    203e:	82 e5       	ldi	r24, 0x52	; 82
    2040:	68 2e       	mov	r6, r24
    2042:	83 e0       	ldi	r24, 0x03	; 3
    2044:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    2046:	9b e2       	ldi	r25, 0x2B	; 43
    2048:	89 2e       	mov	r8, r25
    204a:	93 e0       	ldi	r25, 0x03	; 3
    204c:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    204e:	28 e3       	ldi	r18, 0x38	; 56
    2050:	a2 2e       	mov	r10, r18
    2052:	23 e0       	ldi	r18, 0x03	; 3
    2054:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2056:	32 e4       	ldi	r19, 0x42	; 66
    2058:	c3 2e       	mov	r12, r19
    205a:	33 e0       	ldi	r19, 0x03	; 3
    205c:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    205e:	ea 80       	ldd	r14, Y+2	; 0x02
    2060:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2062:	ff 92       	push	r15
    2064:	ef 92       	push	r14
    2066:	1f 93       	push	r17
    2068:	0f 93       	push	r16
    206a:	7f 92       	push	r7
    206c:	6f 92       	push	r6
    206e:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <printf>
        printf( "canary = %x ",*stkc );
    2072:	f7 01       	movw	r30, r14
    2074:	80 81       	ld	r24, Z
    2076:	1f 92       	push	r1
    2078:	8f 93       	push	r24
    207a:	9f 92       	push	r9
    207c:	8f 92       	push	r8
    207e:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	8f 93       	push	r24
    2086:	88 81       	ld	r24, Y
    2088:	8f 93       	push	r24
    208a:	bf 92       	push	r11
    208c:	af 92       	push	r10
    208e:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	df 92       	push	r13
    2098:	cf 92       	push	r12
    209a:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <printf>
    209e:	0f 5f       	subi	r16, 0xFF	; 255
    20a0:	1f 4f       	sbci	r17, 0xFF	; 255
    20a2:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    20a4:	ed b7       	in	r30, 0x3d	; 61
    20a6:	fe b7       	in	r31, 0x3e	; 62
    20a8:	72 96       	adiw	r30, 0x12	; 18
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	fe bf       	out	0x3e, r31	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	ed bf       	out	0x3d, r30	; 61
    20b4:	04 30       	cpi	r16, 0x04	; 4
    20b6:	11 05       	cpc	r17, r1
    20b8:	91 f6       	brne	.-92     	; 0x205e <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    20ba:	df 91       	pop	r29
    20bc:	cf 91       	pop	r28
    20be:	1f 91       	pop	r17
    20c0:	0f 91       	pop	r16
    20c2:	ff 90       	pop	r15
    20c4:	ef 90       	pop	r14
    20c6:	df 90       	pop	r13
    20c8:	cf 90       	pop	r12
    20ca:	bf 90       	pop	r11
    20cc:	af 90       	pop	r10
    20ce:	9f 90       	pop	r9
    20d0:	8f 90       	pop	r8
    20d2:	7f 90       	pop	r7
    20d4:	6f 90       	pop	r6
    20d6:	08 95       	ret

000020d8 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    20dc:	e0 91 f0 05 	lds	r30, 0x05F0
    20e0:	f0 91 f1 05 	lds	r31, 0x05F1
    20e4:	c2 81       	ldd	r28, Z+2	; 0x02
    20e6:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    20e8:	88 81       	ld	r24, Y
    20ea:	85 35       	cpi	r24, 0x55	; 85
    20ec:	39 f0       	breq	.+14     	; 0x20fc <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    20ee:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    20f8:	85 e5       	ldi	r24, 0x55	; 85
    20fa:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    20fc:	e0 91 f0 05 	lds	r30, 0x05F0
    2100:	f0 91 f1 05 	lds	r31, 0x05F1
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2104:	80 81       	ld	r24, Z
    2106:	91 81       	ldd	r25, Z+1	; 0x01
    2108:	81 15       	cp	r24, r1
    210a:	92 44       	sbci	r25, 0x42	; 66
    210c:	38 f0       	brcs	.+14     	; 0x211c <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    210e:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2112:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2118:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <nrk_error_add>




#endif
}
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	08 95       	ret

00002122 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    2122:	2b e2       	ldi	r18, 0x2B	; 43
    2124:	82 02       	muls	r24, r18
    2126:	c0 01       	movw	r24, r0
    2128:	11 24       	eor	r1, r1
    212a:	fc 01       	movw	r30, r24
    212c:	e2 5d       	subi	r30, 0xD2	; 210
    212e:	fa 4f       	sbci	r31, 0xFA	; 250
    2130:	a2 81       	ldd	r26, Z+2	; 0x02
    2132:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2134:	8c 91       	ld	r24, X
    2136:	85 35       	cpi	r24, 0x55	; 85
    2138:	19 f0       	breq	.+6      	; 0x2140 <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    213a:	85 e5       	ldi	r24, 0x55	; 85
    213c:	8c 93       	st	X, r24
    213e:	08 c0       	rjmp	.+16     	; 0x2150 <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2140:	80 81       	ld	r24, Z
    2142:	91 81       	ldd	r25, Z+1	; 0x01
    2144:	81 15       	cp	r24, r1
    2146:	92 44       	sbci	r25, 0x42	; 66
    2148:	28 f0       	brcs	.+10     	; 0x2154 <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    214a:	82 e1       	ldi	r24, 0x12	; 18
    214c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <nrk_error_add>
        return NRK_ERROR;
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	08 95       	ret
    }
#endif
    return NRK_OK;
    2154:	81 e0       	ldi	r24, 0x01	; 1
}
    2156:	08 95       	ret

00002158 <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    2158:	0f 93       	push	r16
    215a:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    215c:	40 91 75 03 	lds	r20, 0x0375
    2160:	50 91 76 03 	lds	r21, 0x0376
    2164:	60 91 77 03 	lds	r22, 0x0377
    2168:	70 91 78 03 	lds	r23, 0x0378
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	8a 01       	movw	r16, r20
    2172:	9b 01       	movw	r18, r22
    2174:	08 2e       	mov	r0, r24
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <nrk_signal_create+0x28>
    2178:	36 95       	lsr	r19
    217a:	27 95       	ror	r18
    217c:	17 95       	ror	r17
    217e:	07 95       	ror	r16
    2180:	0a 94       	dec	r0
    2182:	d2 f7       	brpl	.-12     	; 0x2178 <nrk_signal_create+0x20>
    2184:	00 fd       	sbrc	r16, 0
    2186:	19 c0       	rjmp	.+50     	; 0x21ba <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    2188:	01 e0       	ldi	r16, 0x01	; 1
    218a:	10 e0       	ldi	r17, 0x00	; 0
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	08 2e       	mov	r0, r24
    2192:	04 c0       	rjmp	.+8      	; 0x219c <nrk_signal_create+0x44>
    2194:	00 0f       	add	r16, r16
    2196:	11 1f       	adc	r17, r17
    2198:	22 1f       	adc	r18, r18
    219a:	33 1f       	adc	r19, r19
    219c:	0a 94       	dec	r0
    219e:	d2 f7       	brpl	.-12     	; 0x2194 <nrk_signal_create+0x3c>
    21a0:	40 2b       	or	r20, r16
    21a2:	51 2b       	or	r21, r17
    21a4:	62 2b       	or	r22, r18
    21a6:	73 2b       	or	r23, r19
    21a8:	40 93 75 03 	sts	0x0375, r20
    21ac:	50 93 76 03 	sts	0x0376, r21
    21b0:	60 93 77 03 	sts	0x0377, r22
    21b4:	70 93 78 03 	sts	0x0378, r23
			return i;
    21b8:	05 c0       	rjmp	.+10     	; 0x21c4 <nrk_signal_create+0x6c>
    21ba:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    21bc:	80 32       	cpi	r24, 0x20	; 32
    21be:	91 05       	cpc	r25, r1
    21c0:	b9 f6       	brne	.-82     	; 0x2170 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    21c2:	8f ef       	ldi	r24, 0xFF	; 255


}
    21c4:	1f 91       	pop	r17
    21c6:	0f 91       	pop	r16
    21c8:	08 95       	ret

000021ca <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    21ca:	e0 91 f0 05 	lds	r30, 0x05F0
    21ce:	f0 91 f1 05 	lds	r31, 0x05F1
    21d2:	65 85       	ldd	r22, Z+13	; 0x0d
    21d4:	76 85       	ldd	r23, Z+14	; 0x0e
    21d6:	87 85       	ldd	r24, Z+15	; 0x0f
    21d8:	90 89       	ldd	r25, Z+16	; 0x10
}
    21da:	08 95       	ret

000021dc <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    21dc:	cf 92       	push	r12
    21de:	df 92       	push	r13
    21e0:	ef 92       	push	r14
    21e2:	ff 92       	push	r15
    21e4:	0f 93       	push	r16
    21e6:	1f 93       	push	r17
    21e8:	cf 93       	push	r28
    21ea:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    21ec:	c1 2c       	mov	r12, r1
    21ee:	d1 2c       	mov	r13, r1
    21f0:	76 01       	movw	r14, r12
    21f2:	c3 94       	inc	r12
    21f4:	08 2e       	mov	r0, r24
    21f6:	04 c0       	rjmp	.+8      	; 0x2200 <nrk_signal_delete+0x24>
    21f8:	cc 0c       	add	r12, r12
    21fa:	dd 1c       	adc	r13, r13
    21fc:	ee 1c       	adc	r14, r14
    21fe:	ff 1c       	adc	r15, r15
    2200:	0a 94       	dec	r0
    2202:	d2 f7       	brpl	.-12     	; 0x21f8 <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2204:	40 91 75 03 	lds	r20, 0x0375
    2208:	50 91 76 03 	lds	r21, 0x0376
    220c:	60 91 77 03 	lds	r22, 0x0377
    2210:	70 91 78 03 	lds	r23, 0x0378
    2214:	4c 21       	and	r20, r12
    2216:	5d 21       	and	r21, r13
    2218:	6e 21       	and	r22, r14
    221a:	7f 21       	and	r23, r15
    221c:	45 2b       	or	r20, r21
    221e:	46 2b       	or	r20, r22
    2220:	47 2b       	or	r20, r23
    2222:	09 f4       	brne	.+2      	; 0x2226 <nrk_signal_delete+0x4a>
    2224:	60 c0       	rjmp	.+192    	; 0x22e6 <nrk_signal_delete+0x10a>
    2226:	08 2f       	mov	r16, r24

	nrk_int_disable();
    2228:	0e 94 12 0c 	call	0x1824	; 0x1824 <nrk_int_disable>
    222c:	e7 e3       	ldi	r30, 0x37	; 55
    222e:	f5 e0       	ldi	r31, 0x05	; 5
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2230:	b7 01       	movw	r22, r14
    2232:	a6 01       	movw	r20, r12
    2234:	40 95       	com	r20
    2236:	50 95       	com	r21
    2238:	60 95       	com	r22
    223a:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    223c:	13 e0       	ldi	r17, 0x03	; 3
    223e:	df 01       	movw	r26, r30
    2240:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    2242:	8c 91       	ld	r24, X
    2244:	8f 3f       	cpi	r24, 0xFF	; 255
    2246:	39 f1       	breq	.+78     	; 0x2296 <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    2248:	84 81       	ldd	r24, Z+4	; 0x04
    224a:	95 81       	ldd	r25, Z+5	; 0x05
    224c:	a6 81       	ldd	r26, Z+6	; 0x06
    224e:	b7 81       	ldd	r27, Z+7	; 0x07
    2250:	8c 15       	cp	r24, r12
    2252:	9d 05       	cpc	r25, r13
    2254:	ae 05       	cpc	r26, r14
    2256:	bf 05       	cpc	r27, r15
    2258:	51 f4       	brne	.+20     	; 0x226e <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    225a:	10 86       	std	Z+8, r1	; 0x08
    225c:	11 86       	std	Z+9, r1	; 0x09
    225e:	12 86       	std	Z+10, r1	; 0x0a
    2260:	13 86       	std	Z+11, r1	; 0x0b
    2262:	9f 01       	movw	r18, r30
    2264:	22 50       	subi	r18, 0x02	; 2
    2266:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    2268:	e9 01       	movw	r28, r18
    226a:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    226c:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    226e:	84 23       	and	r24, r20
    2270:	95 23       	and	r25, r21
    2272:	a6 23       	and	r26, r22
    2274:	b7 23       	and	r27, r23
    2276:	84 83       	std	Z+4, r24	; 0x04
    2278:	95 83       	std	Z+5, r25	; 0x05
    227a:	a6 83       	std	Z+6, r26	; 0x06
    227c:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    227e:	80 85       	ldd	r24, Z+8	; 0x08
    2280:	91 85       	ldd	r25, Z+9	; 0x09
    2282:	a2 85       	ldd	r26, Z+10	; 0x0a
    2284:	b3 85       	ldd	r27, Z+11	; 0x0b
    2286:	84 23       	and	r24, r20
    2288:	95 23       	and	r25, r21
    228a:	a6 23       	and	r26, r22
    228c:	b7 23       	and	r27, r23
    228e:	80 87       	std	Z+8, r24	; 0x08
    2290:	91 87       	std	Z+9, r25	; 0x09
    2292:	a2 87       	std	Z+10, r26	; 0x0a
    2294:	b3 87       	std	Z+11, r27	; 0x0b
    2296:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2298:	d5 e0       	ldi	r29, 0x05	; 5
    229a:	e3 3e       	cpi	r30, 0xE3	; 227
    229c:	fd 07       	cpc	r31, r29
    229e:	79 f6       	brne	.-98     	; 0x223e <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    22a0:	8e ef       	ldi	r24, 0xFE	; 254
    22a2:	9f ef       	ldi	r25, 0xFF	; 255
    22a4:	af ef       	ldi	r26, 0xFF	; 255
    22a6:	bf ef       	ldi	r27, 0xFF	; 255
    22a8:	04 c0       	rjmp	.+8      	; 0x22b2 <nrk_signal_delete+0xd6>
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	aa 1f       	adc	r26, r26
    22b0:	bb 1f       	adc	r27, r27
    22b2:	0a 95       	dec	r16
    22b4:	d2 f7       	brpl	.-12     	; 0x22aa <nrk_signal_delete+0xce>
    22b6:	40 91 75 03 	lds	r20, 0x0375
    22ba:	50 91 76 03 	lds	r21, 0x0376
    22be:	60 91 77 03 	lds	r22, 0x0377
    22c2:	70 91 78 03 	lds	r23, 0x0378
    22c6:	84 23       	and	r24, r20
    22c8:	95 23       	and	r25, r21
    22ca:	a6 23       	and	r26, r22
    22cc:	b7 23       	and	r27, r23
    22ce:	80 93 75 03 	sts	0x0375, r24
    22d2:	90 93 76 03 	sts	0x0376, r25
    22d6:	a0 93 77 03 	sts	0x0377, r26
    22da:	b0 93 78 03 	sts	0x0378, r27
	nrk_int_enable();
    22de:	0e 94 14 0c 	call	0x1828	; 0x1828 <nrk_int_enable>

	return NRK_OK;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	01 c0       	rjmp	.+2      	; 0x22e8 <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    22e6:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	1f 91       	pop	r17
    22ee:	0f 91       	pop	r16
    22f0:	ff 90       	pop	r15
    22f2:	ef 90       	pop	r14
    22f4:	df 90       	pop	r13
    22f6:	cf 90       	pop	r12
    22f8:	08 95       	ret

000022fa <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    22fa:	0f 93       	push	r16
    22fc:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    22fe:	41 e0       	ldi	r20, 0x01	; 1
    2300:	50 e0       	ldi	r21, 0x00	; 0
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	70 e0       	ldi	r23, 0x00	; 0
    2306:	8a 01       	movw	r16, r20
    2308:	9b 01       	movw	r18, r22
    230a:	04 c0       	rjmp	.+8      	; 0x2314 <nrk_signal_unregister+0x1a>
    230c:	00 0f       	add	r16, r16
    230e:	11 1f       	adc	r17, r17
    2310:	22 1f       	adc	r18, r18
    2312:	33 1f       	adc	r19, r19
    2314:	8a 95       	dec	r24
    2316:	d2 f7       	brpl	.-12     	; 0x230c <nrk_signal_unregister+0x12>
    2318:	d9 01       	movw	r26, r18
    231a:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    231c:	e0 91 f0 05 	lds	r30, 0x05F0
    2320:	f0 91 f1 05 	lds	r31, 0x05F1
    2324:	45 85       	ldd	r20, Z+13	; 0x0d
    2326:	56 85       	ldd	r21, Z+14	; 0x0e
    2328:	67 85       	ldd	r22, Z+15	; 0x0f
    232a:	70 89       	ldd	r23, Z+16	; 0x10
    232c:	04 23       	and	r16, r20
    232e:	15 23       	and	r17, r21
    2330:	26 23       	and	r18, r22
    2332:	37 23       	and	r19, r23
    2334:	01 2b       	or	r16, r17
    2336:	02 2b       	or	r16, r18
    2338:	03 2b       	or	r16, r19
    233a:	d1 f0       	breq	.+52     	; 0x2370 <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    233c:	80 95       	com	r24
    233e:	90 95       	com	r25
    2340:	a0 95       	com	r26
    2342:	b0 95       	com	r27
    2344:	48 23       	and	r20, r24
    2346:	59 23       	and	r21, r25
    2348:	6a 23       	and	r22, r26
    234a:	7b 23       	and	r23, r27
    234c:	45 87       	std	Z+13, r20	; 0x0d
    234e:	56 87       	std	Z+14, r21	; 0x0e
    2350:	67 87       	std	Z+15, r22	; 0x0f
    2352:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    2354:	41 89       	ldd	r20, Z+17	; 0x11
    2356:	52 89       	ldd	r21, Z+18	; 0x12
    2358:	63 89       	ldd	r22, Z+19	; 0x13
    235a:	74 89       	ldd	r23, Z+20	; 0x14
    235c:	84 23       	and	r24, r20
    235e:	95 23       	and	r25, r21
    2360:	a6 23       	and	r26, r22
    2362:	b7 23       	and	r27, r23
    2364:	81 8b       	std	Z+17, r24	; 0x11
    2366:	92 8b       	std	Z+18, r25	; 0x12
    2368:	a3 8b       	std	Z+19, r26	; 0x13
    236a:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	01 c0       	rjmp	.+2      	; 0x2372 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    2370:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    2372:	1f 91       	pop	r17
    2374:	0f 91       	pop	r16
    2376:	08 95       	ret

00002378 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    2378:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    237a:	40 91 75 03 	lds	r20, 0x0375
    237e:	50 91 76 03 	lds	r21, 0x0376
    2382:	60 91 77 03 	lds	r22, 0x0377
    2386:	70 91 78 03 	lds	r23, 0x0378
    238a:	08 2e       	mov	r0, r24
    238c:	04 c0       	rjmp	.+8      	; 0x2396 <nrk_signal_register+0x1e>
    238e:	76 95       	lsr	r23
    2390:	67 95       	ror	r22
    2392:	57 95       	ror	r21
    2394:	47 95       	ror	r20
    2396:	0a 94       	dec	r0
    2398:	d2 f7       	brpl	.-12     	; 0x238e <nrk_signal_register+0x16>
    239a:	40 ff       	sbrs	r20, 0
    239c:	1d c0       	rjmp	.+58     	; 0x23d8 <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    239e:	e0 91 f0 05 	lds	r30, 0x05F0
    23a2:	f0 91 f1 05 	lds	r31, 0x05F1
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	a0 e0       	ldi	r26, 0x00	; 0
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <nrk_signal_register+0x40>
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	aa 1f       	adc	r26, r26
    23b6:	bb 1f       	adc	r27, r27
    23b8:	2a 95       	dec	r18
    23ba:	d2 f7       	brpl	.-12     	; 0x23b0 <nrk_signal_register+0x38>
    23bc:	45 85       	ldd	r20, Z+13	; 0x0d
    23be:	56 85       	ldd	r21, Z+14	; 0x0e
    23c0:	67 85       	ldd	r22, Z+15	; 0x0f
    23c2:	70 89       	ldd	r23, Z+16	; 0x10
    23c4:	84 2b       	or	r24, r20
    23c6:	95 2b       	or	r25, r21
    23c8:	a6 2b       	or	r26, r22
    23ca:	b7 2b       	or	r27, r23
    23cc:	85 87       	std	Z+13, r24	; 0x0d
    23ce:	96 87       	std	Z+14, r25	; 0x0e
    23d0:	a7 87       	std	Z+15, r26	; 0x0f
    23d2:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	08 95       	ret
	}
            
	return NRK_ERROR;
    23d8:	8f ef       	ldi	r24, 0xFF	; 255
}
    23da:	08 95       	ret

000023dc <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    23dc:	cf 92       	push	r12
    23de:	df 92       	push	r13
    23e0:	ef 92       	push	r14
    23e2:	ff 92       	push	r15
    23e4:	cf 93       	push	r28
	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;
    uint8_t timer;

	sig_mask=SIG(sig_id);
    23e6:	c1 2c       	mov	r12, r1
    23e8:	d1 2c       	mov	r13, r1
    23ea:	76 01       	movw	r14, r12
    23ec:	c3 94       	inc	r12
    23ee:	04 c0       	rjmp	.+8      	; 0x23f8 <nrk_event_signal+0x1c>
    23f0:	cc 0c       	add	r12, r12
    23f2:	dd 1c       	adc	r13, r13
    23f4:	ee 1c       	adc	r14, r14
    23f6:	ff 1c       	adc	r15, r15
    23f8:	8a 95       	dec	r24
    23fa:	d2 f7       	brpl	.-12     	; 0x23f0 <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    23fc:	80 91 75 03 	lds	r24, 0x0375
    2400:	90 91 76 03 	lds	r25, 0x0376
    2404:	a0 91 77 03 	lds	r26, 0x0377
    2408:	b0 91 78 03 	lds	r27, 0x0378
    240c:	8c 21       	and	r24, r12
    240e:	9d 21       	and	r25, r13
    2410:	ae 21       	and	r26, r14
    2412:	bf 21       	and	r27, r15
    2414:	89 2b       	or	r24, r25
    2416:	8a 2b       	or	r24, r26
    2418:	8b 2b       	or	r24, r27
    241a:	11 f4       	brne	.+4      	; 0x2420 <nrk_event_signal+0x44>
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	44 c0       	rjmp	.+136    	; 0x24a8 <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    2420:	0e 94 12 0c 	call	0x1824	; 0x1824 <nrk_int_disable>
    2424:	e5 e3       	ldi	r30, 0x35	; 53
    2426:	f5 e0       	ldi	r31, 0x05	; 5
    2428:	a7 e3       	ldi	r26, 0x37	; 55
    242a:	b5 e0       	ldi	r27, 0x05	; 5

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    242c:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    242e:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    2430:	90 81       	ld	r25, Z
    2432:	91 30       	cpi	r25, 0x01	; 1
    2434:	b9 f4       	brne	.+46     	; 0x2464 <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    2436:	42 85       	ldd	r20, Z+10	; 0x0a
    2438:	53 85       	ldd	r21, Z+11	; 0x0b
    243a:	64 85       	ldd	r22, Z+12	; 0x0c
    243c:	75 85       	ldd	r23, Z+13	; 0x0d
    243e:	4c 21       	and	r20, r12
    2440:	5d 21       	and	r21, r13
    2442:	6e 21       	and	r22, r14
    2444:	7f 21       	and	r23, r15
    2446:	45 2b       	or	r20, r21
    2448:	46 2b       	or	r20, r22
    244a:	47 2b       	or	r20, r23
    244c:	59 f0       	breq	.+22     	; 0x2464 <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    244e:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    2450:	16 86       	std	Z+14, r1	; 0x0e
    2452:	17 86       	std	Z+15, r1	; 0x0f
    2454:	10 8a       	std	Z+16, r1	; 0x10
    2456:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    2458:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    245a:	c2 86       	std	Z+10, r12	; 0x0a
    245c:	d3 86       	std	Z+11, r13	; 0x0b
    245e:	e4 86       	std	Z+12, r14	; 0x0c
    2460:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    2462:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2464:	90 81       	ld	r25, Z
    2466:	92 30       	cpi	r25, 0x02	; 2
    2468:	a1 f4       	brne	.+40     	; 0x2492 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    246a:	42 85       	ldd	r20, Z+10	; 0x0a
    246c:	53 85       	ldd	r21, Z+11	; 0x0b
    246e:	64 85       	ldd	r22, Z+12	; 0x0c
    2470:	75 85       	ldd	r23, Z+13	; 0x0d
    2472:	4c 15       	cp	r20, r12
    2474:	5d 05       	cpc	r21, r13
    2476:	6e 05       	cpc	r22, r14
    2478:	7f 05       	cpc	r23, r15
    247a:	59 f4       	brne	.+22     	; 0x2492 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    247c:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    247e:	16 86       	std	Z+14, r1	; 0x0e
    2480:	17 86       	std	Z+15, r1	; 0x0f
    2482:	10 8a       	std	Z+16, r1	; 0x10
    2484:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    2486:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2488:	12 86       	std	Z+10, r1	; 0x0a
    248a:	13 86       	std	Z+11, r1	; 0x0b
    248c:	14 86       	std	Z+12, r1	; 0x0c
    248e:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    2490:	c1 e0       	ldi	r28, 0x01	; 1
    2492:	bb 96       	adiw	r30, 0x2b	; 43
    2494:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2496:	95 e0       	ldi	r25, 0x05	; 5
    2498:	e1 3e       	cpi	r30, 0xE1	; 225
    249a:	f9 07       	cpc	r31, r25
    249c:	49 f6       	brne	.-110    	; 0x2430 <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    249e:	0e 94 14 0c 	call	0x1828	; 0x1828 <nrk_int_enable>
	if(event_occured)
    24a2:	c1 11       	cpse	r28, r1
    24a4:	05 c0       	rjmp	.+10     	; 0x24b0 <nrk_event_signal+0xd4>
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    24a6:	82 e0       	ldi	r24, 0x02	; 2
    24a8:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_nrk_errno_set>
	return NRK_ERROR;
    24ac:	8f ef       	ldi	r24, 0xFF	; 255
    24ae:	01 c0       	rjmp	.+2      	; 0x24b2 <nrk_event_signal+0xd6>
            			_nrk_set_next_wakeup (timer);
			}	
		else
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
    24b0:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    24b2:	cf 91       	pop	r28
    24b4:	ff 90       	pop	r15
    24b6:	ef 90       	pop	r14
    24b8:	df 90       	pop	r13
    24ba:	cf 90       	pop	r12
    24bc:	08 95       	ret

000024be <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    24be:	0f 93       	push	r16
    24c0:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    24c2:	e0 91 f0 05 	lds	r30, 0x05F0
    24c6:	f0 91 f1 05 	lds	r31, 0x05F1
    24ca:	05 85       	ldd	r16, Z+13	; 0x0d
    24cc:	16 85       	ldd	r17, Z+14	; 0x0e
    24ce:	27 85       	ldd	r18, Z+15	; 0x0f
    24d0:	30 89       	ldd	r19, Z+16	; 0x10
    24d2:	06 23       	and	r16, r22
    24d4:	17 23       	and	r17, r23
    24d6:	28 23       	and	r18, r24
    24d8:	39 23       	and	r19, r25
    24da:	01 15       	cp	r16, r1
    24dc:	11 05       	cpc	r17, r1
    24de:	21 05       	cpc	r18, r1
    24e0:	31 05       	cpc	r19, r1
    24e2:	11 f1       	breq	.+68     	; 0x2528 <nrk_event_wait+0x6a>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    24e8:	81 8b       	std	Z+17, r24	; 0x11
    24ea:	92 8b       	std	Z+18, r25	; 0x12
    24ec:	a3 8b       	std	Z+19, r26	; 0x13
    24ee:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    24f0:	21 e0       	ldi	r18, 0x01	; 1
    24f2:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    24f4:	00 90 e0 05 	lds	r0, 0x05E0
    24f8:	04 c0       	rjmp	.+8      	; 0x2502 <nrk_event_wait+0x44>
    24fa:	b6 95       	lsr	r27
    24fc:	a7 95       	ror	r26
    24fe:	97 95       	ror	r25
    2500:	87 95       	ror	r24
    2502:	0a 94       	dec	r0
    2504:	d2 f7       	brpl	.-12     	; 0x24fa <nrk_event_wait+0x3c>
    2506:	80 ff       	sbrs	r24, 0
    2508:	03 c0       	rjmp	.+6      	; 0x2510 <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    250a:	0e 94 13 16 	call	0x2c26	; 0x2c26 <nrk_wait_until_nw>
    250e:	04 c0       	rjmp	.+8      	; 0x2518 <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    2518:	e0 91 f0 05 	lds	r30, 0x05F0
    251c:	f0 91 f1 05 	lds	r31, 0x05F1
    2520:	01 89       	ldd	r16, Z+17	; 0x11
    2522:	12 89       	ldd	r17, Z+18	; 0x12
    2524:	23 89       	ldd	r18, Z+19	; 0x13
    2526:	34 89       	ldd	r19, Z+20	; 0x14
}
    2528:	c9 01       	movw	r24, r18
    252a:	b8 01       	movw	r22, r16
    252c:	1f 91       	pop	r17
    252e:	0f 91       	pop	r16
    2530:	08 95       	ret

00002532 <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	08 95       	ret

00002538 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    2538:	21 e0       	ldi	r18, 0x01	; 1
    253a:	8c 5d       	subi	r24, 0xDC	; 220
    253c:	95 40       	sbci	r25, 0x05	; 5
    253e:	09 f4       	brne	.+2      	; 0x2542 <nrk_get_resource_index+0xa>
    2540:	20 e0       	ldi	r18, 0x00	; 0
				return id;
	return NRK_ERROR;
}
    2542:	82 2f       	mov	r24, r18
    2544:	81 95       	neg	r24
    2546:	08 95       	ret

00002548 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2548:	0e 94 9c 12 	call	0x2538	; 0x2538 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    254c:	8f 3f       	cpi	r24, 0xFF	; 255
    254e:	11 f4       	brne	.+4      	; 0x2554 <nrk_sem_query+0xc>
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	03 c0       	rjmp	.+6      	; 0x255a <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2554:	81 30       	cpi	r24, 0x01	; 1
    2556:	29 f4       	brne	.+10     	; 0x2562 <nrk_sem_query+0x1a>
    2558:	82 e0       	ldi	r24, 0x02	; 2
    255a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_nrk_errno_set>
    255e:	8f ef       	ldi	r24, 0xFF	; 255
    2560:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    2562:	99 27       	eor	r25, r25
    2564:	87 fd       	sbrc	r24, 7
    2566:	90 95       	com	r25
    2568:	fc 01       	movw	r30, r24
    256a:	ee 0f       	add	r30, r30
    256c:	ff 1f       	adc	r31, r31
    256e:	8e 0f       	add	r24, r30
    2570:	9f 1f       	adc	r25, r31
    2572:	fc 01       	movw	r30, r24
    2574:	e4 52       	subi	r30, 0x24	; 36
    2576:	fa 4f       	sbci	r31, 0xFA	; 250
    2578:	82 81       	ldd	r24, Z+2	; 0x02
}
    257a:	08 95       	ret

0000257c <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    257c:	ef 92       	push	r14
    257e:	ff 92       	push	r15
    2580:	0f 93       	push	r16
    2582:	1f 93       	push	r17
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    2588:	1f 92       	push	r1
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    258e:	0e 94 9c 12 	call	0x2538	; 0x2538 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2592:	8f 3f       	cpi	r24, 0xFF	; 255
    2594:	11 f4       	brne	.+4      	; 0x259a <nrk_sem_pend+0x1e>
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	03 c0       	rjmp	.+6      	; 0x25a0 <nrk_sem_pend+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    259a:	81 30       	cpi	r24, 0x01	; 1
    259c:	29 f4       	brne	.+10     	; 0x25a8 <nrk_sem_pend+0x2c>
    259e:	82 e0       	ldi	r24, 0x02	; 2
    25a0:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_nrk_errno_set>
    25a4:	8f ef       	ldi	r24, 0xFF	; 255
    25a6:	41 c0       	rjmp	.+130    	; 0x262a <nrk_sem_pend+0xae>
	
	nrk_int_disable();
    25a8:	89 83       	std	Y+1, r24	; 0x01
    25aa:	0e 94 12 0c 	call	0x1824	; 0x1824 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	e8 2e       	mov	r14, r24
    25b2:	ff 24       	eor	r15, r15
    25b4:	e7 fc       	sbrc	r14, 7
    25b6:	f0 94       	com	r15
    25b8:	87 01       	movw	r16, r14
    25ba:	00 0f       	add	r16, r16
    25bc:	11 1f       	adc	r17, r17
    25be:	f8 01       	movw	r30, r16
    25c0:	ee 0d       	add	r30, r14
    25c2:	ff 1d       	adc	r31, r15
    25c4:	e4 52       	subi	r30, 0x24	; 36
    25c6:	fa 4f       	sbci	r31, 0xFA	; 250
    25c8:	92 81       	ldd	r25, Z+2	; 0x02
    25ca:	91 11       	cpse	r25, r1
    25cc:	16 c0       	rjmp	.+44     	; 0x25fa <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    25ce:	e0 91 f0 05 	lds	r30, 0x05F0
    25d2:	f0 91 f1 05 	lds	r31, 0x05F1
    25d6:	97 81       	ldd	r25, Z+7	; 0x07
    25d8:	92 60       	ori	r25, 0x02	; 2
    25da:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    25dc:	99 27       	eor	r25, r25
    25de:	87 fd       	sbrc	r24, 7
    25e0:	90 95       	com	r25
    25e2:	a9 2f       	mov	r26, r25
    25e4:	b9 2f       	mov	r27, r25
    25e6:	81 8b       	std	Z+17, r24	; 0x11
    25e8:	92 8b       	std	Z+18, r25	; 0x12
    25ea:	a3 8b       	std	Z+19, r26	; 0x13
    25ec:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    25ee:	0e 94 14 0c 	call	0x1828	; 0x1828 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    25fa:	0e 0d       	add	r16, r14
    25fc:	1f 1d       	adc	r17, r15
    25fe:	d8 01       	movw	r26, r16
    2600:	a4 52       	subi	r26, 0x24	; 36
    2602:	ba 4f       	sbci	r27, 0xFA	; 250
    2604:	12 96       	adiw	r26, 0x02	; 2
    2606:	8c 91       	ld	r24, X
    2608:	12 97       	sbiw	r26, 0x02	; 2
    260a:	81 50       	subi	r24, 0x01	; 1
    260c:	12 96       	adiw	r26, 0x02	; 2
    260e:	8c 93       	st	X, r24
    2610:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    2612:	e0 91 f0 05 	lds	r30, 0x05F0
    2616:	f0 91 f1 05 	lds	r31, 0x05F1
    261a:	11 96       	adiw	r26, 0x01	; 1
    261c:	8c 91       	ld	r24, X
    261e:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    2624:	0e 94 14 0c 	call	0x1828	; 0x1828 <nrk_int_enable>

	return NRK_OK;
    2628:	81 e0       	ldi	r24, 0x01	; 1
}
    262a:	0f 90       	pop	r0
    262c:	df 91       	pop	r29
    262e:	cf 91       	pop	r28
    2630:	1f 91       	pop	r17
    2632:	0f 91       	pop	r16
    2634:	ff 90       	pop	r15
    2636:	ef 90       	pop	r14
    2638:	08 95       	ret

0000263a <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    263a:	0f 93       	push	r16
    263c:	1f 93       	push	r17
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
    2642:	1f 92       	push	r1
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    2648:	0e 94 9c 12 	call	0x2538	; 0x2538 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    264c:	8f 3f       	cpi	r24, 0xFF	; 255
    264e:	11 f4       	brne	.+4      	; 0x2654 <nrk_sem_post+0x1a>
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	03 c0       	rjmp	.+6      	; 0x265a <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2654:	81 30       	cpi	r24, 0x01	; 1
    2656:	29 f4       	brne	.+10     	; 0x2662 <nrk_sem_post+0x28>
    2658:	82 e0       	ldi	r24, 0x02	; 2
    265a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_nrk_errno_set>
    265e:	8f ef       	ldi	r24, 0xFF	; 255
    2660:	44 c0       	rjmp	.+136    	; 0x26ea <nrk_sem_post+0xb0>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    2662:	48 2f       	mov	r20, r24
    2664:	55 27       	eor	r21, r21
    2666:	47 fd       	sbrc	r20, 7
    2668:	50 95       	com	r21
    266a:	9a 01       	movw	r18, r20
    266c:	22 0f       	add	r18, r18
    266e:	33 1f       	adc	r19, r19
    2670:	24 0f       	add	r18, r20
    2672:	35 1f       	adc	r19, r21
    2674:	89 01       	movw	r16, r18
    2676:	04 52       	subi	r16, 0x24	; 36
    2678:	1a 4f       	sbci	r17, 0xFA	; 250
    267a:	f8 01       	movw	r30, r16
    267c:	22 81       	ldd	r18, Z+2	; 0x02
    267e:	90 81       	ld	r25, Z
    2680:	29 17       	cp	r18, r25
    2682:	94 f5       	brge	.+100    	; 0x26e8 <nrk_sem_post+0xae>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    2684:	89 83       	std	Y+1, r24	; 0x01
    2686:	0e 94 12 0c 	call	0x1824	; 0x1824 <nrk_int_disable>

		nrk_sem_list[id].value++;
    268a:	f8 01       	movw	r30, r16
    268c:	92 81       	ldd	r25, Z+2	; 0x02
    268e:	9f 5f       	subi	r25, 0xFF	; 255
    2690:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    2692:	e0 91 f0 05 	lds	r30, 0x05F0
    2696:	f0 91 f1 05 	lds	r31, 0x05F1
    269a:	14 82       	std	Z+4, r1	; 0x04
    269c:	e5 e3       	ldi	r30, 0x35	; 53
    269e:	f5 e0       	ldi	r31, 0x05	; 5

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	99 27       	eor	r25, r25
    26a4:	87 fd       	sbrc	r24, 7
    26a6:	90 95       	com	r25
    26a8:	a9 2f       	mov	r26, r25
    26aa:	b9 2f       	mov	r27, r25
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    26ac:	23 e0       	ldi	r18, 0x03	; 3

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    26ae:	30 81       	ld	r19, Z
    26b0:	32 30       	cpi	r19, 0x02	; 2
    26b2:	99 f4       	brne	.+38     	; 0x26da <nrk_sem_post+0xa0>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    26b4:	42 85       	ldd	r20, Z+10	; 0x0a
    26b6:	53 85       	ldd	r21, Z+11	; 0x0b
    26b8:	64 85       	ldd	r22, Z+12	; 0x0c
    26ba:	75 85       	ldd	r23, Z+13	; 0x0d
    26bc:	48 17       	cp	r20, r24
    26be:	59 07       	cpc	r21, r25
    26c0:	6a 07       	cpc	r22, r26
    26c2:	7b 07       	cpc	r23, r27
    26c4:	51 f4       	brne	.+20     	; 0x26da <nrk_sem_post+0xa0>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    26c6:	22 83       	std	Z+2, r18	; 0x02
					nrk_task_TCB[task_ID].next_wakeup=0;
    26c8:	16 86       	std	Z+14, r1	; 0x0e
    26ca:	17 86       	std	Z+15, r1	; 0x0f
    26cc:	10 8a       	std	Z+16, r1	; 0x10
    26ce:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    26d0:	10 82       	st	Z, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    26d2:	12 86       	std	Z+10, r1	; 0x0a
    26d4:	13 86       	std	Z+11, r1	; 0x0b
    26d6:	14 86       	std	Z+12, r1	; 0x0c
    26d8:	15 86       	std	Z+13, r1	; 0x0d
    26da:	bb 96       	adiw	r30, 0x2b	; 43
		nrk_int_disable();

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    26dc:	35 e0       	ldi	r19, 0x05	; 5
    26de:	e1 3e       	cpi	r30, 0xE1	; 225
    26e0:	f3 07       	cpc	r31, r19
    26e2:	29 f7       	brne	.-54     	; 0x26ae <nrk_sem_post+0x74>
					nrk_task_TCB[task_ID].event_suspend=0;
					nrk_task_TCB[task_ID].active_signal_mask=0;
				}   

		}
		nrk_int_enable();
    26e4:	0e 94 14 0c 	call	0x1828	; 0x1828 <nrk_int_enable>
	}
		
return NRK_OK;
    26e8:	81 e0       	ldi	r24, 0x01	; 1
}
    26ea:	0f 90       	pop	r0
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	1f 91       	pop	r17
    26f2:	0f 91       	pop	r16
    26f4:	08 95       	ret

000026f6 <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    26f6:	0e 94 9c 12 	call	0x2538	; 0x2538 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    26fa:	8f 3f       	cpi	r24, 0xFF	; 255
    26fc:	11 f4       	brne	.+4      	; 0x2702 <nrk_sem_delete+0xc>
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	03 c0       	rjmp	.+6      	; 0x2708 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2702:	81 30       	cpi	r24, 0x01	; 1
    2704:	29 f4       	brne	.+10     	; 0x2710 <nrk_sem_delete+0x1a>
    2706:	82 e0       	ldi	r24, 0x02	; 2
    2708:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <_nrk_errno_set>
    270c:	8f ef       	ldi	r24, 0xFF	; 255
    270e:	08 95       	ret

	nrk_sem_list[id].count=-1;
    2710:	99 27       	eor	r25, r25
    2712:	87 fd       	sbrc	r24, 7
    2714:	90 95       	com	r25
    2716:	fc 01       	movw	r30, r24
    2718:	ee 0f       	add	r30, r30
    271a:	ff 1f       	adc	r31, r31
    271c:	8e 0f       	add	r24, r30
    271e:	9f 1f       	adc	r25, r31
    2720:	fc 01       	movw	r30, r24
    2722:	e4 52       	subi	r30, 0x24	; 36
    2724:	fa 4f       	sbci	r31, 0xFA	; 250
    2726:	8f ef       	ldi	r24, 0xFF	; 255
    2728:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    272a:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    272c:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    272e:	80 91 ef 05 	lds	r24, 0x05EF
    2732:	81 50       	subi	r24, 0x01	; 1
    2734:	80 93 ef 05 	sts	0x05EF, r24
return NRK_OK;
    2738:	81 e0       	ldi	r24, 0x01	; 1
}
    273a:	08 95       	ret

0000273c <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    273c:	e0 91 e5 05 	lds	r30, 0x05E5
    2740:	f0 91 e6 05 	lds	r31, 0x05E6
}
    2744:	80 81       	ld	r24, Z
    2746:	08 95       	ret

00002748 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    2748:	e0 91 e5 05 	lds	r30, 0x05E5
    274c:	f0 91 e6 05 	lds	r31, 0x05E6
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    2750:	30 97       	sbiw	r30, 0x00	; 0
    2752:	21 f0       	breq	.+8      	; 0x275c <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    2754:	03 80       	ldd	r0, Z+3	; 0x03
    2756:	f4 81       	ldd	r31, Z+4	; 0x04
    2758:	e0 2d       	mov	r30, r0
    275a:	fa cf       	rjmp	.-12     	; 0x2750 <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    275c:	08 95       	ret

0000275e <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    275e:	af 92       	push	r10
    2760:	bf 92       	push	r11
    2762:	cf 92       	push	r12
    2764:	df 92       	push	r13
    2766:	ef 92       	push	r14
    2768:	ff 92       	push	r15
    276a:	0f 93       	push	r16
    276c:	1f 93       	push	r17
    276e:	cf 93       	push	r28
    2770:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    2772:	e0 91 2c 05 	lds	r30, 0x052C
    2776:	f0 91 2d 05 	lds	r31, 0x052D
    277a:	30 97       	sbiw	r30, 0x00	; 0
    277c:	09 f4       	brne	.+2      	; 0x2780 <nrk_add_to_readyQ+0x22>
    277e:	90 c0       	rjmp	.+288    	; 0x28a0 <nrk_add_to_readyQ+0x142>
    {
        return;
    }


    NextNode = _head_node;
    2780:	00 91 e5 05 	lds	r16, 0x05E5
    2784:	10 91 e6 05 	lds	r17, 0x05E6
    CurNode = _free_node;

    if (_head_node != NULL)
    2788:	01 15       	cp	r16, r1
    278a:	11 05       	cpc	r17, r1
    278c:	09 f4       	brne	.+2      	; 0x2790 <nrk_add_to_readyQ+0x32>
    278e:	4c c0       	rjmp	.+152    	; 0x2828 <nrk_add_to_readyQ+0xca>
    2790:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    2792:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    2794:	58 2f       	mov	r21, r24
    2796:	54 03       	mulsu	r21, r20
    2798:	90 01       	movw	r18, r0
    279a:	11 24       	eor	r1, r1
    279c:	22 5d       	subi	r18, 0xD2	; 210
    279e:	3a 4f       	sbci	r19, 0xFA	; 250
    27a0:	79 01       	movw	r14, r18
    27a2:	9a e0       	ldi	r25, 0x0A	; 10
    27a4:	e9 0e       	add	r14, r25
    27a6:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    27a8:	69 01       	movw	r12, r18
    27aa:	c4 e0       	ldi	r28, 0x04	; 4
    27ac:	cc 0e       	add	r12, r28
    27ae:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    27b0:	59 01       	movw	r10, r18
    27b2:	db e0       	ldi	r29, 0x0B	; 11
    27b4:	ad 0e       	add	r10, r29
    27b6:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    27b8:	2c 91       	ld	r18, X
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	42 9f       	mul	r20, r18
    27be:	b0 01       	movw	r22, r0
    27c0:	43 9f       	mul	r20, r19
    27c2:	70 0d       	add	r23, r0
    27c4:	11 24       	eor	r1, r1
    27c6:	62 5d       	subi	r22, 0xD2	; 210
    27c8:	7a 4f       	sbci	r23, 0xFA	; 250
    27ca:	eb 01       	movw	r28, r22
    27cc:	9c 81       	ldd	r25, Y+4	; 0x04
    27ce:	99 23       	and	r25, r25
    27d0:	29 f0       	breq	.+10     	; 0x27dc <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    27d2:	5b 85       	ldd	r21, Y+11	; 0x0b
    27d4:	e7 01       	movw	r28, r14
    27d6:	98 81       	ld	r25, Y
    27d8:	59 17       	cp	r21, r25
    27da:	40 f1       	brcs	.+80     	; 0x282c <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    27dc:	e6 01       	movw	r28, r12
    27de:	98 81       	ld	r25, Y
    27e0:	99 23       	and	r25, r25
    27e2:	69 f0       	breq	.+26     	; 0x27fe <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    27e4:	42 9f       	mul	r20, r18
    27e6:	b0 01       	movw	r22, r0
    27e8:	43 9f       	mul	r20, r19
    27ea:	70 0d       	add	r23, r0
    27ec:	11 24       	eor	r1, r1
    27ee:	62 5d       	subi	r22, 0xD2	; 210
    27f0:	7a 4f       	sbci	r23, 0xFA	; 250
    27f2:	eb 01       	movw	r28, r22
    27f4:	5a 85       	ldd	r21, Y+10	; 0x0a
    27f6:	e5 01       	movw	r28, r10
    27f8:	98 81       	ld	r25, Y
    27fa:	59 17       	cp	r21, r25
    27fc:	b8 f0       	brcs	.+46     	; 0x282c <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    27fe:	42 9f       	mul	r20, r18
    2800:	b0 01       	movw	r22, r0
    2802:	43 9f       	mul	r20, r19
    2804:	70 0d       	add	r23, r0
    2806:	11 24       	eor	r1, r1
    2808:	9b 01       	movw	r18, r22
    280a:	22 5d       	subi	r18, 0xD2	; 210
    280c:	3a 4f       	sbci	r19, 0xFA	; 250
    280e:	e9 01       	movw	r28, r18
    2810:	2a 85       	ldd	r18, Y+10	; 0x0a
    2812:	e7 01       	movw	r28, r14
    2814:	98 81       	ld	r25, Y
    2816:	29 17       	cp	r18, r25
    2818:	48 f0       	brcs	.+18     	; 0x282c <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    281a:	13 96       	adiw	r26, 0x03	; 3
    281c:	0d 90       	ld	r0, X+
    281e:	bc 91       	ld	r27, X
    2820:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    2822:	10 97       	sbiw	r26, 0x00	; 0
    2824:	49 f6       	brne	.-110    	; 0x27b8 <nrk_add_to_readyQ+0x5a>
    2826:	02 c0       	rjmp	.+4      	; 0x282c <nrk_add_to_readyQ+0xce>
    2828:	a0 e0       	ldi	r26, 0x00	; 0
    282a:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    282c:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    282e:	c3 81       	ldd	r28, Z+3	; 0x03
    2830:	d4 81       	ldd	r29, Z+4	; 0x04
    2832:	d0 93 2d 05 	sts	0x052D, r29
    2836:	c0 93 2c 05 	sts	0x052C, r28

    if (NextNode == _head_node)
    283a:	a0 17       	cp	r26, r16
    283c:	b1 07       	cpc	r27, r17
    283e:	b1 f4       	brne	.+44     	; 0x286c <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    2840:	10 97       	sbiw	r26, 0x00	; 0
    2842:	49 f0       	breq	.+18     	; 0x2856 <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    2844:	b4 83       	std	Z+4, r27	; 0x04
    2846:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    2848:	12 82       	std	Z+2, r1	; 0x02
    284a:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    284c:	12 96       	adiw	r26, 0x02	; 2
    284e:	fc 93       	st	X, r31
    2850:	ee 93       	st	-X, r30
    2852:	11 97       	sbiw	r26, 0x01	; 1
    2854:	06 c0       	rjmp	.+12     	; 0x2862 <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    2856:	14 82       	std	Z+4, r1	; 0x04
    2858:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    285a:	12 82       	std	Z+2, r1	; 0x02
    285c:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    285e:	fa 83       	std	Y+2, r31	; 0x02
    2860:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    2862:	f0 93 e6 05 	sts	0x05E6, r31
    2866:	e0 93 e5 05 	sts	0x05E5, r30
    286a:	1a c0       	rjmp	.+52     	; 0x28a0 <nrk_add_to_readyQ+0x142>
    286c:	11 96       	adiw	r26, 0x01	; 1
    286e:	8d 91       	ld	r24, X+
    2870:	9c 91       	ld	r25, X
    2872:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    2874:	ac 17       	cp	r26, r28
    2876:	bd 07       	cpc	r27, r29
    2878:	59 f0       	breq	.+22     	; 0x2890 <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    287a:	92 83       	std	Z+2, r25	; 0x02
    287c:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    287e:	b4 83       	std	Z+4, r27	; 0x04
    2880:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    2882:	11 96       	adiw	r26, 0x01	; 1
    2884:	cd 91       	ld	r28, X+
    2886:	dc 91       	ld	r29, X
    2888:	12 97       	sbiw	r26, 0x02	; 2
    288a:	fc 83       	std	Y+4, r31	; 0x04
    288c:	eb 83       	std	Y+3, r30	; 0x03
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <nrk_add_to_readyQ+0x13a>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    2890:	14 82       	std	Z+4, r1	; 0x04
    2892:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    2894:	92 83       	std	Z+2, r25	; 0x02
    2896:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    2898:	12 96       	adiw	r26, 0x02	; 2
    289a:	fc 93       	st	X, r31
    289c:	ee 93       	st	-X, r30
    289e:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	1f 91       	pop	r17
    28a6:	0f 91       	pop	r16
    28a8:	ff 90       	pop	r15
    28aa:	ef 90       	pop	r14
    28ac:	df 90       	pop	r13
    28ae:	cf 90       	pop	r12
    28b0:	bf 90       	pop	r11
    28b2:	af 90       	pop	r10
    28b4:	08 95       	ret

000028b6 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    28b6:	cf 93       	push	r28
    28b8:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    28ba:	e0 91 e5 05 	lds	r30, 0x05E5
    28be:	f0 91 e6 05 	lds	r31, 0x05E6
    28c2:	30 97       	sbiw	r30, 0x00	; 0
    28c4:	09 f4       	brne	.+2      	; 0x28c8 <nrk_rem_from_readyQ+0x12>
    28c6:	44 c0       	rjmp	.+136    	; 0x2950 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    28c8:	99 27       	eor	r25, r25
    28ca:	87 fd       	sbrc	r24, 7
    28cc:	90 95       	com	r25
    28ce:	20 81       	ld	r18, Z
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	28 17       	cp	r18, r24
    28d4:	39 07       	cpc	r19, r25
    28d6:	81 f4       	brne	.+32     	; 0x28f8 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    28d8:	a3 81       	ldd	r26, Z+3	; 0x03
    28da:	b4 81       	ldd	r27, Z+4	; 0x04
    28dc:	b0 93 e6 05 	sts	0x05E6, r27
    28e0:	a0 93 e5 05 	sts	0x05E5, r26
        _head_node->Prev = NULL;
    28e4:	12 96       	adiw	r26, 0x02	; 2
    28e6:	1c 92       	st	X, r1
    28e8:	1e 92       	st	-X, r1
    28ea:	11 97       	sbiw	r26, 0x01	; 1
    28ec:	18 c0       	rjmp	.+48     	; 0x291e <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    28ee:	03 80       	ldd	r0, Z+3	; 0x03
    28f0:	f4 81       	ldd	r31, Z+4	; 0x04
    28f2:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    28f4:	30 97       	sbiw	r30, 0x00	; 0
    28f6:	61 f1       	breq	.+88     	; 0x2950 <nrk_rem_from_readyQ+0x9a>
    28f8:	20 81       	ld	r18, Z
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	28 17       	cp	r18, r24
    28fe:	39 07       	cpc	r19, r25
    2900:	b1 f7       	brne	.-20     	; 0x28ee <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    2902:	c1 81       	ldd	r28, Z+1	; 0x01
    2904:	d2 81       	ldd	r29, Z+2	; 0x02
    2906:	83 81       	ldd	r24, Z+3	; 0x03
    2908:	94 81       	ldd	r25, Z+4	; 0x04
    290a:	9c 83       	std	Y+4, r25	; 0x04
    290c:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    290e:	a3 81       	ldd	r26, Z+3	; 0x03
    2910:	b4 81       	ldd	r27, Z+4	; 0x04
    2912:	10 97       	sbiw	r26, 0x00	; 0
    2914:	21 f0       	breq	.+8      	; 0x291e <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    2916:	12 96       	adiw	r26, 0x02	; 2
    2918:	dc 93       	st	X, r29
    291a:	ce 93       	st	-X, r28
    291c:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    291e:	a0 91 2c 05 	lds	r26, 0x052C
    2922:	b0 91 2d 05 	lds	r27, 0x052D
    2926:	10 97       	sbiw	r26, 0x00	; 0
    2928:	39 f4       	brne	.+14     	; 0x2938 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    292a:	f0 93 2d 05 	sts	0x052D, r31
    292e:	e0 93 2c 05 	sts	0x052C, r30
        _free_node->Next = NULL;
    2932:	14 82       	std	Z+4, r1	; 0x04
    2934:	13 82       	std	Z+3, r1	; 0x03
    2936:	0a c0       	rjmp	.+20     	; 0x294c <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    2938:	b4 83       	std	Z+4, r27	; 0x04
    293a:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    293c:	12 96       	adiw	r26, 0x02	; 2
    293e:	fc 93       	st	X, r31
    2940:	ee 93       	st	-X, r30
    2942:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    2944:	f0 93 2d 05 	sts	0x052D, r31
    2948:	e0 93 2c 05 	sts	0x052C, r30
    }
    _free_node->Prev = NULL;
    294c:	12 82       	std	Z+2, r1	; 0x02
    294e:	11 82       	std	Z+1, r1	; 0x01
}
    2950:	df 91       	pop	r29
    2952:	cf 91       	pop	r28
    2954:	08 95       	ret

00002956 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    2956:	ef 92       	push	r14
    2958:	ff 92       	push	r15
    295a:	0f 93       	push	r16
    295c:	1f 93       	push	r17
    295e:	cf 93       	push	r28
    2960:	df 93       	push	r29
    2962:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    2964:	4b 81       	ldd	r20, Y+3	; 0x03
    2966:	5c 81       	ldd	r21, Y+4	; 0x04
    2968:	69 81       	ldd	r22, Y+1	; 0x01
    296a:	7a 81       	ldd	r23, Y+2	; 0x02
    296c:	8d 81       	ldd	r24, Y+5	; 0x05
    296e:	9e 81       	ldd	r25, Y+6	; 0x06
    2970:	0e 94 51 20 	call	0x40a2	; 0x40a2 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    2974:	2f 81       	ldd	r18, Y+7	; 0x07
    2976:	22 23       	and	r18, r18
    2978:	71 f0       	breq	.+28     	; 0x2996 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    297a:	4b 81       	ldd	r20, Y+3	; 0x03
    297c:	5c 81       	ldd	r21, Y+4	; 0x04
    297e:	e1 2c       	mov	r14, r1
    2980:	f1 2c       	mov	r15, r1
    2982:	00 e0       	ldi	r16, 0x00	; 0
    2984:	10 e0       	ldi	r17, 0x00	; 0
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	bc 01       	movw	r22, r24
    298c:	ce 01       	movw	r24, r28
    298e:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    2992:	1f 82       	std	Y+7, r1	; 0x07
    2994:	0c c0       	rjmp	.+24     	; 0x29ae <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    2996:	e8 81       	ld	r30, Y
    2998:	2b e2       	ldi	r18, 0x2B	; 43
    299a:	e2 02       	muls	r30, r18
    299c:	f0 01       	movw	r30, r0
    299e:	11 24       	eor	r1, r1
    29a0:	e2 5d       	subi	r30, 0xD2	; 210
    29a2:	fa 4f       	sbci	r31, 0xFA	; 250
    29a4:	21 85       	ldd	r18, Z+9	; 0x09
    29a6:	23 30       	cpi	r18, 0x03	; 3
    29a8:	b9 f4       	brne	.+46     	; 0x29d8 <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    29aa:	91 83       	std	Z+1, r25	; 0x01
    29ac:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    29ae:	e8 81       	ld	r30, Y
    29b0:	8b e2       	ldi	r24, 0x2B	; 43
    29b2:	e8 02       	muls	r30, r24
    29b4:	f0 01       	movw	r30, r0
    29b6:	11 24       	eor	r1, r1
    29b8:	e2 5d       	subi	r30, 0xD2	; 210
    29ba:	fa 4f       	sbci	r31, 0xFA	; 250
    29bc:	85 89       	ldd	r24, Z+21	; 0x15
    29be:	96 89       	ldd	r25, Z+22	; 0x16
    29c0:	a7 89       	ldd	r26, Z+23	; 0x17
    29c2:	b0 8d       	ldd	r27, Z+24	; 0x18
    29c4:	89 2b       	or	r24, r25
    29c6:	8a 2b       	or	r24, r26
    29c8:	8b 2b       	or	r24, r27
    29ca:	41 f4       	brne	.+16     	; 0x29dc <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    29cc:	82 e0       	ldi	r24, 0x02	; 2
    29ce:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    29d0:	88 81       	ld	r24, Y
    29d2:	0e 94 af 13 	call	0x275e	; 0x275e <nrk_add_to_readyQ>
    29d6:	02 c0       	rjmp	.+4      	; 0x29dc <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    29d8:	8f ef       	ldi	r24, 0xFF	; 255
    29da:	01 c0       	rjmp	.+2      	; 0x29de <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
}
    29de:	df 91       	pop	r29
    29e0:	cf 91       	pop	r28
    29e2:	1f 91       	pop	r17
    29e4:	0f 91       	pop	r16
    29e6:	ff 90       	pop	r15
    29e8:	ef 90       	pop	r14
    29ea:	08 95       	ret

000029ec <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    29ec:	1f 93       	push	r17
    29ee:	cf 93       	push	r28
    29f0:	df 93       	push	r29
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
    29f6:	28 97       	sbiw	r28, 0x08	; 8
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	29 83       	std	Y+1, r18	; 0x01
    2a04:	3a 83       	std	Y+2, r19	; 0x02
    2a06:	4b 83       	std	Y+3, r20	; 0x03
    2a08:	5c 83       	std	Y+4, r21	; 0x04
    2a0a:	6d 83       	std	Y+5, r22	; 0x05
    2a0c:	7e 83       	std	Y+6, r23	; 0x06
    2a0e:	8f 83       	std	Y+7, r24	; 0x07
    2a10:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    2a12:	0e 94 12 0c 	call	0x1824	; 0x1824 <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    2a16:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_nrk_os_timer_get>
    2a1a:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    2a1c:	ce 01       	movw	r24, r28
    2a1e:	01 96       	adiw	r24, 0x01	; 1
    2a20:	0e 94 04 19 	call	0x3208	; 0x3208 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    2a24:	63 30       	cpi	r22, 0x03	; 3
    2a26:	71 05       	cpc	r23, r1
    2a28:	98 f0       	brcs	.+38     	; 0x2a50 <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2a2a:	e0 91 f0 05 	lds	r30, 0x05F0
    2a2e:	f0 91 f1 05 	lds	r31, 0x05F1
    2a32:	21 2f       	mov	r18, r17
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	62 0f       	add	r22, r18
    2a38:	73 1f       	adc	r23, r19
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	a0 e0       	ldi	r26, 0x00	; 0
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	85 8b       	std	Z+21, r24	; 0x15
    2a42:	96 8b       	std	Z+22, r25	; 0x16
    2a44:	a7 8b       	std	Z+23, r26	; 0x17
    2a46:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    2a48:	0e 94 14 0c 	call	0x1828	; 0x1828 <nrk_int_enable>

    return NRK_OK;
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	01 c0       	rjmp	.+2      	; 0x2a52 <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    2a50:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    2a52:	28 96       	adiw	r28, 0x08	; 8
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	df 91       	pop	r29
    2a60:	cf 91       	pop	r28
    2a62:	1f 91       	pop	r17
    2a64:	08 95       	ret

00002a66 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    2a66:	0e 94 24 20 	call	0x4048	; 0x4048 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    2a6a:	e0 91 f0 05 	lds	r30, 0x05F0
    2a6e:	f0 91 f1 05 	lds	r31, 0x05F1
    2a72:	85 81       	ldd	r24, Z+5	; 0x05
    2a74:	81 11       	cpse	r24, r1
    2a76:	f7 cf       	rjmp	.-18     	; 0x2a66 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    2a78:	08 95       	ret

00002a7a <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    2a7a:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    2a7c:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2a80:	0e 94 12 0c 	call	0x1824	; 0x1824 <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    2a84:	e0 91 f0 05 	lds	r30, 0x05F0
    2a88:	f0 91 f1 05 	lds	r31, 0x05F1
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	92 a7       	std	Z+42, r25	; 0x2a
    2a92:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    2a94:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2a96:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_nrk_os_timer_get>
    2a9a:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2a9c:	88 3f       	cpi	r24, 0xF8	; 248
    2a9e:	80 f4       	brcc	.+32     	; 0x2ac0 <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2aa0:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <_nrk_get_next_wakeup>
    2aa4:	2c 2f       	mov	r18, r28
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	2f 5f       	subi	r18, 0xFF	; 255
    2aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	28 17       	cp	r18, r24
    2ab0:	39 07       	cpc	r19, r25
    2ab2:	34 f4       	brge	.+12     	; 0x2ac0 <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    2ab4:	82 e0       	ldi	r24, 0x02	; 2
    2ab6:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    2ab8:	80 93 a9 04 	sts	0x04A9, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2abc:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2ac0:	0e 94 14 0c 	call	0x1828	; 0x1828 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2ac4:	0e 94 33 15 	call	0x2a66	; 0x2a66 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	cf 91       	pop	r28
    2acc:	08 95       	ret

00002ace <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    2ace:	e0 91 f0 05 	lds	r30, 0x05F0
    2ad2:	f0 91 f1 05 	lds	r31, 0x05F1
    2ad6:	80 85       	ldd	r24, Z+8	; 0x08
    2ad8:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    2adc:	e0 91 f0 05 	lds	r30, 0x05F0
    2ae0:	f0 91 f1 05 	lds	r31, 0x05F1
    2ae4:	84 e0       	ldi	r24, 0x04	; 4
    2ae6:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    2ae8:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <nrk_wait_until_next_period>
    return NRK_OK;
}
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	08 95       	ret

00002af0 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    2af0:	cf 93       	push	r28
    2af2:	df 93       	push	r29
    2af4:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    2af6:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <nrk_stack_check>

    if (p == 0)
    2afa:	20 97       	sbiw	r28, 0x00	; 0
    2afc:	11 f4       	brne	.+4      	; 0x2b02 <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    2afe:	c1 e0       	ldi	r28, 0x01	; 1
    2b00:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2b02:	0e 94 12 0c 	call	0x1824	; 0x1824 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2b06:	e0 91 f0 05 	lds	r30, 0x05F0
    2b0a:	f0 91 f1 05 	lds	r31, 0x05F1
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    2b12:	d2 a7       	std	Z+42, r29	; 0x2a
    2b14:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    2b16:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_nrk_os_timer_get>
    2b1a:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    2b1c:	88 3f       	cpi	r24, 0xF8	; 248
    2b1e:	80 f4       	brcc	.+32     	; 0x2b40 <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2b20:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <_nrk_get_next_wakeup>
    2b24:	2c 2f       	mov	r18, r28
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	2f 5f       	subi	r18, 0xFF	; 255
    2b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	28 17       	cp	r18, r24
    2b30:	39 07       	cpc	r19, r25
    2b32:	34 f4       	brge	.+12     	; 0x2b40 <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    2b34:	82 e0       	ldi	r24, 0x02	; 2
    2b36:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2b38:	80 93 a9 04 	sts	0x04A9, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2b3c:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2b40:	0e 94 14 0c 	call	0x1828	; 0x1828 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2b44:	0e 94 33 15 	call	0x2a66	; 0x2a66 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	df 91       	pop	r29
    2b4c:	cf 91       	pop	r28
    2b4e:	08 95       	ret

00002b50 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    2b50:	ef 92       	push	r14
    2b52:	ff 92       	push	r15
    2b54:	0f 93       	push	r16
    2b56:	1f 93       	push	r17
    2b58:	cf 93       	push	r28
    2b5a:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    2b5c:	0e 94 12 0c 	call	0x1824	; 0x1824 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2b60:	e0 91 f0 05 	lds	r30, 0x05F0
    2b64:	f0 91 f1 05 	lds	r31, 0x05F1
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2b6c:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_nrk_os_timer_get>
    2b70:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    2b72:	e0 91 f0 05 	lds	r30, 0x05F0
    2b76:	f0 91 f1 05 	lds	r31, 0x05F1
    2b7a:	e8 2e       	mov	r14, r24
    2b7c:	f1 2c       	mov	r15, r1
    2b7e:	c7 01       	movw	r24, r14
    2b80:	80 0f       	add	r24, r16
    2b82:	91 1f       	adc	r25, r17
    2b84:	a0 e0       	ldi	r26, 0x00	; 0
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	85 8b       	std	Z+21, r24	; 0x15
    2b8a:	96 8b       	std	Z+22, r25	; 0x16
    2b8c:	a7 8b       	std	Z+23, r26	; 0x17
    2b8e:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2b90:	c8 3f       	cpi	r28, 0xF8	; 248
    2b92:	78 f4       	brcc	.+30     	; 0x2bb2 <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2b94:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <_nrk_get_next_wakeup>
    2b98:	9f ef       	ldi	r25, 0xFF	; 255
    2b9a:	e9 1a       	sub	r14, r25
    2b9c:	f9 0a       	sbc	r15, r25
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	e8 16       	cp	r14, r24
    2ba2:	f9 06       	cpc	r15, r25
    2ba4:	34 f4       	brge	.+12     	; 0x2bb2 <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    2ba6:	82 e0       	ldi	r24, 0x02	; 2
    2ba8:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2baa:	80 93 a9 04 	sts	0x04A9, r24
            _nrk_set_next_wakeup (timer);
    2bae:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2bb2:	0e 94 14 0c 	call	0x1828	; 0x1828 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2bb6:	0e 94 33 15 	call	0x2a66	; 0x2a66 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	cf 91       	pop	r28
    2bbe:	1f 91       	pop	r17
    2bc0:	0f 91       	pop	r16
    2bc2:	ff 90       	pop	r15
    2bc4:	ef 90       	pop	r14
    2bc6:	08 95       	ret

00002bc8 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    2bc8:	cf 93       	push	r28
    2bca:	df 93       	push	r29
    2bcc:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    2bce:	0e 94 12 0c 	call	0x1824	; 0x1824 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2bd2:	e0 91 f0 05 	lds	r30, 0x05F0
    2bd6:	f0 91 f1 05 	lds	r31, 0x05F1
    2bda:	21 e0       	ldi	r18, 0x01	; 1
    2bdc:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    2bde:	ce 01       	movw	r24, r28
    2be0:	a0 e0       	ldi	r26, 0x00	; 0
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	85 8b       	std	Z+21, r24	; 0x15
    2be6:	96 8b       	std	Z+22, r25	; 0x16
    2be8:	a7 8b       	std	Z+23, r26	; 0x17
    2bea:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    2bec:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_nrk_os_timer_get>
    2bf0:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2bf2:	88 3f       	cpi	r24, 0xF8	; 248
    2bf4:	80 f4       	brcc	.+32     	; 0x2c16 <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2bf6:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <_nrk_get_next_wakeup>
    2bfa:	2c 2f       	mov	r18, r28
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	2f 5f       	subi	r18, 0xFF	; 255
    2c00:	3f 4f       	sbci	r19, 0xFF	; 255
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	28 17       	cp	r18, r24
    2c06:	39 07       	cpc	r19, r25
    2c08:	34 f4       	brge	.+12     	; 0x2c16 <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    2c0a:	82 e0       	ldi	r24, 0x02	; 2
    2c0c:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2c0e:	80 93 a9 04 	sts	0x04A9, r24
            _nrk_set_next_wakeup (timer);
    2c12:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2c16:	0e 94 14 0c 	call	0x1828	; 0x1828 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2c1a:	0e 94 33 15 	call	0x2a66	; 0x2a66 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	df 91       	pop	r29
    2c22:	cf 91       	pop	r28
    2c24:	08 95       	ret

00002c26 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    2c26:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    2c28:	0e 94 12 0c 	call	0x1824	; 0x1824 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2c2c:	e0 91 f0 05 	lds	r30, 0x05F0
    2c30:	f0 91 f1 05 	lds	r31, 0x05F1
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    2c38:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    2c3a:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_nrk_os_timer_get>
    2c3e:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2c40:	88 3f       	cpi	r24, 0xF8	; 248
    2c42:	80 f4       	brcc	.+32     	; 0x2c64 <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2c44:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <_nrk_get_next_wakeup>
    2c48:	2c 2f       	mov	r18, r28
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	2f 5f       	subi	r18, 0xFF	; 255
    2c4e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	28 17       	cp	r18, r24
    2c54:	39 07       	cpc	r19, r25
    2c56:	34 f4       	brge	.+12     	; 0x2c64 <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2c5c:	80 93 a9 04 	sts	0x04A9, r24
            _nrk_set_next_wakeup (timer);
    2c60:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2c64:	0e 94 14 0c 	call	0x1828	; 0x1828 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2c68:	0e 94 33 15 	call	0x2a66	; 0x2a66 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	cf 91       	pop	r28
    2c70:	08 95       	ret

00002c72 <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    2c72:	1f 93       	push	r17
    2c74:	cf 93       	push	r28
    2c76:	df 93       	push	r29
    2c78:	cd b7       	in	r28, 0x3d	; 61
    2c7a:	de b7       	in	r29, 0x3e	; 62
    2c7c:	28 97       	sbiw	r28, 0x08	; 8
    2c7e:	0f b6       	in	r0, 0x3f	; 63
    2c80:	f8 94       	cli
    2c82:	de bf       	out	0x3e, r29	; 62
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	cd bf       	out	0x3d, r28	; 61
    2c88:	29 83       	std	Y+1, r18	; 0x01
    2c8a:	3a 83       	std	Y+2, r19	; 0x02
    2c8c:	4b 83       	std	Y+3, r20	; 0x03
    2c8e:	5c 83       	std	Y+4, r21	; 0x04
    2c90:	6d 83       	std	Y+5, r22	; 0x05
    2c92:	7e 83       	std	Y+6, r23	; 0x06
    2c94:	8f 83       	std	Y+7, r24	; 0x07
    2c96:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    2c98:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <nrk_stack_check>

    nrk_int_disable ();
    2c9c:	0e 94 12 0c 	call	0x1824	; 0x1824 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2ca0:	e0 91 f0 05 	lds	r30, 0x05F0
    2ca4:	f0 91 f1 05 	lds	r31, 0x05F1
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	92 a7       	std	Z+42, r25	; 0x2a
    2cb2:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    2cb4:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_nrk_os_timer_get>
    2cb8:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    2cba:	ce 01       	movw	r24, r28
    2cbc:	01 96       	adiw	r24, 0x01	; 1
    2cbe:	0e 94 04 19 	call	0x3208	; 0x3208 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2cc2:	e0 91 f0 05 	lds	r30, 0x05F0
    2cc6:	f0 91 f1 05 	lds	r31, 0x05F1
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	81 0f       	add	r24, r17
    2cd0:	91 1d       	adc	r25, r1
    2cd2:	a1 1d       	adc	r26, r1
    2cd4:	b1 1d       	adc	r27, r1
    2cd6:	85 8b       	std	Z+21, r24	; 0x15
    2cd8:	96 8b       	std	Z+22, r25	; 0x16
    2cda:	a7 8b       	std	Z+23, r26	; 0x17
    2cdc:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2cde:	18 3f       	cpi	r17, 0xF8	; 248
    2ce0:	80 f4       	brcc	.+32     	; 0x2d02 <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2ce2:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <_nrk_get_next_wakeup>
    2ce6:	21 2f       	mov	r18, r17
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	2f 5f       	subi	r18, 0xFF	; 255
    2cec:	3f 4f       	sbci	r19, 0xFF	; 255
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	28 17       	cp	r18, r24
    2cf2:	39 07       	cpc	r19, r25
    2cf4:	34 f4       	brge	.+12     	; 0x2d02 <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    2cf6:	82 e0       	ldi	r24, 0x02	; 2
    2cf8:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    2cfa:	80 93 a9 04 	sts	0x04A9, r24
            _nrk_set_next_wakeup (timer);
    2cfe:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    2d02:	0e 94 14 0c 	call	0x1828	; 0x1828 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    2d06:	0e 94 33 15 	call	0x2a66	; 0x2a66 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	28 96       	adiw	r28, 0x08	; 8
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	1f 91       	pop	r17
    2d1e:	08 95       	ret

00002d20 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    2d20:	8f 92       	push	r8
    2d22:	9f 92       	push	r9
    2d24:	af 92       	push	r10
    2d26:	bf 92       	push	r11
    2d28:	cf 92       	push	r12
    2d2a:	df 92       	push	r13
    2d2c:	ef 92       	push	r14
    2d2e:	ff 92       	push	r15
    2d30:	0f 93       	push	r16
    2d32:	1f 93       	push	r17
    2d34:	cf 93       	push	r28
    2d36:	df 93       	push	r29
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	60 97       	sbiw	r28, 0x10	; 16
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
    2d48:	29 87       	std	Y+9, r18	; 0x09
    2d4a:	3a 87       	std	Y+10, r19	; 0x0a
    2d4c:	4b 87       	std	Y+11, r20	; 0x0b
    2d4e:	5c 87       	std	Y+12, r21	; 0x0c
    2d50:	6d 87       	std	Y+13, r22	; 0x0d
    2d52:	7e 87       	std	Y+14, r23	; 0x0e
    2d54:	8f 87       	std	Y+15, r24	; 0x0f
    2d56:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    2d58:	ce 01       	movw	r24, r28
    2d5a:	01 96       	adiw	r24, 0x01	; 1
    2d5c:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    2d60:	89 80       	ldd	r8, Y+1	; 0x01
    2d62:	9a 80       	ldd	r9, Y+2	; 0x02
    2d64:	ab 80       	ldd	r10, Y+3	; 0x03
    2d66:	bc 80       	ldd	r11, Y+4	; 0x04
    2d68:	cd 80       	ldd	r12, Y+5	; 0x05
    2d6a:	de 80       	ldd	r13, Y+6	; 0x06
    2d6c:	ef 80       	ldd	r14, Y+7	; 0x07
    2d6e:	f8 84       	ldd	r15, Y+8	; 0x08
    2d70:	09 85       	ldd	r16, Y+9	; 0x09
    2d72:	1a 85       	ldd	r17, Y+10	; 0x0a
    2d74:	2b 85       	ldd	r18, Y+11	; 0x0b
    2d76:	3c 85       	ldd	r19, Y+12	; 0x0c
    2d78:	4d 85       	ldd	r20, Y+13	; 0x0d
    2d7a:	5e 85       	ldd	r21, Y+14	; 0x0e
    2d7c:	6f 85       	ldd	r22, Y+15	; 0x0f
    2d7e:	78 89       	ldd	r23, Y+16	; 0x10
    2d80:	ce 01       	movw	r24, r28
    2d82:	09 96       	adiw	r24, 0x09	; 9
    2d84:	0e 94 49 17 	call	0x2e92	; 0x2e92 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    2d88:	8f 3f       	cpi	r24, 0xFF	; 255
    2d8a:	61 f0       	breq	.+24     	; 0x2da4 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    2d8c:	29 85       	ldd	r18, Y+9	; 0x09
    2d8e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d90:	4b 85       	ldd	r20, Y+11	; 0x0b
    2d92:	5c 85       	ldd	r21, Y+12	; 0x0c
    2d94:	6d 85       	ldd	r22, Y+13	; 0x0d
    2d96:	7e 85       	ldd	r23, Y+14	; 0x0e
    2d98:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d9a:	98 89       	ldd	r25, Y+16	; 0x10
    2d9c:	0e 94 39 16 	call	0x2c72	; 0x2c72 <nrk_wait>

    return NRK_OK;
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	01 c0       	rjmp	.+2      	; 0x2da6 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    2da4:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    2da6:	60 96       	adiw	r28, 0x10	; 16
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	df 91       	pop	r29
    2db4:	cf 91       	pop	r28
    2db6:	1f 91       	pop	r17
    2db8:	0f 91       	pop	r16
    2dba:	ff 90       	pop	r15
    2dbc:	ef 90       	pop	r14
    2dbe:	df 90       	pop	r13
    2dc0:	cf 90       	pop	r12
    2dc2:	bf 90       	pop	r11
    2dc4:	af 90       	pop	r10
    2dc6:	9f 90       	pop	r9
    2dc8:	8f 90       	pop	r8
    2dca:	08 95       	ret

00002dcc <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    2dcc:	e0 91 f0 05 	lds	r30, 0x05F0
    2dd0:	f0 91 f1 05 	lds	r31, 0x05F1
}
    2dd4:	80 85       	ldd	r24, Z+8	; 0x08
    2dd6:	08 95       	ret

00002dd8 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    2dd8:	0f 93       	push	r16
    2dda:	1f 93       	push	r17
    2ddc:	cf 93       	push	r28
    2dde:	df 93       	push	r29
    2de0:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    2de2:	1c 82       	std	Y+4, r1	; 0x04
    2de4:	1d 82       	std	Y+5, r1	; 0x05
    2de6:	1e 82       	std	Y+6, r1	; 0x06
    2de8:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    2dea:	80 91 e7 05 	lds	r24, 0x05E7
    2dee:	90 91 e8 05 	lds	r25, 0x05E8
    2df2:	a0 91 e9 05 	lds	r26, 0x05E9
    2df6:	b0 91 ea 05 	lds	r27, 0x05EA
    2dfa:	88 83       	st	Y, r24
    2dfc:	99 83       	std	Y+1, r25	; 0x01
    2dfe:	aa 83       	std	Y+2, r26	; 0x02
    2e00:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    2e02:	80 91 eb 05 	lds	r24, 0x05EB
    2e06:	90 91 ec 05 	lds	r25, 0x05EC
    2e0a:	a0 91 ed 05 	lds	r26, 0x05ED
    2e0e:	b0 91 ee 05 	lds	r27, 0x05EE
    2e12:	8c 83       	std	Y+4, r24	; 0x04
    2e14:	9d 83       	std	Y+5, r25	; 0x05
    2e16:	ae 83       	std	Y+6, r26	; 0x06
    2e18:	bf 83       	std	Y+7, r27	; 0x07
 
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    2e1a:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_nrk_os_timer_get>
    2e1e:	a8 2f       	mov	r26, r24
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	23 eb       	ldi	r18, 0xB3	; 179
    2e24:	36 ee       	ldi	r19, 0xE6	; 230
    2e26:	4e e0       	ldi	r20, 0x0E	; 14
    2e28:	50 e0       	ldi	r21, 0x00	; 0
    2e2a:	0e 94 72 22 	call	0x44e4	; 0x44e4 <__muluhisi3>
    2e2e:	0c 81       	ldd	r16, Y+4	; 0x04
    2e30:	1d 81       	ldd	r17, Y+5	; 0x05
    2e32:	2e 81       	ldd	r18, Y+6	; 0x06
    2e34:	3f 81       	ldd	r19, Y+7	; 0x07
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	80 0f       	add	r24, r16
    2e3c:	91 1f       	adc	r25, r17
    2e3e:	a2 1f       	adc	r26, r18
    2e40:	b3 1f       	adc	r27, r19
    2e42:	8c 83       	std	Y+4, r24	; 0x04
    2e44:	9d 83       	std	Y+5, r25	; 0x05
    2e46:	ae 83       	std	Y+6, r26	; 0x06
    2e48:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    2e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e4e:	ae 81       	ldd	r26, Y+6	; 0x06
    2e50:	bf 81       	ldd	r27, Y+7	; 0x07
    2e52:	81 15       	cp	r24, r1
    2e54:	2a ec       	ldi	r18, 0xCA	; 202
    2e56:	92 07       	cpc	r25, r18
    2e58:	2a e9       	ldi	r18, 0x9A	; 154
    2e5a:	a2 07       	cpc	r26, r18
    2e5c:	2b e3       	ldi	r18, 0x3B	; 59
    2e5e:	b2 07       	cpc	r27, r18
    2e60:	98 f0       	brcs	.+38     	; 0x2e88 <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    2e62:	9a 5c       	subi	r25, 0xCA	; 202
    2e64:	aa 49       	sbci	r26, 0x9A	; 154
    2e66:	bb 43       	sbci	r27, 0x3B	; 59
    2e68:	8c 83       	std	Y+4, r24	; 0x04
    2e6a:	9d 83       	std	Y+5, r25	; 0x05
    2e6c:	ae 83       	std	Y+6, r26	; 0x06
    2e6e:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    2e70:	88 81       	ld	r24, Y
    2e72:	99 81       	ldd	r25, Y+1	; 0x01
    2e74:	aa 81       	ldd	r26, Y+2	; 0x02
    2e76:	bb 81       	ldd	r27, Y+3	; 0x03
    2e78:	01 96       	adiw	r24, 0x01	; 1
    2e7a:	a1 1d       	adc	r26, r1
    2e7c:	b1 1d       	adc	r27, r1
    2e7e:	88 83       	st	Y, r24
    2e80:	99 83       	std	Y+1, r25	; 0x01
    2e82:	aa 83       	std	Y+2, r26	; 0x02
    2e84:	bb 83       	std	Y+3, r27	; 0x03
    2e86:	e1 cf       	rjmp	.-62     	; 0x2e4a <nrk_time_get+0x72>
    }

}
    2e88:	df 91       	pop	r29
    2e8a:	cf 91       	pop	r28
    2e8c:	1f 91       	pop	r17
    2e8e:	0f 91       	pop	r16
    2e90:	08 95       	ret

00002e92 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    2e92:	8f 92       	push	r8
    2e94:	9f 92       	push	r9
    2e96:	af 92       	push	r10
    2e98:	bf 92       	push	r11
    2e9a:	cf 92       	push	r12
    2e9c:	df 92       	push	r13
    2e9e:	ef 92       	push	r14
    2ea0:	ff 92       	push	r15
    2ea2:	0f 93       	push	r16
    2ea4:	1f 93       	push	r17
    2ea6:	cf 93       	push	r28
    2ea8:	df 93       	push	r29
    2eaa:	cd b7       	in	r28, 0x3d	; 61
    2eac:	de b7       	in	r29, 0x3e	; 62
    2eae:	60 97       	sbiw	r28, 0x10	; 16
    2eb0:	0f b6       	in	r0, 0x3f	; 63
    2eb2:	f8 94       	cli
    2eb4:	de bf       	out	0x3e, r29	; 62
    2eb6:	0f be       	out	0x3f, r0	; 63
    2eb8:	cd bf       	out	0x3d, r28	; 61
    2eba:	fc 01       	movw	r30, r24
    2ebc:	09 83       	std	Y+1, r16	; 0x01
    2ebe:	1a 83       	std	Y+2, r17	; 0x02
    2ec0:	2b 83       	std	Y+3, r18	; 0x03
    2ec2:	3c 83       	std	Y+4, r19	; 0x04
    2ec4:	4d 83       	std	Y+5, r20	; 0x05
    2ec6:	5e 83       	std	Y+6, r21	; 0x06
    2ec8:	6f 83       	std	Y+7, r22	; 0x07
    2eca:	78 87       	std	Y+8, r23	; 0x08
    2ecc:	89 86       	std	Y+9, r8	; 0x09
    2ece:	9a 86       	std	Y+10, r9	; 0x0a
    2ed0:	ab 86       	std	Y+11, r10	; 0x0b
    2ed2:	bc 86       	std	Y+12, r11	; 0x0c
    2ed4:	cd 86       	std	Y+13, r12	; 0x0d
    2ed6:	de 86       	std	Y+14, r13	; 0x0e
    2ed8:	ef 86       	std	Y+15, r14	; 0x0f
    2eda:	f8 8a       	std	Y+16, r15	; 0x10
    2edc:	09 81       	ldd	r16, Y+1	; 0x01
    2ede:	1a 81       	ldd	r17, Y+2	; 0x02
    2ee0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ee2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ee4:	4d 81       	ldd	r20, Y+5	; 0x05
    2ee6:	5e 81       	ldd	r21, Y+6	; 0x06
    2ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eea:	78 85       	ldd	r23, Y+8	; 0x08
    2eec:	c9 84       	ldd	r12, Y+9	; 0x09
    2eee:	da 84       	ldd	r13, Y+10	; 0x0a
    2ef0:	eb 84       	ldd	r14, Y+11	; 0x0b
    2ef2:	fc 84       	ldd	r15, Y+12	; 0x0c
    2ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef8:	af 85       	ldd	r26, Y+15	; 0x0f
    2efa:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    2efc:	0c 15       	cp	r16, r12
    2efe:	1d 05       	cpc	r17, r13
    2f00:	2e 05       	cpc	r18, r14
    2f02:	3f 05       	cpc	r19, r15
    2f04:	f0 f1       	brcs	.+124    	; 0x2f82 <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    2f06:	c0 16       	cp	r12, r16
    2f08:	d1 06       	cpc	r13, r17
    2f0a:	e2 06       	cpc	r14, r18
    2f0c:	f3 06       	cpc	r15, r19
    2f0e:	91 f4       	brne	.+36     	; 0x2f34 <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    2f10:	48 17       	cp	r20, r24
    2f12:	59 07       	cpc	r21, r25
    2f14:	6a 07       	cpc	r22, r26
    2f16:	7b 07       	cpc	r23, r27
    2f18:	a0 f1       	brcs	.+104    	; 0x2f82 <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    2f1a:	48 1b       	sub	r20, r24
    2f1c:	59 0b       	sbc	r21, r25
    2f1e:	6a 0b       	sbc	r22, r26
    2f20:	7b 0b       	sbc	r23, r27
    2f22:	44 83       	std	Z+4, r20	; 0x04
    2f24:	55 83       	std	Z+5, r21	; 0x05
    2f26:	66 83       	std	Z+6, r22	; 0x06
    2f28:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    2f2a:	10 82       	st	Z, r1
    2f2c:	11 82       	std	Z+1, r1	; 0x01
    2f2e:	12 82       	std	Z+2, r1	; 0x02
    2f30:	13 82       	std	Z+3, r1	; 0x03
    2f32:	25 c0       	rjmp	.+74     	; 0x2f7e <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    2f34:	48 17       	cp	r20, r24
    2f36:	59 07       	cpc	r21, r25
    2f38:	6a 07       	cpc	r22, r26
    2f3a:	7b 07       	cpc	r23, r27
    2f3c:	80 f4       	brcc	.+32     	; 0x2f5e <nrk_time_sub+0xcc>
{
	high.secs--;
    2f3e:	01 50       	subi	r16, 0x01	; 1
    2f40:	11 09       	sbc	r17, r1
    2f42:	21 09       	sbc	r18, r1
    2f44:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    2f46:	0c 19       	sub	r16, r12
    2f48:	1d 09       	sbc	r17, r13
    2f4a:	2e 09       	sbc	r18, r14
    2f4c:	3f 09       	sbc	r19, r15
    2f4e:	00 83       	st	Z, r16
    2f50:	11 83       	std	Z+1, r17	; 0x01
    2f52:	22 83       	std	Z+2, r18	; 0x02
    2f54:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    2f56:	56 53       	subi	r21, 0x36	; 54
    2f58:	65 46       	sbci	r22, 0x65	; 101
    2f5a:	74 4c       	sbci	r23, 0xC4	; 196
    2f5c:	08 c0       	rjmp	.+16     	; 0x2f6e <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    2f5e:	0c 19       	sub	r16, r12
    2f60:	1d 09       	sbc	r17, r13
    2f62:	2e 09       	sbc	r18, r14
    2f64:	3f 09       	sbc	r19, r15
    2f66:	00 83       	st	Z, r16
    2f68:	11 83       	std	Z+1, r17	; 0x01
    2f6a:	22 83       	std	Z+2, r18	; 0x02
    2f6c:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    2f6e:	48 1b       	sub	r20, r24
    2f70:	59 0b       	sbc	r21, r25
    2f72:	6a 0b       	sbc	r22, r26
    2f74:	7b 0b       	sbc	r23, r27
    2f76:	44 83       	std	Z+4, r20	; 0x04
    2f78:	55 83       	std	Z+5, r21	; 0x05
    2f7a:	66 83       	std	Z+6, r22	; 0x06
    2f7c:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	01 c0       	rjmp	.+2      	; 0x2f84 <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    2f82:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    2f84:	60 96       	adiw	r28, 0x10	; 16
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	f8 94       	cli
    2f8a:	de bf       	out	0x3e, r29	; 62
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	cd bf       	out	0x3d, r28	; 61
    2f90:	df 91       	pop	r29
    2f92:	cf 91       	pop	r28
    2f94:	1f 91       	pop	r17
    2f96:	0f 91       	pop	r16
    2f98:	ff 90       	pop	r15
    2f9a:	ef 90       	pop	r14
    2f9c:	df 90       	pop	r13
    2f9e:	cf 90       	pop	r12
    2fa0:	bf 90       	pop	r11
    2fa2:	af 90       	pop	r10
    2fa4:	9f 90       	pop	r9
    2fa6:	8f 90       	pop	r8
    2fa8:	08 95       	ret

00002faa <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    2faa:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    2fac:	44 81       	ldd	r20, Z+4	; 0x04
    2fae:	55 81       	ldd	r21, Z+5	; 0x05
    2fb0:	66 81       	ldd	r22, Z+6	; 0x06
    2fb2:	77 81       	ldd	r23, Z+7	; 0x07
    2fb4:	41 15       	cp	r20, r1
    2fb6:	8a ec       	ldi	r24, 0xCA	; 202
    2fb8:	58 07       	cpc	r21, r24
    2fba:	8a e9       	ldi	r24, 0x9A	; 154
    2fbc:	68 07       	cpc	r22, r24
    2fbe:	8b e3       	ldi	r24, 0x3B	; 59
    2fc0:	78 07       	cpc	r23, r24
    2fc2:	98 f0       	brcs	.+38     	; 0x2fea <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    2fc4:	5a 5c       	subi	r21, 0xCA	; 202
    2fc6:	6a 49       	sbci	r22, 0x9A	; 154
    2fc8:	7b 43       	sbci	r23, 0x3B	; 59
    2fca:	44 83       	std	Z+4, r20	; 0x04
    2fcc:	55 83       	std	Z+5, r21	; 0x05
    2fce:	66 83       	std	Z+6, r22	; 0x06
    2fd0:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    2fd2:	80 81       	ld	r24, Z
    2fd4:	91 81       	ldd	r25, Z+1	; 0x01
    2fd6:	a2 81       	ldd	r26, Z+2	; 0x02
    2fd8:	b3 81       	ldd	r27, Z+3	; 0x03
    2fda:	01 96       	adiw	r24, 0x01	; 1
    2fdc:	a1 1d       	adc	r26, r1
    2fde:	b1 1d       	adc	r27, r1
    2fe0:	80 83       	st	Z, r24
    2fe2:	91 83       	std	Z+1, r25	; 0x01
    2fe4:	a2 83       	std	Z+2, r26	; 0x02
    2fe6:	b3 83       	std	Z+3, r27	; 0x03
    2fe8:	e1 cf       	rjmp	.-62     	; 0x2fac <nrk_time_compact_nanos+0x2>
    }
}
    2fea:	08 95       	ret

00002fec <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    2fec:	8f 92       	push	r8
    2fee:	9f 92       	push	r9
    2ff0:	af 92       	push	r10
    2ff2:	bf 92       	push	r11
    2ff4:	cf 92       	push	r12
    2ff6:	df 92       	push	r13
    2ff8:	ef 92       	push	r14
    2ffa:	ff 92       	push	r15
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
    3000:	cf 93       	push	r28
    3002:	df 93       	push	r29
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
    3008:	60 97       	sbiw	r28, 0x10	; 16
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	f8 94       	cli
    300e:	de bf       	out	0x3e, r29	; 62
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	09 83       	std	Y+1, r16	; 0x01
    3016:	1a 83       	std	Y+2, r17	; 0x02
    3018:	2b 83       	std	Y+3, r18	; 0x03
    301a:	3c 83       	std	Y+4, r19	; 0x04
    301c:	4d 83       	std	Y+5, r20	; 0x05
    301e:	5e 83       	std	Y+6, r21	; 0x06
    3020:	6f 83       	std	Y+7, r22	; 0x07
    3022:	78 87       	std	Y+8, r23	; 0x08
    3024:	89 86       	std	Y+9, r8	; 0x09
    3026:	9a 86       	std	Y+10, r9	; 0x0a
    3028:	ab 86       	std	Y+11, r10	; 0x0b
    302a:	bc 86       	std	Y+12, r11	; 0x0c
    302c:	cd 86       	std	Y+13, r12	; 0x0d
    302e:	de 86       	std	Y+14, r13	; 0x0e
    3030:	ef 86       	std	Y+15, r14	; 0x0f
    3032:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    3034:	09 85       	ldd	r16, Y+9	; 0x09
    3036:	1a 85       	ldd	r17, Y+10	; 0x0a
    3038:	2b 85       	ldd	r18, Y+11	; 0x0b
    303a:	3c 85       	ldd	r19, Y+12	; 0x0c
    303c:	49 81       	ldd	r20, Y+1	; 0x01
    303e:	5a 81       	ldd	r21, Y+2	; 0x02
    3040:	6b 81       	ldd	r22, Y+3	; 0x03
    3042:	7c 81       	ldd	r23, Y+4	; 0x04
    3044:	40 0f       	add	r20, r16
    3046:	51 1f       	adc	r21, r17
    3048:	62 1f       	adc	r22, r18
    304a:	73 1f       	adc	r23, r19
    304c:	fc 01       	movw	r30, r24
    304e:	40 83       	st	Z, r20
    3050:	51 83       	std	Z+1, r21	; 0x01
    3052:	62 83       	std	Z+2, r22	; 0x02
    3054:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    3056:	0d 85       	ldd	r16, Y+13	; 0x0d
    3058:	1e 85       	ldd	r17, Y+14	; 0x0e
    305a:	2f 85       	ldd	r18, Y+15	; 0x0f
    305c:	38 89       	ldd	r19, Y+16	; 0x10
    305e:	4d 81       	ldd	r20, Y+5	; 0x05
    3060:	5e 81       	ldd	r21, Y+6	; 0x06
    3062:	6f 81       	ldd	r22, Y+7	; 0x07
    3064:	78 85       	ldd	r23, Y+8	; 0x08
    3066:	40 0f       	add	r20, r16
    3068:	51 1f       	adc	r21, r17
    306a:	62 1f       	adc	r22, r18
    306c:	73 1f       	adc	r23, r19
    306e:	44 83       	std	Z+4, r20	; 0x04
    3070:	55 83       	std	Z+5, r21	; 0x05
    3072:	66 83       	std	Z+6, r22	; 0x06
    3074:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    3076:	0e 94 d5 17 	call	0x2faa	; 0x2faa <nrk_time_compact_nanos>
return NRK_OK;
}
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	60 96       	adiw	r28, 0x10	; 16
    307e:	0f b6       	in	r0, 0x3f	; 63
    3080:	f8 94       	cli
    3082:	de bf       	out	0x3e, r29	; 62
    3084:	0f be       	out	0x3f, r0	; 63
    3086:	cd bf       	out	0x3d, r28	; 61
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	1f 91       	pop	r17
    308e:	0f 91       	pop	r16
    3090:	ff 90       	pop	r15
    3092:	ef 90       	pop	r14
    3094:	df 90       	pop	r13
    3096:	cf 90       	pop	r12
    3098:	bf 90       	pop	r11
    309a:	af 90       	pop	r10
    309c:	9f 90       	pop	r9
    309e:	8f 90       	pop	r8
    30a0:	08 95       	ret

000030a2 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    30a2:	e7 ee       	ldi	r30, 0xE7	; 231
    30a4:	f5 e0       	ldi	r31, 0x05	; 5
    30a6:	60 83       	st	Z, r22
    30a8:	71 83       	std	Z+1, r23	; 0x01
    30aa:	82 83       	std	Z+2, r24	; 0x02
    30ac:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    30ae:	24 83       	std	Z+4, r18	; 0x04
    30b0:	35 83       	std	Z+5, r19	; 0x05
    30b2:	46 83       	std	Z+6, r20	; 0x06
    30b4:	57 83       	std	Z+7, r21	; 0x07
    30b6:	08 95       	ret

000030b8 <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    30b8:	2f 92       	push	r2
    30ba:	3f 92       	push	r3
    30bc:	4f 92       	push	r4
    30be:	5f 92       	push	r5
    30c0:	6f 92       	push	r6
    30c2:	7f 92       	push	r7
    30c4:	8f 92       	push	r8
    30c6:	9f 92       	push	r9
    30c8:	af 92       	push	r10
    30ca:	bf 92       	push	r11
    30cc:	cf 92       	push	r12
    30ce:	df 92       	push	r13
    30d0:	ef 92       	push	r14
    30d2:	ff 92       	push	r15
    30d4:	0f 93       	push	r16
    30d6:	1f 93       	push	r17
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    30d8:	fc 01       	movw	r30, r24
    30da:	c0 80       	ld	r12, Z
    30dc:	d1 80       	ldd	r13, Z+1	; 0x01
    30de:	e2 80       	ldd	r14, Z+2	; 0x02
    30e0:	f3 80       	ldd	r15, Z+3	; 0x03
    30e2:	64 81       	ldd	r22, Z+4	; 0x04
    30e4:	75 81       	ldd	r23, Z+5	; 0x05
    30e6:	86 81       	ldd	r24, Z+6	; 0x06
    30e8:	97 81       	ldd	r25, Z+7	; 0x07
    30ea:	c1 14       	cp	r12, r1
    30ec:	d1 04       	cpc	r13, r1
    30ee:	e1 04       	cpc	r14, r1
    30f0:	f1 04       	cpc	r15, r1
    30f2:	c1 f1       	breq	.+112    	; 0x3164 <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    30f4:	f2 e4       	ldi	r31, 0x42	; 66
    30f6:	cf 16       	cp	r12, r31
    30f8:	d1 04       	cpc	r13, r1
    30fa:	e1 04       	cpc	r14, r1
    30fc:	f1 04       	cpc	r15, r1
    30fe:	d0 f5       	brcc	.+116    	; 0x3174 <_nrk_time_to_ticks+0xbc>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    3100:	1b 01       	movw	r2, r22
    3102:	2c 01       	movw	r4, r24
    3104:	61 2c       	mov	r6, r1
    3106:	71 2c       	mov	r7, r1
    3108:	43 01       	movw	r8, r6
    310a:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    310c:	8e 2f       	mov	r24, r30
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	a0 e0       	ldi	r26, 0x00	; 0
    3112:	b0 e0       	ldi	r27, 0x00	; 0
    3114:	8c 15       	cp	r24, r12
    3116:	9d 05       	cpc	r25, r13
    3118:	ae 05       	cpc	r26, r14
    311a:	bf 05       	cpc	r27, r15
    311c:	88 f4       	brcc	.+34     	; 0x3140 <_nrk_time_to_ticks+0x88>
    311e:	91 01       	movw	r18, r2
    3120:	a2 01       	movw	r20, r4
    3122:	b3 01       	movw	r22, r6
    3124:	c4 01       	movw	r24, r8
    3126:	36 53       	subi	r19, 0x36	; 54
    3128:	45 46       	sbci	r20, 0x65	; 101
    312a:	54 4c       	sbci	r21, 0xC4	; 196
    312c:	6f 4f       	sbci	r22, 0xFF	; 255
    312e:	7f 4f       	sbci	r23, 0xFF	; 255
    3130:	8f 4f       	sbci	r24, 0xFF	; 255
    3132:	9f 4f       	sbci	r25, 0xFF	; 255
    3134:	19 01       	movw	r2, r18
    3136:	2a 01       	movw	r4, r20
    3138:	3b 01       	movw	r6, r22
    313a:	4c 01       	movw	r8, r24
    313c:	ef 5f       	subi	r30, 0xFF	; 255
    313e:	e6 cf       	rjmp	.-52     	; 0x310c <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3140:	83 eb       	ldi	r24, 0xB3	; 179
    3142:	a8 2e       	mov	r10, r24
    3144:	96 ee       	ldi	r25, 0xE6	; 230
    3146:	b9 2e       	mov	r11, r25
    3148:	2e e0       	ldi	r18, 0x0E	; 14
    314a:	c2 2e       	mov	r12, r18
    314c:	d1 2c       	mov	r13, r1
    314e:	e1 2c       	mov	r14, r1
    3150:	f1 2c       	mov	r15, r1
    3152:	00 e0       	ldi	r16, 0x00	; 0
    3154:	10 e0       	ldi	r17, 0x00	; 0
    3156:	91 01       	movw	r18, r2
    3158:	a2 01       	movw	r20, r4
    315a:	b3 01       	movw	r22, r6
    315c:	c4 01       	movw	r24, r8
    315e:	0e 94 b1 22 	call	0x4562	; 0x4562 <__udivdi3>
    3162:	06 c0       	rjmp	.+12     	; 0x3170 <_nrk_time_to_ticks+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    3164:	23 eb       	ldi	r18, 0xB3	; 179
    3166:	36 ee       	ldi	r19, 0xE6	; 230
    3168:	4e e0       	ldi	r20, 0x0E	; 14
    316a:	50 e0       	ldi	r21, 0x00	; 0
    316c:	0e 94 8d 22 	call	0x451a	; 0x451a <__udivmodsi4>
    3170:	c9 01       	movw	r24, r18
    3172:	02 c0       	rjmp	.+4      	; 0x3178 <_nrk_time_to_ticks+0xc0>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    3178:	1f 91       	pop	r17
    317a:	0f 91       	pop	r16
    317c:	ff 90       	pop	r15
    317e:	ef 90       	pop	r14
    3180:	df 90       	pop	r13
    3182:	cf 90       	pop	r12
    3184:	bf 90       	pop	r11
    3186:	af 90       	pop	r10
    3188:	9f 90       	pop	r9
    318a:	8f 90       	pop	r8
    318c:	7f 90       	pop	r7
    318e:	6f 90       	pop	r6
    3190:	5f 90       	pop	r5
    3192:	4f 90       	pop	r4
    3194:	3f 90       	pop	r3
    3196:	2f 90       	pop	r2
    3198:	08 95       	ret

0000319a <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    319a:	cf 92       	push	r12
    319c:	df 92       	push	r13
    319e:	ef 92       	push	r14
    31a0:	ff 92       	push	r15
    31a2:	cf 93       	push	r28
    31a4:	df 93       	push	r29
    31a6:	cd b7       	in	r28, 0x3d	; 61
    31a8:	de b7       	in	r29, 0x3e	; 62
    31aa:	28 97       	sbiw	r28, 0x08	; 8
    31ac:	0f b6       	in	r0, 0x3f	; 63
    31ae:	f8 94       	cli
    31b0:	de bf       	out	0x3e, r29	; 62
    31b2:	0f be       	out	0x3f, r0	; 63
    31b4:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    31b6:	6b 01       	movw	r12, r22
    31b8:	7c 01       	movw	r14, r24
    31ba:	2a e0       	ldi	r18, 0x0A	; 10
    31bc:	f6 94       	lsr	r15
    31be:	e7 94       	ror	r14
    31c0:	d7 94       	ror	r13
    31c2:	c7 94       	ror	r12
    31c4:	2a 95       	dec	r18
    31c6:	d1 f7       	brne	.-12     	; 0x31bc <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    31c8:	c9 82       	std	Y+1, r12	; 0x01
    31ca:	da 82       	std	Y+2, r13	; 0x02
    31cc:	eb 82       	std	Y+3, r14	; 0x03
    31ce:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    31d0:	9b 01       	movw	r18, r22
    31d2:	ac 01       	movw	r20, r24
    31d4:	33 70       	andi	r19, 0x03	; 3
    31d6:	44 27       	eor	r20, r20
    31d8:	55 27       	eor	r21, r21
    31da:	63 eb       	ldi	r22, 0xB3	; 179
    31dc:	76 ee       	ldi	r23, 0xE6	; 230
    31de:	8e e0       	ldi	r24, 0x0E	; 14
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	0e 94 7d 22 	call	0x44fa	; 0x44fa <__mulsi3>

return t;
    31e6:	2c 2d       	mov	r18, r12
    31e8:	3a 81       	ldd	r19, Y+2	; 0x02
    31ea:	4b 81       	ldd	r20, Y+3	; 0x03
    31ec:	5c 81       	ldd	r21, Y+4	; 0x04
}
    31ee:	28 96       	adiw	r28, 0x08	; 8
    31f0:	0f b6       	in	r0, 0x3f	; 63
    31f2:	f8 94       	cli
    31f4:	de bf       	out	0x3e, r29	; 62
    31f6:	0f be       	out	0x3f, r0	; 63
    31f8:	cd bf       	out	0x3d, r28	; 61
    31fa:	df 91       	pop	r29
    31fc:	cf 91       	pop	r28
    31fe:	ff 90       	pop	r15
    3200:	ef 90       	pop	r14
    3202:	df 90       	pop	r13
    3204:	cf 90       	pop	r12
    3206:	08 95       	ret

00003208 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    3208:	2f 92       	push	r2
    320a:	3f 92       	push	r3
    320c:	4f 92       	push	r4
    320e:	5f 92       	push	r5
    3210:	6f 92       	push	r6
    3212:	7f 92       	push	r7
    3214:	8f 92       	push	r8
    3216:	9f 92       	push	r9
    3218:	af 92       	push	r10
    321a:	bf 92       	push	r11
    321c:	cf 92       	push	r12
    321e:	df 92       	push	r13
    3220:	ef 92       	push	r14
    3222:	ff 92       	push	r15
    3224:	0f 93       	push	r16
    3226:	1f 93       	push	r17
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3228:	fc 01       	movw	r30, r24
    322a:	c0 80       	ld	r12, Z
    322c:	d1 80       	ldd	r13, Z+1	; 0x01
    322e:	e2 80       	ldd	r14, Z+2	; 0x02
    3230:	f3 80       	ldd	r15, Z+3	; 0x03
    3232:	64 81       	ldd	r22, Z+4	; 0x04
    3234:	75 81       	ldd	r23, Z+5	; 0x05
    3236:	86 81       	ldd	r24, Z+6	; 0x06
    3238:	97 81       	ldd	r25, Z+7	; 0x07
    323a:	c1 14       	cp	r12, r1
    323c:	d1 04       	cpc	r13, r1
    323e:	e1 04       	cpc	r14, r1
    3240:	f1 04       	cpc	r15, r1
    3242:	99 f1       	breq	.+102    	; 0x32aa <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    3244:	1b 01       	movw	r2, r22
    3246:	2c 01       	movw	r4, r24
    3248:	61 2c       	mov	r6, r1
    324a:	71 2c       	mov	r7, r1
    324c:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    324e:	e0 e0       	ldi	r30, 0x00	; 0
    3250:	8e 2f       	mov	r24, r30
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	a0 e0       	ldi	r26, 0x00	; 0
    3256:	b0 e0       	ldi	r27, 0x00	; 0
    3258:	8c 15       	cp	r24, r12
    325a:	9d 05       	cpc	r25, r13
    325c:	ae 05       	cpc	r26, r14
    325e:	bf 05       	cpc	r27, r15
    3260:	88 f4       	brcc	.+34     	; 0x3284 <_nrk_time_to_ticks_long+0x7c>
    3262:	91 01       	movw	r18, r2
    3264:	a2 01       	movw	r20, r4
    3266:	b3 01       	movw	r22, r6
    3268:	c4 01       	movw	r24, r8
    326a:	36 53       	subi	r19, 0x36	; 54
    326c:	45 46       	sbci	r20, 0x65	; 101
    326e:	54 4c       	sbci	r21, 0xC4	; 196
    3270:	6f 4f       	sbci	r22, 0xFF	; 255
    3272:	7f 4f       	sbci	r23, 0xFF	; 255
    3274:	8f 4f       	sbci	r24, 0xFF	; 255
    3276:	9f 4f       	sbci	r25, 0xFF	; 255
    3278:	19 01       	movw	r2, r18
    327a:	2a 01       	movw	r4, r20
    327c:	3b 01       	movw	r6, r22
    327e:	4c 01       	movw	r8, r24
    3280:	ef 5f       	subi	r30, 0xFF	; 255
    3282:	e6 cf       	rjmp	.-52     	; 0x3250 <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3284:	83 eb       	ldi	r24, 0xB3	; 179
    3286:	a8 2e       	mov	r10, r24
    3288:	96 ee       	ldi	r25, 0xE6	; 230
    328a:	b9 2e       	mov	r11, r25
    328c:	2e e0       	ldi	r18, 0x0E	; 14
    328e:	c2 2e       	mov	r12, r18
    3290:	d1 2c       	mov	r13, r1
    3292:	e1 2c       	mov	r14, r1
    3294:	f1 2c       	mov	r15, r1
    3296:	00 e0       	ldi	r16, 0x00	; 0
    3298:	10 e0       	ldi	r17, 0x00	; 0
    329a:	91 01       	movw	r18, r2
    329c:	a2 01       	movw	r20, r4
    329e:	b3 01       	movw	r22, r6
    32a0:	c4 01       	movw	r24, r8
    32a2:	0e 94 b1 22 	call	0x4562	; 0x4562 <__udivdi3>
    32a6:	ca 01       	movw	r24, r20
    32a8:	07 c0       	rjmp	.+14     	; 0x32b8 <_nrk_time_to_ticks_long+0xb0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    32aa:	23 eb       	ldi	r18, 0xB3	; 179
    32ac:	36 ee       	ldi	r19, 0xE6	; 230
    32ae:	4e e0       	ldi	r20, 0x0E	; 14
    32b0:	50 e0       	ldi	r21, 0x00	; 0
    32b2:	0e 94 8d 22 	call	0x451a	; 0x451a <__udivmodsi4>
    32b6:	ca 01       	movw	r24, r20
}
return ticks;
}
    32b8:	b9 01       	movw	r22, r18
    32ba:	1f 91       	pop	r17
    32bc:	0f 91       	pop	r16
    32be:	ff 90       	pop	r15
    32c0:	ef 90       	pop	r14
    32c2:	df 90       	pop	r13
    32c4:	cf 90       	pop	r12
    32c6:	bf 90       	pop	r11
    32c8:	af 90       	pop	r10
    32ca:	9f 90       	pop	r9
    32cc:	8f 90       	pop	r8
    32ce:	7f 90       	pop	r7
    32d0:	6f 90       	pop	r6
    32d2:	5f 90       	pop	r5
    32d4:	4f 90       	pop	r4
    32d6:	3f 90       	pop	r3
    32d8:	2f 90       	pop	r2
    32da:	08 95       	ret

000032dc <nrk_idle_task>:
{
  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    32dc:	c1 e0       	ldi	r28, 0x01	; 1
{
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{
  nrk_stack_check(); 
    32de:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    32e2:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <_nrk_get_next_wakeup>
    32e6:	84 30       	cpi	r24, 0x04	; 4
    32e8:	10 f4       	brcc	.+4      	; 0x32ee <nrk_idle_task+0x12>
    {
	    _nrk_cpu_state=CPU_IDLE;
    32ea:	c0 93 e4 05 	sts	0x05E4, r28
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
	    nrk_sleep();
	#else
	    nrk_idle();
    32ee:	0e 94 24 20 	call	0x4048	; 0x4048 <nrk_idle>
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    32f2:	80 91 ac 04 	lds	r24, 0x04AC
    32f6:	85 35       	cpi	r24, 0x55	; 85
    32f8:	19 f0       	breq	.+6      	; 0x3300 <nrk_idle_task+0x24>
    32fa:	88 e0       	ldi	r24, 0x08	; 8
    32fc:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3300:	80 91 7e 41 	lds	r24, 0x417E
    3304:	85 35       	cpi	r24, 0x55	; 85
    3306:	59 f3       	breq	.-42     	; 0x32de <nrk_idle_task+0x2>
    3308:	88 e0       	ldi	r24, 0x08	; 8
    330a:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <nrk_error_add>
    330e:	e7 cf       	rjmp	.-50     	; 0x32de <nrk_idle_task+0x2>

00003310 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    3310:	2f 92       	push	r2
    3312:	3f 92       	push	r3
    3314:	4f 92       	push	r4
    3316:	5f 92       	push	r5
    3318:	6f 92       	push	r6
    331a:	7f 92       	push	r7
    331c:	8f 92       	push	r8
    331e:	9f 92       	push	r9
    3320:	af 92       	push	r10
    3322:	bf 92       	push	r11
    3324:	cf 92       	push	r12
    3326:	df 92       	push	r13
    3328:	ef 92       	push	r14
    332a:	ff 92       	push	r15
    332c:	0f 93       	push	r16
    332e:	1f 93       	push	r17
    3330:	cf 93       	push	r28
    3332:	df 93       	push	r29
    3334:	00 d0       	rcall	.+0      	; 0x3336 <_nrk_scheduler+0x26>
    3336:	00 d0       	rcall	.+0      	; 0x3338 <_nrk_scheduler+0x28>
    3338:	1f 92       	push	r1
    333a:	cd b7       	in	r28, 0x3d	; 61
    333c:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    nrk_int_enable();   // this should be removed...  Not needed
    333e:	0e 94 14 0c 	call	0x1828	; 0x1828 <nrk_int_enable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_precision_os_timer_reset();
    3342:	0e 94 49 1c 	call	0x3892	; 0x3892 <_nrk_precision_os_timer_reset>
    _nrk_high_speed_timer_reset();
    3346:	0e 94 67 1c 	call	0x38ce	; 0x38ce <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    334a:	0e 94 6f 1c 	call	0x38de	; 0x38de <_nrk_high_speed_timer_get>
    334e:	9b 83       	std	Y+3, r25	; 0x03
    3350:	8a 83       	std	Y+2, r24	; 0x02
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    3352:	8a ef       	ldi	r24, 0xFA	; 250
    3354:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    3358:	a0 91 a9 04 	lds	r26, 0x04A9
    335c:	b0 e0       	ldi	r27, 0x00	; 0
    335e:	23 eb       	ldi	r18, 0xB3	; 179
    3360:	36 ee       	ldi	r19, 0xE6	; 230
    3362:	4e e0       	ldi	r20, 0x0E	; 14
    3364:	50 e0       	ldi	r21, 0x00	; 0
    3366:	0e 94 72 22 	call	0x44e4	; 0x44e4 <__muluhisi3>
    336a:	00 91 eb 05 	lds	r16, 0x05EB
    336e:	10 91 ec 05 	lds	r17, 0x05EC
    3372:	20 91 ed 05 	lds	r18, 0x05ED
    3376:	30 91 ee 05 	lds	r19, 0x05EE
    337a:	6b 01       	movw	r12, r22
    337c:	7c 01       	movw	r14, r24
    337e:	c0 0e       	add	r12, r16
    3380:	d1 1e       	adc	r13, r17
    3382:	e2 1e       	adc	r14, r18
    3384:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3386:	c7 01       	movw	r24, r14
    3388:	b6 01       	movw	r22, r12
    338a:	23 eb       	ldi	r18, 0xB3	; 179
    338c:	36 ee       	ldi	r19, 0xE6	; 230
    338e:	4e e0       	ldi	r20, 0x0E	; 14
    3390:	50 e0       	ldi	r21, 0x00	; 0
    3392:	0e 94 8d 22 	call	0x451a	; 0x451a <__udivmodsi4>
    3396:	26 01       	movw	r4, r12
    3398:	37 01       	movw	r6, r14
    339a:	46 1a       	sub	r4, r22
    339c:	57 0a       	sbc	r5, r23
    339e:	68 0a       	sbc	r6, r24
    33a0:	79 0a       	sbc	r7, r25
    33a2:	d3 01       	movw	r26, r6
    33a4:	c2 01       	movw	r24, r4
    33a6:	00 91 e7 05 	lds	r16, 0x05E7
    33aa:	10 91 e8 05 	lds	r17, 0x05E8
    33ae:	20 91 e9 05 	lds	r18, 0x05E9
    33b2:	30 91 ea 05 	lds	r19, 0x05EA

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    33b6:	43 eb       	ldi	r20, 0xB3	; 179
    33b8:	84 2e       	mov	r8, r20
    33ba:	46 ee       	ldi	r20, 0xE6	; 230
    33bc:	94 2e       	mov	r9, r20
    33be:	4e e0       	ldi	r20, 0x0E	; 14
    33c0:	a4 2e       	mov	r10, r20
    33c2:	b1 2c       	mov	r11, r1
    33c4:	68 01       	movw	r12, r16
    33c6:	79 01       	movw	r14, r18
    33c8:	4f ef       	ldi	r20, 0xFF	; 255
    33ca:	c4 1a       	sub	r12, r20
    33cc:	d4 0a       	sbc	r13, r20
    33ce:	e4 0a       	sbc	r14, r20
    33d0:	f4 0a       	sbc	r15, r20
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    33d2:	81 15       	cp	r24, r1
    33d4:	5a ec       	ldi	r21, 0xCA	; 202
    33d6:	95 07       	cpc	r25, r21
    33d8:	5a e9       	ldi	r21, 0x9A	; 154
    33da:	a5 07       	cpc	r26, r21
    33dc:	5b e3       	ldi	r21, 0x3B	; 59
    33de:	b5 07       	cpc	r27, r21
    33e0:	c8 f0       	brcs	.+50     	; 0x3414 <_nrk_scheduler+0x104>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    33e2:	2c 01       	movw	r4, r24
    33e4:	3d 01       	movw	r6, r26
    33e6:	2a ec       	ldi	r18, 0xCA	; 202
    33e8:	52 1a       	sub	r5, r18
    33ea:	2a e9       	ldi	r18, 0x9A	; 154
    33ec:	62 0a       	sbc	r6, r18
    33ee:	2b e3       	ldi	r18, 0x3B	; 59
    33f0:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    33f2:	c3 01       	movw	r24, r6
    33f4:	b2 01       	movw	r22, r4
    33f6:	a5 01       	movw	r20, r10
    33f8:	94 01       	movw	r18, r8
    33fa:	0e 94 8d 22 	call	0x451a	; 0x451a <__udivmodsi4>
    33fe:	a3 01       	movw	r20, r6
    3400:	92 01       	movw	r18, r4
    3402:	26 1b       	sub	r18, r22
    3404:	37 0b       	sbc	r19, r23
    3406:	48 0b       	sbc	r20, r24
    3408:	59 0b       	sbc	r21, r25
    340a:	da 01       	movw	r26, r20
    340c:	c9 01       	movw	r24, r18
    340e:	97 01       	movw	r18, r14
    3410:	86 01       	movw	r16, r12
    3412:	d8 cf       	rjmp	.-80     	; 0x33c4 <_nrk_scheduler+0xb4>
    3414:	80 93 eb 05 	sts	0x05EB, r24
    3418:	90 93 ec 05 	sts	0x05EC, r25
    341c:	a0 93 ed 05 	sts	0x05ED, r26
    3420:	b0 93 ee 05 	sts	0x05EE, r27
    3424:	00 93 e7 05 	sts	0x05E7, r16
    3428:	10 93 e8 05 	sts	0x05E8, r17
    342c:	20 93 e9 05 	sts	0x05E9, r18
    3430:	30 93 ea 05 	sts	0x05EA, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    3434:	e0 91 f0 05 	lds	r30, 0x05F0
    3438:	f0 91 f1 05 	lds	r31, 0x05F1
    343c:	85 81       	ldd	r24, Z+5	; 0x05
    343e:	88 23       	and	r24, r24
    3440:	39 f1       	breq	.+78     	; 0x3490 <_nrk_scheduler+0x180>
    3442:	81 85       	ldd	r24, Z+9	; 0x09
    3444:	84 30       	cpi	r24, 0x04	; 4
    3446:	21 f1       	breq	.+72     	; 0x3490 <_nrk_scheduler+0x180>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    3448:	87 81       	ldd	r24, Z+7	; 0x07
    344a:	82 30       	cpi	r24, 0x02	; 2
    344c:	29 f0       	breq	.+10     	; 0x3458 <_nrk_scheduler+0x148>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    344e:	88 23       	and	r24, r24
    3450:	41 f0       	breq	.+16     	; 0x3462 <_nrk_scheduler+0x152>
    3452:	86 81       	ldd	r24, Z+6	; 0x06
    3454:	81 11       	cpse	r24, r1
    3456:	02 c0       	rjmp	.+4      	; 0x345c <_nrk_scheduler+0x14c>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    3458:	85 e0       	ldi	r24, 0x05	; 5
    345a:	01 c0       	rjmp	.+2      	; 0x345e <_nrk_scheduler+0x14e>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    345c:	83 e0       	ldi	r24, 0x03	; 3
    345e:	81 87       	std	Z+9, r24	; 0x09
    3460:	14 c0       	rjmp	.+40     	; 0x348a <_nrk_scheduler+0x17a>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3462:	83 e0       	ldi	r24, 0x03	; 3
    3464:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    3466:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    3468:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    346a:	85 89       	ldd	r24, Z+21	; 0x15
    346c:	96 89       	ldd	r25, Z+22	; 0x16
    346e:	a7 89       	ldd	r26, Z+23	; 0x17
    3470:	b0 8d       	ldd	r27, Z+24	; 0x18
    3472:	89 2b       	or	r24, r25
    3474:	8a 2b       	or	r24, r26
    3476:	8b 2b       	or	r24, r27
    3478:	41 f4       	brne	.+16     	; 0x348a <_nrk_scheduler+0x17a>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    347a:	81 8d       	ldd	r24, Z+25	; 0x19
    347c:	92 8d       	ldd	r25, Z+26	; 0x1a
    347e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3480:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3482:	85 8b       	std	Z+21, r24	; 0x15
    3484:	96 8b       	std	Z+22, r25	; 0x16
    3486:	a7 8b       	std	Z+23, r26	; 0x17
    3488:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    348a:	80 85       	ldd	r24, Z+8	; 0x08
    348c:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    3490:	e0 91 f0 05 	lds	r30, 0x05F0
    3494:	f0 91 f1 05 	lds	r31, 0x05F1
    3498:	85 a1       	ldd	r24, Z+37	; 0x25
    349a:	96 a1       	ldd	r25, Z+38	; 0x26
    349c:	a7 a1       	ldd	r26, Z+39	; 0x27
    349e:	b0 a5       	ldd	r27, Z+40	; 0x28
    34a0:	89 2b       	or	r24, r25
    34a2:	8a 2b       	or	r24, r26
    34a4:	8b 2b       	or	r24, r27
    34a6:	09 f4       	brne	.+2      	; 0x34aa <_nrk_scheduler+0x19a>
    34a8:	44 c0       	rjmp	.+136    	; 0x3532 <_nrk_scheduler+0x222>
    34aa:	20 85       	ldd	r18, Z+8	; 0x08
    34ac:	22 23       	and	r18, r18
    34ae:	09 f4       	brne	.+2      	; 0x34b2 <_nrk_scheduler+0x1a2>
    34b0:	40 c0       	rjmp	.+128    	; 0x3532 <_nrk_scheduler+0x222>
    34b2:	81 85       	ldd	r24, Z+9	; 0x09
    34b4:	84 30       	cpi	r24, 0x04	; 4
    34b6:	e9 f1       	breq	.+122    	; 0x3532 <_nrk_scheduler+0x222>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    34b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    34ba:	96 8d       	ldd	r25, Z+30	; 0x1e
    34bc:	a7 8d       	ldd	r26, Z+31	; 0x1f
    34be:	b0 a1       	ldd	r27, Z+32	; 0x20
    34c0:	40 91 a9 04 	lds	r20, 0x04A9
    34c4:	50 e0       	ldi	r21, 0x00	; 0
    34c6:	60 e0       	ldi	r22, 0x00	; 0
    34c8:	70 e0       	ldi	r23, 0x00	; 0
    34ca:	84 17       	cp	r24, r20
    34cc:	95 07       	cpc	r25, r21
    34ce:	a6 07       	cpc	r26, r22
    34d0:	b7 07       	cpc	r27, r23
    34d2:	68 f4       	brcc	.+26     	; 0x34ee <_nrk_scheduler+0x1de>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    34d4:	62 2f       	mov	r22, r18
    34d6:	82 e0       	ldi	r24, 0x02	; 2
    34d8:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    34dc:	e0 91 f0 05 	lds	r30, 0x05F0
    34e0:	f0 91 f1 05 	lds	r31, 0x05F1
    34e4:	15 8e       	std	Z+29, r1	; 0x1d
    34e6:	16 8e       	std	Z+30, r1	; 0x1e
    34e8:	17 8e       	std	Z+31, r1	; 0x1f
    34ea:	10 a2       	std	Z+32, r1	; 0x20
    34ec:	08 c0       	rjmp	.+16     	; 0x34fe <_nrk_scheduler+0x1ee>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    34ee:	84 1b       	sub	r24, r20
    34f0:	95 0b       	sbc	r25, r21
    34f2:	a6 0b       	sbc	r26, r22
    34f4:	b7 0b       	sbc	r27, r23
    34f6:	85 8f       	std	Z+29, r24	; 0x1d
    34f8:	96 8f       	std	Z+30, r25	; 0x1e
    34fa:	a7 8f       	std	Z+31, r26	; 0x1f
    34fc:	b0 a3       	std	Z+32, r27	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    34fe:	e0 91 f0 05 	lds	r30, 0x05F0
    3502:	f0 91 f1 05 	lds	r31, 0x05F1
    3506:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    3508:	85 8d       	ldd	r24, Z+29	; 0x1d
    350a:	96 8d       	ldd	r25, Z+30	; 0x1e
    350c:	a7 8d       	ldd	r26, Z+31	; 0x1f
    350e:	b0 a1       	ldd	r27, Z+32	; 0x20
    3510:	89 2b       	or	r24, r25
    3512:	8a 2b       	or	r24, r26
    3514:	8b 2b       	or	r24, r27
    3516:	69 f4       	brne	.+26     	; 0x3532 <_nrk_scheduler+0x222>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    3518:	61 2f       	mov	r22, r17
    351a:	83 e0       	ldi	r24, 0x03	; 3
    351c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3520:	e0 91 f0 05 	lds	r30, 0x05F0
    3524:	f0 91 f1 05 	lds	r31, 0x05F1
    3528:	83 e0       	ldi	r24, 0x03	; 3
    352a:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    352c:	81 2f       	mov	r24, r17
    352e:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <nrk_rem_from_readyQ>
    3532:	87 e3       	ldi	r24, 0x37	; 55
    3534:	95 e0       	ldi	r25, 0x05	; 5
    3536:	9d 83       	std	Y+5, r25	; 0x05
    3538:	8c 83       	std	Y+4, r24	; 0x04

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    353a:	00 e6       	ldi	r16, 0x60	; 96
    353c:	1a ee       	ldi	r17, 0xEA	; 234
    353e:	31 2c       	mov	r3, r1
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3540:	9a ef       	ldi	r25, 0xFA	; 250
    3542:	c9 2e       	mov	r12, r25
    3544:	d1 2c       	mov	r13, r1
    3546:	e1 2c       	mov	r14, r1
    3548:	f1 2c       	mov	r15, r1
                nrk_task_TCB[task_ID].nw_flag=0;
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    nrk_task_TCB[task_ID].task_state = READY;
    354a:	22 e0       	ldi	r18, 0x02	; 2
    354c:	22 2e       	mov	r2, r18
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    354e:	81 2c       	mov	r8, r1
    3550:	91 2c       	mov	r9, r1
    3552:	54 01       	movw	r10, r8
    3554:	83 94       	inc	r8
    3556:	ec 81       	ldd	r30, Y+4	; 0x04
    3558:	fd 81       	ldd	r31, Y+5	; 0x05
    355a:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    355c:	80 81       	ld	r24, Z
    355e:	8f 3f       	cpi	r24, 0xFF	; 255
    3560:	09 f4       	brne	.+2      	; 0x3564 <_nrk_scheduler+0x254>
    3562:	ff c0       	rjmp	.+510    	; 0x3762 <_nrk_scheduler+0x452>
    3564:	ec 81       	ldd	r30, Y+4	; 0x04
    3566:	fd 81       	ldd	r31, Y+5	; 0x05
    3568:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    356a:	10 82       	st	Z, r1
    356c:	ec 81       	ldd	r30, Y+4	; 0x04
    356e:	fd 81       	ldd	r31, Y+5	; 0x05
    3570:	f0 81       	ld	r31, Z
    3572:	f9 83       	std	Y+1, r31	; 0x01
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    3574:	88 23       	and	r24, r24
    3576:	09 f4       	brne	.+2      	; 0x357a <_nrk_scheduler+0x26a>
    3578:	68 c0       	rjmp	.+208    	; 0x364a <_nrk_scheduler+0x33a>
    357a:	f4 30       	cpi	r31, 0x04	; 4
    357c:	09 f4       	brne	.+2      	; 0x3580 <_nrk_scheduler+0x270>
    357e:	f1 c0       	rjmp	.+482    	; 0x3762 <_nrk_scheduler+0x452>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    3580:	ec 81       	ldd	r30, Y+4	; 0x04
    3582:	fd 81       	ldd	r31, Y+5	; 0x05
    3584:	44 84       	ldd	r4, Z+12	; 0x0c
    3586:	55 84       	ldd	r5, Z+13	; 0x0d
    3588:	66 84       	ldd	r6, Z+14	; 0x0e
    358a:	77 84       	ldd	r7, Z+15	; 0x0f
    358c:	60 91 a9 04 	lds	r22, 0x04A9
    3590:	70 e0       	ldi	r23, 0x00	; 0
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	46 16       	cp	r4, r22
    3598:	57 06       	cpc	r5, r23
    359a:	68 06       	cpc	r6, r24
    359c:	79 06       	cpc	r7, r25
    359e:	48 f0       	brcs	.+18     	; 0x35b2 <_nrk_scheduler+0x2a2>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    35a0:	46 1a       	sub	r4, r22
    35a2:	57 0a       	sbc	r5, r23
    35a4:	68 0a       	sbc	r6, r24
    35a6:	79 0a       	sbc	r7, r25
    35a8:	44 86       	std	Z+12, r4	; 0x0c
    35aa:	55 86       	std	Z+13, r5	; 0x0d
    35ac:	66 86       	std	Z+14, r6	; 0x0e
    35ae:	77 86       	std	Z+15, r7	; 0x0f
    35b0:	06 c0       	rjmp	.+12     	; 0x35be <_nrk_scheduler+0x2ae>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    35b2:	ec 81       	ldd	r30, Y+4	; 0x04
    35b4:	fd 81       	ldd	r31, Y+5	; 0x05
    35b6:	14 86       	std	Z+12, r1	; 0x0c
    35b8:	15 86       	std	Z+13, r1	; 0x0d
    35ba:	16 86       	std	Z+14, r1	; 0x0e
    35bc:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    35be:	ec 81       	ldd	r30, Y+4	; 0x04
    35c0:	fd 81       	ldd	r31, Y+5	; 0x05
    35c2:	40 88       	ldd	r4, Z+16	; 0x10
    35c4:	51 88       	ldd	r5, Z+17	; 0x11
    35c6:	62 88       	ldd	r6, Z+18	; 0x12
    35c8:	73 88       	ldd	r7, Z+19	; 0x13
    35ca:	46 16       	cp	r4, r22
    35cc:	57 06       	cpc	r5, r23
    35ce:	68 06       	cpc	r6, r24
    35d0:	79 06       	cpc	r7, r25
    35d2:	48 f0       	brcs	.+18     	; 0x35e6 <_nrk_scheduler+0x2d6>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    35d4:	a3 01       	movw	r20, r6
    35d6:	92 01       	movw	r18, r4
    35d8:	26 1b       	sub	r18, r22
    35da:	37 0b       	sbc	r19, r23
    35dc:	48 0b       	sbc	r20, r24
    35de:	59 0b       	sbc	r21, r25
    35e0:	da 01       	movw	r26, r20
    35e2:	c9 01       	movw	r24, r18
    35e4:	13 c0       	rjmp	.+38     	; 0x360c <_nrk_scheduler+0x2fc>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    35e6:	ec 81       	ldd	r30, Y+4	; 0x04
    35e8:	fd 81       	ldd	r31, Y+5	; 0x05
    35ea:	20 8d       	ldd	r18, Z+24	; 0x18
    35ec:	31 8d       	ldd	r19, Z+25	; 0x19
    35ee:	42 8d       	ldd	r20, Z+26	; 0x1a
    35f0:	53 8d       	ldd	r21, Z+27	; 0x1b
    35f2:	62 17       	cp	r22, r18
    35f4:	73 07       	cpc	r23, r19
    35f6:	84 07       	cpc	r24, r20
    35f8:	95 07       	cpc	r25, r21
    35fa:	68 f4       	brcc	.+26     	; 0x3616 <_nrk_scheduler+0x306>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    35fc:	29 01       	movw	r4, r18
    35fe:	3a 01       	movw	r6, r20
    3600:	46 1a       	sub	r4, r22
    3602:	57 0a       	sbc	r5, r23
    3604:	68 0a       	sbc	r6, r24
    3606:	79 0a       	sbc	r7, r25
    3608:	d3 01       	movw	r26, r6
    360a:	c2 01       	movw	r24, r4
    360c:	80 8b       	std	Z+16, r24	; 0x10
    360e:	91 8b       	std	Z+17, r25	; 0x11
    3610:	a2 8b       	std	Z+18, r26	; 0x12
    3612:	b3 8b       	std	Z+19, r27	; 0x13
    3614:	08 c0       	rjmp	.+16     	; 0x3626 <_nrk_scheduler+0x316>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    3616:	0e 94 8d 22 	call	0x451a	; 0x451a <__udivmodsi4>
    361a:	ec 81       	ldd	r30, Y+4	; 0x04
    361c:	fd 81       	ldd	r31, Y+5	; 0x05
    361e:	60 8b       	std	Z+16, r22	; 0x10
    3620:	71 8b       	std	Z+17, r23	; 0x11
    3622:	82 8b       	std	Z+18, r24	; 0x12
    3624:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    3626:	ec 81       	ldd	r30, Y+4	; 0x04
    3628:	fd 81       	ldd	r31, Y+5	; 0x05
    362a:	80 89       	ldd	r24, Z+16	; 0x10
    362c:	91 89       	ldd	r25, Z+17	; 0x11
    362e:	a2 89       	ldd	r26, Z+18	; 0x12
    3630:	b3 89       	ldd	r27, Z+19	; 0x13
    3632:	89 2b       	or	r24, r25
    3634:	8a 2b       	or	r24, r26
    3636:	8b 2b       	or	r24, r27
    3638:	41 f4       	brne	.+16     	; 0x364a <_nrk_scheduler+0x33a>
    363a:	80 8d       	ldd	r24, Z+24	; 0x18
    363c:	91 8d       	ldd	r25, Z+25	; 0x19
    363e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3640:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3642:	80 8b       	std	Z+16, r24	; 0x10
    3644:	91 8b       	std	Z+17, r25	; 0x11
    3646:	a2 8b       	std	Z+18, r26	; 0x12
    3648:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    364a:	f9 81       	ldd	r31, Y+1	; 0x01
    364c:	f3 30       	cpi	r31, 0x03	; 3
    364e:	09 f0       	breq	.+2      	; 0x3652 <_nrk_scheduler+0x342>
    3650:	88 c0       	rjmp	.+272    	; 0x3762 <_nrk_scheduler+0x452>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    3652:	ec 81       	ldd	r30, Y+4	; 0x04
    3654:	fd 81       	ldd	r31, Y+5	; 0x05
    3656:	84 85       	ldd	r24, Z+12	; 0x0c
    3658:	95 85       	ldd	r25, Z+13	; 0x0d
    365a:	a6 85       	ldd	r26, Z+14	; 0x0e
    365c:	b7 85       	ldd	r27, Z+15	; 0x0f
    365e:	89 2b       	or	r24, r25
    3660:	8a 2b       	or	r24, r26
    3662:	8b 2b       	or	r24, r27
    3664:	09 f0       	breq	.+2      	; 0x3668 <_nrk_scheduler+0x358>
    3666:	6a c0       	rjmp	.+212    	; 0x373c <_nrk_scheduler+0x42c>
    3668:	df 01       	movw	r26, r30
    366a:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    366c:	8c 91       	ld	r24, X
    366e:	9f 01       	movw	r18, r30
    3670:	23 50       	subi	r18, 0x03	; 3
    3672:	31 09       	sbc	r19, r1
    3674:	88 23       	and	r24, r24
    3676:	a9 f0       	breq	.+42     	; 0x36a2 <_nrk_scheduler+0x392>
    3678:	f9 01       	movw	r30, r18
    367a:	80 81       	ld	r24, Z
    367c:	88 23       	and	r24, r24
    367e:	89 f0       	breq	.+34     	; 0x36a2 <_nrk_scheduler+0x392>
    3680:	b5 01       	movw	r22, r10
    3682:	a4 01       	movw	r20, r8
    3684:	00 90 e0 05 	lds	r0, 0x05E0
    3688:	04 c0       	rjmp	.+8      	; 0x3692 <_nrk_scheduler+0x382>
    368a:	44 0f       	add	r20, r20
    368c:	55 1f       	adc	r21, r21
    368e:	66 1f       	adc	r22, r22
    3690:	77 1f       	adc	r23, r23
    3692:	0a 94       	dec	r0
    3694:	d2 f7       	brpl	.-12     	; 0x368a <_nrk_scheduler+0x37a>
    3696:	ec 81       	ldd	r30, Y+4	; 0x04
    3698:	fd 81       	ldd	r31, Y+5	; 0x05
    369a:	40 87       	std	Z+8, r20	; 0x08
    369c:	51 87       	std	Z+9, r21	; 0x09
    369e:	62 87       	std	Z+10, r22	; 0x0a
    36a0:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    36a2:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    36a4:	f9 01       	movw	r30, r18
    36a6:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    36a8:	ec 81       	ldd	r30, Y+4	; 0x04
    36aa:	fd 81       	ldd	r31, Y+5	; 0x05
    36ac:	a0 a1       	ldd	r26, Z+32	; 0x20
    36ae:	b1 a1       	ldd	r27, Z+33	; 0x21
    36b0:	40 8c       	ldd	r4, Z+24	; 0x18
    36b2:	51 8c       	ldd	r5, Z+25	; 0x19
    36b4:	62 8c       	ldd	r6, Z+26	; 0x1a
    36b6:	73 8c       	ldd	r7, Z+27	; 0x1b
    36b8:	44 8d       	ldd	r20, Z+28	; 0x1c
    36ba:	55 8d       	ldd	r21, Z+29	; 0x1d
    36bc:	66 8d       	ldd	r22, Z+30	; 0x1e
    36be:	77 8d       	ldd	r23, Z+31	; 0x1f
    36c0:	a1 30       	cpi	r26, 0x01	; 1
    36c2:	b1 05       	cpc	r27, r1
    36c4:	c9 f4       	brne	.+50     	; 0x36f8 <_nrk_scheduler+0x3e8>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    36c6:	44 8b       	std	Z+20, r20	; 0x14
    36c8:	55 8b       	std	Z+21, r21	; 0x15
    36ca:	66 8b       	std	Z+22, r22	; 0x16
    36cc:	77 8b       	std	Z+23, r23	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    36ce:	20 82       	st	Z, r2
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    36d0:	80 89       	ldd	r24, Z+16	; 0x10
    36d2:	91 89       	ldd	r25, Z+17	; 0x11
    36d4:	a2 89       	ldd	r26, Z+18	; 0x12
    36d6:	b3 89       	ldd	r27, Z+19	; 0x13
    36d8:	84 87       	std	Z+12, r24	; 0x0c
    36da:	95 87       	std	Z+13, r25	; 0x0d
    36dc:	a6 87       	std	Z+14, r26	; 0x0e
    36de:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    36e0:	45 28       	or	r4, r5
    36e2:	46 28       	or	r4, r6
    36e4:	47 28       	or	r4, r7
    36e6:	21 f4       	brne	.+8      	; 0x36f0 <_nrk_scheduler+0x3e0>
    36e8:	c4 86       	std	Z+12, r12	; 0x0c
    36ea:	d5 86       	std	Z+13, r13	; 0x0d
    36ec:	e6 86       	std	Z+14, r14	; 0x0e
    36ee:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    36f0:	83 2d       	mov	r24, r3
    36f2:	0e 94 af 13 	call	0x275e	; 0x275e <nrk_add_to_readyQ>
    36f6:	22 c0       	rjmp	.+68     	; 0x373c <_nrk_scheduler+0x42c>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    36f8:	ec 81       	ldd	r30, Y+4	; 0x04
    36fa:	fd 81       	ldd	r31, Y+5	; 0x05
    36fc:	44 8b       	std	Z+20, r20	; 0x14
    36fe:	55 8b       	std	Z+21, r21	; 0x15
    3700:	66 8b       	std	Z+22, r22	; 0x16
    3702:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3704:	11 97       	sbiw	r26, 0x01	; 1
    3706:	a3 01       	movw	r20, r6
    3708:	92 01       	movw	r18, r4
    370a:	0e 94 72 22 	call	0x44e4	; 0x44e4 <__muluhisi3>
    370e:	64 87       	std	Z+12, r22	; 0x0c
    3710:	75 87       	std	Z+13, r23	; 0x0d
    3712:	86 87       	std	Z+14, r24	; 0x0e
    3714:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3716:	60 8b       	std	Z+16, r22	; 0x10
    3718:	71 8b       	std	Z+17, r23	; 0x11
    371a:	82 8b       	std	Z+18, r24	; 0x12
    371c:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    371e:	45 28       	or	r4, r5
    3720:	46 28       	or	r4, r6
    3722:	47 28       	or	r4, r7
    3724:	21 f4       	brne	.+8      	; 0x372e <_nrk_scheduler+0x41e>
    3726:	c4 86       	std	Z+12, r12	; 0x0c
    3728:	d5 86       	std	Z+13, r13	; 0x0d
    372a:	e6 86       	std	Z+14, r14	; 0x0e
    372c:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    372e:	44 24       	eor	r4, r4
    3730:	43 94       	inc	r4
    3732:	51 2c       	mov	r5, r1
    3734:	ec 81       	ldd	r30, Y+4	; 0x04
    3736:	fd 81       	ldd	r31, Y+5	; 0x05
    3738:	51 a2       	std	Z+33, r5	; 0x21
    373a:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    373c:	ec 81       	ldd	r30, Y+4	; 0x04
    373e:	fd 81       	ldd	r31, Y+5	; 0x05
    3740:	84 85       	ldd	r24, Z+12	; 0x0c
    3742:	95 85       	ldd	r25, Z+13	; 0x0d
    3744:	a6 85       	ldd	r26, Z+14	; 0x0e
    3746:	b7 85       	ldd	r27, Z+15	; 0x0f
    3748:	00 97       	sbiw	r24, 0x00	; 0
    374a:	a1 05       	cpc	r26, r1
    374c:	b1 05       	cpc	r27, r1
    374e:	49 f0       	breq	.+18     	; 0x3762 <_nrk_scheduler+0x452>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    3750:	a8 01       	movw	r20, r16
    3752:	60 e0       	ldi	r22, 0x00	; 0
    3754:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    3756:	84 17       	cp	r24, r20
    3758:	95 07       	cpc	r25, r21
    375a:	a6 07       	cpc	r26, r22
    375c:	b7 07       	cpc	r27, r23
    375e:	08 f4       	brcc	.+2      	; 0x3762 <_nrk_scheduler+0x452>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    3760:	8c 01       	movw	r16, r24
    3762:	33 94       	inc	r3
    3764:	2c 81       	ldd	r18, Y+4	; 0x04
    3766:	3d 81       	ldd	r19, Y+5	; 0x05
    3768:	25 5d       	subi	r18, 0xD5	; 213
    376a:	3f 4f       	sbci	r19, 0xFF	; 255
    376c:	3d 83       	std	Y+5, r19	; 0x05
    376e:	2c 83       	std	Y+4, r18	; 0x04

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    3770:	34 e0       	ldi	r19, 0x04	; 4
    3772:	33 12       	cpse	r3, r19
    3774:	f0 ce       	rjmp	.-544    	; 0x3556 <_nrk_scheduler+0x246>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    3776:	0e 94 9e 13 	call	0x273c	; 0x273c <nrk_get_high_ready_task_ID>
    377a:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    377c:	4b e2       	ldi	r20, 0x2B	; 43
    377e:	84 02       	muls	r24, r20
    3780:	f0 01       	movw	r30, r0
    3782:	11 24       	eor	r1, r1
    3784:	e2 5d       	subi	r30, 0xD2	; 210
    3786:	fa 4f       	sbci	r31, 0xFA	; 250
    3788:	22 85       	ldd	r18, Z+10	; 0x0a
    378a:	20 93 f2 05 	sts	0x05F2, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    378e:	f0 93 e2 05 	sts	0x05E2, r31
    3792:	e0 93 e1 05 	sts	0x05E1, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    3796:	88 23       	and	r24, r24
    3798:	d9 f0       	breq	.+54     	; 0x37d0 <_nrk_scheduler+0x4c0>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    379a:	85 a1       	ldd	r24, Z+37	; 0x25
    379c:	96 a1       	ldd	r25, Z+38	; 0x26
    379e:	a7 a1       	ldd	r26, Z+39	; 0x27
    37a0:	b0 a5       	ldd	r27, Z+40	; 0x28
    37a2:	89 2b       	or	r24, r25
    37a4:	8a 2b       	or	r24, r26
    37a6:	8b 2b       	or	r24, r27
    37a8:	99 f0       	breq	.+38     	; 0x37d0 <_nrk_scheduler+0x4c0>
    37aa:	85 8d       	ldd	r24, Z+29	; 0x1d
    37ac:	96 8d       	ldd	r25, Z+30	; 0x1e
    37ae:	a7 8d       	ldd	r26, Z+31	; 0x1f
    37b0:	b0 a1       	ldd	r27, Z+32	; 0x20
    37b2:	8a 3f       	cpi	r24, 0xFA	; 250
    37b4:	91 05       	cpc	r25, r1
    37b6:	a1 05       	cpc	r26, r1
    37b8:	b1 05       	cpc	r27, r1
    37ba:	50 f4       	brcc	.+20     	; 0x37d0 <_nrk_scheduler+0x4c0>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    37bc:	a8 01       	movw	r20, r16
    37be:	60 e0       	ldi	r22, 0x00	; 0
    37c0:	70 e0       	ldi	r23, 0x00	; 0
    37c2:	84 17       	cp	r24, r20
    37c4:	95 07       	cpc	r25, r21
    37c6:	a6 07       	cpc	r26, r22
    37c8:	b7 07       	cpc	r27, r23
    37ca:	10 f4       	brcc	.+4      	; 0x37d0 <_nrk_scheduler+0x4c0>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    37cc:	8c 01       	movw	r16, r24
    37ce:	05 c0       	rjmp	.+10     	; 0x37da <_nrk_scheduler+0x4ca>
    }*/


//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
    37d0:	0b 3f       	cpi	r16, 0xFB	; 251
    37d2:	11 05       	cpc	r17, r1
    37d4:	10 f0       	brcs	.+4      	; 0x37da <_nrk_scheduler+0x4ca>
    37d6:	0a ef       	ldi	r16, 0xFA	; 250
    37d8:	10 e0       	ldi	r17, 0x00	; 0
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    37da:	20 93 e3 05 	sts	0x05E3, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    37de:	f0 93 f1 05 	sts	0x05F1, r31
    37e2:	e0 93 f0 05 	sts	0x05F0, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    37e6:	00 93 a9 04 	sts	0x04A9, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    37ea:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_nrk_os_timer_get>
    37ee:	28 2f       	mov	r18, r24
    37f0:	30 e0       	ldi	r19, 0x00	; 0
    37f2:	2f 5f       	subi	r18, 0xFF	; 255
    37f4:	3f 4f       	sbci	r19, 0xFF	; 255
    37f6:	20 17       	cp	r18, r16
    37f8:	31 07       	cpc	r19, r17
    37fa:	40 f0       	brcs	.+16     	; 0x380c <_nrk_scheduler+0x4fc>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    37fc:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <_nrk_os_timer_get>
    3800:	08 2f       	mov	r16, r24
    3802:	10 e0       	ldi	r17, 0x00	; 0
    3804:	0e 5f       	subi	r16, 0xFE	; 254
    3806:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    3808:	00 93 a9 04 	sts	0x04A9, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    380c:	f1 10       	cpse	r15, r1
    380e:	10 92 e4 05 	sts	0x05E4, r1

    _nrk_set_next_wakeup(next_wake);
    3812:	80 2f       	mov	r24, r16
    3814:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    3818:	6c ed       	ldi	r22, 0xDC	; 220
    381a:	75 e0       	ldi	r23, 0x05	; 5
    381c:	8a 81       	ldd	r24, Y+2	; 0x02
    381e:	9b 81       	ldd	r25, Y+3	; 0x03
    3820:	0e 94 81 1c 	call	0x3902	; 0x3902 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    3824:	0e 94 9e 20 	call	0x413c	; 0x413c <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	0f 90       	pop	r0
    382e:	0f 90       	pop	r0
    3830:	0f 90       	pop	r0
    3832:	df 91       	pop	r29
    3834:	cf 91       	pop	r28
    3836:	1f 91       	pop	r17
    3838:	0f 91       	pop	r16
    383a:	ff 90       	pop	r15
    383c:	ef 90       	pop	r14
    383e:	df 90       	pop	r13
    3840:	cf 90       	pop	r12
    3842:	bf 90       	pop	r11
    3844:	af 90       	pop	r10
    3846:	9f 90       	pop	r9
    3848:	8f 90       	pop	r8
    384a:	7f 90       	pop	r7
    384c:	6f 90       	pop	r6
    384e:	5f 90       	pop	r5
    3850:	4f 90       	pop	r4
    3852:	3f 90       	pop	r3
    3854:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    3856:	0c 94 a9 20 	jmp	0x4152	; 0x4152 <nrk_start_high_ready_task>

0000385a <nrk_spin_wait_us>:
	...
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	91 f7       	brne	.-28     	; 0x385a <nrk_spin_wait_us>
    3876:	08 95       	ret

00003878 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    3878:	10 92 21 01 	sts	0x0121, r1
    387c:	08 95       	ret

0000387e <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    387e:	89 e0       	ldi	r24, 0x09	; 9
    3880:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    3884:	8d e8       	ldi	r24, 0x8D	; 141
    3886:	9c e3       	ldi	r25, 0x3C	; 60
    3888:	90 93 29 01 	sts	0x0129, r25
    388c:	80 93 28 01 	sts	0x0128, r24
    3890:	08 95       	ret

00003892 <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3892:	10 92 25 01 	sts	0x0125, r1
    3896:	10 92 24 01 	sts	0x0124, r1
    389a:	08 95       	ret

0000389c <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    389c:	cf 93       	push	r28
    389e:	df 93       	push	r29
    38a0:	00 d0       	rcall	.+0      	; 0x38a2 <_nrk_precision_os_timer_get+0x6>
    38a2:	cd b7       	in	r28, 0x3d	; 61
    38a4:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    38a6:	80 91 24 01 	lds	r24, 0x0124
    38aa:	90 91 25 01 	lds	r25, 0x0125
    38ae:	9a 83       	std	Y+2, r25	; 0x02
    38b0:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    38b2:	89 81       	ldd	r24, Y+1	; 0x01
    38b4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    38b6:	0f 90       	pop	r0
    38b8:	0f 90       	pop	r0
    38ba:	df 91       	pop	r29
    38bc:	cf 91       	pop	r28
    38be:	08 95       	ret

000038c0 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    38c0:	10 92 81 00 	sts	0x0081, r1
    38c4:	08 95       	ret

000038c6 <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	80 93 81 00 	sts	0x0081, r24
    38cc:	08 95       	ret

000038ce <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    38ce:	83 b5       	in	r24, 0x23	; 35
    38d0:	81 60       	ori	r24, 0x01	; 1
    38d2:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    38d4:	10 92 85 00 	sts	0x0085, r1
    38d8:	10 92 84 00 	sts	0x0084, r1
    38dc:	08 95       	ret

000038de <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    38de:	cf 93       	push	r28
    38e0:	df 93       	push	r29
    38e2:	00 d0       	rcall	.+0      	; 0x38e4 <_nrk_high_speed_timer_get+0x6>
    38e4:	cd b7       	in	r28, 0x3d	; 61
    38e6:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    38e8:	80 91 84 00 	lds	r24, 0x0084
    38ec:	90 91 85 00 	lds	r25, 0x0085
    38f0:	9a 83       	std	Y+2, r25	; 0x02
    38f2:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    38f4:	89 81       	ldd	r24, Y+1	; 0x01
    38f6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    38f8:	0f 90       	pop	r0
    38fa:	0f 90       	pop	r0
    38fc:	df 91       	pop	r29
    38fe:	cf 91       	pop	r28
    3900:	08 95       	ret

00003902 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    3902:	cf 92       	push	r12
    3904:	df 92       	push	r13
    3906:	ef 92       	push	r14
    3908:	ff 92       	push	r15
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    390e:	ec 01       	movw	r28, r24
    3910:	cc 0f       	add	r28, r28
    3912:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    3914:	c9 37       	cpi	r28, 0x79	; 121
    3916:	8f ef       	ldi	r24, 0xFF	; 255
    3918:	d8 07       	cpc	r29, r24
    391a:	10 f0       	brcs	.+4      	; 0x3920 <nrk_high_speed_timer_wait+0x1e>
    391c:	c0 e0       	ldi	r28, 0x00	; 0
    391e:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    3920:	6b 01       	movw	r12, r22
    3922:	e1 2c       	mov	r14, r1
    3924:	f1 2c       	mov	r15, r1
    3926:	cc 0e       	add	r12, r28
    3928:	dd 1e       	adc	r13, r29
    392a:	e1 1c       	adc	r14, r1
    392c:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	c8 16       	cp	r12, r24
    3932:	d1 04       	cpc	r13, r1
    3934:	e8 06       	cpc	r14, r24
    3936:	f1 04       	cpc	r15, r1
    3938:	40 f0       	brcs	.+16     	; 0x394a <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	e8 1a       	sub	r14, r24
    393e:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    3940:	0e 94 6f 1c 	call	0x38de	; 0x38de <_nrk_high_speed_timer_get>
    3944:	c8 17       	cp	r28, r24
    3946:	d9 07       	cpc	r29, r25
    3948:	d8 f3       	brcs	.-10     	; 0x3940 <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    394a:	0e 94 6f 1c 	call	0x38de	; 0x38de <_nrk_high_speed_timer_get>
    394e:	8c 15       	cp	r24, r12
    3950:	9d 05       	cpc	r25, r13
    3952:	d8 f3       	brcs	.-10     	; 0x394a <nrk_high_speed_timer_wait+0x48>
}
    3954:	df 91       	pop	r29
    3956:	cf 91       	pop	r28
    3958:	ff 90       	pop	r15
    395a:	ef 90       	pop	r14
    395c:	df 90       	pop	r13
    395e:	cf 90       	pop	r12
    3960:	08 95       	ret

00003962 <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    3962:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    3966:	e0 e7       	ldi	r30, 0x70	; 112
    3968:	f0 e0       	ldi	r31, 0x00	; 0
    396a:	80 81       	ld	r24, Z
    396c:	8d 7f       	andi	r24, 0xFD	; 253
    396e:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    3970:	80 81       	ld	r24, Z
    3972:	8e 7f       	andi	r24, 0xFE	; 254
    3974:	80 83       	st	Z, r24
    3976:	08 95       	ret

00003978 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    3978:	80 93 b2 00 	sts	0x00B2, r24
    397c:	08 95       	ret

0000397e <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    397e:	e0 e7       	ldi	r30, 0x70	; 112
    3980:	f0 e0       	ldi	r31, 0x00	; 0
    3982:	80 81       	ld	r24, Z
    3984:	83 60       	ori	r24, 0x03	; 3
    3986:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    3988:	83 e0       	ldi	r24, 0x03	; 3
    398a:	80 93 b1 00 	sts	0x00B1, r24
    398e:	08 95       	ret

00003990 <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    3990:	83 b5       	in	r24, 0x23	; 35
    3992:	82 60       	ori	r24, 0x02	; 2
    3994:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    3996:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    399a:	10 92 7d 04 	sts	0x047D, r1
    _nrk_prev_timer_val=0;
    399e:	10 92 a9 04 	sts	0x04A9, r1
    39a2:	08 95       	ret

000039a4 <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    39a4:	cf 93       	push	r28
    39a6:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    39a8:	8e ef       	ldi	r24, 0xFE	; 254
    39aa:	80 93 a9 04 	sts	0x04A9, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    39ae:	80 e2       	ldi	r24, 0x20	; 32
    39b0:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    39b4:	80 91 a9 04 	lds	r24, 0x04A9
    39b8:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    39bc:	83 e0       	ldi	r24, 0x03	; 3
    39be:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    39c0:	92 e0       	ldi	r25, 0x02	; 2
    39c2:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    39c6:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    39ca:	93 b5       	in	r25, 0x23	; 35
    39cc:	92 60       	ori	r25, 0x02	; 2
    39ce:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    39d0:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    39d2:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    39d4:	83 b5       	in	r24, 0x23	; 35
    39d6:	82 60       	ori	r24, 0x02	; 2
    39d8:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    39da:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    39e4:	10 92 85 00 	sts	0x0085, r1
    39e8:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    39ec:	83 b5       	in	r24, 0x23	; 35
    39ee:	82 60       	ori	r24, 0x02	; 2
    39f0:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    39f2:	83 b5       	in	r24, 0x23	; 35
    39f4:	81 60       	ori	r24, 0x01	; 1
    39f6:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    39f8:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    39fc:	c4 e2       	ldi	r28, 0x24	; 36
    39fe:	d1 e0       	ldi	r29, 0x01	; 1
    3a00:	19 82       	std	Y+1, r1	; 0x01
    3a02:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3a04:	83 b5       	in	r24, 0x23	; 35
    3a06:	82 60       	ori	r24, 0x02	; 2
    3a08:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3a0a:	83 b5       	in	r24, 0x23	; 35
    3a0c:	81 60       	ori	r24, 0x01	; 1
    3a0e:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    3a10:	0e 94 c8 1c 	call	0x3990	; 0x3990 <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3a14:	19 82       	std	Y+1, r1	; 0x01
    3a16:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    3a18:	0e 94 bf 1c 	call	0x397e	; 0x397e <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    3a1c:	0e 94 3f 1c 	call	0x387e	; 0x387e <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    3a20:	10 92 7d 04 	sts	0x047D, r1
}
    3a24:	df 91       	pop	r29
    3a26:	cf 91       	pop	r28
    3a28:	08 95       	ret

00003a2a <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    3a2a:	80 91 b3 00 	lds	r24, 0x00B3
}
    3a2e:	8f 5f       	subi	r24, 0xFF	; 255
    3a30:	08 95       	ret

00003a32 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    3a32:	81 50       	subi	r24, 0x01	; 1
    3a34:	80 93 b3 00 	sts	0x00B3, r24
    3a38:	08 95       	ret

00003a3a <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3a3a:	81 11       	cpse	r24, r1
    3a3c:	02 c0       	rjmp	.+4      	; 0x3a42 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    3a3e:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    3a42:	8f ef       	ldi	r24, 0xFF	; 255
    3a44:	08 95       	ret

00003a46 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3a46:	81 11       	cpse	r24, r1
    3a48:	06 c0       	rjmp	.+12     	; 0x3a56 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    3a4a:	10 92 95 00 	sts	0x0095, r1
    3a4e:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	08 95       	ret
	}
return NRK_ERROR;
    3a56:	8f ef       	ldi	r24, 0xFF	; 255
}
    3a58:	08 95       	ret

00003a5a <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3a5a:	81 11       	cpse	r24, r1
    3a5c:	05 c0       	rjmp	.+10     	; 0x3a68 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    3a5e:	80 91 94 00 	lds	r24, 0x0094
    3a62:	90 91 95 00 	lds	r25, 0x0095
    3a66:	08 95       	ret
	}
return 0;
    3a68:	80 e0       	ldi	r24, 0x00	; 0
    3a6a:	90 e0       	ldi	r25, 0x00	; 0

}
    3a6c:	08 95       	ret

00003a6e <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    3a6e:	81 11       	cpse	r24, r1
    3a70:	05 c0       	rjmp	.+10     	; 0x3a7c <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    3a72:	82 e0       	ldi	r24, 0x02	; 2
    3a74:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	08 95       	ret
	}
return NRK_ERROR;
    3a7c:	8f ef       	ldi	r24, 0xFF	; 255
}
    3a7e:	08 95       	ret

00003a80 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    3a80:	81 11       	cpse	r24, r1
    3a82:	35 c0       	rjmp	.+106    	; 0x3aee <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    3a84:	cb 01       	movw	r24, r22
    3a86:	01 97       	sbiw	r24, 0x01	; 1
    3a88:	05 97       	sbiw	r24, 0x05	; 5
    3a8a:	10 f4       	brcc	.+4      	; 0x3a90 <nrk_timer_int_configure+0x10>
    3a8c:	60 93 a2 04 	sts	0x04A2, r22
	TCCR3A = 0;  
    3a90:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    3a94:	88 e0       	ldi	r24, 0x08	; 8
    3a96:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    3a9a:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    3a9e:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    3aa2:	30 93 6d 04 	sts	0x046D, r19
    3aa6:	20 93 6c 04 	sts	0x046C, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    3aaa:	80 91 a2 04 	lds	r24, 0x04A2
    3aae:	81 30       	cpi	r24, 0x01	; 1
    3ab0:	21 f4       	brne	.+8      	; 0x3aba <nrk_timer_int_configure+0x3a>
    3ab2:	80 91 91 00 	lds	r24, 0x0091
    3ab6:	81 60       	ori	r24, 0x01	; 1
    3ab8:	11 c0       	rjmp	.+34     	; 0x3adc <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    3aba:	82 30       	cpi	r24, 0x02	; 2
    3abc:	21 f4       	brne	.+8      	; 0x3ac6 <nrk_timer_int_configure+0x46>
    3abe:	80 91 91 00 	lds	r24, 0x0091
    3ac2:	82 60       	ori	r24, 0x02	; 2
    3ac4:	0b c0       	rjmp	.+22     	; 0x3adc <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    3ac6:	83 30       	cpi	r24, 0x03	; 3
    3ac8:	21 f4       	brne	.+8      	; 0x3ad2 <nrk_timer_int_configure+0x52>
    3aca:	80 91 91 00 	lds	r24, 0x0091
    3ace:	83 60       	ori	r24, 0x03	; 3
    3ad0:	05 c0       	rjmp	.+10     	; 0x3adc <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    3ad2:	84 30       	cpi	r24, 0x04	; 4
    3ad4:	31 f4       	brne	.+12     	; 0x3ae2 <nrk_timer_int_configure+0x62>
    3ad6:	80 91 91 00 	lds	r24, 0x0091
    3ada:	84 60       	ori	r24, 0x04	; 4
    3adc:	80 93 91 00 	sts	0x0091, r24
    3ae0:	08 c0       	rjmp	.+16     	; 0x3af2 <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    3ae2:	85 30       	cpi	r24, 0x05	; 5
    3ae4:	31 f4       	brne	.+12     	; 0x3af2 <nrk_timer_int_configure+0x72>
    3ae6:	80 91 91 00 	lds	r24, 0x0091
    3aea:	85 60       	ori	r24, 0x05	; 5
    3aec:	f7 cf       	rjmp	.-18     	; 0x3adc <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    3aee:	8f ef       	ldi	r24, 0xFF	; 255
    3af0:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    3af2:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    3af4:	08 95       	ret

00003af6 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    3af6:	80 91 b2 00 	lds	r24, 0x00B2
}
    3afa:	08 95       	ret

00003afc <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    3afc:	1f 92       	push	r1
    3afe:	0f 92       	push	r0
    3b00:	0f b6       	in	r0, 0x3f	; 63
    3b02:	0f 92       	push	r0
    3b04:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3b06:	60 e0       	ldi	r22, 0x00	; 0
    3b08:	8a e0       	ldi	r24, 0x0A	; 10
    3b0a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_kernel_error_add>
	while(1);
    3b0e:	ff cf       	rjmp	.-2      	; 0x3b0e <__vector_default+0x12>

00003b10 <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    3b10:	0f 92       	push	r0
    3b12:	0f b6       	in	r0, 0x3f	; 63
    3b14:	0f 92       	push	r0
    3b16:	1f 92       	push	r1
    3b18:	2f 92       	push	r2
    3b1a:	3f 92       	push	r3
    3b1c:	4f 92       	push	r4
    3b1e:	5f 92       	push	r5
    3b20:	6f 92       	push	r6
    3b22:	7f 92       	push	r7
    3b24:	8f 92       	push	r8
    3b26:	9f 92       	push	r9
    3b28:	af 92       	push	r10
    3b2a:	bf 92       	push	r11
    3b2c:	cf 92       	push	r12
    3b2e:	df 92       	push	r13
    3b30:	ef 92       	push	r14
    3b32:	ff 92       	push	r15
    3b34:	0f 93       	push	r16
    3b36:	1f 93       	push	r17
    3b38:	2f 93       	push	r18
    3b3a:	3f 93       	push	r19
    3b3c:	4f 93       	push	r20
    3b3e:	5f 93       	push	r21
    3b40:	6f 93       	push	r22
    3b42:	7f 93       	push	r23
    3b44:	8f 93       	push	r24
    3b46:	9f 93       	push	r25
    3b48:	af 93       	push	r26
    3b4a:	bf 93       	push	r27
    3b4c:	cf 93       	push	r28
    3b4e:	df 93       	push	r29
    3b50:	ef 93       	push	r30
    3b52:	ff 93       	push	r31
    3b54:	a0 91 f0 05 	lds	r26, 0x05F0
    3b58:	b0 91 f1 05 	lds	r27, 0x05F1
    3b5c:	0d b6       	in	r0, 0x3d	; 61
    3b5e:	0d 92       	st	X+, r0
    3b60:	0e b6       	in	r0, 0x3e	; 62
    3b62:	0d 92       	st	X+, r0
    3b64:	1f 92       	push	r1
    3b66:	a0 91 90 04 	lds	r26, 0x0490
    3b6a:	b0 91 91 04 	lds	r27, 0x0491
    3b6e:	1e 90       	ld	r1, -X
    3b70:	be bf       	out	0x3e, r27	; 62
    3b72:	ad bf       	out	0x3d, r26	; 61
    3b74:	08 95       	ret

00003b76 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    3b76:	1f 92       	push	r1
    3b78:	0f 92       	push	r0
    3b7a:	0f b6       	in	r0, 0x3f	; 63
    3b7c:	0f 92       	push	r0
    3b7e:	11 24       	eor	r1, r1
    3b80:	0b b6       	in	r0, 0x3b	; 59
    3b82:	0f 92       	push	r0
    3b84:	2f 93       	push	r18
    3b86:	3f 93       	push	r19
    3b88:	4f 93       	push	r20
    3b8a:	5f 93       	push	r21
    3b8c:	6f 93       	push	r22
    3b8e:	7f 93       	push	r23
    3b90:	8f 93       	push	r24
    3b92:	9f 93       	push	r25
    3b94:	af 93       	push	r26
    3b96:	bf 93       	push	r27
    3b98:	ef 93       	push	r30
    3b9a:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    3b9c:	e0 91 6c 04 	lds	r30, 0x046C
    3ba0:	f0 91 6d 04 	lds	r31, 0x046D
    3ba4:	30 97       	sbiw	r30, 0x00	; 0
    3ba6:	11 f0       	breq	.+4      	; 0x3bac <__vector_32+0x36>
    3ba8:	09 95       	icall
    3baa:	04 c0       	rjmp	.+8      	; 0x3bb4 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3bac:	60 e0       	ldi	r22, 0x00	; 0
    3bae:	8a e0       	ldi	r24, 0x0A	; 10
    3bb0:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_kernel_error_add>
	return;  	
}
    3bb4:	ff 91       	pop	r31
    3bb6:	ef 91       	pop	r30
    3bb8:	bf 91       	pop	r27
    3bba:	af 91       	pop	r26
    3bbc:	9f 91       	pop	r25
    3bbe:	8f 91       	pop	r24
    3bc0:	7f 91       	pop	r23
    3bc2:	6f 91       	pop	r22
    3bc4:	5f 91       	pop	r21
    3bc6:	4f 91       	pop	r20
    3bc8:	3f 91       	pop	r19
    3bca:	2f 91       	pop	r18
    3bcc:	0f 90       	pop	r0
    3bce:	0b be       	out	0x3b, r0	; 59
    3bd0:	0f 90       	pop	r0
    3bd2:	0f be       	out	0x3f, r0	; 63
    3bd4:	0f 90       	pop	r0
    3bd6:	1f 90       	pop	r1
    3bd8:	18 95       	reti

00003bda <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    3bda:	1f 92       	push	r1
    3bdc:	0f 92       	push	r0
    3bde:	0f b6       	in	r0, 0x3f	; 63
    3be0:	0f 92       	push	r0
    3be2:	11 24       	eor	r1, r1

	return;  	
} 
    3be4:	0f 90       	pop	r0
    3be6:	0f be       	out	0x3f, r0	; 63
    3be8:	0f 90       	pop	r0
    3bea:	1f 90       	pop	r1
    3bec:	18 95       	reti

00003bee <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    3bee:	04 b6       	in	r0, 0x34	; 52
    3bf0:	03 fe       	sbrs	r0, 3
    3bf2:	02 c0       	rjmp	.+4      	; 0x3bf8 <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    3bf4:	80 e1       	ldi	r24, 0x10	; 16
    3bf6:	01 c0       	rjmp	.+2      	; 0x3bfa <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    3bfa:	04 b6       	in	r0, 0x34	; 52
    3bfc:	02 fe       	sbrs	r0, 2
    3bfe:	06 c0       	rjmp	.+12     	; 0x3c0c <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    3c00:	94 b7       	in	r25, 0x34	; 52
    3c02:	9b 7f       	andi	r25, 0xFB	; 251
    3c04:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    3c06:	04 b6       	in	r0, 0x34	; 52
    3c08:	00 fe       	sbrs	r0, 0
		error|=0x04;
    3c0a:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    3c0c:	04 b6       	in	r0, 0x34	; 52
    3c0e:	01 fe       	sbrs	r0, 1
    3c10:	05 c0       	rjmp	.+10     	; 0x3c1c <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    3c12:	94 b7       	in	r25, 0x34	; 52
    3c14:	9d 7f       	andi	r25, 0xFD	; 253
    3c16:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    3c18:	82 60       	ori	r24, 0x02	; 2
    3c1a:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    3c1c:	81 11       	cpse	r24, r1
    3c1e:	0c c0       	rjmp	.+24     	; 0x3c38 <_nrk_startup_error+0x4a>


// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    3c20:	04 b6       	in	r0, 0x34	; 52
    3c22:	00 fe       	sbrs	r0, 0
    3c24:	04 c0       	rjmp	.+8      	; 0x3c2e <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    3c26:	94 b7       	in	r25, 0x34	; 52
    3c28:	9e 7f       	andi	r25, 0xFE	; 254
    3c2a:	94 bf       	out	0x34, r25	; 52
    3c2c:	01 c0       	rjmp	.+2      	; 0x3c30 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    3c30:	90 91 b0 00 	lds	r25, 0x00B0
    3c34:	91 11       	cpse	r25, r1
    3c36:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    3c38:	08 95       	ret

00003c3a <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    3c3a:	81 11       	cpse	r24, r1
    3c3c:	02 c0       	rjmp	.+4      	; 0x3c42 <nrk_ext_int_enable+0x8>
    3c3e:	e8 9a       	sbi	0x1d, 0	; 29
    3c40:	39 c0       	rjmp	.+114    	; 0x3cb4 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    3c42:	81 30       	cpi	r24, 0x01	; 1
    3c44:	11 f4       	brne	.+4      	; 0x3c4a <nrk_ext_int_enable+0x10>
    3c46:	e9 9a       	sbi	0x1d, 1	; 29
    3c48:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    3c4a:	82 30       	cpi	r24, 0x02	; 2
    3c4c:	11 f4       	brne	.+4      	; 0x3c52 <nrk_ext_int_enable+0x18>
    3c4e:	ea 9a       	sbi	0x1d, 2	; 29
    3c50:	31 c0       	rjmp	.+98     	; 0x3cb4 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    3c52:	83 30       	cpi	r24, 0x03	; 3
    3c54:	21 f4       	brne	.+8      	; 0x3c5e <nrk_ext_int_enable+0x24>
    3c56:	80 91 6b 00 	lds	r24, 0x006B
    3c5a:	81 60       	ori	r24, 0x01	; 1
    3c5c:	29 c0       	rjmp	.+82     	; 0x3cb0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    3c5e:	84 30       	cpi	r24, 0x04	; 4
    3c60:	21 f4       	brne	.+8      	; 0x3c6a <nrk_ext_int_enable+0x30>
    3c62:	80 91 6b 00 	lds	r24, 0x006B
    3c66:	82 60       	ori	r24, 0x02	; 2
    3c68:	23 c0       	rjmp	.+70     	; 0x3cb0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    3c6a:	85 30       	cpi	r24, 0x05	; 5
    3c6c:	21 f4       	brne	.+8      	; 0x3c76 <nrk_ext_int_enable+0x3c>
    3c6e:	80 91 6b 00 	lds	r24, 0x006B
    3c72:	84 60       	ori	r24, 0x04	; 4
    3c74:	1d c0       	rjmp	.+58     	; 0x3cb0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    3c76:	86 30       	cpi	r24, 0x06	; 6
    3c78:	21 f4       	brne	.+8      	; 0x3c82 <nrk_ext_int_enable+0x48>
    3c7a:	80 91 6b 00 	lds	r24, 0x006B
    3c7e:	88 60       	ori	r24, 0x08	; 8
    3c80:	17 c0       	rjmp	.+46     	; 0x3cb0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    3c82:	87 30       	cpi	r24, 0x07	; 7
    3c84:	21 f4       	brne	.+8      	; 0x3c8e <nrk_ext_int_enable+0x54>
    3c86:	80 91 6b 00 	lds	r24, 0x006B
    3c8a:	80 61       	ori	r24, 0x10	; 16
    3c8c:	11 c0       	rjmp	.+34     	; 0x3cb0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    3c8e:	88 30       	cpi	r24, 0x08	; 8
    3c90:	21 f4       	brne	.+8      	; 0x3c9a <nrk_ext_int_enable+0x60>
    3c92:	80 91 6b 00 	lds	r24, 0x006B
    3c96:	80 62       	ori	r24, 0x20	; 32
    3c98:	0b c0       	rjmp	.+22     	; 0x3cb0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    3c9a:	89 30       	cpi	r24, 0x09	; 9
    3c9c:	21 f4       	brne	.+8      	; 0x3ca6 <nrk_ext_int_enable+0x6c>
    3c9e:	80 91 6b 00 	lds	r24, 0x006B
    3ca2:	80 64       	ori	r24, 0x40	; 64
    3ca4:	05 c0       	rjmp	.+10     	; 0x3cb0 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    3ca6:	8a 30       	cpi	r24, 0x0A	; 10
    3ca8:	39 f4       	brne	.+14     	; 0x3cb8 <nrk_ext_int_enable+0x7e>
    3caa:	80 91 6b 00 	lds	r24, 0x006B
    3cae:	80 68       	ori	r24, 0x80	; 128
    3cb0:	80 93 6b 00 	sts	0x006B, r24
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	08 95       	ret
return NRK_ERROR;
    3cb8:	8f ef       	ldi	r24, 0xFF	; 255
}
    3cba:	08 95       	ret

00003cbc <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    3cbc:	81 11       	cpse	r24, r1
    3cbe:	02 c0       	rjmp	.+4      	; 0x3cc4 <nrk_ext_int_disable+0x8>
    3cc0:	e8 98       	cbi	0x1d, 0	; 29
    3cc2:	39 c0       	rjmp	.+114    	; 0x3d36 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    3cc4:	81 30       	cpi	r24, 0x01	; 1
    3cc6:	11 f4       	brne	.+4      	; 0x3ccc <nrk_ext_int_disable+0x10>
    3cc8:	e9 98       	cbi	0x1d, 1	; 29
    3cca:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    3ccc:	82 30       	cpi	r24, 0x02	; 2
    3cce:	11 f4       	brne	.+4      	; 0x3cd4 <nrk_ext_int_disable+0x18>
    3cd0:	e9 98       	cbi	0x1d, 1	; 29
    3cd2:	31 c0       	rjmp	.+98     	; 0x3d36 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    3cd4:	83 30       	cpi	r24, 0x03	; 3
    3cd6:	21 f4       	brne	.+8      	; 0x3ce0 <nrk_ext_int_disable+0x24>
    3cd8:	80 91 6b 00 	lds	r24, 0x006B
    3cdc:	8e 7f       	andi	r24, 0xFE	; 254
    3cde:	29 c0       	rjmp	.+82     	; 0x3d32 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    3ce0:	84 30       	cpi	r24, 0x04	; 4
    3ce2:	21 f4       	brne	.+8      	; 0x3cec <nrk_ext_int_disable+0x30>
    3ce4:	80 91 6b 00 	lds	r24, 0x006B
    3ce8:	8d 7f       	andi	r24, 0xFD	; 253
    3cea:	23 c0       	rjmp	.+70     	; 0x3d32 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    3cec:	85 30       	cpi	r24, 0x05	; 5
    3cee:	21 f4       	brne	.+8      	; 0x3cf8 <nrk_ext_int_disable+0x3c>
    3cf0:	80 91 6b 00 	lds	r24, 0x006B
    3cf4:	8b 7f       	andi	r24, 0xFB	; 251
    3cf6:	1d c0       	rjmp	.+58     	; 0x3d32 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    3cf8:	86 30       	cpi	r24, 0x06	; 6
    3cfa:	21 f4       	brne	.+8      	; 0x3d04 <nrk_ext_int_disable+0x48>
    3cfc:	80 91 6b 00 	lds	r24, 0x006B
    3d00:	87 7f       	andi	r24, 0xF7	; 247
    3d02:	17 c0       	rjmp	.+46     	; 0x3d32 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    3d04:	87 30       	cpi	r24, 0x07	; 7
    3d06:	21 f4       	brne	.+8      	; 0x3d10 <nrk_ext_int_disable+0x54>
    3d08:	80 91 6b 00 	lds	r24, 0x006B
    3d0c:	8f 7e       	andi	r24, 0xEF	; 239
    3d0e:	11 c0       	rjmp	.+34     	; 0x3d32 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    3d10:	88 30       	cpi	r24, 0x08	; 8
    3d12:	21 f4       	brne	.+8      	; 0x3d1c <nrk_ext_int_disable+0x60>
    3d14:	80 91 6b 00 	lds	r24, 0x006B
    3d18:	8f 7d       	andi	r24, 0xDF	; 223
    3d1a:	0b c0       	rjmp	.+22     	; 0x3d32 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    3d1c:	89 30       	cpi	r24, 0x09	; 9
    3d1e:	21 f4       	brne	.+8      	; 0x3d28 <nrk_ext_int_disable+0x6c>
    3d20:	80 91 6b 00 	lds	r24, 0x006B
    3d24:	8f 7b       	andi	r24, 0xBF	; 191
    3d26:	05 c0       	rjmp	.+10     	; 0x3d32 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    3d28:	8a 30       	cpi	r24, 0x0A	; 10
    3d2a:	39 f4       	brne	.+14     	; 0x3d3a <nrk_ext_int_disable+0x7e>
    3d2c:	80 91 6b 00 	lds	r24, 0x006B
    3d30:	8f 77       	andi	r24, 0x7F	; 127
    3d32:	80 93 6b 00 	sts	0x006B, r24
    3d36:	81 e0       	ldi	r24, 0x01	; 1
    3d38:	08 95       	ret
return NRK_ERROR;
    3d3a:	8f ef       	ldi	r24, 0xFF	; 255
}
    3d3c:	08 95       	ret

00003d3e <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    3d3e:	81 11       	cpse	r24, r1
    3d40:	26 c0       	rjmp	.+76     	; 0x3d8e <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    3d42:	50 93 10 06 	sts	0x0610, r21
    3d46:	40 93 0f 06 	sts	0x060F, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    3d4a:	61 11       	cpse	r22, r1
    3d4c:	04 c0       	rjmp	.+8      	; 0x3d56 <nrk_ext_int_configure+0x18>
    3d4e:	80 91 69 00 	lds	r24, 0x0069
    3d52:	8c 7f       	andi	r24, 0xFC	; 252
    3d54:	3d c0       	rjmp	.+122    	; 0x3dd0 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    3d56:	61 30       	cpi	r22, 0x01	; 1
    3d58:	49 f4       	brne	.+18     	; 0x3d6c <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    3d5a:	80 91 69 00 	lds	r24, 0x0069
    3d5e:	8d 7f       	andi	r24, 0xFD	; 253
    3d60:	80 93 69 00 	sts	0x0069, r24
    3d64:	80 91 69 00 	lds	r24, 0x0069
    3d68:	81 60       	ori	r24, 0x01	; 1
    3d6a:	32 c0       	rjmp	.+100    	; 0x3dd0 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    3d6c:	62 30       	cpi	r22, 0x02	; 2
    3d6e:	49 f4       	brne	.+18     	; 0x3d82 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    3d70:	80 91 69 00 	lds	r24, 0x0069
    3d74:	82 60       	ori	r24, 0x02	; 2
    3d76:	80 93 69 00 	sts	0x0069, r24
    3d7a:	80 91 69 00 	lds	r24, 0x0069
    3d7e:	8e 7f       	andi	r24, 0xFE	; 254
    3d80:	27 c0       	rjmp	.+78     	; 0x3dd0 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    3d82:	63 30       	cpi	r22, 0x03	; 3
    3d84:	39 f5       	brne	.+78     	; 0x3dd4 <nrk_ext_int_configure+0x96>
    3d86:	80 91 69 00 	lds	r24, 0x0069
    3d8a:	83 60       	ori	r24, 0x03	; 3
    3d8c:	21 c0       	rjmp	.+66     	; 0x3dd0 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    3d8e:	81 30       	cpi	r24, 0x01	; 1
    3d90:	49 f5       	brne	.+82     	; 0x3de4 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    3d92:	50 93 0e 06 	sts	0x060E, r21
    3d96:	40 93 0d 06 	sts	0x060D, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    3d9a:	61 11       	cpse	r22, r1
    3d9c:	04 c0       	rjmp	.+8      	; 0x3da6 <nrk_ext_int_configure+0x68>
    3d9e:	80 91 69 00 	lds	r24, 0x0069
    3da2:	83 7f       	andi	r24, 0xF3	; 243
    3da4:	15 c0       	rjmp	.+42     	; 0x3dd0 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    3da6:	61 30       	cpi	r22, 0x01	; 1
    3da8:	49 f4       	brne	.+18     	; 0x3dbc <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    3daa:	80 91 69 00 	lds	r24, 0x0069
    3dae:	87 7f       	andi	r24, 0xF7	; 247
    3db0:	80 93 69 00 	sts	0x0069, r24
    3db4:	80 91 69 00 	lds	r24, 0x0069
    3db8:	84 60       	ori	r24, 0x04	; 4
    3dba:	0a c0       	rjmp	.+20     	; 0x3dd0 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    3dbc:	62 30       	cpi	r22, 0x02	; 2
    3dbe:	61 f4       	brne	.+24     	; 0x3dd8 <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    3dc0:	80 91 69 00 	lds	r24, 0x0069
    3dc4:	88 60       	ori	r24, 0x08	; 8
    3dc6:	80 93 69 00 	sts	0x0069, r24
    3dca:	80 91 69 00 	lds	r24, 0x0069
    3dce:	8b 7f       	andi	r24, 0xFB	; 251
    3dd0:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    3dd8:	63 30       	cpi	r22, 0x03	; 3
    3dda:	e1 f7       	brne	.-8      	; 0x3dd4 <nrk_ext_int_configure+0x96>
    3ddc:	80 91 69 00 	lds	r24, 0x0069
    3de0:	8c 60       	ori	r24, 0x0C	; 12
    3de2:	f6 cf       	rjmp	.-20     	; 0x3dd0 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    3de4:	82 30       	cpi	r24, 0x02	; 2
    3de6:	31 f5       	brne	.+76     	; 0x3e34 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    3de8:	50 93 12 06 	sts	0x0612, r21
    3dec:	40 93 11 06 	sts	0x0611, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    3df0:	61 11       	cpse	r22, r1
    3df2:	04 c0       	rjmp	.+8      	; 0x3dfc <nrk_ext_int_configure+0xbe>
    3df4:	80 91 69 00 	lds	r24, 0x0069
    3df8:	8f 7c       	andi	r24, 0xCF	; 207
    3dfa:	ea cf       	rjmp	.-44     	; 0x3dd0 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    3dfc:	61 30       	cpi	r22, 0x01	; 1
    3dfe:	49 f4       	brne	.+18     	; 0x3e12 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    3e00:	80 91 69 00 	lds	r24, 0x0069
    3e04:	8f 7d       	andi	r24, 0xDF	; 223
    3e06:	80 93 69 00 	sts	0x0069, r24
    3e0a:	80 91 69 00 	lds	r24, 0x0069
    3e0e:	80 61       	ori	r24, 0x10	; 16
    3e10:	df cf       	rjmp	.-66     	; 0x3dd0 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    3e12:	62 30       	cpi	r22, 0x02	; 2
    3e14:	49 f4       	brne	.+18     	; 0x3e28 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    3e16:	80 91 69 00 	lds	r24, 0x0069
    3e1a:	80 62       	ori	r24, 0x20	; 32
    3e1c:	80 93 69 00 	sts	0x0069, r24
    3e20:	80 91 69 00 	lds	r24, 0x0069
    3e24:	8f 7e       	andi	r24, 0xEF	; 239
    3e26:	d4 cf       	rjmp	.-88     	; 0x3dd0 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    3e28:	63 30       	cpi	r22, 0x03	; 3
    3e2a:	a1 f6       	brne	.-88     	; 0x3dd4 <nrk_ext_int_configure+0x96>
    3e2c:	80 91 69 00 	lds	r24, 0x0069
    3e30:	80 63       	ori	r24, 0x30	; 48
    3e32:	ce cf       	rjmp	.-100    	; 0x3dd0 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    3e34:	83 50       	subi	r24, 0x03	; 3
    3e36:	88 30       	cpi	r24, 0x08	; 8
    3e38:	50 f4       	brcc	.+20     	; 0x3e4e <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    3e3a:	80 91 68 00 	lds	r24, 0x0068
    3e3e:	81 60       	ori	r24, 0x01	; 1
    3e40:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    3e44:	50 93 14 06 	sts	0x0614, r21
    3e48:	40 93 13 06 	sts	0x0613, r20
    3e4c:	c3 cf       	rjmp	.-122    	; 0x3dd4 <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    3e4e:	8f ef       	ldi	r24, 0xFF	; 255
}
    3e50:	08 95       	ret

00003e52 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    3e52:	1f 92       	push	r1
    3e54:	0f 92       	push	r0
    3e56:	0f b6       	in	r0, 0x3f	; 63
    3e58:	0f 92       	push	r0
    3e5a:	11 24       	eor	r1, r1
    3e5c:	0b b6       	in	r0, 0x3b	; 59
    3e5e:	0f 92       	push	r0
    3e60:	2f 93       	push	r18
    3e62:	3f 93       	push	r19
    3e64:	4f 93       	push	r20
    3e66:	5f 93       	push	r21
    3e68:	6f 93       	push	r22
    3e6a:	7f 93       	push	r23
    3e6c:	8f 93       	push	r24
    3e6e:	9f 93       	push	r25
    3e70:	af 93       	push	r26
    3e72:	bf 93       	push	r27
    3e74:	ef 93       	push	r30
    3e76:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    3e78:	e0 91 13 06 	lds	r30, 0x0613
    3e7c:	f0 91 14 06 	lds	r31, 0x0614
    3e80:	30 97       	sbiw	r30, 0x00	; 0
    3e82:	11 f0       	breq	.+4      	; 0x3e88 <__vector_9+0x36>
    3e84:	09 95       	icall
    3e86:	04 c0       	rjmp	.+8      	; 0x3e90 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3e88:	60 e0       	ldi	r22, 0x00	; 0
    3e8a:	8a e0       	ldi	r24, 0x0A	; 10
    3e8c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_kernel_error_add>
	return;  	
}
    3e90:	ff 91       	pop	r31
    3e92:	ef 91       	pop	r30
    3e94:	bf 91       	pop	r27
    3e96:	af 91       	pop	r26
    3e98:	9f 91       	pop	r25
    3e9a:	8f 91       	pop	r24
    3e9c:	7f 91       	pop	r23
    3e9e:	6f 91       	pop	r22
    3ea0:	5f 91       	pop	r21
    3ea2:	4f 91       	pop	r20
    3ea4:	3f 91       	pop	r19
    3ea6:	2f 91       	pop	r18
    3ea8:	0f 90       	pop	r0
    3eaa:	0b be       	out	0x3b, r0	; 59
    3eac:	0f 90       	pop	r0
    3eae:	0f be       	out	0x3f, r0	; 63
    3eb0:	0f 90       	pop	r0
    3eb2:	1f 90       	pop	r1
    3eb4:	18 95       	reti

00003eb6 <__vector_1>:


SIGNAL(INT0_vect) {
    3eb6:	1f 92       	push	r1
    3eb8:	0f 92       	push	r0
    3eba:	0f b6       	in	r0, 0x3f	; 63
    3ebc:	0f 92       	push	r0
    3ebe:	11 24       	eor	r1, r1
    3ec0:	0b b6       	in	r0, 0x3b	; 59
    3ec2:	0f 92       	push	r0
    3ec4:	2f 93       	push	r18
    3ec6:	3f 93       	push	r19
    3ec8:	4f 93       	push	r20
    3eca:	5f 93       	push	r21
    3ecc:	6f 93       	push	r22
    3ece:	7f 93       	push	r23
    3ed0:	8f 93       	push	r24
    3ed2:	9f 93       	push	r25
    3ed4:	af 93       	push	r26
    3ed6:	bf 93       	push	r27
    3ed8:	ef 93       	push	r30
    3eda:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    3edc:	e0 91 0f 06 	lds	r30, 0x060F
    3ee0:	f0 91 10 06 	lds	r31, 0x0610
    3ee4:	30 97       	sbiw	r30, 0x00	; 0
    3ee6:	11 f0       	breq	.+4      	; 0x3eec <__vector_1+0x36>
    3ee8:	09 95       	icall
    3eea:	04 c0       	rjmp	.+8      	; 0x3ef4 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3eec:	60 e0       	ldi	r22, 0x00	; 0
    3eee:	8a e0       	ldi	r24, 0x0A	; 10
    3ef0:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_kernel_error_add>
	return;  	
}
    3ef4:	ff 91       	pop	r31
    3ef6:	ef 91       	pop	r30
    3ef8:	bf 91       	pop	r27
    3efa:	af 91       	pop	r26
    3efc:	9f 91       	pop	r25
    3efe:	8f 91       	pop	r24
    3f00:	7f 91       	pop	r23
    3f02:	6f 91       	pop	r22
    3f04:	5f 91       	pop	r21
    3f06:	4f 91       	pop	r20
    3f08:	3f 91       	pop	r19
    3f0a:	2f 91       	pop	r18
    3f0c:	0f 90       	pop	r0
    3f0e:	0b be       	out	0x3b, r0	; 59
    3f10:	0f 90       	pop	r0
    3f12:	0f be       	out	0x3f, r0	; 63
    3f14:	0f 90       	pop	r0
    3f16:	1f 90       	pop	r1
    3f18:	18 95       	reti

00003f1a <__vector_2>:

SIGNAL(INT1_vect) {
    3f1a:	1f 92       	push	r1
    3f1c:	0f 92       	push	r0
    3f1e:	0f b6       	in	r0, 0x3f	; 63
    3f20:	0f 92       	push	r0
    3f22:	11 24       	eor	r1, r1
    3f24:	0b b6       	in	r0, 0x3b	; 59
    3f26:	0f 92       	push	r0
    3f28:	2f 93       	push	r18
    3f2a:	3f 93       	push	r19
    3f2c:	4f 93       	push	r20
    3f2e:	5f 93       	push	r21
    3f30:	6f 93       	push	r22
    3f32:	7f 93       	push	r23
    3f34:	8f 93       	push	r24
    3f36:	9f 93       	push	r25
    3f38:	af 93       	push	r26
    3f3a:	bf 93       	push	r27
    3f3c:	ef 93       	push	r30
    3f3e:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    3f40:	e0 91 0d 06 	lds	r30, 0x060D
    3f44:	f0 91 0e 06 	lds	r31, 0x060E
    3f48:	30 97       	sbiw	r30, 0x00	; 0
    3f4a:	11 f0       	breq	.+4      	; 0x3f50 <__vector_2+0x36>
    3f4c:	09 95       	icall
    3f4e:	04 c0       	rjmp	.+8      	; 0x3f58 <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3f50:	60 e0       	ldi	r22, 0x00	; 0
    3f52:	8a e0       	ldi	r24, 0x0A	; 10
    3f54:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_kernel_error_add>
	return;  	
}
    3f58:	ff 91       	pop	r31
    3f5a:	ef 91       	pop	r30
    3f5c:	bf 91       	pop	r27
    3f5e:	af 91       	pop	r26
    3f60:	9f 91       	pop	r25
    3f62:	8f 91       	pop	r24
    3f64:	7f 91       	pop	r23
    3f66:	6f 91       	pop	r22
    3f68:	5f 91       	pop	r21
    3f6a:	4f 91       	pop	r20
    3f6c:	3f 91       	pop	r19
    3f6e:	2f 91       	pop	r18
    3f70:	0f 90       	pop	r0
    3f72:	0b be       	out	0x3b, r0	; 59
    3f74:	0f 90       	pop	r0
    3f76:	0f be       	out	0x3f, r0	; 63
    3f78:	0f 90       	pop	r0
    3f7a:	1f 90       	pop	r1
    3f7c:	18 95       	reti

00003f7e <__vector_3>:

SIGNAL(INT2_vect) {
    3f7e:	1f 92       	push	r1
    3f80:	0f 92       	push	r0
    3f82:	0f b6       	in	r0, 0x3f	; 63
    3f84:	0f 92       	push	r0
    3f86:	11 24       	eor	r1, r1
    3f88:	0b b6       	in	r0, 0x3b	; 59
    3f8a:	0f 92       	push	r0
    3f8c:	2f 93       	push	r18
    3f8e:	3f 93       	push	r19
    3f90:	4f 93       	push	r20
    3f92:	5f 93       	push	r21
    3f94:	6f 93       	push	r22
    3f96:	7f 93       	push	r23
    3f98:	8f 93       	push	r24
    3f9a:	9f 93       	push	r25
    3f9c:	af 93       	push	r26
    3f9e:	bf 93       	push	r27
    3fa0:	ef 93       	push	r30
    3fa2:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    3fa4:	e0 91 11 06 	lds	r30, 0x0611
    3fa8:	f0 91 12 06 	lds	r31, 0x0612
    3fac:	30 97       	sbiw	r30, 0x00	; 0
    3fae:	11 f0       	breq	.+4      	; 0x3fb4 <__vector_3+0x36>
    3fb0:	09 95       	icall
    3fb2:	04 c0       	rjmp	.+8      	; 0x3fbc <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    3fb4:	60 e0       	ldi	r22, 0x00	; 0
    3fb6:	8a e0       	ldi	r24, 0x0A	; 10
    3fb8:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <nrk_kernel_error_add>
	return;  	
}
    3fbc:	ff 91       	pop	r31
    3fbe:	ef 91       	pop	r30
    3fc0:	bf 91       	pop	r27
    3fc2:	af 91       	pop	r26
    3fc4:	9f 91       	pop	r25
    3fc6:	8f 91       	pop	r24
    3fc8:	7f 91       	pop	r23
    3fca:	6f 91       	pop	r22
    3fcc:	5f 91       	pop	r21
    3fce:	4f 91       	pop	r20
    3fd0:	3f 91       	pop	r19
    3fd2:	2f 91       	pop	r18
    3fd4:	0f 90       	pop	r0
    3fd6:	0b be       	out	0x3b, r0	; 59
    3fd8:	0f 90       	pop	r0
    3fda:	0f be       	out	0x3f, r0	; 63
    3fdc:	0f 90       	pop	r0
    3fde:	1f 90       	pop	r1
    3fe0:	18 95       	reti

00003fe2 <nrk_watchdog_disable>:
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    3fe2:	a8 95       	wdr
#include <util/atomic.h>

void nrk_watchdog_disable()
{
nrk_watchdog_reset();
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    3fe4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3fe6:	f8 94       	cli
{
	MCUSR &= ~(1<<WDRF);
    3fe8:	84 b7       	in	r24, 0x34	; 52
    3fea:	87 7f       	andi	r24, 0xF7	; 247
    3fec:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE) | (1<<WDE);
    3fee:	e0 e6       	ldi	r30, 0x60	; 96
    3ff0:	f0 e0       	ldi	r31, 0x00	; 0
    3ff2:	80 81       	ld	r24, Z
    3ff4:	88 61       	ori	r24, 0x18	; 24
    3ff6:	80 83       	st	Z, r24
	WDTCSR = 0;
    3ff8:	10 82       	st	Z, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3ffa:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    3ffc:	08 95       	ret

00003ffe <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    3ffe:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4000:	f8 94       	cli
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4002:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
{
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4004:	84 b7       	in	r24, 0x34	; 52
    4006:	87 7f       	andi	r24, 0xF7	; 247
    4008:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    400a:	e0 e6       	ldi	r30, 0x60	; 96
    400c:	f0 e0       	ldi	r31, 0x00	; 0
    400e:	80 81       	ld	r24, Z
    4010:	88 61       	ori	r24, 0x18	; 24
    4012:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    4014:	8d e0       	ldi	r24, 0x0D	; 13
    4016:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4018:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    401a:	08 95       	ret

0000401c <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    401c:	04 b6       	in	r0, 0x34	; 52
    401e:	03 fe       	sbrs	r0, 3
    4020:	02 c0       	rjmp	.+4      	; 0x4026 <nrk_watchdog_check+0xa>
return NRK_ERROR;
    4022:	8f ef       	ldi	r24, 0xFF	; 255
    4024:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4026:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    4028:	08 95       	ret

0000402a <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    402a:	a8 95       	wdr
    402c:	08 95       	ret

0000402e <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    402e:	08 95       	ret

00004030 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    4030:	83 b7       	in	r24, 0x33	; 51
    4032:	81 7f       	andi	r24, 0xF1	; 241
    4034:	86 60       	ori	r24, 0x06	; 6
    4036:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4038:	83 b7       	in	r24, 0x33	; 51
    403a:	81 60       	ori	r24, 0x01	; 1
    403c:	83 bf       	out	0x33, r24	; 51
    403e:	88 95       	sleep
    4040:	83 b7       	in	r24, 0x33	; 51
    4042:	8e 7f       	andi	r24, 0xFE	; 254
    4044:	83 bf       	out	0x33, r24	; 51
    4046:	08 95       	ret

00004048 <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    4048:	83 b7       	in	r24, 0x33	; 51
    404a:	81 7f       	andi	r24, 0xF1	; 241
    404c:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    404e:	83 b7       	in	r24, 0x33	; 51
    4050:	81 60       	ori	r24, 0x01	; 1
    4052:	83 bf       	out	0x33, r24	; 51
    4054:	88 95       	sleep
    4056:	83 b7       	in	r24, 0x33	; 51
    4058:	8e 7f       	andi	r24, 0xFE	; 254
    405a:	83 bf       	out	0x33, r24	; 51
    405c:	08 95       	ret

0000405e <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    405e:	fc 01       	movw	r30, r24
    4060:	76 83       	std	Z+6, r23	; 0x06
    4062:	65 83       	std	Z+5, r22	; 0x05
    4064:	08 95       	ret

00004066 <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    4066:	ef 92       	push	r14
    4068:	ff 92       	push	r15
    406a:	0f 93       	push	r16
    406c:	1f 93       	push	r17
    406e:	cf 93       	push	r28
    4070:	df 93       	push	r29
    4072:	8c 01       	movw	r16, r24
    4074:	7b 01       	movw	r14, r22
    4076:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    4078:	40 32       	cpi	r20, 0x20	; 32
    407a:	51 05       	cpc	r21, r1
    407c:	18 f4       	brcc	.+6      	; 0x4084 <nrk_task_set_stk+0x1e>
    407e:	81 e1       	ldi	r24, 0x11	; 17
    4080:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    4084:	21 97       	sbiw	r28, 0x01	; 1
    4086:	ce 0d       	add	r28, r14
    4088:	df 1d       	adc	r29, r15
    408a:	f8 01       	movw	r30, r16
    408c:	d2 83       	std	Z+2, r29	; 0x02
    408e:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    4090:	f4 82       	std	Z+4, r15	; 0x04
    4092:	e3 82       	std	Z+3, r14	; 0x03

}
    4094:	df 91       	pop	r29
    4096:	cf 91       	pop	r28
    4098:	1f 91       	pop	r17
    409a:	0f 91       	pop	r16
    409c:	ff 90       	pop	r15
    409e:	ef 90       	pop	r14
    40a0:	08 95       	ret

000040a2 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    40a2:	25 e5       	ldi	r18, 0x55	; 85
    40a4:	fa 01       	movw	r30, r20
    40a6:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    40a8:	fb 01       	movw	r30, r22
    40aa:	32 97       	sbiw	r30, 0x02	; 2
    40ac:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    40ae:	31 96       	adiw	r30, 0x01	; 1
    40b0:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    40b2:	33 97       	sbiw	r30, 0x03	; 3
    40b4:	11 82       	std	Z+1, r1	; 0x01
    40b6:	10 82       	st	Z, r1
    *(--stk) = 0;       
    40b8:	32 97       	sbiw	r30, 0x02	; 2
    40ba:	11 82       	std	Z+1, r1	; 0x01
    40bc:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    40be:	32 97       	sbiw	r30, 0x02	; 2
    40c0:	11 82       	std	Z+1, r1	; 0x01
    40c2:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    40c4:	32 97       	sbiw	r30, 0x02	; 2
    40c6:	11 82       	std	Z+1, r1	; 0x01
    40c8:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    40ca:	32 97       	sbiw	r30, 0x02	; 2
    40cc:	11 82       	std	Z+1, r1	; 0x01
    40ce:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    40d0:	32 97       	sbiw	r30, 0x02	; 2
    40d2:	11 82       	std	Z+1, r1	; 0x01
    40d4:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    40d6:	32 97       	sbiw	r30, 0x02	; 2
    40d8:	11 82       	std	Z+1, r1	; 0x01
    40da:	10 82       	st	Z, r1
    *(--stk) = 0; 
    40dc:	32 97       	sbiw	r30, 0x02	; 2
    40de:	11 82       	std	Z+1, r1	; 0x01
    40e0:	10 82       	st	Z, r1

    *(--stk) = 0; 
    40e2:	32 97       	sbiw	r30, 0x02	; 2
    40e4:	11 82       	std	Z+1, r1	; 0x01
    40e6:	10 82       	st	Z, r1
    *(--stk) = 0; 
    40e8:	32 97       	sbiw	r30, 0x02	; 2
    40ea:	11 82       	std	Z+1, r1	; 0x01
    40ec:	10 82       	st	Z, r1
    *(--stk) = 0; 
    40ee:	32 97       	sbiw	r30, 0x02	; 2
    40f0:	11 82       	std	Z+1, r1	; 0x01
    40f2:	10 82       	st	Z, r1
    *(--stk) = 0; 
    40f4:	32 97       	sbiw	r30, 0x02	; 2
    40f6:	11 82       	std	Z+1, r1	; 0x01
    40f8:	10 82       	st	Z, r1
    *(--stk) = 0; 
    40fa:	32 97       	sbiw	r30, 0x02	; 2
    40fc:	11 82       	std	Z+1, r1	; 0x01
    40fe:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4100:	32 97       	sbiw	r30, 0x02	; 2
    4102:	11 82       	std	Z+1, r1	; 0x01
    4104:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4106:	32 97       	sbiw	r30, 0x02	; 2
    4108:	11 82       	std	Z+1, r1	; 0x01
    410a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    410c:	32 97       	sbiw	r30, 0x02	; 2
    410e:	11 82       	std	Z+1, r1	; 0x01
    4110:	10 82       	st	Z, r1
    *(--stk) = 0;
    4112:	cb 01       	movw	r24, r22
    4114:	84 97       	sbiw	r24, 0x24	; 36
    4116:	fc 01       	movw	r30, r24
    4118:	11 82       	std	Z+1, r1	; 0x01
    411a:	10 82       	st	Z, r1


    return ((void *)stk);
}
    411c:	08 95       	ret

0000411e <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    411e:	85 e5       	ldi	r24, 0x55	; 85
    4120:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    4124:	ee ef       	ldi	r30, 0xFE	; 254
    4126:	f1 e4       	ldi	r31, 0x41	; 65
    4128:	f0 93 91 04 	sts	0x0491, r31
    412c:	e0 93 90 04 	sts	0x0490, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4130:	88 ec       	ldi	r24, 0xC8	; 200
    4132:	9d e0       	ldi	r25, 0x0D	; 13
    4134:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4136:	80 93 ff 41 	sts	0x41FF, r24
    413a:	08 95       	ret

0000413c <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    413c:	88 ec       	ldi	r24, 0xC8	; 200
    413e:	9d e0       	ldi	r25, 0x0D	; 13
    4140:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4144:	80 93 ff 41 	sts	0x41FF, r24
    4148:	08 95       	ret

0000414a <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    414a:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <_nrk_setup_timer>
  nrk_int_enable();  
    414e:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <nrk_int_enable>

00004152 <nrk_start_high_ready_task>:
    4152:	a0 91 e1 05 	lds	r26, 0x05E1
    4156:	b0 91 e2 05 	lds	r27, 0x05E2
    415a:	cd 91       	ld	r28, X+
    415c:	cd bf       	out	0x3d, r28	; 61
    415e:	dd 91       	ld	r29, X+
    4160:	de bf       	out	0x3e, r29	; 62
    4162:	ff 91       	pop	r31
    4164:	ef 91       	pop	r30
    4166:	df 91       	pop	r29
    4168:	cf 91       	pop	r28
    416a:	bf 91       	pop	r27
    416c:	af 91       	pop	r26
    416e:	9f 91       	pop	r25
    4170:	8f 91       	pop	r24
    4172:	7f 91       	pop	r23
    4174:	6f 91       	pop	r22
    4176:	5f 91       	pop	r21
    4178:	4f 91       	pop	r20
    417a:	3f 91       	pop	r19
    417c:	2f 91       	pop	r18
    417e:	1f 91       	pop	r17
    4180:	0f 91       	pop	r16
    4182:	ff 90       	pop	r15
    4184:	ef 90       	pop	r14
    4186:	df 90       	pop	r13
    4188:	cf 90       	pop	r12
    418a:	bf 90       	pop	r11
    418c:	af 90       	pop	r10
    418e:	9f 90       	pop	r9
    4190:	8f 90       	pop	r8
    4192:	7f 90       	pop	r7
    4194:	6f 90       	pop	r6
    4196:	5f 90       	pop	r5
    4198:	4f 90       	pop	r4
    419a:	3f 90       	pop	r3
    419c:	2f 90       	pop	r2
    419e:	1f 90       	pop	r1
    41a0:	0f 90       	pop	r0
    41a2:	0f be       	out	0x3f, r0	; 63
    41a4:	0f 90       	pop	r0
    41a6:	18 95       	reti

000041a8 <main>:

int main (void)
{
    uint8_t i;

    nrk_setup_ports(); 
    41a8:	0e 94 c3 07 	call	0xf86	; 0xf86 <nrk_setup_ports>
    nrk_setup_uart (UART_BAUDRATE_115K2);
    41ac:	80 e1       	ldi	r24, 0x10	; 16
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	0e 94 47 0b 	call	0x168e	; 0x168e <nrk_setup_uart>
 
    rfRxInfo.pPayload = rx_buf;
    41b4:	89 e7       	ldi	r24, 0x79	; 121
    41b6:	93 e0       	ldi	r25, 0x03	; 3
    41b8:	90 93 6f 03 	sts	0x036F, r25
    41bc:	80 93 6e 03 	sts	0x036E, r24
    rfRxInfo.max_length = RF_MAX_PAYLOAD_SIZE;
    41c0:	84 e7       	ldi	r24, 0x74	; 116
    41c2:	80 93 6d 03 	sts	0x036D, r24
	nrk_int_enable();
    41c6:	0e 94 14 0c 	call	0x1828	; 0x1828 <nrk_int_enable>
	rf_init (&rfRxInfo, 13, 0xffff, 0);
    41ca:	20 e0       	ldi	r18, 0x00	; 0
    41cc:	30 e0       	ldi	r19, 0x00	; 0
    41ce:	4f ef       	ldi	r20, 0xFF	; 255
    41d0:	5f ef       	ldi	r21, 0xFF	; 255
    41d2:	6d e0       	ldi	r22, 0x0D	; 13
    41d4:	89 e6       	ldi	r24, 0x69	; 105
    41d6:	93 e0       	ldi	r25, 0x03	; 3
    41d8:	0e 94 c5 02 	call	0x58a	; 0x58a <rf_init>
	while(1){
		DPDS1 |= 0x3;
		rfTxInfo.pPayload=tx_buf;
    41dc:	0d ee       	ldi	r16, 0xED	; 237
    41de:	13 e0       	ldi	r17, 0x03	; 3
    rfRxInfo.pPayload = rx_buf;
    rfRxInfo.max_length = RF_MAX_PAYLOAD_SIZE;
	nrk_int_enable();
	rf_init (&rfRxInfo, 13, 0xffff, 0);
	while(1){
		DPDS1 |= 0x3;
    41e0:	80 91 37 01 	lds	r24, 0x0137
    41e4:	83 60       	ori	r24, 0x03	; 3
    41e6:	80 93 37 01 	sts	0x0137, r24
		rfTxInfo.pPayload=tx_buf;
    41ea:	10 93 65 04 	sts	0x0465, r17
    41ee:	00 93 64 04 	sts	0x0464, r16
		sprintf( tx_buf, "%s", "this is a test message"); 
    41f2:	67 e6       	ldi	r22, 0x67	; 103
    41f4:	72 e0       	ldi	r23, 0x02	; 2
    41f6:	8d ee       	ldi	r24, 0xED	; 237
    41f8:	93 e0       	ldi	r25, 0x03	; 3
    41fa:	0e 94 3a 23 	call	0x4674	; 0x4674 <strcpy>
		rfTxInfo.length= strlen(tx_buf) + 1;
    41fe:	f8 01       	movw	r30, r16
    4200:	01 90       	ld	r0, Z+
    4202:	00 20       	and	r0, r0
    4204:	e9 f7       	brne	.-6      	; 0x4200 <__stack+0x1>
    4206:	31 97       	sbiw	r30, 0x01	; 1
    4208:	ed 5e       	subi	r30, 0xED	; 237
    420a:	f3 40       	sbci	r31, 0x03	; 3
    420c:	ef 5f       	subi	r30, 0xFF	; 255
    420e:	e0 93 63 04 	sts	0x0463, r30
		rfTxInfo.destAddr = 0x0;
    4212:	10 92 62 04 	sts	0x0462, r1
    4216:	10 92 61 04 	sts	0x0461, r1
		rfTxInfo.cca = 0;
    421a:	10 92 66 04 	sts	0x0466, r1
		rfTxInfo.ackRequest = 0;
    421e:	10 92 67 04 	sts	0x0467, r1

		printf( "Sending\r\n" );
    4222:	8e e7       	ldi	r24, 0x7E	; 126
    4224:	92 e0       	ldi	r25, 0x02	; 2
    4226:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <puts>
		if(rf_tx_packet(&rfTxInfo) != 1)
    422a:	81 e6       	ldi	r24, 0x61	; 97
    422c:	94 e0       	ldi	r25, 0x04	; 4
    422e:	0e 94 41 03 	call	0x682	; 0x682 <rf_tx_packet>
    4232:	81 30       	cpi	r24, 0x01	; 1
    4234:	21 f0       	breq	.+8      	; 0x423e <__stack+0x3f>
			printf("--- RF_TX ERROR ---\r\n");
    4236:	87 e8       	ldi	r24, 0x87	; 135
    4238:	92 e0       	ldi	r25, 0x02	; 2
    423a:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <puts>
uint8_t tx_buf[RF_MAX_PAYLOAD_SIZE];
uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];


int main (void)
{
    423e:	ca e0       	ldi	r28, 0x0A	; 10
		printf( "Sending\r\n" );
		if(rf_tx_packet(&rfTxInfo) != 1)
			printf("--- RF_TX ERROR ---\r\n");

		for(i=0; i<10; i++ )
			halWait(10000);
    4240:	80 e1       	ldi	r24, 0x10	; 16
    4242:	97 e2       	ldi	r25, 0x27	; 39
    4244:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <halWait>
    4248:	c1 50       	subi	r28, 0x01	; 1

		printf( "Sending\r\n" );
		if(rf_tx_packet(&rfTxInfo) != 1)
			printf("--- RF_TX ERROR ---\r\n");

		for(i=0; i<10; i++ )
    424a:	d1 f7       	brne	.-12     	; 0x4240 <__stack+0x41>
			halWait(10000);
		nrk_led_toggle(RED_LED);
    424c:	80 e0       	ldi	r24, 0x00	; 0
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	0e 94 c7 0a 	call	0x158e	; 0x158e <nrk_led_toggle>
	}
    4254:	c5 cf       	rjmp	.-118    	; 0x41e0 <main+0x38>

00004256 <vfprintf>:
    4256:	6f 92       	push	r6
    4258:	7f 92       	push	r7
    425a:	8f 92       	push	r8
    425c:	9f 92       	push	r9
    425e:	af 92       	push	r10
    4260:	bf 92       	push	r11
    4262:	cf 92       	push	r12
    4264:	df 92       	push	r13
    4266:	ef 92       	push	r14
    4268:	ff 92       	push	r15
    426a:	0f 93       	push	r16
    426c:	1f 93       	push	r17
    426e:	cf 93       	push	r28
    4270:	df 93       	push	r29
    4272:	cd b7       	in	r28, 0x3d	; 61
    4274:	de b7       	in	r29, 0x3e	; 62
    4276:	2c 97       	sbiw	r28, 0x0c	; 12
    4278:	0f b6       	in	r0, 0x3f	; 63
    427a:	f8 94       	cli
    427c:	de bf       	out	0x3e, r29	; 62
    427e:	0f be       	out	0x3f, r0	; 63
    4280:	cd bf       	out	0x3d, r28	; 61
    4282:	6c 01       	movw	r12, r24
    4284:	5b 01       	movw	r10, r22
    4286:	7a 01       	movw	r14, r20
    4288:	fc 01       	movw	r30, r24
    428a:	17 82       	std	Z+7, r1	; 0x07
    428c:	16 82       	std	Z+6, r1	; 0x06
    428e:	83 81       	ldd	r24, Z+3	; 0x03
    4290:	81 ff       	sbrs	r24, 1
    4292:	0e c1       	rjmp	.+540    	; 0x44b0 <vfprintf+0x25a>
    4294:	ce 01       	movw	r24, r28
    4296:	01 96       	adiw	r24, 0x01	; 1
    4298:	4c 01       	movw	r8, r24
    429a:	f6 01       	movw	r30, r12
    429c:	03 81       	ldd	r16, Z+3	; 0x03
    429e:	f5 01       	movw	r30, r10
    42a0:	03 fd       	sbrc	r16, 3
    42a2:	15 91       	lpm	r17, Z+
    42a4:	03 ff       	sbrs	r16, 3
    42a6:	11 91       	ld	r17, Z+
    42a8:	5f 01       	movw	r10, r30
    42aa:	11 23       	and	r17, r17
    42ac:	09 f4       	brne	.+2      	; 0x42b0 <vfprintf+0x5a>
    42ae:	fc c0       	rjmp	.+504    	; 0x44a8 <vfprintf+0x252>
    42b0:	15 32       	cpi	r17, 0x25	; 37
    42b2:	49 f4       	brne	.+18     	; 0x42c6 <vfprintf+0x70>
    42b4:	03 fd       	sbrc	r16, 3
    42b6:	15 91       	lpm	r17, Z+
    42b8:	03 ff       	sbrs	r16, 3
    42ba:	11 91       	ld	r17, Z+
    42bc:	5f 01       	movw	r10, r30
    42be:	15 32       	cpi	r17, 0x25	; 37
    42c0:	11 f0       	breq	.+4      	; 0x42c6 <vfprintf+0x70>
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	1b c0       	rjmp	.+54     	; 0x42fc <vfprintf+0xa6>
    42c6:	b6 01       	movw	r22, r12
    42c8:	81 2f       	mov	r24, r17
    42ca:	90 e0       	ldi	r25, 0x00	; 0
    42cc:	0e 94 9a 23 	call	0x4734	; 0x4734 <fputc>
    42d0:	37 01       	movw	r6, r14
    42d2:	73 01       	movw	r14, r6
    42d4:	e2 cf       	rjmp	.-60     	; 0x429a <vfprintf+0x44>
    42d6:	11 23       	and	r17, r17
    42d8:	09 f4       	brne	.+2      	; 0x42dc <vfprintf+0x86>
    42da:	e6 c0       	rjmp	.+460    	; 0x44a8 <vfprintf+0x252>
    42dc:	61 2f       	mov	r22, r17
    42de:	70 e0       	ldi	r23, 0x00	; 0
    42e0:	80 e1       	ldi	r24, 0x10	; 16
    42e2:	94 e0       	ldi	r25, 0x04	; 4
    42e4:	2c 87       	std	Y+12, r18	; 0x0c
    42e6:	0e 94 26 23 	call	0x464c	; 0x464c <strchr_P>
    42ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    42ec:	89 2b       	or	r24, r25
    42ee:	49 f0       	breq	.+18     	; 0x4302 <vfprintf+0xac>
    42f0:	f5 01       	movw	r30, r10
    42f2:	03 fd       	sbrc	r16, 3
    42f4:	15 91       	lpm	r17, Z+
    42f6:	03 ff       	sbrs	r16, 3
    42f8:	11 91       	ld	r17, Z+
    42fa:	5f 01       	movw	r10, r30
    42fc:	27 ff       	sbrs	r18, 7
    42fe:	eb cf       	rjmp	.-42     	; 0x42d6 <vfprintf+0x80>
    4300:	09 c0       	rjmp	.+18     	; 0x4314 <vfprintf+0xbe>
    4302:	13 32       	cpi	r17, 0x23	; 35
    4304:	29 f0       	breq	.+10     	; 0x4310 <vfprintf+0xba>
    4306:	1c 36       	cpi	r17, 0x6C	; 108
    4308:	09 f0       	breq	.+2      	; 0x430c <vfprintf+0xb6>
    430a:	d5 c0       	rjmp	.+426    	; 0x44b6 <vfprintf+0x260>
    430c:	20 68       	ori	r18, 0x80	; 128
    430e:	f0 cf       	rjmp	.-32     	; 0x42f0 <vfprintf+0x9a>
    4310:	20 e1       	ldi	r18, 0x10	; 16
    4312:	ee cf       	rjmp	.-36     	; 0x42f0 <vfprintf+0x9a>
    4314:	02 2f       	mov	r16, r18
    4316:	11 23       	and	r17, r17
    4318:	09 f4       	brne	.+2      	; 0x431c <vfprintf+0xc6>
    431a:	c6 c0       	rjmp	.+396    	; 0x44a8 <vfprintf+0x252>
    431c:	61 2f       	mov	r22, r17
    431e:	70 e0       	ldi	r23, 0x00	; 0
    4320:	89 e0       	ldi	r24, 0x09	; 9
    4322:	94 e0       	ldi	r25, 0x04	; 4
    4324:	2c 87       	std	Y+12, r18	; 0x0c
    4326:	0e 94 26 23 	call	0x464c	; 0x464c <strchr_P>
    432a:	2c 85       	ldd	r18, Y+12	; 0x0c
    432c:	89 2b       	or	r24, r25
    432e:	41 f0       	breq	.+16     	; 0x4340 <vfprintf+0xea>
    4330:	37 01       	movw	r6, r14
    4332:	f4 e0       	ldi	r31, 0x04	; 4
    4334:	6f 0e       	add	r6, r31
    4336:	71 1c       	adc	r7, r1
    4338:	b6 01       	movw	r22, r12
    433a:	8f e3       	ldi	r24, 0x3F	; 63
    433c:	90 e0       	ldi	r25, 0x00	; 0
    433e:	11 c0       	rjmp	.+34     	; 0x4362 <vfprintf+0x10c>
    4340:	13 36       	cpi	r17, 0x63	; 99
    4342:	39 f0       	breq	.+14     	; 0x4352 <vfprintf+0xfc>
    4344:	13 37       	cpi	r17, 0x73	; 115
    4346:	81 f0       	breq	.+32     	; 0x4368 <vfprintf+0x112>
    4348:	13 35       	cpi	r17, 0x53	; 83
    434a:	19 f5       	brne	.+70     	; 0x4392 <vfprintf+0x13c>
    434c:	02 2f       	mov	r16, r18
    434e:	01 60       	ori	r16, 0x01	; 1
    4350:	0b c0       	rjmp	.+22     	; 0x4368 <vfprintf+0x112>
    4352:	37 01       	movw	r6, r14
    4354:	82 e0       	ldi	r24, 0x02	; 2
    4356:	68 0e       	add	r6, r24
    4358:	71 1c       	adc	r7, r1
    435a:	b6 01       	movw	r22, r12
    435c:	f7 01       	movw	r30, r14
    435e:	80 81       	ld	r24, Z
    4360:	91 81       	ldd	r25, Z+1	; 0x01
    4362:	0e 94 9a 23 	call	0x4734	; 0x4734 <fputc>
    4366:	b5 cf       	rjmp	.-150    	; 0x42d2 <vfprintf+0x7c>
    4368:	37 01       	movw	r6, r14
    436a:	f2 e0       	ldi	r31, 0x02	; 2
    436c:	6f 0e       	add	r6, r31
    436e:	71 1c       	adc	r7, r1
    4370:	f7 01       	movw	r30, r14
    4372:	e0 80       	ld	r14, Z
    4374:	f1 80       	ldd	r15, Z+1	; 0x01
    4376:	f7 01       	movw	r30, r14
    4378:	00 fd       	sbrc	r16, 0
    437a:	85 91       	lpm	r24, Z+
    437c:	00 ff       	sbrs	r16, 0
    437e:	81 91       	ld	r24, Z+
    4380:	7f 01       	movw	r14, r30
    4382:	88 23       	and	r24, r24
    4384:	09 f4       	brne	.+2      	; 0x4388 <vfprintf+0x132>
    4386:	a5 cf       	rjmp	.-182    	; 0x42d2 <vfprintf+0x7c>
    4388:	b6 01       	movw	r22, r12
    438a:	90 e0       	ldi	r25, 0x00	; 0
    438c:	0e 94 9a 23 	call	0x4734	; 0x4734 <fputc>
    4390:	f2 cf       	rjmp	.-28     	; 0x4376 <vfprintf+0x120>
    4392:	14 36       	cpi	r17, 0x64	; 100
    4394:	11 f0       	breq	.+4      	; 0x439a <vfprintf+0x144>
    4396:	19 36       	cpi	r17, 0x69	; 105
    4398:	29 f5       	brne	.+74     	; 0x43e4 <vfprintf+0x18e>
    439a:	37 01       	movw	r6, r14
    439c:	27 ff       	sbrs	r18, 7
    439e:	09 c0       	rjmp	.+18     	; 0x43b2 <vfprintf+0x15c>
    43a0:	f4 e0       	ldi	r31, 0x04	; 4
    43a2:	6f 0e       	add	r6, r31
    43a4:	71 1c       	adc	r7, r1
    43a6:	f7 01       	movw	r30, r14
    43a8:	60 81       	ld	r22, Z
    43aa:	71 81       	ldd	r23, Z+1	; 0x01
    43ac:	82 81       	ldd	r24, Z+2	; 0x02
    43ae:	93 81       	ldd	r25, Z+3	; 0x03
    43b0:	0a c0       	rjmp	.+20     	; 0x43c6 <vfprintf+0x170>
    43b2:	f2 e0       	ldi	r31, 0x02	; 2
    43b4:	6f 0e       	add	r6, r31
    43b6:	71 1c       	adc	r7, r1
    43b8:	f7 01       	movw	r30, r14
    43ba:	60 81       	ld	r22, Z
    43bc:	71 81       	ldd	r23, Z+1	; 0x01
    43be:	88 27       	eor	r24, r24
    43c0:	77 fd       	sbrc	r23, 7
    43c2:	80 95       	com	r24
    43c4:	98 2f       	mov	r25, r24
    43c6:	02 2f       	mov	r16, r18
    43c8:	0f 7e       	andi	r16, 0xEF	; 239
    43ca:	97 ff       	sbrs	r25, 7
    43cc:	08 c0       	rjmp	.+16     	; 0x43de <vfprintf+0x188>
    43ce:	90 95       	com	r25
    43d0:	80 95       	com	r24
    43d2:	70 95       	com	r23
    43d4:	61 95       	neg	r22
    43d6:	7f 4f       	sbci	r23, 0xFF	; 255
    43d8:	8f 4f       	sbci	r24, 0xFF	; 255
    43da:	9f 4f       	sbci	r25, 0xFF	; 255
    43dc:	00 64       	ori	r16, 0x40	; 64
    43de:	2a e0       	ldi	r18, 0x0A	; 10
    43e0:	30 e0       	ldi	r19, 0x00	; 0
    43e2:	33 c0       	rjmp	.+102    	; 0x444a <vfprintf+0x1f4>
    43e4:	10 37       	cpi	r17, 0x70	; 112
    43e6:	99 f0       	breq	.+38     	; 0x440e <vfprintf+0x1b8>
    43e8:	40 f4       	brcc	.+16     	; 0x43fa <vfprintf+0x1a4>
    43ea:	18 35       	cpi	r17, 0x58	; 88
    43ec:	b1 f0       	breq	.+44     	; 0x441a <vfprintf+0x1c4>
    43ee:	1f 36       	cpi	r17, 0x6F	; 111
    43f0:	09 f0       	breq	.+2      	; 0x43f4 <vfprintf+0x19e>
    43f2:	5a c0       	rjmp	.+180    	; 0x44a8 <vfprintf+0x252>
    43f4:	28 e0       	ldi	r18, 0x08	; 8
    43f6:	30 e0       	ldi	r19, 0x00	; 0
    43f8:	14 c0       	rjmp	.+40     	; 0x4422 <vfprintf+0x1cc>
    43fa:	15 37       	cpi	r17, 0x75	; 117
    43fc:	19 f0       	breq	.+6      	; 0x4404 <vfprintf+0x1ae>
    43fe:	18 37       	cpi	r17, 0x78	; 120
    4400:	41 f0       	breq	.+16     	; 0x4412 <vfprintf+0x1bc>
    4402:	52 c0       	rjmp	.+164    	; 0x44a8 <vfprintf+0x252>
    4404:	02 2f       	mov	r16, r18
    4406:	0f 7e       	andi	r16, 0xEF	; 239
    4408:	2a e0       	ldi	r18, 0x0A	; 10
    440a:	30 e0       	ldi	r19, 0x00	; 0
    440c:	0a c0       	rjmp	.+20     	; 0x4422 <vfprintf+0x1cc>
    440e:	02 2f       	mov	r16, r18
    4410:	00 61       	ori	r16, 0x10	; 16
    4412:	04 62       	ori	r16, 0x24	; 36
    4414:	20 e1       	ldi	r18, 0x10	; 16
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	04 c0       	rjmp	.+8      	; 0x4422 <vfprintf+0x1cc>
    441a:	02 2f       	mov	r16, r18
    441c:	04 60       	ori	r16, 0x04	; 4
    441e:	20 e1       	ldi	r18, 0x10	; 16
    4420:	32 e0       	ldi	r19, 0x02	; 2
    4422:	37 01       	movw	r6, r14
    4424:	07 ff       	sbrs	r16, 7
    4426:	09 c0       	rjmp	.+18     	; 0x443a <vfprintf+0x1e4>
    4428:	f4 e0       	ldi	r31, 0x04	; 4
    442a:	6f 0e       	add	r6, r31
    442c:	71 1c       	adc	r7, r1
    442e:	f7 01       	movw	r30, r14
    4430:	60 81       	ld	r22, Z
    4432:	71 81       	ldd	r23, Z+1	; 0x01
    4434:	82 81       	ldd	r24, Z+2	; 0x02
    4436:	93 81       	ldd	r25, Z+3	; 0x03
    4438:	08 c0       	rjmp	.+16     	; 0x444a <vfprintf+0x1f4>
    443a:	f2 e0       	ldi	r31, 0x02	; 2
    443c:	6f 0e       	add	r6, r31
    443e:	71 1c       	adc	r7, r1
    4440:	f7 01       	movw	r30, r14
    4442:	60 81       	ld	r22, Z
    4444:	71 81       	ldd	r23, Z+1	; 0x01
    4446:	80 e0       	ldi	r24, 0x00	; 0
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	a4 01       	movw	r20, r8
    444c:	0e 94 4c 24 	call	0x4898	; 0x4898 <__ultoa_invert>
    4450:	18 2f       	mov	r17, r24
    4452:	18 19       	sub	r17, r8
    4454:	06 ff       	sbrs	r16, 6
    4456:	05 c0       	rjmp	.+10     	; 0x4462 <vfprintf+0x20c>
    4458:	b6 01       	movw	r22, r12
    445a:	8d e2       	ldi	r24, 0x2D	; 45
    445c:	90 e0       	ldi	r25, 0x00	; 0
    445e:	0e 94 9a 23 	call	0x4734	; 0x4734 <fputc>
    4462:	04 ff       	sbrs	r16, 4
    4464:	15 c0       	rjmp	.+42     	; 0x4490 <vfprintf+0x23a>
    4466:	fe 01       	movw	r30, r28
    4468:	e1 0f       	add	r30, r17
    446a:	f1 1d       	adc	r31, r1
    446c:	80 81       	ld	r24, Z
    446e:	80 33       	cpi	r24, 0x30	; 48
    4470:	79 f0       	breq	.+30     	; 0x4490 <vfprintf+0x23a>
    4472:	b6 01       	movw	r22, r12
    4474:	80 e3       	ldi	r24, 0x30	; 48
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	0e 94 9a 23 	call	0x4734	; 0x4734 <fputc>
    447c:	02 ff       	sbrs	r16, 2
    447e:	08 c0       	rjmp	.+16     	; 0x4490 <vfprintf+0x23a>
    4480:	00 72       	andi	r16, 0x20	; 32
    4482:	80 2f       	mov	r24, r16
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	b6 01       	movw	r22, r12
    4488:	88 5a       	subi	r24, 0xA8	; 168
    448a:	9f 4f       	sbci	r25, 0xFF	; 255
    448c:	0e 94 9a 23 	call	0x4734	; 0x4734 <fputc>
    4490:	11 50       	subi	r17, 0x01	; 1
    4492:	f4 01       	movw	r30, r8
    4494:	e1 0f       	add	r30, r17
    4496:	f1 1d       	adc	r31, r1
    4498:	80 81       	ld	r24, Z
    449a:	b6 01       	movw	r22, r12
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	0e 94 9a 23 	call	0x4734	; 0x4734 <fputc>
    44a2:	11 11       	cpse	r17, r1
    44a4:	f5 cf       	rjmp	.-22     	; 0x4490 <vfprintf+0x23a>
    44a6:	15 cf       	rjmp	.-470    	; 0x42d2 <vfprintf+0x7c>
    44a8:	f6 01       	movw	r30, r12
    44aa:	86 81       	ldd	r24, Z+6	; 0x06
    44ac:	97 81       	ldd	r25, Z+7	; 0x07
    44ae:	05 c0       	rjmp	.+10     	; 0x44ba <vfprintf+0x264>
    44b0:	8f ef       	ldi	r24, 0xFF	; 255
    44b2:	9f ef       	ldi	r25, 0xFF	; 255
    44b4:	02 c0       	rjmp	.+4      	; 0x44ba <vfprintf+0x264>
    44b6:	02 2f       	mov	r16, r18
    44b8:	31 cf       	rjmp	.-414    	; 0x431c <vfprintf+0xc6>
    44ba:	2c 96       	adiw	r28, 0x0c	; 12
    44bc:	0f b6       	in	r0, 0x3f	; 63
    44be:	f8 94       	cli
    44c0:	de bf       	out	0x3e, r29	; 62
    44c2:	0f be       	out	0x3f, r0	; 63
    44c4:	cd bf       	out	0x3d, r28	; 61
    44c6:	df 91       	pop	r29
    44c8:	cf 91       	pop	r28
    44ca:	1f 91       	pop	r17
    44cc:	0f 91       	pop	r16
    44ce:	ff 90       	pop	r15
    44d0:	ef 90       	pop	r14
    44d2:	df 90       	pop	r13
    44d4:	cf 90       	pop	r12
    44d6:	bf 90       	pop	r11
    44d8:	af 90       	pop	r10
    44da:	9f 90       	pop	r9
    44dc:	8f 90       	pop	r8
    44de:	7f 90       	pop	r7
    44e0:	6f 90       	pop	r6
    44e2:	08 95       	ret

000044e4 <__muluhisi3>:
    44e4:	0e 94 17 23 	call	0x462e	; 0x462e <__umulhisi3>
    44e8:	a5 9f       	mul	r26, r21
    44ea:	90 0d       	add	r25, r0
    44ec:	b4 9f       	mul	r27, r20
    44ee:	90 0d       	add	r25, r0
    44f0:	a4 9f       	mul	r26, r20
    44f2:	80 0d       	add	r24, r0
    44f4:	91 1d       	adc	r25, r1
    44f6:	11 24       	eor	r1, r1
    44f8:	08 95       	ret

000044fa <__mulsi3>:
    44fa:	db 01       	movw	r26, r22
    44fc:	8f 93       	push	r24
    44fe:	9f 93       	push	r25
    4500:	0e 94 72 22 	call	0x44e4	; 0x44e4 <__muluhisi3>
    4504:	bf 91       	pop	r27
    4506:	af 91       	pop	r26
    4508:	a2 9f       	mul	r26, r18
    450a:	80 0d       	add	r24, r0
    450c:	91 1d       	adc	r25, r1
    450e:	a3 9f       	mul	r26, r19
    4510:	90 0d       	add	r25, r0
    4512:	b2 9f       	mul	r27, r18
    4514:	90 0d       	add	r25, r0
    4516:	11 24       	eor	r1, r1
    4518:	08 95       	ret

0000451a <__udivmodsi4>:
    451a:	a1 e2       	ldi	r26, 0x21	; 33
    451c:	1a 2e       	mov	r1, r26
    451e:	aa 1b       	sub	r26, r26
    4520:	bb 1b       	sub	r27, r27
    4522:	fd 01       	movw	r30, r26
    4524:	0d c0       	rjmp	.+26     	; 0x4540 <__udivmodsi4_ep>

00004526 <__udivmodsi4_loop>:
    4526:	aa 1f       	adc	r26, r26
    4528:	bb 1f       	adc	r27, r27
    452a:	ee 1f       	adc	r30, r30
    452c:	ff 1f       	adc	r31, r31
    452e:	a2 17       	cp	r26, r18
    4530:	b3 07       	cpc	r27, r19
    4532:	e4 07       	cpc	r30, r20
    4534:	f5 07       	cpc	r31, r21
    4536:	20 f0       	brcs	.+8      	; 0x4540 <__udivmodsi4_ep>
    4538:	a2 1b       	sub	r26, r18
    453a:	b3 0b       	sbc	r27, r19
    453c:	e4 0b       	sbc	r30, r20
    453e:	f5 0b       	sbc	r31, r21

00004540 <__udivmodsi4_ep>:
    4540:	66 1f       	adc	r22, r22
    4542:	77 1f       	adc	r23, r23
    4544:	88 1f       	adc	r24, r24
    4546:	99 1f       	adc	r25, r25
    4548:	1a 94       	dec	r1
    454a:	69 f7       	brne	.-38     	; 0x4526 <__udivmodsi4_loop>
    454c:	60 95       	com	r22
    454e:	70 95       	com	r23
    4550:	80 95       	com	r24
    4552:	90 95       	com	r25
    4554:	9b 01       	movw	r18, r22
    4556:	ac 01       	movw	r20, r24
    4558:	bd 01       	movw	r22, r26
    455a:	cf 01       	movw	r24, r30
    455c:	08 95       	ret

0000455e <__umoddi3>:
    455e:	68 94       	set
    4560:	01 c0       	rjmp	.+2      	; 0x4564 <__udivdi3_umoddi3>

00004562 <__udivdi3>:
    4562:	e8 94       	clt

00004564 <__udivdi3_umoddi3>:
    4564:	8f 92       	push	r8
    4566:	9f 92       	push	r9
    4568:	cf 93       	push	r28
    456a:	df 93       	push	r29
    456c:	0e 94 bd 22 	call	0x457a	; 0x457a <__udivmod64>
    4570:	df 91       	pop	r29
    4572:	cf 91       	pop	r28
    4574:	9f 90       	pop	r9
    4576:	8f 90       	pop	r8
    4578:	08 95       	ret

0000457a <__udivmod64>:
    457a:	88 24       	eor	r8, r8
    457c:	99 24       	eor	r9, r9
    457e:	f4 01       	movw	r30, r8
    4580:	e4 01       	movw	r28, r8
    4582:	b0 e4       	ldi	r27, 0x40	; 64
    4584:	9f 93       	push	r25
    4586:	aa 27       	eor	r26, r26
    4588:	9a 15       	cp	r25, r10
    458a:	8b 04       	cpc	r8, r11
    458c:	9c 04       	cpc	r9, r12
    458e:	ed 05       	cpc	r30, r13
    4590:	fe 05       	cpc	r31, r14
    4592:	cf 05       	cpc	r28, r15
    4594:	d0 07       	cpc	r29, r16
    4596:	a1 07       	cpc	r26, r17
    4598:	98 f4       	brcc	.+38     	; 0x45c0 <__udivmod64+0x46>
    459a:	ad 2f       	mov	r26, r29
    459c:	dc 2f       	mov	r29, r28
    459e:	cf 2f       	mov	r28, r31
    45a0:	fe 2f       	mov	r31, r30
    45a2:	e9 2d       	mov	r30, r9
    45a4:	98 2c       	mov	r9, r8
    45a6:	89 2e       	mov	r8, r25
    45a8:	98 2f       	mov	r25, r24
    45aa:	87 2f       	mov	r24, r23
    45ac:	76 2f       	mov	r23, r22
    45ae:	65 2f       	mov	r22, r21
    45b0:	54 2f       	mov	r21, r20
    45b2:	43 2f       	mov	r20, r19
    45b4:	32 2f       	mov	r19, r18
    45b6:	22 27       	eor	r18, r18
    45b8:	b8 50       	subi	r27, 0x08	; 8
    45ba:	31 f7       	brne	.-52     	; 0x4588 <__udivmod64+0xe>
    45bc:	bf 91       	pop	r27
    45be:	27 c0       	rjmp	.+78     	; 0x460e <__udivmod64+0x94>
    45c0:	1b 2e       	mov	r1, r27
    45c2:	bf 91       	pop	r27
    45c4:	bb 27       	eor	r27, r27
    45c6:	22 0f       	add	r18, r18
    45c8:	33 1f       	adc	r19, r19
    45ca:	44 1f       	adc	r20, r20
    45cc:	55 1f       	adc	r21, r21
    45ce:	66 1f       	adc	r22, r22
    45d0:	77 1f       	adc	r23, r23
    45d2:	88 1f       	adc	r24, r24
    45d4:	99 1f       	adc	r25, r25
    45d6:	88 1c       	adc	r8, r8
    45d8:	99 1c       	adc	r9, r9
    45da:	ee 1f       	adc	r30, r30
    45dc:	ff 1f       	adc	r31, r31
    45de:	cc 1f       	adc	r28, r28
    45e0:	dd 1f       	adc	r29, r29
    45e2:	aa 1f       	adc	r26, r26
    45e4:	bb 1f       	adc	r27, r27
    45e6:	8a 14       	cp	r8, r10
    45e8:	9b 04       	cpc	r9, r11
    45ea:	ec 05       	cpc	r30, r12
    45ec:	fd 05       	cpc	r31, r13
    45ee:	ce 05       	cpc	r28, r14
    45f0:	df 05       	cpc	r29, r15
    45f2:	a0 07       	cpc	r26, r16
    45f4:	b1 07       	cpc	r27, r17
    45f6:	48 f0       	brcs	.+18     	; 0x460a <__udivmod64+0x90>
    45f8:	8a 18       	sub	r8, r10
    45fa:	9b 08       	sbc	r9, r11
    45fc:	ec 09       	sbc	r30, r12
    45fe:	fd 09       	sbc	r31, r13
    4600:	ce 09       	sbc	r28, r14
    4602:	df 09       	sbc	r29, r15
    4604:	a0 0b       	sbc	r26, r16
    4606:	b1 0b       	sbc	r27, r17
    4608:	21 60       	ori	r18, 0x01	; 1
    460a:	1a 94       	dec	r1
    460c:	e1 f6       	brne	.-72     	; 0x45c6 <__udivmod64+0x4c>
    460e:	2e f4       	brtc	.+10     	; 0x461a <__udivmod64+0xa0>
    4610:	94 01       	movw	r18, r8
    4612:	af 01       	movw	r20, r30
    4614:	be 01       	movw	r22, r28
    4616:	cd 01       	movw	r24, r26
    4618:	00 0c       	add	r0, r0
    461a:	08 95       	ret

0000461c <__tablejump2__>:
    461c:	ee 0f       	add	r30, r30
    461e:	ff 1f       	adc	r31, r31
    4620:	00 24       	eor	r0, r0
    4622:	00 1c       	adc	r0, r0
    4624:	0b be       	out	0x3b, r0	; 59
    4626:	07 90       	elpm	r0, Z+
    4628:	f6 91       	elpm	r31, Z
    462a:	e0 2d       	mov	r30, r0
    462c:	09 94       	ijmp

0000462e <__umulhisi3>:
    462e:	a2 9f       	mul	r26, r18
    4630:	b0 01       	movw	r22, r0
    4632:	b3 9f       	mul	r27, r19
    4634:	c0 01       	movw	r24, r0
    4636:	a3 9f       	mul	r26, r19
    4638:	70 0d       	add	r23, r0
    463a:	81 1d       	adc	r24, r1
    463c:	11 24       	eor	r1, r1
    463e:	91 1d       	adc	r25, r1
    4640:	b2 9f       	mul	r27, r18
    4642:	70 0d       	add	r23, r0
    4644:	81 1d       	adc	r24, r1
    4646:	11 24       	eor	r1, r1
    4648:	91 1d       	adc	r25, r1
    464a:	08 95       	ret

0000464c <strchr_P>:
    464c:	fc 01       	movw	r30, r24
    464e:	05 90       	lpm	r0, Z+
    4650:	06 16       	cp	r0, r22
    4652:	21 f0       	breq	.+8      	; 0x465c <strchr_P+0x10>
    4654:	00 20       	and	r0, r0
    4656:	d9 f7       	brne	.-10     	; 0x464e <strchr_P+0x2>
    4658:	c0 01       	movw	r24, r0
    465a:	08 95       	ret
    465c:	31 97       	sbiw	r30, 0x01	; 1
    465e:	cf 01       	movw	r24, r30
    4660:	08 95       	ret

00004662 <memcpy>:
    4662:	fb 01       	movw	r30, r22
    4664:	dc 01       	movw	r26, r24
    4666:	02 c0       	rjmp	.+4      	; 0x466c <memcpy+0xa>
    4668:	01 90       	ld	r0, Z+
    466a:	0d 92       	st	X+, r0
    466c:	41 50       	subi	r20, 0x01	; 1
    466e:	50 40       	sbci	r21, 0x00	; 0
    4670:	d8 f7       	brcc	.-10     	; 0x4668 <memcpy+0x6>
    4672:	08 95       	ret

00004674 <strcpy>:
    4674:	fb 01       	movw	r30, r22
    4676:	dc 01       	movw	r26, r24
    4678:	01 90       	ld	r0, Z+
    467a:	0d 92       	st	X+, r0
    467c:	00 20       	and	r0, r0
    467e:	e1 f7       	brne	.-8      	; 0x4678 <strcpy+0x4>
    4680:	08 95       	ret

00004682 <strncmp>:
    4682:	fb 01       	movw	r30, r22
    4684:	dc 01       	movw	r26, r24
    4686:	41 50       	subi	r20, 0x01	; 1
    4688:	50 40       	sbci	r21, 0x00	; 0
    468a:	30 f0       	brcs	.+12     	; 0x4698 <strncmp+0x16>
    468c:	8d 91       	ld	r24, X+
    468e:	01 90       	ld	r0, Z+
    4690:	80 19       	sub	r24, r0
    4692:	19 f4       	brne	.+6      	; 0x469a <strncmp+0x18>
    4694:	00 20       	and	r0, r0
    4696:	b9 f7       	brne	.-18     	; 0x4686 <strncmp+0x4>
    4698:	88 1b       	sub	r24, r24
    469a:	99 0b       	sbc	r25, r25
    469c:	08 95       	ret

0000469e <fdevopen>:
    469e:	0f 93       	push	r16
    46a0:	1f 93       	push	r17
    46a2:	cf 93       	push	r28
    46a4:	df 93       	push	r29
    46a6:	00 97       	sbiw	r24, 0x00	; 0
    46a8:	31 f4       	brne	.+12     	; 0x46b6 <fdevopen+0x18>
    46aa:	61 15       	cp	r22, r1
    46ac:	71 05       	cpc	r23, r1
    46ae:	19 f4       	brne	.+6      	; 0x46b6 <fdevopen+0x18>
    46b0:	80 e0       	ldi	r24, 0x00	; 0
    46b2:	90 e0       	ldi	r25, 0x00	; 0
    46b4:	3a c0       	rjmp	.+116    	; 0x472a <fdevopen+0x8c>
    46b6:	8b 01       	movw	r16, r22
    46b8:	ec 01       	movw	r28, r24
    46ba:	6e e0       	ldi	r22, 0x0E	; 14
    46bc:	70 e0       	ldi	r23, 0x00	; 0
    46be:	81 e0       	ldi	r24, 0x01	; 1
    46c0:	90 e0       	ldi	r25, 0x00	; 0
    46c2:	0e 94 c0 24 	call	0x4980	; 0x4980 <calloc>
    46c6:	fc 01       	movw	r30, r24
    46c8:	00 97       	sbiw	r24, 0x00	; 0
    46ca:	91 f3       	breq	.-28     	; 0x46b0 <fdevopen+0x12>
    46cc:	80 e8       	ldi	r24, 0x80	; 128
    46ce:	83 83       	std	Z+3, r24	; 0x03
    46d0:	01 15       	cp	r16, r1
    46d2:	11 05       	cpc	r17, r1
    46d4:	71 f0       	breq	.+28     	; 0x46f2 <fdevopen+0x54>
    46d6:	13 87       	std	Z+11, r17	; 0x0b
    46d8:	02 87       	std	Z+10, r16	; 0x0a
    46da:	81 e8       	ldi	r24, 0x81	; 129
    46dc:	83 83       	std	Z+3, r24	; 0x03
    46de:	80 91 15 06 	lds	r24, 0x0615
    46e2:	90 91 16 06 	lds	r25, 0x0616
    46e6:	89 2b       	or	r24, r25
    46e8:	21 f4       	brne	.+8      	; 0x46f2 <fdevopen+0x54>
    46ea:	f0 93 16 06 	sts	0x0616, r31
    46ee:	e0 93 15 06 	sts	0x0615, r30
    46f2:	20 97       	sbiw	r28, 0x00	; 0
    46f4:	c9 f0       	breq	.+50     	; 0x4728 <fdevopen+0x8a>
    46f6:	d1 87       	std	Z+9, r29	; 0x09
    46f8:	c0 87       	std	Z+8, r28	; 0x08
    46fa:	83 81       	ldd	r24, Z+3	; 0x03
    46fc:	82 60       	ori	r24, 0x02	; 2
    46fe:	83 83       	std	Z+3, r24	; 0x03
    4700:	80 91 17 06 	lds	r24, 0x0617
    4704:	90 91 18 06 	lds	r25, 0x0618
    4708:	89 2b       	or	r24, r25
    470a:	71 f4       	brne	.+28     	; 0x4728 <fdevopen+0x8a>
    470c:	f0 93 18 06 	sts	0x0618, r31
    4710:	e0 93 17 06 	sts	0x0617, r30
    4714:	80 91 19 06 	lds	r24, 0x0619
    4718:	90 91 1a 06 	lds	r25, 0x061A
    471c:	89 2b       	or	r24, r25
    471e:	21 f4       	brne	.+8      	; 0x4728 <fdevopen+0x8a>
    4720:	f0 93 1a 06 	sts	0x061A, r31
    4724:	e0 93 19 06 	sts	0x0619, r30
    4728:	cf 01       	movw	r24, r30
    472a:	df 91       	pop	r29
    472c:	cf 91       	pop	r28
    472e:	1f 91       	pop	r17
    4730:	0f 91       	pop	r16
    4732:	08 95       	ret

00004734 <fputc>:
    4734:	0f 93       	push	r16
    4736:	1f 93       	push	r17
    4738:	cf 93       	push	r28
    473a:	df 93       	push	r29
    473c:	fb 01       	movw	r30, r22
    473e:	23 81       	ldd	r18, Z+3	; 0x03
    4740:	21 fd       	sbrc	r18, 1
    4742:	03 c0       	rjmp	.+6      	; 0x474a <fputc+0x16>
    4744:	8f ef       	ldi	r24, 0xFF	; 255
    4746:	9f ef       	ldi	r25, 0xFF	; 255
    4748:	28 c0       	rjmp	.+80     	; 0x479a <fputc+0x66>
    474a:	22 ff       	sbrs	r18, 2
    474c:	16 c0       	rjmp	.+44     	; 0x477a <fputc+0x46>
    474e:	46 81       	ldd	r20, Z+6	; 0x06
    4750:	57 81       	ldd	r21, Z+7	; 0x07
    4752:	24 81       	ldd	r18, Z+4	; 0x04
    4754:	35 81       	ldd	r19, Z+5	; 0x05
    4756:	42 17       	cp	r20, r18
    4758:	53 07       	cpc	r21, r19
    475a:	44 f4       	brge	.+16     	; 0x476c <fputc+0x38>
    475c:	a0 81       	ld	r26, Z
    475e:	b1 81       	ldd	r27, Z+1	; 0x01
    4760:	9d 01       	movw	r18, r26
    4762:	2f 5f       	subi	r18, 0xFF	; 255
    4764:	3f 4f       	sbci	r19, 0xFF	; 255
    4766:	31 83       	std	Z+1, r19	; 0x01
    4768:	20 83       	st	Z, r18
    476a:	8c 93       	st	X, r24
    476c:	26 81       	ldd	r18, Z+6	; 0x06
    476e:	37 81       	ldd	r19, Z+7	; 0x07
    4770:	2f 5f       	subi	r18, 0xFF	; 255
    4772:	3f 4f       	sbci	r19, 0xFF	; 255
    4774:	37 83       	std	Z+7, r19	; 0x07
    4776:	26 83       	std	Z+6, r18	; 0x06
    4778:	10 c0       	rjmp	.+32     	; 0x479a <fputc+0x66>
    477a:	eb 01       	movw	r28, r22
    477c:	09 2f       	mov	r16, r25
    477e:	18 2f       	mov	r17, r24
    4780:	00 84       	ldd	r0, Z+8	; 0x08
    4782:	f1 85       	ldd	r31, Z+9	; 0x09
    4784:	e0 2d       	mov	r30, r0
    4786:	09 95       	icall
    4788:	89 2b       	or	r24, r25
    478a:	e1 f6       	brne	.-72     	; 0x4744 <fputc+0x10>
    478c:	8e 81       	ldd	r24, Y+6	; 0x06
    478e:	9f 81       	ldd	r25, Y+7	; 0x07
    4790:	01 96       	adiw	r24, 0x01	; 1
    4792:	9f 83       	std	Y+7, r25	; 0x07
    4794:	8e 83       	std	Y+6, r24	; 0x06
    4796:	81 2f       	mov	r24, r17
    4798:	90 2f       	mov	r25, r16
    479a:	df 91       	pop	r29
    479c:	cf 91       	pop	r28
    479e:	1f 91       	pop	r17
    47a0:	0f 91       	pop	r16
    47a2:	08 95       	ret

000047a4 <printf>:
    47a4:	cf 93       	push	r28
    47a6:	df 93       	push	r29
    47a8:	cd b7       	in	r28, 0x3d	; 61
    47aa:	de b7       	in	r29, 0x3e	; 62
    47ac:	ae 01       	movw	r20, r28
    47ae:	4b 5f       	subi	r20, 0xFB	; 251
    47b0:	5f 4f       	sbci	r21, 0xFF	; 255
    47b2:	fa 01       	movw	r30, r20
    47b4:	61 91       	ld	r22, Z+
    47b6:	71 91       	ld	r23, Z+
    47b8:	af 01       	movw	r20, r30
    47ba:	80 91 17 06 	lds	r24, 0x0617
    47be:	90 91 18 06 	lds	r25, 0x0618
    47c2:	0e 94 2b 21 	call	0x4256	; 0x4256 <vfprintf>
    47c6:	df 91       	pop	r29
    47c8:	cf 91       	pop	r28
    47ca:	08 95       	ret

000047cc <putchar>:
    47cc:	60 91 17 06 	lds	r22, 0x0617
    47d0:	70 91 18 06 	lds	r23, 0x0618
    47d4:	0c 94 9a 23 	jmp	0x4734	; 0x4734 <fputc>

000047d8 <puts>:
    47d8:	0f 93       	push	r16
    47da:	1f 93       	push	r17
    47dc:	cf 93       	push	r28
    47de:	df 93       	push	r29
    47e0:	e0 91 17 06 	lds	r30, 0x0617
    47e4:	f0 91 18 06 	lds	r31, 0x0618
    47e8:	23 81       	ldd	r18, Z+3	; 0x03
    47ea:	21 ff       	sbrs	r18, 1
    47ec:	1b c0       	rjmp	.+54     	; 0x4824 <puts+0x4c>
    47ee:	8c 01       	movw	r16, r24
    47f0:	d0 e0       	ldi	r29, 0x00	; 0
    47f2:	c0 e0       	ldi	r28, 0x00	; 0
    47f4:	f8 01       	movw	r30, r16
    47f6:	81 91       	ld	r24, Z+
    47f8:	8f 01       	movw	r16, r30
    47fa:	60 91 17 06 	lds	r22, 0x0617
    47fe:	70 91 18 06 	lds	r23, 0x0618
    4802:	db 01       	movw	r26, r22
    4804:	18 96       	adiw	r26, 0x08	; 8
    4806:	ed 91       	ld	r30, X+
    4808:	fc 91       	ld	r31, X
    480a:	19 97       	sbiw	r26, 0x09	; 9
    480c:	88 23       	and	r24, r24
    480e:	31 f0       	breq	.+12     	; 0x481c <puts+0x44>
    4810:	09 95       	icall
    4812:	89 2b       	or	r24, r25
    4814:	79 f3       	breq	.-34     	; 0x47f4 <puts+0x1c>
    4816:	df ef       	ldi	r29, 0xFF	; 255
    4818:	cf ef       	ldi	r28, 0xFF	; 255
    481a:	ec cf       	rjmp	.-40     	; 0x47f4 <puts+0x1c>
    481c:	8a e0       	ldi	r24, 0x0A	; 10
    481e:	09 95       	icall
    4820:	89 2b       	or	r24, r25
    4822:	19 f0       	breq	.+6      	; 0x482a <puts+0x52>
    4824:	8f ef       	ldi	r24, 0xFF	; 255
    4826:	9f ef       	ldi	r25, 0xFF	; 255
    4828:	02 c0       	rjmp	.+4      	; 0x482e <puts+0x56>
    482a:	8d 2f       	mov	r24, r29
    482c:	9c 2f       	mov	r25, r28
    482e:	df 91       	pop	r29
    4830:	cf 91       	pop	r28
    4832:	1f 91       	pop	r17
    4834:	0f 91       	pop	r16
    4836:	08 95       	ret

00004838 <sprintf>:
    4838:	0f 93       	push	r16
    483a:	1f 93       	push	r17
    483c:	cf 93       	push	r28
    483e:	df 93       	push	r29
    4840:	cd b7       	in	r28, 0x3d	; 61
    4842:	de b7       	in	r29, 0x3e	; 62
    4844:	2e 97       	sbiw	r28, 0x0e	; 14
    4846:	0f b6       	in	r0, 0x3f	; 63
    4848:	f8 94       	cli
    484a:	de bf       	out	0x3e, r29	; 62
    484c:	0f be       	out	0x3f, r0	; 63
    484e:	cd bf       	out	0x3d, r28	; 61
    4850:	0d 89       	ldd	r16, Y+21	; 0x15
    4852:	1e 89       	ldd	r17, Y+22	; 0x16
    4854:	86 e0       	ldi	r24, 0x06	; 6
    4856:	8c 83       	std	Y+4, r24	; 0x04
    4858:	1a 83       	std	Y+2, r17	; 0x02
    485a:	09 83       	std	Y+1, r16	; 0x01
    485c:	8f ef       	ldi	r24, 0xFF	; 255
    485e:	9f e7       	ldi	r25, 0x7F	; 127
    4860:	9e 83       	std	Y+6, r25	; 0x06
    4862:	8d 83       	std	Y+5, r24	; 0x05
    4864:	ae 01       	movw	r20, r28
    4866:	47 5e       	subi	r20, 0xE7	; 231
    4868:	5f 4f       	sbci	r21, 0xFF	; 255
    486a:	6f 89       	ldd	r22, Y+23	; 0x17
    486c:	78 8d       	ldd	r23, Y+24	; 0x18
    486e:	ce 01       	movw	r24, r28
    4870:	01 96       	adiw	r24, 0x01	; 1
    4872:	0e 94 2b 21 	call	0x4256	; 0x4256 <vfprintf>
    4876:	2f 81       	ldd	r18, Y+7	; 0x07
    4878:	38 85       	ldd	r19, Y+8	; 0x08
    487a:	f8 01       	movw	r30, r16
    487c:	e2 0f       	add	r30, r18
    487e:	f3 1f       	adc	r31, r19
    4880:	10 82       	st	Z, r1
    4882:	2e 96       	adiw	r28, 0x0e	; 14
    4884:	0f b6       	in	r0, 0x3f	; 63
    4886:	f8 94       	cli
    4888:	de bf       	out	0x3e, r29	; 62
    488a:	0f be       	out	0x3f, r0	; 63
    488c:	cd bf       	out	0x3d, r28	; 61
    488e:	df 91       	pop	r29
    4890:	cf 91       	pop	r28
    4892:	1f 91       	pop	r17
    4894:	0f 91       	pop	r16
    4896:	08 95       	ret

00004898 <__ultoa_invert>:
    4898:	fa 01       	movw	r30, r20
    489a:	aa 27       	eor	r26, r26
    489c:	28 30       	cpi	r18, 0x08	; 8
    489e:	51 f1       	breq	.+84     	; 0x48f4 <__ultoa_invert+0x5c>
    48a0:	20 31       	cpi	r18, 0x10	; 16
    48a2:	81 f1       	breq	.+96     	; 0x4904 <__ultoa_invert+0x6c>
    48a4:	e8 94       	clt
    48a6:	6f 93       	push	r22
    48a8:	6e 7f       	andi	r22, 0xFE	; 254
    48aa:	6e 5f       	subi	r22, 0xFE	; 254
    48ac:	7f 4f       	sbci	r23, 0xFF	; 255
    48ae:	8f 4f       	sbci	r24, 0xFF	; 255
    48b0:	9f 4f       	sbci	r25, 0xFF	; 255
    48b2:	af 4f       	sbci	r26, 0xFF	; 255
    48b4:	b1 e0       	ldi	r27, 0x01	; 1
    48b6:	3e d0       	rcall	.+124    	; 0x4934 <__ultoa_invert+0x9c>
    48b8:	b4 e0       	ldi	r27, 0x04	; 4
    48ba:	3c d0       	rcall	.+120    	; 0x4934 <__ultoa_invert+0x9c>
    48bc:	67 0f       	add	r22, r23
    48be:	78 1f       	adc	r23, r24
    48c0:	89 1f       	adc	r24, r25
    48c2:	9a 1f       	adc	r25, r26
    48c4:	a1 1d       	adc	r26, r1
    48c6:	68 0f       	add	r22, r24
    48c8:	79 1f       	adc	r23, r25
    48ca:	8a 1f       	adc	r24, r26
    48cc:	91 1d       	adc	r25, r1
    48ce:	a1 1d       	adc	r26, r1
    48d0:	6a 0f       	add	r22, r26
    48d2:	71 1d       	adc	r23, r1
    48d4:	81 1d       	adc	r24, r1
    48d6:	91 1d       	adc	r25, r1
    48d8:	a1 1d       	adc	r26, r1
    48da:	20 d0       	rcall	.+64     	; 0x491c <__ultoa_invert+0x84>
    48dc:	09 f4       	brne	.+2      	; 0x48e0 <__ultoa_invert+0x48>
    48de:	68 94       	set
    48e0:	3f 91       	pop	r19
    48e2:	2a e0       	ldi	r18, 0x0A	; 10
    48e4:	26 9f       	mul	r18, r22
    48e6:	11 24       	eor	r1, r1
    48e8:	30 19       	sub	r19, r0
    48ea:	30 5d       	subi	r19, 0xD0	; 208
    48ec:	31 93       	st	Z+, r19
    48ee:	de f6       	brtc	.-74     	; 0x48a6 <__ultoa_invert+0xe>
    48f0:	cf 01       	movw	r24, r30
    48f2:	08 95       	ret
    48f4:	46 2f       	mov	r20, r22
    48f6:	47 70       	andi	r20, 0x07	; 7
    48f8:	40 5d       	subi	r20, 0xD0	; 208
    48fa:	41 93       	st	Z+, r20
    48fc:	b3 e0       	ldi	r27, 0x03	; 3
    48fe:	0f d0       	rcall	.+30     	; 0x491e <__ultoa_invert+0x86>
    4900:	c9 f7       	brne	.-14     	; 0x48f4 <__ultoa_invert+0x5c>
    4902:	f6 cf       	rjmp	.-20     	; 0x48f0 <__ultoa_invert+0x58>
    4904:	46 2f       	mov	r20, r22
    4906:	4f 70       	andi	r20, 0x0F	; 15
    4908:	40 5d       	subi	r20, 0xD0	; 208
    490a:	4a 33       	cpi	r20, 0x3A	; 58
    490c:	18 f0       	brcs	.+6      	; 0x4914 <__ultoa_invert+0x7c>
    490e:	49 5d       	subi	r20, 0xD9	; 217
    4910:	31 fd       	sbrc	r19, 1
    4912:	40 52       	subi	r20, 0x20	; 32
    4914:	41 93       	st	Z+, r20
    4916:	02 d0       	rcall	.+4      	; 0x491c <__ultoa_invert+0x84>
    4918:	a9 f7       	brne	.-22     	; 0x4904 <__ultoa_invert+0x6c>
    491a:	ea cf       	rjmp	.-44     	; 0x48f0 <__ultoa_invert+0x58>
    491c:	b4 e0       	ldi	r27, 0x04	; 4
    491e:	a6 95       	lsr	r26
    4920:	97 95       	ror	r25
    4922:	87 95       	ror	r24
    4924:	77 95       	ror	r23
    4926:	67 95       	ror	r22
    4928:	ba 95       	dec	r27
    492a:	c9 f7       	brne	.-14     	; 0x491e <__ultoa_invert+0x86>
    492c:	00 97       	sbiw	r24, 0x00	; 0
    492e:	61 05       	cpc	r22, r1
    4930:	71 05       	cpc	r23, r1
    4932:	08 95       	ret
    4934:	9b 01       	movw	r18, r22
    4936:	ac 01       	movw	r20, r24
    4938:	0a 2e       	mov	r0, r26
    493a:	06 94       	lsr	r0
    493c:	57 95       	ror	r21
    493e:	47 95       	ror	r20
    4940:	37 95       	ror	r19
    4942:	27 95       	ror	r18
    4944:	ba 95       	dec	r27
    4946:	c9 f7       	brne	.-14     	; 0x493a <__ultoa_invert+0xa2>
    4948:	62 0f       	add	r22, r18
    494a:	73 1f       	adc	r23, r19
    494c:	84 1f       	adc	r24, r20
    494e:	95 1f       	adc	r25, r21
    4950:	a0 1d       	adc	r26, r0
    4952:	08 95       	ret

00004954 <__eerd_byte_m128rfa1>:
    4954:	f9 99       	sbic	0x1f, 1	; 31
    4956:	fe cf       	rjmp	.-4      	; 0x4954 <__eerd_byte_m128rfa1>
    4958:	92 bd       	out	0x22, r25	; 34
    495a:	81 bd       	out	0x21, r24	; 33
    495c:	f8 9a       	sbi	0x1f, 0	; 31
    495e:	99 27       	eor	r25, r25
    4960:	80 b5       	in	r24, 0x20	; 32
    4962:	08 95       	ret

00004964 <__eewr_byte_m128rfa1>:
    4964:	26 2f       	mov	r18, r22

00004966 <__eewr_r18_m128rfa1>:
    4966:	f9 99       	sbic	0x1f, 1	; 31
    4968:	fe cf       	rjmp	.-4      	; 0x4966 <__eewr_r18_m128rfa1>
    496a:	1f ba       	out	0x1f, r1	; 31
    496c:	92 bd       	out	0x22, r25	; 34
    496e:	81 bd       	out	0x21, r24	; 33
    4970:	20 bd       	out	0x20, r18	; 32
    4972:	0f b6       	in	r0, 0x3f	; 63
    4974:	f8 94       	cli
    4976:	fa 9a       	sbi	0x1f, 2	; 31
    4978:	f9 9a       	sbi	0x1f, 1	; 31
    497a:	0f be       	out	0x3f, r0	; 63
    497c:	01 96       	adiw	r24, 0x01	; 1
    497e:	08 95       	ret

00004980 <calloc>:
    4980:	0f 93       	push	r16
    4982:	1f 93       	push	r17
    4984:	cf 93       	push	r28
    4986:	df 93       	push	r29
    4988:	86 9f       	mul	r24, r22
    498a:	80 01       	movw	r16, r0
    498c:	87 9f       	mul	r24, r23
    498e:	10 0d       	add	r17, r0
    4990:	96 9f       	mul	r25, r22
    4992:	10 0d       	add	r17, r0
    4994:	11 24       	eor	r1, r1
    4996:	c8 01       	movw	r24, r16
    4998:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <malloc>
    499c:	ec 01       	movw	r28, r24
    499e:	00 97       	sbiw	r24, 0x00	; 0
    49a0:	29 f0       	breq	.+10     	; 0x49ac <calloc+0x2c>
    49a2:	a8 01       	movw	r20, r16
    49a4:	60 e0       	ldi	r22, 0x00	; 0
    49a6:	70 e0       	ldi	r23, 0x00	; 0
    49a8:	0e 94 09 26 	call	0x4c12	; 0x4c12 <memset>
    49ac:	ce 01       	movw	r24, r28
    49ae:	df 91       	pop	r29
    49b0:	cf 91       	pop	r28
    49b2:	1f 91       	pop	r17
    49b4:	0f 91       	pop	r16
    49b6:	08 95       	ret

000049b8 <malloc>:
    49b8:	cf 93       	push	r28
    49ba:	df 93       	push	r29
    49bc:	82 30       	cpi	r24, 0x02	; 2
    49be:	91 05       	cpc	r25, r1
    49c0:	10 f4       	brcc	.+4      	; 0x49c6 <malloc+0xe>
    49c2:	82 e0       	ldi	r24, 0x02	; 2
    49c4:	90 e0       	ldi	r25, 0x00	; 0
    49c6:	e0 91 1d 06 	lds	r30, 0x061D
    49ca:	f0 91 1e 06 	lds	r31, 0x061E
    49ce:	20 e0       	ldi	r18, 0x00	; 0
    49d0:	30 e0       	ldi	r19, 0x00	; 0
    49d2:	c0 e0       	ldi	r28, 0x00	; 0
    49d4:	d0 e0       	ldi	r29, 0x00	; 0
    49d6:	30 97       	sbiw	r30, 0x00	; 0
    49d8:	11 f1       	breq	.+68     	; 0x4a1e <malloc+0x66>
    49da:	40 81       	ld	r20, Z
    49dc:	51 81       	ldd	r21, Z+1	; 0x01
    49de:	48 17       	cp	r20, r24
    49e0:	59 07       	cpc	r21, r25
    49e2:	c0 f0       	brcs	.+48     	; 0x4a14 <malloc+0x5c>
    49e4:	48 17       	cp	r20, r24
    49e6:	59 07       	cpc	r21, r25
    49e8:	61 f4       	brne	.+24     	; 0x4a02 <malloc+0x4a>
    49ea:	82 81       	ldd	r24, Z+2	; 0x02
    49ec:	93 81       	ldd	r25, Z+3	; 0x03
    49ee:	20 97       	sbiw	r28, 0x00	; 0
    49f0:	19 f0       	breq	.+6      	; 0x49f8 <malloc+0x40>
    49f2:	9b 83       	std	Y+3, r25	; 0x03
    49f4:	8a 83       	std	Y+2, r24	; 0x02
    49f6:	2b c0       	rjmp	.+86     	; 0x4a4e <malloc+0x96>
    49f8:	90 93 1e 06 	sts	0x061E, r25
    49fc:	80 93 1d 06 	sts	0x061D, r24
    4a00:	26 c0       	rjmp	.+76     	; 0x4a4e <malloc+0x96>
    4a02:	21 15       	cp	r18, r1
    4a04:	31 05       	cpc	r19, r1
    4a06:	19 f0       	breq	.+6      	; 0x4a0e <malloc+0x56>
    4a08:	42 17       	cp	r20, r18
    4a0a:	53 07       	cpc	r21, r19
    4a0c:	18 f4       	brcc	.+6      	; 0x4a14 <malloc+0x5c>
    4a0e:	9a 01       	movw	r18, r20
    4a10:	be 01       	movw	r22, r28
    4a12:	df 01       	movw	r26, r30
    4a14:	ef 01       	movw	r28, r30
    4a16:	02 80       	ldd	r0, Z+2	; 0x02
    4a18:	f3 81       	ldd	r31, Z+3	; 0x03
    4a1a:	e0 2d       	mov	r30, r0
    4a1c:	dc cf       	rjmp	.-72     	; 0x49d6 <malloc+0x1e>
    4a1e:	21 15       	cp	r18, r1
    4a20:	31 05       	cpc	r19, r1
    4a22:	09 f1       	breq	.+66     	; 0x4a66 <malloc+0xae>
    4a24:	28 1b       	sub	r18, r24
    4a26:	39 0b       	sbc	r19, r25
    4a28:	24 30       	cpi	r18, 0x04	; 4
    4a2a:	31 05       	cpc	r19, r1
    4a2c:	90 f4       	brcc	.+36     	; 0x4a52 <malloc+0x9a>
    4a2e:	12 96       	adiw	r26, 0x02	; 2
    4a30:	8d 91       	ld	r24, X+
    4a32:	9c 91       	ld	r25, X
    4a34:	13 97       	sbiw	r26, 0x03	; 3
    4a36:	61 15       	cp	r22, r1
    4a38:	71 05       	cpc	r23, r1
    4a3a:	21 f0       	breq	.+8      	; 0x4a44 <malloc+0x8c>
    4a3c:	fb 01       	movw	r30, r22
    4a3e:	93 83       	std	Z+3, r25	; 0x03
    4a40:	82 83       	std	Z+2, r24	; 0x02
    4a42:	04 c0       	rjmp	.+8      	; 0x4a4c <malloc+0x94>
    4a44:	90 93 1e 06 	sts	0x061E, r25
    4a48:	80 93 1d 06 	sts	0x061D, r24
    4a4c:	fd 01       	movw	r30, r26
    4a4e:	32 96       	adiw	r30, 0x02	; 2
    4a50:	44 c0       	rjmp	.+136    	; 0x4ada <malloc+0x122>
    4a52:	fd 01       	movw	r30, r26
    4a54:	e2 0f       	add	r30, r18
    4a56:	f3 1f       	adc	r31, r19
    4a58:	81 93       	st	Z+, r24
    4a5a:	91 93       	st	Z+, r25
    4a5c:	22 50       	subi	r18, 0x02	; 2
    4a5e:	31 09       	sbc	r19, r1
    4a60:	2d 93       	st	X+, r18
    4a62:	3c 93       	st	X, r19
    4a64:	3a c0       	rjmp	.+116    	; 0x4ada <malloc+0x122>
    4a66:	20 91 1b 06 	lds	r18, 0x061B
    4a6a:	30 91 1c 06 	lds	r19, 0x061C
    4a6e:	23 2b       	or	r18, r19
    4a70:	41 f4       	brne	.+16     	; 0x4a82 <malloc+0xca>
    4a72:	20 91 12 02 	lds	r18, 0x0212
    4a76:	30 91 13 02 	lds	r19, 0x0213
    4a7a:	30 93 1c 06 	sts	0x061C, r19
    4a7e:	20 93 1b 06 	sts	0x061B, r18
    4a82:	20 91 10 02 	lds	r18, 0x0210
    4a86:	30 91 11 02 	lds	r19, 0x0211
    4a8a:	21 15       	cp	r18, r1
    4a8c:	31 05       	cpc	r19, r1
    4a8e:	41 f4       	brne	.+16     	; 0x4aa0 <malloc+0xe8>
    4a90:	2d b7       	in	r18, 0x3d	; 61
    4a92:	3e b7       	in	r19, 0x3e	; 62
    4a94:	40 91 14 02 	lds	r20, 0x0214
    4a98:	50 91 15 02 	lds	r21, 0x0215
    4a9c:	24 1b       	sub	r18, r20
    4a9e:	35 0b       	sbc	r19, r21
    4aa0:	e0 91 1b 06 	lds	r30, 0x061B
    4aa4:	f0 91 1c 06 	lds	r31, 0x061C
    4aa8:	e2 17       	cp	r30, r18
    4aaa:	f3 07       	cpc	r31, r19
    4aac:	a0 f4       	brcc	.+40     	; 0x4ad6 <malloc+0x11e>
    4aae:	2e 1b       	sub	r18, r30
    4ab0:	3f 0b       	sbc	r19, r31
    4ab2:	28 17       	cp	r18, r24
    4ab4:	39 07       	cpc	r19, r25
    4ab6:	78 f0       	brcs	.+30     	; 0x4ad6 <malloc+0x11e>
    4ab8:	ac 01       	movw	r20, r24
    4aba:	4e 5f       	subi	r20, 0xFE	; 254
    4abc:	5f 4f       	sbci	r21, 0xFF	; 255
    4abe:	24 17       	cp	r18, r20
    4ac0:	35 07       	cpc	r19, r21
    4ac2:	48 f0       	brcs	.+18     	; 0x4ad6 <malloc+0x11e>
    4ac4:	4e 0f       	add	r20, r30
    4ac6:	5f 1f       	adc	r21, r31
    4ac8:	50 93 1c 06 	sts	0x061C, r21
    4acc:	40 93 1b 06 	sts	0x061B, r20
    4ad0:	81 93       	st	Z+, r24
    4ad2:	91 93       	st	Z+, r25
    4ad4:	02 c0       	rjmp	.+4      	; 0x4ada <malloc+0x122>
    4ad6:	e0 e0       	ldi	r30, 0x00	; 0
    4ad8:	f0 e0       	ldi	r31, 0x00	; 0
    4ada:	cf 01       	movw	r24, r30
    4adc:	df 91       	pop	r29
    4ade:	cf 91       	pop	r28
    4ae0:	08 95       	ret

00004ae2 <free>:
    4ae2:	0f 93       	push	r16
    4ae4:	1f 93       	push	r17
    4ae6:	cf 93       	push	r28
    4ae8:	df 93       	push	r29
    4aea:	00 97       	sbiw	r24, 0x00	; 0
    4aec:	09 f4       	brne	.+2      	; 0x4af0 <free+0xe>
    4aee:	8c c0       	rjmp	.+280    	; 0x4c08 <free+0x126>
    4af0:	fc 01       	movw	r30, r24
    4af2:	32 97       	sbiw	r30, 0x02	; 2
    4af4:	13 82       	std	Z+3, r1	; 0x03
    4af6:	12 82       	std	Z+2, r1	; 0x02
    4af8:	00 91 1d 06 	lds	r16, 0x061D
    4afc:	10 91 1e 06 	lds	r17, 0x061E
    4b00:	01 15       	cp	r16, r1
    4b02:	11 05       	cpc	r17, r1
    4b04:	81 f4       	brne	.+32     	; 0x4b26 <free+0x44>
    4b06:	20 81       	ld	r18, Z
    4b08:	31 81       	ldd	r19, Z+1	; 0x01
    4b0a:	82 0f       	add	r24, r18
    4b0c:	93 1f       	adc	r25, r19
    4b0e:	20 91 1b 06 	lds	r18, 0x061B
    4b12:	30 91 1c 06 	lds	r19, 0x061C
    4b16:	28 17       	cp	r18, r24
    4b18:	39 07       	cpc	r19, r25
    4b1a:	79 f5       	brne	.+94     	; 0x4b7a <free+0x98>
    4b1c:	f0 93 1c 06 	sts	0x061C, r31
    4b20:	e0 93 1b 06 	sts	0x061B, r30
    4b24:	71 c0       	rjmp	.+226    	; 0x4c08 <free+0x126>
    4b26:	d8 01       	movw	r26, r16
    4b28:	40 e0       	ldi	r20, 0x00	; 0
    4b2a:	50 e0       	ldi	r21, 0x00	; 0
    4b2c:	ae 17       	cp	r26, r30
    4b2e:	bf 07       	cpc	r27, r31
    4b30:	50 f4       	brcc	.+20     	; 0x4b46 <free+0x64>
    4b32:	12 96       	adiw	r26, 0x02	; 2
    4b34:	2d 91       	ld	r18, X+
    4b36:	3c 91       	ld	r19, X
    4b38:	13 97       	sbiw	r26, 0x03	; 3
    4b3a:	ad 01       	movw	r20, r26
    4b3c:	21 15       	cp	r18, r1
    4b3e:	31 05       	cpc	r19, r1
    4b40:	09 f1       	breq	.+66     	; 0x4b84 <free+0xa2>
    4b42:	d9 01       	movw	r26, r18
    4b44:	f3 cf       	rjmp	.-26     	; 0x4b2c <free+0x4a>
    4b46:	9d 01       	movw	r18, r26
    4b48:	da 01       	movw	r26, r20
    4b4a:	33 83       	std	Z+3, r19	; 0x03
    4b4c:	22 83       	std	Z+2, r18	; 0x02
    4b4e:	60 81       	ld	r22, Z
    4b50:	71 81       	ldd	r23, Z+1	; 0x01
    4b52:	86 0f       	add	r24, r22
    4b54:	97 1f       	adc	r25, r23
    4b56:	82 17       	cp	r24, r18
    4b58:	93 07       	cpc	r25, r19
    4b5a:	69 f4       	brne	.+26     	; 0x4b76 <free+0x94>
    4b5c:	ec 01       	movw	r28, r24
    4b5e:	28 81       	ld	r18, Y
    4b60:	39 81       	ldd	r19, Y+1	; 0x01
    4b62:	26 0f       	add	r18, r22
    4b64:	37 1f       	adc	r19, r23
    4b66:	2e 5f       	subi	r18, 0xFE	; 254
    4b68:	3f 4f       	sbci	r19, 0xFF	; 255
    4b6a:	31 83       	std	Z+1, r19	; 0x01
    4b6c:	20 83       	st	Z, r18
    4b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b70:	9b 81       	ldd	r25, Y+3	; 0x03
    4b72:	93 83       	std	Z+3, r25	; 0x03
    4b74:	82 83       	std	Z+2, r24	; 0x02
    4b76:	45 2b       	or	r20, r21
    4b78:	29 f4       	brne	.+10     	; 0x4b84 <free+0xa2>
    4b7a:	f0 93 1e 06 	sts	0x061E, r31
    4b7e:	e0 93 1d 06 	sts	0x061D, r30
    4b82:	42 c0       	rjmp	.+132    	; 0x4c08 <free+0x126>
    4b84:	13 96       	adiw	r26, 0x03	; 3
    4b86:	fc 93       	st	X, r31
    4b88:	ee 93       	st	-X, r30
    4b8a:	12 97       	sbiw	r26, 0x02	; 2
    4b8c:	ed 01       	movw	r28, r26
    4b8e:	49 91       	ld	r20, Y+
    4b90:	59 91       	ld	r21, Y+
    4b92:	9e 01       	movw	r18, r28
    4b94:	24 0f       	add	r18, r20
    4b96:	35 1f       	adc	r19, r21
    4b98:	e2 17       	cp	r30, r18
    4b9a:	f3 07       	cpc	r31, r19
    4b9c:	71 f4       	brne	.+28     	; 0x4bba <free+0xd8>
    4b9e:	80 81       	ld	r24, Z
    4ba0:	91 81       	ldd	r25, Z+1	; 0x01
    4ba2:	84 0f       	add	r24, r20
    4ba4:	95 1f       	adc	r25, r21
    4ba6:	02 96       	adiw	r24, 0x02	; 2
    4ba8:	11 96       	adiw	r26, 0x01	; 1
    4baa:	9c 93       	st	X, r25
    4bac:	8e 93       	st	-X, r24
    4bae:	82 81       	ldd	r24, Z+2	; 0x02
    4bb0:	93 81       	ldd	r25, Z+3	; 0x03
    4bb2:	13 96       	adiw	r26, 0x03	; 3
    4bb4:	9c 93       	st	X, r25
    4bb6:	8e 93       	st	-X, r24
    4bb8:	12 97       	sbiw	r26, 0x02	; 2
    4bba:	e0 e0       	ldi	r30, 0x00	; 0
    4bbc:	f0 e0       	ldi	r31, 0x00	; 0
    4bbe:	d8 01       	movw	r26, r16
    4bc0:	12 96       	adiw	r26, 0x02	; 2
    4bc2:	8d 91       	ld	r24, X+
    4bc4:	9c 91       	ld	r25, X
    4bc6:	13 97       	sbiw	r26, 0x03	; 3
    4bc8:	00 97       	sbiw	r24, 0x00	; 0
    4bca:	19 f0       	breq	.+6      	; 0x4bd2 <free+0xf0>
    4bcc:	f8 01       	movw	r30, r16
    4bce:	8c 01       	movw	r16, r24
    4bd0:	f6 cf       	rjmp	.-20     	; 0x4bbe <free+0xdc>
    4bd2:	8d 91       	ld	r24, X+
    4bd4:	9c 91       	ld	r25, X
    4bd6:	98 01       	movw	r18, r16
    4bd8:	2e 5f       	subi	r18, 0xFE	; 254
    4bda:	3f 4f       	sbci	r19, 0xFF	; 255
    4bdc:	82 0f       	add	r24, r18
    4bde:	93 1f       	adc	r25, r19
    4be0:	20 91 1b 06 	lds	r18, 0x061B
    4be4:	30 91 1c 06 	lds	r19, 0x061C
    4be8:	28 17       	cp	r18, r24
    4bea:	39 07       	cpc	r19, r25
    4bec:	69 f4       	brne	.+26     	; 0x4c08 <free+0x126>
    4bee:	30 97       	sbiw	r30, 0x00	; 0
    4bf0:	29 f4       	brne	.+10     	; 0x4bfc <free+0x11a>
    4bf2:	10 92 1e 06 	sts	0x061E, r1
    4bf6:	10 92 1d 06 	sts	0x061D, r1
    4bfa:	02 c0       	rjmp	.+4      	; 0x4c00 <free+0x11e>
    4bfc:	13 82       	std	Z+3, r1	; 0x03
    4bfe:	12 82       	std	Z+2, r1	; 0x02
    4c00:	10 93 1c 06 	sts	0x061C, r17
    4c04:	00 93 1b 06 	sts	0x061B, r16
    4c08:	df 91       	pop	r29
    4c0a:	cf 91       	pop	r28
    4c0c:	1f 91       	pop	r17
    4c0e:	0f 91       	pop	r16
    4c10:	08 95       	ret

00004c12 <memset>:
    4c12:	dc 01       	movw	r26, r24
    4c14:	01 c0       	rjmp	.+2      	; 0x4c18 <memset+0x6>
    4c16:	6d 93       	st	X+, r22
    4c18:	41 50       	subi	r20, 0x01	; 1
    4c1a:	50 40       	sbci	r21, 0x00	; 0
    4c1c:	e0 f7       	brcc	.-8      	; 0x4c16 <memset+0x4>
    4c1e:	08 95       	ret

00004c20 <_exit>:
    4c20:	f8 94       	cli

00004c22 <__stop_program>:
    4c22:	ff cf       	rjmp	.-2      	; 0x4c22 <__stop_program>
