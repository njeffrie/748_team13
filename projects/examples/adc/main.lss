
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017a  00800200  000050b0  00005144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000050b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020a  0080037a  0080037a  000052be  2**0
                  ALLOC
  3 .stab         00010218  00000000  00000000  000052c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008b4a  00000000  00000000  000154d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0001e022  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  0001e033  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  0001f193  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 40 02 	jmp	0x480	; 0x480 <__ctors_end>
       4:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <__vector_1>
       8:	0c 94 14 22 	jmp	0x4428	; 0x4428 <__vector_2>
       c:	0c 94 46 22 	jmp	0x448c	; 0x448c <__vector_3>
      10:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      14:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      18:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      1c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      20:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      24:	0c 94 b0 21 	jmp	0x4360	; 0x4360 <__vector_9>
      28:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      2c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      30:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      34:	0c 94 0f 20 	jmp	0x401e	; 0x401e <__vector_13>
      38:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      3c:	0c 94 0f 20 	jmp	0x401e	; 0x401e <__vector_13>
      40:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      44:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      48:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      4c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      50:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      54:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      58:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      5c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      60:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      64:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      68:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      6c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      70:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      74:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      78:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      7c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      80:	0c 94 42 20 	jmp	0x4084	; 0x4084 <__vector_32>
      84:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      88:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      8c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      90:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      94:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      98:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      9c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      a0:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      a4:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      a8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      ac:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      b0:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      b4:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      b8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      bc:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      c0:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      c4:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      c8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      cc:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      d0:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      d4:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      d8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      dc:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      e0:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      e4:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__vector_57>
      e8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__vector_58>
      ec:	0c 94 ed 05 	jmp	0xbda	; 0xbda <__vector_59>
      f0:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__vector_60>
      f4:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__vector_61>
      f8:	0c 94 cf 05 	jmp	0xb9e	; 0xb9e <__vector_62>
      fc:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__vector_63>
     100:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__vector_64>
     104:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     108:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     10c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     110:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     114:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     118:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     11c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     120:	52 09       	sbc	r21, r2
     122:	5f 09       	sbc	r21, r15
     124:	6c 09       	sbc	r22, r12
     126:	79 09       	sbc	r23, r9
     128:	86 09       	sbc	r24, r6
     12a:	93 09       	sbc	r25, r3
     12c:	a0 09       	sbc	r26, r0
     12e:	c3 09       	sbc	r28, r3
     130:	d1 09       	sbc	r29, r1
     132:	df 09       	sbc	r29, r15
     134:	ed 09       	sbc	r30, r13
     136:	fb 09       	sbc	r31, r11
     138:	09 0a       	sbc	r0, r25
     13a:	09 0a       	sbc	r0, r25
     13c:	2c 0a       	sbc	r2, r28
     13e:	2e 0a       	sbc	r2, r30
     140:	30 0a       	sbc	r3, r16
     142:	32 0a       	sbc	r3, r18
     144:	34 0a       	sbc	r3, r20
     146:	36 0a       	sbc	r3, r22
     148:	38 0a       	sbc	r3, r24
     14a:	57 0a       	sbc	r5, r23
     14c:	7a 0a       	sbc	r7, r26
     14e:	9e 0a       	sbc	r9, r30
     150:	c1 0a       	sbc	r12, r17
     152:	e4 0a       	sbc	r14, r20
     154:	07 0b       	sbc	r16, r23
     156:	2a 0b       	sbc	r18, r26
     158:	64 0b       	sbc	r22, r20
     15a:	71 0b       	sbc	r23, r17
     15c:	7e 0b       	sbc	r23, r30
     15e:	8b 0b       	sbc	r24, r27
     160:	98 0b       	sbc	r25, r24
     162:	a5 0b       	sbc	r26, r21
     164:	b2 0b       	sbc	r27, r18
     166:	cb 0b       	sbc	r28, r27
     168:	d8 0b       	sbc	r29, r24
     16a:	e5 0b       	sbc	r30, r21
     16c:	f2 0b       	sbc	r31, r18
     16e:	ff 0b       	sbc	r31, r31
     170:	0c 0c       	add	r0, r12
     172:	19 0c       	add	r1, r9
     174:	c7 0f       	add	r28, r23
     176:	ca 0f       	add	r28, r26
     178:	d5 0f       	add	r29, r21
     17a:	da 0f       	add	r29, r26
     17c:	e1 0f       	add	r30, r17
     17e:	ea 0f       	add	r30, r26
     180:	ed 0f       	add	r30, r29
     182:	f2 0f       	add	r31, r18
     184:	f9 0f       	add	r31, r25
     186:	02 10       	cpse	r0, r2
     188:	58 10       	cpse	r5, r8
     18a:	5e 10       	cpse	r5, r14
     18c:	61 10       	cpse	r6, r1
     18e:	64 10       	cpse	r6, r4
     190:	67 10       	cpse	r6, r7
     192:	6a 10       	cpse	r6, r10
     194:	70 10       	cpse	r7, r0
     196:	6d 10       	cpse	r6, r13
     198:	73 10       	cpse	r7, r3
     19a:	76 10       	cpse	r7, r6
     19c:	79 10       	cpse	r7, r9
     19e:	82 10       	cpse	r8, r2
     1a0:	85 10       	cpse	r8, r5
     1a2:	88 10       	cpse	r8, r8
     1a4:	8b 10       	cpse	r8, r11
     1a6:	7f 10       	cpse	r7, r15
     1a8:	55 10       	cpse	r5, r5
     1aa:	5b 10       	cpse	r5, r11
     1ac:	8e 10       	cpse	r8, r14
     1ae:	91 10       	cpse	r9, r1
     1b0:	7c 10       	cpse	r7, r12
     1b2:	52 10       	cpse	r5, r2

000001b4 <__trampolines_end>:
     1b4:	46 61       	ori	r20, 0x16	; 22
     1b6:	69 6c       	ori	r22, 0xC9	; 201
     1b8:	65 64       	ori	r22, 0x45	; 69
     1ba:	20 74       	andi	r18, 0x40	; 64
     1bc:	6f 20       	and	r6, r15
     1be:	6c 6f       	ori	r22, 0xFC	; 252
     1c0:	61 64       	ori	r22, 0x41	; 65
     1c2:	20 6d       	ori	r18, 0xD0	; 208
     1c4:	79 20       	and	r7, r9
     1c6:	41 44       	sbci	r20, 0x41	; 65
     1c8:	43 20       	and	r4, r3
     1ca:	64 72       	andi	r22, 0x24	; 36
     1cc:	69 76       	andi	r22, 0x69	; 105
     1ce:	65 72       	andi	r22, 0x25	; 37
     1d0:	0d 0a       	sbc	r0, r29
	...

000001d3 <__c.3356>:
     1d3:	0d 0a 00                                            ...

000001d6 <__c.3348>:
     1d6:	46 61 69 6c 65 64 20 74 6f 20 72 65 61 64 20 41     Failed to read A
     1e6:	44 43 0d 0a 00                                      DC...

000001eb <__c.3346>:
     1eb:	46 61 69 6c 65 64 20 74 6f 20 73 65 74 20 41 44     Failed to set AD
     1fb:	43 20 73 74 61 74 75 73 0d 0a 00                    C status...

00000206 <__c.3344>:
     206:	46 61 69 6c 65 64 20 74 6f 20 6f 70 65 6e 20 41     Failed to open A
     216:	44 43 20 64 72 69 76 65 72 0d 0a 00                 DC driver...

00000222 <__c.3388>:
     222:	55 4e 4b 4f 57 4e 00                                UNKOWN.

00000229 <__c.3385>:
     229:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

00000238 <__c.3382>:
     238:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

00000249 <__c.3379>:
     249:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     259:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

00000264 <__c.3376>:
     264:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     274:	20 53 69 67 6e 61 6c 00                              Signal.

0000027c <__c.3373>:
     27c:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     28c:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

0000029c <__c.3370>:
     29c:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     2ac:	72 6f 72 00                                         ror.

000002b0 <__c.3367>:
     2b0:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

000002c1 <__c.3364>:
     2c1:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     2d1:	61 72 74 00                                         art.

000002d5 <__c.3361>:
     2d5:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

000002e4 <__c.3358>:
     2e4:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     2f4:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

000002ff <__c.3355>:
     2ff:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

0000030b <__c.3352>:
     30b:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     31b:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     32b:	20 6f 6b 3f 00                                       ok?.

00000330 <__c.3349>:
     330:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     340:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

0000034e <__c.3346>:
     34e:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     35e:	72 74 00                                            rt.

00000361 <__c.3343>:
     361:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     371:	49 44 00                                            ID.

00000374 <__c.3340>:
     374:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     384:	20 57 61 6b 65 75 70 00                              Wakeup.

0000038c <__c.3337>:
     38c:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     39c:	6c 61 74 65 64 00                                   lated.

000003a2 <__c.3334>:
     3a2:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     3b2:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

000003bd <__c.3331>:
     3bd:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     3cd:	69 6e 74 65 72 00                                   inter.

000003d3 <__c.3328>:
     3d3:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     3e3:	6c 6f 77 00                                         low.

000003e7 <__c.3325>:
     3e7:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     3f7:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     407:	6e 6f 75 67 68 21 00                                nough!.

0000040e <__c.3321>:
     40e:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     41e:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     42e:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     43e:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

0000044a <__c.3318>:
     44a:	29 3a 20 00                                         ): .

0000044e <__c.3316>:
     44e:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

0000045a <__c.3246>:
     45a:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000469 <__c.2228>:
     469:	45 46 47 65 66 67 00                                EFGefg.

00000470 <__c.2222>:
     470:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000480 <__ctors_end>:
     480:	11 24       	eor	r1, r1
     482:	1f be       	out	0x3f, r1	; 63
     484:	cf ef       	ldi	r28, 0xFF	; 255
     486:	d1 e4       	ldi	r29, 0x41	; 65
     488:	de bf       	out	0x3e, r29	; 62
     48a:	cd bf       	out	0x3d, r28	; 61

0000048c <__do_copy_data>:
     48c:	13 e0       	ldi	r17, 0x03	; 3
     48e:	a0 e0       	ldi	r26, 0x00	; 0
     490:	b2 e0       	ldi	r27, 0x02	; 2
     492:	e0 eb       	ldi	r30, 0xB0	; 176
     494:	f0 e5       	ldi	r31, 0x50	; 80
     496:	00 e0       	ldi	r16, 0x00	; 0
     498:	0b bf       	out	0x3b, r16	; 59
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__do_copy_data+0x14>
     49c:	07 90       	elpm	r0, Z+
     49e:	0d 92       	st	X+, r0
     4a0:	aa 37       	cpi	r26, 0x7A	; 122
     4a2:	b1 07       	cpc	r27, r17
     4a4:	d9 f7       	brne	.-10     	; 0x49c <__do_copy_data+0x10>

000004a6 <__do_clear_bss>:
     4a6:	15 e0       	ldi	r17, 0x05	; 5
     4a8:	aa e7       	ldi	r26, 0x7A	; 122
     4aa:	b3 e0       	ldi	r27, 0x03	; 3
     4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <.do_clear_bss_start>

000004ae <.do_clear_bss_loop>:
     4ae:	1d 92       	st	X+, r1

000004b0 <.do_clear_bss_start>:
     4b0:	a4 38       	cpi	r26, 0x84	; 132
     4b2:	b1 07       	cpc	r27, r17
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <.do_clear_bss_loop>
     4b6:	0e 94 5b 23 	call	0x46b6	; 0x46b6 <main>
     4ba:	0c 94 56 28 	jmp	0x50ac	; 0x50ac <_exit>

000004be <__bad_interrupt>:
     4be:	0c 94 05 20 	jmp	0x400a	; 0x400a <__vector_default>

000004c2 <Task1>:
  return 0;
}


void Task1()
{
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
     4ca:	60 97       	sbiw	r28, 0x10	; 16
     4cc:	0f b6       	in	r0, 0x3f	; 63
     4ce:	f8 94       	cli
     4d0:	de bf       	out	0x3e, r29	; 62
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	cd bf       	out	0x3d, r28	; 61
uint16_t cnt;
int8_t fd,val,chan;
uint16_t buf[8];

printf( "My node's address is %d\r\n",NODE_ADDR );
     4d6:	1f 92       	push	r1
     4d8:	1f 92       	push	r1
     4da:	87 e6       	ldi	r24, 0x67	; 103
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	9f 93       	push	r25
     4e0:	8f 93       	push	r24
     4e2:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>

  printf( "Task1 PID=%d\r\n",nrk_get_pid());
     4e6:	0e 94 62 18 	call	0x30c4	; 0x30c4 <nrk_get_pid>
     4ea:	1f 92       	push	r1
     4ec:	8f 93       	push	r24
     4ee:	81 e8       	ldi	r24, 0x81	; 129
     4f0:	92 e0       	ldi	r25, 0x02	; 2
     4f2:	9f 93       	push	r25
     4f4:	8f 93       	push	r24
     4f6:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>

  // Open ADC device as read 
  fd=nrk_open(ADC_DEV_MANAGER,READ);
     4fa:	65 e0       	ldi	r22, 0x05	; 5
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <nrk_open>
     502:	d8 2e       	mov	r13, r24
  if(fd==NRK_ERROR) nrk_kprintf( PSTR("Failed to open ADC driver\r\n"));
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	de bf       	out	0x3e, r29	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	cd bf       	out	0x3d, r28	; 61
     50e:	9f ef       	ldi	r25, 0xFF	; 255
     510:	89 13       	cpse	r24, r25
     512:	04 c0       	rjmp	.+8      	; 0x51c <Task1+0x5a>
     514:	86 e0       	ldi	r24, 0x06	; 6
     516:	92 e0       	ldi	r25, 0x02	; 2
     518:	0e 94 1e 09 	call	0x123c	; 0x123c <nrk_kprintf>
	  if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to set ADC status\r\n" ));
	  val=nrk_read(fd,&buf[chan],2);
	  if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to read ADC\r\n" ));

	}
	printf( "Task1 " );
     51c:	80 e9       	ldi	r24, 0x90	; 144
     51e:	a8 2e       	mov	r10, r24
     520:	82 e0       	ldi	r24, 0x02	; 2
     522:	b8 2e       	mov	r11, r24
 	for(chan=0; chan<8; chan++ )
	{
	printf( "chan:%d=%d ",chan,buf[chan]);
     524:	97 e9       	ldi	r25, 0x97	; 151
     526:	89 2e       	mov	r8, r25
     528:	92 e0       	ldi	r25, 0x02	; 2
     52a:	99 2e       	mov	r9, r25
  if(fd==NRK_ERROR) nrk_kprintf( PSTR("Failed to open ADC driver\r\n"));
  
  cnt=0;
  chan=0;
  while(1) {
	nrk_led_toggle(BLUE_LED);
     52c:	83 e0       	ldi	r24, 0x03	; 3
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 33 0c 	call	0x1866	; 0x1866 <nrk_led_toggle>
     534:	fe 01       	movw	r30, r28
     536:	31 96       	adiw	r30, 0x01	; 1
     538:	7f 01       	movw	r14, r30
     53a:	3f 01       	movw	r6, r30
	for(chan=0; chan<8; chan++ )
     53c:	10 e0       	ldi	r17, 0x00	; 0
	{
	  // Example of setting the ADC channel
	  val=nrk_set_status(fd,ADC_CHAN,chan);
     53e:	41 2f       	mov	r20, r17
     540:	61 e0       	ldi	r22, 0x01	; 1
     542:	8d 2d       	mov	r24, r13
     544:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <nrk_set_status>
	  if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to set ADC status\r\n" ));
     548:	8f 3f       	cpi	r24, 0xFF	; 255
     54a:	21 f4       	brne	.+8      	; 0x554 <Task1+0x92>
     54c:	8b ee       	ldi	r24, 0xEB	; 235
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	0e 94 1e 09 	call	0x123c	; 0x123c <nrk_kprintf>
	  val=nrk_read(fd,&buf[chan],2);
     554:	42 e0       	ldi	r20, 0x02	; 2
     556:	b3 01       	movw	r22, r6
     558:	8d 2d       	mov	r24, r13
     55a:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <nrk_read>
	  if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to read ADC\r\n" ));
     55e:	8f 3f       	cpi	r24, 0xFF	; 255
     560:	21 f4       	brne	.+8      	; 0x56a <Task1+0xa8>
     562:	86 ed       	ldi	r24, 0xD6	; 214
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	0e 94 1e 09 	call	0x123c	; 0x123c <nrk_kprintf>
     56a:	1f 5f       	subi	r17, 0xFF	; 255
     56c:	92 e0       	ldi	r25, 0x02	; 2
     56e:	69 0e       	add	r6, r25
     570:	71 1c       	adc	r7, r1
  
  cnt=0;
  chan=0;
  while(1) {
	nrk_led_toggle(BLUE_LED);
	for(chan=0; chan<8; chan++ )
     572:	18 30       	cpi	r17, 0x08	; 8
     574:	21 f7       	brne	.-56     	; 0x53e <Task1+0x7c>
	  if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to set ADC status\r\n" ));
	  val=nrk_read(fd,&buf[chan],2);
	  if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to read ADC\r\n" ));

	}
	printf( "Task1 " );
     576:	bf 92       	push	r11
     578:	af 92       	push	r10
     57a:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	00 e0       	ldi	r16, 0x00	; 0
     584:	10 e0       	ldi	r17, 0x00	; 0
 	for(chan=0; chan<8; chan++ )
	{
	printf( "chan:%d=%d ",chan,buf[chan]);
     586:	f7 01       	movw	r30, r14
     588:	80 81       	ld	r24, Z
     58a:	91 81       	ldd	r25, Z+1	; 0x01
     58c:	f2 e0       	ldi	r31, 0x02	; 2
     58e:	ef 0e       	add	r14, r31
     590:	f1 1c       	adc	r15, r1
     592:	9f 93       	push	r25
     594:	8f 93       	push	r24
     596:	1f 93       	push	r17
     598:	0f 93       	push	r16
     59a:	9f 92       	push	r9
     59c:	8f 92       	push	r8
     59e:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
     5a2:	0f 5f       	subi	r16, 0xFF	; 255
     5a4:	1f 4f       	sbci	r17, 0xFF	; 255
	  val=nrk_read(fd,&buf[chan],2);
	  if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to read ADC\r\n" ));

	}
	printf( "Task1 " );
 	for(chan=0; chan<8; chan++ )
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	0f 90       	pop	r0
     5b2:	08 30       	cpi	r16, 0x08	; 8
     5b4:	11 05       	cpc	r17, r1
     5b6:	39 f7       	brne	.-50     	; 0x586 <Task1+0xc4>
	{
	printf( "chan:%d=%d ",chan,buf[chan]);
	}
	nrk_kprintf( PSTR("\r\n" ));
     5b8:	83 ed       	ldi	r24, 0xD3	; 211
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 1e 09 	call	0x123c	; 0x123c <nrk_kprintf>

	nrk_wait_until_next_period();
     5c0:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <nrk_wait_until_next_period>
	cnt++;
	}
     5c4:	b3 cf       	rjmp	.-154    	; 0x52c <Task1+0x6a>

000005c6 <nrk_create_taskset>:
}


void
nrk_create_taskset()
{
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
  TaskOne.task = Task1;
     5ca:	c3 e8       	ldi	r28, 0x83	; 131
     5cc:	d3 e0       	ldi	r29, 0x03	; 3
     5ce:	81 e6       	ldi	r24, 0x61	; 97
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	9e 83       	std	Y+6, r25	; 0x06
     5d4:	8d 83       	std	Y+5, r24	; 0x05
  nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
     5d6:	40 e8       	ldi	r20, 0x80	; 128
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	6a ea       	ldi	r22, 0xAA	; 170
     5dc:	73 e0       	ldi	r23, 0x03	; 3
     5de:	ce 01       	movw	r24, r28
     5e0:	0e 94 ba 22 	call	0x4574	; 0x4574 <nrk_task_set_stk>
  TaskOne.prio = 1;
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	88 87       	std	Y+8, r24	; 0x08
  TaskOne.FirstActivation = TRUE;
     5e8:	8f 83       	std	Y+7, r24	; 0x07
  TaskOne.Type = BASIC_TASK;
     5ea:	89 87       	std	Y+9, r24	; 0x09
  TaskOne.SchType = PREEMPTIVE;
     5ec:	8a 87       	std	Y+10, r24	; 0x0a
  TaskOne.period.secs = 0;
     5ee:	1b 86       	std	Y+11, r1	; 0x0b
     5f0:	1c 86       	std	Y+12, r1	; 0x0c
     5f2:	1d 86       	std	Y+13, r1	; 0x0d
     5f4:	1e 86       	std	Y+14, r1	; 0x0e
  TaskOne.period.nano_secs = 5*NANOS_PER_MS;
     5f6:	80 e4       	ldi	r24, 0x40	; 64
     5f8:	9b e4       	ldi	r25, 0x4B	; 75
     5fa:	ac e4       	ldi	r26, 0x4C	; 76
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	8f 87       	std	Y+15, r24	; 0x0f
     600:	98 8b       	std	Y+16, r25	; 0x10
     602:	a9 8b       	std	Y+17, r26	; 0x11
     604:	ba 8b       	std	Y+18, r27	; 0x12
  TaskOne.cpu_reserve.secs = 0;
     606:	1b 8a       	std	Y+19, r1	; 0x13
     608:	1c 8a       	std	Y+20, r1	; 0x14
     60a:	1d 8a       	std	Y+21, r1	; 0x15
     60c:	1e 8a       	std	Y+22, r1	; 0x16
  TaskOne.cpu_reserve.nano_secs =  50*NANOS_PER_MS;
     60e:	80 e8       	ldi	r24, 0x80	; 128
     610:	90 ef       	ldi	r25, 0xF0	; 240
     612:	aa ef       	ldi	r26, 0xFA	; 250
     614:	b2 e0       	ldi	r27, 0x02	; 2
     616:	8f 8b       	std	Y+23, r24	; 0x17
     618:	98 8f       	std	Y+24, r25	; 0x18
     61a:	a9 8f       	std	Y+25, r26	; 0x19
     61c:	ba 8f       	std	Y+26, r27	; 0x1a
  TaskOne.offset.secs = 0;
     61e:	1b 8e       	std	Y+27, r1	; 0x1b
     620:	1c 8e       	std	Y+28, r1	; 0x1c
     622:	1d 8e       	std	Y+29, r1	; 0x1d
     624:	1e 8e       	std	Y+30, r1	; 0x1e
  TaskOne.offset.nano_secs= 0;
     626:	1f 8e       	std	Y+31, r1	; 0x1f
     628:	18 a2       	std	Y+32, r1	; 0x20
     62a:	19 a2       	std	Y+33, r1	; 0x21
     62c:	1a a2       	std	Y+34, r1	; 0x22
  nrk_activate_task (&TaskOne);
     62e:	ce 01       	movw	r24, r28

}
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
  TaskOne.period.nano_secs = 5*NANOS_PER_MS;
  TaskOne.cpu_reserve.secs = 0;
  TaskOne.cpu_reserve.nano_secs =  50*NANOS_PER_MS;
  TaskOne.offset.secs = 0;
  TaskOne.offset.nano_secs= 0;
  nrk_activate_task (&TaskOne);
     634:	0c 94 27 16 	jmp	0x2c4e	; 0x2c4e <nrk_activate_task>

00000638 <nrk_register_drivers>:
//     #define NRK_MAX_DRIVER_CNT  
//     in nrk_cfg.h
// Make sure to add: 
//     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/adc_driver.c
//     in makefile
val=nrk_register_driver( &dev_manager_adc,ADC_DEV_MANAGER);
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	8f e4       	ldi	r24, 0x4F	; 79
     63c:	93 e0       	ldi	r25, 0x03	; 3
     63e:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <nrk_register_driver>
if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
     642:	8f 3f       	cpi	r24, 0xFF	; 255
     644:	21 f4       	brne	.+8      	; 0x64e <nrk_register_drivers+0x16>
     646:	84 eb       	ldi	r24, 0xB4	; 180
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	0c 94 1e 09 	jmp	0x123c	; 0x123c <nrk_kprintf>
     64e:	08 95       	ret

00000650 <init_adc>:
}

void init_adc()
{
// Initialize values here
  ADC_INIT ();
     650:	aa e7       	ldi	r26, 0x7A	; 122
     652:	b0 e0       	ldi	r27, 0x00	; 0
     654:	83 e0       	ldi	r24, 0x03	; 3
     656:	8c 93       	st	X, r24
     658:	ec e7       	ldi	r30, 0x7C	; 124
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 e4       	ldi	r24, 0x40	; 64
     65e:	80 83       	st	Z, r24
  ADC_ENABLE ();
     660:	8c 91       	ld	r24, X
     662:	80 68       	ori	r24, 0x80	; 128
     664:	8c 93       	st	X, r24
  channel=0;
     666:	10 92 af 04 	sts	0x04AF, r1
  ADC_SET_CHANNEL (0);
     66a:	80 81       	ld	r24, Z
     66c:	80 7e       	andi	r24, 0xE0	; 224
     66e:	80 83       	st	Z, r24
     670:	08 95       	ret

00000672 <delay>:
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
{
  nrk_spin_wait_us(ADC_SETUP_DELAY);
     672:	84 ef       	ldi	r24, 0xF4	; 244
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	0c 94 b4 1e 	jmp	0x3d68	; 0x3d68 <nrk_spin_wait_us>

0000067a <get_adc_val>:
}

uint16_t get_adc_val()
{                         
	uint16_t adc_val;
	ADC_SAMPLE_SINGLE();
     67a:	80 91 7a 00 	lds	r24, 0x007A
     67e:	80 64       	ori	r24, 0x40	; 64
     680:	80 93 7a 00 	sts	0x007A, r24
     684:	80 91 7a 00 	lds	r24, 0x007A
     688:	84 ff       	sbrs	r24, 4
     68a:	fc cf       	rjmp	.-8      	; 0x684 <get_adc_val+0xa>
	delay();
     68c:	0e 94 39 03 	call	0x672	; 0x672 <delay>
	ADC_GET_SAMPLE_10(adc_val);
     690:	80 91 78 00 	lds	r24, 0x0078
     694:	20 91 79 00 	lds	r18, 0x0079
     698:	90 e0       	ldi	r25, 0x00	; 0
	return adc_val;
}
     69a:	92 2b       	or	r25, r18
     69c:	08 95       	ret

0000069e <dev_manager_adc>:
x = ((uint8_t) ADCL) >> 2; \
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint8_t dev_manager_adc(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;
uint16_t val;

     switch(action)
     6a2:	82 30       	cpi	r24, 0x02	; 2
     6a4:	89 f1       	breq	.+98     	; 0x708 <dev_manager_adc+0x6a>
     6a6:	ea 01       	movw	r28, r20
     6a8:	83 30       	cpi	r24, 0x03	; 3
     6aa:	28 f4       	brcc	.+10     	; 0x6b6 <dev_manager_adc+0x18>
     6ac:	88 23       	and	r24, r24
     6ae:	71 f0       	breq	.+28     	; 0x6cc <dev_manager_adc+0x2e>
     6b0:	81 30       	cpi	r24, 0x01	; 1
     6b2:	79 f0       	breq	.+30     	; 0x6d2 <dev_manager_adc+0x34>
     6b4:	23 c0       	rjmp	.+70     	; 0x6fc <dev_manager_adc+0x5e>
     6b6:	84 30       	cpi	r24, 0x04	; 4
     6b8:	b1 f0       	breq	.+44     	; 0x6e6 <dev_manager_adc+0x48>
     6ba:	80 f0       	brcs	.+32     	; 0x6dc <dev_manager_adc+0x3e>
     6bc:	85 30       	cpi	r24, 0x05	; 5
     6be:	f1 f4       	brne	.+60     	; 0x6fc <dev_manager_adc+0x5e>
		
	    

             case READ:
			      /* Conversion to 8-bit value*/
			      val=get_adc_val();
     6c0:	0e 94 3d 03 	call	0x67a	; 0x67a <get_adc_val>
			      buffer[count]=val & 0xFF;
     6c4:	88 83       	st	Y, r24
			      count++;
			      buffer[count]=(val>>8)  & 0xFF;
     6c6:	99 83       	std	Y+1, r25	; 0x01
			      count++;
                      return count;
     6c8:	82 e0       	ldi	r24, 0x02	; 2
     6ca:	21 c0       	rjmp	.+66     	; 0x70e <dev_manager_adc+0x70>
uint16_t val;

     switch(action)
     {
            case INIT: 
	     		init_adc();  
     6cc:	0e 94 28 03 	call	0x650	; 0x650 <init_adc>
     6d0:	1b c0       	rjmp	.+54     	; 0x708 <dev_manager_adc+0x6a>
		      return 1;
	     
	    case OPEN:   
		    if(opt&READ_FLAG)
     6d2:	60 fd       	sbrc	r22, 0
     6d4:	19 c0       	rjmp	.+50     	; 0x708 <dev_manager_adc+0x6a>
     6d6:	66 70       	andi	r22, 0x06	; 6
		    }
		    if(opt&WRITE_FLAG)
		    {
		   	return NRK_ERROR; 
		    }
		    if(opt&APPEND_FLAG)
     6d8:	c9 f4       	brne	.+50     	; 0x70c <dev_manager_adc+0x6e>
     6da:	16 c0       	rjmp	.+44     	; 0x708 <dev_manager_adc+0x6a>
             case CLOSE:
                        return NRK_OK;
             
	     case GET_STATUS:
	     		// use "key" here 
			if(key==ADC_CHAN) return channel;
     6dc:	61 30       	cpi	r22, 0x01	; 1
     6de:	b1 f4       	brne	.+44     	; 0x70c <dev_manager_adc+0x6e>
     6e0:	80 91 af 04 	lds	r24, 0x04AF
     6e4:	14 c0       	rjmp	.+40     	; 0x70e <dev_manager_adc+0x70>
	     		return NRK_ERROR;
			
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==ADC_CHAN) 
     6e6:	61 30       	cpi	r22, 0x01	; 1
     6e8:	89 f4       	brne	.+34     	; 0x70c <dev_manager_adc+0x6e>
			{
				channel=value;
     6ea:	20 93 af 04 	sts	0x04AF, r18
				ADC_SET_CHANNEL (channel);
     6ee:	80 91 7c 00 	lds	r24, 0x007C
     6f2:	80 7e       	andi	r24, 0xE0	; 224
     6f4:	28 2b       	or	r18, r24
     6f6:	20 93 7c 00 	sts	0x007C, r18
     6fa:	06 c0       	rjmp	.+12     	; 0x708 <dev_manager_adc+0x6a>
				return NRK_OK;
			}
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	8c e0       	ldi	r24, 0x0C	; 12
     700:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <nrk_kernel_error_add>
		 return 0;
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	03 c0       	rjmp	.+6      	; 0x70e <dev_manager_adc+0x70>
		      return 1;
	     
	    case OPEN:   
		    if(opt&READ_FLAG)
		    {
		   	return NRK_OK; 
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	01 c0       	rjmp	.+2      	; 0x70e <dev_manager_adc+0x70>
		    {
		   	return NRK_ERROR; 
		    }
		    if(opt&APPEND_FLAG)
		    {
		   	return NRK_ERROR; 
     70c:	8f ef       	ldi	r24, 0xFF	; 255
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
		 return 0;
	}
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	08 95       	ret

00000714 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     714:	90 91 41 01 	lds	r25, 0x0141
     718:	9f 71       	andi	r25, 0x1F	; 31
     71a:	9f 31       	cpi	r25, 0x1F	; 31
     71c:	d9 f3       	breq	.-10     	; 0x714 <rf_cmd>
		continue;
	TRX_STATE = cmd;
     71e:	80 93 42 01 	sts	0x0142, r24
     722:	08 95       	ret

00000724 <set_wireless_prog>:
uint8_t reset_val[] = {0x43, 0x15, 0xa6, 0xd9, 0x3d, 0x31, 0x82, 0xf1, 0x8c, 0xa7, 0x4f, 0xc5, 0x99, 0x97, 0x04, 0xac};


void set_wireless_prog(uint8_t val)
{
   wireless_prog = val;
     724:	80 93 7a 03 	sts	0x037A, r24
     728:	08 95       	ret

0000072a <rf_enable_glossy>:
}

void rf_enable_glossy()
{
	use_glossy = 1;
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	80 93 b6 04 	sts	0x04B6, r24
     730:	08 95       	ret

00000732 <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
     732:	10 92 b6 04 	sts	0x04B6, r1
     736:	08 95       	ret

00000738 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     738:	80 91 41 01 	lds	r24, 0x0141
     73c:	8f 71       	andi	r24, 0x1F	; 31
     73e:	8f 31       	cpi	r24, 0x1F	; 31
     740:	d9 f3       	breq	.-10     	; 0x738 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     742:	80 91 41 01 	lds	r24, 0x0141
     746:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
     748:	e1 f0       	breq	.+56     	; 0x782 <rf_power_down+0x4a>
     74a:	8f 30       	cpi	r24, 0x0F	; 15
     74c:	d1 f0       	breq	.+52     	; 0x782 <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
     74e:	80 91 41 01 	lds	r24, 0x0141
     752:	8f 71       	andi	r24, 0x1F	; 31
     754:	88 30       	cpi	r24, 0x08	; 8
     756:	31 f4       	brne	.+12     	; 0x764 <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
     758:	80 91 39 01 	lds	r24, 0x0139
     75c:	82 60       	ori	r24, 0x02	; 2
     75e:	80 93 39 01 	sts	0x0139, r24
     762:	0b c0       	rjmp	.+22     	; 0x77a <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
     764:	88 e0       	ldi	r24, 0x08	; 8
     766:	0e 94 8a 03 	call	0x714	; 0x714 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
     76a:	80 91 41 01 	lds	r24, 0x0141
     76e:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
     770:	88 30       	cpi	r24, 0x08	; 8
     772:	d9 f7       	brne	.-10     	; 0x76a <rf_power_down+0x32>
     774:	f1 cf       	rjmp	.-30     	; 0x758 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
     776:	8f 30       	cpi	r24, 0x0F	; 15
     778:	21 f0       	breq	.+8      	; 0x782 <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
     77a:	80 91 41 01 	lds	r24, 0x0141
     77e:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
     780:	d1 f7       	brne	.-12     	; 0x776 <rf_power_down+0x3e>
     782:	08 95       	ret

00000784 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     784:	80 91 41 01 	lds	r24, 0x0141
     788:	8f 71       	andi	r24, 0x1F	; 31
     78a:	8f 31       	cpi	r24, 0x1F	; 31
     78c:	d9 f3       	breq	.-10     	; 0x784 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     78e:	80 91 41 01 	lds	r24, 0x0141
     792:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
     794:	11 f0       	breq	.+4      	; 0x79a <rf_power_up+0x16>
     796:	8f 30       	cpi	r24, 0x0F	; 15
     798:	51 f4       	brne	.+20     	; 0x7ae <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
     79a:	80 91 39 01 	lds	r24, 0x0139
     79e:	8d 7f       	andi	r24, 0xFD	; 253
     7a0:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
     7a4:	80 91 41 01 	lds	r24, 0x0141
     7a8:	8f 71       	andi	r24, 0x1F	; 31
     7aa:	88 30       	cpi	r24, 0x08	; 8
     7ac:	d9 f7       	brne	.-10     	; 0x7a4 <rf_power_up+0x20>
     7ae:	08 95       	ret

000007b0 <rf_pll_on>:
	TRX_STATE = cmd;
}

void rf_pll_on()
{
   rf_cmd(PLL_ON);
     7b0:	89 e0       	ldi	r24, 0x09	; 9
     7b2:	0c 94 8a 03 	jmp	0x714	; 0x714 <rf_cmd>

000007b6 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
     7b6:	e5 e4       	ldi	r30, 0x45	; 69
     7b8:	f1 e0       	ldi	r31, 0x01	; 1
     7ba:	90 81       	ld	r25, Z
     7bc:	90 7f       	andi	r25, 0xF0	; 240
     7be:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
     7c0:	90 81       	ld	r25, Z
     7c2:	8f 70       	andi	r24, 0x0F	; 15
     7c4:	98 2b       	or	r25, r24
     7c6:	90 83       	st	Z, r25
     7c8:	08 95       	ret

000007ca <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
     7ca:	e7 e5       	ldi	r30, 0x57	; 87
     7cc:	f1 e0       	ldi	r31, 0x01	; 1
     7ce:	80 81       	ld	r24, Z
     7d0:	8d 7f       	andi	r24, 0xFD	; 253
     7d2:	80 83       	st	Z, r24
     7d4:	08 95       	ret

000007d6 <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
     7d6:	e7 e5       	ldi	r30, 0x57	; 87
     7d8:	f1 e0       	ldi	r31, 0x01	; 1
     7da:	80 81       	ld	r24, Z
     7dc:	82 60       	ori	r24, 0x02	; 2
     7de:	80 83       	st	Z, r24
     7e0:	08 95       	ret

000007e2 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
     7e2:	ee e6       	ldi	r30, 0x6E	; 110
     7e4:	f1 e0       	ldi	r31, 0x01	; 1
     7e6:	80 81       	ld	r24, Z
     7e8:	8f 7e       	andi	r24, 0xEF	; 239
     7ea:	80 83       	st	Z, r24
     7ec:	08 95       	ret

000007ee <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
     7ee:	ee e6       	ldi	r30, 0x6E	; 110
     7f0:	f1 e0       	ldi	r31, 0x01	; 1
     7f2:	80 81       	ld	r24, Z
     7f4:	80 61       	ori	r24, 0x10	; 16
     7f6:	80 83       	st	Z, r24
     7f8:	08 95       	ret

000007fa <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
     7fa:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
     7fe:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
     802:	90 93 c0 04 	sts	0x04C0, r25
     806:	80 93 bf 04 	sts	0x04BF, r24
     80a:	08 95       	ret

0000080c <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
     80c:	90 93 ba 04 	sts	0x04BA, r25
     810:	80 93 b9 04 	sts	0x04B9, r24
	PHY_CC_CCA &= ~(0x1F);
     814:	e8 e4       	ldi	r30, 0x48	; 72
     816:	f1 e0       	ldi	r31, 0x01	; 1
     818:	80 81       	ld	r24, Z
     81a:	80 7e       	andi	r24, 0xE0	; 224
     81c:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
     81e:	80 81       	ld	r24, Z
     820:	68 2b       	or	r22, r24
     822:	60 83       	st	Z, r22
     824:	08 95       	ret

00000826 <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
     826:	90 93 7e 03 	sts	0x037E, r25
     82a:	80 93 7d 03 	sts	0x037D, r24
     82e:	08 95       	ret

00000830 <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
     830:	90 93 7c 03 	sts	0x037C, r25
     834:	80 93 7b 03 	sts	0x037B, r24
     838:	08 95       	ret

0000083a <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	fc 01       	movw	r30, r24
     844:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
     846:	80 e2       	ldi	r24, 0x20	; 32
     848:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
     84c:	80 ec       	ldi	r24, 0xC0	; 192
     84e:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
     852:	60 62       	ori	r22, 0x20	; 32
     854:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
     858:	85 ec       	ldi	r24, 0xC5	; 197
     85a:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
     85e:	87 ea       	ldi	r24, 0xA7	; 167
     860:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
     864:	80 e8       	ldi	r24, 0x80	; 128
     866:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
     86a:	20 93 60 01 	sts	0x0160, r18
     86e:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
     872:	40 93 62 01 	sts	0x0162, r20
     876:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     87a:	c6 e4       	ldi	r28, 0x46	; 70
     87c:	d1 e0       	ldi	r29, 0x01	; 1
     87e:	08 81       	ld	r16, Y
     880:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     882:	98 81       	ld	r25, Y
     884:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     886:	30 2f       	mov	r19, r16
     888:	32 95       	swap	r19
     88a:	36 95       	lsr	r19
     88c:	37 70       	andi	r19, 0x07	; 7
     88e:	60 e4       	ldi	r22, 0x40	; 64
     890:	36 9f       	mul	r19, r22
     892:	80 01       	movw	r16, r0
     894:	11 24       	eor	r1, r1
     896:	22 95       	swap	r18
     898:	26 95       	lsr	r18
     89a:	23 70       	andi	r18, 0x03	; 3
     89c:	62 2f       	mov	r22, r18
     89e:	60 2b       	or	r22, r16
     8a0:	82 95       	swap	r24
     8a2:	86 95       	lsr	r24
     8a4:	83 70       	andi	r24, 0x03	; 3
     8a6:	70 e1       	ldi	r23, 0x10	; 16
     8a8:	87 9f       	mul	r24, r23
     8aa:	90 01       	movw	r18, r0
     8ac:	11 24       	eor	r1, r1
     8ae:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     8b0:	92 95       	swap	r25
     8b2:	96 95       	lsr	r25
     8b4:	93 70       	andi	r25, 0x03	; 3
     8b6:	84 e0       	ldi	r24, 0x04	; 4
     8b8:	98 9f       	mul	r25, r24
     8ba:	b0 01       	movw	r22, r0
     8bc:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     8be:	62 2b       	or	r22, r18
     8c0:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     8c4:	88 81       	ld	r24, Y
     8c6:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     8c8:	92 95       	swap	r25
     8ca:	96 95       	lsr	r25
     8cc:	93 70       	andi	r25, 0x03	; 3
     8ce:	39 2f       	mov	r19, r25
     8d0:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     8d2:	98 2f       	mov	r25, r24
     8d4:	92 95       	swap	r25
     8d6:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     8d8:	93 2b       	or	r25, r19
     8da:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
     8de:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
   
   /* Enable all radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
     8e8:	c9 eb       	ldi	r28, 0xB9	; 185
     8ea:	d4 e0       	ldi	r29, 0x04	; 4
     8ec:	f9 83       	std	Y+1, r31	; 0x01
     8ee:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
     8f0:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
     8f2:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
     8f4:	5d 83       	std	Y+5, r21	; 0x05
     8f6:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
     8f8:	bf 83       	std	Y+7, r27	; 0x07
     8fa:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
     8fc:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	80 93 d3 04 	sts	0x04D3, r24
   rx_ready = 0;
     904:	10 92 ea 04 	sts	0x04EA, r1
   tx_done = 0;
     908:	10 92 c2 04 	sts	0x04C2, r1

	use_glossy = 0;
     90c:	10 92 b6 04 	sts	0x04B6, r1

} // rf_init() 
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	08 95       	ret

0000091a <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
   rf_cmd(TRX_OFF);
     91a:	88 e0       	ldi	r24, 0x08	; 8
     91c:	0e 94 8a 03 	call	0x714	; 0x714 <rf_cmd>
   rx_ready = 0;
     920:	10 92 ea 04 	sts	0x04EA, r1
     924:	08 95       	ret

00000926 <rf_tx_packet_resend>:
uint8_t rf_tx_packet_resend()
{
   uint8_t trx_error;
   uint16_t i;

   tx_done = 0;
     926:	10 92 c2 04 	sts	0x04C2, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	0e 94 8a 03 	call	0x714	; 0x714 <rf_cmd>
     930:	88 ee       	ldi	r24, 0xE8	; 232
     932:	9d ef       	ldi	r25, 0xFD	; 253
   for(i=0; (i<65000) && !tx_done; i++)
     934:	20 91 c2 04 	lds	r18, 0x04C2
     938:	21 11       	cpse	r18, r1
     93a:	04 c0       	rjmp	.+8      	; 0x944 <rf_tx_packet_resend+0x1e>
     93c:	01 97       	sbiw	r24, 0x01	; 1
     93e:	d1 f7       	brne	.-12     	; 0x934 <rf_tx_packet_resend+0xe>
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
     940:	8f ef       	ldi	r24, 0xFF	; 255

   return trx_error;
}
     942:	08 95       	ret
   tx_done = 0;
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
   for(i=0; (i<65000) && !tx_done; i++)
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	08 95       	ret

00000948 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
     94c:	80 91 d3 04 	lds	r24, 0x04D3
     950:	88 23       	and	r24, r24
     952:	41 f1       	breq	.+80     	; 0x9a4 <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     954:	80 91 41 01 	lds	r24, 0x0141
     958:	c8 2f       	mov	r28, r24
     95a:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     95c:	9f ef       	ldi	r25, 0xFF	; 255
     95e:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     960:	92 30       	cpi	r25, 0x02	; 2
     962:	c0 f3       	brcs	.-16     	; 0x954 <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     964:	c1 31       	cpi	r28, 0x11	; 17
     966:	b1 f3       	breq	.-20     	; 0x954 <rf_cca_check+0xc>
     968:	c2 31       	cpi	r28, 0x12	; 18
     96a:	a1 f3       	breq	.-24     	; 0x954 <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
     96c:	cf 31       	cpi	r28, 0x1F	; 31
     96e:	91 f3       	breq	.-28     	; 0x954 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     970:	c8 30       	cpi	r28, 0x08	; 8
     972:	19 f0       	breq	.+6      	; 0x97a <rf_cca_check+0x32>
     974:	8f 70       	andi	r24, 0x0F	; 15
     976:	86 30       	cpi	r24, 0x06	; 6
     978:	a9 f4       	brne	.+42     	; 0x9a4 <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
     97a:	86 e1       	ldi	r24, 0x16	; 22
     97c:	0e 94 8a 03 	call	0x714	; 0x714 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
     980:	80 91 48 01 	lds	r24, 0x0148
     984:	80 68       	ori	r24, 0x80	; 128
     986:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
     98a:	80 91 41 01 	lds	r24, 0x0141
     98e:	87 ff       	sbrs	r24, 7
     990:	fc cf       	rjmp	.-8      	; 0x98a <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     992:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
     996:	8c 2f       	mov	r24, r28
     998:	0e 94 8a 03 	call	0x714	; 0x714 <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
     99c:	d6 fb       	bst	r29, 6
     99e:	88 27       	eor	r24, r24
     9a0:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
     9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
     9a4:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
     9ac:	80 91 d3 04 	lds	r24, 0x04D3
     9b0:	88 23       	and	r24, r24
     9b2:	09 f4       	brne	.+2      	; 0x9b6 <rf_rx_packet_nonblock+0xa>
     9b4:	e3 c0       	rjmp	.+454    	; 0xb7c <rf_rx_packet_nonblock+0x1d0>
		return NRK_ERROR;

   if(!rx_ready)
     9b6:	80 91 ea 04 	lds	r24, 0x04EA
     9ba:	88 23       	and	r24, r24
     9bc:	09 f4       	brne	.+2      	; 0x9c0 <rf_rx_packet_nonblock+0x14>
     9be:	dc c0       	rjmp	.+440    	; 0xb78 <rf_rx_packet_nonblock+0x1cc>
      return 0;
   else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
     9c0:	80 91 7b 01 	lds	r24, 0x017B
     9c4:	e0 91 b9 04 	lds	r30, 0x04B9
     9c8:	f0 91 ba 04 	lds	r31, 0x04BA
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	02 97       	sbiw	r24, 0x02	; 2
     9d0:	24 81       	ldd	r18, Z+4	; 0x04
     9d2:	33 27       	eor	r19, r19
     9d4:	27 fd       	sbrc	r18, 7
     9d6:	30 95       	com	r19
     9d8:	28 17       	cp	r18, r24
     9da:	39 07       	cpc	r19, r25
     9dc:	0c f4       	brge	.+2      	; 0x9e0 <rf_rx_packet_nonblock+0x34>
     9de:	ce c0       	rjmp	.+412    	; 0xb7c <rf_rx_packet_nonblock+0x1d0>
		return NRK_ERROR;


	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
     9e0:	e0 91 b9 04 	lds	r30, 0x04B9
     9e4:	f0 91 ba 04 	lds	r31, 0x04BA
     9e8:	80 91 82 01 	lds	r24, 0x0182
     9ec:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
     9ee:	e0 91 b9 04 	lds	r30, 0x04B9
     9f2:	f0 91 ba 04 	lds	r31, 0x04BA
     9f6:	80 91 87 01 	lds	r24, 0x0187
     9fa:	90 91 88 01 	lds	r25, 0x0188
     9fe:	92 83       	std	Z+2, r25	; 0x02
     a00:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
     a02:	e0 91 b9 04 	lds	r30, 0x04B9
     a06:	f0 91 ba 04 	lds	r31, 0x04BA
     a0a:	80 91 7b 01 	lds	r24, 0x017B
     a0e:	8b 50       	subi	r24, 0x0B	; 11
     a10:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
     a12:	a0 91 b9 04 	lds	r26, 0x04B9
     a16:	b0 91 ba 04 	lds	r27, 0x04BA
     a1a:	e0 91 b9 04 	lds	r30, 0x04B9
     a1e:	f0 91 ba 04 	lds	r31, 0x04BA
     a22:	13 96       	adiw	r26, 0x03	; 3
     a24:	9c 91       	ld	r25, X
     a26:	84 81       	ldd	r24, Z+4	; 0x04
     a28:	89 17       	cp	r24, r25
     a2a:	3c f0       	brlt	.+14     	; 0xa3a <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
     a2c:	e0 91 b9 04 	lds	r30, 0x04B9
     a30:	f0 91 ba 04 	lds	r31, 0x04BA
     a34:	83 81       	ldd	r24, Z+3	; 0x03
     a36:	87 ff       	sbrs	r24, 7
     a38:	0d c0       	rjmp	.+26     	; 0xa54 <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
     a3a:	10 92 ea 04 	sts	0x04EA, r1
      TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     a3e:	80 91 4c 01 	lds	r24, 0x014C
     a42:	8f 77       	andi	r24, 0x7F	; 127
     a44:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     a48:	80 91 4c 01 	lds	r24, 0x014C
     a4c:	80 68       	ori	r24, 0x80	; 128
     a4e:	80 93 4c 01 	sts	0x014C, r24
     a52:	94 c0       	rjmp	.+296    	; 0xb7c <rf_rx_packet_nonblock+0x1d0>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
     a54:	a0 91 b9 04 	lds	r26, 0x04B9
     a58:	b0 91 ba 04 	lds	r27, 0x04BA
      TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
     a5c:	e0 91 b9 04 	lds	r30, 0x04B9
     a60:	f0 91 ba 04 	lds	r31, 0x04BA
     a64:	13 96       	adiw	r26, 0x03	; 3
     a66:	4c 91       	ld	r20, X
     a68:	55 27       	eor	r21, r21
     a6a:	47 fd       	sbrc	r20, 7
     a6c:	50 95       	com	r21
     a6e:	69 e8       	ldi	r22, 0x89	; 137
     a70:	71 e0       	ldi	r23, 0x01	; 1
     a72:	85 81       	ldd	r24, Z+5	; 0x05
     a74:	96 81       	ldd	r25, Z+6	; 0x06
     a76:	0e 94 7e 25 	call	0x4afc	; 0x4afc <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);

   /* if reset packet received, perform reset */
   if(wireless_prog && (rfSettings.pRxInfo->length == 16)){
     a7a:	80 91 7a 03 	lds	r24, 0x037A
     a7e:	88 23       	and	r24, r24
     a80:	09 f4       	brne	.+2      	; 0xa84 <rf_rx_packet_nonblock+0xd8>
     a82:	3e c0       	rjmp	.+124    	; 0xb00 <rf_rx_packet_nonblock+0x154>
     a84:	e0 91 b9 04 	lds	r30, 0x04B9
     a88:	f0 91 ba 04 	lds	r31, 0x04BA
     a8c:	83 81       	ldd	r24, Z+3	; 0x03
     a8e:	80 31       	cpi	r24, 0x10	; 16
     a90:	b9 f5       	brne	.+110    	; 0xb00 <rf_rx_packet_nonblock+0x154>
      if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 4) == 0){
     a92:	e0 91 b9 04 	lds	r30, 0x04B9
     a96:	f0 91 ba 04 	lds	r31, 0x04BA
     a9a:	65 81       	ldd	r22, Z+5	; 0x05
     a9c:	76 81       	ldd	r23, Z+6	; 0x06
     a9e:	44 e0       	ldi	r20, 0x04	; 4
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	92 e0       	ldi	r25, 0x02	; 2
     aa6:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <strncmp>
     aaa:	89 2b       	or	r24, r25
     aac:	49 f5       	brne	.+82     	; 0xb00 <rf_rx_packet_nonblock+0x154>
         if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 16) == 0){
     aae:	e0 91 b9 04 	lds	r30, 0x04B9
     ab2:	f0 91 ba 04 	lds	r31, 0x04BA
     ab6:	65 81       	ldd	r22, Z+5	; 0x05
     ab8:	76 81       	ldd	r23, Z+6	; 0x06
     aba:	40 e1       	ldi	r20, 0x10	; 16
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	92 e0       	ldi	r25, 0x02	; 2
     ac2:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <strncmp>
     ac6:	89 2b       	or	r24, r25
     ac8:	d9 f4       	brne	.+54     	; 0xb00 <rf_rx_packet_nonblock+0x154>
            wdt_enable(WDTO_500MS);
     aca:	9d e0       	ldi	r25, 0x0D	; 13
     acc:	88 e1       	ldi	r24, 0x18	; 24
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	f8 94       	cli
     ad2:	a8 95       	wdr
     ad4:	80 93 60 00 	sts	0x0060, r24
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	90 93 60 00 	sts	0x0060, r25
            nrk_led_set(0);
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <nrk_led_set>
            nrk_led_set(1);
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <nrk_led_set>
            nrk_led_set(2);
     aee:	82 e0       	ldi	r24, 0x02	; 2
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <nrk_led_set>
            nrk_led_set(3);
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <nrk_led_set>
     afe:	ff cf       	rjmp	.-2      	; 0xafe <rf_rx_packet_nonblock+0x152>
      }
   }

	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
     b00:	e0 91 b9 04 	lds	r30, 0x04B9
     b04:	f0 91 ba 04 	lds	r31, 0x04BA
     b08:	80 91 80 01 	lds	r24, 0x0180
     b0c:	85 fb       	bst	r24, 5
     b0e:	88 27       	eor	r24, r24
     b10:	80 f9       	bld	r24, 0
     b12:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
     b14:	e0 91 b9 04 	lds	r30, 0x04B9
     b18:	f0 91 ba 04 	lds	r31, 0x04BA
     b1c:	80 91 47 01 	lds	r24, 0x0147
     b20:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
     b22:	e0 91 b9 04 	lds	r30, 0x04B9
     b26:	f0 91 ba 04 	lds	r31, 0x04BA
     b2a:	80 91 46 01 	lds	r24, 0x0146
     b2e:	86 95       	lsr	r24
     b30:	86 95       	lsr	r24
     b32:	86 95       	lsr	r24
     b34:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
     b36:	e0 91 b9 04 	lds	r30, 0x04B9
     b3a:	f0 91 ba 04 	lds	r31, 0x04BA
     b3e:	80 91 47 01 	lds	r24, 0x0147
     b42:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
     b44:	a0 91 b9 04 	lds	r26, 0x04B9
     b48:	b0 91 ba 04 	lds	r27, 0x04BA
     b4c:	e0 91 7b 01 	lds	r30, 0x017B
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	e0 58       	subi	r30, 0x80	; 128
     b54:	fe 4f       	sbci	r31, 0xFE	; 254
     b56:	80 81       	ld	r24, Z
     b58:	1b 96       	adiw	r26, 0x0b	; 11
     b5a:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
     b5c:	10 92 ea 04 	sts	0x04EA, r1
   TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
     b60:	80 91 4c 01 	lds	r24, 0x014C
     b64:	8f 77       	andi	r24, 0x7F	; 127
     b66:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
     b6a:	80 91 4c 01 	lds	r24, 0x014C
     b6e:	80 68       	ori	r24, 0x80	; 128
     b70:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

   if(!rx_ready)
      return 0;
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
   TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
     b7e:	08 95       	ret

00000b80 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
     b80:	1f 92       	push	r1
     b82:	0f 92       	push	r0
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	0f 92       	push	r0
     b88:	11 24       	eor	r1, r1
     b8a:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
     b8c:	80 e8       	ldi	r24, 0x80	; 128
     b8e:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     b92:	8f 91       	pop	r24
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <__vector_62>:

	return;
}

SIGNAL(TRX24_XAH_AMI_vect)
{
     b9e:	1f 92       	push	r1
     ba0:	0f 92       	push	r0
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	0f 92       	push	r0
     ba6:	11 24       	eor	r1, r1
     ba8:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
     baa:	80 e2       	ldi	r24, 0x20	; 32
     bac:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     bb0:	8f 91       	pop	r24
     bb2:	0f 90       	pop	r0
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	0f 90       	pop	r0
     bb8:	1f 90       	pop	r1
     bba:	18 95       	reti

00000bbc <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
     bbc:	1f 92       	push	r1
     bbe:	0f 92       	push	r0
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	0f 92       	push	r0
     bc4:	11 24       	eor	r1, r1
     bc6:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
     bc8:	80 e1       	ldi	r24, 0x10	; 16
     bca:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     bce:	8f 91       	pop	r24
     bd0:	0f 90       	pop	r0
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	0f 90       	pop	r0
     bd6:	1f 90       	pop	r1
     bd8:	18 95       	reti

00000bda <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
     bda:	1f 92       	push	r1
     bdc:	0f 92       	push	r0
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	0f 92       	push	r0
     be2:	11 24       	eor	r1, r1
     be4:	0b b6       	in	r0, 0x3b	; 59
     be6:	0f 92       	push	r0
     be8:	2f 93       	push	r18
     bea:	3f 93       	push	r19
     bec:	4f 93       	push	r20
     bee:	5f 93       	push	r21
     bf0:	6f 93       	push	r22
     bf2:	7f 93       	push	r23
     bf4:	8f 93       	push	r24
     bf6:	9f 93       	push	r25
     bf8:	af 93       	push	r26
     bfa:	bf 93       	push	r27
     bfc:	ef 93       	push	r30
     bfe:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
     c00:	84 e0       	ldi	r24, 0x04	; 4
     c02:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
     c06:	e0 91 7d 03 	lds	r30, 0x037D
     c0a:	f0 91 7e 03 	lds	r31, 0x037E
     c0e:	30 97       	sbiw	r30, 0x00	; 0
     c10:	09 f0       	breq	.+2      	; 0xc14 <__vector_59+0x3a>
		rx_start_func();
     c12:	09 95       	icall

	return;
}
     c14:	ff 91       	pop	r31
     c16:	ef 91       	pop	r30
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	9f 91       	pop	r25
     c1e:	8f 91       	pop	r24
     c20:	7f 91       	pop	r23
     c22:	6f 91       	pop	r22
     c24:	5f 91       	pop	r21
     c26:	4f 91       	pop	r20
     c28:	3f 91       	pop	r19
     c2a:	2f 91       	pop	r18
     c2c:	0f 90       	pop	r0
     c2e:	0b be       	out	0x3b, r0	; 59
     c30:	0f 90       	pop	r0
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	0f 90       	pop	r0
     c36:	1f 90       	pop	r1
     c38:	18 95       	reti

00000c3a <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
     c3a:	1f 92       	push	r1
     c3c:	0f 92       	push	r0
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	0f 92       	push	r0
     c42:	11 24       	eor	r1, r1
     c44:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
     c46:	82 e0       	ldi	r24, 0x02	; 2
     c48:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     c4c:	8f 91       	pop	r24
     c4e:	0f 90       	pop	r0
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	0f 90       	pop	r0
     c54:	1f 90       	pop	r1
     c56:	18 95       	reti

00000c58 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
     c58:	1f 92       	push	r1
     c5a:	0f 92       	push	r0
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	0f 92       	push	r0
     c60:	11 24       	eor	r1, r1
     c62:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	80 93 4f 01 	sts	0x014F, r24

	return;
}
     c6a:	8f 91       	pop	r24
     c6c:	0f 90       	pop	r0
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	0f 90       	pop	r0
     c72:	1f 90       	pop	r1
     c74:	18 95       	reti

00000c76 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
     c76:	e9 e4       	ldi	r30, 0x49	; 73
     c78:	f1 e0       	ldi	r31, 0x01	; 1
     c7a:	90 81       	ld	r25, Z
     c7c:	90 7f       	andi	r25, 0xF0	; 240
     c7e:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
     c80:	90 81       	ld	r25, Z
     c82:	8f 70       	andi	r24, 0x0F	; 15
     c84:	98 2b       	or	r25, r24
     c86:	90 83       	st	Z, r25
     c88:	08 95       	ret

00000c8a <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
     c8c:	08 95       	ret

00000c8e <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
     c8e:	08 95       	ret

00000c90 <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
     c90:	08 95       	ret

00000c92 <rf_security_disable>:
}



void rf_security_disable()
{
     c92:	08 95       	ret

00000c94 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
     c94:	8f ef       	ldi	r24, 0xFF	; 255
     c96:	08 95       	ret

00000c98 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
     c98:	80 91 b4 04 	lds	r24, 0x04B4
     c9c:	90 91 b5 04 	lds	r25, 0x04B5
     ca0:	08 95       	ret

00000ca2 <rf_flush_rx_fifo>:



inline void rf_flush_rx_fifo()
{
     ca2:	08 95       	ret

00000ca4 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	08 95       	ret

00000ca8 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	08 95       	ret

00000cac <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	08 95       	ret

00000cb0 <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
     cb0:	08 95       	ret

00000cb2 <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
     cb2:	08 95       	ret

00000cb4 <rf_test_mode>:
}



void rf_test_mode()
{
     cb4:	08 95       	ret

00000cb6 <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
     cb6:	08 95       	ret

00000cb8 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
     cb8:	08 95       	ret

00000cba <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
     cba:	08 95       	ret

00000cbc <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
     cbc:	08 95       	ret

00000cbe <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
     cbe:	08 95       	ret

00000cc0 <rf_cc2591_tx_on>:
	PORTG	|= 0x1;
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	
	DDRG	&= ~(0x1);  // Set RXTX as input
     cc0:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
     cc2:	8d b1       	in	r24, 0x0d	; 13
     cc4:	80 6e       	ori	r24, 0xE0	; 224
     cc6:	8d b9       	out	0x0d, r24	; 13
	// PAEN=1  EN=0  HGM=x RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0xA0;
     cc8:	8e b1       	in	r24, 0x0e	; 14
     cca:	80 6a       	ori	r24, 0xA0	; 160
     ccc:	8e b9       	out	0x0e, r24	; 14
     cce:	08 95       	ret

00000cd0 <rf_tx_packet>:
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------


uint8_t rf_tx_packet(RF_TX_INFO *pRTI)
{
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	fc 01       	movw	r30, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
     cda:	80 91 d3 04 	lds	r24, 0x04D3
     cde:	81 11       	cpse	r24, r1
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <rf_tx_packet+0x16>
		return NRK_ERROR;
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	ad c0       	rjmp	.+346    	; 0xe40 <rf_tx_packet+0x170>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
     ce6:	26 81       	ldd	r18, Z+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
     ce8:	80 91 bb 04 	lds	r24, 0x04BB
     cec:	8f 5f       	subi	r24, 0xFF	; 255
     cee:	80 93 bb 04 	sts	0x04BB, r24
	machead->fcf = fcf;
     cf2:	90 91 81 01 	lds	r25, 0x0181
     cf6:	90 7e       	andi	r25, 0xE0	; 224
     cf8:	91 60       	ori	r25, 0x01	; 1
     cfa:	20 fb       	bst	r18, 0
     cfc:	95 f9       	bld	r25, 5
     cfe:	9f 73       	andi	r25, 0x3F	; 63
     d00:	90 64       	ori	r25, 0x40	; 64
     d02:	90 93 81 01 	sts	0x0181, r25
     d06:	88 e8       	ldi	r24, 0x88	; 136
     d08:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
     d0c:	80 91 b6 04 	lds	r24, 0x04B6
     d10:	88 23       	and	r24, r24
     d12:	61 f0       	breq	.+24     	; 0xd2c <rf_tx_packet+0x5c>
		machead->seq_num = 0xFF;
     d14:	8f ef       	ldi	r24, 0xFF	; 255
     d16:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
     d1a:	8a ea       	ldi	r24, 0xAA	; 170
     d1c:	9a ea       	ldi	r25, 0xAA	; 170
     d1e:	90 93 89 01 	sts	0x0189, r25
     d22:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
     d26:	8f ef       	ldi	r24, 0xFF	; 255
     d28:	9f ef       	ldi	r25, 0xFF	; 255
     d2a:	10 c0       	rjmp	.+32     	; 0xd4c <rf_tx_packet+0x7c>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
     d2c:	80 91 bb 04 	lds	r24, 0x04BB
     d30:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
     d34:	20 91 61 01 	lds	r18, 0x0161
     d38:	80 91 60 01 	lds	r24, 0x0160
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	92 2b       	or	r25, r18
     d40:	90 93 89 01 	sts	0x0189, r25
     d44:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = pRTI->destAddr;
     d48:	80 81       	ld	r24, Z
     d4a:	91 81       	ldd	r25, Z+1	; 0x01
     d4c:	90 93 87 01 	sts	0x0187, r25
     d50:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
     d54:	20 91 63 01 	lds	r18, 0x0163
     d58:	80 91 62 01 	lds	r24, 0x0162
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	92 2b       	or	r25, r18
     d60:	90 93 85 01 	sts	0x0185, r25
     d64:	80 93 84 01 	sts	0x0184, r24
     d68:	8f 01       	movw	r16, r30
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
     d6a:	42 81       	ldd	r20, Z+2	; 0x02
     d6c:	55 27       	eor	r21, r21
     d6e:	47 fd       	sbrc	r20, 7
     d70:	50 95       	com	r21
     d72:	63 81       	ldd	r22, Z+3	; 0x03
     d74:	74 81       	ldd	r23, Z+4	; 0x04
     d76:	8a e8       	ldi	r24, 0x8A	; 138
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	0e 94 7e 25 	call	0x4afc	; 0x4afc <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
     d7e:	f8 01       	movw	r30, r16
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	85 5f       	subi	r24, 0xF5	; 245
     d84:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
     d88:	80 91 41 01 	lds	r24, 0x0141
     d8c:	d8 2f       	mov	r29, r24
     d8e:	df 71       	andi	r29, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
     d90:	9f ef       	ldi	r25, 0xFF	; 255
     d92:	9d 0f       	add	r25, r29
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     d94:	92 30       	cpi	r25, 0x02	; 2
     d96:	c0 f3       	brcs	.-16     	; 0xd88 <rf_tx_packet+0xb8>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
     d98:	d1 31       	cpi	r29, 0x11	; 17
     d9a:	b1 f3       	breq	.-20     	; 0xd88 <rf_tx_packet+0xb8>
     d9c:	d2 31       	cpi	r29, 0x12	; 18
     d9e:	a1 f3       	breq	.-24     	; 0xd88 <rf_tx_packet+0xb8>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
     da0:	df 31       	cpi	r29, 0x1F	; 31
     da2:	91 f3       	breq	.-28     	; 0xd88 <rf_tx_packet+0xb8>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
     da4:	98 ef       	ldi	r25, 0xF8	; 248
     da6:	9d 0f       	add	r25, r29
     da8:	92 30       	cpi	r25, 0x02	; 2
     daa:	20 f0       	brcs	.+8      	; 0xdb4 <rf_tx_packet+0xe4>
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	86 30       	cpi	r24, 0x06	; 6
     db0:	09 f0       	breq	.+2      	; 0xdb4 <rf_tx_packet+0xe4>
     db2:	97 cf       	rjmp	.-210    	; 0xce2 <rf_tx_packet+0x12>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
     db4:	86 e1       	ldi	r24, 0x16	; 22
     db6:	0e 94 8a 03 	call	0x714	; 0x714 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
     dba:	f8 01       	movw	r30, r16
     dbc:	85 81       	ldd	r24, Z+5	; 0x05
     dbe:	81 11       	cpse	r24, r1
     dc0:	0b c0       	rjmp	.+22     	; 0xdd8 <rf_tx_packet+0x108>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
     dc2:	89 e0       	ldi	r24, 0x09	; 9
     dc4:	0e 94 8a 03 	call	0x714	; 0x714 <rf_cmd>
	if(pRTI->ackRequest)
     dc8:	f8 01       	movw	r30, r16
     dca:	86 81       	ldd	r24, Z+6	; 0x06
     dcc:	88 23       	and	r24, r24
     dce:	91 f0       	breq	.+36     	; 0xdf4 <rf_tx_packet+0x124>
		rf_cmd(TX_ARET_ON);
     dd0:	89 e1       	ldi	r24, 0x19	; 25
     dd2:	0e 94 8a 03 	call	0x714	; 0x714 <rf_cmd>
     dd6:	0e c0       	rjmp	.+28     	; 0xdf4 <rf_tx_packet+0x124>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
     dd8:	80 91 48 01 	lds	r24, 0x0148
     ddc:	80 68       	ori	r24, 0x80	; 128
     dde:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
     de2:	80 91 41 01 	lds	r24, 0x0141
     de6:	87 ff       	sbrs	r24, 7
     de8:	fc cf       	rjmp	.-8      	; 0xde2 <rf_tx_packet+0x112>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
     dea:	80 91 41 01 	lds	r24, 0x0141
     dee:	86 ff       	sbrs	r24, 6
     df0:	78 cf       	rjmp	.-272    	; 0xce2 <rf_tx_packet+0x12>
     df2:	e7 cf       	rjmp	.-50     	; 0xdc2 <rf_tx_packet+0xf2>
	rf_cmd(PLL_ON);
	if(pRTI->ackRequest)
		rf_cmd(TX_ARET_ON);
	
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
     df4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <rf_cc2591_tx_on>
#endif

   tx_done = 0;
     df8:	10 92 c2 04 	sts	0x04C2, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	0e 94 8a 03 	call	0x714	; 0x714 <rf_cmd>
   for(i=0; (i<65000) && !tx_done; i++){
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	20 91 c2 04 	lds	r18, 0x04C2
     e0a:	21 11       	cpse	r18, r1
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <rf_tx_packet+0x148>
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	88 3e       	cpi	r24, 0xE8	; 232
     e12:	fd ef       	ldi	r31, 0xFD	; 253
     e14:	9f 07       	cpc	r25, r31
     e16:	b9 f7       	brne	.-18     	; 0xe06 <rf_tx_packet+0x136>
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     e18:	f8 01       	movw	r30, r16
     e1a:	26 81       	ldd	r18, Z+6	; 0x06
     e1c:	22 23       	and	r18, r18
     e1e:	31 f0       	breq	.+12     	; 0xe2c <rf_tx_packet+0x15c>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
     e20:	20 91 42 01 	lds	r18, 0x0142
     e24:	22 95       	swap	r18
     e26:	26 95       	lsr	r18
     e28:	27 70       	andi	r18, 0x07	; 7
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     e2a:	29 f4       	brne	.+10     	; 0xe36 <rf_tx_packet+0x166>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
     e2c:	88 3e       	cpi	r24, 0xE8	; 232
     e2e:	9d 4f       	sbci	r25, 0xFD	; 253
     e30:	11 f0       	breq	.+4      	; 0xe36 <rf_tx_packet+0x166>
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
     e32:	c1 e0       	ldi	r28, 0x01	; 1
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <rf_tx_packet+0x168>
     e36:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
     e38:	8d 2f       	mov	r24, r29
     e3a:	0e 94 8a 03 	call	0x714	; 0x714 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
     e3e:	8c 2f       	mov	r24, r28
}
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	08 95       	ret

00000e4a <rf_cc2591_rx_on>:
	DDRG	|= 0x1;
	PORTG	&= ~(0x1);
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	DDRG	&= ~(0x1);  // Set RXTX as input
     e4a:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
     e4c:	8d b1       	in	r24, 0x0d	; 13
     e4e:	80 6e       	ori	r24, 0xE0	; 224
     e50:	8d b9       	out	0x0d, r24	; 13
	// PAEN=0  EN=1  HGM=1 RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0x60;
     e52:	8e b1       	in	r24, 0x0e	; 14
     e54:	80 66       	ori	r24, 0x60	; 96
     e56:	8e b9       	out	0x0e, r24	; 14
     e58:	08 95       	ret

00000e5a <rf_rx_on>:
	nrk_sem_post(radio_sem);
#endif
*/

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
     e5a:	0e 94 25 07 	call	0xe4a	; 0xe4a <rf_cc2591_rx_on>
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
     e5e:	86 e1       	ldi	r24, 0x16	; 22
     e60:	0c 94 8a 03 	jmp	0x714	; 0x714 <rf_cmd>

00000e64 <rf_polling_rx_on>:
	nrk_sem_post(radio_sem);
#endif
*/

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
     e64:	0e 94 25 07 	call	0xe4a	; 0xe4a <rf_cc2591_rx_on>
#endif

	rf_cmd(RX_AACK_ON);
     e68:	86 e1       	ldi	r24, 0x16	; 22
     e6a:	0c 94 8a 03 	jmp	0x714	; 0x714 <rf_cmd>

00000e6e <__vector_63>:

	return;
}

SIGNAL(TRX24_TX_END_vect)
{
     e6e:	1f 92       	push	r1
     e70:	0f 92       	push	r0
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	0f 92       	push	r0
     e76:	11 24       	eor	r1, r1
     e78:	0b b6       	in	r0, 0x3b	; 59
     e7a:	0f 92       	push	r0
     e7c:	2f 93       	push	r18
     e7e:	3f 93       	push	r19
     e80:	4f 93       	push	r20
     e82:	5f 93       	push	r21
     e84:	6f 93       	push	r22
     e86:	7f 93       	push	r23
     e88:	8f 93       	push	r24
     e8a:	9f 93       	push	r25
     e8c:	af 93       	push	r26
     e8e:	bf 93       	push	r27
     e90:	ef 93       	push	r30
     e92:	ff 93       	push	r31
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	80 93 c2 04 	sts	0x04C2, r24
   IRQ_STATUS = (1 << TX_END);
     e9a:	80 e4       	ldi	r24, 0x40	; 64
     e9c:	80 93 4f 01 	sts	0x014F, r24

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
     ea0:	0e 94 25 07 	call	0xe4a	; 0xe4a <rf_cc2591_rx_on>
#endif

	return;
}
     ea4:	ff 91       	pop	r31
     ea6:	ef 91       	pop	r30
     ea8:	bf 91       	pop	r27
     eaa:	af 91       	pop	r26
     eac:	9f 91       	pop	r25
     eae:	8f 91       	pop	r24
     eb0:	7f 91       	pop	r23
     eb2:	6f 91       	pop	r22
     eb4:	5f 91       	pop	r21
     eb6:	4f 91       	pop	r20
     eb8:	3f 91       	pop	r19
     eba:	2f 91       	pop	r18
     ebc:	0f 90       	pop	r0
     ebe:	0b be       	out	0x3b, r0	; 59
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti

00000eca <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
     eca:	cf 92       	push	r12
     ecc:	df 92       	push	r13
     ece:	ef 92       	push	r14
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	27 97       	sbiw	r28, 0x07	; 7
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	f8 94       	cli
     ee4:	de bf       	out	0x3e, r29	; 62
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
     eea:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
     eee:	e0 91 b9 04 	lds	r30, 0x04B9
     ef2:	f0 91 ba 04 	lds	r31, 0x04BA
     ef6:	c0 80       	ld	r12, Z
     ef8:	d3 80       	ldd	r13, Z+3	; 0x03
     efa:	e5 80       	ldd	r14, Z+5	; 0x05
     efc:	f6 80       	ldd	r15, Z+6	; 0x06
     efe:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
     f00:	0e 94 d6 04 	call	0x9ac	; 0x9ac <rf_rx_packet_nonblock>
	if (err < 1) {
     f04:	18 16       	cp	r1, r24
     f06:	1c f0       	brlt	.+6      	; 0xf0e <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
     f08:	83 eb       	ldi	r24, 0xB3	; 179
     f0a:	92 e0       	ldi	r25, 0x02	; 2
     f0c:	06 c0       	rjmp	.+12     	; 0xf1a <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
     f0e:	f7 01       	movw	r30, r14
     f10:	10 81       	ld	r17, Z
	if (ttl == 0) {
     f12:	11 11       	cpse	r17, r1
     f14:	07 c0       	rjmp	.+14     	; 0xf24 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
     f16:	82 ed       	ldi	r24, 0xD2	; 210
     f18:	92 e0       	ldi	r25, 0x02	; 2
     f1a:	0e 94 32 26 	call	0x4c64	; 0x4c64 <puts>
#endif
		nrk_int_enable();
     f1e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <nrk_int_enable>
		return;
     f22:	31 c0       	rjmp	.+98     	; 0xf86 <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
     f24:	15 30       	cpi	r17, 0x05	; 5
     f26:	21 f4       	brne	.+8      	; 0xf30 <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
     f28:	8a e0       	ldi	r24, 0x0A	; 10
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 2c 26 	call	0x4c58	; 0x4c58 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
     f30:	c7 01       	movw	r24, r14
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	9f 93       	push	r25
     f36:	8f 93       	push	r24
     f38:	80 2f       	mov	r24, r16
     f3a:	99 27       	eor	r25, r25
     f3c:	87 fd       	sbrc	r24, 7
     f3e:	90 95       	com	r25
     f40:	9f 93       	push	r25
     f42:	0f 93       	push	r16
     f44:	1f 92       	push	r1
     f46:	1f 93       	push	r17
     f48:	1f 92       	push	r1
     f4a:	cf 92       	push	r12
     f4c:	84 ef       	ldi	r24, 0xF4	; 244
     f4e:	92 e0       	ldi	r25, 0x02	; 2
     f50:	9f 93       	push	r25
     f52:	8f 93       	push	r24
     f54:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
     f58:	fd 82       	std	Y+5, r15	; 0x05
     f5a:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
     f5c:	11 50       	subi	r17, 0x01	; 1
     f5e:	f7 01       	movw	r30, r14
     f60:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
     f62:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
     f64:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
     f66:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
     f68:	8f ef       	ldi	r24, 0xFF	; 255
     f6a:	9f ef       	ldi	r25, 0xFF	; 255
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
     f70:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
     f74:	ce 01       	movw	r24, r28
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	0e 94 68 06 	call	0xcd0	; 0xcd0 <rf_tx_packet>
#endif
	return;
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
}
     f86:	27 96       	adiw	r28, 0x07	; 7
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	de bf       	out	0x3e, r29	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	cd bf       	out	0x3d, r28	; 61
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	ff 90       	pop	r15
     f9c:	ef 90       	pop	r14
     f9e:	df 90       	pop	r13
     fa0:	cf 90       	pop	r12
     fa2:	08 95       	ret

00000fa4 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
     fa4:	1f 92       	push	r1
     fa6:	0f 92       	push	r0
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	0f 92       	push	r0
     fac:	11 24       	eor	r1, r1
     fae:	0b b6       	in	r0, 0x3b	; 59
     fb0:	0f 92       	push	r0
     fb2:	2f 93       	push	r18
     fb4:	3f 93       	push	r19
     fb6:	4f 93       	push	r20
     fb8:	5f 93       	push	r21
     fba:	6f 93       	push	r22
     fbc:	7f 93       	push	r23
     fbe:	8f 93       	push	r24
     fc0:	9f 93       	push	r25
     fc2:	af 93       	push	r26
     fc4:	bf 93       	push	r27
     fc6:	ef 93       	push	r30
     fc8:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	90 91 7b 01 	lds	r25, 0x017B
     fd0:	89 17       	cp	r24, r25
     fd2:	10 f4       	brcc	.+4      	; 0xfd8 <__vector_60+0x34>
     fd4:	8f 5f       	subi	r24, 0xFF	; 255
     fd6:	fa cf       	rjmp	.-12     	; 0xfcc <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

   if((PHY_RSSI >> RX_CRC_VALID) & 0x1){
     fd8:	80 91 46 01 	lds	r24, 0x0146
     fdc:	87 ff       	sbrs	r24, 7
     fde:	04 c0       	rjmp	.+8      	; 0xfe8 <__vector_60+0x44>
      rx_ready = 1;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	80 93 ea 04 	sts	0x04EA, r24
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <__vector_60+0x4c>
   } else {
      printf("RX end failed checksum!\r\n");
     fe8:	8d e1       	ldi	r24, 0x1D	; 29
     fea:	93 e0       	ldi	r25, 0x03	; 3
     fec:	0e 94 32 26 	call	0x4c64	; 0x4c64 <puts>
   }
   IRQ_STATUS = (1 << RX_END);
     ff0:	88 e0       	ldi	r24, 0x08	; 8
     ff2:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
     ff6:	80 91 46 01 	lds	r24, 0x0146
     ffa:	87 ff       	sbrs	r24, 7
     ffc:	05 c0       	rjmp	.+10     	; 0x1008 <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
     ffe:	80 91 b6 04 	lds	r24, 0x04B6
    1002:	81 11       	cpse	r24, r1
    1004:	0e 94 65 07 	call	0xeca	; 0xeca <rf_glossy_interrupt>
	}

	if(rx_end_func)
    1008:	e0 91 7b 03 	lds	r30, 0x037B
    100c:	f0 91 7c 03 	lds	r31, 0x037C
    1010:	30 97       	sbiw	r30, 0x00	; 0
    1012:	09 f0       	breq	.+2      	; 0x1016 <__vector_60+0x72>
		rx_end_func();
    1014:	09 95       	icall

	return;
}
    1016:	ff 91       	pop	r31
    1018:	ef 91       	pop	r30
    101a:	bf 91       	pop	r27
    101c:	af 91       	pop	r26
    101e:	9f 91       	pop	r25
    1020:	8f 91       	pop	r24
    1022:	7f 91       	pop	r23
    1024:	6f 91       	pop	r22
    1026:	5f 91       	pop	r21
    1028:	4f 91       	pop	r20
    102a:	3f 91       	pop	r19
    102c:	2f 91       	pop	r18
    102e:	0f 90       	pop	r0
    1030:	0b be       	out	0x3b, r0	; 59
    1032:	0f 90       	pop	r0
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	0f 90       	pop	r0
    1038:	1f 90       	pop	r1
    103a:	18 95       	reti

0000103c <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    103c:	a3 ec       	ldi	r26, 0xC3	; 195
    103e:	b4 e0       	ldi	r27, 0x04	; 4
    1040:	fc 01       	movw	r30, r24
    1042:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    1044:	20 81       	ld	r18, Z
    1046:	2d 93       	st	X+, r18
      AES_KEY = key[i];
    1048:	21 91       	ld	r18, Z+
    104a:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    104e:	e8 17       	cp	r30, r24
    1050:	f9 07       	cpc	r31, r25
    1052:	c1 f7       	brne	.-16     	; 0x1044 <aes_setkey+0x8>
    1054:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    1056:	10 92 3e 01 	sts	0x013E, r1
    105a:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    105c:	e1 f7       	brne	.-8      	; 0x1056 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    105e:	80 e8       	ldi	r24, 0x80	; 128
    1060:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    1064:	80 91 3d 01 	lds	r24, 0x013D
    1068:	80 ff       	sbrs	r24, 0
    106a:	fc cf       	rjmp	.-8      	; 0x1064 <aes_setkey+0x28>
    106c:	e4 ed       	ldi	r30, 0xD4	; 212
    106e:	f4 e0       	ldi	r31, 0x04	; 4
    1070:	80 e1       	ldi	r24, 0x10	; 16
    1072:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    1074:	90 91 3f 01 	lds	r25, 0x013F
    1078:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    107a:	8e 13       	cpse	r24, r30
    107c:	fb cf       	rjmp	.-10     	; 0x1074 <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
    107e:	08 95       	ret

00001080 <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
    1086:	66 23       	and	r22, r22
    1088:	09 f4       	brne	.+2      	; 0x108c <aes_encrypt+0xc>
    108a:	45 c0       	rjmp	.+138    	; 0x1116 <aes_encrypt+0x96>
    108c:	86 2f       	mov	r24, r22
    108e:	8f 70       	andi	r24, 0x0F	; 15
    1090:	09 f0       	breq	.+2      	; 0x1094 <aes_encrypt+0x14>
    1092:	41 c0       	rjmp	.+130    	; 0x1116 <aes_encrypt+0x96>
    1094:	e3 ec       	ldi	r30, 0xC3	; 195
    1096:	f4 e0       	ldi	r31, 0x04	; 4
    1098:	90 e1       	ldi	r25, 0x10	; 16
    109a:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    109c:	21 91       	ld	r18, Z+
    109e:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    10a2:	9e 13       	cpse	r25, r30
    10a4:	fb cf       	rjmp	.-10     	; 0x109c <aes_encrypt+0x1c>
    10a6:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    10a8:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    10aa:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    10ac:	40 e1       	ldi	r20, 0x10	; 16
    10ae:	94 9f       	mul	r25, r20
    10b0:	90 01       	movw	r18, r0
    10b2:	11 24       	eor	r1, r1
    10b4:	26 17       	cp	r18, r22
    10b6:	37 07       	cpc	r19, r23
    10b8:	7c f5       	brge	.+94     	; 0x1118 <aes_encrypt+0x98>
      if(i==0)
    10ba:	91 11       	cpse	r25, r1
    10bc:	03 c0       	rjmp	.+6      	; 0x10c4 <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    10be:	10 92 3c 01 	sts	0x013C, r1
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    10c4:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    10c8:	40 e0       	ldi	r20, 0x00	; 0
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	2a 0f       	add	r18, r26
    10ce:	3b 1f       	adc	r19, r27
    10d0:	e9 01       	movw	r28, r18
    10d2:	c4 0f       	add	r28, r20
    10d4:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    10d6:	f8 81       	ld	r31, Y
    10d8:	f0 93 3e 01 	sts	0x013E, r31
    10dc:	4f 5f       	subi	r20, 0xFF	; 255
    10de:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    10e0:	40 31       	cpi	r20, 0x10	; 16
    10e2:	51 05       	cpc	r21, r1
    10e4:	a9 f7       	brne	.-22     	; 0x10d0 <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    10e6:	40 91 3c 01 	lds	r20, 0x013C
    10ea:	40 68       	ori	r20, 0x80	; 128
    10ec:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
    10f0:	40 91 3d 01 	lds	r20, 0x013D
    10f4:	40 ff       	sbrs	r20, 0
    10f6:	fc cf       	rjmp	.-8      	; 0x10f0 <aes_encrypt+0x70>
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    10fc:	f0 91 3e 01 	lds	r31, 0x013E
    1100:	e9 01       	movw	r28, r18
    1102:	c4 0f       	add	r28, r20
    1104:	d5 1f       	adc	r29, r21
    1106:	f8 83       	st	Y, r31
    1108:	4f 5f       	subi	r20, 0xFF	; 255
    110a:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    110c:	40 31       	cpi	r20, 0x10	; 16
    110e:	51 05       	cpc	r21, r1
    1110:	a9 f7       	brne	.-22     	; 0x10fc <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1112:	9f 5f       	subi	r25, 0xFF	; 255
    1114:	cb cf       	rjmp	.-106    	; 0x10ac <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    1116:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	08 95       	ret

0000111e <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    1128:	61 30       	cpi	r22, 0x01	; 1
    112a:	09 f4       	brne	.+2      	; 0x112e <aes_decrypt+0x10>
    112c:	58 c0       	rjmp	.+176    	; 0x11de <aes_decrypt+0xc0>
    112e:	86 2f       	mov	r24, r22
    1130:	8f 70       	andi	r24, 0x0F	; 15
    1132:	09 f0       	breq	.+2      	; 0x1136 <aes_decrypt+0x18>
    1134:	54 c0       	rjmp	.+168    	; 0x11de <aes_decrypt+0xc0>
    1136:	e4 ed       	ldi	r30, 0xD4	; 212
    1138:	f4 e0       	ldi	r31, 0x04	; 4
    113a:	90 e1       	ldi	r25, 0x10	; 16
    113c:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    113e:	21 91       	ld	r18, Z+
    1140:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1144:	9e 13       	cpse	r25, r30
    1146:	fb cf       	rjmp	.-10     	; 0x113e <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1148:	62 95       	swap	r22
    114a:	6f 70       	andi	r22, 0x0F	; 15
    114c:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    114e:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1150:	6f 3f       	cpi	r22, 0xFF	; 255
    1152:	09 f4       	brne	.+2      	; 0x1156 <aes_decrypt+0x38>
    1154:	45 c0       	rjmp	.+138    	; 0x11e0 <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1156:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    115a:	46 2f       	mov	r20, r22
    115c:	55 27       	eor	r21, r21
    115e:	47 fd       	sbrc	r20, 7
    1160:	50 95       	com	r21
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	ed 01       	movw	r28, r26
    1168:	90 e1       	ldi	r25, 0x10	; 16
    116a:	69 02       	muls	r22, r25
    116c:	c0 0d       	add	r28, r0
    116e:	d1 1d       	adc	r29, r1
    1170:	11 24       	eor	r1, r1
    1172:	fe 01       	movw	r30, r28
    1174:	e2 0f       	add	r30, r18
    1176:	f3 1f       	adc	r31, r19
    1178:	90 81       	ld	r25, Z
    117a:	90 93 3e 01 	sts	0x013E, r25
    117e:	2f 5f       	subi	r18, 0xFF	; 255
    1180:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    1182:	20 31       	cpi	r18, 0x10	; 16
    1184:	31 05       	cpc	r19, r1
    1186:	a9 f7       	brne	.-22     	; 0x1172 <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1188:	90 91 3c 01 	lds	r25, 0x013C
    118c:	90 68       	ori	r25, 0x80	; 128
    118e:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
    1192:	90 91 3d 01 	lds	r25, 0x013D
    1196:	90 ff       	sbrs	r25, 0
    1198:	fc cf       	rjmp	.-8      	; 0x1192 <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    119a:	41 50       	subi	r20, 0x01	; 1
    119c:	51 09       	sbc	r21, r1
    119e:	94 e0       	ldi	r25, 0x04	; 4
    11a0:	44 0f       	add	r20, r20
    11a2:	55 1f       	adc	r21, r21
    11a4:	9a 95       	dec	r25
    11a6:	e1 f7       	brne	.-8      	; 0x11a0 <aes_decrypt+0x82>
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    11ac:	90 91 3e 01 	lds	r25, 0x013E
    11b0:	8e 01       	movw	r16, r28
    11b2:	02 0f       	add	r16, r18
    11b4:	13 1f       	adc	r17, r19
    11b6:	f8 01       	movw	r30, r16
    11b8:	90 83       	st	Z, r25
         if(i!=0)
    11ba:	66 23       	and	r22, r22
    11bc:	49 f0       	breq	.+18     	; 0x11d0 <aes_decrypt+0xb2>
    11be:	f9 01       	movw	r30, r18
    11c0:	e4 0f       	add	r30, r20
    11c2:	f5 1f       	adc	r31, r21
    11c4:	ea 0f       	add	r30, r26
    11c6:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
    11c8:	e0 81       	ld	r30, Z
    11ca:	9e 27       	eor	r25, r30
    11cc:	f8 01       	movw	r30, r16
    11ce:	90 83       	st	Z, r25
    11d0:	2f 5f       	subi	r18, 0xFF	; 255
    11d2:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    11d4:	20 31       	cpi	r18, 0x10	; 16
    11d6:	31 05       	cpc	r19, r1
    11d8:	49 f7       	brne	.-46     	; 0x11ac <aes_decrypt+0x8e>
    11da:	61 50       	subi	r22, 0x01	; 1
    11dc:	b9 cf       	rjmp	.-142    	; 0x1150 <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    11de:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	08 95       	ret

000011ea <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
    11ea:	80 91 c0 00 	lds	r24, 0x00C0
    11ee:	87 ff       	sbrs	r24, 7
    11f0:	fc cf       	rjmp	.-8      	; 0x11ea <getc0>
    11f2:	80 91 c0 00 	lds	r24, 0x00C0
    11f6:	8f 77       	andi	r24, 0x7F	; 127
    11f8:	80 93 c0 00 	sts	0x00C0, r24
    11fc:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
    1200:	08 95       	ret

00001202 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    1202:	90 91 c0 00 	lds	r25, 0x00C0
    1206:	95 ff       	sbrs	r25, 5
    1208:	fc cf       	rjmp	.-8      	; 0x1202 <putc0>
    120a:	90 91 c0 00 	lds	r25, 0x00C0
    120e:	9f 7d       	andi	r25, 0xDF	; 223
    1210:	90 93 c0 00 	sts	0x00C0, r25
    1214:	80 93 c6 00 	sts	0x00C6, r24
    1218:	08 95       	ret

0000121a <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	08 95       	ret

0000121e <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	19 f4       	brne	.+6      	; 0x1228 <nrk_uart_data_ready+0xa>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    1222:	80 91 c8 00 	lds	r24, 0x00C8
    1226:	04 c0       	rjmp	.+8      	; 0x1230 <nrk_uart_data_ready+0x12>
        }
if(uart_num==0)
    1228:	81 11       	cpse	r24, r1
    122a:	06 c0       	rjmp	.+12     	; 0x1238 <nrk_uart_data_ready+0x1a>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    122c:	80 91 c0 00 	lds	r24, 0x00C0
    1230:	88 1f       	adc	r24, r24
    1232:	88 27       	eor	r24, r24
    1234:	88 1f       	adc	r24, r24
    1236:	08 95       	ret
        }
return 0;
    1238:	80 e0       	ldi	r24, 0x00	; 0
}
    123a:	08 95       	ret

0000123c <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    1240:	fc 01       	movw	r30, r24
    1242:	24 91       	lpm	r18, Z
    1244:	ec 01       	movw	r28, r24
    1246:	21 96       	adiw	r28, 0x01	; 1
    1248:	22 23       	and	r18, r18
    124a:	51 f0       	breq	.+20     	; 0x1260 <nrk_kprintf+0x24>
        putchar(c);
    124c:	60 91 7c 05 	lds	r22, 0x057C
    1250:	70 91 7d 05 	lds	r23, 0x057D
    1254:	82 2f       	mov	r24, r18
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <fputc>
    125c:	ce 01       	movw	r24, r28
    125e:	f0 cf       	rjmp	.-32     	; 0x1240 <nrk_kprintf+0x4>
}
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	08 95       	ret

00001266 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    1266:	86 e0       	ldi	r24, 0x06	; 6
    1268:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    126a:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    126c:	88 ef       	ldi	r24, 0xF8	; 248
    126e:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    1270:	80 ef       	ldi	r24, 0xF0	; 240
    1272:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	8d b9       	out	0x0d, r24	; 13
    1278:	08 95       	ret

0000127a <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    127a:	0c 94 33 09 	jmp	0x1266	; 0x1266 <PORT_INIT>

0000127e <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    127e:	8f 3f       	cpi	r24, 0xFF	; 255
    1280:	09 f4       	brne	.+2      	; 0x1284 <nrk_gpio_set+0x6>
    1282:	6c c0       	rjmp	.+216    	; 0x135c <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    1284:	e8 2f       	mov	r30, r24
    1286:	e7 70       	andi	r30, 0x07	; 7
    1288:	4e 2f       	mov	r20, r30
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	47 30       	cpi	r20, 0x07	; 7
    128e:	51 05       	cpc	r21, r1
    1290:	08 f0       	brcs	.+2      	; 0x1294 <nrk_gpio_set+0x16>
    1292:	64 c0       	rjmp	.+200    	; 0x135c <nrk_gpio_set+0xde>
    1294:	fa 01       	movw	r30, r20
    1296:	e0 57       	subi	r30, 0x70	; 112
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	86 95       	lsr	r24
    129c:	86 95       	lsr	r24
    129e:	86 95       	lsr	r24
    12a0:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    12a4:	42 b1       	in	r20, 0x02	; 2
    12a6:	21 e0       	ldi	r18, 0x01	; 1
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	b9 01       	movw	r22, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <nrk_gpio_set+0x34>
    12ae:	66 0f       	add	r22, r22
    12b0:	77 1f       	adc	r23, r23
    12b2:	8a 95       	dec	r24
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <nrk_gpio_set+0x30>
    12b6:	cb 01       	movw	r24, r22
    12b8:	84 2b       	or	r24, r20
    12ba:	82 b9       	out	0x02, r24	; 2
    12bc:	4d c0       	rjmp	.+154    	; 0x1358 <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    12be:	45 b1       	in	r20, 0x05	; 5
    12c0:	21 e0       	ldi	r18, 0x01	; 1
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	b9 01       	movw	r22, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <nrk_gpio_set+0x4e>
    12c8:	66 0f       	add	r22, r22
    12ca:	77 1f       	adc	r23, r23
    12cc:	8a 95       	dec	r24
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <nrk_gpio_set+0x4a>
    12d0:	cb 01       	movw	r24, r22
    12d2:	84 2b       	or	r24, r20
    12d4:	85 b9       	out	0x05, r24	; 5
    12d6:	40 c0       	rjmp	.+128    	; 0x1358 <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    12d8:	48 b1       	in	r20, 0x08	; 8
    12da:	21 e0       	ldi	r18, 0x01	; 1
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	b9 01       	movw	r22, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <nrk_gpio_set+0x68>
    12e2:	66 0f       	add	r22, r22
    12e4:	77 1f       	adc	r23, r23
    12e6:	8a 95       	dec	r24
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <nrk_gpio_set+0x64>
    12ea:	cb 01       	movw	r24, r22
    12ec:	84 2b       	or	r24, r20
    12ee:	88 b9       	out	0x08, r24	; 8
    12f0:	33 c0       	rjmp	.+102    	; 0x1358 <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    12f2:	4b b1       	in	r20, 0x0b	; 11
    12f4:	21 e0       	ldi	r18, 0x01	; 1
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	b9 01       	movw	r22, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <nrk_gpio_set+0x82>
    12fc:	66 0f       	add	r22, r22
    12fe:	77 1f       	adc	r23, r23
    1300:	8a 95       	dec	r24
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <nrk_gpio_set+0x7e>
    1304:	cb 01       	movw	r24, r22
    1306:	84 2b       	or	r24, r20
    1308:	8b b9       	out	0x0b, r24	; 11
    130a:	26 c0       	rjmp	.+76     	; 0x1358 <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    130c:	4e b1       	in	r20, 0x0e	; 14
    130e:	21 e0       	ldi	r18, 0x01	; 1
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	b9 01       	movw	r22, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <nrk_gpio_set+0x9c>
    1316:	66 0f       	add	r22, r22
    1318:	77 1f       	adc	r23, r23
    131a:	8a 95       	dec	r24
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <nrk_gpio_set+0x98>
    131e:	cb 01       	movw	r24, r22
    1320:	84 2b       	or	r24, r20
    1322:	8e b9       	out	0x0e, r24	; 14
    1324:	19 c0       	rjmp	.+50     	; 0x1358 <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1326:	41 b3       	in	r20, 0x11	; 17
    1328:	21 e0       	ldi	r18, 0x01	; 1
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	b9 01       	movw	r22, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <nrk_gpio_set+0xb6>
    1330:	66 0f       	add	r22, r22
    1332:	77 1f       	adc	r23, r23
    1334:	8a 95       	dec	r24
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <nrk_gpio_set+0xb2>
    1338:	cb 01       	movw	r24, r22
    133a:	84 2b       	or	r24, r20
    133c:	81 bb       	out	0x11, r24	; 17
    133e:	0c c0       	rjmp	.+24     	; 0x1358 <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1340:	44 b3       	in	r20, 0x14	; 20
    1342:	21 e0       	ldi	r18, 0x01	; 1
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	b9 01       	movw	r22, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <nrk_gpio_set+0xd0>
    134a:	66 0f       	add	r22, r22
    134c:	77 1f       	adc	r23, r23
    134e:	8a 95       	dec	r24
    1350:	e2 f7       	brpl	.-8      	; 0x134a <nrk_gpio_set+0xcc>
    1352:	cb 01       	movw	r24, r22
    1354:	84 2b       	or	r24, r20
    1356:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    1358:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    135a:	08 95       	ret
                default: return -1;
    135c:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    135e:	08 95       	ret

00001360 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1360:	8f 3f       	cpi	r24, 0xFF	; 255
    1362:	09 f4       	brne	.+2      	; 0x1366 <nrk_gpio_clr+0x6>
    1364:	65 c0       	rjmp	.+202    	; 0x1430 <nrk_gpio_clr+0xd0>
        switch (pin & 0x07) {
    1366:	e8 2f       	mov	r30, r24
    1368:	e7 70       	andi	r30, 0x07	; 7
    136a:	4e 2f       	mov	r20, r30
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	47 30       	cpi	r20, 0x07	; 7
    1370:	51 05       	cpc	r21, r1
    1372:	08 f0       	brcs	.+2      	; 0x1376 <nrk_gpio_clr+0x16>
    1374:	5d c0       	rjmp	.+186    	; 0x1430 <nrk_gpio_clr+0xd0>
    1376:	fa 01       	movw	r30, r20
    1378:	e9 56       	subi	r30, 0x69	; 105
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	86 95       	lsr	r24
    137e:	86 95       	lsr	r24
    1380:	86 95       	lsr	r24
    1382:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1386:	42 b1       	in	r20, 0x02	; 2
    1388:	21 e0       	ldi	r18, 0x01	; 1
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	b9 01       	movw	r22, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <nrk_gpio_clr+0x34>
    1390:	66 0f       	add	r22, r22
    1392:	77 1f       	adc	r23, r23
    1394:	8a 95       	dec	r24
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <nrk_gpio_clr+0x30>
    1398:	cb 01       	movw	r24, r22
    139a:	80 95       	com	r24
    139c:	84 23       	and	r24, r20
    139e:	82 b9       	out	0x02, r24	; 2
    13a0:	45 c0       	rjmp	.+138    	; 0x142c <nrk_gpio_clr+0xcc>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    13a2:	45 b1       	in	r20, 0x05	; 5
    13a4:	21 e0       	ldi	r18, 0x01	; 1
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	b9 01       	movw	r22, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <nrk_gpio_clr+0x50>
    13ac:	66 0f       	add	r22, r22
    13ae:	77 1f       	adc	r23, r23
    13b0:	8a 95       	dec	r24
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <nrk_gpio_clr+0x4c>
    13b4:	cb 01       	movw	r24, r22
    13b6:	80 95       	com	r24
    13b8:	84 23       	and	r24, r20
    13ba:	85 b9       	out	0x05, r24	; 5
    13bc:	37 c0       	rjmp	.+110    	; 0x142c <nrk_gpio_clr+0xcc>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    13be:	48 b1       	in	r20, 0x08	; 8
    13c0:	21 e0       	ldi	r18, 0x01	; 1
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	b9 01       	movw	r22, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <nrk_gpio_clr+0x6c>
    13c8:	66 0f       	add	r22, r22
    13ca:	77 1f       	adc	r23, r23
    13cc:	8a 95       	dec	r24
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <nrk_gpio_clr+0x68>
    13d0:	cb 01       	movw	r24, r22
    13d2:	80 95       	com	r24
    13d4:	84 23       	and	r24, r20
    13d6:	88 b9       	out	0x08, r24	; 8
    13d8:	29 c0       	rjmp	.+82     	; 0x142c <nrk_gpio_clr+0xcc>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    13da:	4b b1       	in	r20, 0x0b	; 11
    13dc:	21 e0       	ldi	r18, 0x01	; 1
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	b9 01       	movw	r22, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <nrk_gpio_clr+0x88>
    13e4:	66 0f       	add	r22, r22
    13e6:	77 1f       	adc	r23, r23
    13e8:	8a 95       	dec	r24
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <nrk_gpio_clr+0x84>
    13ec:	cb 01       	movw	r24, r22
    13ee:	80 95       	com	r24
    13f0:	84 23       	and	r24, r20
    13f2:	8b b9       	out	0x0b, r24	; 11
    13f4:	1b c0       	rjmp	.+54     	; 0x142c <nrk_gpio_clr+0xcc>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    13f6:	4e b1       	in	r20, 0x0e	; 14
    13f8:	21 e0       	ldi	r18, 0x01	; 1
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	b9 01       	movw	r22, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <nrk_gpio_clr+0xa4>
    1400:	66 0f       	add	r22, r22
    1402:	77 1f       	adc	r23, r23
    1404:	8a 95       	dec	r24
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <nrk_gpio_clr+0xa0>
    1408:	cb 01       	movw	r24, r22
    140a:	80 95       	com	r24
    140c:	84 23       	and	r24, r20
    140e:	8e b9       	out	0x0e, r24	; 14
    1410:	0d c0       	rjmp	.+26     	; 0x142c <nrk_gpio_clr+0xcc>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1412:	41 b3       	in	r20, 0x11	; 17
    1414:	21 e0       	ldi	r18, 0x01	; 1
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	b9 01       	movw	r22, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <nrk_gpio_clr+0xc0>
    141c:	66 0f       	add	r22, r22
    141e:	77 1f       	adc	r23, r23
    1420:	8a 95       	dec	r24
    1422:	e2 f7       	brpl	.-8      	; 0x141c <nrk_gpio_clr+0xbc>
    1424:	cb 01       	movw	r24, r22
    1426:	80 95       	com	r24
    1428:	84 23       	and	r24, r20
    142a:	81 bb       	out	0x11, r24	; 17
                default: return -1;
        }
        return 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    142e:	08 95       	ret
                default: return -1;
    1430:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1432:	08 95       	ret

00001434 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1434:	8f 3f       	cpi	r24, 0xFF	; 255
    1436:	31 f1       	breq	.+76     	; 0x1484 <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    1438:	e8 2f       	mov	r30, r24
    143a:	e7 70       	andi	r30, 0x07	; 7
    143c:	4e 2f       	mov	r20, r30
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	47 30       	cpi	r20, 0x07	; 7
    1442:	51 05       	cpc	r21, r1
    1444:	f8 f4       	brcc	.+62     	; 0x1484 <nrk_gpio_get+0x50>
    1446:	fa 01       	movw	r30, r20
    1448:	e2 56       	subi	r30, 0x62	; 98
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	28 2f       	mov	r18, r24
    144e:	26 95       	lsr	r18
    1450:	26 95       	lsr	r18
    1452:	26 95       	lsr	r18
    1454:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    1458:	90 b1       	in	r25, 0x00	; 0
    145a:	0b c0       	rjmp	.+22     	; 0x1472 <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    145c:	93 b1       	in	r25, 0x03	; 3
    145e:	09 c0       	rjmp	.+18     	; 0x1472 <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    1460:	96 b1       	in	r25, 0x06	; 6
    1462:	07 c0       	rjmp	.+14     	; 0x1472 <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    1464:	99 b1       	in	r25, 0x09	; 9
    1466:	05 c0       	rjmp	.+10     	; 0x1472 <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    1468:	9c b1       	in	r25, 0x0c	; 12
    146a:	03 c0       	rjmp	.+6      	; 0x1472 <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    146c:	9f b1       	in	r25, 0x0f	; 15
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    1470:	92 b3       	in	r25, 0x12	; 18
    1472:	89 2f       	mov	r24, r25
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 c0       	rjmp	.+4      	; 0x147c <nrk_gpio_get+0x48>
    1478:	95 95       	asr	r25
    147a:	87 95       	ror	r24
    147c:	2a 95       	dec	r18
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <nrk_gpio_get+0x44>
    1480:	81 70       	andi	r24, 0x01	; 1
    1482:	08 95       	ret
                default: return -1;
    1484:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1486:	08 95       	ret

00001488 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1488:	8f 3f       	cpi	r24, 0xFF	; 255
    148a:	09 f4       	brne	.+2      	; 0x148e <nrk_gpio_toggle+0x6>
    148c:	06 c1       	rjmp	.+524    	; 0x169a <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    148e:	e8 2f       	mov	r30, r24
    1490:	e7 70       	andi	r30, 0x07	; 7
    1492:	4e 2f       	mov	r20, r30
    1494:	50 e0       	ldi	r21, 0x00	; 0
    1496:	47 30       	cpi	r20, 0x07	; 7
    1498:	51 05       	cpc	r21, r1
    149a:	08 f0       	brcs	.+2      	; 0x149e <nrk_gpio_toggle+0x16>
    149c:	fe c0       	rjmp	.+508    	; 0x169a <nrk_gpio_toggle+0x212>
    149e:	fa 01       	movw	r30, r20
    14a0:	eb 55       	subi	r30, 0x5B	; 91
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	86 95       	lsr	r24
    14a6:	86 95       	lsr	r24
    14a8:	86 95       	lsr	r24
    14aa:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    14ae:	20 b1       	in	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	08 2e       	mov	r0, r24
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <nrk_gpio_toggle+0x32>
    14b6:	35 95       	asr	r19
    14b8:	27 95       	ror	r18
    14ba:	0a 94       	dec	r0
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    14be:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    14c0:	20 fd       	sbrc	r18, 0
    14c2:	0b c0       	rjmp	.+22     	; 0x14da <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    14c4:	21 e0       	ldi	r18, 0x01	; 1
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	b9 01       	movw	r22, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <nrk_gpio_toggle+0x48>
    14cc:	66 0f       	add	r22, r22
    14ce:	77 1f       	adc	r23, r23
    14d0:	8a 95       	dec	r24
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <nrk_gpio_toggle+0x44>
    14d4:	cb 01       	movw	r24, r22
    14d6:	84 2b       	or	r24, r20
    14d8:	0b c0       	rjmp	.+22     	; 0x14f0 <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    14da:	21 e0       	ldi	r18, 0x01	; 1
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	b9 01       	movw	r22, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <nrk_gpio_toggle+0x5e>
    14e2:	66 0f       	add	r22, r22
    14e4:	77 1f       	adc	r23, r23
    14e6:	8a 95       	dec	r24
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <nrk_gpio_toggle+0x5a>
    14ea:	cb 01       	movw	r24, r22
    14ec:	80 95       	com	r24
    14ee:	84 23       	and	r24, r20
    14f0:	82 b9       	out	0x02, r24	; 2
    14f2:	16 c0       	rjmp	.+44     	; 0x1520 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    14f4:	23 b1       	in	r18, 0x03	; 3
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	08 2e       	mov	r0, r24
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <nrk_gpio_toggle+0x78>
    14fc:	35 95       	asr	r19
    14fe:	27 95       	ror	r18
    1500:	0a 94       	dec	r0
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1504:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1506:	20 fd       	sbrc	r18, 0
    1508:	0d c0       	rjmp	.+26     	; 0x1524 <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    150a:	21 e0       	ldi	r18, 0x01	; 1
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	b9 01       	movw	r22, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <nrk_gpio_toggle+0x8e>
    1512:	66 0f       	add	r22, r22
    1514:	77 1f       	adc	r23, r23
    1516:	8a 95       	dec	r24
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <nrk_gpio_toggle+0x8a>
    151a:	cb 01       	movw	r24, r22
    151c:	84 2b       	or	r24, r20
    151e:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    1524:	21 e0       	ldi	r18, 0x01	; 1
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	b9 01       	movw	r22, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <nrk_gpio_toggle+0xa8>
    152c:	66 0f       	add	r22, r22
    152e:	77 1f       	adc	r23, r23
    1530:	8a 95       	dec	r24
    1532:	e2 f7       	brpl	.-8      	; 0x152c <nrk_gpio_toggle+0xa4>
    1534:	cb 01       	movw	r24, r22
    1536:	80 95       	com	r24
    1538:	84 23       	and	r24, r20
    153a:	f1 cf       	rjmp	.-30     	; 0x151e <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    153c:	26 b1       	in	r18, 0x06	; 6
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	08 2e       	mov	r0, r24
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <nrk_gpio_toggle+0xc0>
    1544:	35 95       	asr	r19
    1546:	27 95       	ror	r18
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    154c:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    154e:	20 fd       	sbrc	r18, 0
    1550:	0b c0       	rjmp	.+22     	; 0x1568 <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1552:	21 e0       	ldi	r18, 0x01	; 1
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	b9 01       	movw	r22, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <nrk_gpio_toggle+0xd6>
    155a:	66 0f       	add	r22, r22
    155c:	77 1f       	adc	r23, r23
    155e:	8a 95       	dec	r24
    1560:	e2 f7       	brpl	.-8      	; 0x155a <nrk_gpio_toggle+0xd2>
    1562:	cb 01       	movw	r24, r22
    1564:	84 2b       	or	r24, r20
    1566:	0b c0       	rjmp	.+22     	; 0x157e <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    1568:	21 e0       	ldi	r18, 0x01	; 1
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	b9 01       	movw	r22, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <nrk_gpio_toggle+0xec>
    1570:	66 0f       	add	r22, r22
    1572:	77 1f       	adc	r23, r23
    1574:	8a 95       	dec	r24
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <nrk_gpio_toggle+0xe8>
    1578:	cb 01       	movw	r24, r22
    157a:	80 95       	com	r24
    157c:	84 23       	and	r24, r20
    157e:	88 b9       	out	0x08, r24	; 8
    1580:	cf cf       	rjmp	.-98     	; 0x1520 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    1582:	29 b1       	in	r18, 0x09	; 9
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	08 2e       	mov	r0, r24
    1588:	02 c0       	rjmp	.+4      	; 0x158e <nrk_gpio_toggle+0x106>
    158a:	35 95       	asr	r19
    158c:	27 95       	ror	r18
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    1592:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    1594:	20 fd       	sbrc	r18, 0
    1596:	0b c0       	rjmp	.+22     	; 0x15ae <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    1598:	21 e0       	ldi	r18, 0x01	; 1
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	b9 01       	movw	r22, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <nrk_gpio_toggle+0x11c>
    15a0:	66 0f       	add	r22, r22
    15a2:	77 1f       	adc	r23, r23
    15a4:	8a 95       	dec	r24
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <nrk_gpio_toggle+0x118>
    15a8:	cb 01       	movw	r24, r22
    15aa:	84 2b       	or	r24, r20
    15ac:	0b c0       	rjmp	.+22     	; 0x15c4 <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    15ae:	21 e0       	ldi	r18, 0x01	; 1
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	b9 01       	movw	r22, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <nrk_gpio_toggle+0x132>
    15b6:	66 0f       	add	r22, r22
    15b8:	77 1f       	adc	r23, r23
    15ba:	8a 95       	dec	r24
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <nrk_gpio_toggle+0x12e>
    15be:	cb 01       	movw	r24, r22
    15c0:	80 95       	com	r24
    15c2:	84 23       	and	r24, r20
    15c4:	8b b9       	out	0x0b, r24	; 11
    15c6:	ac cf       	rjmp	.-168    	; 0x1520 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    15c8:	2c b1       	in	r18, 0x0c	; 12
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	08 2e       	mov	r0, r24
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <nrk_gpio_toggle+0x14c>
    15d0:	35 95       	asr	r19
    15d2:	27 95       	ror	r18
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    15d8:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    15da:	20 fd       	sbrc	r18, 0
    15dc:	0b c0       	rjmp	.+22     	; 0x15f4 <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    15de:	21 e0       	ldi	r18, 0x01	; 1
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	b9 01       	movw	r22, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <nrk_gpio_toggle+0x162>
    15e6:	66 0f       	add	r22, r22
    15e8:	77 1f       	adc	r23, r23
    15ea:	8a 95       	dec	r24
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <nrk_gpio_toggle+0x15e>
    15ee:	cb 01       	movw	r24, r22
    15f0:	84 2b       	or	r24, r20
    15f2:	0b c0       	rjmp	.+22     	; 0x160a <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    15f4:	21 e0       	ldi	r18, 0x01	; 1
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	b9 01       	movw	r22, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <nrk_gpio_toggle+0x178>
    15fc:	66 0f       	add	r22, r22
    15fe:	77 1f       	adc	r23, r23
    1600:	8a 95       	dec	r24
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <nrk_gpio_toggle+0x174>
    1604:	cb 01       	movw	r24, r22
    1606:	80 95       	com	r24
    1608:	84 23       	and	r24, r20
    160a:	8e b9       	out	0x0e, r24	; 14
    160c:	89 cf       	rjmp	.-238    	; 0x1520 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    160e:	2f b1       	in	r18, 0x0f	; 15
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	08 2e       	mov	r0, r24
    1614:	02 c0       	rjmp	.+4      	; 0x161a <nrk_gpio_toggle+0x192>
    1616:	35 95       	asr	r19
    1618:	27 95       	ror	r18
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    161e:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    1620:	20 fd       	sbrc	r18, 0
    1622:	0b c0       	rjmp	.+22     	; 0x163a <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    1624:	21 e0       	ldi	r18, 0x01	; 1
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	b9 01       	movw	r22, r18
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <nrk_gpio_toggle+0x1a8>
    162c:	66 0f       	add	r22, r22
    162e:	77 1f       	adc	r23, r23
    1630:	8a 95       	dec	r24
    1632:	e2 f7       	brpl	.-8      	; 0x162c <nrk_gpio_toggle+0x1a4>
    1634:	cb 01       	movw	r24, r22
    1636:	84 2b       	or	r24, r20
    1638:	0b c0       	rjmp	.+22     	; 0x1650 <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    163a:	21 e0       	ldi	r18, 0x01	; 1
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	b9 01       	movw	r22, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <nrk_gpio_toggle+0x1be>
    1642:	66 0f       	add	r22, r22
    1644:	77 1f       	adc	r23, r23
    1646:	8a 95       	dec	r24
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <nrk_gpio_toggle+0x1ba>
    164a:	cb 01       	movw	r24, r22
    164c:	80 95       	com	r24
    164e:	84 23       	and	r24, r20
    1650:	81 bb       	out	0x11, r24	; 17
    1652:	66 cf       	rjmp	.-308    	; 0x1520 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    1654:	22 b3       	in	r18, 0x12	; 18
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	08 2e       	mov	r0, r24
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <nrk_gpio_toggle+0x1d8>
    165c:	35 95       	asr	r19
    165e:	27 95       	ror	r18
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    1664:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    1666:	20 fd       	sbrc	r18, 0
    1668:	0b c0       	rjmp	.+22     	; 0x1680 <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    166a:	21 e0       	ldi	r18, 0x01	; 1
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	b9 01       	movw	r22, r18
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <nrk_gpio_toggle+0x1ee>
    1672:	66 0f       	add	r22, r22
    1674:	77 1f       	adc	r23, r23
    1676:	8a 95       	dec	r24
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <nrk_gpio_toggle+0x1ea>
    167a:	cb 01       	movw	r24, r22
    167c:	84 2b       	or	r24, r20
    167e:	0b c0       	rjmp	.+22     	; 0x1696 <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    1680:	21 e0       	ldi	r18, 0x01	; 1
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	b9 01       	movw	r22, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <nrk_gpio_toggle+0x204>
    1688:	66 0f       	add	r22, r22
    168a:	77 1f       	adc	r23, r23
    168c:	8a 95       	dec	r24
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <nrk_gpio_toggle+0x200>
    1690:	cb 01       	movw	r24, r22
    1692:	80 95       	com	r24
    1694:	84 23       	and	r24, r20
    1696:	84 bb       	out	0x14, r24	; 20
    1698:	43 cf       	rjmp	.-378    	; 0x1520 <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    169a:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    169c:	08 95       	ret

0000169e <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    169e:	8f 3f       	cpi	r24, 0xFF	; 255
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <nrk_gpio_direction+0x6>
    16a2:	d5 c0       	rjmp	.+426    	; 0x184e <nrk_gpio_direction+0x1b0>
    16a4:	e8 2f       	mov	r30, r24
    16a6:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    16a8:	4e 2f       	mov	r20, r30
    16aa:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    16ac:	61 11       	cpse	r22, r1
    16ae:	67 c0       	rjmp	.+206    	; 0x177e <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    16b0:	47 30       	cpi	r20, 0x07	; 7
    16b2:	51 05       	cpc	r21, r1
    16b4:	08 f0       	brcs	.+2      	; 0x16b8 <nrk_gpio_direction+0x1a>
    16b6:	cb c0       	rjmp	.+406    	; 0x184e <nrk_gpio_direction+0x1b0>
    16b8:	fa 01       	movw	r30, r20
    16ba:	e4 55       	subi	r30, 0x54	; 84
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	86 95       	lsr	r24
    16c0:	86 95       	lsr	r24
    16c2:	86 95       	lsr	r24
    16c4:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    16c8:	41 b1       	in	r20, 0x01	; 1
    16ca:	21 e0       	ldi	r18, 0x01	; 1
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	b9 01       	movw	r22, r18
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <nrk_gpio_direction+0x38>
    16d2:	66 0f       	add	r22, r22
    16d4:	77 1f       	adc	r23, r23
    16d6:	8a 95       	dec	r24
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <nrk_gpio_direction+0x34>
    16da:	cb 01       	movw	r24, r22
    16dc:	80 95       	com	r24
    16de:	84 23       	and	r24, r20
    16e0:	65 c0       	rjmp	.+202    	; 0x17ac <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    16e2:	44 b1       	in	r20, 0x04	; 4
    16e4:	21 e0       	ldi	r18, 0x01	; 1
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	b9 01       	movw	r22, r18
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <nrk_gpio_direction+0x52>
    16ec:	66 0f       	add	r22, r22
    16ee:	77 1f       	adc	r23, r23
    16f0:	8a 95       	dec	r24
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <nrk_gpio_direction+0x4e>
    16f4:	cb 01       	movw	r24, r22
    16f6:	80 95       	com	r24
    16f8:	84 23       	and	r24, r20
    16fa:	65 c0       	rjmp	.+202    	; 0x17c6 <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    16fc:	47 b1       	in	r20, 0x07	; 7
    16fe:	21 e0       	ldi	r18, 0x01	; 1
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	b9 01       	movw	r22, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <nrk_gpio_direction+0x6c>
    1706:	66 0f       	add	r22, r22
    1708:	77 1f       	adc	r23, r23
    170a:	8a 95       	dec	r24
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <nrk_gpio_direction+0x68>
    170e:	cb 01       	movw	r24, r22
    1710:	80 95       	com	r24
    1712:	84 23       	and	r24, r20
    1714:	65 c0       	rjmp	.+202    	; 0x17e0 <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    1716:	4a b1       	in	r20, 0x0a	; 10
    1718:	21 e0       	ldi	r18, 0x01	; 1
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	b9 01       	movw	r22, r18
    171e:	02 c0       	rjmp	.+4      	; 0x1724 <nrk_gpio_direction+0x86>
    1720:	66 0f       	add	r22, r22
    1722:	77 1f       	adc	r23, r23
    1724:	8a 95       	dec	r24
    1726:	e2 f7       	brpl	.-8      	; 0x1720 <nrk_gpio_direction+0x82>
    1728:	cb 01       	movw	r24, r22
    172a:	80 95       	com	r24
    172c:	84 23       	and	r24, r20
    172e:	65 c0       	rjmp	.+202    	; 0x17fa <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    1730:	4d b1       	in	r20, 0x0d	; 13
    1732:	21 e0       	ldi	r18, 0x01	; 1
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	b9 01       	movw	r22, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <nrk_gpio_direction+0xa0>
    173a:	66 0f       	add	r22, r22
    173c:	77 1f       	adc	r23, r23
    173e:	8a 95       	dec	r24
    1740:	e2 f7       	brpl	.-8      	; 0x173a <nrk_gpio_direction+0x9c>
    1742:	cb 01       	movw	r24, r22
    1744:	80 95       	com	r24
    1746:	84 23       	and	r24, r20
    1748:	65 c0       	rjmp	.+202    	; 0x1814 <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    174a:	40 b3       	in	r20, 0x10	; 16
    174c:	21 e0       	ldi	r18, 0x01	; 1
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	b9 01       	movw	r22, r18
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <nrk_gpio_direction+0xba>
    1754:	66 0f       	add	r22, r22
    1756:	77 1f       	adc	r23, r23
    1758:	8a 95       	dec	r24
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <nrk_gpio_direction+0xb6>
    175c:	cb 01       	movw	r24, r22
    175e:	80 95       	com	r24
    1760:	84 23       	and	r24, r20
    1762:	65 c0       	rjmp	.+202    	; 0x182e <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    1764:	43 b3       	in	r20, 0x13	; 19
    1766:	21 e0       	ldi	r18, 0x01	; 1
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	b9 01       	movw	r22, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <nrk_gpio_direction+0xd4>
    176e:	66 0f       	add	r22, r22
    1770:	77 1f       	adc	r23, r23
    1772:	8a 95       	dec	r24
    1774:	e2 f7       	brpl	.-8      	; 0x176e <nrk_gpio_direction+0xd0>
    1776:	cb 01       	movw	r24, r22
    1778:	80 95       	com	r24
    177a:	84 23       	and	r24, r20
    177c:	65 c0       	rjmp	.+202    	; 0x1848 <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    177e:	47 30       	cpi	r20, 0x07	; 7
    1780:	51 05       	cpc	r21, r1
    1782:	08 f0       	brcs	.+2      	; 0x1786 <nrk_gpio_direction+0xe8>
    1784:	64 c0       	rjmp	.+200    	; 0x184e <nrk_gpio_direction+0x1b0>
    1786:	fa 01       	movw	r30, r20
    1788:	ed 54       	subi	r30, 0x4D	; 77
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	86 95       	lsr	r24
    178e:	86 95       	lsr	r24
    1790:	86 95       	lsr	r24
    1792:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    1796:	41 b1       	in	r20, 0x01	; 1
    1798:	21 e0       	ldi	r18, 0x01	; 1
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	b9 01       	movw	r22, r18
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <nrk_gpio_direction+0x106>
    17a0:	66 0f       	add	r22, r22
    17a2:	77 1f       	adc	r23, r23
    17a4:	8a 95       	dec	r24
    17a6:	e2 f7       	brpl	.-8      	; 0x17a0 <nrk_gpio_direction+0x102>
    17a8:	cb 01       	movw	r24, r22
    17aa:	84 2b       	or	r24, r20
    17ac:	81 b9       	out	0x01, r24	; 1
    17ae:	4d c0       	rjmp	.+154    	; 0x184a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    17b0:	44 b1       	in	r20, 0x04	; 4
    17b2:	21 e0       	ldi	r18, 0x01	; 1
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	b9 01       	movw	r22, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <nrk_gpio_direction+0x120>
    17ba:	66 0f       	add	r22, r22
    17bc:	77 1f       	adc	r23, r23
    17be:	8a 95       	dec	r24
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <nrk_gpio_direction+0x11c>
    17c2:	cb 01       	movw	r24, r22
    17c4:	84 2b       	or	r24, r20
    17c6:	84 b9       	out	0x04, r24	; 4
    17c8:	40 c0       	rjmp	.+128    	; 0x184a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    17ca:	47 b1       	in	r20, 0x07	; 7
    17cc:	21 e0       	ldi	r18, 0x01	; 1
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	b9 01       	movw	r22, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <nrk_gpio_direction+0x13a>
    17d4:	66 0f       	add	r22, r22
    17d6:	77 1f       	adc	r23, r23
    17d8:	8a 95       	dec	r24
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <nrk_gpio_direction+0x136>
    17dc:	cb 01       	movw	r24, r22
    17de:	84 2b       	or	r24, r20
    17e0:	87 b9       	out	0x07, r24	; 7
    17e2:	33 c0       	rjmp	.+102    	; 0x184a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    17e4:	4a b1       	in	r20, 0x0a	; 10
    17e6:	21 e0       	ldi	r18, 0x01	; 1
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	b9 01       	movw	r22, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <nrk_gpio_direction+0x154>
    17ee:	66 0f       	add	r22, r22
    17f0:	77 1f       	adc	r23, r23
    17f2:	8a 95       	dec	r24
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <nrk_gpio_direction+0x150>
    17f6:	cb 01       	movw	r24, r22
    17f8:	84 2b       	or	r24, r20
    17fa:	8a b9       	out	0x0a, r24	; 10
    17fc:	26 c0       	rjmp	.+76     	; 0x184a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    17fe:	4d b1       	in	r20, 0x0d	; 13
    1800:	21 e0       	ldi	r18, 0x01	; 1
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	b9 01       	movw	r22, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <nrk_gpio_direction+0x16e>
    1808:	66 0f       	add	r22, r22
    180a:	77 1f       	adc	r23, r23
    180c:	8a 95       	dec	r24
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <nrk_gpio_direction+0x16a>
    1810:	cb 01       	movw	r24, r22
    1812:	84 2b       	or	r24, r20
    1814:	8d b9       	out	0x0d, r24	; 13
    1816:	19 c0       	rjmp	.+50     	; 0x184a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    1818:	40 b3       	in	r20, 0x10	; 16
    181a:	21 e0       	ldi	r18, 0x01	; 1
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	b9 01       	movw	r22, r18
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <nrk_gpio_direction+0x188>
    1822:	66 0f       	add	r22, r22
    1824:	77 1f       	adc	r23, r23
    1826:	8a 95       	dec	r24
    1828:	e2 f7       	brpl	.-8      	; 0x1822 <nrk_gpio_direction+0x184>
    182a:	cb 01       	movw	r24, r22
    182c:	84 2b       	or	r24, r20
    182e:	80 bb       	out	0x10, r24	; 16
    1830:	0c c0       	rjmp	.+24     	; 0x184a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    1832:	43 b3       	in	r20, 0x13	; 19
    1834:	21 e0       	ldi	r18, 0x01	; 1
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	b9 01       	movw	r22, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <nrk_gpio_direction+0x1a2>
    183c:	66 0f       	add	r22, r22
    183e:	77 1f       	adc	r23, r23
    1840:	8a 95       	dec	r24
    1842:	e2 f7       	brpl	.-8      	; 0x183c <nrk_gpio_direction+0x19e>
    1844:	cb 01       	movw	r24, r22
    1846:	84 2b       	or	r24, r20
    1848:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    184c:	08 95       	ret
                        default: return -1;
    184e:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    1850:	08 95       	ret

00001852 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    1852:	81 11       	cpse	r24, r1
    1854:	06 c0       	rjmp	.+12     	; 0x1862 <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    1856:	80 b1       	in	r24, 0x00	; 0
    1858:	86 95       	lsr	r24
    185a:	81 70       	andi	r24, 0x01	; 1
    185c:	91 e0       	ldi	r25, 0x01	; 1
    185e:	89 27       	eor	r24, r25
    1860:	08 95       	ret
	} 
return -1;
    1862:	8f ef       	ldi	r24, 0xFF	; 255
}
    1864:	08 95       	ret

00001866 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	11 f4       	brne	.+4      	; 0x186e <nrk_led_toggle+0x8>
    186a:	83 e2       	ldi	r24, 0x23	; 35
    186c:	0d c0       	rjmp	.+26     	; 0x1888 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	91 05       	cpc	r25, r1
    1872:	11 f4       	brne	.+4      	; 0x1878 <nrk_led_toggle+0x12>
    1874:	8b e2       	ldi	r24, 0x2B	; 43
    1876:	08 c0       	rjmp	.+16     	; 0x1888 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    1878:	82 30       	cpi	r24, 0x02	; 2
    187a:	91 05       	cpc	r25, r1
    187c:	11 f4       	brne	.+4      	; 0x1882 <nrk_led_toggle+0x1c>
    187e:	83 e3       	ldi	r24, 0x33	; 51
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    1882:	03 97       	sbiw	r24, 0x03	; 3
    1884:	29 f4       	brne	.+10     	; 0x1890 <nrk_led_toggle+0x2a>
    1886:	8b e3       	ldi	r24, 0x3B	; 59
    1888:	0e 94 44 0a 	call	0x1488	; 0x1488 <nrk_gpio_toggle>
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	08 95       	ret
return -1;
    1890:	8f ef       	ldi	r24, 0xFF	; 255
}
    1892:	08 95       	ret

00001894 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	11 f4       	brne	.+4      	; 0x189c <nrk_led_clr+0x8>
    1898:	83 e2       	ldi	r24, 0x23	; 35
    189a:	0d c0       	rjmp	.+26     	; 0x18b6 <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	91 05       	cpc	r25, r1
    18a0:	11 f4       	brne	.+4      	; 0x18a6 <nrk_led_clr+0x12>
    18a2:	8b e2       	ldi	r24, 0x2B	; 43
    18a4:	08 c0       	rjmp	.+16     	; 0x18b6 <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    18a6:	82 30       	cpi	r24, 0x02	; 2
    18a8:	91 05       	cpc	r25, r1
    18aa:	11 f4       	brne	.+4      	; 0x18b0 <nrk_led_clr+0x1c>
    18ac:	83 e3       	ldi	r24, 0x33	; 51
    18ae:	03 c0       	rjmp	.+6      	; 0x18b6 <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    18b0:	03 97       	sbiw	r24, 0x03	; 3
    18b2:	29 f4       	brne	.+10     	; 0x18be <nrk_led_clr+0x2a>
    18b4:	8b e3       	ldi	r24, 0x3B	; 59
    18b6:	0e 94 3f 09 	call	0x127e	; 0x127e <nrk_gpio_set>
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	08 95       	ret
return -1;
    18be:	8f ef       	ldi	r24, 0xFF	; 255
}
    18c0:	08 95       	ret

000018c2 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    18c2:	00 97       	sbiw	r24, 0x00	; 0
    18c4:	11 f4       	brne	.+4      	; 0x18ca <nrk_led_set+0x8>
    18c6:	83 e2       	ldi	r24, 0x23	; 35
    18c8:	0d c0       	rjmp	.+26     	; 0x18e4 <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	91 05       	cpc	r25, r1
    18ce:	11 f4       	brne	.+4      	; 0x18d4 <nrk_led_set+0x12>
    18d0:	8b e2       	ldi	r24, 0x2B	; 43
    18d2:	08 c0       	rjmp	.+16     	; 0x18e4 <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    18d4:	82 30       	cpi	r24, 0x02	; 2
    18d6:	91 05       	cpc	r25, r1
    18d8:	11 f4       	brne	.+4      	; 0x18de <nrk_led_set+0x1c>
    18da:	83 e3       	ldi	r24, 0x33	; 51
    18dc:	03 c0       	rjmp	.+6      	; 0x18e4 <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    18de:	03 97       	sbiw	r24, 0x03	; 3
    18e0:	29 f4       	brne	.+10     	; 0x18ec <nrk_led_set+0x2a>
    18e2:	8b e3       	ldi	r24, 0x3B	; 59
    18e4:	0e 94 b0 09 	call	0x1360	; 0x1360 <nrk_gpio_clr>
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	08 95       	ret
return -1;
    18ec:	8f ef       	ldi	r24, 0xFF	; 255
}
    18ee:	08 95       	ret

000018f0 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    18f0:	88 23       	and	r24, r24
    18f2:	19 f0       	breq	.+6      	; 0x18fa <nrk_gpio_pullups+0xa>
    18f4:	85 b7       	in	r24, 0x35	; 53
    18f6:	8f 7e       	andi	r24, 0xEF	; 239
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    18fa:	85 b7       	in	r24, 0x35	; 53
    18fc:	80 61       	ori	r24, 0x10	; 16
    18fe:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	08 95       	ret

00001904 <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    1904:	90 91 c8 00 	lds	r25, 0x00C8
    1908:	95 ff       	sbrs	r25, 5
    190a:	fc cf       	rjmp	.-8      	; 0x1904 <putc1>
    190c:	80 93 ce 00 	sts	0x00CE, r24
    1910:	08 95       	ret

00001912 <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    1912:	90 93 c5 00 	sts	0x00C5, r25
    1916:	80 93 c4 00 	sts	0x00C4, r24
    191a:	86 e0       	ldi	r24, 0x06	; 6
    191c:	80 93 c2 00 	sts	0x00C2, r24
    1920:	e1 ec       	ldi	r30, 0xC1	; 193
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	8b 7f       	andi	r24, 0xFB	; 251
    1928:	80 83       	st	Z, r24
    192a:	a0 ec       	ldi	r26, 0xC0	; 192
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	8c 91       	ld	r24, X
    1930:	82 60       	ori	r24, 0x02	; 2
    1932:	8c 93       	st	X, r24
ENABLE_UART0();
    1934:	80 81       	ld	r24, Z
    1936:	88 61       	ori	r24, 0x18	; 24
    1938:	80 83       	st	Z, r24
    193a:	08 95       	ret

0000193c <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    193c:	90 93 cd 00 	sts	0x00CD, r25
    1940:	80 93 cc 00 	sts	0x00CC, r24
    1944:	86 e0       	ldi	r24, 0x06	; 6
    1946:	80 93 ca 00 	sts	0x00CA, r24
    194a:	e9 ec       	ldi	r30, 0xC9	; 201
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	8b 7f       	andi	r24, 0xFB	; 251
    1952:	80 83       	st	Z, r24
    1954:	a8 ec       	ldi	r26, 0xC8	; 200
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	8c 91       	ld	r24, X
    195a:	82 60       	ori	r24, 0x02	; 2
    195c:	8c 93       	st	X, r24
ENABLE_UART1();
    195e:	80 81       	ld	r24, Z
    1960:	88 61       	ori	r24, 0x18	; 24
    1962:	80 83       	st	Z, r24
    1964:	08 95       	ret

00001966 <nrk_setup_uart>:
 *
 * More advanced UART usage will require manually
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    196a:	0e 94 89 0c 	call	0x1912	; 0x1912 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    196e:	65 ef       	ldi	r22, 0xF5	; 245
    1970:	78 e0       	ldi	r23, 0x08	; 8
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	99 e0       	ldi	r25, 0x09	; 9
    1976:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <fdevopen>
    197a:	ca e7       	ldi	r28, 0x7A	; 122
    197c:	d5 e0       	ldi	r29, 0x05	; 5
    197e:	9b 83       	std	Y+3, r25	; 0x03
    1980:	8a 83       	std	Y+2, r24	; 0x02
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    1982:	65 ef       	ldi	r22, 0xF5	; 245
    1984:	78 e0       	ldi	r23, 0x08	; 8
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	99 e0       	ldi	r25, 0x09	; 9
    198a:	0e 94 95 25 	call	0x4b2a	; 0x4b2a <fdevopen>
    198e:	99 83       	std	Y+1, r25	; 0x01
    1990:	88 83       	st	Y, r24
   uart_rx_buf_start=0;
   uart_rx_buf_end=0;
   ENABLE_UART0_RX_INT();
#endif

}
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	08 95       	ret

00001998 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    1998:	80 91 c8 00 	lds	r24, 0x00C8
    199c:	87 ff       	sbrs	r24, 7
    199e:	fc cf       	rjmp	.-8      	; 0x1998 <getc1>
    19a0:	80 91 c8 00 	lds	r24, 0x00C8
    19a4:	8f 77       	andi	r24, 0x7F	; 127
    19a6:	80 93 c8 00 	sts	0x00C8, r24
    19aa:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    19ae:	08 95       	ret

000019b0 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	d1 f7       	brne	.-12     	; 0x19b0 <halWait>

} // halWait
    19bc:	08 95       	ret

000019be <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    19be:	0c 94 f0 26 	jmp	0x4de0	; 0x4de0 <__eerd_byte_m128rfa1>

000019c2 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    19c2:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <__eewr_byte_m128rfa1>
}
    19c6:	08 95       	ret

000019c8 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    19c8:	ef 92       	push	r14
    19ca:	ff 92       	push	r15
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <__eerd_byte_m128rfa1>
    19de:	18 2f       	mov	r17, r24
    19e0:	f7 01       	movw	r30, r14
    19e2:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <__eerd_byte_m128rfa1>
    19ec:	08 2f       	mov	r16, r24
    19ee:	f7 01       	movw	r30, r14
    19f0:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    19f2:	82 e0       	ldi	r24, 0x02	; 2
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <__eerd_byte_m128rfa1>
    19fa:	d8 2f       	mov	r29, r24
    19fc:	f7 01       	movw	r30, r14
    19fe:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    1a00:	83 e0       	ldi	r24, 0x03	; 3
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <__eerd_byte_m128rfa1>
    1a08:	c8 2f       	mov	r28, r24
    1a0a:	f7 01       	movw	r30, r14
    1a0c:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    1a0e:	84 e0       	ldi	r24, 0x04	; 4
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <__eerd_byte_m128rfa1>
    1a16:	10 0f       	add	r17, r16
    1a18:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    1a1a:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    1a1c:	8c 17       	cp	r24, r28
    1a1e:	11 f0       	breq	.+4      	; 0x1a24 <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    1a20:	8f ef       	ldi	r24, 0xFF	; 255
    1a22:	01 c0       	rjmp	.+2      	; 0x1a26 <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    1a24:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	ff 90       	pop	r15
    1a30:	ef 90       	pop	r14
    1a32:	08 95       	ret

00001a34 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    1a3a:	85 e0       	ldi	r24, 0x05	; 5
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <__eerd_byte_m128rfa1>
    1a42:	88 83       	st	Y, r24
return NRK_OK;
}
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	08 95       	ret

00001a4c <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	60 81       	ld	r22, Z
    1a50:	86 e0       	ldi	r24, 0x06	; 6
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	08 95       	ret

00001a5c <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    1a5c:	cf 93       	push	r28
    1a5e:	df 93       	push	r29
    1a60:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    1a62:	86 e0       	ldi	r24, 0x06	; 6
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <__eerd_byte_m128rfa1>
    1a6a:	88 83       	st	Y, r24
  return NRK_OK;
}
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	08 95       	ret

00001a74 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	8c 01       	movw	r16, r24
    1a7e:	c0 e0       	ldi	r28, 0x00	; 0
    1a80:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    1a82:	ce 01       	movw	r24, r28
    1a84:	08 96       	adiw	r24, 0x08	; 8
    1a86:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <__eerd_byte_m128rfa1>
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	81 93       	st	Z+, r24
    1a8e:	8f 01       	movw	r16, r30
    1a90:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    1a92:	c0 31       	cpi	r28, 0x10	; 16
    1a94:	d1 05       	cpc	r29, r1
    1a96:	a9 f7       	brne	.-22     	; 0x1a82 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	1f 91       	pop	r17
    1aa0:	0f 91       	pop	r16
    1aa2:	08 95       	ret

00001aa4 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	8c 01       	movw	r16, r24
    1aae:	c0 e0       	ldi	r28, 0x00	; 0
    1ab0:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    1ab2:	f8 01       	movw	r30, r16
    1ab4:	61 91       	ld	r22, Z+
    1ab6:	8f 01       	movw	r16, r30
    1ab8:	ce 01       	movw	r24, r28
    1aba:	08 96       	adiw	r24, 0x08	; 8
    1abc:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <__eewr_byte_m128rfa1>
    1ac0:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    1ac2:	c0 31       	cpi	r28, 0x10	; 16
    1ac4:	d1 05       	cpc	r29, r1
    1ac6:	a9 f7       	brne	.-22     	; 0x1ab2 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	08 95       	ret

00001ad4 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    1ada:	87 e0       	ldi	r24, 0x07	; 7
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <__eerd_byte_m128rfa1>
    1ae2:	88 83       	st	Y, r24
  return NRK_OK;
}
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	08 95       	ret

00001aec <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    1aec:	fc 01       	movw	r30, r24
    1aee:	60 81       	ld	r22, Z
    1af0:	87 e0       	ldi	r24, 0x07	; 7
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	08 95       	ret

00001afc <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    1afc:	f8 94       	cli
    1afe:	08 95       	ret

00001b00 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    1b00:	78 94       	sei
    1b02:	08 95       	ret

00001b04 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    1b04:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <nrk_int_disable>
while(1);
    1b08:	ff cf       	rjmp	.-2      	; 0x1b08 <nrk_halt+0x4>

00001b0a <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	a3 97       	sbiw	r28, 0x23	; 35
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	f8 94       	cli
    1b18:	de bf       	out	0x3e, r29	; 62
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    1b1e:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <nrk_signal_create>
    1b22:	80 93 49 05 	sts	0x0549, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    1b26:	8f 3f       	cpi	r24, 0xFF	; 255
    1b28:	21 f4       	brne	.+8      	; 0x1b32 <nrk_init+0x28>
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	8e e0       	ldi	r24, 0x0E	; 14
    1b2e:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    1b32:	0e 94 7e 20 	call	0x40fc	; 0x40fc <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    1b36:	80 ff       	sbrs	r24, 0
    1b38:	04 c0       	rjmp	.+8      	; 0x1b42 <nrk_init+0x38>
    1b3a:	60 e0       	ldi	r22, 0x00	; 0
    1b3c:	86 e0       	ldi	r24, 0x06	; 6
    1b3e:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    1b42:	10 92 4c 05 	sts	0x054C, r1
    nrk_cur_task_TCB = NULL;
    1b46:	10 92 5a 05 	sts	0x055A, r1
    1b4a:	10 92 59 05 	sts	0x0559, r1
    
    nrk_high_ready_TCB = NULL;
    1b4e:	10 92 4b 05 	sts	0x054B, r1
    1b52:	10 92 4a 05 	sts	0x054A, r1
    nrk_high_ready_prio = 0; 
    1b56:	10 92 5b 05 	sts	0x055B, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    1b5a:	10 92 58 05 	sts	0x0558, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    1b5e:	8f ef       	ldi	r24, 0xFF	; 255
    1b60:	80 93 45 05 	sts	0x0545, r24
    nrk_sem_list[i].value=-1;
    1b64:	80 93 47 05 	sts	0x0547, r24
    nrk_sem_list[i].resource_ceiling=-1;
    1b68:	80 93 46 05 	sts	0x0546, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1b6c:	93 e6       	ldi	r25, 0x63	; 99
    1b6e:	90 93 f7 04 	sts	0x04F7, r25
        nrk_task_TCB[i].task_ID = -1; 
    1b72:	80 93 f5 04 	sts	0x04F5, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    1b76:	90 93 22 05 	sts	0x0522, r25
        nrk_task_TCB[i].task_ID = -1; 
    1b7a:	80 93 20 05 	sts	0x0520, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1b7e:	8c e5       	ldi	r24, 0x5C	; 92
    1b80:	95 e0       	ldi	r25, 0x05	; 5
    1b82:	21 e6       	ldi	r18, 0x61	; 97
    1b84:	35 e0       	ldi	r19, 0x05	; 5
    1b86:	30 93 60 05 	sts	0x0560, r19
    1b8a:	20 93 5f 05 	sts	0x055F, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1b8e:	90 93 63 05 	sts	0x0563, r25
    1b92:	80 93 62 05 	sts	0x0562, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    1b96:	46 e6       	ldi	r20, 0x66	; 102
    1b98:	55 e0       	ldi	r21, 0x05	; 5
    1b9a:	50 93 65 05 	sts	0x0565, r21
    1b9e:	40 93 64 05 	sts	0x0564, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    1ba2:	30 93 68 05 	sts	0x0568, r19
    1ba6:	20 93 67 05 	sts	0x0567, r18
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    1baa:	10 92 5e 05 	sts	0x055E, r1
    1bae:	10 92 5d 05 	sts	0x055D, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    1bb2:	10 92 6a 05 	sts	0x056A, r1
    1bb6:	10 92 69 05 	sts	0x0569, r1
	_head_node = NULL;
    1bba:	10 92 4f 05 	sts	0x054F, r1
    1bbe:	10 92 4e 05 	sts	0x054E, r1
	_free_node = &_nrk_readyQ[0];
    1bc2:	90 93 ec 04 	sts	0x04EC, r25
    1bc6:	80 93 eb 04 	sts	0x04EB, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    1bca:	6a ee       	ldi	r22, 0xEA	; 234
    1bcc:	7a e1       	ldi	r23, 0x1A	; 26
    1bce:	ce 01       	movw	r24, r28
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	0e 94 b6 22 	call	0x456c	; 0x456c <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    1bd6:	40 e8       	ldi	r20, 0x80	; 128
    1bd8:	50 e0       	ldi	r21, 0x00	; 0
    1bda:	6f e2       	ldi	r22, 0x2F	; 47
    1bdc:	74 e0       	ldi	r23, 0x04	; 4
    1bde:	ce 01       	movw	r24, r28
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	0e 94 ba 22 	call	0x4574	; 0x4574 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    1be6:	85 e5       	ldi	r24, 0x55	; 85
    1be8:	80 93 2f 04 	sts	0x042F, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    1bec:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    1bee:	1c 86       	std	Y+12, r1	; 0x0c
    1bf0:	1d 86       	std	Y+13, r1	; 0x0d
    1bf2:	1e 86       	std	Y+14, r1	; 0x0e
    1bf4:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    1bf6:	18 8a       	std	Y+16, r1	; 0x10
    1bf8:	19 8a       	std	Y+17, r1	; 0x11
    1bfa:	1a 8a       	std	Y+18, r1	; 0x12
    1bfc:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    1bfe:	1c 8a       	std	Y+20, r1	; 0x14
    1c00:	1d 8a       	std	Y+21, r1	; 0x15
    1c02:	1e 8a       	std	Y+22, r1	; 0x16
    1c04:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    1c06:	18 8e       	std	Y+24, r1	; 0x18
    1c08:	19 8e       	std	Y+25, r1	; 0x19
    1c0a:	1a 8e       	std	Y+26, r1	; 0x1a
    1c0c:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    1c0e:	1c 8e       	std	Y+28, r1	; 0x1c
    1c10:	1d 8e       	std	Y+29, r1	; 0x1d
    1c12:	1e 8e       	std	Y+30, r1	; 0x1e
    1c14:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    1c16:	18 a2       	std	Y+32, r1	; 0x20
    1c18:	19 a2       	std	Y+33, r1	; 0x21
    1c1a:	1a a2       	std	Y+34, r1	; 0x22
    1c1c:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    1c22:	92 e0       	ldi	r25, 0x02	; 2
    1c24:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    1c26:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    1c28:	ce 01       	movw	r24, r28
    1c2a:	01 96       	adiw	r24, 0x01	; 1
    1c2c:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <nrk_activate_task>
	
}
    1c30:	a3 96       	adiw	r28, 0x23	; 35
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	08 95       	ret

00001c42 <nrk_start>:
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    1c42:	60 91 f5 04 	lds	r22, 0x04F5
	// only check activated tasks
	if(task_ID!=-1)
    1c46:	6f 3f       	cpi	r22, 0xFF	; 255
    1c48:	39 f0       	breq	.+14     	; 0x1c58 <nrk_start+0x16>
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    1c4a:	80 91 20 05 	lds	r24, 0x0520
    1c4e:	68 13       	cpse	r22, r24
    1c50:	03 c0       	rjmp	.+6      	; 0x1c58 <nrk_start+0x16>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    1c52:	85 e0       	ldi	r24, 0x05	; 5
    1c54:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <nrk_kernel_error_add>
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    1c58:	60 91 20 05 	lds	r22, 0x0520
	// only check activated tasks
	if(task_ID!=-1)
    1c5c:	6f 3f       	cpi	r22, 0xFF	; 255
    1c5e:	e9 f4       	brne	.+58     	; 0x1c9a <nrk_start+0x58>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    1c60:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    1c64:	2b e2       	ldi	r18, 0x2B	; 43
    1c66:	82 02       	muls	r24, r18
    1c68:	c0 01       	movw	r24, r0
    1c6a:	11 24       	eor	r1, r1
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	e3 51       	subi	r30, 0x13	; 19
    1c70:	fb 4f       	sbci	r31, 0xFB	; 251
    1c72:	82 85       	ldd	r24, Z+10	; 0x0a
    1c74:	80 93 5b 05 	sts	0x055B, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    1c78:	f0 93 5a 05 	sts	0x055A, r31
    1c7c:	e0 93 59 05 	sts	0x0559, r30
    1c80:	f0 93 4b 05 	sts	0x054B, r31
    1c84:	e0 93 4a 05 	sts	0x054A, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    1c88:	80 93 4c 05 	sts	0x054C, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    1c8c:	0e 94 2c 23 	call	0x4658	; 0x4658 <nrk_target_start>
    nrk_stack_pointer_init(); 
    1c90:	0e 94 16 23 	call	0x462c	; 0x462c <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    1c94:	0e 94 30 23 	call	0x4660	; 0x4660 <nrk_start_high_ready_task>
    1c98:	08 c0       	rjmp	.+16     	; 0x1caa <nrk_start+0x68>
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    1c9a:	80 91 f5 04 	lds	r24, 0x04F5
    1c9e:	68 13       	cpse	r22, r24
    1ca0:	df cf       	rjmp	.-66     	; 0x1c60 <nrk_start+0x1e>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    1ca2:	85 e0       	ldi	r24, 0x05	; 5
    1ca4:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <nrk_kernel_error_add>
    1ca8:	db cf       	rjmp	.-74     	; 0x1c60 <nrk_start+0x1e>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    1caa:	ff cf       	rjmp	.-2      	; 0x1caa <nrk_start+0x68>

00001cac <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    1cac:	cf 92       	push	r12
    1cae:	df 92       	push	r13
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	ec 01       	movw	r28, r24
    1cbe:	8b 01       	movw	r16, r22
    1cc0:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    1cc2:	89 85       	ldd	r24, Y+9	; 0x09
    1cc4:	82 30       	cpi	r24, 0x02	; 2
    1cc6:	21 f0       	breq	.+8      	; 0x1cd0 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    1cc8:	80 91 48 05 	lds	r24, 0x0548
    1ccc:	88 83       	st	Y, r24
    1cce:	01 c0       	rjmp	.+2      	; 0x1cd2 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    1cd0:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    1cd2:	80 91 48 05 	lds	r24, 0x0548
    1cd6:	82 30       	cpi	r24, 0x02	; 2
    1cd8:	20 f0       	brcs	.+8      	; 0x1ce2 <nrk_TCB_init+0x36>
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	87 e0       	ldi	r24, 0x07	; 7
    1cde:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    1ce2:	89 85       	ldd	r24, Y+9	; 0x09
    1ce4:	82 30       	cpi	r24, 0x02	; 2
    1ce6:	29 f0       	breq	.+10     	; 0x1cf2 <nrk_TCB_init+0x46>
    1ce8:	80 91 48 05 	lds	r24, 0x0548
    1cec:	8f 5f       	subi	r24, 0xFF	; 255
    1cee:	80 93 48 05 	sts	0x0548, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    1cf2:	80 91 48 05 	lds	r24, 0x0548
    1cf6:	81 11       	cpse	r24, r1
    1cf8:	03 c0       	rjmp	.+6      	; 0x1d00 <nrk_TCB_init+0x54>
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	80 93 48 05 	sts	0x0548, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    1d00:	38 81       	ld	r19, Y
    1d02:	2b e2       	ldi	r18, 0x2B	; 43
    1d04:	32 03       	mulsu	r19, r18
    1d06:	f0 01       	movw	r30, r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	e3 51       	subi	r30, 0x13	; 19
    1d0c:	fb 4f       	sbci	r31, 0xFB	; 251
    1d0e:	11 83       	std	Z+1, r17	; 0x01
    1d10:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    1d12:	88 85       	ldd	r24, Y+8	; 0x08
    1d14:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    1d16:	38 81       	ld	r19, Y
    1d18:	32 03       	mulsu	r19, r18
    1d1a:	f0 01       	movw	r30, r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	e3 51       	subi	r30, 0x13	; 19
    1d20:	fb 4f       	sbci	r31, 0xFB	; 251
    1d22:	83 e0       	ldi	r24, 0x03	; 3
    1d24:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    1d26:	38 81       	ld	r19, Y
    1d28:	32 03       	mulsu	r19, r18
    1d2a:	f0 01       	movw	r30, r0
    1d2c:	11 24       	eor	r1, r1
    1d2e:	e3 51       	subi	r30, 0x13	; 19
    1d30:	fb 4f       	sbci	r31, 0xFB	; 251
    1d32:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    1d34:	08 81       	ld	r16, Y
    1d36:	02 03       	mulsu	r16, r18
    1d38:	80 01       	movw	r16, r0
    1d3a:	11 24       	eor	r1, r1
    1d3c:	03 51       	subi	r16, 0x13	; 19
    1d3e:	1b 4f       	sbci	r17, 0xFB	; 251
    1d40:	f8 01       	movw	r30, r16
    1d42:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    1d44:	ce 01       	movw	r24, r28
    1d46:	0b 96       	adiw	r24, 0x0b	; 11
    1d48:	0e 94 80 1a 	call	0x3500	; 0x3500 <_nrk_time_to_ticks_long>
    1d4c:	f8 01       	movw	r30, r16
    1d4e:	61 a3       	std	Z+33, r22	; 0x21
    1d50:	72 a3       	std	Z+34, r23	; 0x22
    1d52:	83 a3       	std	Z+35, r24	; 0x23
    1d54:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    1d56:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d58:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d5a:	ad 85       	ldd	r26, Y+13	; 0x0d
    1d5c:	be 85       	ldd	r27, Y+14	; 0x0e
    1d5e:	88 33       	cpi	r24, 0x38	; 56
    1d60:	99 48       	sbci	r25, 0x89	; 137
    1d62:	a1 44       	sbci	r26, 0x41	; 65
    1d64:	b1 05       	cpc	r27, r1
    1d66:	20 f0       	brcs	.+8      	; 0x1d70 <nrk_TCB_init+0xc4>
    1d68:	68 81       	ld	r22, Y
    1d6a:	86 e1       	ldi	r24, 0x16	; 22
    1d6c:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    1d70:	c8 80       	ld	r12, Y
    1d72:	dd 24       	eor	r13, r13
    1d74:	c7 fc       	sbrc	r12, 7
    1d76:	d0 94       	com	r13
    1d78:	ce 01       	movw	r24, r28
    1d7a:	4b 96       	adiw	r24, 0x1b	; 27
    1d7c:	0e 94 80 1a 	call	0x3500	; 0x3500 <_nrk_time_to_ticks_long>
    1d80:	1b e2       	ldi	r17, 0x2B	; 43
    1d82:	1c 9d       	mul	r17, r12
    1d84:	f0 01       	movw	r30, r0
    1d86:	1d 9d       	mul	r17, r13
    1d88:	f0 0d       	add	r31, r0
    1d8a:	11 24       	eor	r1, r1
    1d8c:	e3 51       	subi	r30, 0x13	; 19
    1d8e:	fb 4f       	sbci	r31, 0xFB	; 251
    1d90:	65 8b       	std	Z+21, r22	; 0x15
    1d92:	76 8b       	std	Z+22, r23	; 0x16
    1d94:	87 8b       	std	Z+23, r24	; 0x17
    1d96:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    1d98:	28 81       	ld	r18, Y
    1d9a:	21 03       	mulsu	r18, r17
    1d9c:	c0 01       	movw	r24, r0
    1d9e:	11 24       	eor	r1, r1
    1da0:	9c 01       	movw	r18, r24
    1da2:	23 51       	subi	r18, 0x13	; 19
    1da4:	3b 4f       	sbci	r19, 0xFB	; 251
    1da6:	69 01       	movw	r12, r18
    1da8:	f9 01       	movw	r30, r18
    1daa:	45 89       	ldd	r20, Z+21	; 0x15
    1dac:	56 89       	ldd	r21, Z+22	; 0x16
    1dae:	67 89       	ldd	r22, Z+23	; 0x17
    1db0:	70 8d       	ldd	r23, Z+24	; 0x18
    1db2:	81 a1       	ldd	r24, Z+33	; 0x21
    1db4:	92 a1       	ldd	r25, Z+34	; 0x22
    1db6:	a3 a1       	ldd	r26, Z+35	; 0x23
    1db8:	b4 a1       	ldd	r27, Z+36	; 0x24
    1dba:	84 0f       	add	r24, r20
    1dbc:	95 1f       	adc	r25, r21
    1dbe:	a6 1f       	adc	r26, r22
    1dc0:	b7 1f       	adc	r27, r23
    1dc2:	81 8f       	std	Z+25, r24	; 0x19
    1dc4:	92 8f       	std	Z+26, r25	; 0x1a
    1dc6:	a3 8f       	std	Z+27, r26	; 0x1b
    1dc8:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    1dca:	ce 01       	movw	r24, r28
    1dcc:	43 96       	adiw	r24, 0x13	; 19
    1dce:	0e 94 80 1a 	call	0x3500	; 0x3500 <_nrk_time_to_ticks_long>
    1dd2:	f6 01       	movw	r30, r12
    1dd4:	65 a3       	std	Z+37, r22	; 0x25
    1dd6:	76 a3       	std	Z+38, r23	; 0x26
    1dd8:	87 a3       	std	Z+39, r24	; 0x27
    1dda:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    1ddc:	28 81       	ld	r18, Y
    1dde:	21 03       	mulsu	r18, r17
    1de0:	f0 01       	movw	r30, r0
    1de2:	11 24       	eor	r1, r1
    1de4:	e3 51       	subi	r30, 0x13	; 19
    1de6:	fb 4f       	sbci	r31, 0xFB	; 251
    1de8:	85 a1       	ldd	r24, Z+37	; 0x25
    1dea:	96 a1       	ldd	r25, Z+38	; 0x26
    1dec:	a7 a1       	ldd	r26, Z+39	; 0x27
    1dee:	b0 a5       	ldd	r27, Z+40	; 0x28
    1df0:	85 8f       	std	Z+29, r24	; 0x1d
    1df2:	96 8f       	std	Z+30, r25	; 0x1e
    1df4:	a7 8f       	std	Z+31, r26	; 0x1f
    1df6:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	92 a7       	std	Z+42, r25	; 0x2a
    1dfe:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    1e00:	f3 82       	std	Z+3, r15	; 0x03
    1e02:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    1e04:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	1f 91       	pop	r17
    1e0c:	0f 91       	pop	r16
    1e0e:	ff 90       	pop	r15
    1e10:	ef 90       	pop	r14
    1e12:	df 90       	pop	r13
    1e14:	cf 90       	pop	r12
    1e16:	08 95       	ret

00001e18 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    1e18:	0c 94 0e 1b 	jmp	0x361c	; 0x361c <_nrk_scheduler>

00001e1c <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    1e1c:	85 e6       	ldi	r24, 0x65	; 101
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	08 95       	ret

00001e22 <_nrk_errno_set>:
    1e22:	e0 91 59 05 	lds	r30, 0x0559
    1e26:	f0 91 5a 05 	lds	r31, 0x055A
    1e2a:	84 87       	std	Z+12, r24	; 0x0c
    1e2c:	08 95       	ret

00001e2e <nrk_errno_get>:
    nrk_cur_task_TCB->errno = error_code;
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    1e2e:	e0 91 59 05 	lds	r30, 0x0559
    1e32:	f0 91 5a 05 	lds	r31, 0x055A
}
    1e36:	84 85       	ldd	r24, Z+12	; 0x0c
    1e38:	08 95       	ret

00001e3a <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    1e3a:	fc 01       	movw	r30, r24
    if (error_num == 0)
    1e3c:	80 91 2e 04 	lds	r24, 0x042E
    1e40:	88 23       	and	r24, r24
    1e42:	31 f0       	breq	.+12     	; 0x1e50 <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    1e44:	db 01       	movw	r26, r22
    1e46:	8c 93       	st	X, r24
    *task_id = error_task;
    1e48:	80 91 81 03 	lds	r24, 0x0381
    1e4c:	80 83       	st	Z, r24
    return 1;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
}
    1e50:	08 95       	ret

00001e52 <nrk_error_handle>:
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    1e52:	10 92 2e 04 	sts	0x042E, r1
    1e56:	08 95       	ret

00001e58 <clear_regs>:
}

inline void clear_regs()
{

        GTCCR=0;
    1e58:	13 bc       	out	0x23, r1	; 35
        ASSR=0;
    1e5a:	10 92 b6 00 	sts	0x00B6, r1

        OCR0B=0;
    1e5e:	18 bc       	out	0x28, r1	; 40
        OCR0A=0;
    1e60:	17 bc       	out	0x27, r1	; 39
        TCNT0=0;
    1e62:	16 bc       	out	0x26, r1	; 38
        TCCR0B=0;
    1e64:	15 bc       	out	0x25, r1	; 37
        TCCR0A=0;
    1e66:	14 bc       	out	0x24, r1	; 36

        EIMSK=0;
    1e68:	1d ba       	out	0x1d, r1	; 29
        EIFR=0;
    1e6a:	1c ba       	out	0x1c, r1	; 28
        PCIFR=0;
    1e6c:	1b ba       	out	0x1b, r1	; 27


        OCR3B =0;
    1e6e:	10 92 9b 00 	sts	0x009B, r1
    1e72:	10 92 9a 00 	sts	0x009A, r1
        OCR3A =0;
    1e76:	10 92 99 00 	sts	0x0099, r1
    1e7a:	10 92 98 00 	sts	0x0098, r1
        TCNT3 =0;
    1e7e:	10 92 95 00 	sts	0x0095, r1
    1e82:	10 92 94 00 	sts	0x0094, r1
        TCCR3B=0;
    1e86:	10 92 91 00 	sts	0x0091, r1
        TCCR3A=0;
    1e8a:	10 92 90 00 	sts	0x0090, r1
        TIFR3=0;
    1e8e:	18 ba       	out	0x18, r1	; 24
        TIMSK3=0;
    1e90:	10 92 71 00 	sts	0x0071, r1


        OCR2B =0;
    1e94:	10 92 b4 00 	sts	0x00B4, r1
        OCR2A =0;
    1e98:	10 92 b3 00 	sts	0x00B3, r1
        TCNT2 =0;
    1e9c:	10 92 b2 00 	sts	0x00B2, r1
        TCCR2B=0;
    1ea0:	10 92 b1 00 	sts	0x00B1, r1
        TCCR2A=0;
    1ea4:	e0 eb       	ldi	r30, 0xB0	; 176
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	10 82       	st	Z, r1
        TCCR2A=0;
    1eaa:	10 82       	st	Z, r1
        TIFR2=0;
    1eac:	17 ba       	out	0x17, r1	; 23
        TIMSK2=0;
    1eae:	10 92 70 00 	sts	0x0070, r1


	// set all bits to 1 in order to clear
	MCUSR=0xff;
    1eb2:	8f ef       	ldi	r24, 0xFF	; 255
    1eb4:	84 bf       	out	0x34, r24	; 52
    1eb6:	08 95       	ret

00001eb8 <pause>:
    }

}

void pause()
{
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    1ebc:	1f 92       	push	r1
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1ec2:	19 82       	std	Y+1, r1	; 0x01
    1ec4:	89 81       	ldd	r24, Y+1	; 0x01
    1ec6:	84 36       	cpi	r24, 0x64	; 100
    1ec8:	40 f4       	brcc	.+16     	; 0x1eda <pause+0x22>
        nrk_spin_wait_us (2000);
    1eca:	80 ed       	ldi	r24, 0xD0	; 208
    1ecc:	97 e0       	ldi	r25, 0x07	; 7
    1ece:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	8f 5f       	subi	r24, 0xFF	; 255
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	f5 cf       	rjmp	.-22     	; 0x1ec4 <pause+0xc>
        nrk_spin_wait_us (2000);
}
    1eda:	0f 90       	pop	r0
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	08 95       	ret

00001ee2 <blink_dash>:

}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <nrk_led_set>
    pause();
    1eea:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <pause>
    pause();
    1eee:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <pause>
    pause();
    1ef2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <pause>
    nrk_led_clr(GREEN_LED);
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	0e 94 4a 0c 	call	0x1894	; 0x1894 <nrk_led_clr>
    pause();
    1efe:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <pause>

00001f02 <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <nrk_led_set>
    pause();
    1f0a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <pause>
    nrk_led_clr(GREEN_LED);
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	0e 94 4a 0c 	call	0x1894	; 0x1894 <nrk_led_clr>
    pause();
    1f16:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <pause>

00001f1a <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    1f1a:	ff 92       	push	r15
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <blink_morse_code_error+0xc>
    1f26:	1f 92       	push	r1
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    1f2c:	1f 92       	push	r1
    1f2e:	8f 93       	push	r24
    1f30:	86 e3       	ldi	r24, 0x36	; 54
    1f32:	93 e0       	ldi	r25, 0x03	; 3
    1f34:	9f 93       	push	r25
    1f36:	8f 93       	push	r24
    1f38:	8e 01       	movw	r16, r28
    1f3a:	0f 5f       	subi	r16, 0xFF	; 255
    1f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3e:	1f 93       	push	r17
    1f40:	0f 93       	push	r16
    1f42:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <sprintf>

    for(i=0; i<strlen(str); i++ )
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	f1 2c       	mov	r15, r1
    1f54:	f8 01       	movw	r30, r16
    1f56:	01 90       	ld	r0, Z+
    1f58:	00 20       	and	r0, r0
    1f5a:	e9 f7       	brne	.-6      	; 0x1f56 <blink_morse_code_error+0x3c>
    1f5c:	31 97       	sbiw	r30, 0x01	; 1
    1f5e:	e0 1b       	sub	r30, r16
    1f60:	f1 0b       	sbc	r31, r17
    1f62:	8f 2d       	mov	r24, r15
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	8e 17       	cp	r24, r30
    1f68:	9f 07       	cpc	r25, r31
    1f6a:	08 f0       	brcs	.+2      	; 0x1f6e <blink_morse_code_error+0x54>
    1f6c:	5d c0       	rjmp	.+186    	; 0x2028 <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    1f6e:	f8 01       	movw	r30, r16
    1f70:	e8 0f       	add	r30, r24
    1f72:	f9 1f       	adc	r31, r25
    1f74:	e0 81       	ld	r30, Z
    1f76:	8e 2f       	mov	r24, r30
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	f0 97       	sbiw	r30, 0x30	; 48
    1f7e:	ea 30       	cpi	r30, 0x0A	; 10
    1f80:	f1 05       	cpc	r31, r1
    1f82:	08 f0       	brcs	.+2      	; 0x1f86 <blink_morse_code_error+0x6c>
    1f84:	49 c0       	rjmp	.+146    	; 0x2018 <blink_morse_code_error+0xfe>
    1f86:	e6 54       	subi	r30, 0x46	; 70
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__tablejump2__>
        {
        case '0':
            blink_dash();
    1f8e:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <blink_dash>
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    1f94:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <blink_dot>
            blink_dash();
    1f98:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <blink_dash>
            blink_dash();
    1f9c:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <blink_dash>
            blink_dash();
    1fa0:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <blink_dash>
            blink_dash();
    1fa4:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <blink_dash>
            break;
    1fa8:	37 c0       	rjmp	.+110    	; 0x2018 <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    1faa:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <blink_dot>
            blink_dot();
    1fae:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <blink_dot>
    1fb2:	f4 cf       	rjmp	.-24     	; 0x1f9c <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    1fb4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <blink_dot>
            blink_dot();
    1fb8:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <blink_dot>
            blink_dot();
    1fbc:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <blink_dot>
    1fc0:	ef cf       	rjmp	.-34     	; 0x1fa0 <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    1fc2:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <blink_dot>
            blink_dot();
    1fc6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <blink_dot>
            blink_dot();
    1fca:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <blink_dot>
            blink_dot();
    1fce:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <blink_dot>
    1fd2:	e8 cf       	rjmp	.-48     	; 0x1fa4 <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    1fd4:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <blink_dot>
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    1fda:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <blink_dash>
            blink_dot();
    1fde:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <blink_dot>
    1fe2:	04 c0       	rjmp	.+8      	; 0x1fec <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    1fe4:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <blink_dash>
            blink_dash();
    1fe8:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <blink_dash>
            blink_dot();
    1fec:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <blink_dot>
    1ff0:	06 c0       	rjmp	.+12     	; 0x1ffe <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    1ff2:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <blink_dash>
            blink_dash();
    1ff6:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <blink_dash>
            blink_dash();
    1ffa:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <blink_dash>
            blink_dot();
    1ffe:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <blink_dot>
    2002:	08 c0       	rjmp	.+16     	; 0x2014 <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    2004:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <blink_dash>
            blink_dash();
    2008:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <blink_dash>
            blink_dash();
    200c:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <blink_dash>
            blink_dash();
    2010:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <blink_dash>
            blink_dot();
    2014:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <blink_dot>
            break;
        }
        pause();
    2018:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <pause>
        pause();
    201c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <pause>
        pause();
    2020:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    2024:	f3 94       	inc	r15
    2026:	96 cf       	rjmp	.-212    	; 0x1f54 <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	1f 91       	pop	r17
    2034:	0f 91       	pop	r16
    2036:	ff 90       	pop	r15
    2038:	08 95       	ret

0000203a <nrk_error_print>:

}


inline int8_t nrk_error_print ()
{
    203a:	0f 93       	push	r16
    203c:	1f 93       	push	r17
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
uint8_t i,t;




    if (error_num == 0)
    2042:	80 91 2e 04 	lds	r24, 0x042E
    2046:	88 23       	and	r24, r24
    2048:	09 f4       	brne	.+2      	; 0x204c <nrk_error_print+0x12>
    204a:	c2 c0       	rjmp	.+388    	; 0x21d0 <nrk_error_print+0x196>
        return 0;


// If looping, we need to disable the watchdog and interrupts
#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        nrk_int_disable ();
    204c:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <nrk_int_disable>
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
        printf ("%d", error_task);
    2050:	06 e3       	ldi	r16, 0x36	; 54
    2052:	13 e0       	ldi	r17, 0x03	; 3
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    2054:	8e e4       	ldi	r24, 0x4E	; 78
    2056:	94 e0       	ldi	r25, 0x04	; 4
    2058:	0e 94 1e 09 	call	0x123c	; 0x123c <nrk_kprintf>
        printf ("%d", error_task);
    205c:	80 91 81 03 	lds	r24, 0x0381
    2060:	1f 92       	push	r1
    2062:	8f 93       	push	r24
    2064:	1f 93       	push	r17
    2066:	0f 93       	push	r16
    2068:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
        nrk_kprintf (PSTR ("): "));
    206c:	8a e4       	ldi	r24, 0x4A	; 74
    206e:	94 e0       	ldi	r25, 0x04	; 4
    2070:	0e 94 1e 09 	call	0x123c	; 0x123c <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	80 91 2e 04 	lds	r24, 0x042E
    2080:	88 31       	cpi	r24, 0x18	; 24
    2082:	10 f0       	brcs	.+4      	; 0x2088 <nrk_error_print+0x4e>
            error_num = NRK_UNKOWN;
    2084:	10 92 2e 04 	sts	0x042E, r1
        switch (error_num)
    2088:	e0 91 2e 04 	lds	r30, 0x042E
    208c:	8e 2f       	mov	r24, r30
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	fc 01       	movw	r30, r24
    2092:	31 97       	sbiw	r30, 0x01	; 1
    2094:	e6 31       	cpi	r30, 0x16	; 22
    2096:	f1 05       	cpc	r31, r1
    2098:	08 f0       	brcs	.+2      	; 0x209c <nrk_error_print+0x62>
    209a:	46 c0       	rjmp	.+140    	; 0x2128 <nrk_error_print+0xee>
    209c:	ec 53       	subi	r30, 0x3C	; 60
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    20a4:	8e e0       	ldi	r24, 0x0E	; 14
    20a6:	94 e0       	ldi	r25, 0x04	; 4
    20a8:	41 c0       	rjmp	.+130    	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    20aa:	87 ee       	ldi	r24, 0xE7	; 231
    20ac:	93 e0       	ldi	r25, 0x03	; 3
    20ae:	3e c0       	rjmp	.+124    	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    20b0:	83 ed       	ldi	r24, 0xD3	; 211
    20b2:	93 e0       	ldi	r25, 0x03	; 3
    20b4:	3b c0       	rjmp	.+118    	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    20b6:	8d eb       	ldi	r24, 0xBD	; 189
    20b8:	93 e0       	ldi	r25, 0x03	; 3
    20ba:	38 c0       	rjmp	.+112    	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    20bc:	82 ea       	ldi	r24, 0xA2	; 162
    20be:	93 e0       	ldi	r25, 0x03	; 3
    20c0:	35 c0       	rjmp	.+106    	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    20c2:	8c e8       	ldi	r24, 0x8C	; 140
    20c4:	93 e0       	ldi	r25, 0x03	; 3
    20c6:	32 c0       	rjmp	.+100    	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    20c8:	84 e7       	ldi	r24, 0x74	; 116
    20ca:	93 e0       	ldi	r25, 0x03	; 3
    20cc:	2f c0       	rjmp	.+94     	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    20ce:	81 e6       	ldi	r24, 0x61	; 97
    20d0:	93 e0       	ldi	r25, 0x03	; 3
    20d2:	2c c0       	rjmp	.+88     	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    20d4:	8e e4       	ldi	r24, 0x4E	; 78
    20d6:	93 e0       	ldi	r25, 0x03	; 3
    20d8:	29 c0       	rjmp	.+82     	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    20da:	80 e3       	ldi	r24, 0x30	; 48
    20dc:	93 e0       	ldi	r25, 0x03	; 3
    20de:	26 c0       	rjmp	.+76     	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    20e0:	8b e0       	ldi	r24, 0x0B	; 11
    20e2:	93 e0       	ldi	r25, 0x03	; 3
    20e4:	23 c0       	rjmp	.+70     	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    20e6:	8f ef       	ldi	r24, 0xFF	; 255
    20e8:	92 e0       	ldi	r25, 0x02	; 2
    20ea:	20 c0       	rjmp	.+64     	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    20ec:	84 ee       	ldi	r24, 0xE4	; 228
    20ee:	92 e0       	ldi	r25, 0x02	; 2
    20f0:	1d c0       	rjmp	.+58     	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    20f2:	85 ed       	ldi	r24, 0xD5	; 213
    20f4:	92 e0       	ldi	r25, 0x02	; 2
    20f6:	1a c0       	rjmp	.+52     	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    20f8:	81 ec       	ldi	r24, 0xC1	; 193
    20fa:	92 e0       	ldi	r25, 0x02	; 2
    20fc:	17 c0       	rjmp	.+46     	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    20fe:	80 eb       	ldi	r24, 0xB0	; 176
    2100:	92 e0       	ldi	r25, 0x02	; 2
    2102:	14 c0       	rjmp	.+40     	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    2104:	8c e9       	ldi	r24, 0x9C	; 156
    2106:	92 e0       	ldi	r25, 0x02	; 2
    2108:	11 c0       	rjmp	.+34     	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    210a:	8c e7       	ldi	r24, 0x7C	; 124
    210c:	92 e0       	ldi	r25, 0x02	; 2
    210e:	0e c0       	rjmp	.+28     	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    2110:	84 e6       	ldi	r24, 0x64	; 100
    2112:	92 e0       	ldi	r25, 0x02	; 2
    2114:	0b c0       	rjmp	.+22     	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    2116:	89 e4       	ldi	r24, 0x49	; 73
    2118:	92 e0       	ldi	r25, 0x02	; 2
    211a:	08 c0       	rjmp	.+16     	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    211c:	88 e3       	ldi	r24, 0x38	; 56
    211e:	92 e0       	ldi	r25, 0x02	; 2
    2120:	05 c0       	rjmp	.+10     	; 0x212c <nrk_error_print+0xf2>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    2122:	89 e2       	ldi	r24, 0x29	; 41
    2124:	92 e0       	ldi	r25, 0x02	; 2
    2126:	02 c0       	rjmp	.+4      	; 0x212c <nrk_error_print+0xf2>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    2128:	82 e2       	ldi	r24, 0x22	; 34
    212a:	92 e0       	ldi	r25, 0x02	; 2
    212c:	0e 94 1e 09 	call	0x123c	; 0x123c <nrk_kprintf>
        }
        putchar ('\r');
    2130:	60 91 7c 05 	lds	r22, 0x057C
    2134:	70 91 7d 05 	lds	r23, 0x057D
    2138:	8d e0       	ldi	r24, 0x0D	; 13
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <fputc>
        putchar ('\n');
    2140:	60 91 7c 05 	lds	r22, 0x057C
    2144:	70 91 7d 05 	lds	r23, 0x057D
    2148:	8a e0       	ldi	r24, 0x0A	; 10
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <fputc>
    2150:	c4 e1       	ldi	r28, 0x14	; 20


#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
    2152:	82 e0       	ldi	r24, 0x02	; 2
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <nrk_led_set>
            nrk_led_clr (3);
    215a:	83 e0       	ldi	r24, 0x03	; 3
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	0e 94 4a 0c 	call	0x1894	; 0x1894 <nrk_led_clr>
    2162:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2164:	88 ee       	ldi	r24, 0xE8	; 232
    2166:	93 e0       	ldi	r25, 0x03	; 3
    2168:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <nrk_spin_wait_us>
    216c:	d1 50       	subi	r29, 0x01	; 1
#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
        {
            nrk_led_set (2);
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
    216e:	d1 f7       	brne	.-12     	; 0x2164 <nrk_error_print+0x12a>
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
    2170:	83 e0       	ldi	r24, 0x03	; 3
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <nrk_led_set>
            nrk_led_clr (2);
    2178:	82 e0       	ldi	r24, 0x02	; 2
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <nrk_led_clr>
    2180:	d4 e6       	ldi	r29, 0x64	; 100
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
    2182:	88 ee       	ldi	r24, 0xE8	; 232
    2184:	93 e0       	ldi	r25, 0x03	; 3
    2186:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <nrk_spin_wait_us>
    218a:	d1 50       	subi	r29, 0x01	; 1
            nrk_led_clr (3);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
            nrk_led_set (3);
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
    218c:	d1 f7       	brne	.-12     	; 0x2182 <nrk_error_print+0x148>
    218e:	c1 50       	subi	r28, 0x01	; 1
        putchar ('\r');
        putchar ('\n');


#ifdef NRK_HALT_AND_LOOP_ON_ERROR
        for(i=0; i<20; i++ )
    2190:	01 f7       	brne	.-64     	; 0x2152 <nrk_error_print+0x118>
            nrk_led_clr (2);
            for (t = 0; t < 100; t++)
                nrk_spin_wait_us (1000);
        }

        nrk_led_clr(2);
    2192:	82 e0       	ldi	r24, 0x02	; 2
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	0e 94 4a 0c 	call	0x1894	; 0x1894 <nrk_led_clr>
        nrk_led_clr(3);
    219a:	83 e0       	ldi	r24, 0x03	; 3
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	0e 94 4a 0c 	call	0x1894	; 0x1894 <nrk_led_clr>
        blink_morse_code_error( error_task );
    21a2:	80 91 81 03 	lds	r24, 0x0381
    21a6:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <blink_morse_code_error>
        pause();
    21aa:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <pause>
        nrk_led_set(2);
    21ae:	82 e0       	ldi	r24, 0x02	; 2
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <nrk_led_set>
        pause();
    21b6:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <pause>
        nrk_led_clr(2);
    21ba:	82 e0       	ldi	r24, 0x02	; 2
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	0e 94 4a 0c 	call	0x1894	; 0x1894 <nrk_led_clr>
        pause();
    21c2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <pause>
        blink_morse_code_error( error_num);
    21c6:	80 91 2e 04 	lds	r24, 0x042E
    21ca:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <blink_morse_code_error>
}
    21ce:	42 cf       	rjmp	.-380    	; 0x2054 <nrk_error_print+0x1a>


#endif

    return error_num;
}
    21d0:	80 e0       	ldi	r24, 0x00	; 0
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	1f 91       	pop	r17
    21d8:	0f 91       	pop	r16
    21da:	08 95       	ret

000021dc <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    21dc:	80 93 2e 04 	sts	0x042E, r24
    error_task = nrk_cur_task_TCB->task_ID;
    21e0:	e0 91 59 05 	lds	r30, 0x0559
    21e4:	f0 91 5a 05 	lds	r31, 0x055A
    21e8:	80 85       	ldd	r24, Z+8	; 0x08
    21ea:	80 93 81 03 	sts	0x0381, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    21ee:	0e 94 1d 10 	call	0x203a	; 0x203a <nrk_error_print>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    21f2:	10 92 2e 04 	sts	0x042E, r1
    21f6:	08 95       	ret

000021f8 <nrk_kernel_error_add>:

}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    21f8:	80 93 2e 04 	sts	0x042E, r24
    error_task = task;
    21fc:	60 93 81 03 	sts	0x0381, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2200:	0e 94 1d 10 	call	0x203a	; 0x203a <nrk_error_print>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    2204:	10 92 2e 04 	sts	0x042E, r1
    2208:	08 95       	ret

0000220a <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    220a:	6f 92       	push	r6
    220c:	7f 92       	push	r7
    220e:	8f 92       	push	r8
    2210:	9f 92       	push	r9
    2212:	af 92       	push	r10
    2214:	bf 92       	push	r11
    2216:	cf 92       	push	r12
    2218:	df 92       	push	r13
    221a:	ef 92       	push	r14
    221c:	ff 92       	push	r15
    221e:	0f 93       	push	r16
    2220:	1f 93       	push	r17
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    2226:	8a e5       	ldi	r24, 0x5A	; 90
    2228:	94 e0       	ldi	r25, 0x04	; 4
    222a:	0e 94 1e 09 	call	0x123c	; 0x123c <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    222e:	e0 91 59 05 	lds	r30, 0x0559
    2232:	f0 91 5a 05 	lds	r31, 0x055A
    2236:	80 85       	ldd	r24, Z+8	; 0x08
    2238:	28 2f       	mov	r18, r24
    223a:	33 27       	eor	r19, r19
    223c:	27 fd       	sbrc	r18, 7
    223e:	30 95       	com	r19
    2240:	3f 93       	push	r19
    2242:	8f 93       	push	r24
    2244:	89 e3       	ldi	r24, 0x39	; 57
    2246:	93 e0       	ldi	r25, 0x03	; 3
    2248:	9f 93       	push	r25
    224a:	8f 93       	push	r24
    224c:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    2250:	e0 91 59 05 	lds	r30, 0x0559
    2254:	f0 91 5a 05 	lds	r31, 0x055A
    2258:	c2 81       	ldd	r28, Z+2	; 0x02
    225a:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	8d e6       	ldi	r24, 0x6D	; 109
    2262:	93 e0       	ldi	r25, 0x03	; 3
    2264:	9f 93       	push	r25
    2266:	8f 93       	push	r24
    2268:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    printf( "canary = %x ",*stkc );
    226c:	88 81       	ld	r24, Y
    226e:	1f 92       	push	r1
    2270:	8f 93       	push	r24
    2272:	82 e4       	ldi	r24, 0x42	; 66
    2274:	93 e0       	ldi	r25, 0x03	; 3
    2276:	9f 93       	push	r25
    2278:	8f 93       	push	r24
    227a:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    227e:	e0 91 59 05 	lds	r30, 0x0559
    2282:	f0 91 5a 05 	lds	r31, 0x055A
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    2286:	81 81       	ldd	r24, Z+1	; 0x01
    2288:	8f 93       	push	r24
    228a:	80 81       	ld	r24, Z
    228c:	8f 93       	push	r24
    228e:	8f e4       	ldi	r24, 0x4F	; 79
    2290:	93 e0       	ldi	r25, 0x03	; 3
    2292:	9f 93       	push	r25
    2294:	8f 93       	push	r24
    2296:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    229a:	80 91 5a 05 	lds	r24, 0x055A
    229e:	8f 93       	push	r24
    22a0:	80 91 59 05 	lds	r24, 0x0559
    22a4:	8f 93       	push	r24
    22a6:	89 e5       	ldi	r24, 0x59	; 89
    22a8:	93 e0       	ldi	r25, 0x03	; 3
    22aa:	9f 93       	push	r25
    22ac:	8f 93       	push	r24
    22ae:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    22b2:	cd ee       	ldi	r28, 0xED	; 237
    22b4:	d4 e0       	ldi	r29, 0x04	; 4
    22b6:	ed b7       	in	r30, 0x3d	; 61
    22b8:	fe b7       	in	r31, 0x3e	; 62
    22ba:	74 96       	adiw	r30, 0x14	; 20
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	fe bf       	out	0x3e, r31	; 62
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	ed bf       	out	0x3d, r30	; 61
    22c6:	00 e0       	ldi	r16, 0x00	; 0
    22c8:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    22ca:	89 e6       	ldi	r24, 0x69	; 105
    22cc:	68 2e       	mov	r6, r24
    22ce:	83 e0       	ldi	r24, 0x03	; 3
    22d0:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    22d2:	92 e4       	ldi	r25, 0x42	; 66
    22d4:	89 2e       	mov	r8, r25
    22d6:	93 e0       	ldi	r25, 0x03	; 3
    22d8:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    22da:	2f e4       	ldi	r18, 0x4F	; 79
    22dc:	a2 2e       	mov	r10, r18
    22de:	23 e0       	ldi	r18, 0x03	; 3
    22e0:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    22e2:	39 e5       	ldi	r19, 0x59	; 89
    22e4:	c3 2e       	mov	r12, r19
    22e6:	33 e0       	ldi	r19, 0x03	; 3
    22e8:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    22ea:	ea 80       	ldd	r14, Y+2	; 0x02
    22ec:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    22ee:	ff 92       	push	r15
    22f0:	ef 92       	push	r14
    22f2:	1f 93       	push	r17
    22f4:	0f 93       	push	r16
    22f6:	7f 92       	push	r7
    22f8:	6f 92       	push	r6
    22fa:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
        printf( "canary = %x ",*stkc );
    22fe:	f7 01       	movw	r30, r14
    2300:	80 81       	ld	r24, Z
    2302:	1f 92       	push	r1
    2304:	8f 93       	push	r24
    2306:	9f 92       	push	r9
    2308:	8f 92       	push	r8
    230a:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	8f 93       	push	r24
    2312:	88 81       	ld	r24, Y
    2314:	8f 93       	push	r24
    2316:	bf 92       	push	r11
    2318:	af 92       	push	r10
    231a:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	df 92       	push	r13
    2324:	cf 92       	push	r12
    2326:	0e 94 18 26 	call	0x4c30	; 0x4c30 <printf>
    232a:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    232c:	ed b7       	in	r30, 0x3d	; 61
    232e:	fe b7       	in	r31, 0x3e	; 62
    2330:	72 96       	adiw	r30, 0x12	; 18
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	f8 94       	cli
    2336:	fe bf       	out	0x3e, r31	; 62
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	ed bf       	out	0x3d, r30	; 61
    233c:	01 30       	cpi	r16, 0x01	; 1
    233e:	11 05       	cpc	r17, r1
    2340:	19 f0       	breq	.+6      	; 0x2348 <dump_stack_info+0x13e>
    2342:	01 e0       	ldi	r16, 0x01	; 1
    2344:	10 e0       	ldi	r17, 0x00	; 0
    2346:	d1 cf       	rjmp	.-94     	; 0x22ea <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	1f 91       	pop	r17
    234e:	0f 91       	pop	r16
    2350:	ff 90       	pop	r15
    2352:	ef 90       	pop	r14
    2354:	df 90       	pop	r13
    2356:	cf 90       	pop	r12
    2358:	bf 90       	pop	r11
    235a:	af 90       	pop	r10
    235c:	9f 90       	pop	r9
    235e:	8f 90       	pop	r8
    2360:	7f 90       	pop	r7
    2362:	6f 90       	pop	r6
    2364:	08 95       	ret

00002366 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    236a:	e0 91 59 05 	lds	r30, 0x0559
    236e:	f0 91 5a 05 	lds	r31, 0x055A
    2372:	c2 81       	ldd	r28, Z+2	; 0x02
    2374:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2376:	88 81       	ld	r24, Y
    2378:	85 35       	cpi	r24, 0x55	; 85
    237a:	39 f0       	breq	.+14     	; 0x238a <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    237c:	0e 94 05 11 	call	0x220a	; 0x220a <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	0e 94 ee 10 	call	0x21dc	; 0x21dc <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    2386:	85 e5       	ldi	r24, 0x55	; 85
    2388:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    238a:	e0 91 59 05 	lds	r30, 0x0559
    238e:	f0 91 5a 05 	lds	r31, 0x055A
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2392:	80 81       	ld	r24, Z
    2394:	91 81       	ldd	r25, Z+1	; 0x01
    2396:	81 15       	cp	r24, r1
    2398:	92 44       	sbci	r25, 0x42	; 66
    239a:	38 f0       	brcs	.+14     	; 0x23aa <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    239c:	0e 94 05 11 	call	0x220a	; 0x220a <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    23a0:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    23a2:	df 91       	pop	r29
    23a4:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    23a6:	0c 94 ee 10 	jmp	0x21dc	; 0x21dc <nrk_error_add>




#endif
}
    23aa:	df 91       	pop	r29
    23ac:	cf 91       	pop	r28
    23ae:	08 95       	ret

000023b0 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    23b0:	2b e2       	ldi	r18, 0x2B	; 43
    23b2:	82 02       	muls	r24, r18
    23b4:	c0 01       	movw	r24, r0
    23b6:	11 24       	eor	r1, r1
    23b8:	fc 01       	movw	r30, r24
    23ba:	e3 51       	subi	r30, 0x13	; 19
    23bc:	fb 4f       	sbci	r31, 0xFB	; 251
    23be:	a2 81       	ldd	r26, Z+2	; 0x02
    23c0:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    23c2:	8c 91       	ld	r24, X
    23c4:	85 35       	cpi	r24, 0x55	; 85
    23c6:	19 f0       	breq	.+6      	; 0x23ce <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    23c8:	85 e5       	ldi	r24, 0x55	; 85
    23ca:	8c 93       	st	X, r24
    23cc:	08 c0       	rjmp	.+16     	; 0x23de <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    23ce:	80 81       	ld	r24, Z
    23d0:	91 81       	ldd	r25, Z+1	; 0x01
    23d2:	81 15       	cp	r24, r1
    23d4:	92 44       	sbci	r25, 0x42	; 66
    23d6:	28 f0       	brcs	.+10     	; 0x23e2 <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    23d8:	82 e1       	ldi	r24, 0x12	; 18
    23da:	0e 94 ee 10 	call	0x21dc	; 0x21dc <nrk_error_add>
        return NRK_ERROR;
    23de:	8f ef       	ldi	r24, 0xFF	; 255
    23e0:	08 95       	ret
    }
#endif
    return NRK_OK;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
}
    23e4:	08 95       	ret

000023e6 <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    23e6:	0f 93       	push	r16
    23e8:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    23ea:	40 91 a6 03 	lds	r20, 0x03A6
    23ee:	50 91 a7 03 	lds	r21, 0x03A7
    23f2:	60 91 a8 03 	lds	r22, 0x03A8
    23f6:	70 91 a9 03 	lds	r23, 0x03A9
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	8a 01       	movw	r16, r20
    2400:	9b 01       	movw	r18, r22
    2402:	08 2e       	mov	r0, r24
    2404:	04 c0       	rjmp	.+8      	; 0x240e <nrk_signal_create+0x28>
    2406:	36 95       	lsr	r19
    2408:	27 95       	ror	r18
    240a:	17 95       	ror	r17
    240c:	07 95       	ror	r16
    240e:	0a 94       	dec	r0
    2410:	d2 f7       	brpl	.-12     	; 0x2406 <nrk_signal_create+0x20>
    2412:	00 fd       	sbrc	r16, 0
    2414:	19 c0       	rjmp	.+50     	; 0x2448 <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    2416:	01 e0       	ldi	r16, 0x01	; 1
    2418:	10 e0       	ldi	r17, 0x00	; 0
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	08 2e       	mov	r0, r24
    2420:	04 c0       	rjmp	.+8      	; 0x242a <nrk_signal_create+0x44>
    2422:	00 0f       	add	r16, r16
    2424:	11 1f       	adc	r17, r17
    2426:	22 1f       	adc	r18, r18
    2428:	33 1f       	adc	r19, r19
    242a:	0a 94       	dec	r0
    242c:	d2 f7       	brpl	.-12     	; 0x2422 <nrk_signal_create+0x3c>
    242e:	40 2b       	or	r20, r16
    2430:	51 2b       	or	r21, r17
    2432:	62 2b       	or	r22, r18
    2434:	73 2b       	or	r23, r19
    2436:	40 93 a6 03 	sts	0x03A6, r20
    243a:	50 93 a7 03 	sts	0x03A7, r21
    243e:	60 93 a8 03 	sts	0x03A8, r22
    2442:	70 93 a9 03 	sts	0x03A9, r23
			return i;
    2446:	05 c0       	rjmp	.+10     	; 0x2452 <nrk_signal_create+0x6c>
    2448:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    244a:	80 32       	cpi	r24, 0x20	; 32
    244c:	91 05       	cpc	r25, r1
    244e:	b9 f6       	brne	.-82     	; 0x23fe <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    2450:	8f ef       	ldi	r24, 0xFF	; 255


}
    2452:	1f 91       	pop	r17
    2454:	0f 91       	pop	r16
    2456:	08 95       	ret

00002458 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    2458:	e0 91 59 05 	lds	r30, 0x0559
    245c:	f0 91 5a 05 	lds	r31, 0x055A
    2460:	65 85       	ldd	r22, Z+13	; 0x0d
    2462:	76 85       	ldd	r23, Z+14	; 0x0e
    2464:	87 85       	ldd	r24, Z+15	; 0x0f
    2466:	90 89       	ldd	r25, Z+16	; 0x10
}
    2468:	08 95       	ret

0000246a <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    246a:	cf 92       	push	r12
    246c:	df 92       	push	r13
    246e:	ef 92       	push	r14
    2470:	ff 92       	push	r15
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	cf 93       	push	r28
    2478:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    247a:	c1 2c       	mov	r12, r1
    247c:	d1 2c       	mov	r13, r1
    247e:	76 01       	movw	r14, r12
    2480:	c3 94       	inc	r12
    2482:	08 2e       	mov	r0, r24
    2484:	04 c0       	rjmp	.+8      	; 0x248e <nrk_signal_delete+0x24>
    2486:	cc 0c       	add	r12, r12
    2488:	dd 1c       	adc	r13, r13
    248a:	ee 1c       	adc	r14, r14
    248c:	ff 1c       	adc	r15, r15
    248e:	0a 94       	dec	r0
    2490:	d2 f7       	brpl	.-12     	; 0x2486 <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2492:	40 91 a6 03 	lds	r20, 0x03A6
    2496:	50 91 a7 03 	lds	r21, 0x03A7
    249a:	60 91 a8 03 	lds	r22, 0x03A8
    249e:	70 91 a9 03 	lds	r23, 0x03A9
    24a2:	4c 21       	and	r20, r12
    24a4:	5d 21       	and	r21, r13
    24a6:	6e 21       	and	r22, r14
    24a8:	7f 21       	and	r23, r15
    24aa:	45 2b       	or	r20, r21
    24ac:	46 2b       	or	r20, r22
    24ae:	47 2b       	or	r20, r23
    24b0:	09 f4       	brne	.+2      	; 0x24b4 <nrk_signal_delete+0x4a>
    24b2:	60 c0       	rjmp	.+192    	; 0x2574 <nrk_signal_delete+0x10a>
    24b4:	08 2f       	mov	r16, r24

	nrk_int_disable();
    24b6:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <nrk_int_disable>
    24ba:	e6 ef       	ldi	r30, 0xF6	; 246
    24bc:	f4 e0       	ldi	r31, 0x04	; 4
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    24be:	b7 01       	movw	r22, r14
    24c0:	a6 01       	movw	r20, r12
    24c2:	40 95       	com	r20
    24c4:	50 95       	com	r21
    24c6:	60 95       	com	r22
    24c8:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    24ca:	13 e0       	ldi	r17, 0x03	; 3
    24cc:	df 01       	movw	r26, r30
    24ce:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    24d0:	8c 91       	ld	r24, X
    24d2:	8f 3f       	cpi	r24, 0xFF	; 255
    24d4:	39 f1       	breq	.+78     	; 0x2524 <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    24d6:	84 81       	ldd	r24, Z+4	; 0x04
    24d8:	95 81       	ldd	r25, Z+5	; 0x05
    24da:	a6 81       	ldd	r26, Z+6	; 0x06
    24dc:	b7 81       	ldd	r27, Z+7	; 0x07
    24de:	8c 15       	cp	r24, r12
    24e0:	9d 05       	cpc	r25, r13
    24e2:	ae 05       	cpc	r26, r14
    24e4:	bf 05       	cpc	r27, r15
    24e6:	51 f4       	brne	.+20     	; 0x24fc <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    24e8:	10 86       	std	Z+8, r1	; 0x08
    24ea:	11 86       	std	Z+9, r1	; 0x09
    24ec:	12 86       	std	Z+10, r1	; 0x0a
    24ee:	13 86       	std	Z+11, r1	; 0x0b
    24f0:	9f 01       	movw	r18, r30
    24f2:	22 50       	subi	r18, 0x02	; 2
    24f4:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    24f6:	e9 01       	movw	r28, r18
    24f8:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    24fa:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    24fc:	84 23       	and	r24, r20
    24fe:	95 23       	and	r25, r21
    2500:	a6 23       	and	r26, r22
    2502:	b7 23       	and	r27, r23
    2504:	84 83       	std	Z+4, r24	; 0x04
    2506:	95 83       	std	Z+5, r25	; 0x05
    2508:	a6 83       	std	Z+6, r26	; 0x06
    250a:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    250c:	80 85       	ldd	r24, Z+8	; 0x08
    250e:	91 85       	ldd	r25, Z+9	; 0x09
    2510:	a2 85       	ldd	r26, Z+10	; 0x0a
    2512:	b3 85       	ldd	r27, Z+11	; 0x0b
    2514:	84 23       	and	r24, r20
    2516:	95 23       	and	r25, r21
    2518:	a6 23       	and	r26, r22
    251a:	b7 23       	and	r27, r23
    251c:	80 87       	std	Z+8, r24	; 0x08
    251e:	91 87       	std	Z+9, r25	; 0x09
    2520:	a2 87       	std	Z+10, r26	; 0x0a
    2522:	b3 87       	std	Z+11, r27	; 0x0b
    2524:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2526:	d5 e0       	ldi	r29, 0x05	; 5
    2528:	ec 34       	cpi	r30, 0x4C	; 76
    252a:	fd 07       	cpc	r31, r29
    252c:	79 f6       	brne	.-98     	; 0x24cc <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    252e:	8e ef       	ldi	r24, 0xFE	; 254
    2530:	9f ef       	ldi	r25, 0xFF	; 255
    2532:	af ef       	ldi	r26, 0xFF	; 255
    2534:	bf ef       	ldi	r27, 0xFF	; 255
    2536:	04 c0       	rjmp	.+8      	; 0x2540 <nrk_signal_delete+0xd6>
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	aa 1f       	adc	r26, r26
    253e:	bb 1f       	adc	r27, r27
    2540:	0a 95       	dec	r16
    2542:	d2 f7       	brpl	.-12     	; 0x2538 <nrk_signal_delete+0xce>
    2544:	40 91 a6 03 	lds	r20, 0x03A6
    2548:	50 91 a7 03 	lds	r21, 0x03A7
    254c:	60 91 a8 03 	lds	r22, 0x03A8
    2550:	70 91 a9 03 	lds	r23, 0x03A9
    2554:	84 23       	and	r24, r20
    2556:	95 23       	and	r25, r21
    2558:	a6 23       	and	r26, r22
    255a:	b7 23       	and	r27, r23
    255c:	80 93 a6 03 	sts	0x03A6, r24
    2560:	90 93 a7 03 	sts	0x03A7, r25
    2564:	a0 93 a8 03 	sts	0x03A8, r26
    2568:	b0 93 a9 03 	sts	0x03A9, r27
	nrk_int_enable();
    256c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <nrk_int_enable>

	return NRK_OK;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	01 c0       	rjmp	.+2      	; 0x2576 <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2574:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	ef 90       	pop	r14
    2582:	df 90       	pop	r13
    2584:	cf 90       	pop	r12
    2586:	08 95       	ret

00002588 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    2588:	0f 93       	push	r16
    258a:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    258c:	41 e0       	ldi	r20, 0x01	; 1
    258e:	50 e0       	ldi	r21, 0x00	; 0
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	70 e0       	ldi	r23, 0x00	; 0
    2594:	8a 01       	movw	r16, r20
    2596:	9b 01       	movw	r18, r22
    2598:	04 c0       	rjmp	.+8      	; 0x25a2 <nrk_signal_unregister+0x1a>
    259a:	00 0f       	add	r16, r16
    259c:	11 1f       	adc	r17, r17
    259e:	22 1f       	adc	r18, r18
    25a0:	33 1f       	adc	r19, r19
    25a2:	8a 95       	dec	r24
    25a4:	d2 f7       	brpl	.-12     	; 0x259a <nrk_signal_unregister+0x12>
    25a6:	d9 01       	movw	r26, r18
    25a8:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    25aa:	e0 91 59 05 	lds	r30, 0x0559
    25ae:	f0 91 5a 05 	lds	r31, 0x055A
    25b2:	45 85       	ldd	r20, Z+13	; 0x0d
    25b4:	56 85       	ldd	r21, Z+14	; 0x0e
    25b6:	67 85       	ldd	r22, Z+15	; 0x0f
    25b8:	70 89       	ldd	r23, Z+16	; 0x10
    25ba:	04 23       	and	r16, r20
    25bc:	15 23       	and	r17, r21
    25be:	26 23       	and	r18, r22
    25c0:	37 23       	and	r19, r23
    25c2:	01 2b       	or	r16, r17
    25c4:	02 2b       	or	r16, r18
    25c6:	03 2b       	or	r16, r19
    25c8:	d1 f0       	breq	.+52     	; 0x25fe <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    25ca:	80 95       	com	r24
    25cc:	90 95       	com	r25
    25ce:	a0 95       	com	r26
    25d0:	b0 95       	com	r27
    25d2:	48 23       	and	r20, r24
    25d4:	59 23       	and	r21, r25
    25d6:	6a 23       	and	r22, r26
    25d8:	7b 23       	and	r23, r27
    25da:	45 87       	std	Z+13, r20	; 0x0d
    25dc:	56 87       	std	Z+14, r21	; 0x0e
    25de:	67 87       	std	Z+15, r22	; 0x0f
    25e0:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    25e2:	41 89       	ldd	r20, Z+17	; 0x11
    25e4:	52 89       	ldd	r21, Z+18	; 0x12
    25e6:	63 89       	ldd	r22, Z+19	; 0x13
    25e8:	74 89       	ldd	r23, Z+20	; 0x14
    25ea:	84 23       	and	r24, r20
    25ec:	95 23       	and	r25, r21
    25ee:	a6 23       	and	r26, r22
    25f0:	b7 23       	and	r27, r23
    25f2:	81 8b       	std	Z+17, r24	; 0x11
    25f4:	92 8b       	std	Z+18, r25	; 0x12
    25f6:	a3 8b       	std	Z+19, r26	; 0x13
    25f8:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	01 c0       	rjmp	.+2      	; 0x2600 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    25fe:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    2600:	1f 91       	pop	r17
    2602:	0f 91       	pop	r16
    2604:	08 95       	ret

00002606 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    2606:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    2608:	40 91 a6 03 	lds	r20, 0x03A6
    260c:	50 91 a7 03 	lds	r21, 0x03A7
    2610:	60 91 a8 03 	lds	r22, 0x03A8
    2614:	70 91 a9 03 	lds	r23, 0x03A9
    2618:	08 2e       	mov	r0, r24
    261a:	04 c0       	rjmp	.+8      	; 0x2624 <nrk_signal_register+0x1e>
    261c:	76 95       	lsr	r23
    261e:	67 95       	ror	r22
    2620:	57 95       	ror	r21
    2622:	47 95       	ror	r20
    2624:	0a 94       	dec	r0
    2626:	d2 f7       	brpl	.-12     	; 0x261c <nrk_signal_register+0x16>
    2628:	40 ff       	sbrs	r20, 0
    262a:	1d c0       	rjmp	.+58     	; 0x2666 <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    262c:	e0 91 59 05 	lds	r30, 0x0559
    2630:	f0 91 5a 05 	lds	r31, 0x055A
    2634:	81 e0       	ldi	r24, 0x01	; 1
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	a0 e0       	ldi	r26, 0x00	; 0
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	04 c0       	rjmp	.+8      	; 0x2646 <nrk_signal_register+0x40>
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	aa 1f       	adc	r26, r26
    2644:	bb 1f       	adc	r27, r27
    2646:	2a 95       	dec	r18
    2648:	d2 f7       	brpl	.-12     	; 0x263e <nrk_signal_register+0x38>
    264a:	45 85       	ldd	r20, Z+13	; 0x0d
    264c:	56 85       	ldd	r21, Z+14	; 0x0e
    264e:	67 85       	ldd	r22, Z+15	; 0x0f
    2650:	70 89       	ldd	r23, Z+16	; 0x10
    2652:	84 2b       	or	r24, r20
    2654:	95 2b       	or	r25, r21
    2656:	a6 2b       	or	r26, r22
    2658:	b7 2b       	or	r27, r23
    265a:	85 87       	std	Z+13, r24	; 0x0d
    265c:	96 87       	std	Z+14, r25	; 0x0e
    265e:	a7 87       	std	Z+15, r26	; 0x0f
    2660:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	08 95       	ret
	}
            
	return NRK_ERROR;
    2666:	8f ef       	ldi	r24, 0xFF	; 255
}
    2668:	08 95       	ret

0000266a <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    266a:	cf 92       	push	r12
    266c:	df 92       	push	r13
    266e:	ef 92       	push	r14
    2670:	ff 92       	push	r15
    2672:	cf 93       	push	r28
	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;
    uint8_t timer;

	sig_mask=SIG(sig_id);
    2674:	c1 2c       	mov	r12, r1
    2676:	d1 2c       	mov	r13, r1
    2678:	76 01       	movw	r14, r12
    267a:	c3 94       	inc	r12
    267c:	04 c0       	rjmp	.+8      	; 0x2686 <nrk_event_signal+0x1c>
    267e:	cc 0c       	add	r12, r12
    2680:	dd 1c       	adc	r13, r13
    2682:	ee 1c       	adc	r14, r14
    2684:	ff 1c       	adc	r15, r15
    2686:	8a 95       	dec	r24
    2688:	d2 f7       	brpl	.-12     	; 0x267e <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    268a:	80 91 a6 03 	lds	r24, 0x03A6
    268e:	90 91 a7 03 	lds	r25, 0x03A7
    2692:	a0 91 a8 03 	lds	r26, 0x03A8
    2696:	b0 91 a9 03 	lds	r27, 0x03A9
    269a:	8c 21       	and	r24, r12
    269c:	9d 21       	and	r25, r13
    269e:	ae 21       	and	r26, r14
    26a0:	bf 21       	and	r27, r15
    26a2:	89 2b       	or	r24, r25
    26a4:	8a 2b       	or	r24, r26
    26a6:	8b 2b       	or	r24, r27
    26a8:	11 f4       	brne	.+4      	; 0x26ae <nrk_event_signal+0x44>
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	44 c0       	rjmp	.+136    	; 0x2736 <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    26ae:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <nrk_int_disable>
    26b2:	e4 ef       	ldi	r30, 0xF4	; 244
    26b4:	f4 e0       	ldi	r31, 0x04	; 4
    26b6:	a6 ef       	ldi	r26, 0xF6	; 246
    26b8:	b4 e0       	ldi	r27, 0x04	; 4

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    26ba:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    26bc:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    26be:	90 81       	ld	r25, Z
    26c0:	91 30       	cpi	r25, 0x01	; 1
    26c2:	b9 f4       	brne	.+46     	; 0x26f2 <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    26c4:	42 85       	ldd	r20, Z+10	; 0x0a
    26c6:	53 85       	ldd	r21, Z+11	; 0x0b
    26c8:	64 85       	ldd	r22, Z+12	; 0x0c
    26ca:	75 85       	ldd	r23, Z+13	; 0x0d
    26cc:	4c 21       	and	r20, r12
    26ce:	5d 21       	and	r21, r13
    26d0:	6e 21       	and	r22, r14
    26d2:	7f 21       	and	r23, r15
    26d4:	45 2b       	or	r20, r21
    26d6:	46 2b       	or	r20, r22
    26d8:	47 2b       	or	r20, r23
    26da:	59 f0       	breq	.+22     	; 0x26f2 <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    26dc:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    26de:	16 86       	std	Z+14, r1	; 0x0e
    26e0:	17 86       	std	Z+15, r1	; 0x0f
    26e2:	10 8a       	std	Z+16, r1	; 0x10
    26e4:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    26e6:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    26e8:	c2 86       	std	Z+10, r12	; 0x0a
    26ea:	d3 86       	std	Z+11, r13	; 0x0b
    26ec:	e4 86       	std	Z+12, r14	; 0x0c
    26ee:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    26f0:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    26f2:	90 81       	ld	r25, Z
    26f4:	92 30       	cpi	r25, 0x02	; 2
    26f6:	a1 f4       	brne	.+40     	; 0x2720 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    26f8:	42 85       	ldd	r20, Z+10	; 0x0a
    26fa:	53 85       	ldd	r21, Z+11	; 0x0b
    26fc:	64 85       	ldd	r22, Z+12	; 0x0c
    26fe:	75 85       	ldd	r23, Z+13	; 0x0d
    2700:	4c 15       	cp	r20, r12
    2702:	5d 05       	cpc	r21, r13
    2704:	6e 05       	cpc	r22, r14
    2706:	7f 05       	cpc	r23, r15
    2708:	59 f4       	brne	.+22     	; 0x2720 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    270a:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    270c:	16 86       	std	Z+14, r1	; 0x0e
    270e:	17 86       	std	Z+15, r1	; 0x0f
    2710:	10 8a       	std	Z+16, r1	; 0x10
    2712:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    2714:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2716:	12 86       	std	Z+10, r1	; 0x0a
    2718:	13 86       	std	Z+11, r1	; 0x0b
    271a:	14 86       	std	Z+12, r1	; 0x0c
    271c:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    271e:	c1 e0       	ldi	r28, 0x01	; 1
    2720:	bb 96       	adiw	r30, 0x2b	; 43
    2722:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2724:	95 e0       	ldi	r25, 0x05	; 5
    2726:	ea 34       	cpi	r30, 0x4A	; 74
    2728:	f9 07       	cpc	r31, r25
    272a:	49 f6       	brne	.-110    	; 0x26be <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    272c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <nrk_int_enable>
	if(event_occured)
    2730:	c1 11       	cpse	r28, r1
    2732:	05 c0       	rjmp	.+10     	; 0x273e <nrk_event_signal+0xd4>
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    2734:	82 e0       	ldi	r24, 0x02	; 2
    2736:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_nrk_errno_set>
	return NRK_ERROR;
    273a:	8f ef       	ldi	r24, 0xFF	; 255
    273c:	01 c0       	rjmp	.+2      	; 0x2740 <nrk_event_signal+0xd6>
            			_nrk_set_next_wakeup (timer);
			}	
		else
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
    273e:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    2740:	cf 91       	pop	r28
    2742:	ff 90       	pop	r15
    2744:	ef 90       	pop	r14
    2746:	df 90       	pop	r13
    2748:	cf 90       	pop	r12
    274a:	08 95       	ret

0000274c <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    274c:	0f 93       	push	r16
    274e:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    2750:	e0 91 59 05 	lds	r30, 0x0559
    2754:	f0 91 5a 05 	lds	r31, 0x055A
    2758:	05 85       	ldd	r16, Z+13	; 0x0d
    275a:	16 85       	ldd	r17, Z+14	; 0x0e
    275c:	27 85       	ldd	r18, Z+15	; 0x0f
    275e:	30 89       	ldd	r19, Z+16	; 0x10
    2760:	06 23       	and	r16, r22
    2762:	17 23       	and	r17, r23
    2764:	28 23       	and	r18, r24
    2766:	39 23       	and	r19, r25
    2768:	01 15       	cp	r16, r1
    276a:	11 05       	cpc	r17, r1
    276c:	21 05       	cpc	r18, r1
    276e:	31 05       	cpc	r19, r1
    2770:	11 f1       	breq	.+68     	; 0x27b6 <nrk_event_wait+0x6a>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    2776:	81 8b       	std	Z+17, r24	; 0x11
    2778:	92 8b       	std	Z+18, r25	; 0x12
    277a:	a3 8b       	std	Z+19, r26	; 0x13
    277c:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    277e:	21 e0       	ldi	r18, 0x01	; 1
    2780:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    2782:	00 90 49 05 	lds	r0, 0x0549
    2786:	04 c0       	rjmp	.+8      	; 0x2790 <nrk_event_wait+0x44>
    2788:	b6 95       	lsr	r27
    278a:	a7 95       	ror	r26
    278c:	97 95       	ror	r25
    278e:	87 95       	ror	r24
    2790:	0a 94       	dec	r0
    2792:	d2 f7       	brpl	.-12     	; 0x2788 <nrk_event_wait+0x3c>
    2794:	80 ff       	sbrs	r24, 0
    2796:	03 c0       	rjmp	.+6      	; 0x279e <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    2798:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <nrk_wait_until_nw>
    279c:	04 c0       	rjmp	.+8      	; 0x27a6 <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    27a6:	e0 91 59 05 	lds	r30, 0x0559
    27aa:	f0 91 5a 05 	lds	r31, 0x055A
    27ae:	01 89       	ldd	r16, Z+17	; 0x11
    27b0:	12 89       	ldd	r17, Z+18	; 0x12
    27b2:	23 89       	ldd	r18, Z+19	; 0x13
    27b4:	34 89       	ldd	r19, Z+20	; 0x14
}
    27b6:	c9 01       	movw	r24, r18
    27b8:	b8 01       	movw	r22, r16
    27ba:	1f 91       	pop	r17
    27bc:	0f 91       	pop	r16
    27be:	08 95       	ret

000027c0 <nrk_sem_create>:
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	08 95       	ret

000027c6 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    27c6:	21 e0       	ldi	r18, 0x01	; 1
    27c8:	85 54       	subi	r24, 0x45	; 69
    27ca:	95 40       	sbci	r25, 0x05	; 5
    27cc:	09 f4       	brne	.+2      	; 0x27d0 <nrk_get_resource_index+0xa>
    27ce:	20 e0       	ldi	r18, 0x00	; 0
				return id;
	return NRK_ERROR;
}
    27d0:	82 2f       	mov	r24, r18
    27d2:	81 95       	neg	r24
    27d4:	08 95       	ret

000027d6 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    27d6:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    27da:	8f 3f       	cpi	r24, 0xFF	; 255
    27dc:	11 f4       	brne	.+4      	; 0x27e2 <nrk_sem_query+0xc>
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	03 c0       	rjmp	.+6      	; 0x27e8 <nrk_sem_query+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    27e2:	81 30       	cpi	r24, 0x01	; 1
    27e4:	29 f4       	brne	.+10     	; 0x27f0 <nrk_sem_query+0x1a>
    27e6:	82 e0       	ldi	r24, 0x02	; 2
    27e8:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_nrk_errno_set>
    27ec:	8f ef       	ldi	r24, 0xFF	; 255
    27ee:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    27f0:	99 27       	eor	r25, r25
    27f2:	87 fd       	sbrc	r24, 7
    27f4:	90 95       	com	r25
    27f6:	fc 01       	movw	r30, r24
    27f8:	ee 0f       	add	r30, r30
    27fa:	ff 1f       	adc	r31, r31
    27fc:	8e 0f       	add	r24, r30
    27fe:	9f 1f       	adc	r25, r31
    2800:	fc 01       	movw	r30, r24
    2802:	eb 5b       	subi	r30, 0xBB	; 187
    2804:	fa 4f       	sbci	r31, 0xFA	; 250
    2806:	82 81       	ldd	r24, Z+2	; 0x02
}
    2808:	08 95       	ret

0000280a <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    280a:	ef 92       	push	r14
    280c:	ff 92       	push	r15
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	1f 92       	push	r1
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    281c:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2820:	8f 3f       	cpi	r24, 0xFF	; 255
    2822:	11 f4       	brne	.+4      	; 0x2828 <nrk_sem_pend+0x1e>
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	03 c0       	rjmp	.+6      	; 0x282e <nrk_sem_pend+0x24>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2828:	81 30       	cpi	r24, 0x01	; 1
    282a:	29 f4       	brne	.+10     	; 0x2836 <nrk_sem_pend+0x2c>
    282c:	82 e0       	ldi	r24, 0x02	; 2
    282e:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_nrk_errno_set>
    2832:	8f ef       	ldi	r24, 0xFF	; 255
    2834:	41 c0       	rjmp	.+130    	; 0x28b8 <nrk_sem_pend+0xae>
	
	nrk_int_disable();
    2836:	89 83       	std	Y+1, r24	; 0x01
    2838:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	e8 2e       	mov	r14, r24
    2840:	ff 24       	eor	r15, r15
    2842:	e7 fc       	sbrc	r14, 7
    2844:	f0 94       	com	r15
    2846:	87 01       	movw	r16, r14
    2848:	00 0f       	add	r16, r16
    284a:	11 1f       	adc	r17, r17
    284c:	f8 01       	movw	r30, r16
    284e:	ee 0d       	add	r30, r14
    2850:	ff 1d       	adc	r31, r15
    2852:	eb 5b       	subi	r30, 0xBB	; 187
    2854:	fa 4f       	sbci	r31, 0xFA	; 250
    2856:	92 81       	ldd	r25, Z+2	; 0x02
    2858:	91 11       	cpse	r25, r1
    285a:	16 c0       	rjmp	.+44     	; 0x2888 <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    285c:	e0 91 59 05 	lds	r30, 0x0559
    2860:	f0 91 5a 05 	lds	r31, 0x055A
    2864:	97 81       	ldd	r25, Z+7	; 0x07
    2866:	92 60       	ori	r25, 0x02	; 2
    2868:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    286a:	99 27       	eor	r25, r25
    286c:	87 fd       	sbrc	r24, 7
    286e:	90 95       	com	r25
    2870:	a9 2f       	mov	r26, r25
    2872:	b9 2f       	mov	r27, r25
    2874:	81 8b       	std	Z+17, r24	; 0x11
    2876:	92 8b       	std	Z+18, r25	; 0x12
    2878:	a3 8b       	std	Z+19, r26	; 0x13
    287a:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    287c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    2888:	0e 0d       	add	r16, r14
    288a:	1f 1d       	adc	r17, r15
    288c:	d8 01       	movw	r26, r16
    288e:	ab 5b       	subi	r26, 0xBB	; 187
    2890:	ba 4f       	sbci	r27, 0xFA	; 250
    2892:	12 96       	adiw	r26, 0x02	; 2
    2894:	8c 91       	ld	r24, X
    2896:	12 97       	sbiw	r26, 0x02	; 2
    2898:	81 50       	subi	r24, 0x01	; 1
    289a:	12 96       	adiw	r26, 0x02	; 2
    289c:	8c 93       	st	X, r24
    289e:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    28a0:	e0 91 59 05 	lds	r30, 0x0559
    28a4:	f0 91 5a 05 	lds	r31, 0x055A
    28a8:	11 96       	adiw	r26, 0x01	; 1
    28aa:	8c 91       	ld	r24, X
    28ac:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    28b2:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <nrk_int_enable>

	return NRK_OK;
    28b6:	81 e0       	ldi	r24, 0x01	; 1
}
    28b8:	0f 90       	pop	r0
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	1f 91       	pop	r17
    28c0:	0f 91       	pop	r16
    28c2:	ff 90       	pop	r15
    28c4:	ef 90       	pop	r14
    28c6:	08 95       	ret

000028c8 <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    28c8:	0f 93       	push	r16
    28ca:	1f 93       	push	r17
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
    28d0:	1f 92       	push	r1
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    28d6:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    28da:	8f 3f       	cpi	r24, 0xFF	; 255
    28dc:	11 f4       	brne	.+4      	; 0x28e2 <nrk_sem_post+0x1a>
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	03 c0       	rjmp	.+6      	; 0x28e8 <nrk_sem_post+0x20>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    28e2:	81 30       	cpi	r24, 0x01	; 1
    28e4:	29 f4       	brne	.+10     	; 0x28f0 <nrk_sem_post+0x28>
    28e6:	82 e0       	ldi	r24, 0x02	; 2
    28e8:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_nrk_errno_set>
    28ec:	8f ef       	ldi	r24, 0xFF	; 255
    28ee:	79 c0       	rjmp	.+242    	; 0x29e2 <nrk_sem_post+0x11a>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    28f0:	48 2f       	mov	r20, r24
    28f2:	55 27       	eor	r21, r21
    28f4:	47 fd       	sbrc	r20, 7
    28f6:	50 95       	com	r21
    28f8:	9a 01       	movw	r18, r20
    28fa:	22 0f       	add	r18, r18
    28fc:	33 1f       	adc	r19, r19
    28fe:	24 0f       	add	r18, r20
    2900:	35 1f       	adc	r19, r21
    2902:	89 01       	movw	r16, r18
    2904:	0b 5b       	subi	r16, 0xBB	; 187
    2906:	1a 4f       	sbci	r17, 0xFA	; 250
    2908:	f8 01       	movw	r30, r16
    290a:	22 81       	ldd	r18, Z+2	; 0x02
    290c:	90 81       	ld	r25, Z
    290e:	29 17       	cp	r18, r25
    2910:	0c f0       	brlt	.+2      	; 0x2914 <nrk_sem_post+0x4c>
    2912:	66 c0       	rjmp	.+204    	; 0x29e0 <nrk_sem_post+0x118>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    2914:	89 83       	std	Y+1, r24	; 0x01
    2916:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <nrk_int_disable>

		nrk_sem_list[id].value++;
    291a:	f8 01       	movw	r30, r16
    291c:	92 81       	ldd	r25, Z+2	; 0x02
    291e:	9f 5f       	subi	r25, 0xFF	; 255
    2920:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    2922:	e0 91 59 05 	lds	r30, 0x0559
    2926:	f0 91 5a 05 	lds	r31, 0x055A
    292a:	14 82       	std	Z+4, r1	; 0x04

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    292c:	90 91 f4 04 	lds	r25, 0x04F4
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	92 30       	cpi	r25, 0x02	; 2
    2934:	41 f5       	brne	.+80     	; 0x2986 <nrk_sem_post+0xbe>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    2936:	00 91 fe 04 	lds	r16, 0x04FE
    293a:	10 91 ff 04 	lds	r17, 0x04FF
    293e:	20 91 00 05 	lds	r18, 0x0500
    2942:	30 91 01 05 	lds	r19, 0x0501
    2946:	48 2f       	mov	r20, r24
    2948:	55 27       	eor	r21, r21
    294a:	47 fd       	sbrc	r20, 7
    294c:	50 95       	com	r21
    294e:	65 2f       	mov	r22, r21
    2950:	75 2f       	mov	r23, r21
    2952:	04 17       	cp	r16, r20
    2954:	15 07       	cpc	r17, r21
    2956:	26 07       	cpc	r18, r22
    2958:	37 07       	cpc	r19, r23
    295a:	a9 f4       	brne	.+42     	; 0x2986 <nrk_sem_post+0xbe>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    295c:	93 e0       	ldi	r25, 0x03	; 3
    295e:	90 93 f6 04 	sts	0x04F6, r25
					nrk_task_TCB[task_ID].next_wakeup=0;
    2962:	10 92 02 05 	sts	0x0502, r1
    2966:	10 92 03 05 	sts	0x0503, r1
    296a:	10 92 04 05 	sts	0x0504, r1
    296e:	10 92 05 05 	sts	0x0505, r1
					nrk_task_TCB[task_ID].event_suspend=0;
    2972:	10 92 f4 04 	sts	0x04F4, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2976:	10 92 fe 04 	sts	0x04FE, r1
    297a:	10 92 ff 04 	sts	0x04FF, r1
    297e:	10 92 00 05 	sts	0x0500, r1
    2982:	10 92 01 05 	sts	0x0501, r1

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2986:	90 91 1f 05 	lds	r25, 0x051F
    298a:	92 30       	cpi	r25, 0x02	; 2
    298c:	39 f5       	brne	.+78     	; 0x29dc <nrk_sem_post+0x114>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    298e:	99 27       	eor	r25, r25
    2990:	87 fd       	sbrc	r24, 7
    2992:	90 95       	com	r25
    2994:	a9 2f       	mov	r26, r25
    2996:	b9 2f       	mov	r27, r25
    2998:	40 91 29 05 	lds	r20, 0x0529
    299c:	50 91 2a 05 	lds	r21, 0x052A
    29a0:	60 91 2b 05 	lds	r22, 0x052B
    29a4:	70 91 2c 05 	lds	r23, 0x052C
    29a8:	48 17       	cp	r20, r24
    29aa:	59 07       	cpc	r21, r25
    29ac:	6a 07       	cpc	r22, r26
    29ae:	7b 07       	cpc	r23, r27
    29b0:	a9 f4       	brne	.+42     	; 0x29dc <nrk_sem_post+0x114>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    29b2:	83 e0       	ldi	r24, 0x03	; 3
    29b4:	80 93 21 05 	sts	0x0521, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    29b8:	10 92 2d 05 	sts	0x052D, r1
    29bc:	10 92 2e 05 	sts	0x052E, r1
    29c0:	10 92 2f 05 	sts	0x052F, r1
    29c4:	10 92 30 05 	sts	0x0530, r1
					nrk_task_TCB[task_ID].event_suspend=0;
    29c8:	10 92 1f 05 	sts	0x051F, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    29cc:	10 92 29 05 	sts	0x0529, r1
    29d0:	10 92 2a 05 	sts	0x052A, r1
    29d4:	10 92 2b 05 	sts	0x052B, r1
    29d8:	10 92 2c 05 	sts	0x052C, r1
				}   

		}
		nrk_int_enable();
    29dc:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <nrk_int_enable>
	}
		
return NRK_OK;
    29e0:	81 e0       	ldi	r24, 0x01	; 1
}
    29e2:	0f 90       	pop	r0
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	1f 91       	pop	r17
    29ea:	0f 91       	pop	r16
    29ec:	08 95       	ret

000029ee <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    29ee:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    29f2:	8f 3f       	cpi	r24, 0xFF	; 255
    29f4:	11 f4       	brne	.+4      	; 0x29fa <nrk_sem_delete+0xc>
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	03 c0       	rjmp	.+6      	; 0x2a00 <nrk_sem_delete+0x12>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    29fa:	81 30       	cpi	r24, 0x01	; 1
    29fc:	29 f4       	brne	.+10     	; 0x2a08 <nrk_sem_delete+0x1a>
    29fe:	82 e0       	ldi	r24, 0x02	; 2
    2a00:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_nrk_errno_set>
    2a04:	8f ef       	ldi	r24, 0xFF	; 255
    2a06:	08 95       	ret

	nrk_sem_list[id].count=-1;
    2a08:	99 27       	eor	r25, r25
    2a0a:	87 fd       	sbrc	r24, 7
    2a0c:	90 95       	com	r25
    2a0e:	fc 01       	movw	r30, r24
    2a10:	ee 0f       	add	r30, r30
    2a12:	ff 1f       	adc	r31, r31
    2a14:	8e 0f       	add	r24, r30
    2a16:	9f 1f       	adc	r25, r31
    2a18:	fc 01       	movw	r30, r24
    2a1a:	eb 5b       	subi	r30, 0xBB	; 187
    2a1c:	fa 4f       	sbci	r31, 0xFA	; 250
    2a1e:	8f ef       	ldi	r24, 0xFF	; 255
    2a20:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    2a22:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    2a24:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    2a26:	80 91 58 05 	lds	r24, 0x0558
    2a2a:	81 50       	subi	r24, 0x01	; 1
    2a2c:	80 93 58 05 	sts	0x0558, r24
return NRK_OK;
    2a30:	81 e0       	ldi	r24, 0x01	; 1
}
    2a32:	08 95       	ret

00002a34 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    2a34:	e0 91 4e 05 	lds	r30, 0x054E
    2a38:	f0 91 4f 05 	lds	r31, 0x054F
}
    2a3c:	80 81       	ld	r24, Z
    2a3e:	08 95       	ret

00002a40 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    2a40:	e0 91 4e 05 	lds	r30, 0x054E
    2a44:	f0 91 4f 05 	lds	r31, 0x054F
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    2a48:	30 97       	sbiw	r30, 0x00	; 0
    2a4a:	21 f0       	breq	.+8      	; 0x2a54 <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    2a4c:	03 80       	ldd	r0, Z+3	; 0x03
    2a4e:	f4 81       	ldd	r31, Z+4	; 0x04
    2a50:	e0 2d       	mov	r30, r0
    2a52:	fa cf       	rjmp	.-12     	; 0x2a48 <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    2a54:	08 95       	ret

00002a56 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    2a56:	af 92       	push	r10
    2a58:	bf 92       	push	r11
    2a5a:	cf 92       	push	r12
    2a5c:	df 92       	push	r13
    2a5e:	ef 92       	push	r14
    2a60:	ff 92       	push	r15
    2a62:	0f 93       	push	r16
    2a64:	1f 93       	push	r17
    2a66:	cf 93       	push	r28
    2a68:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    2a6a:	e0 91 eb 04 	lds	r30, 0x04EB
    2a6e:	f0 91 ec 04 	lds	r31, 0x04EC
    2a72:	30 97       	sbiw	r30, 0x00	; 0
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <nrk_add_to_readyQ+0x22>
    2a76:	90 c0       	rjmp	.+288    	; 0x2b98 <nrk_add_to_readyQ+0x142>
    {
        return;
    }


    NextNode = _head_node;
    2a78:	00 91 4e 05 	lds	r16, 0x054E
    2a7c:	10 91 4f 05 	lds	r17, 0x054F
    CurNode = _free_node;

    if (_head_node != NULL)
    2a80:	01 15       	cp	r16, r1
    2a82:	11 05       	cpc	r17, r1
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <nrk_add_to_readyQ+0x32>
    2a86:	4c c0       	rjmp	.+152    	; 0x2b20 <nrk_add_to_readyQ+0xca>
    2a88:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    2a8a:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    2a8c:	58 2f       	mov	r21, r24
    2a8e:	54 03       	mulsu	r21, r20
    2a90:	90 01       	movw	r18, r0
    2a92:	11 24       	eor	r1, r1
    2a94:	23 51       	subi	r18, 0x13	; 19
    2a96:	3b 4f       	sbci	r19, 0xFB	; 251
    2a98:	79 01       	movw	r14, r18
    2a9a:	9a e0       	ldi	r25, 0x0A	; 10
    2a9c:	e9 0e       	add	r14, r25
    2a9e:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    2aa0:	69 01       	movw	r12, r18
    2aa2:	c4 e0       	ldi	r28, 0x04	; 4
    2aa4:	cc 0e       	add	r12, r28
    2aa6:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    2aa8:	59 01       	movw	r10, r18
    2aaa:	db e0       	ldi	r29, 0x0B	; 11
    2aac:	ad 0e       	add	r10, r29
    2aae:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    2ab0:	2c 91       	ld	r18, X
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	42 9f       	mul	r20, r18
    2ab6:	b0 01       	movw	r22, r0
    2ab8:	43 9f       	mul	r20, r19
    2aba:	70 0d       	add	r23, r0
    2abc:	11 24       	eor	r1, r1
    2abe:	63 51       	subi	r22, 0x13	; 19
    2ac0:	7b 4f       	sbci	r23, 0xFB	; 251
    2ac2:	eb 01       	movw	r28, r22
    2ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac6:	99 23       	and	r25, r25
    2ac8:	29 f0       	breq	.+10     	; 0x2ad4 <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    2aca:	5b 85       	ldd	r21, Y+11	; 0x0b
    2acc:	e7 01       	movw	r28, r14
    2ace:	98 81       	ld	r25, Y
    2ad0:	59 17       	cp	r21, r25
    2ad2:	40 f1       	brcs	.+80     	; 0x2b24 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    2ad4:	e6 01       	movw	r28, r12
    2ad6:	98 81       	ld	r25, Y
    2ad8:	99 23       	and	r25, r25
    2ada:	69 f0       	breq	.+26     	; 0x2af6 <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    2adc:	42 9f       	mul	r20, r18
    2ade:	b0 01       	movw	r22, r0
    2ae0:	43 9f       	mul	r20, r19
    2ae2:	70 0d       	add	r23, r0
    2ae4:	11 24       	eor	r1, r1
    2ae6:	63 51       	subi	r22, 0x13	; 19
    2ae8:	7b 4f       	sbci	r23, 0xFB	; 251
    2aea:	eb 01       	movw	r28, r22
    2aec:	5a 85       	ldd	r21, Y+10	; 0x0a
    2aee:	e5 01       	movw	r28, r10
    2af0:	98 81       	ld	r25, Y
    2af2:	59 17       	cp	r21, r25
    2af4:	b8 f0       	brcs	.+46     	; 0x2b24 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    2af6:	42 9f       	mul	r20, r18
    2af8:	b0 01       	movw	r22, r0
    2afa:	43 9f       	mul	r20, r19
    2afc:	70 0d       	add	r23, r0
    2afe:	11 24       	eor	r1, r1
    2b00:	9b 01       	movw	r18, r22
    2b02:	23 51       	subi	r18, 0x13	; 19
    2b04:	3b 4f       	sbci	r19, 0xFB	; 251
    2b06:	e9 01       	movw	r28, r18
    2b08:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b0a:	e7 01       	movw	r28, r14
    2b0c:	98 81       	ld	r25, Y
    2b0e:	29 17       	cp	r18, r25
    2b10:	48 f0       	brcs	.+18     	; 0x2b24 <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    2b12:	13 96       	adiw	r26, 0x03	; 3
    2b14:	0d 90       	ld	r0, X+
    2b16:	bc 91       	ld	r27, X
    2b18:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    2b1a:	10 97       	sbiw	r26, 0x00	; 0
    2b1c:	49 f6       	brne	.-110    	; 0x2ab0 <nrk_add_to_readyQ+0x5a>
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <nrk_add_to_readyQ+0xce>
    2b20:	a0 e0       	ldi	r26, 0x00	; 0
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    2b24:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    2b26:	c3 81       	ldd	r28, Z+3	; 0x03
    2b28:	d4 81       	ldd	r29, Z+4	; 0x04
    2b2a:	d0 93 ec 04 	sts	0x04EC, r29
    2b2e:	c0 93 eb 04 	sts	0x04EB, r28

    if (NextNode == _head_node)
    2b32:	a0 17       	cp	r26, r16
    2b34:	b1 07       	cpc	r27, r17
    2b36:	b1 f4       	brne	.+44     	; 0x2b64 <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    2b38:	10 97       	sbiw	r26, 0x00	; 0
    2b3a:	49 f0       	breq	.+18     	; 0x2b4e <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    2b3c:	b4 83       	std	Z+4, r27	; 0x04
    2b3e:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    2b40:	12 82       	std	Z+2, r1	; 0x02
    2b42:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    2b44:	12 96       	adiw	r26, 0x02	; 2
    2b46:	fc 93       	st	X, r31
    2b48:	ee 93       	st	-X, r30
    2b4a:	11 97       	sbiw	r26, 0x01	; 1
    2b4c:	06 c0       	rjmp	.+12     	; 0x2b5a <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    2b4e:	14 82       	std	Z+4, r1	; 0x04
    2b50:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    2b52:	12 82       	std	Z+2, r1	; 0x02
    2b54:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    2b56:	fa 83       	std	Y+2, r31	; 0x02
    2b58:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    2b5a:	f0 93 4f 05 	sts	0x054F, r31
    2b5e:	e0 93 4e 05 	sts	0x054E, r30
    2b62:	1a c0       	rjmp	.+52     	; 0x2b98 <nrk_add_to_readyQ+0x142>
    2b64:	11 96       	adiw	r26, 0x01	; 1
    2b66:	8d 91       	ld	r24, X+
    2b68:	9c 91       	ld	r25, X
    2b6a:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    2b6c:	ac 17       	cp	r26, r28
    2b6e:	bd 07       	cpc	r27, r29
    2b70:	59 f0       	breq	.+22     	; 0x2b88 <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    2b72:	92 83       	std	Z+2, r25	; 0x02
    2b74:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    2b76:	b4 83       	std	Z+4, r27	; 0x04
    2b78:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    2b7a:	11 96       	adiw	r26, 0x01	; 1
    2b7c:	cd 91       	ld	r28, X+
    2b7e:	dc 91       	ld	r29, X
    2b80:	12 97       	sbiw	r26, 0x02	; 2
    2b82:	fc 83       	std	Y+4, r31	; 0x04
    2b84:	eb 83       	std	Y+3, r30	; 0x03
    2b86:	04 c0       	rjmp	.+8      	; 0x2b90 <nrk_add_to_readyQ+0x13a>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    2b88:	14 82       	std	Z+4, r1	; 0x04
    2b8a:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    2b8c:	92 83       	std	Z+2, r25	; 0x02
    2b8e:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    2b90:	12 96       	adiw	r26, 0x02	; 2
    2b92:	fc 93       	st	X, r31
    2b94:	ee 93       	st	-X, r30
    2b96:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    2b98:	df 91       	pop	r29
    2b9a:	cf 91       	pop	r28
    2b9c:	1f 91       	pop	r17
    2b9e:	0f 91       	pop	r16
    2ba0:	ff 90       	pop	r15
    2ba2:	ef 90       	pop	r14
    2ba4:	df 90       	pop	r13
    2ba6:	cf 90       	pop	r12
    2ba8:	bf 90       	pop	r11
    2baa:	af 90       	pop	r10
    2bac:	08 95       	ret

00002bae <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    2bae:	cf 93       	push	r28
    2bb0:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    2bb2:	e0 91 4e 05 	lds	r30, 0x054E
    2bb6:	f0 91 4f 05 	lds	r31, 0x054F
    2bba:	30 97       	sbiw	r30, 0x00	; 0
    2bbc:	09 f4       	brne	.+2      	; 0x2bc0 <nrk_rem_from_readyQ+0x12>
    2bbe:	44 c0       	rjmp	.+136    	; 0x2c48 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    2bc0:	99 27       	eor	r25, r25
    2bc2:	87 fd       	sbrc	r24, 7
    2bc4:	90 95       	com	r25
    2bc6:	20 81       	ld	r18, Z
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	28 17       	cp	r18, r24
    2bcc:	39 07       	cpc	r19, r25
    2bce:	81 f4       	brne	.+32     	; 0x2bf0 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    2bd0:	a3 81       	ldd	r26, Z+3	; 0x03
    2bd2:	b4 81       	ldd	r27, Z+4	; 0x04
    2bd4:	b0 93 4f 05 	sts	0x054F, r27
    2bd8:	a0 93 4e 05 	sts	0x054E, r26
        _head_node->Prev = NULL;
    2bdc:	12 96       	adiw	r26, 0x02	; 2
    2bde:	1c 92       	st	X, r1
    2be0:	1e 92       	st	-X, r1
    2be2:	11 97       	sbiw	r26, 0x01	; 1
    2be4:	18 c0       	rjmp	.+48     	; 0x2c16 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    2be6:	03 80       	ldd	r0, Z+3	; 0x03
    2be8:	f4 81       	ldd	r31, Z+4	; 0x04
    2bea:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    2bec:	30 97       	sbiw	r30, 0x00	; 0
    2bee:	61 f1       	breq	.+88     	; 0x2c48 <nrk_rem_from_readyQ+0x9a>
    2bf0:	20 81       	ld	r18, Z
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	28 17       	cp	r18, r24
    2bf6:	39 07       	cpc	r19, r25
    2bf8:	b1 f7       	brne	.-20     	; 0x2be6 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    2bfa:	c1 81       	ldd	r28, Z+1	; 0x01
    2bfc:	d2 81       	ldd	r29, Z+2	; 0x02
    2bfe:	83 81       	ldd	r24, Z+3	; 0x03
    2c00:	94 81       	ldd	r25, Z+4	; 0x04
    2c02:	9c 83       	std	Y+4, r25	; 0x04
    2c04:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    2c06:	a3 81       	ldd	r26, Z+3	; 0x03
    2c08:	b4 81       	ldd	r27, Z+4	; 0x04
    2c0a:	10 97       	sbiw	r26, 0x00	; 0
    2c0c:	21 f0       	breq	.+8      	; 0x2c16 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    2c0e:	12 96       	adiw	r26, 0x02	; 2
    2c10:	dc 93       	st	X, r29
    2c12:	ce 93       	st	-X, r28
    2c14:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    2c16:	a0 91 eb 04 	lds	r26, 0x04EB
    2c1a:	b0 91 ec 04 	lds	r27, 0x04EC
    2c1e:	10 97       	sbiw	r26, 0x00	; 0
    2c20:	39 f4       	brne	.+14     	; 0x2c30 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    2c22:	f0 93 ec 04 	sts	0x04EC, r31
    2c26:	e0 93 eb 04 	sts	0x04EB, r30
        _free_node->Next = NULL;
    2c2a:	14 82       	std	Z+4, r1	; 0x04
    2c2c:	13 82       	std	Z+3, r1	; 0x03
    2c2e:	0a c0       	rjmp	.+20     	; 0x2c44 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    2c30:	b4 83       	std	Z+4, r27	; 0x04
    2c32:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    2c34:	12 96       	adiw	r26, 0x02	; 2
    2c36:	fc 93       	st	X, r31
    2c38:	ee 93       	st	-X, r30
    2c3a:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    2c3c:	f0 93 ec 04 	sts	0x04EC, r31
    2c40:	e0 93 eb 04 	sts	0x04EB, r30
    }
    _free_node->Prev = NULL;
    2c44:	12 82       	std	Z+2, r1	; 0x02
    2c46:	11 82       	std	Z+1, r1	; 0x01
}
    2c48:	df 91       	pop	r29
    2c4a:	cf 91       	pop	r28
    2c4c:	08 95       	ret

00002c4e <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    2c4e:	ef 92       	push	r14
    2c50:	ff 92       	push	r15
    2c52:	0f 93       	push	r16
    2c54:	1f 93       	push	r17
    2c56:	cf 93       	push	r28
    2c58:	df 93       	push	r29
    2c5a:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    2c5c:	4b 81       	ldd	r20, Y+3	; 0x03
    2c5e:	5c 81       	ldd	r21, Y+4	; 0x04
    2c60:	69 81       	ldd	r22, Y+1	; 0x01
    2c62:	7a 81       	ldd	r23, Y+2	; 0x02
    2c64:	8d 81       	ldd	r24, Y+5	; 0x05
    2c66:	9e 81       	ldd	r25, Y+6	; 0x06
    2c68:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    2c6c:	2f 81       	ldd	r18, Y+7	; 0x07
    2c6e:	22 23       	and	r18, r18
    2c70:	71 f0       	breq	.+28     	; 0x2c8e <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    2c72:	4b 81       	ldd	r20, Y+3	; 0x03
    2c74:	5c 81       	ldd	r21, Y+4	; 0x04
    2c76:	e1 2c       	mov	r14, r1
    2c78:	f1 2c       	mov	r15, r1
    2c7a:	00 e0       	ldi	r16, 0x00	; 0
    2c7c:	10 e0       	ldi	r17, 0x00	; 0
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	bc 01       	movw	r22, r24
    2c84:	ce 01       	movw	r24, r28
    2c86:	0e 94 56 0e 	call	0x1cac	; 0x1cac <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    2c8a:	1f 82       	std	Y+7, r1	; 0x07
    2c8c:	0c c0       	rjmp	.+24     	; 0x2ca6 <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    2c8e:	e8 81       	ld	r30, Y
    2c90:	2b e2       	ldi	r18, 0x2B	; 43
    2c92:	e2 02       	muls	r30, r18
    2c94:	f0 01       	movw	r30, r0
    2c96:	11 24       	eor	r1, r1
    2c98:	e3 51       	subi	r30, 0x13	; 19
    2c9a:	fb 4f       	sbci	r31, 0xFB	; 251
    2c9c:	21 85       	ldd	r18, Z+9	; 0x09
    2c9e:	23 30       	cpi	r18, 0x03	; 3
    2ca0:	b9 f4       	brne	.+46     	; 0x2cd0 <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    2ca2:	91 83       	std	Z+1, r25	; 0x01
    2ca4:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    2ca6:	e8 81       	ld	r30, Y
    2ca8:	8b e2       	ldi	r24, 0x2B	; 43
    2caa:	e8 02       	muls	r30, r24
    2cac:	f0 01       	movw	r30, r0
    2cae:	11 24       	eor	r1, r1
    2cb0:	e3 51       	subi	r30, 0x13	; 19
    2cb2:	fb 4f       	sbci	r31, 0xFB	; 251
    2cb4:	85 89       	ldd	r24, Z+21	; 0x15
    2cb6:	96 89       	ldd	r25, Z+22	; 0x16
    2cb8:	a7 89       	ldd	r26, Z+23	; 0x17
    2cba:	b0 8d       	ldd	r27, Z+24	; 0x18
    2cbc:	89 2b       	or	r24, r25
    2cbe:	8a 2b       	or	r24, r26
    2cc0:	8b 2b       	or	r24, r27
    2cc2:	41 f4       	brne	.+16     	; 0x2cd4 <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    2cc4:	82 e0       	ldi	r24, 0x02	; 2
    2cc6:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    2cc8:	88 81       	ld	r24, Y
    2cca:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_add_to_readyQ>
    2cce:	02 c0       	rjmp	.+4      	; 0x2cd4 <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    2cd0:	8f ef       	ldi	r24, 0xFF	; 255
    2cd2:	01 c0       	rjmp	.+2      	; 0x2cd6 <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
}
    2cd6:	df 91       	pop	r29
    2cd8:	cf 91       	pop	r28
    2cda:	1f 91       	pop	r17
    2cdc:	0f 91       	pop	r16
    2cde:	ff 90       	pop	r15
    2ce0:	ef 90       	pop	r14
    2ce2:	08 95       	ret

00002ce4 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    2ce4:	1f 93       	push	r17
    2ce6:	cf 93       	push	r28
    2ce8:	df 93       	push	r29
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
    2cee:	28 97       	sbiw	r28, 0x08	; 8
    2cf0:	0f b6       	in	r0, 0x3f	; 63
    2cf2:	f8 94       	cli
    2cf4:	de bf       	out	0x3e, r29	; 62
    2cf6:	0f be       	out	0x3f, r0	; 63
    2cf8:	cd bf       	out	0x3d, r28	; 61
    2cfa:	29 83       	std	Y+1, r18	; 0x01
    2cfc:	3a 83       	std	Y+2, r19	; 0x02
    2cfe:	4b 83       	std	Y+3, r20	; 0x03
    2d00:	5c 83       	std	Y+4, r21	; 0x04
    2d02:	6d 83       	std	Y+5, r22	; 0x05
    2d04:	7e 83       	std	Y+6, r23	; 0x06
    2d06:	8f 83       	std	Y+7, r24	; 0x07
    2d08:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    2d0a:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    2d0e:	0e 94 02 20 	call	0x4004	; 0x4004 <_nrk_os_timer_get>
    2d12:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    2d14:	ce 01       	movw	r24, r28
    2d16:	01 96       	adiw	r24, 0x01	; 1
    2d18:	0e 94 80 1a 	call	0x3500	; 0x3500 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    2d1c:	63 30       	cpi	r22, 0x03	; 3
    2d1e:	71 05       	cpc	r23, r1
    2d20:	98 f0       	brcs	.+38     	; 0x2d48 <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2d22:	e0 91 59 05 	lds	r30, 0x0559
    2d26:	f0 91 5a 05 	lds	r31, 0x055A
    2d2a:	21 2f       	mov	r18, r17
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	62 0f       	add	r22, r18
    2d30:	73 1f       	adc	r23, r19
    2d32:	cb 01       	movw	r24, r22
    2d34:	a0 e0       	ldi	r26, 0x00	; 0
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	85 8b       	std	Z+21, r24	; 0x15
    2d3a:	96 8b       	std	Z+22, r25	; 0x16
    2d3c:	a7 8b       	std	Z+23, r26	; 0x17
    2d3e:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    2d40:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <nrk_int_enable>

    return NRK_OK;
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	01 c0       	rjmp	.+2      	; 0x2d4a <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    2d48:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    2d4a:	28 96       	adiw	r28, 0x08	; 8
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	df 91       	pop	r29
    2d58:	cf 91       	pop	r28
    2d5a:	1f 91       	pop	r17
    2d5c:	08 95       	ret

00002d5e <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    2d5e:	0e 94 ab 22 	call	0x4556	; 0x4556 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    2d62:	e0 91 59 05 	lds	r30, 0x0559
    2d66:	f0 91 5a 05 	lds	r31, 0x055A
    2d6a:	85 81       	ldd	r24, Z+5	; 0x05
    2d6c:	81 11       	cpse	r24, r1
    2d6e:	f7 cf       	rjmp	.-18     	; 0x2d5e <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    2d70:	08 95       	ret

00002d72 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    2d72:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    2d74:	0e 94 b3 11 	call	0x2366	; 0x2366 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2d78:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    2d7c:	e0 91 59 05 	lds	r30, 0x0559
    2d80:	f0 91 5a 05 	lds	r31, 0x055A
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	92 a7       	std	Z+42, r25	; 0x2a
    2d8a:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    2d8c:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2d8e:	0e 94 02 20 	call	0x4004	; 0x4004 <_nrk_os_timer_get>
    2d92:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2d94:	88 3f       	cpi	r24, 0xF8	; 248
    2d96:	80 f4       	brcc	.+32     	; 0x2db8 <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2d98:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <_nrk_get_next_wakeup>
    2d9c:	2c 2f       	mov	r18, r28
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	2f 5f       	subi	r18, 0xFF	; 255
    2da2:	3f 4f       	sbci	r19, 0xFF	; 255
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	28 17       	cp	r18, r24
    2da8:	39 07       	cpc	r19, r25
    2daa:	34 f4       	brge	.+12     	; 0x2db8 <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    2dac:	82 e0       	ldi	r24, 0x02	; 2
    2dae:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    2db0:	80 93 2d 04 	sts	0x042D, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2db4:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2db8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2dbc:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	cf 91       	pop	r28
    2dc4:	08 95       	ret

00002dc6 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    2dc6:	e0 91 59 05 	lds	r30, 0x0559
    2dca:	f0 91 5a 05 	lds	r31, 0x055A
    2dce:	80 85       	ldd	r24, Z+8	; 0x08
    2dd0:	0e 94 d7 15 	call	0x2bae	; 0x2bae <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    2dd4:	e0 91 59 05 	lds	r30, 0x0559
    2dd8:	f0 91 5a 05 	lds	r31, 0x055A
    2ddc:	84 e0       	ldi	r24, 0x04	; 4
    2dde:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    2de0:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <nrk_wait_until_next_period>
    return NRK_OK;
}
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	08 95       	ret

00002de8 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    2de8:	cf 93       	push	r28
    2dea:	df 93       	push	r29
    2dec:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    2dee:	0e 94 b3 11 	call	0x2366	; 0x2366 <nrk_stack_check>

    if (p == 0)
    2df2:	20 97       	sbiw	r28, 0x00	; 0
    2df4:	11 f4       	brne	.+4      	; 0x2dfa <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    2df6:	c1 e0       	ldi	r28, 0x01	; 1
    2df8:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    2dfa:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2dfe:	e0 91 59 05 	lds	r30, 0x0559
    2e02:	f0 91 5a 05 	lds	r31, 0x055A
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    2e0a:	d2 a7       	std	Z+42, r29	; 0x2a
    2e0c:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    2e0e:	0e 94 02 20 	call	0x4004	; 0x4004 <_nrk_os_timer_get>
    2e12:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    2e14:	88 3f       	cpi	r24, 0xF8	; 248
    2e16:	80 f4       	brcc	.+32     	; 0x2e38 <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2e18:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <_nrk_get_next_wakeup>
    2e1c:	2c 2f       	mov	r18, r28
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	2f 5f       	subi	r18, 0xFF	; 255
    2e22:	3f 4f       	sbci	r19, 0xFF	; 255
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	28 17       	cp	r18, r24
    2e28:	39 07       	cpc	r19, r25
    2e2a:	34 f4       	brge	.+12     	; 0x2e38 <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    2e2c:	82 e0       	ldi	r24, 0x02	; 2
    2e2e:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2e30:	80 93 2d 04 	sts	0x042D, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    2e34:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    2e38:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    2e3c:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	df 91       	pop	r29
    2e44:	cf 91       	pop	r28
    2e46:	08 95       	ret

00002e48 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    2e48:	ef 92       	push	r14
    2e4a:	ff 92       	push	r15
    2e4c:	0f 93       	push	r16
    2e4e:	1f 93       	push	r17
    2e50:	cf 93       	push	r28
    2e52:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    2e54:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2e58:	e0 91 59 05 	lds	r30, 0x0559
    2e5c:	f0 91 5a 05 	lds	r31, 0x055A
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    2e64:	0e 94 02 20 	call	0x4004	; 0x4004 <_nrk_os_timer_get>
    2e68:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    2e6a:	e0 91 59 05 	lds	r30, 0x0559
    2e6e:	f0 91 5a 05 	lds	r31, 0x055A
    2e72:	e8 2e       	mov	r14, r24
    2e74:	f1 2c       	mov	r15, r1
    2e76:	c7 01       	movw	r24, r14
    2e78:	80 0f       	add	r24, r16
    2e7a:	91 1f       	adc	r25, r17
    2e7c:	a0 e0       	ldi	r26, 0x00	; 0
    2e7e:	b0 e0       	ldi	r27, 0x00	; 0
    2e80:	85 8b       	std	Z+21, r24	; 0x15
    2e82:	96 8b       	std	Z+22, r25	; 0x16
    2e84:	a7 8b       	std	Z+23, r26	; 0x17
    2e86:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2e88:	c8 3f       	cpi	r28, 0xF8	; 248
    2e8a:	78 f4       	brcc	.+30     	; 0x2eaa <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2e8c:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <_nrk_get_next_wakeup>
    2e90:	9f ef       	ldi	r25, 0xFF	; 255
    2e92:	e9 1a       	sub	r14, r25
    2e94:	f9 0a       	sbc	r15, r25
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	e8 16       	cp	r14, r24
    2e9a:	f9 06       	cpc	r15, r25
    2e9c:	34 f4       	brge	.+12     	; 0x2eaa <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    2e9e:	82 e0       	ldi	r24, 0x02	; 2
    2ea0:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2ea2:	80 93 2d 04 	sts	0x042D, r24
            _nrk_set_next_wakeup (timer);
    2ea6:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2eaa:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2eae:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	cf 91       	pop	r28
    2eb6:	1f 91       	pop	r17
    2eb8:	0f 91       	pop	r16
    2eba:	ff 90       	pop	r15
    2ebc:	ef 90       	pop	r14
    2ebe:	08 95       	ret

00002ec0 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    2ec0:	cf 93       	push	r28
    2ec2:	df 93       	push	r29
    2ec4:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    2ec6:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2eca:	e0 91 59 05 	lds	r30, 0x0559
    2ece:	f0 91 5a 05 	lds	r31, 0x055A
    2ed2:	21 e0       	ldi	r18, 0x01	; 1
    2ed4:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    2ed6:	ce 01       	movw	r24, r28
    2ed8:	a0 e0       	ldi	r26, 0x00	; 0
    2eda:	b0 e0       	ldi	r27, 0x00	; 0
    2edc:	85 8b       	std	Z+21, r24	; 0x15
    2ede:	96 8b       	std	Z+22, r25	; 0x16
    2ee0:	a7 8b       	std	Z+23, r26	; 0x17
    2ee2:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    2ee4:	0e 94 02 20 	call	0x4004	; 0x4004 <_nrk_os_timer_get>
    2ee8:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2eea:	88 3f       	cpi	r24, 0xF8	; 248
    2eec:	80 f4       	brcc	.+32     	; 0x2f0e <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2eee:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <_nrk_get_next_wakeup>
    2ef2:	2c 2f       	mov	r18, r28
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	2f 5f       	subi	r18, 0xFF	; 255
    2ef8:	3f 4f       	sbci	r19, 0xFF	; 255
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	28 17       	cp	r18, r24
    2efe:	39 07       	cpc	r19, r25
    2f00:	34 f4       	brge	.+12     	; 0x2f0e <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    2f02:	82 e0       	ldi	r24, 0x02	; 2
    2f04:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2f06:	80 93 2d 04 	sts	0x042D, r24
            _nrk_set_next_wakeup (timer);
    2f0a:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2f0e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2f12:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	df 91       	pop	r29
    2f1a:	cf 91       	pop	r28
    2f1c:	08 95       	ret

00002f1e <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    2f1e:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    2f20:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2f24:	e0 91 59 05 	lds	r30, 0x0559
    2f28:	f0 91 5a 05 	lds	r31, 0x055A
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    2f30:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    2f32:	0e 94 02 20 	call	0x4004	; 0x4004 <_nrk_os_timer_get>
    2f36:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    2f38:	88 3f       	cpi	r24, 0xF8	; 248
    2f3a:	80 f4       	brcc	.+32     	; 0x2f5c <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2f3c:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <_nrk_get_next_wakeup>
    2f40:	2c 2f       	mov	r18, r28
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	2f 5f       	subi	r18, 0xFF	; 255
    2f46:	3f 4f       	sbci	r19, 0xFF	; 255
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	28 17       	cp	r18, r24
    2f4c:	39 07       	cpc	r19, r25
    2f4e:	34 f4       	brge	.+12     	; 0x2f5c <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    2f50:	82 e0       	ldi	r24, 0x02	; 2
    2f52:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    2f54:	80 93 2d 04 	sts	0x042D, r24
            _nrk_set_next_wakeup (timer);
    2f58:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    2f5c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    2f60:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	cf 91       	pop	r28
    2f68:	08 95       	ret

00002f6a <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    2f6a:	1f 93       	push	r17
    2f6c:	cf 93       	push	r28
    2f6e:	df 93       	push	r29
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    2f74:	28 97       	sbiw	r28, 0x08	; 8
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
    2f80:	29 83       	std	Y+1, r18	; 0x01
    2f82:	3a 83       	std	Y+2, r19	; 0x02
    2f84:	4b 83       	std	Y+3, r20	; 0x03
    2f86:	5c 83       	std	Y+4, r21	; 0x04
    2f88:	6d 83       	std	Y+5, r22	; 0x05
    2f8a:	7e 83       	std	Y+6, r23	; 0x06
    2f8c:	8f 83       	std	Y+7, r24	; 0x07
    2f8e:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    2f90:	0e 94 b3 11 	call	0x2366	; 0x2366 <nrk_stack_check>

    nrk_int_disable ();
    2f94:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    2f98:	e0 91 59 05 	lds	r30, 0x0559
    2f9c:	f0 91 5a 05 	lds	r31, 0x055A
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	92 a7       	std	Z+42, r25	; 0x2a
    2faa:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    2fac:	0e 94 02 20 	call	0x4004	; 0x4004 <_nrk_os_timer_get>
    2fb0:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    2fb2:	ce 01       	movw	r24, r28
    2fb4:	01 96       	adiw	r24, 0x01	; 1
    2fb6:	0e 94 80 1a 	call	0x3500	; 0x3500 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    2fba:	e0 91 59 05 	lds	r30, 0x0559
    2fbe:	f0 91 5a 05 	lds	r31, 0x055A
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	81 0f       	add	r24, r17
    2fc8:	91 1d       	adc	r25, r1
    2fca:	a1 1d       	adc	r26, r1
    2fcc:	b1 1d       	adc	r27, r1
    2fce:	85 8b       	std	Z+21, r24	; 0x15
    2fd0:	96 8b       	std	Z+22, r25	; 0x16
    2fd2:	a7 8b       	std	Z+23, r26	; 0x17
    2fd4:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    2fd6:	18 3f       	cpi	r17, 0xF8	; 248
    2fd8:	80 f4       	brcc	.+32     	; 0x2ffa <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    2fda:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <_nrk_get_next_wakeup>
    2fde:	21 2f       	mov	r18, r17
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	2f 5f       	subi	r18, 0xFF	; 255
    2fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	28 17       	cp	r18, r24
    2fea:	39 07       	cpc	r19, r25
    2fec:	34 f4       	brge	.+12     	; 0x2ffa <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    2fee:	82 e0       	ldi	r24, 0x02	; 2
    2ff0:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    2ff2:	80 93 2d 04 	sts	0x042D, r24
            _nrk_set_next_wakeup (timer);
    2ff6:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    2ffa:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    2ffe:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	28 96       	adiw	r28, 0x08	; 8
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	f8 94       	cli
    300a:	de bf       	out	0x3e, r29	; 62
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	cd bf       	out	0x3d, r28	; 61
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	1f 91       	pop	r17
    3016:	08 95       	ret

00003018 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    3018:	8f 92       	push	r8
    301a:	9f 92       	push	r9
    301c:	af 92       	push	r10
    301e:	bf 92       	push	r11
    3020:	cf 92       	push	r12
    3022:	df 92       	push	r13
    3024:	ef 92       	push	r14
    3026:	ff 92       	push	r15
    3028:	0f 93       	push	r16
    302a:	1f 93       	push	r17
    302c:	cf 93       	push	r28
    302e:	df 93       	push	r29
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	60 97       	sbiw	r28, 0x10	; 16
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
    3040:	29 87       	std	Y+9, r18	; 0x09
    3042:	3a 87       	std	Y+10, r19	; 0x0a
    3044:	4b 87       	std	Y+11, r20	; 0x0b
    3046:	5c 87       	std	Y+12, r21	; 0x0c
    3048:	6d 87       	std	Y+13, r22	; 0x0d
    304a:	7e 87       	std	Y+14, r23	; 0x0e
    304c:	8f 87       	std	Y+15, r24	; 0x0f
    304e:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    3050:	ce 01       	movw	r24, r28
    3052:	01 96       	adiw	r24, 0x01	; 1
    3054:	0e 94 68 18 	call	0x30d0	; 0x30d0 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    3058:	89 80       	ldd	r8, Y+1	; 0x01
    305a:	9a 80       	ldd	r9, Y+2	; 0x02
    305c:	ab 80       	ldd	r10, Y+3	; 0x03
    305e:	bc 80       	ldd	r11, Y+4	; 0x04
    3060:	cd 80       	ldd	r12, Y+5	; 0x05
    3062:	de 80       	ldd	r13, Y+6	; 0x06
    3064:	ef 80       	ldd	r14, Y+7	; 0x07
    3066:	f8 84       	ldd	r15, Y+8	; 0x08
    3068:	09 85       	ldd	r16, Y+9	; 0x09
    306a:	1a 85       	ldd	r17, Y+10	; 0x0a
    306c:	2b 85       	ldd	r18, Y+11	; 0x0b
    306e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3070:	4d 85       	ldd	r20, Y+13	; 0x0d
    3072:	5e 85       	ldd	r21, Y+14	; 0x0e
    3074:	6f 85       	ldd	r22, Y+15	; 0x0f
    3076:	78 89       	ldd	r23, Y+16	; 0x10
    3078:	ce 01       	movw	r24, r28
    307a:	09 96       	adiw	r24, 0x09	; 9
    307c:	0e 94 c5 18 	call	0x318a	; 0x318a <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    3080:	8f 3f       	cpi	r24, 0xFF	; 255
    3082:	61 f0       	breq	.+24     	; 0x309c <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    3084:	29 85       	ldd	r18, Y+9	; 0x09
    3086:	3a 85       	ldd	r19, Y+10	; 0x0a
    3088:	4b 85       	ldd	r20, Y+11	; 0x0b
    308a:	5c 85       	ldd	r21, Y+12	; 0x0c
    308c:	6d 85       	ldd	r22, Y+13	; 0x0d
    308e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3090:	8f 85       	ldd	r24, Y+15	; 0x0f
    3092:	98 89       	ldd	r25, Y+16	; 0x10
    3094:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <nrk_wait>

    return NRK_OK;
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	01 c0       	rjmp	.+2      	; 0x309e <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    309c:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    309e:	60 96       	adiw	r28, 0x10	; 16
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	f8 94       	cli
    30a4:	de bf       	out	0x3e, r29	; 62
    30a6:	0f be       	out	0x3f, r0	; 63
    30a8:	cd bf       	out	0x3d, r28	; 61
    30aa:	df 91       	pop	r29
    30ac:	cf 91       	pop	r28
    30ae:	1f 91       	pop	r17
    30b0:	0f 91       	pop	r16
    30b2:	ff 90       	pop	r15
    30b4:	ef 90       	pop	r14
    30b6:	df 90       	pop	r13
    30b8:	cf 90       	pop	r12
    30ba:	bf 90       	pop	r11
    30bc:	af 90       	pop	r10
    30be:	9f 90       	pop	r9
    30c0:	8f 90       	pop	r8
    30c2:	08 95       	ret

000030c4 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    30c4:	e0 91 59 05 	lds	r30, 0x0559
    30c8:	f0 91 5a 05 	lds	r31, 0x055A
}
    30cc:	80 85       	ldd	r24, Z+8	; 0x08
    30ce:	08 95       	ret

000030d0 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    30d0:	0f 93       	push	r16
    30d2:	1f 93       	push	r17
    30d4:	cf 93       	push	r28
    30d6:	df 93       	push	r29
    30d8:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    30da:	1c 82       	std	Y+4, r1	; 0x04
    30dc:	1d 82       	std	Y+5, r1	; 0x05
    30de:	1e 82       	std	Y+6, r1	; 0x06
    30e0:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    30e2:	80 91 50 05 	lds	r24, 0x0550
    30e6:	90 91 51 05 	lds	r25, 0x0551
    30ea:	a0 91 52 05 	lds	r26, 0x0552
    30ee:	b0 91 53 05 	lds	r27, 0x0553
    30f2:	88 83       	st	Y, r24
    30f4:	99 83       	std	Y+1, r25	; 0x01
    30f6:	aa 83       	std	Y+2, r26	; 0x02
    30f8:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    30fa:	80 91 54 05 	lds	r24, 0x0554
    30fe:	90 91 55 05 	lds	r25, 0x0555
    3102:	a0 91 56 05 	lds	r26, 0x0556
    3106:	b0 91 57 05 	lds	r27, 0x0557
    310a:	8c 83       	std	Y+4, r24	; 0x04
    310c:	9d 83       	std	Y+5, r25	; 0x05
    310e:	ae 83       	std	Y+6, r26	; 0x06
    3110:	bf 83       	std	Y+7, r27	; 0x07
 
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    3112:	0e 94 02 20 	call	0x4004	; 0x4004 <_nrk_os_timer_get>
    3116:	a8 2f       	mov	r26, r24
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	23 eb       	ldi	r18, 0xB3	; 179
    311c:	36 ee       	ldi	r19, 0xE6	; 230
    311e:	4e e0       	ldi	r20, 0x0E	; 14
    3120:	50 e0       	ldi	r21, 0x00	; 0
    3122:	0e 94 bf 24 	call	0x497e	; 0x497e <__muluhisi3>
    3126:	0c 81       	ldd	r16, Y+4	; 0x04
    3128:	1d 81       	ldd	r17, Y+5	; 0x05
    312a:	2e 81       	ldd	r18, Y+6	; 0x06
    312c:	3f 81       	ldd	r19, Y+7	; 0x07
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	80 0f       	add	r24, r16
    3134:	91 1f       	adc	r25, r17
    3136:	a2 1f       	adc	r26, r18
    3138:	b3 1f       	adc	r27, r19
    313a:	8c 83       	std	Y+4, r24	; 0x04
    313c:	9d 83       	std	Y+5, r25	; 0x05
    313e:	ae 83       	std	Y+6, r26	; 0x06
    3140:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3142:	8c 81       	ldd	r24, Y+4	; 0x04
    3144:	9d 81       	ldd	r25, Y+5	; 0x05
    3146:	ae 81       	ldd	r26, Y+6	; 0x06
    3148:	bf 81       	ldd	r27, Y+7	; 0x07
    314a:	81 15       	cp	r24, r1
    314c:	2a ec       	ldi	r18, 0xCA	; 202
    314e:	92 07       	cpc	r25, r18
    3150:	2a e9       	ldi	r18, 0x9A	; 154
    3152:	a2 07       	cpc	r26, r18
    3154:	2b e3       	ldi	r18, 0x3B	; 59
    3156:	b2 07       	cpc	r27, r18
    3158:	98 f0       	brcs	.+38     	; 0x3180 <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    315a:	9a 5c       	subi	r25, 0xCA	; 202
    315c:	aa 49       	sbci	r26, 0x9A	; 154
    315e:	bb 43       	sbci	r27, 0x3B	; 59
    3160:	8c 83       	std	Y+4, r24	; 0x04
    3162:	9d 83       	std	Y+5, r25	; 0x05
    3164:	ae 83       	std	Y+6, r26	; 0x06
    3166:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    3168:	88 81       	ld	r24, Y
    316a:	99 81       	ldd	r25, Y+1	; 0x01
    316c:	aa 81       	ldd	r26, Y+2	; 0x02
    316e:	bb 81       	ldd	r27, Y+3	; 0x03
    3170:	01 96       	adiw	r24, 0x01	; 1
    3172:	a1 1d       	adc	r26, r1
    3174:	b1 1d       	adc	r27, r1
    3176:	88 83       	st	Y, r24
    3178:	99 83       	std	Y+1, r25	; 0x01
    317a:	aa 83       	std	Y+2, r26	; 0x02
    317c:	bb 83       	std	Y+3, r27	; 0x03
    317e:	e1 cf       	rjmp	.-62     	; 0x3142 <nrk_time_get+0x72>
    }

}
    3180:	df 91       	pop	r29
    3182:	cf 91       	pop	r28
    3184:	1f 91       	pop	r17
    3186:	0f 91       	pop	r16
    3188:	08 95       	ret

0000318a <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    318a:	8f 92       	push	r8
    318c:	9f 92       	push	r9
    318e:	af 92       	push	r10
    3190:	bf 92       	push	r11
    3192:	cf 92       	push	r12
    3194:	df 92       	push	r13
    3196:	ef 92       	push	r14
    3198:	ff 92       	push	r15
    319a:	0f 93       	push	r16
    319c:	1f 93       	push	r17
    319e:	cf 93       	push	r28
    31a0:	df 93       	push	r29
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
    31a6:	60 97       	sbiw	r28, 0x10	; 16
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	de bf       	out	0x3e, r29	; 62
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	cd bf       	out	0x3d, r28	; 61
    31b2:	fc 01       	movw	r30, r24
    31b4:	09 83       	std	Y+1, r16	; 0x01
    31b6:	1a 83       	std	Y+2, r17	; 0x02
    31b8:	2b 83       	std	Y+3, r18	; 0x03
    31ba:	3c 83       	std	Y+4, r19	; 0x04
    31bc:	4d 83       	std	Y+5, r20	; 0x05
    31be:	5e 83       	std	Y+6, r21	; 0x06
    31c0:	6f 83       	std	Y+7, r22	; 0x07
    31c2:	78 87       	std	Y+8, r23	; 0x08
    31c4:	89 86       	std	Y+9, r8	; 0x09
    31c6:	9a 86       	std	Y+10, r9	; 0x0a
    31c8:	ab 86       	std	Y+11, r10	; 0x0b
    31ca:	bc 86       	std	Y+12, r11	; 0x0c
    31cc:	cd 86       	std	Y+13, r12	; 0x0d
    31ce:	de 86       	std	Y+14, r13	; 0x0e
    31d0:	ef 86       	std	Y+15, r14	; 0x0f
    31d2:	f8 8a       	std	Y+16, r15	; 0x10
    31d4:	09 81       	ldd	r16, Y+1	; 0x01
    31d6:	1a 81       	ldd	r17, Y+2	; 0x02
    31d8:	2b 81       	ldd	r18, Y+3	; 0x03
    31da:	3c 81       	ldd	r19, Y+4	; 0x04
    31dc:	4d 81       	ldd	r20, Y+5	; 0x05
    31de:	5e 81       	ldd	r21, Y+6	; 0x06
    31e0:	6f 81       	ldd	r22, Y+7	; 0x07
    31e2:	78 85       	ldd	r23, Y+8	; 0x08
    31e4:	c9 84       	ldd	r12, Y+9	; 0x09
    31e6:	da 84       	ldd	r13, Y+10	; 0x0a
    31e8:	eb 84       	ldd	r14, Y+11	; 0x0b
    31ea:	fc 84       	ldd	r15, Y+12	; 0x0c
    31ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    31f0:	af 85       	ldd	r26, Y+15	; 0x0f
    31f2:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    31f4:	0c 15       	cp	r16, r12
    31f6:	1d 05       	cpc	r17, r13
    31f8:	2e 05       	cpc	r18, r14
    31fa:	3f 05       	cpc	r19, r15
    31fc:	f0 f1       	brcs	.+124    	; 0x327a <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    31fe:	c0 16       	cp	r12, r16
    3200:	d1 06       	cpc	r13, r17
    3202:	e2 06       	cpc	r14, r18
    3204:	f3 06       	cpc	r15, r19
    3206:	91 f4       	brne	.+36     	; 0x322c <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    3208:	48 17       	cp	r20, r24
    320a:	59 07       	cpc	r21, r25
    320c:	6a 07       	cpc	r22, r26
    320e:	7b 07       	cpc	r23, r27
    3210:	a0 f1       	brcs	.+104    	; 0x327a <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    3212:	48 1b       	sub	r20, r24
    3214:	59 0b       	sbc	r21, r25
    3216:	6a 0b       	sbc	r22, r26
    3218:	7b 0b       	sbc	r23, r27
    321a:	44 83       	std	Z+4, r20	; 0x04
    321c:	55 83       	std	Z+5, r21	; 0x05
    321e:	66 83       	std	Z+6, r22	; 0x06
    3220:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    3222:	10 82       	st	Z, r1
    3224:	11 82       	std	Z+1, r1	; 0x01
    3226:	12 82       	std	Z+2, r1	; 0x02
    3228:	13 82       	std	Z+3, r1	; 0x03
    322a:	25 c0       	rjmp	.+74     	; 0x3276 <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    322c:	48 17       	cp	r20, r24
    322e:	59 07       	cpc	r21, r25
    3230:	6a 07       	cpc	r22, r26
    3232:	7b 07       	cpc	r23, r27
    3234:	80 f4       	brcc	.+32     	; 0x3256 <nrk_time_sub+0xcc>
{
	high.secs--;
    3236:	01 50       	subi	r16, 0x01	; 1
    3238:	11 09       	sbc	r17, r1
    323a:	21 09       	sbc	r18, r1
    323c:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    323e:	0c 19       	sub	r16, r12
    3240:	1d 09       	sbc	r17, r13
    3242:	2e 09       	sbc	r18, r14
    3244:	3f 09       	sbc	r19, r15
    3246:	00 83       	st	Z, r16
    3248:	11 83       	std	Z+1, r17	; 0x01
    324a:	22 83       	std	Z+2, r18	; 0x02
    324c:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    324e:	56 53       	subi	r21, 0x36	; 54
    3250:	65 46       	sbci	r22, 0x65	; 101
    3252:	74 4c       	sbci	r23, 0xC4	; 196
    3254:	08 c0       	rjmp	.+16     	; 0x3266 <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    3256:	0c 19       	sub	r16, r12
    3258:	1d 09       	sbc	r17, r13
    325a:	2e 09       	sbc	r18, r14
    325c:	3f 09       	sbc	r19, r15
    325e:	00 83       	st	Z, r16
    3260:	11 83       	std	Z+1, r17	; 0x01
    3262:	22 83       	std	Z+2, r18	; 0x02
    3264:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    3266:	48 1b       	sub	r20, r24
    3268:	59 0b       	sbc	r21, r25
    326a:	6a 0b       	sbc	r22, r26
    326c:	7b 0b       	sbc	r23, r27
    326e:	44 83       	std	Z+4, r20	; 0x04
    3270:	55 83       	std	Z+5, r21	; 0x05
    3272:	66 83       	std	Z+6, r22	; 0x06
    3274:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	01 c0       	rjmp	.+2      	; 0x327c <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    327a:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    327c:	60 96       	adiw	r28, 0x10	; 16
    327e:	0f b6       	in	r0, 0x3f	; 63
    3280:	f8 94       	cli
    3282:	de bf       	out	0x3e, r29	; 62
    3284:	0f be       	out	0x3f, r0	; 63
    3286:	cd bf       	out	0x3d, r28	; 61
    3288:	df 91       	pop	r29
    328a:	cf 91       	pop	r28
    328c:	1f 91       	pop	r17
    328e:	0f 91       	pop	r16
    3290:	ff 90       	pop	r15
    3292:	ef 90       	pop	r14
    3294:	df 90       	pop	r13
    3296:	cf 90       	pop	r12
    3298:	bf 90       	pop	r11
    329a:	af 90       	pop	r10
    329c:	9f 90       	pop	r9
    329e:	8f 90       	pop	r8
    32a0:	08 95       	ret

000032a2 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    32a2:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    32a4:	44 81       	ldd	r20, Z+4	; 0x04
    32a6:	55 81       	ldd	r21, Z+5	; 0x05
    32a8:	66 81       	ldd	r22, Z+6	; 0x06
    32aa:	77 81       	ldd	r23, Z+7	; 0x07
    32ac:	41 15       	cp	r20, r1
    32ae:	8a ec       	ldi	r24, 0xCA	; 202
    32b0:	58 07       	cpc	r21, r24
    32b2:	8a e9       	ldi	r24, 0x9A	; 154
    32b4:	68 07       	cpc	r22, r24
    32b6:	8b e3       	ldi	r24, 0x3B	; 59
    32b8:	78 07       	cpc	r23, r24
    32ba:	98 f0       	brcs	.+38     	; 0x32e2 <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    32bc:	5a 5c       	subi	r21, 0xCA	; 202
    32be:	6a 49       	sbci	r22, 0x9A	; 154
    32c0:	7b 43       	sbci	r23, 0x3B	; 59
    32c2:	44 83       	std	Z+4, r20	; 0x04
    32c4:	55 83       	std	Z+5, r21	; 0x05
    32c6:	66 83       	std	Z+6, r22	; 0x06
    32c8:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    32ca:	80 81       	ld	r24, Z
    32cc:	91 81       	ldd	r25, Z+1	; 0x01
    32ce:	a2 81       	ldd	r26, Z+2	; 0x02
    32d0:	b3 81       	ldd	r27, Z+3	; 0x03
    32d2:	01 96       	adiw	r24, 0x01	; 1
    32d4:	a1 1d       	adc	r26, r1
    32d6:	b1 1d       	adc	r27, r1
    32d8:	80 83       	st	Z, r24
    32da:	91 83       	std	Z+1, r25	; 0x01
    32dc:	a2 83       	std	Z+2, r26	; 0x02
    32de:	b3 83       	std	Z+3, r27	; 0x03
    32e0:	e1 cf       	rjmp	.-62     	; 0x32a4 <nrk_time_compact_nanos+0x2>
    }
}
    32e2:	08 95       	ret

000032e4 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    32e4:	8f 92       	push	r8
    32e6:	9f 92       	push	r9
    32e8:	af 92       	push	r10
    32ea:	bf 92       	push	r11
    32ec:	cf 92       	push	r12
    32ee:	df 92       	push	r13
    32f0:	ef 92       	push	r14
    32f2:	ff 92       	push	r15
    32f4:	0f 93       	push	r16
    32f6:	1f 93       	push	r17
    32f8:	cf 93       	push	r28
    32fa:	df 93       	push	r29
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	60 97       	sbiw	r28, 0x10	; 16
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	de bf       	out	0x3e, r29	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	cd bf       	out	0x3d, r28	; 61
    330c:	09 83       	std	Y+1, r16	; 0x01
    330e:	1a 83       	std	Y+2, r17	; 0x02
    3310:	2b 83       	std	Y+3, r18	; 0x03
    3312:	3c 83       	std	Y+4, r19	; 0x04
    3314:	4d 83       	std	Y+5, r20	; 0x05
    3316:	5e 83       	std	Y+6, r21	; 0x06
    3318:	6f 83       	std	Y+7, r22	; 0x07
    331a:	78 87       	std	Y+8, r23	; 0x08
    331c:	89 86       	std	Y+9, r8	; 0x09
    331e:	9a 86       	std	Y+10, r9	; 0x0a
    3320:	ab 86       	std	Y+11, r10	; 0x0b
    3322:	bc 86       	std	Y+12, r11	; 0x0c
    3324:	cd 86       	std	Y+13, r12	; 0x0d
    3326:	de 86       	std	Y+14, r13	; 0x0e
    3328:	ef 86       	std	Y+15, r14	; 0x0f
    332a:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    332c:	09 85       	ldd	r16, Y+9	; 0x09
    332e:	1a 85       	ldd	r17, Y+10	; 0x0a
    3330:	2b 85       	ldd	r18, Y+11	; 0x0b
    3332:	3c 85       	ldd	r19, Y+12	; 0x0c
    3334:	49 81       	ldd	r20, Y+1	; 0x01
    3336:	5a 81       	ldd	r21, Y+2	; 0x02
    3338:	6b 81       	ldd	r22, Y+3	; 0x03
    333a:	7c 81       	ldd	r23, Y+4	; 0x04
    333c:	40 0f       	add	r20, r16
    333e:	51 1f       	adc	r21, r17
    3340:	62 1f       	adc	r22, r18
    3342:	73 1f       	adc	r23, r19
    3344:	fc 01       	movw	r30, r24
    3346:	40 83       	st	Z, r20
    3348:	51 83       	std	Z+1, r21	; 0x01
    334a:	62 83       	std	Z+2, r22	; 0x02
    334c:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    334e:	0d 85       	ldd	r16, Y+13	; 0x0d
    3350:	1e 85       	ldd	r17, Y+14	; 0x0e
    3352:	2f 85       	ldd	r18, Y+15	; 0x0f
    3354:	38 89       	ldd	r19, Y+16	; 0x10
    3356:	4d 81       	ldd	r20, Y+5	; 0x05
    3358:	5e 81       	ldd	r21, Y+6	; 0x06
    335a:	6f 81       	ldd	r22, Y+7	; 0x07
    335c:	78 85       	ldd	r23, Y+8	; 0x08
    335e:	40 0f       	add	r20, r16
    3360:	51 1f       	adc	r21, r17
    3362:	62 1f       	adc	r22, r18
    3364:	73 1f       	adc	r23, r19
    3366:	44 83       	std	Z+4, r20	; 0x04
    3368:	55 83       	std	Z+5, r21	; 0x05
    336a:	66 83       	std	Z+6, r22	; 0x06
    336c:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    336e:	0e 94 51 19 	call	0x32a2	; 0x32a2 <nrk_time_compact_nanos>
return NRK_OK;
}
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	60 96       	adiw	r28, 0x10	; 16
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	cd bf       	out	0x3d, r28	; 61
    3380:	df 91       	pop	r29
    3382:	cf 91       	pop	r28
    3384:	1f 91       	pop	r17
    3386:	0f 91       	pop	r16
    3388:	ff 90       	pop	r15
    338a:	ef 90       	pop	r14
    338c:	df 90       	pop	r13
    338e:	cf 90       	pop	r12
    3390:	bf 90       	pop	r11
    3392:	af 90       	pop	r10
    3394:	9f 90       	pop	r9
    3396:	8f 90       	pop	r8
    3398:	08 95       	ret

0000339a <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    339a:	e0 e5       	ldi	r30, 0x50	; 80
    339c:	f5 e0       	ldi	r31, 0x05	; 5
    339e:	60 83       	st	Z, r22
    33a0:	71 83       	std	Z+1, r23	; 0x01
    33a2:	82 83       	std	Z+2, r24	; 0x02
    33a4:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    33a6:	24 83       	std	Z+4, r18	; 0x04
    33a8:	35 83       	std	Z+5, r19	; 0x05
    33aa:	46 83       	std	Z+6, r20	; 0x06
    33ac:	57 83       	std	Z+7, r21	; 0x07
    33ae:	08 95       	ret

000033b0 <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    33b0:	2f 92       	push	r2
    33b2:	3f 92       	push	r3
    33b4:	4f 92       	push	r4
    33b6:	5f 92       	push	r5
    33b8:	6f 92       	push	r6
    33ba:	7f 92       	push	r7
    33bc:	8f 92       	push	r8
    33be:	9f 92       	push	r9
    33c0:	af 92       	push	r10
    33c2:	bf 92       	push	r11
    33c4:	cf 92       	push	r12
    33c6:	df 92       	push	r13
    33c8:	ef 92       	push	r14
    33ca:	ff 92       	push	r15
    33cc:	0f 93       	push	r16
    33ce:	1f 93       	push	r17
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    33d0:	fc 01       	movw	r30, r24
    33d2:	c0 80       	ld	r12, Z
    33d4:	d1 80       	ldd	r13, Z+1	; 0x01
    33d6:	e2 80       	ldd	r14, Z+2	; 0x02
    33d8:	f3 80       	ldd	r15, Z+3	; 0x03
    33da:	64 81       	ldd	r22, Z+4	; 0x04
    33dc:	75 81       	ldd	r23, Z+5	; 0x05
    33de:	86 81       	ldd	r24, Z+6	; 0x06
    33e0:	97 81       	ldd	r25, Z+7	; 0x07
    33e2:	c1 14       	cp	r12, r1
    33e4:	d1 04       	cpc	r13, r1
    33e6:	e1 04       	cpc	r14, r1
    33e8:	f1 04       	cpc	r15, r1
    33ea:	c1 f1       	breq	.+112    	; 0x345c <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    33ec:	f2 e4       	ldi	r31, 0x42	; 66
    33ee:	cf 16       	cp	r12, r31
    33f0:	d1 04       	cpc	r13, r1
    33f2:	e1 04       	cpc	r14, r1
    33f4:	f1 04       	cpc	r15, r1
    33f6:	d0 f5       	brcc	.+116    	; 0x346c <_nrk_time_to_ticks+0xbc>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    33f8:	1b 01       	movw	r2, r22
    33fa:	2c 01       	movw	r4, r24
    33fc:	61 2c       	mov	r6, r1
    33fe:	71 2c       	mov	r7, r1
    3400:	43 01       	movw	r8, r6
    3402:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3404:	8e 2f       	mov	r24, r30
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	a0 e0       	ldi	r26, 0x00	; 0
    340a:	b0 e0       	ldi	r27, 0x00	; 0
    340c:	8c 15       	cp	r24, r12
    340e:	9d 05       	cpc	r25, r13
    3410:	ae 05       	cpc	r26, r14
    3412:	bf 05       	cpc	r27, r15
    3414:	88 f4       	brcc	.+34     	; 0x3438 <_nrk_time_to_ticks+0x88>
    3416:	91 01       	movw	r18, r2
    3418:	a2 01       	movw	r20, r4
    341a:	b3 01       	movw	r22, r6
    341c:	c4 01       	movw	r24, r8
    341e:	36 53       	subi	r19, 0x36	; 54
    3420:	45 46       	sbci	r20, 0x65	; 101
    3422:	54 4c       	sbci	r21, 0xC4	; 196
    3424:	6f 4f       	sbci	r22, 0xFF	; 255
    3426:	7f 4f       	sbci	r23, 0xFF	; 255
    3428:	8f 4f       	sbci	r24, 0xFF	; 255
    342a:	9f 4f       	sbci	r25, 0xFF	; 255
    342c:	19 01       	movw	r2, r18
    342e:	2a 01       	movw	r4, r20
    3430:	3b 01       	movw	r6, r22
    3432:	4c 01       	movw	r8, r24
    3434:	ef 5f       	subi	r30, 0xFF	; 255
    3436:	e6 cf       	rjmp	.-52     	; 0x3404 <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3438:	83 eb       	ldi	r24, 0xB3	; 179
    343a:	a8 2e       	mov	r10, r24
    343c:	96 ee       	ldi	r25, 0xE6	; 230
    343e:	b9 2e       	mov	r11, r25
    3440:	2e e0       	ldi	r18, 0x0E	; 14
    3442:	c2 2e       	mov	r12, r18
    3444:	d1 2c       	mov	r13, r1
    3446:	e1 2c       	mov	r14, r1
    3448:	f1 2c       	mov	r15, r1
    344a:	00 e0       	ldi	r16, 0x00	; 0
    344c:	10 e0       	ldi	r17, 0x00	; 0
    344e:	91 01       	movw	r18, r2
    3450:	a2 01       	movw	r20, r4
    3452:	b3 01       	movw	r22, r6
    3454:	c4 01       	movw	r24, r8
    3456:	0e 94 fe 24 	call	0x49fc	; 0x49fc <__udivdi3>
    345a:	06 c0       	rjmp	.+12     	; 0x3468 <_nrk_time_to_ticks+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    345c:	23 eb       	ldi	r18, 0xB3	; 179
    345e:	36 ee       	ldi	r19, 0xE6	; 230
    3460:	4e e0       	ldi	r20, 0x0E	; 14
    3462:	50 e0       	ldi	r21, 0x00	; 0
    3464:	0e 94 da 24 	call	0x49b4	; 0x49b4 <__udivmodsi4>
    3468:	c9 01       	movw	r24, r18
    346a:	02 c0       	rjmp	.+4      	; 0x3470 <_nrk_time_to_ticks+0xc0>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    3470:	1f 91       	pop	r17
    3472:	0f 91       	pop	r16
    3474:	ff 90       	pop	r15
    3476:	ef 90       	pop	r14
    3478:	df 90       	pop	r13
    347a:	cf 90       	pop	r12
    347c:	bf 90       	pop	r11
    347e:	af 90       	pop	r10
    3480:	9f 90       	pop	r9
    3482:	8f 90       	pop	r8
    3484:	7f 90       	pop	r7
    3486:	6f 90       	pop	r6
    3488:	5f 90       	pop	r5
    348a:	4f 90       	pop	r4
    348c:	3f 90       	pop	r3
    348e:	2f 90       	pop	r2
    3490:	08 95       	ret

00003492 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3492:	cf 92       	push	r12
    3494:	df 92       	push	r13
    3496:	ef 92       	push	r14
    3498:	ff 92       	push	r15
    349a:	cf 93       	push	r28
    349c:	df 93       	push	r29
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
    34a2:	28 97       	sbiw	r28, 0x08	; 8
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	f8 94       	cli
    34a8:	de bf       	out	0x3e, r29	; 62
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    34ae:	6b 01       	movw	r12, r22
    34b0:	7c 01       	movw	r14, r24
    34b2:	2a e0       	ldi	r18, 0x0A	; 10
    34b4:	f6 94       	lsr	r15
    34b6:	e7 94       	ror	r14
    34b8:	d7 94       	ror	r13
    34ba:	c7 94       	ror	r12
    34bc:	2a 95       	dec	r18
    34be:	d1 f7       	brne	.-12     	; 0x34b4 <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    34c0:	c9 82       	std	Y+1, r12	; 0x01
    34c2:	da 82       	std	Y+2, r13	; 0x02
    34c4:	eb 82       	std	Y+3, r14	; 0x03
    34c6:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    34c8:	9b 01       	movw	r18, r22
    34ca:	ac 01       	movw	r20, r24
    34cc:	33 70       	andi	r19, 0x03	; 3
    34ce:	44 27       	eor	r20, r20
    34d0:	55 27       	eor	r21, r21
    34d2:	63 eb       	ldi	r22, 0xB3	; 179
    34d4:	76 ee       	ldi	r23, 0xE6	; 230
    34d6:	8e e0       	ldi	r24, 0x0E	; 14
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	0e 94 ca 24 	call	0x4994	; 0x4994 <__mulsi3>

return t;
    34de:	2c 2d       	mov	r18, r12
    34e0:	3a 81       	ldd	r19, Y+2	; 0x02
    34e2:	4b 81       	ldd	r20, Y+3	; 0x03
    34e4:	5c 81       	ldd	r21, Y+4	; 0x04
}
    34e6:	28 96       	adiw	r28, 0x08	; 8
    34e8:	0f b6       	in	r0, 0x3f	; 63
    34ea:	f8 94       	cli
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	cd bf       	out	0x3d, r28	; 61
    34f2:	df 91       	pop	r29
    34f4:	cf 91       	pop	r28
    34f6:	ff 90       	pop	r15
    34f8:	ef 90       	pop	r14
    34fa:	df 90       	pop	r13
    34fc:	cf 90       	pop	r12
    34fe:	08 95       	ret

00003500 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    3500:	2f 92       	push	r2
    3502:	3f 92       	push	r3
    3504:	4f 92       	push	r4
    3506:	5f 92       	push	r5
    3508:	6f 92       	push	r6
    350a:	7f 92       	push	r7
    350c:	8f 92       	push	r8
    350e:	9f 92       	push	r9
    3510:	af 92       	push	r10
    3512:	bf 92       	push	r11
    3514:	cf 92       	push	r12
    3516:	df 92       	push	r13
    3518:	ef 92       	push	r14
    351a:	ff 92       	push	r15
    351c:	0f 93       	push	r16
    351e:	1f 93       	push	r17
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3520:	fc 01       	movw	r30, r24
    3522:	c0 80       	ld	r12, Z
    3524:	d1 80       	ldd	r13, Z+1	; 0x01
    3526:	e2 80       	ldd	r14, Z+2	; 0x02
    3528:	f3 80       	ldd	r15, Z+3	; 0x03
    352a:	64 81       	ldd	r22, Z+4	; 0x04
    352c:	75 81       	ldd	r23, Z+5	; 0x05
    352e:	86 81       	ldd	r24, Z+6	; 0x06
    3530:	97 81       	ldd	r25, Z+7	; 0x07
    3532:	c1 14       	cp	r12, r1
    3534:	d1 04       	cpc	r13, r1
    3536:	e1 04       	cpc	r14, r1
    3538:	f1 04       	cpc	r15, r1
    353a:	99 f1       	breq	.+102    	; 0x35a2 <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    353c:	1b 01       	movw	r2, r22
    353e:	2c 01       	movw	r4, r24
    3540:	61 2c       	mov	r6, r1
    3542:	71 2c       	mov	r7, r1
    3544:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3546:	e0 e0       	ldi	r30, 0x00	; 0
    3548:	8e 2f       	mov	r24, r30
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	a0 e0       	ldi	r26, 0x00	; 0
    354e:	b0 e0       	ldi	r27, 0x00	; 0
    3550:	8c 15       	cp	r24, r12
    3552:	9d 05       	cpc	r25, r13
    3554:	ae 05       	cpc	r26, r14
    3556:	bf 05       	cpc	r27, r15
    3558:	88 f4       	brcc	.+34     	; 0x357c <_nrk_time_to_ticks_long+0x7c>
    355a:	91 01       	movw	r18, r2
    355c:	a2 01       	movw	r20, r4
    355e:	b3 01       	movw	r22, r6
    3560:	c4 01       	movw	r24, r8
    3562:	36 53       	subi	r19, 0x36	; 54
    3564:	45 46       	sbci	r20, 0x65	; 101
    3566:	54 4c       	sbci	r21, 0xC4	; 196
    3568:	6f 4f       	sbci	r22, 0xFF	; 255
    356a:	7f 4f       	sbci	r23, 0xFF	; 255
    356c:	8f 4f       	sbci	r24, 0xFF	; 255
    356e:	9f 4f       	sbci	r25, 0xFF	; 255
    3570:	19 01       	movw	r2, r18
    3572:	2a 01       	movw	r4, r20
    3574:	3b 01       	movw	r6, r22
    3576:	4c 01       	movw	r8, r24
    3578:	ef 5f       	subi	r30, 0xFF	; 255
    357a:	e6 cf       	rjmp	.-52     	; 0x3548 <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    357c:	83 eb       	ldi	r24, 0xB3	; 179
    357e:	a8 2e       	mov	r10, r24
    3580:	96 ee       	ldi	r25, 0xE6	; 230
    3582:	b9 2e       	mov	r11, r25
    3584:	2e e0       	ldi	r18, 0x0E	; 14
    3586:	c2 2e       	mov	r12, r18
    3588:	d1 2c       	mov	r13, r1
    358a:	e1 2c       	mov	r14, r1
    358c:	f1 2c       	mov	r15, r1
    358e:	00 e0       	ldi	r16, 0x00	; 0
    3590:	10 e0       	ldi	r17, 0x00	; 0
    3592:	91 01       	movw	r18, r2
    3594:	a2 01       	movw	r20, r4
    3596:	b3 01       	movw	r22, r6
    3598:	c4 01       	movw	r24, r8
    359a:	0e 94 fe 24 	call	0x49fc	; 0x49fc <__udivdi3>
    359e:	ca 01       	movw	r24, r20
    35a0:	07 c0       	rjmp	.+14     	; 0x35b0 <_nrk_time_to_ticks_long+0xb0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    35a2:	23 eb       	ldi	r18, 0xB3	; 179
    35a4:	36 ee       	ldi	r19, 0xE6	; 230
    35a6:	4e e0       	ldi	r20, 0x0E	; 14
    35a8:	50 e0       	ldi	r21, 0x00	; 0
    35aa:	0e 94 da 24 	call	0x49b4	; 0x49b4 <__udivmodsi4>
    35ae:	ca 01       	movw	r24, r20
}
return ticks;
}
    35b0:	b9 01       	movw	r22, r18
    35b2:	1f 91       	pop	r17
    35b4:	0f 91       	pop	r16
    35b6:	ff 90       	pop	r15
    35b8:	ef 90       	pop	r14
    35ba:	df 90       	pop	r13
    35bc:	cf 90       	pop	r12
    35be:	bf 90       	pop	r11
    35c0:	af 90       	pop	r10
    35c2:	9f 90       	pop	r9
    35c4:	8f 90       	pop	r8
    35c6:	7f 90       	pop	r7
    35c8:	6f 90       	pop	r6
    35ca:	5f 90       	pop	r5
    35cc:	4f 90       	pop	r4
    35ce:	3f 90       	pop	r3
    35d0:	2f 90       	pop	r2
    35d2:	08 95       	ret

000035d4 <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    35d4:	c2 e0       	ldi	r28, 0x02	; 2
{
  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    35d6:	d1 e0       	ldi	r29, 0x01	; 1
{
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{
  nrk_stack_check(); 
    35d8:	0e 94 b3 11 	call	0x2366	; 0x2366 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    35dc:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <_nrk_get_next_wakeup>
    35e0:	84 30       	cpi	r24, 0x04	; 4
    35e2:	28 f4       	brcc	.+10     	; 0x35ee <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    35e4:	d0 93 4d 05 	sts	0x054D, r29
	    nrk_idle();
    35e8:	0e 94 ab 22 	call	0x4556	; 0x4556 <nrk_idle>
    35ec:	08 c0       	rjmp	.+16     	; 0x35fe <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    35ee:	8a e0       	ldi	r24, 0x0A	; 10
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    35f6:	c0 93 4d 05 	sts	0x054D, r28
	    nrk_sleep();
    35fa:	0e 94 9f 22 	call	0x453e	; 0x453e <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    35fe:	80 91 2f 04 	lds	r24, 0x042F
    3602:	85 35       	cpi	r24, 0x55	; 85
    3604:	19 f0       	breq	.+6      	; 0x360c <nrk_idle_task+0x38>
    3606:	88 e0       	ldi	r24, 0x08	; 8
    3608:	0e 94 ee 10 	call	0x21dc	; 0x21dc <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    360c:	80 91 7e 41 	lds	r24, 0x417E
    3610:	85 35       	cpi	r24, 0x55	; 85
    3612:	11 f3       	breq	.-60     	; 0x35d8 <nrk_idle_task+0x4>
    3614:	88 e0       	ldi	r24, 0x08	; 8
    3616:	0e 94 ee 10 	call	0x21dc	; 0x21dc <nrk_error_add>
    361a:	de cf       	rjmp	.-68     	; 0x35d8 <nrk_idle_task+0x4>

0000361c <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    361c:	2f 92       	push	r2
    361e:	3f 92       	push	r3
    3620:	4f 92       	push	r4
    3622:	5f 92       	push	r5
    3624:	6f 92       	push	r6
    3626:	7f 92       	push	r7
    3628:	8f 92       	push	r8
    362a:	9f 92       	push	r9
    362c:	af 92       	push	r10
    362e:	bf 92       	push	r11
    3630:	cf 92       	push	r12
    3632:	df 92       	push	r13
    3634:	ef 92       	push	r14
    3636:	ff 92       	push	r15
    3638:	0f 93       	push	r16
    363a:	1f 93       	push	r17
    363c:	cf 93       	push	r28
    363e:	df 93       	push	r29
    3640:	00 d0       	rcall	.+0      	; 0x3642 <_nrk_scheduler+0x26>
    3642:	00 d0       	rcall	.+0      	; 0x3644 <_nrk_scheduler+0x28>
    3644:	cd b7       	in	r28, 0x3d	; 61
    3646:	de b7       	in	r29, 0x3e	; 62
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    nrk_int_enable();   // this should be removed...  Not needed
    3648:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <nrk_int_enable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_precision_os_timer_reset();
    364c:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <_nrk_precision_os_timer_reset>
    _nrk_high_speed_timer_reset();
    3650:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    3654:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <_nrk_high_speed_timer_get>
    3658:	1c 01       	movw	r2, r24
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    365a:	8a ef       	ldi	r24, 0xFA	; 250
    365c:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    3660:	a0 91 2d 04 	lds	r26, 0x042D
    3664:	b0 e0       	ldi	r27, 0x00	; 0
    3666:	23 eb       	ldi	r18, 0xB3	; 179
    3668:	36 ee       	ldi	r19, 0xE6	; 230
    366a:	4e e0       	ldi	r20, 0x0E	; 14
    366c:	50 e0       	ldi	r21, 0x00	; 0
    366e:	0e 94 bf 24 	call	0x497e	; 0x497e <__muluhisi3>
    3672:	00 91 54 05 	lds	r16, 0x0554
    3676:	10 91 55 05 	lds	r17, 0x0555
    367a:	20 91 56 05 	lds	r18, 0x0556
    367e:	30 91 57 05 	lds	r19, 0x0557
    3682:	6b 01       	movw	r12, r22
    3684:	7c 01       	movw	r14, r24
    3686:	c0 0e       	add	r12, r16
    3688:	d1 1e       	adc	r13, r17
    368a:	e2 1e       	adc	r14, r18
    368c:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    368e:	c7 01       	movw	r24, r14
    3690:	b6 01       	movw	r22, r12
    3692:	23 eb       	ldi	r18, 0xB3	; 179
    3694:	36 ee       	ldi	r19, 0xE6	; 230
    3696:	4e e0       	ldi	r20, 0x0E	; 14
    3698:	50 e0       	ldi	r21, 0x00	; 0
    369a:	0e 94 da 24 	call	0x49b4	; 0x49b4 <__udivmodsi4>
    369e:	26 01       	movw	r4, r12
    36a0:	37 01       	movw	r6, r14
    36a2:	46 1a       	sub	r4, r22
    36a4:	57 0a       	sbc	r5, r23
    36a6:	68 0a       	sbc	r6, r24
    36a8:	79 0a       	sbc	r7, r25
    36aa:	d3 01       	movw	r26, r6
    36ac:	c2 01       	movw	r24, r4
    36ae:	00 91 50 05 	lds	r16, 0x0550
    36b2:	10 91 51 05 	lds	r17, 0x0551
    36b6:	20 91 52 05 	lds	r18, 0x0552
    36ba:	30 91 53 05 	lds	r19, 0x0553

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    36be:	43 eb       	ldi	r20, 0xB3	; 179
    36c0:	84 2e       	mov	r8, r20
    36c2:	46 ee       	ldi	r20, 0xE6	; 230
    36c4:	94 2e       	mov	r9, r20
    36c6:	4e e0       	ldi	r20, 0x0E	; 14
    36c8:	a4 2e       	mov	r10, r20
    36ca:	b1 2c       	mov	r11, r1
    36cc:	68 01       	movw	r12, r16
    36ce:	79 01       	movw	r14, r18
    36d0:	4f ef       	ldi	r20, 0xFF	; 255
    36d2:	c4 1a       	sub	r12, r20
    36d4:	d4 0a       	sbc	r13, r20
    36d6:	e4 0a       	sbc	r14, r20
    36d8:	f4 0a       	sbc	r15, r20
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    36da:	81 15       	cp	r24, r1
    36dc:	5a ec       	ldi	r21, 0xCA	; 202
    36de:	95 07       	cpc	r25, r21
    36e0:	5a e9       	ldi	r21, 0x9A	; 154
    36e2:	a5 07       	cpc	r26, r21
    36e4:	5b e3       	ldi	r21, 0x3B	; 59
    36e6:	b5 07       	cpc	r27, r21
    36e8:	c8 f0       	brcs	.+50     	; 0x371c <_nrk_scheduler+0x100>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    36ea:	2c 01       	movw	r4, r24
    36ec:	3d 01       	movw	r6, r26
    36ee:	2a ec       	ldi	r18, 0xCA	; 202
    36f0:	52 1a       	sub	r5, r18
    36f2:	2a e9       	ldi	r18, 0x9A	; 154
    36f4:	62 0a       	sbc	r6, r18
    36f6:	2b e3       	ldi	r18, 0x3B	; 59
    36f8:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    36fa:	c3 01       	movw	r24, r6
    36fc:	b2 01       	movw	r22, r4
    36fe:	a5 01       	movw	r20, r10
    3700:	94 01       	movw	r18, r8
    3702:	0e 94 da 24 	call	0x49b4	; 0x49b4 <__udivmodsi4>
    3706:	a3 01       	movw	r20, r6
    3708:	92 01       	movw	r18, r4
    370a:	26 1b       	sub	r18, r22
    370c:	37 0b       	sbc	r19, r23
    370e:	48 0b       	sbc	r20, r24
    3710:	59 0b       	sbc	r21, r25
    3712:	da 01       	movw	r26, r20
    3714:	c9 01       	movw	r24, r18
    3716:	97 01       	movw	r18, r14
    3718:	86 01       	movw	r16, r12
    371a:	d8 cf       	rjmp	.-80     	; 0x36cc <_nrk_scheduler+0xb0>
    371c:	80 93 54 05 	sts	0x0554, r24
    3720:	90 93 55 05 	sts	0x0555, r25
    3724:	a0 93 56 05 	sts	0x0556, r26
    3728:	b0 93 57 05 	sts	0x0557, r27
    372c:	00 93 50 05 	sts	0x0550, r16
    3730:	10 93 51 05 	sts	0x0551, r17
    3734:	20 93 52 05 	sts	0x0552, r18
    3738:	30 93 53 05 	sts	0x0553, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    373c:	e0 91 59 05 	lds	r30, 0x0559
    3740:	f0 91 5a 05 	lds	r31, 0x055A
    3744:	85 81       	ldd	r24, Z+5	; 0x05
    3746:	88 23       	and	r24, r24
    3748:	39 f1       	breq	.+78     	; 0x3798 <_nrk_scheduler+0x17c>
    374a:	81 85       	ldd	r24, Z+9	; 0x09
    374c:	84 30       	cpi	r24, 0x04	; 4
    374e:	21 f1       	breq	.+72     	; 0x3798 <_nrk_scheduler+0x17c>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    3750:	87 81       	ldd	r24, Z+7	; 0x07
    3752:	82 30       	cpi	r24, 0x02	; 2
    3754:	29 f0       	breq	.+10     	; 0x3760 <_nrk_scheduler+0x144>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    3756:	88 23       	and	r24, r24
    3758:	41 f0       	breq	.+16     	; 0x376a <_nrk_scheduler+0x14e>
    375a:	86 81       	ldd	r24, Z+6	; 0x06
    375c:	81 11       	cpse	r24, r1
    375e:	02 c0       	rjmp	.+4      	; 0x3764 <_nrk_scheduler+0x148>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    3760:	85 e0       	ldi	r24, 0x05	; 5
    3762:	01 c0       	rjmp	.+2      	; 0x3766 <_nrk_scheduler+0x14a>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3764:	83 e0       	ldi	r24, 0x03	; 3
    3766:	81 87       	std	Z+9, r24	; 0x09
    3768:	14 c0       	rjmp	.+40     	; 0x3792 <_nrk_scheduler+0x176>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    376a:	83 e0       	ldi	r24, 0x03	; 3
    376c:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    376e:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    3770:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    3772:	85 89       	ldd	r24, Z+21	; 0x15
    3774:	96 89       	ldd	r25, Z+22	; 0x16
    3776:	a7 89       	ldd	r26, Z+23	; 0x17
    3778:	b0 8d       	ldd	r27, Z+24	; 0x18
    377a:	89 2b       	or	r24, r25
    377c:	8a 2b       	or	r24, r26
    377e:	8b 2b       	or	r24, r27
    3780:	41 f4       	brne	.+16     	; 0x3792 <_nrk_scheduler+0x176>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    3782:	81 8d       	ldd	r24, Z+25	; 0x19
    3784:	92 8d       	ldd	r25, Z+26	; 0x1a
    3786:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3788:	b4 8d       	ldd	r27, Z+28	; 0x1c
    378a:	85 8b       	std	Z+21, r24	; 0x15
    378c:	96 8b       	std	Z+22, r25	; 0x16
    378e:	a7 8b       	std	Z+23, r26	; 0x17
    3790:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    3792:	80 85       	ldd	r24, Z+8	; 0x08
    3794:	0e 94 d7 15 	call	0x2bae	; 0x2bae <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    3798:	e0 91 59 05 	lds	r30, 0x0559
    379c:	f0 91 5a 05 	lds	r31, 0x055A
    37a0:	85 a1       	ldd	r24, Z+37	; 0x25
    37a2:	96 a1       	ldd	r25, Z+38	; 0x26
    37a4:	a7 a1       	ldd	r26, Z+39	; 0x27
    37a6:	b0 a5       	ldd	r27, Z+40	; 0x28
    37a8:	89 2b       	or	r24, r25
    37aa:	8a 2b       	or	r24, r26
    37ac:	8b 2b       	or	r24, r27
    37ae:	09 f4       	brne	.+2      	; 0x37b2 <_nrk_scheduler+0x196>
    37b0:	44 c0       	rjmp	.+136    	; 0x383a <_nrk_scheduler+0x21e>
    37b2:	20 85       	ldd	r18, Z+8	; 0x08
    37b4:	22 23       	and	r18, r18
    37b6:	09 f4       	brne	.+2      	; 0x37ba <_nrk_scheduler+0x19e>
    37b8:	40 c0       	rjmp	.+128    	; 0x383a <_nrk_scheduler+0x21e>
    37ba:	81 85       	ldd	r24, Z+9	; 0x09
    37bc:	84 30       	cpi	r24, 0x04	; 4
    37be:	e9 f1       	breq	.+122    	; 0x383a <_nrk_scheduler+0x21e>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    37c0:	85 8d       	ldd	r24, Z+29	; 0x1d
    37c2:	96 8d       	ldd	r25, Z+30	; 0x1e
    37c4:	a7 8d       	ldd	r26, Z+31	; 0x1f
    37c6:	b0 a1       	ldd	r27, Z+32	; 0x20
    37c8:	40 91 2d 04 	lds	r20, 0x042D
    37cc:	50 e0       	ldi	r21, 0x00	; 0
    37ce:	60 e0       	ldi	r22, 0x00	; 0
    37d0:	70 e0       	ldi	r23, 0x00	; 0
    37d2:	84 17       	cp	r24, r20
    37d4:	95 07       	cpc	r25, r21
    37d6:	a6 07       	cpc	r26, r22
    37d8:	b7 07       	cpc	r27, r23
    37da:	68 f4       	brcc	.+26     	; 0x37f6 <_nrk_scheduler+0x1da>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    37dc:	62 2f       	mov	r22, r18
    37de:	82 e0       	ldi	r24, 0x02	; 2
    37e0:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    37e4:	e0 91 59 05 	lds	r30, 0x0559
    37e8:	f0 91 5a 05 	lds	r31, 0x055A
    37ec:	15 8e       	std	Z+29, r1	; 0x1d
    37ee:	16 8e       	std	Z+30, r1	; 0x1e
    37f0:	17 8e       	std	Z+31, r1	; 0x1f
    37f2:	10 a2       	std	Z+32, r1	; 0x20
    37f4:	08 c0       	rjmp	.+16     	; 0x3806 <_nrk_scheduler+0x1ea>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    37f6:	84 1b       	sub	r24, r20
    37f8:	95 0b       	sbc	r25, r21
    37fa:	a6 0b       	sbc	r26, r22
    37fc:	b7 0b       	sbc	r27, r23
    37fe:	85 8f       	std	Z+29, r24	; 0x1d
    3800:	96 8f       	std	Z+30, r25	; 0x1e
    3802:	a7 8f       	std	Z+31, r26	; 0x1f
    3804:	b0 a3       	std	Z+32, r27	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    3806:	e0 91 59 05 	lds	r30, 0x0559
    380a:	f0 91 5a 05 	lds	r31, 0x055A
    380e:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    3810:	85 8d       	ldd	r24, Z+29	; 0x1d
    3812:	96 8d       	ldd	r25, Z+30	; 0x1e
    3814:	a7 8d       	ldd	r26, Z+31	; 0x1f
    3816:	b0 a1       	ldd	r27, Z+32	; 0x20
    3818:	89 2b       	or	r24, r25
    381a:	8a 2b       	or	r24, r26
    381c:	8b 2b       	or	r24, r27
    381e:	69 f4       	brne	.+26     	; 0x383a <_nrk_scheduler+0x21e>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    3820:	61 2f       	mov	r22, r17
    3822:	83 e0       	ldi	r24, 0x03	; 3
    3824:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    3828:	e0 91 59 05 	lds	r30, 0x0559
    382c:	f0 91 5a 05 	lds	r31, 0x055A
    3830:	83 e0       	ldi	r24, 0x03	; 3
    3832:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    3834:	81 2f       	mov	r24, r17
    3836:	0e 94 d7 15 	call	0x2bae	; 0x2bae <nrk_rem_from_readyQ>
    383a:	86 ef       	ldi	r24, 0xF6	; 246
    383c:	94 e0       	ldi	r25, 0x04	; 4
    383e:	9c 83       	std	Y+4, r25	; 0x04
    3840:	8b 83       	std	Y+3, r24	; 0x03
    3842:	00 e6       	ldi	r16, 0x60	; 96
    3844:	1a ee       	ldi	r17, 0xEA	; 234
    3846:	19 82       	std	Y+1, r1	; 0x01
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3848:	9a ef       	ldi	r25, 0xFA	; 250
    384a:	c9 2e       	mov	r12, r25
    384c:	d1 2c       	mov	r13, r1
    384e:	e1 2c       	mov	r14, r1
    3850:	f1 2c       	mov	r15, r1
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    3852:	81 2c       	mov	r8, r1
    3854:	91 2c       	mov	r9, r1
    3856:	54 01       	movw	r10, r8
    3858:	83 94       	inc	r8
    385a:	eb 81       	ldd	r30, Y+3	; 0x03
    385c:	fc 81       	ldd	r31, Y+4	; 0x04
    385e:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    3860:	80 81       	ld	r24, Z
    3862:	8f 3f       	cpi	r24, 0xFF	; 255
    3864:	09 f4       	brne	.+2      	; 0x3868 <_nrk_scheduler+0x24c>
    3866:	00 c1       	rjmp	.+512    	; 0x3a68 <_nrk_scheduler+0x44c>
    3868:	eb 81       	ldd	r30, Y+3	; 0x03
    386a:	fc 81       	ldd	r31, Y+4	; 0x04
    386c:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    386e:	10 82       	st	Z, r1
    3870:	eb 81       	ldd	r30, Y+3	; 0x03
    3872:	fc 81       	ldd	r31, Y+4	; 0x04
    3874:	f0 81       	ld	r31, Z
    3876:	fa 83       	std	Y+2, r31	; 0x02
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    3878:	88 23       	and	r24, r24
    387a:	09 f4       	brne	.+2      	; 0x387e <_nrk_scheduler+0x262>
    387c:	68 c0       	rjmp	.+208    	; 0x394e <_nrk_scheduler+0x332>
    387e:	f4 30       	cpi	r31, 0x04	; 4
    3880:	09 f4       	brne	.+2      	; 0x3884 <_nrk_scheduler+0x268>
    3882:	f2 c0       	rjmp	.+484    	; 0x3a68 <_nrk_scheduler+0x44c>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    3884:	eb 81       	ldd	r30, Y+3	; 0x03
    3886:	fc 81       	ldd	r31, Y+4	; 0x04
    3888:	44 84       	ldd	r4, Z+12	; 0x0c
    388a:	55 84       	ldd	r5, Z+13	; 0x0d
    388c:	66 84       	ldd	r6, Z+14	; 0x0e
    388e:	77 84       	ldd	r7, Z+15	; 0x0f
    3890:	60 91 2d 04 	lds	r22, 0x042D
    3894:	70 e0       	ldi	r23, 0x00	; 0
    3896:	80 e0       	ldi	r24, 0x00	; 0
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	46 16       	cp	r4, r22
    389c:	57 06       	cpc	r5, r23
    389e:	68 06       	cpc	r6, r24
    38a0:	79 06       	cpc	r7, r25
    38a2:	48 f0       	brcs	.+18     	; 0x38b6 <_nrk_scheduler+0x29a>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    38a4:	46 1a       	sub	r4, r22
    38a6:	57 0a       	sbc	r5, r23
    38a8:	68 0a       	sbc	r6, r24
    38aa:	79 0a       	sbc	r7, r25
    38ac:	44 86       	std	Z+12, r4	; 0x0c
    38ae:	55 86       	std	Z+13, r5	; 0x0d
    38b0:	66 86       	std	Z+14, r6	; 0x0e
    38b2:	77 86       	std	Z+15, r7	; 0x0f
    38b4:	06 c0       	rjmp	.+12     	; 0x38c2 <_nrk_scheduler+0x2a6>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    38b6:	eb 81       	ldd	r30, Y+3	; 0x03
    38b8:	fc 81       	ldd	r31, Y+4	; 0x04
    38ba:	14 86       	std	Z+12, r1	; 0x0c
    38bc:	15 86       	std	Z+13, r1	; 0x0d
    38be:	16 86       	std	Z+14, r1	; 0x0e
    38c0:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    38c2:	eb 81       	ldd	r30, Y+3	; 0x03
    38c4:	fc 81       	ldd	r31, Y+4	; 0x04
    38c6:	40 88       	ldd	r4, Z+16	; 0x10
    38c8:	51 88       	ldd	r5, Z+17	; 0x11
    38ca:	62 88       	ldd	r6, Z+18	; 0x12
    38cc:	73 88       	ldd	r7, Z+19	; 0x13
    38ce:	46 16       	cp	r4, r22
    38d0:	57 06       	cpc	r5, r23
    38d2:	68 06       	cpc	r6, r24
    38d4:	79 06       	cpc	r7, r25
    38d6:	48 f0       	brcs	.+18     	; 0x38ea <_nrk_scheduler+0x2ce>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    38d8:	a3 01       	movw	r20, r6
    38da:	92 01       	movw	r18, r4
    38dc:	26 1b       	sub	r18, r22
    38de:	37 0b       	sbc	r19, r23
    38e0:	48 0b       	sbc	r20, r24
    38e2:	59 0b       	sbc	r21, r25
    38e4:	da 01       	movw	r26, r20
    38e6:	c9 01       	movw	r24, r18
    38e8:	13 c0       	rjmp	.+38     	; 0x3910 <_nrk_scheduler+0x2f4>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    38ea:	eb 81       	ldd	r30, Y+3	; 0x03
    38ec:	fc 81       	ldd	r31, Y+4	; 0x04
    38ee:	20 8d       	ldd	r18, Z+24	; 0x18
    38f0:	31 8d       	ldd	r19, Z+25	; 0x19
    38f2:	42 8d       	ldd	r20, Z+26	; 0x1a
    38f4:	53 8d       	ldd	r21, Z+27	; 0x1b
    38f6:	62 17       	cp	r22, r18
    38f8:	73 07       	cpc	r23, r19
    38fa:	84 07       	cpc	r24, r20
    38fc:	95 07       	cpc	r25, r21
    38fe:	68 f4       	brcc	.+26     	; 0x391a <_nrk_scheduler+0x2fe>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    3900:	29 01       	movw	r4, r18
    3902:	3a 01       	movw	r6, r20
    3904:	46 1a       	sub	r4, r22
    3906:	57 0a       	sbc	r5, r23
    3908:	68 0a       	sbc	r6, r24
    390a:	79 0a       	sbc	r7, r25
    390c:	d3 01       	movw	r26, r6
    390e:	c2 01       	movw	r24, r4
    3910:	80 8b       	std	Z+16, r24	; 0x10
    3912:	91 8b       	std	Z+17, r25	; 0x11
    3914:	a2 8b       	std	Z+18, r26	; 0x12
    3916:	b3 8b       	std	Z+19, r27	; 0x13
    3918:	08 c0       	rjmp	.+16     	; 0x392a <_nrk_scheduler+0x30e>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    391a:	0e 94 da 24 	call	0x49b4	; 0x49b4 <__udivmodsi4>
    391e:	eb 81       	ldd	r30, Y+3	; 0x03
    3920:	fc 81       	ldd	r31, Y+4	; 0x04
    3922:	60 8b       	std	Z+16, r22	; 0x10
    3924:	71 8b       	std	Z+17, r23	; 0x11
    3926:	82 8b       	std	Z+18, r24	; 0x12
    3928:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    392a:	eb 81       	ldd	r30, Y+3	; 0x03
    392c:	fc 81       	ldd	r31, Y+4	; 0x04
    392e:	80 89       	ldd	r24, Z+16	; 0x10
    3930:	91 89       	ldd	r25, Z+17	; 0x11
    3932:	a2 89       	ldd	r26, Z+18	; 0x12
    3934:	b3 89       	ldd	r27, Z+19	; 0x13
    3936:	89 2b       	or	r24, r25
    3938:	8a 2b       	or	r24, r26
    393a:	8b 2b       	or	r24, r27
    393c:	41 f4       	brne	.+16     	; 0x394e <_nrk_scheduler+0x332>
    393e:	80 8d       	ldd	r24, Z+24	; 0x18
    3940:	91 8d       	ldd	r25, Z+25	; 0x19
    3942:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3944:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3946:	80 8b       	std	Z+16, r24	; 0x10
    3948:	91 8b       	std	Z+17, r25	; 0x11
    394a:	a2 8b       	std	Z+18, r26	; 0x12
    394c:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    394e:	fa 81       	ldd	r31, Y+2	; 0x02
    3950:	f3 30       	cpi	r31, 0x03	; 3
    3952:	09 f0       	breq	.+2      	; 0x3956 <_nrk_scheduler+0x33a>
    3954:	89 c0       	rjmp	.+274    	; 0x3a68 <_nrk_scheduler+0x44c>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    3956:	eb 81       	ldd	r30, Y+3	; 0x03
    3958:	fc 81       	ldd	r31, Y+4	; 0x04
    395a:	84 85       	ldd	r24, Z+12	; 0x0c
    395c:	95 85       	ldd	r25, Z+13	; 0x0d
    395e:	a6 85       	ldd	r26, Z+14	; 0x0e
    3960:	b7 85       	ldd	r27, Z+15	; 0x0f
    3962:	89 2b       	or	r24, r25
    3964:	8a 2b       	or	r24, r26
    3966:	8b 2b       	or	r24, r27
    3968:	09 f0       	breq	.+2      	; 0x396c <_nrk_scheduler+0x350>
    396a:	6b c0       	rjmp	.+214    	; 0x3a42 <_nrk_scheduler+0x426>
    396c:	df 01       	movw	r26, r30
    396e:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    3970:	8c 91       	ld	r24, X
    3972:	9f 01       	movw	r18, r30
    3974:	23 50       	subi	r18, 0x03	; 3
    3976:	31 09       	sbc	r19, r1
    3978:	88 23       	and	r24, r24
    397a:	a9 f0       	breq	.+42     	; 0x39a6 <_nrk_scheduler+0x38a>
    397c:	f9 01       	movw	r30, r18
    397e:	80 81       	ld	r24, Z
    3980:	88 23       	and	r24, r24
    3982:	89 f0       	breq	.+34     	; 0x39a6 <_nrk_scheduler+0x38a>
    3984:	b5 01       	movw	r22, r10
    3986:	a4 01       	movw	r20, r8
    3988:	00 90 49 05 	lds	r0, 0x0549
    398c:	04 c0       	rjmp	.+8      	; 0x3996 <_nrk_scheduler+0x37a>
    398e:	44 0f       	add	r20, r20
    3990:	55 1f       	adc	r21, r21
    3992:	66 1f       	adc	r22, r22
    3994:	77 1f       	adc	r23, r23
    3996:	0a 94       	dec	r0
    3998:	d2 f7       	brpl	.-12     	; 0x398e <_nrk_scheduler+0x372>
    399a:	eb 81       	ldd	r30, Y+3	; 0x03
    399c:	fc 81       	ldd	r31, Y+4	; 0x04
    399e:	40 87       	std	Z+8, r20	; 0x08
    39a0:	51 87       	std	Z+9, r21	; 0x09
    39a2:	62 87       	std	Z+10, r22	; 0x0a
    39a4:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    39a6:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    39a8:	f9 01       	movw	r30, r18
    39aa:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    39ac:	eb 81       	ldd	r30, Y+3	; 0x03
    39ae:	fc 81       	ldd	r31, Y+4	; 0x04
    39b0:	a0 a1       	ldd	r26, Z+32	; 0x20
    39b2:	b1 a1       	ldd	r27, Z+33	; 0x21
    39b4:	40 8c       	ldd	r4, Z+24	; 0x18
    39b6:	51 8c       	ldd	r5, Z+25	; 0x19
    39b8:	62 8c       	ldd	r6, Z+26	; 0x1a
    39ba:	73 8c       	ldd	r7, Z+27	; 0x1b
    39bc:	44 8d       	ldd	r20, Z+28	; 0x1c
    39be:	55 8d       	ldd	r21, Z+29	; 0x1d
    39c0:	66 8d       	ldd	r22, Z+30	; 0x1e
    39c2:	77 8d       	ldd	r23, Z+31	; 0x1f
    39c4:	a1 30       	cpi	r26, 0x01	; 1
    39c6:	b1 05       	cpc	r27, r1
    39c8:	d1 f4       	brne	.+52     	; 0x39fe <_nrk_scheduler+0x3e2>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    39ca:	44 8b       	std	Z+20, r20	; 0x14
    39cc:	55 8b       	std	Z+21, r21	; 0x15
    39ce:	66 8b       	std	Z+22, r22	; 0x16
    39d0:	77 8b       	std	Z+23, r23	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    39d2:	22 e0       	ldi	r18, 0x02	; 2
    39d4:	20 83       	st	Z, r18
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    39d6:	80 89       	ldd	r24, Z+16	; 0x10
    39d8:	91 89       	ldd	r25, Z+17	; 0x11
    39da:	a2 89       	ldd	r26, Z+18	; 0x12
    39dc:	b3 89       	ldd	r27, Z+19	; 0x13
    39de:	84 87       	std	Z+12, r24	; 0x0c
    39e0:	95 87       	std	Z+13, r25	; 0x0d
    39e2:	a6 87       	std	Z+14, r26	; 0x0e
    39e4:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    39e6:	45 28       	or	r4, r5
    39e8:	46 28       	or	r4, r6
    39ea:	47 28       	or	r4, r7
    39ec:	21 f4       	brne	.+8      	; 0x39f6 <_nrk_scheduler+0x3da>
    39ee:	c4 86       	std	Z+12, r12	; 0x0c
    39f0:	d5 86       	std	Z+13, r13	; 0x0d
    39f2:	e6 86       	std	Z+14, r14	; 0x0e
    39f4:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    39f6:	89 81       	ldd	r24, Y+1	; 0x01
    39f8:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <nrk_add_to_readyQ>
    39fc:	22 c0       	rjmp	.+68     	; 0x3a42 <_nrk_scheduler+0x426>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    39fe:	eb 81       	ldd	r30, Y+3	; 0x03
    3a00:	fc 81       	ldd	r31, Y+4	; 0x04
    3a02:	44 8b       	std	Z+20, r20	; 0x14
    3a04:	55 8b       	std	Z+21, r21	; 0x15
    3a06:	66 8b       	std	Z+22, r22	; 0x16
    3a08:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3a0a:	11 97       	sbiw	r26, 0x01	; 1
    3a0c:	a3 01       	movw	r20, r6
    3a0e:	92 01       	movw	r18, r4
    3a10:	0e 94 bf 24 	call	0x497e	; 0x497e <__muluhisi3>
    3a14:	64 87       	std	Z+12, r22	; 0x0c
    3a16:	75 87       	std	Z+13, r23	; 0x0d
    3a18:	86 87       	std	Z+14, r24	; 0x0e
    3a1a:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    3a1c:	60 8b       	std	Z+16, r22	; 0x10
    3a1e:	71 8b       	std	Z+17, r23	; 0x11
    3a20:	82 8b       	std	Z+18, r24	; 0x12
    3a22:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    3a24:	45 28       	or	r4, r5
    3a26:	46 28       	or	r4, r6
    3a28:	47 28       	or	r4, r7
    3a2a:	21 f4       	brne	.+8      	; 0x3a34 <_nrk_scheduler+0x418>
    3a2c:	c4 86       	std	Z+12, r12	; 0x0c
    3a2e:	d5 86       	std	Z+13, r13	; 0x0d
    3a30:	e6 86       	std	Z+14, r14	; 0x0e
    3a32:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    3a34:	44 24       	eor	r4, r4
    3a36:	43 94       	inc	r4
    3a38:	51 2c       	mov	r5, r1
    3a3a:	eb 81       	ldd	r30, Y+3	; 0x03
    3a3c:	fc 81       	ldd	r31, Y+4	; 0x04
    3a3e:	51 a2       	std	Z+33, r5	; 0x21
    3a40:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    3a42:	eb 81       	ldd	r30, Y+3	; 0x03
    3a44:	fc 81       	ldd	r31, Y+4	; 0x04
    3a46:	84 85       	ldd	r24, Z+12	; 0x0c
    3a48:	95 85       	ldd	r25, Z+13	; 0x0d
    3a4a:	a6 85       	ldd	r26, Z+14	; 0x0e
    3a4c:	b7 85       	ldd	r27, Z+15	; 0x0f
    3a4e:	00 97       	sbiw	r24, 0x00	; 0
    3a50:	a1 05       	cpc	r26, r1
    3a52:	b1 05       	cpc	r27, r1
    3a54:	49 f0       	breq	.+18     	; 0x3a68 <_nrk_scheduler+0x44c>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    3a56:	a8 01       	movw	r20, r16
    3a58:	60 e0       	ldi	r22, 0x00	; 0
    3a5a:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    3a5c:	84 17       	cp	r24, r20
    3a5e:	95 07       	cpc	r25, r21
    3a60:	a6 07       	cpc	r26, r22
    3a62:	b7 07       	cpc	r27, r23
    3a64:	08 f4       	brcc	.+2      	; 0x3a68 <_nrk_scheduler+0x44c>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    3a66:	8c 01       	movw	r16, r24
    3a68:	2b 81       	ldd	r18, Y+3	; 0x03
    3a6a:	3c 81       	ldd	r19, Y+4	; 0x04
    3a6c:	25 5d       	subi	r18, 0xD5	; 213
    3a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a70:	3c 83       	std	Y+4, r19	; 0x04
    3a72:	2b 83       	std	Y+3, r18	; 0x03

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    3a74:	39 81       	ldd	r19, Y+1	; 0x01
    3a76:	31 30       	cpi	r19, 0x01	; 1
    3a78:	19 f0       	breq	.+6      	; 0x3a80 <_nrk_scheduler+0x464>
    3a7a:	91 e0       	ldi	r25, 0x01	; 1
    3a7c:	99 83       	std	Y+1, r25	; 0x01
    3a7e:	ed ce       	rjmp	.-550    	; 0x385a <_nrk_scheduler+0x23e>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    3a80:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <nrk_get_high_ready_task_ID>
    3a84:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    3a86:	4b e2       	ldi	r20, 0x2B	; 43
    3a88:	84 02       	muls	r24, r20
    3a8a:	f0 01       	movw	r30, r0
    3a8c:	11 24       	eor	r1, r1
    3a8e:	e3 51       	subi	r30, 0x13	; 19
    3a90:	fb 4f       	sbci	r31, 0xFB	; 251
    3a92:	22 85       	ldd	r18, Z+10	; 0x0a
    3a94:	20 93 5b 05 	sts	0x055B, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    3a98:	f0 93 4b 05 	sts	0x054B, r31
    3a9c:	e0 93 4a 05 	sts	0x054A, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    3aa0:	88 23       	and	r24, r24
    3aa2:	f9 f0       	breq	.+62     	; 0x3ae2 <_nrk_scheduler+0x4c6>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    3aa4:	85 a1       	ldd	r24, Z+37	; 0x25
    3aa6:	96 a1       	ldd	r25, Z+38	; 0x26
    3aa8:	a7 a1       	ldd	r26, Z+39	; 0x27
    3aaa:	b0 a5       	ldd	r27, Z+40	; 0x28
    3aac:	89 2b       	or	r24, r25
    3aae:	8a 2b       	or	r24, r26
    3ab0:	8b 2b       	or	r24, r27
    3ab2:	99 f0       	breq	.+38     	; 0x3ada <_nrk_scheduler+0x4be>
    3ab4:	85 8d       	ldd	r24, Z+29	; 0x1d
    3ab6:	96 8d       	ldd	r25, Z+30	; 0x1e
    3ab8:	a7 8d       	ldd	r26, Z+31	; 0x1f
    3aba:	b0 a1       	ldd	r27, Z+32	; 0x20
    3abc:	8a 3f       	cpi	r24, 0xFA	; 250
    3abe:	91 05       	cpc	r25, r1
    3ac0:	a1 05       	cpc	r26, r1
    3ac2:	b1 05       	cpc	r27, r1
    3ac4:	50 f4       	brcc	.+20     	; 0x3ada <_nrk_scheduler+0x4be>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    3ac6:	a8 01       	movw	r20, r16
    3ac8:	60 e0       	ldi	r22, 0x00	; 0
    3aca:	70 e0       	ldi	r23, 0x00	; 0
    3acc:	84 17       	cp	r24, r20
    3ace:	95 07       	cpc	r25, r21
    3ad0:	a6 07       	cpc	r26, r22
    3ad2:	b7 07       	cpc	r27, r23
    3ad4:	e8 f4       	brcc	.+58     	; 0x3b10 <_nrk_scheduler+0x4f4>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    3ad6:	8c 01       	movw	r16, r24
    3ad8:	1b c0       	rjmp	.+54     	; 0x3b10 <_nrk_scheduler+0x4f4>
    3ada:	0b 3f       	cpi	r16, 0xFB	; 251
    3adc:	11 05       	cpc	r17, r1
    3ade:	c0 f0       	brcs	.+48     	; 0x3b10 <_nrk_scheduler+0x4f4>
    3ae0:	12 c0       	rjmp	.+36     	; 0x3b06 <_nrk_scheduler+0x4ea>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    3ae2:	04 30       	cpi	r16, 0x04	; 4
    3ae4:	11 05       	cpc	r17, r1
    3ae6:	a0 f0       	brcs	.+40     	; 0x3b10 <_nrk_scheduler+0x4f4>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    3ae8:	c8 01       	movw	r24, r16
    3aea:	03 97       	sbiw	r24, 0x03	; 3
    3aec:	8a 3f       	cpi	r24, 0xFA	; 250
    3aee:	91 05       	cpc	r25, r1
    3af0:	38 f4       	brcc	.+14     	; 0x3b00 <_nrk_scheduler+0x4e4>
    3af2:	8c 01       	movw	r16, r24
    3af4:	82 30       	cpi	r24, 0x02	; 2
    3af6:	91 05       	cpc	r25, r1
    3af8:	58 f4       	brcc	.+22     	; 0x3b10 <_nrk_scheduler+0x4f4>
    3afa:	02 e0       	ldi	r16, 0x02	; 2
    3afc:	10 e0       	ldi	r17, 0x00	; 0
    3afe:	08 c0       	rjmp	.+16     	; 0x3b10 <_nrk_scheduler+0x4f4>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    3b00:	0d 3f       	cpi	r16, 0xFD	; 253
    3b02:	11 05       	cpc	r17, r1
    3b04:	19 f0       	breq	.+6      	; 0x3b0c <_nrk_scheduler+0x4f0>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    3b06:	0a ef       	ldi	r16, 0xFA	; 250
    3b08:	10 e0       	ldi	r17, 0x00	; 0
    3b0a:	02 c0       	rjmp	.+4      	; 0x3b10 <_nrk_scheduler+0x4f4>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    3b0c:	07 ef       	ldi	r16, 0xF7	; 247
    3b0e:	10 e0       	ldi	r17, 0x00	; 0
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    3b10:	20 93 4c 05 	sts	0x054C, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    3b14:	f0 93 5a 05 	sts	0x055A, r31
    3b18:	e0 93 59 05 	sts	0x0559, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    3b1c:	00 93 2d 04 	sts	0x042D, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    3b20:	0e 94 02 20 	call	0x4004	; 0x4004 <_nrk_os_timer_get>
    3b24:	28 2f       	mov	r18, r24
    3b26:	30 e0       	ldi	r19, 0x00	; 0
    3b28:	2f 5f       	subi	r18, 0xFF	; 255
    3b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b2c:	20 17       	cp	r18, r16
    3b2e:	31 07       	cpc	r19, r17
    3b30:	40 f0       	brcs	.+16     	; 0x3b42 <_nrk_scheduler+0x526>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    3b32:	0e 94 02 20 	call	0x4004	; 0x4004 <_nrk_os_timer_get>
    3b36:	08 2f       	mov	r16, r24
    3b38:	10 e0       	ldi	r17, 0x00	; 0
    3b3a:	0e 5f       	subi	r16, 0xFE	; 254
    3b3c:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    3b3e:	00 93 2d 04 	sts	0x042D, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    3b42:	f1 10       	cpse	r15, r1
    3b44:	10 92 4d 05 	sts	0x054D, r1

    _nrk_set_next_wakeup(next_wake);
    3b48:	80 2f       	mov	r24, r16
    3b4a:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    3b4e:	6c ed       	ldi	r22, 0xDC	; 220
    3b50:	75 e0       	ldi	r23, 0x05	; 5
    3b52:	c1 01       	movw	r24, r2
    3b54:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    3b58:	0e 94 25 23 	call	0x464a	; 0x464a <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    3b5c:	0f 90       	pop	r0
    3b5e:	0f 90       	pop	r0
    3b60:	0f 90       	pop	r0
    3b62:	0f 90       	pop	r0
    3b64:	df 91       	pop	r29
    3b66:	cf 91       	pop	r28
    3b68:	1f 91       	pop	r17
    3b6a:	0f 91       	pop	r16
    3b6c:	ff 90       	pop	r15
    3b6e:	ef 90       	pop	r14
    3b70:	df 90       	pop	r13
    3b72:	cf 90       	pop	r12
    3b74:	bf 90       	pop	r11
    3b76:	af 90       	pop	r10
    3b78:	9f 90       	pop	r9
    3b7a:	8f 90       	pop	r8
    3b7c:	7f 90       	pop	r7
    3b7e:	6f 90       	pop	r6
    3b80:	5f 90       	pop	r5
    3b82:	4f 90       	pop	r4
    3b84:	3f 90       	pop	r3
    3b86:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    3b88:	0c 94 30 23 	jmp	0x4660	; 0x4660 <nrk_start_high_ready_task>

00003b8c <nrk_register_driver>:
 *
 *
 */

int8_t nrk_register_driver(void *devicemanager,uint8_t dev_index)
{
    3b8c:	9c 01       	movw	r18, r24
    if(_nrk_driver_count<NRK_MAX_DRIVER_CNT)
    3b8e:	90 91 6c 05 	lds	r25, 0x056C
    3b92:	19 16       	cp	r1, r25
    3b94:	74 f0       	brlt	.+28     	; 0x3bb2 <nrk_register_driver+0x26>
    {
        nrk_drivers[_nrk_driver_count].dev_id=dev_index;
    3b96:	84 e0       	ldi	r24, 0x04	; 4
    3b98:	98 02       	muls	r25, r24
    3b9a:	f0 01       	movw	r30, r0
    3b9c:	11 24       	eor	r1, r1
    3b9e:	e3 59       	subi	r30, 0x93	; 147
    3ba0:	fa 4f       	sbci	r31, 0xFA	; 250
    3ba2:	60 83       	st	Z, r22
        nrk_drivers[_nrk_driver_count].devicemanager=(void*)devicemanager;
    3ba4:	33 83       	std	Z+3, r19	; 0x03
    3ba6:	22 83       	std	Z+2, r18	; 0x02
        _nrk_driver_count++;
    3ba8:	9f 5f       	subi	r25, 0xFF	; 255
    3baa:	90 93 6c 05 	sts	0x056C, r25
        return NRK_OK;
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	08 95       	ret
    }
    else
        return NRK_ERROR;
    3bb2:	8f ef       	ldi	r24, 0xFF	; 255
}
    3bb4:	08 95       	ret

00003bb6 <nrk_open>:


int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    3bb6:	0f 93       	push	r16
    3bb8:	1f 93       	push	r17
    3bba:	cf 93       	push	r28
    3bbc:	df 93       	push	r29
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    3bbe:	40 91 6c 05 	lds	r20, 0x056C
    3bc2:	55 27       	eor	r21, r21
    3bc4:	47 fd       	sbrc	r20, 7
    3bc6:	50 95       	com	r21
    3bc8:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    3bca:	90 e0       	ldi	r25, 0x00	; 0

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    3bcc:	2c 2f       	mov	r18, r28
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	24 17       	cp	r18, r20
    3bd2:	35 07       	cpc	r19, r21
    3bd4:	8c f5       	brge	.+98     	; 0x3c38 <nrk_open+0x82>
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    3bd6:	89 01       	movw	r16, r18
    3bd8:	00 0f       	add	r16, r16
    3bda:	11 1f       	adc	r17, r17
    3bdc:	00 0f       	add	r16, r16
    3bde:	11 1f       	adc	r17, r17
    3be0:	d8 01       	movw	r26, r16
    3be2:	a3 59       	subi	r26, 0x93	; 147
    3be4:	ba 4f       	sbci	r27, 0xFA	; 250
    3be6:	ec 91       	ld	r30, X
    3be8:	ff 27       	eor	r31, r31
    3bea:	e7 fd       	sbrc	r30, 7
    3bec:	f0 95       	com	r31
    3bee:	e8 17       	cp	r30, r24
    3bf0:	f9 07       	cpc	r31, r25
    3bf2:	01 f5       	brne	.+64     	; 0x3c34 <nrk_open+0x7e>
    3bf4:	d6 2f       	mov	r29, r22
        {
            if(nrk_driver_init[cnt]==WAS_NOT_OPEN)
    3bf6:	f9 01       	movw	r30, r18
    3bf8:	ef 58       	subi	r30, 0x8F	; 143
    3bfa:	fa 4f       	sbci	r31, 0xFA	; 250
    3bfc:	80 81       	ld	r24, Z
    3bfe:	81 11       	cpse	r24, r1
    3c00:	0b c0       	rjmp	.+22     	; 0x3c18 <nrk_open+0x62>
            {
                // Only call init the first time driver is opened
                nrk_driver_init[cnt]=WAS_OPEN;
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	80 83       	st	Z, r24
                nrk_drivers[cnt].devicemanager(INIT,opt,NULL,0);
    3c06:	12 96       	adiw	r26, 0x02	; 2
    3c08:	ed 91       	ld	r30, X+
    3c0a:	fc 91       	ld	r31, X
    3c0c:	13 97       	sbiw	r26, 0x03	; 3
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
    3c10:	40 e0       	ldi	r20, 0x00	; 0
    3c12:	50 e0       	ldi	r21, 0x00	; 0
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	09 95       	icall
            }
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
    3c18:	f8 01       	movw	r30, r16
    3c1a:	e3 59       	subi	r30, 0x93	; 147
    3c1c:	fa 4f       	sbci	r31, 0xFA	; 250
    3c1e:	02 80       	ldd	r0, Z+2	; 0x02
    3c20:	f3 81       	ldd	r31, Z+3	; 0x03
    3c22:	e0 2d       	mov	r30, r0
    3c24:	20 e0       	ldi	r18, 0x00	; 0
    3c26:	40 e0       	ldi	r20, 0x00	; 0
    3c28:	50 e0       	ldi	r21, 0x00	; 0
    3c2a:	6d 2f       	mov	r22, r29
    3c2c:	81 e0       	ldi	r24, 0x01	; 1
    3c2e:	09 95       	icall
            return cnt;
    3c30:	8c 2f       	mov	r24, r28
    3c32:	03 c0       	rjmp	.+6      	; 0x3c3a <nrk_open+0x84>

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    3c34:	cf 5f       	subi	r28, 0xFF	; 255
    3c36:	ca cf       	rjmp	.-108    	; 0x3bcc <nrk_open+0x16>
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
            return cnt;
        }
    }

    return NRK_ERROR;
    3c38:	8f ef       	ldi	r24, 0xFF	; 255
}
    3c3a:	df 91       	pop	r29
    3c3c:	cf 91       	pop	r28
    3c3e:	1f 91       	pop	r17
    3c40:	0f 91       	pop	r16
    3c42:	08 95       	ret

00003c44 <nrk_close>:

int8_t nrk_close(uint8_t dev_fd)
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	20 91 6c 05 	lds	r18, 0x056C
    3c4a:	33 27       	eor	r19, r19
    3c4c:	27 fd       	sbrc	r18, 7
    3c4e:	30 95       	com	r19
    3c50:	28 17       	cp	r18, r24
    3c52:	39 07       	cpc	r19, r25
    3c54:	84 f0       	brlt	.+32     	; 0x3c76 <nrk_close+0x32>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    error=nrk_drivers[dev_fd].devicemanager(CLOSE,0,NULL,0);
    3c56:	88 0f       	add	r24, r24
    3c58:	99 1f       	adc	r25, r25
    3c5a:	88 0f       	add	r24, r24
    3c5c:	99 1f       	adc	r25, r25
    3c5e:	fc 01       	movw	r30, r24
    3c60:	e3 59       	subi	r30, 0x93	; 147
    3c62:	fa 4f       	sbci	r31, 0xFA	; 250
    3c64:	02 80       	ldd	r0, Z+2	; 0x02
    3c66:	f3 81       	ldd	r31, Z+3	; 0x03
    3c68:	e0 2d       	mov	r30, r0
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	40 e0       	ldi	r20, 0x00	; 0
    3c6e:	50 e0       	ldi	r21, 0x00	; 0
    3c70:	60 e0       	ldi	r22, 0x00	; 0
    3c72:	82 e0       	ldi	r24, 0x02	; 2
    3c74:	09 94       	ijmp
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_nrk_errno_set>
// Do we need to do init on a second reopen?
//if(!error)
//	driver_record_init[dev_fd]=0;

    return error;
}
    3c7c:	8f ef       	ldi	r24, 0xFF	; 255
    3c7e:	08 95       	ret

00003c80 <nrk_write>:


int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    3c80:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	e0 91 6c 05 	lds	r30, 0x056C
    3c88:	ff 27       	eor	r31, r31
    3c8a:	e7 fd       	sbrc	r30, 7
    3c8c:	f0 95       	com	r31
    3c8e:	e8 17       	cp	r30, r24
    3c90:	f9 07       	cpc	r31, r25
    3c92:	74 f0       	brlt	.+28     	; 0x3cb0 <nrk_write+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);
    3c94:	88 0f       	add	r24, r24
    3c96:	99 1f       	adc	r25, r25
    3c98:	88 0f       	add	r24, r24
    3c9a:	99 1f       	adc	r25, r25
    3c9c:	fc 01       	movw	r30, r24
    3c9e:	e3 59       	subi	r30, 0x93	; 147
    3ca0:	fa 4f       	sbci	r31, 0xFA	; 250
    3ca2:	02 80       	ldd	r0, Z+2	; 0x02
    3ca4:	f3 81       	ldd	r31, Z+3	; 0x03
    3ca6:	e0 2d       	mov	r30, r0
    3ca8:	ab 01       	movw	r20, r22
    3caa:	60 e0       	ldi	r22, 0x00	; 0
    3cac:	86 e0       	ldi	r24, 0x06	; 6
    3cae:	09 94       	ijmp

int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);

}
    3cb6:	8f ef       	ldi	r24, 0xFF	; 255
    3cb8:	08 95       	ret

00003cba <nrk_read>:

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    3cba:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	e0 91 6c 05 	lds	r30, 0x056C
    3cc2:	ff 27       	eor	r31, r31
    3cc4:	e7 fd       	sbrc	r30, 7
    3cc6:	f0 95       	com	r31
    3cc8:	e8 17       	cp	r30, r24
    3cca:	f9 07       	cpc	r31, r25
    3ccc:	74 f0       	brlt	.+28     	; 0x3cea <nrk_read+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);
    3cce:	88 0f       	add	r24, r24
    3cd0:	99 1f       	adc	r25, r25
    3cd2:	88 0f       	add	r24, r24
    3cd4:	99 1f       	adc	r25, r25
    3cd6:	fc 01       	movw	r30, r24
    3cd8:	e3 59       	subi	r30, 0x93	; 147
    3cda:	fa 4f       	sbci	r31, 0xFA	; 250
    3cdc:	02 80       	ldd	r0, Z+2	; 0x02
    3cde:	f3 81       	ldd	r31, Z+3	; 0x03
    3ce0:	e0 2d       	mov	r30, r0
    3ce2:	ab 01       	movw	r20, r22
    3ce4:	60 e0       	ldi	r22, 0x00	; 0
    3ce6:	85 e0       	ldi	r24, 0x05	; 5
    3ce8:	09 94       	ijmp

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);

}
    3cf0:	8f ef       	ldi	r24, 0xFF	; 255
    3cf2:	08 95       	ret

00003cf4 <nrk_set_status>:
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    3cf4:	24 2f       	mov	r18, r20
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	e0 91 6c 05 	lds	r30, 0x056C
    3cfc:	ff 27       	eor	r31, r31
    3cfe:	e7 fd       	sbrc	r30, 7
    3d00:	f0 95       	com	r31
    3d02:	e8 17       	cp	r30, r24
    3d04:	f9 07       	cpc	r31, r25
    3d06:	74 f0       	brlt	.+28     	; 0x3d24 <nrk_set_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
    3d08:	88 0f       	add	r24, r24
    3d0a:	99 1f       	adc	r25, r25
    3d0c:	88 0f       	add	r24, r24
    3d0e:	99 1f       	adc	r25, r25
    3d10:	fc 01       	movw	r30, r24
    3d12:	e3 59       	subi	r30, 0x93	; 147
    3d14:	fa 4f       	sbci	r31, 0xFA	; 250
    3d16:	02 80       	ldd	r0, Z+2	; 0x02
    3d18:	f3 81       	ldd	r31, Z+3	; 0x03
    3d1a:	e0 2d       	mov	r30, r0
    3d1c:	40 e0       	ldi	r20, 0x00	; 0
    3d1e:	50 e0       	ldi	r21, 0x00	; 0
    3d20:	84 e0       	ldi	r24, 0x04	; 4
    3d22:	09 94       	ijmp
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_nrk_errno_set>
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
}
    3d2a:	8f ef       	ldi	r24, 0xFF	; 255
    3d2c:	08 95       	ret

00003d2e <nrk_get_status>:

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	20 91 6c 05 	lds	r18, 0x056C
    3d34:	33 27       	eor	r19, r19
    3d36:	27 fd       	sbrc	r18, 7
    3d38:	30 95       	com	r19
    3d3a:	28 17       	cp	r18, r24
    3d3c:	39 07       	cpc	r19, r25
    3d3e:	7c f0       	brlt	.+30     	; 0x3d5e <nrk_get_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
    3d40:	88 0f       	add	r24, r24
    3d42:	99 1f       	adc	r25, r25
    3d44:	88 0f       	add	r24, r24
    3d46:	99 1f       	adc	r25, r25
    3d48:	fc 01       	movw	r30, r24
    3d4a:	e3 59       	subi	r30, 0x93	; 147
    3d4c:	fa 4f       	sbci	r31, 0xFA	; 250
    3d4e:	02 80       	ldd	r0, Z+2	; 0x02
    3d50:	f3 81       	ldd	r31, Z+3	; 0x03
    3d52:	e0 2d       	mov	r30, r0
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	40 e0       	ldi	r20, 0x00	; 0
    3d58:	50 e0       	ldi	r21, 0x00	; 0
    3d5a:	83 e0       	ldi	r24, 0x03	; 3
    3d5c:	09 94       	ijmp

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    3d5e:	81 e0       	ldi	r24, 0x01	; 1
    3d60:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
}
    3d64:	8f ef       	ldi	r24, 0xFF	; 255
    3d66:	08 95       	ret

00003d68 <nrk_spin_wait_us>:
	...
    3d80:	01 97       	sbiw	r24, 0x01	; 1
    3d82:	91 f7       	brne	.-28     	; 0x3d68 <nrk_spin_wait_us>
    3d84:	08 95       	ret

00003d86 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    3d86:	10 92 21 01 	sts	0x0121, r1
    3d8a:	08 95       	ret

00003d8c <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    3d8c:	89 e0       	ldi	r24, 0x09	; 9
    3d8e:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    3d92:	8d e8       	ldi	r24, 0x8D	; 141
    3d94:	9c e3       	ldi	r25, 0x3C	; 60
    3d96:	90 93 29 01 	sts	0x0129, r25
    3d9a:	80 93 28 01 	sts	0x0128, r24
    3d9e:	08 95       	ret

00003da0 <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3da0:	10 92 25 01 	sts	0x0125, r1
    3da4:	10 92 24 01 	sts	0x0124, r1
    3da8:	08 95       	ret

00003daa <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    3daa:	cf 93       	push	r28
    3dac:	df 93       	push	r29
    3dae:	00 d0       	rcall	.+0      	; 0x3db0 <_nrk_precision_os_timer_get+0x6>
    3db0:	cd b7       	in	r28, 0x3d	; 61
    3db2:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    3db4:	80 91 24 01 	lds	r24, 0x0124
    3db8:	90 91 25 01 	lds	r25, 0x0125
    3dbc:	9a 83       	std	Y+2, r25	; 0x02
    3dbe:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    3dc0:	89 81       	ldd	r24, Y+1	; 0x01
    3dc2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3dc4:	0f 90       	pop	r0
    3dc6:	0f 90       	pop	r0
    3dc8:	df 91       	pop	r29
    3dca:	cf 91       	pop	r28
    3dcc:	08 95       	ret

00003dce <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    3dce:	10 92 81 00 	sts	0x0081, r1
    3dd2:	08 95       	ret

00003dd4 <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	80 93 81 00 	sts	0x0081, r24
    3dda:	08 95       	ret

00003ddc <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3ddc:	83 b5       	in	r24, 0x23	; 35
    3dde:	81 60       	ori	r24, 0x01	; 1
    3de0:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    3de2:	10 92 85 00 	sts	0x0085, r1
    3de6:	10 92 84 00 	sts	0x0084, r1
    3dea:	08 95       	ret

00003dec <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    3dec:	cf 93       	push	r28
    3dee:	df 93       	push	r29
    3df0:	00 d0       	rcall	.+0      	; 0x3df2 <_nrk_high_speed_timer_get+0x6>
    3df2:	cd b7       	in	r28, 0x3d	; 61
    3df4:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    3df6:	80 91 84 00 	lds	r24, 0x0084
    3dfa:	90 91 85 00 	lds	r25, 0x0085
    3dfe:	9a 83       	std	Y+2, r25	; 0x02
    3e00:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    3e02:	89 81       	ldd	r24, Y+1	; 0x01
    3e04:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3e06:	0f 90       	pop	r0
    3e08:	0f 90       	pop	r0
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	08 95       	ret

00003e10 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    3e10:	cf 92       	push	r12
    3e12:	df 92       	push	r13
    3e14:	ef 92       	push	r14
    3e16:	ff 92       	push	r15
    3e18:	cf 93       	push	r28
    3e1a:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    3e1c:	ec 01       	movw	r28, r24
    3e1e:	cc 0f       	add	r28, r28
    3e20:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    3e22:	c9 37       	cpi	r28, 0x79	; 121
    3e24:	8f ef       	ldi	r24, 0xFF	; 255
    3e26:	d8 07       	cpc	r29, r24
    3e28:	10 f0       	brcs	.+4      	; 0x3e2e <nrk_high_speed_timer_wait+0x1e>
    3e2a:	c0 e0       	ldi	r28, 0x00	; 0
    3e2c:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    3e2e:	6b 01       	movw	r12, r22
    3e30:	e1 2c       	mov	r14, r1
    3e32:	f1 2c       	mov	r15, r1
    3e34:	cc 0e       	add	r12, r28
    3e36:	dd 1e       	adc	r13, r29
    3e38:	e1 1c       	adc	r14, r1
    3e3a:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	c8 16       	cp	r12, r24
    3e40:	d1 04       	cpc	r13, r1
    3e42:	e8 06       	cpc	r14, r24
    3e44:	f1 04       	cpc	r15, r1
    3e46:	40 f0       	brcs	.+16     	; 0x3e58 <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    3e48:	81 e0       	ldi	r24, 0x01	; 1
    3e4a:	e8 1a       	sub	r14, r24
    3e4c:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    3e4e:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <_nrk_high_speed_timer_get>
    3e52:	c8 17       	cp	r28, r24
    3e54:	d9 07       	cpc	r29, r25
    3e56:	d8 f3       	brcs	.-10     	; 0x3e4e <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    3e58:	0e 94 f6 1e 	call	0x3dec	; 0x3dec <_nrk_high_speed_timer_get>
    3e5c:	8c 15       	cp	r24, r12
    3e5e:	9d 05       	cpc	r25, r13
    3e60:	d8 f3       	brcs	.-10     	; 0x3e58 <nrk_high_speed_timer_wait+0x48>
}
    3e62:	df 91       	pop	r29
    3e64:	cf 91       	pop	r28
    3e66:	ff 90       	pop	r15
    3e68:	ef 90       	pop	r14
    3e6a:	df 90       	pop	r13
    3e6c:	cf 90       	pop	r12
    3e6e:	08 95       	ret

00003e70 <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    3e70:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    3e74:	e0 e7       	ldi	r30, 0x70	; 112
    3e76:	f0 e0       	ldi	r31, 0x00	; 0
    3e78:	80 81       	ld	r24, Z
    3e7a:	8d 7f       	andi	r24, 0xFD	; 253
    3e7c:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    3e7e:	80 81       	ld	r24, Z
    3e80:	8e 7f       	andi	r24, 0xFE	; 254
    3e82:	80 83       	st	Z, r24
    3e84:	08 95       	ret

00003e86 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    3e86:	80 93 b2 00 	sts	0x00B2, r24
    3e8a:	08 95       	ret

00003e8c <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    3e8c:	e0 e7       	ldi	r30, 0x70	; 112
    3e8e:	f0 e0       	ldi	r31, 0x00	; 0
    3e90:	80 81       	ld	r24, Z
    3e92:	83 60       	ori	r24, 0x03	; 3
    3e94:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    3e96:	83 e0       	ldi	r24, 0x03	; 3
    3e98:	80 93 b1 00 	sts	0x00B1, r24
    3e9c:	08 95       	ret

00003e9e <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    3e9e:	83 b5       	in	r24, 0x23	; 35
    3ea0:	82 60       	ori	r24, 0x02	; 2
    3ea2:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    3ea4:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    3ea8:	10 92 82 03 	sts	0x0382, r1
    _nrk_prev_timer_val=0;
    3eac:	10 92 2d 04 	sts	0x042D, r1
    3eb0:	08 95       	ret

00003eb2 <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    3eb2:	cf 93       	push	r28
    3eb4:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    3eb6:	8e ef       	ldi	r24, 0xFE	; 254
    3eb8:	80 93 2d 04 	sts	0x042D, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    3ebc:	80 e2       	ldi	r24, 0x20	; 32
    3ebe:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    3ec2:	80 91 2d 04 	lds	r24, 0x042D
    3ec6:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    3eca:	83 e0       	ldi	r24, 0x03	; 3
    3ecc:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    3ece:	92 e0       	ldi	r25, 0x02	; 2
    3ed0:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    3ed4:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    3ed8:	93 b5       	in	r25, 0x23	; 35
    3eda:	92 60       	ori	r25, 0x02	; 2
    3edc:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    3ede:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    3ee0:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    3ee2:	83 b5       	in	r24, 0x23	; 35
    3ee4:	82 60       	ori	r24, 0x02	; 2
    3ee6:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    3ee8:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    3eec:	81 e0       	ldi	r24, 0x01	; 1
    3eee:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    3ef2:	10 92 85 00 	sts	0x0085, r1
    3ef6:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3efa:	83 b5       	in	r24, 0x23	; 35
    3efc:	82 60       	ori	r24, 0x02	; 2
    3efe:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3f00:	83 b5       	in	r24, 0x23	; 35
    3f02:	81 60       	ori	r24, 0x01	; 1
    3f04:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    3f06:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    3f0a:	c4 e2       	ldi	r28, 0x24	; 36
    3f0c:	d1 e0       	ldi	r29, 0x01	; 1
    3f0e:	19 82       	std	Y+1, r1	; 0x01
    3f10:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    3f12:	83 b5       	in	r24, 0x23	; 35
    3f14:	82 60       	ori	r24, 0x02	; 2
    3f16:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    3f18:	83 b5       	in	r24, 0x23	; 35
    3f1a:	81 60       	ori	r24, 0x01	; 1
    3f1c:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    3f1e:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    3f22:	19 82       	std	Y+1, r1	; 0x01
    3f24:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    3f26:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    3f2a:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    3f2e:	10 92 82 03 	sts	0x0382, r1
}
    3f32:	df 91       	pop	r29
    3f34:	cf 91       	pop	r28
    3f36:	08 95       	ret

00003f38 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    3f38:	80 91 b3 00 	lds	r24, 0x00B3
}
    3f3c:	8f 5f       	subi	r24, 0xFF	; 255
    3f3e:	08 95       	ret

00003f40 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    3f40:	81 50       	subi	r24, 0x01	; 1
    3f42:	80 93 b3 00 	sts	0x00B3, r24
    3f46:	08 95       	ret

00003f48 <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3f48:	81 11       	cpse	r24, r1
    3f4a:	02 c0       	rjmp	.+4      	; 0x3f50 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    3f4c:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    3f50:	8f ef       	ldi	r24, 0xFF	; 255
    3f52:	08 95       	ret

00003f54 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3f54:	81 11       	cpse	r24, r1
    3f56:	06 c0       	rjmp	.+12     	; 0x3f64 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    3f58:	10 92 95 00 	sts	0x0095, r1
    3f5c:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	08 95       	ret
	}
return NRK_ERROR;
    3f64:	8f ef       	ldi	r24, 0xFF	; 255
}
    3f66:	08 95       	ret

00003f68 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    3f68:	81 11       	cpse	r24, r1
    3f6a:	05 c0       	rjmp	.+10     	; 0x3f76 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    3f6c:	80 91 94 00 	lds	r24, 0x0094
    3f70:	90 91 95 00 	lds	r25, 0x0095
    3f74:	08 95       	ret
	}
return 0;
    3f76:	80 e0       	ldi	r24, 0x00	; 0
    3f78:	90 e0       	ldi	r25, 0x00	; 0

}
    3f7a:	08 95       	ret

00003f7c <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    3f7c:	81 11       	cpse	r24, r1
    3f7e:	05 c0       	rjmp	.+10     	; 0x3f8a <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    3f80:	82 e0       	ldi	r24, 0x02	; 2
    3f82:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    3f86:	81 e0       	ldi	r24, 0x01	; 1
    3f88:	08 95       	ret
	}
return NRK_ERROR;
    3f8a:	8f ef       	ldi	r24, 0xFF	; 255
}
    3f8c:	08 95       	ret

00003f8e <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    3f8e:	81 11       	cpse	r24, r1
    3f90:	35 c0       	rjmp	.+106    	; 0x3ffc <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    3f92:	cb 01       	movw	r24, r22
    3f94:	01 97       	sbiw	r24, 0x01	; 1
    3f96:	05 97       	sbiw	r24, 0x05	; 5
    3f98:	10 f4       	brcc	.+4      	; 0x3f9e <nrk_timer_int_configure+0x10>
    3f9a:	60 93 2c 04 	sts	0x042C, r22
	TCCR3A = 0;  
    3f9e:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    3fa2:	88 e0       	ldi	r24, 0x08	; 8
    3fa4:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    3fa8:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    3fac:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    3fb0:	30 93 80 03 	sts	0x0380, r19
    3fb4:	20 93 7f 03 	sts	0x037F, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    3fb8:	80 91 2c 04 	lds	r24, 0x042C
    3fbc:	81 30       	cpi	r24, 0x01	; 1
    3fbe:	21 f4       	brne	.+8      	; 0x3fc8 <nrk_timer_int_configure+0x3a>
    3fc0:	80 91 91 00 	lds	r24, 0x0091
    3fc4:	81 60       	ori	r24, 0x01	; 1
    3fc6:	11 c0       	rjmp	.+34     	; 0x3fea <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    3fc8:	82 30       	cpi	r24, 0x02	; 2
    3fca:	21 f4       	brne	.+8      	; 0x3fd4 <nrk_timer_int_configure+0x46>
    3fcc:	80 91 91 00 	lds	r24, 0x0091
    3fd0:	82 60       	ori	r24, 0x02	; 2
    3fd2:	0b c0       	rjmp	.+22     	; 0x3fea <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    3fd4:	83 30       	cpi	r24, 0x03	; 3
    3fd6:	21 f4       	brne	.+8      	; 0x3fe0 <nrk_timer_int_configure+0x52>
    3fd8:	80 91 91 00 	lds	r24, 0x0091
    3fdc:	83 60       	ori	r24, 0x03	; 3
    3fde:	05 c0       	rjmp	.+10     	; 0x3fea <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    3fe0:	84 30       	cpi	r24, 0x04	; 4
    3fe2:	31 f4       	brne	.+12     	; 0x3ff0 <nrk_timer_int_configure+0x62>
    3fe4:	80 91 91 00 	lds	r24, 0x0091
    3fe8:	84 60       	ori	r24, 0x04	; 4
    3fea:	80 93 91 00 	sts	0x0091, r24
    3fee:	08 c0       	rjmp	.+16     	; 0x4000 <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    3ff0:	85 30       	cpi	r24, 0x05	; 5
    3ff2:	31 f4       	brne	.+12     	; 0x4000 <nrk_timer_int_configure+0x72>
    3ff4:	80 91 91 00 	lds	r24, 0x0091
    3ff8:	85 60       	ori	r24, 0x05	; 5
    3ffa:	f7 cf       	rjmp	.-18     	; 0x3fea <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    3ffc:	8f ef       	ldi	r24, 0xFF	; 255
    3ffe:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    4000:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    4002:	08 95       	ret

00004004 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    4004:	80 91 b2 00 	lds	r24, 0x00B2
}
    4008:	08 95       	ret

0000400a <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    400a:	1f 92       	push	r1
    400c:	0f 92       	push	r0
    400e:	0f b6       	in	r0, 0x3f	; 63
    4010:	0f 92       	push	r0
    4012:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4014:	60 e0       	ldi	r22, 0x00	; 0
    4016:	8a e0       	ldi	r24, 0x0A	; 10
    4018:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <nrk_kernel_error_add>
	while(1);
    401c:	ff cf       	rjmp	.-2      	; 0x401c <__vector_default+0x12>

0000401e <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    401e:	0f 92       	push	r0
    4020:	0f b6       	in	r0, 0x3f	; 63
    4022:	0f 92       	push	r0
    4024:	1f 92       	push	r1
    4026:	2f 92       	push	r2
    4028:	3f 92       	push	r3
    402a:	4f 92       	push	r4
    402c:	5f 92       	push	r5
    402e:	6f 92       	push	r6
    4030:	7f 92       	push	r7
    4032:	8f 92       	push	r8
    4034:	9f 92       	push	r9
    4036:	af 92       	push	r10
    4038:	bf 92       	push	r11
    403a:	cf 92       	push	r12
    403c:	df 92       	push	r13
    403e:	ef 92       	push	r14
    4040:	ff 92       	push	r15
    4042:	0f 93       	push	r16
    4044:	1f 93       	push	r17
    4046:	2f 93       	push	r18
    4048:	3f 93       	push	r19
    404a:	4f 93       	push	r20
    404c:	5f 93       	push	r21
    404e:	6f 93       	push	r22
    4050:	7f 93       	push	r23
    4052:	8f 93       	push	r24
    4054:	9f 93       	push	r25
    4056:	af 93       	push	r26
    4058:	bf 93       	push	r27
    405a:	cf 93       	push	r28
    405c:	df 93       	push	r29
    405e:	ef 93       	push	r30
    4060:	ff 93       	push	r31
    4062:	a0 91 59 05 	lds	r26, 0x0559
    4066:	b0 91 5a 05 	lds	r27, 0x055A
    406a:	0d b6       	in	r0, 0x3d	; 61
    406c:	0d 92       	st	X+, r0
    406e:	0e b6       	in	r0, 0x3e	; 62
    4070:	0d 92       	st	X+, r0
    4072:	1f 92       	push	r1
    4074:	a0 91 2a 04 	lds	r26, 0x042A
    4078:	b0 91 2b 04 	lds	r27, 0x042B
    407c:	1e 90       	ld	r1, -X
    407e:	be bf       	out	0x3e, r27	; 62
    4080:	ad bf       	out	0x3d, r26	; 61
    4082:	08 95       	ret

00004084 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    4084:	1f 92       	push	r1
    4086:	0f 92       	push	r0
    4088:	0f b6       	in	r0, 0x3f	; 63
    408a:	0f 92       	push	r0
    408c:	11 24       	eor	r1, r1
    408e:	0b b6       	in	r0, 0x3b	; 59
    4090:	0f 92       	push	r0
    4092:	2f 93       	push	r18
    4094:	3f 93       	push	r19
    4096:	4f 93       	push	r20
    4098:	5f 93       	push	r21
    409a:	6f 93       	push	r22
    409c:	7f 93       	push	r23
    409e:	8f 93       	push	r24
    40a0:	9f 93       	push	r25
    40a2:	af 93       	push	r26
    40a4:	bf 93       	push	r27
    40a6:	ef 93       	push	r30
    40a8:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    40aa:	e0 91 7f 03 	lds	r30, 0x037F
    40ae:	f0 91 80 03 	lds	r31, 0x0380
    40b2:	30 97       	sbiw	r30, 0x00	; 0
    40b4:	11 f0       	breq	.+4      	; 0x40ba <__vector_32+0x36>
    40b6:	09 95       	icall
    40b8:	04 c0       	rjmp	.+8      	; 0x40c2 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    40ba:	60 e0       	ldi	r22, 0x00	; 0
    40bc:	8a e0       	ldi	r24, 0x0A	; 10
    40be:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <nrk_kernel_error_add>
	return;  	
}
    40c2:	ff 91       	pop	r31
    40c4:	ef 91       	pop	r30
    40c6:	bf 91       	pop	r27
    40c8:	af 91       	pop	r26
    40ca:	9f 91       	pop	r25
    40cc:	8f 91       	pop	r24
    40ce:	7f 91       	pop	r23
    40d0:	6f 91       	pop	r22
    40d2:	5f 91       	pop	r21
    40d4:	4f 91       	pop	r20
    40d6:	3f 91       	pop	r19
    40d8:	2f 91       	pop	r18
    40da:	0f 90       	pop	r0
    40dc:	0b be       	out	0x3b, r0	; 59
    40de:	0f 90       	pop	r0
    40e0:	0f be       	out	0x3f, r0	; 63
    40e2:	0f 90       	pop	r0
    40e4:	1f 90       	pop	r1
    40e6:	18 95       	reti

000040e8 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    40e8:	1f 92       	push	r1
    40ea:	0f 92       	push	r0
    40ec:	0f b6       	in	r0, 0x3f	; 63
    40ee:	0f 92       	push	r0
    40f0:	11 24       	eor	r1, r1

	return;  	
} 
    40f2:	0f 90       	pop	r0
    40f4:	0f be       	out	0x3f, r0	; 63
    40f6:	0f 90       	pop	r0
    40f8:	1f 90       	pop	r1
    40fa:	18 95       	reti

000040fc <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    40fc:	04 b6       	in	r0, 0x34	; 52
    40fe:	03 fe       	sbrs	r0, 3
    4100:	02 c0       	rjmp	.+4      	; 0x4106 <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    4102:	80 e1       	ldi	r24, 0x10	; 16
    4104:	01 c0       	rjmp	.+2      	; 0x4108 <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    4106:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    4108:	04 b6       	in	r0, 0x34	; 52
    410a:	02 fe       	sbrs	r0, 2
    410c:	06 c0       	rjmp	.+12     	; 0x411a <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    410e:	94 b7       	in	r25, 0x34	; 52
    4110:	9b 7f       	andi	r25, 0xFB	; 251
    4112:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    4114:	04 b6       	in	r0, 0x34	; 52
    4116:	00 fe       	sbrs	r0, 0
		error|=0x04;
    4118:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    411a:	04 b6       	in	r0, 0x34	; 52
    411c:	01 fe       	sbrs	r0, 1
    411e:	05 c0       	rjmp	.+10     	; 0x412a <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    4120:	94 b7       	in	r25, 0x34	; 52
    4122:	9d 7f       	andi	r25, 0xFD	; 253
    4124:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    4126:	82 60       	ori	r24, 0x02	; 2
    4128:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    412a:	81 11       	cpse	r24, r1
    412c:	0c c0       	rjmp	.+24     	; 0x4146 <_nrk_startup_error+0x4a>


// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    412e:	04 b6       	in	r0, 0x34	; 52
    4130:	00 fe       	sbrs	r0, 0
    4132:	04 c0       	rjmp	.+8      	; 0x413c <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    4134:	94 b7       	in	r25, 0x34	; 52
    4136:	9e 7f       	andi	r25, 0xFE	; 254
    4138:	94 bf       	out	0x34, r25	; 52
    413a:	01 c0       	rjmp	.+2      	; 0x413e <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    413c:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    413e:	90 91 b0 00 	lds	r25, 0x00B0
    4142:	91 11       	cpse	r25, r1
    4144:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    4146:	08 95       	ret

00004148 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    4148:	81 11       	cpse	r24, r1
    414a:	02 c0       	rjmp	.+4      	; 0x4150 <nrk_ext_int_enable+0x8>
    414c:	e8 9a       	sbi	0x1d, 0	; 29
    414e:	39 c0       	rjmp	.+114    	; 0x41c2 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    4150:	81 30       	cpi	r24, 0x01	; 1
    4152:	11 f4       	brne	.+4      	; 0x4158 <nrk_ext_int_enable+0x10>
    4154:	e9 9a       	sbi	0x1d, 1	; 29
    4156:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    4158:	82 30       	cpi	r24, 0x02	; 2
    415a:	11 f4       	brne	.+4      	; 0x4160 <nrk_ext_int_enable+0x18>
    415c:	ea 9a       	sbi	0x1d, 2	; 29
    415e:	31 c0       	rjmp	.+98     	; 0x41c2 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    4160:	83 30       	cpi	r24, 0x03	; 3
    4162:	21 f4       	brne	.+8      	; 0x416c <nrk_ext_int_enable+0x24>
    4164:	80 91 6b 00 	lds	r24, 0x006B
    4168:	81 60       	ori	r24, 0x01	; 1
    416a:	29 c0       	rjmp	.+82     	; 0x41be <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    416c:	84 30       	cpi	r24, 0x04	; 4
    416e:	21 f4       	brne	.+8      	; 0x4178 <nrk_ext_int_enable+0x30>
    4170:	80 91 6b 00 	lds	r24, 0x006B
    4174:	82 60       	ori	r24, 0x02	; 2
    4176:	23 c0       	rjmp	.+70     	; 0x41be <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    4178:	85 30       	cpi	r24, 0x05	; 5
    417a:	21 f4       	brne	.+8      	; 0x4184 <nrk_ext_int_enable+0x3c>
    417c:	80 91 6b 00 	lds	r24, 0x006B
    4180:	84 60       	ori	r24, 0x04	; 4
    4182:	1d c0       	rjmp	.+58     	; 0x41be <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    4184:	86 30       	cpi	r24, 0x06	; 6
    4186:	21 f4       	brne	.+8      	; 0x4190 <nrk_ext_int_enable+0x48>
    4188:	80 91 6b 00 	lds	r24, 0x006B
    418c:	88 60       	ori	r24, 0x08	; 8
    418e:	17 c0       	rjmp	.+46     	; 0x41be <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    4190:	87 30       	cpi	r24, 0x07	; 7
    4192:	21 f4       	brne	.+8      	; 0x419c <nrk_ext_int_enable+0x54>
    4194:	80 91 6b 00 	lds	r24, 0x006B
    4198:	80 61       	ori	r24, 0x10	; 16
    419a:	11 c0       	rjmp	.+34     	; 0x41be <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    419c:	88 30       	cpi	r24, 0x08	; 8
    419e:	21 f4       	brne	.+8      	; 0x41a8 <nrk_ext_int_enable+0x60>
    41a0:	80 91 6b 00 	lds	r24, 0x006B
    41a4:	80 62       	ori	r24, 0x20	; 32
    41a6:	0b c0       	rjmp	.+22     	; 0x41be <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    41a8:	89 30       	cpi	r24, 0x09	; 9
    41aa:	21 f4       	brne	.+8      	; 0x41b4 <nrk_ext_int_enable+0x6c>
    41ac:	80 91 6b 00 	lds	r24, 0x006B
    41b0:	80 64       	ori	r24, 0x40	; 64
    41b2:	05 c0       	rjmp	.+10     	; 0x41be <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    41b4:	8a 30       	cpi	r24, 0x0A	; 10
    41b6:	39 f4       	brne	.+14     	; 0x41c6 <nrk_ext_int_enable+0x7e>
    41b8:	80 91 6b 00 	lds	r24, 0x006B
    41bc:	80 68       	ori	r24, 0x80	; 128
    41be:	80 93 6b 00 	sts	0x006B, r24
    41c2:	81 e0       	ldi	r24, 0x01	; 1
    41c4:	08 95       	ret
return NRK_ERROR;
    41c6:	8f ef       	ldi	r24, 0xFF	; 255
}
    41c8:	08 95       	ret

000041ca <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    41ca:	81 11       	cpse	r24, r1
    41cc:	02 c0       	rjmp	.+4      	; 0x41d2 <nrk_ext_int_disable+0x8>
    41ce:	e8 98       	cbi	0x1d, 0	; 29
    41d0:	39 c0       	rjmp	.+114    	; 0x4244 <__stack+0x45>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    41d2:	81 30       	cpi	r24, 0x01	; 1
    41d4:	11 f4       	brne	.+4      	; 0x41da <nrk_ext_int_disable+0x10>
    41d6:	e9 98       	cbi	0x1d, 1	; 29
    41d8:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    41da:	82 30       	cpi	r24, 0x02	; 2
    41dc:	11 f4       	brne	.+4      	; 0x41e2 <nrk_ext_int_disable+0x18>
    41de:	e9 98       	cbi	0x1d, 1	; 29
    41e0:	31 c0       	rjmp	.+98     	; 0x4244 <__stack+0x45>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    41e2:	83 30       	cpi	r24, 0x03	; 3
    41e4:	21 f4       	brne	.+8      	; 0x41ee <nrk_ext_int_disable+0x24>
    41e6:	80 91 6b 00 	lds	r24, 0x006B
    41ea:	8e 7f       	andi	r24, 0xFE	; 254
    41ec:	29 c0       	rjmp	.+82     	; 0x4240 <__stack+0x41>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    41ee:	84 30       	cpi	r24, 0x04	; 4
    41f0:	21 f4       	brne	.+8      	; 0x41fa <nrk_ext_int_disable+0x30>
    41f2:	80 91 6b 00 	lds	r24, 0x006B
    41f6:	8d 7f       	andi	r24, 0xFD	; 253
    41f8:	23 c0       	rjmp	.+70     	; 0x4240 <__stack+0x41>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    41fa:	85 30       	cpi	r24, 0x05	; 5
    41fc:	21 f4       	brne	.+8      	; 0x4206 <__stack+0x7>
    41fe:	80 91 6b 00 	lds	r24, 0x006B
    4202:	8b 7f       	andi	r24, 0xFB	; 251
    4204:	1d c0       	rjmp	.+58     	; 0x4240 <__stack+0x41>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    4206:	86 30       	cpi	r24, 0x06	; 6
    4208:	21 f4       	brne	.+8      	; 0x4212 <__stack+0x13>
    420a:	80 91 6b 00 	lds	r24, 0x006B
    420e:	87 7f       	andi	r24, 0xF7	; 247
    4210:	17 c0       	rjmp	.+46     	; 0x4240 <__stack+0x41>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    4212:	87 30       	cpi	r24, 0x07	; 7
    4214:	21 f4       	brne	.+8      	; 0x421e <__stack+0x1f>
    4216:	80 91 6b 00 	lds	r24, 0x006B
    421a:	8f 7e       	andi	r24, 0xEF	; 239
    421c:	11 c0       	rjmp	.+34     	; 0x4240 <__stack+0x41>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    421e:	88 30       	cpi	r24, 0x08	; 8
    4220:	21 f4       	brne	.+8      	; 0x422a <__stack+0x2b>
    4222:	80 91 6b 00 	lds	r24, 0x006B
    4226:	8f 7d       	andi	r24, 0xDF	; 223
    4228:	0b c0       	rjmp	.+22     	; 0x4240 <__stack+0x41>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    422a:	89 30       	cpi	r24, 0x09	; 9
    422c:	21 f4       	brne	.+8      	; 0x4236 <__stack+0x37>
    422e:	80 91 6b 00 	lds	r24, 0x006B
    4232:	8f 7b       	andi	r24, 0xBF	; 191
    4234:	05 c0       	rjmp	.+10     	; 0x4240 <__stack+0x41>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    4236:	8a 30       	cpi	r24, 0x0A	; 10
    4238:	39 f4       	brne	.+14     	; 0x4248 <__stack+0x49>
    423a:	80 91 6b 00 	lds	r24, 0x006B
    423e:	8f 77       	andi	r24, 0x7F	; 127
    4240:	80 93 6b 00 	sts	0x006B, r24
    4244:	81 e0       	ldi	r24, 0x01	; 1
    4246:	08 95       	ret
return NRK_ERROR;
    4248:	8f ef       	ldi	r24, 0xFF	; 255
}
    424a:	08 95       	ret

0000424c <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    424c:	81 11       	cpse	r24, r1
    424e:	26 c0       	rjmp	.+76     	; 0x429c <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    4250:	50 93 75 05 	sts	0x0575, r21
    4254:	40 93 74 05 	sts	0x0574, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    4258:	61 11       	cpse	r22, r1
    425a:	04 c0       	rjmp	.+8      	; 0x4264 <nrk_ext_int_configure+0x18>
    425c:	80 91 69 00 	lds	r24, 0x0069
    4260:	8c 7f       	andi	r24, 0xFC	; 252
    4262:	3d c0       	rjmp	.+122    	; 0x42de <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4264:	61 30       	cpi	r22, 0x01	; 1
    4266:	49 f4       	brne	.+18     	; 0x427a <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    4268:	80 91 69 00 	lds	r24, 0x0069
    426c:	8d 7f       	andi	r24, 0xFD	; 253
    426e:	80 93 69 00 	sts	0x0069, r24
    4272:	80 91 69 00 	lds	r24, 0x0069
    4276:	81 60       	ori	r24, 0x01	; 1
    4278:	32 c0       	rjmp	.+100    	; 0x42de <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    427a:	62 30       	cpi	r22, 0x02	; 2
    427c:	49 f4       	brne	.+18     	; 0x4290 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    427e:	80 91 69 00 	lds	r24, 0x0069
    4282:	82 60       	ori	r24, 0x02	; 2
    4284:	80 93 69 00 	sts	0x0069, r24
    4288:	80 91 69 00 	lds	r24, 0x0069
    428c:	8e 7f       	andi	r24, 0xFE	; 254
    428e:	27 c0       	rjmp	.+78     	; 0x42de <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    4290:	63 30       	cpi	r22, 0x03	; 3
    4292:	39 f5       	brne	.+78     	; 0x42e2 <nrk_ext_int_configure+0x96>
    4294:	80 91 69 00 	lds	r24, 0x0069
    4298:	83 60       	ori	r24, 0x03	; 3
    429a:	21 c0       	rjmp	.+66     	; 0x42de <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    429c:	81 30       	cpi	r24, 0x01	; 1
    429e:	49 f5       	brne	.+82     	; 0x42f2 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    42a0:	50 93 73 05 	sts	0x0573, r21
    42a4:	40 93 72 05 	sts	0x0572, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    42a8:	61 11       	cpse	r22, r1
    42aa:	04 c0       	rjmp	.+8      	; 0x42b4 <nrk_ext_int_configure+0x68>
    42ac:	80 91 69 00 	lds	r24, 0x0069
    42b0:	83 7f       	andi	r24, 0xF3	; 243
    42b2:	15 c0       	rjmp	.+42     	; 0x42de <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    42b4:	61 30       	cpi	r22, 0x01	; 1
    42b6:	49 f4       	brne	.+18     	; 0x42ca <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    42b8:	80 91 69 00 	lds	r24, 0x0069
    42bc:	87 7f       	andi	r24, 0xF7	; 247
    42be:	80 93 69 00 	sts	0x0069, r24
    42c2:	80 91 69 00 	lds	r24, 0x0069
    42c6:	84 60       	ori	r24, 0x04	; 4
    42c8:	0a c0       	rjmp	.+20     	; 0x42de <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    42ca:	62 30       	cpi	r22, 0x02	; 2
    42cc:	61 f4       	brne	.+24     	; 0x42e6 <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    42ce:	80 91 69 00 	lds	r24, 0x0069
    42d2:	88 60       	ori	r24, 0x08	; 8
    42d4:	80 93 69 00 	sts	0x0069, r24
    42d8:	80 91 69 00 	lds	r24, 0x0069
    42dc:	8b 7f       	andi	r24, 0xFB	; 251
    42de:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    42e2:	81 e0       	ldi	r24, 0x01	; 1
    42e4:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    42e6:	63 30       	cpi	r22, 0x03	; 3
    42e8:	e1 f7       	brne	.-8      	; 0x42e2 <nrk_ext_int_configure+0x96>
    42ea:	80 91 69 00 	lds	r24, 0x0069
    42ee:	8c 60       	ori	r24, 0x0C	; 12
    42f0:	f6 cf       	rjmp	.-20     	; 0x42de <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    42f2:	82 30       	cpi	r24, 0x02	; 2
    42f4:	31 f5       	brne	.+76     	; 0x4342 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    42f6:	50 93 77 05 	sts	0x0577, r21
    42fa:	40 93 76 05 	sts	0x0576, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    42fe:	61 11       	cpse	r22, r1
    4300:	04 c0       	rjmp	.+8      	; 0x430a <nrk_ext_int_configure+0xbe>
    4302:	80 91 69 00 	lds	r24, 0x0069
    4306:	8f 7c       	andi	r24, 0xCF	; 207
    4308:	ea cf       	rjmp	.-44     	; 0x42de <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    430a:	61 30       	cpi	r22, 0x01	; 1
    430c:	49 f4       	brne	.+18     	; 0x4320 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    430e:	80 91 69 00 	lds	r24, 0x0069
    4312:	8f 7d       	andi	r24, 0xDF	; 223
    4314:	80 93 69 00 	sts	0x0069, r24
    4318:	80 91 69 00 	lds	r24, 0x0069
    431c:	80 61       	ori	r24, 0x10	; 16
    431e:	df cf       	rjmp	.-66     	; 0x42de <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4320:	62 30       	cpi	r22, 0x02	; 2
    4322:	49 f4       	brne	.+18     	; 0x4336 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    4324:	80 91 69 00 	lds	r24, 0x0069
    4328:	80 62       	ori	r24, 0x20	; 32
    432a:	80 93 69 00 	sts	0x0069, r24
    432e:	80 91 69 00 	lds	r24, 0x0069
    4332:	8f 7e       	andi	r24, 0xEF	; 239
    4334:	d4 cf       	rjmp	.-88     	; 0x42de <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    4336:	63 30       	cpi	r22, 0x03	; 3
    4338:	a1 f6       	brne	.-88     	; 0x42e2 <nrk_ext_int_configure+0x96>
    433a:	80 91 69 00 	lds	r24, 0x0069
    433e:	80 63       	ori	r24, 0x30	; 48
    4340:	ce cf       	rjmp	.-100    	; 0x42de <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    4342:	83 50       	subi	r24, 0x03	; 3
    4344:	88 30       	cpi	r24, 0x08	; 8
    4346:	50 f4       	brcc	.+20     	; 0x435c <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    4348:	80 91 68 00 	lds	r24, 0x0068
    434c:	81 60       	ori	r24, 0x01	; 1
    434e:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    4352:	50 93 79 05 	sts	0x0579, r21
    4356:	40 93 78 05 	sts	0x0578, r20
    435a:	c3 cf       	rjmp	.-122    	; 0x42e2 <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    435c:	8f ef       	ldi	r24, 0xFF	; 255
}
    435e:	08 95       	ret

00004360 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    4360:	1f 92       	push	r1
    4362:	0f 92       	push	r0
    4364:	0f b6       	in	r0, 0x3f	; 63
    4366:	0f 92       	push	r0
    4368:	11 24       	eor	r1, r1
    436a:	0b b6       	in	r0, 0x3b	; 59
    436c:	0f 92       	push	r0
    436e:	2f 93       	push	r18
    4370:	3f 93       	push	r19
    4372:	4f 93       	push	r20
    4374:	5f 93       	push	r21
    4376:	6f 93       	push	r22
    4378:	7f 93       	push	r23
    437a:	8f 93       	push	r24
    437c:	9f 93       	push	r25
    437e:	af 93       	push	r26
    4380:	bf 93       	push	r27
    4382:	ef 93       	push	r30
    4384:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    4386:	e0 91 78 05 	lds	r30, 0x0578
    438a:	f0 91 79 05 	lds	r31, 0x0579
    438e:	30 97       	sbiw	r30, 0x00	; 0
    4390:	11 f0       	breq	.+4      	; 0x4396 <__vector_9+0x36>
    4392:	09 95       	icall
    4394:	04 c0       	rjmp	.+8      	; 0x439e <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4396:	60 e0       	ldi	r22, 0x00	; 0
    4398:	8a e0       	ldi	r24, 0x0A	; 10
    439a:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <nrk_kernel_error_add>
	return;  	
}
    439e:	ff 91       	pop	r31
    43a0:	ef 91       	pop	r30
    43a2:	bf 91       	pop	r27
    43a4:	af 91       	pop	r26
    43a6:	9f 91       	pop	r25
    43a8:	8f 91       	pop	r24
    43aa:	7f 91       	pop	r23
    43ac:	6f 91       	pop	r22
    43ae:	5f 91       	pop	r21
    43b0:	4f 91       	pop	r20
    43b2:	3f 91       	pop	r19
    43b4:	2f 91       	pop	r18
    43b6:	0f 90       	pop	r0
    43b8:	0b be       	out	0x3b, r0	; 59
    43ba:	0f 90       	pop	r0
    43bc:	0f be       	out	0x3f, r0	; 63
    43be:	0f 90       	pop	r0
    43c0:	1f 90       	pop	r1
    43c2:	18 95       	reti

000043c4 <__vector_1>:


SIGNAL(INT0_vect) {
    43c4:	1f 92       	push	r1
    43c6:	0f 92       	push	r0
    43c8:	0f b6       	in	r0, 0x3f	; 63
    43ca:	0f 92       	push	r0
    43cc:	11 24       	eor	r1, r1
    43ce:	0b b6       	in	r0, 0x3b	; 59
    43d0:	0f 92       	push	r0
    43d2:	2f 93       	push	r18
    43d4:	3f 93       	push	r19
    43d6:	4f 93       	push	r20
    43d8:	5f 93       	push	r21
    43da:	6f 93       	push	r22
    43dc:	7f 93       	push	r23
    43de:	8f 93       	push	r24
    43e0:	9f 93       	push	r25
    43e2:	af 93       	push	r26
    43e4:	bf 93       	push	r27
    43e6:	ef 93       	push	r30
    43e8:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    43ea:	e0 91 74 05 	lds	r30, 0x0574
    43ee:	f0 91 75 05 	lds	r31, 0x0575
    43f2:	30 97       	sbiw	r30, 0x00	; 0
    43f4:	11 f0       	breq	.+4      	; 0x43fa <__vector_1+0x36>
    43f6:	09 95       	icall
    43f8:	04 c0       	rjmp	.+8      	; 0x4402 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    43fa:	60 e0       	ldi	r22, 0x00	; 0
    43fc:	8a e0       	ldi	r24, 0x0A	; 10
    43fe:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <nrk_kernel_error_add>
	return;  	
}
    4402:	ff 91       	pop	r31
    4404:	ef 91       	pop	r30
    4406:	bf 91       	pop	r27
    4408:	af 91       	pop	r26
    440a:	9f 91       	pop	r25
    440c:	8f 91       	pop	r24
    440e:	7f 91       	pop	r23
    4410:	6f 91       	pop	r22
    4412:	5f 91       	pop	r21
    4414:	4f 91       	pop	r20
    4416:	3f 91       	pop	r19
    4418:	2f 91       	pop	r18
    441a:	0f 90       	pop	r0
    441c:	0b be       	out	0x3b, r0	; 59
    441e:	0f 90       	pop	r0
    4420:	0f be       	out	0x3f, r0	; 63
    4422:	0f 90       	pop	r0
    4424:	1f 90       	pop	r1
    4426:	18 95       	reti

00004428 <__vector_2>:

SIGNAL(INT1_vect) {
    4428:	1f 92       	push	r1
    442a:	0f 92       	push	r0
    442c:	0f b6       	in	r0, 0x3f	; 63
    442e:	0f 92       	push	r0
    4430:	11 24       	eor	r1, r1
    4432:	0b b6       	in	r0, 0x3b	; 59
    4434:	0f 92       	push	r0
    4436:	2f 93       	push	r18
    4438:	3f 93       	push	r19
    443a:	4f 93       	push	r20
    443c:	5f 93       	push	r21
    443e:	6f 93       	push	r22
    4440:	7f 93       	push	r23
    4442:	8f 93       	push	r24
    4444:	9f 93       	push	r25
    4446:	af 93       	push	r26
    4448:	bf 93       	push	r27
    444a:	ef 93       	push	r30
    444c:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    444e:	e0 91 72 05 	lds	r30, 0x0572
    4452:	f0 91 73 05 	lds	r31, 0x0573
    4456:	30 97       	sbiw	r30, 0x00	; 0
    4458:	11 f0       	breq	.+4      	; 0x445e <__vector_2+0x36>
    445a:	09 95       	icall
    445c:	04 c0       	rjmp	.+8      	; 0x4466 <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    445e:	60 e0       	ldi	r22, 0x00	; 0
    4460:	8a e0       	ldi	r24, 0x0A	; 10
    4462:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <nrk_kernel_error_add>
	return;  	
}
    4466:	ff 91       	pop	r31
    4468:	ef 91       	pop	r30
    446a:	bf 91       	pop	r27
    446c:	af 91       	pop	r26
    446e:	9f 91       	pop	r25
    4470:	8f 91       	pop	r24
    4472:	7f 91       	pop	r23
    4474:	6f 91       	pop	r22
    4476:	5f 91       	pop	r21
    4478:	4f 91       	pop	r20
    447a:	3f 91       	pop	r19
    447c:	2f 91       	pop	r18
    447e:	0f 90       	pop	r0
    4480:	0b be       	out	0x3b, r0	; 59
    4482:	0f 90       	pop	r0
    4484:	0f be       	out	0x3f, r0	; 63
    4486:	0f 90       	pop	r0
    4488:	1f 90       	pop	r1
    448a:	18 95       	reti

0000448c <__vector_3>:

SIGNAL(INT2_vect) {
    448c:	1f 92       	push	r1
    448e:	0f 92       	push	r0
    4490:	0f b6       	in	r0, 0x3f	; 63
    4492:	0f 92       	push	r0
    4494:	11 24       	eor	r1, r1
    4496:	0b b6       	in	r0, 0x3b	; 59
    4498:	0f 92       	push	r0
    449a:	2f 93       	push	r18
    449c:	3f 93       	push	r19
    449e:	4f 93       	push	r20
    44a0:	5f 93       	push	r21
    44a2:	6f 93       	push	r22
    44a4:	7f 93       	push	r23
    44a6:	8f 93       	push	r24
    44a8:	9f 93       	push	r25
    44aa:	af 93       	push	r26
    44ac:	bf 93       	push	r27
    44ae:	ef 93       	push	r30
    44b0:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    44b2:	e0 91 76 05 	lds	r30, 0x0576
    44b6:	f0 91 77 05 	lds	r31, 0x0577
    44ba:	30 97       	sbiw	r30, 0x00	; 0
    44bc:	11 f0       	breq	.+4      	; 0x44c2 <__vector_3+0x36>
    44be:	09 95       	icall
    44c0:	04 c0       	rjmp	.+8      	; 0x44ca <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    44c2:	60 e0       	ldi	r22, 0x00	; 0
    44c4:	8a e0       	ldi	r24, 0x0A	; 10
    44c6:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <nrk_kernel_error_add>
	return;  	
}
    44ca:	ff 91       	pop	r31
    44cc:	ef 91       	pop	r30
    44ce:	bf 91       	pop	r27
    44d0:	af 91       	pop	r26
    44d2:	9f 91       	pop	r25
    44d4:	8f 91       	pop	r24
    44d6:	7f 91       	pop	r23
    44d8:	6f 91       	pop	r22
    44da:	5f 91       	pop	r21
    44dc:	4f 91       	pop	r20
    44de:	3f 91       	pop	r19
    44e0:	2f 91       	pop	r18
    44e2:	0f 90       	pop	r0
    44e4:	0b be       	out	0x3b, r0	; 59
    44e6:	0f 90       	pop	r0
    44e8:	0f be       	out	0x3f, r0	; 63
    44ea:	0f 90       	pop	r0
    44ec:	1f 90       	pop	r1
    44ee:	18 95       	reti

000044f0 <nrk_watchdog_disable>:
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    44f0:	a8 95       	wdr
#include <util/atomic.h>

void nrk_watchdog_disable()
{
nrk_watchdog_reset();
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    44f2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    44f4:	f8 94       	cli
{
	MCUSR &= ~(1<<WDRF);
    44f6:	84 b7       	in	r24, 0x34	; 52
    44f8:	87 7f       	andi	r24, 0xF7	; 247
    44fa:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE) | (1<<WDE);
    44fc:	e0 e6       	ldi	r30, 0x60	; 96
    44fe:	f0 e0       	ldi	r31, 0x00	; 0
    4500:	80 81       	ld	r24, Z
    4502:	88 61       	ori	r24, 0x18	; 24
    4504:	80 83       	st	Z, r24
	WDTCSR = 0;
    4506:	10 82       	st	Z, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4508:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    450a:	08 95       	ret

0000450c <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    450c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    450e:	f8 94       	cli
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4510:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
{
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4512:	84 b7       	in	r24, 0x34	; 52
    4514:	87 7f       	andi	r24, 0xF7	; 247
    4516:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    4518:	e0 e6       	ldi	r30, 0x60	; 96
    451a:	f0 e0       	ldi	r31, 0x00	; 0
    451c:	80 81       	ld	r24, Z
    451e:	88 61       	ori	r24, 0x18	; 24
    4520:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    4522:	8d e0       	ldi	r24, 0x0D	; 13
    4524:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4526:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    4528:	08 95       	ret

0000452a <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    452a:	04 b6       	in	r0, 0x34	; 52
    452c:	03 fe       	sbrs	r0, 3
    452e:	02 c0       	rjmp	.+4      	; 0x4534 <nrk_watchdog_check+0xa>
return NRK_ERROR;
    4530:	8f ef       	ldi	r24, 0xFF	; 255
    4532:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4534:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    4536:	08 95       	ret

00004538 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    4538:	a8 95       	wdr
    453a:	08 95       	ret

0000453c <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    453c:	08 95       	ret

0000453e <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    453e:	83 b7       	in	r24, 0x33	; 51
    4540:	81 7f       	andi	r24, 0xF1	; 241
    4542:	86 60       	ori	r24, 0x06	; 6
    4544:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4546:	83 b7       	in	r24, 0x33	; 51
    4548:	81 60       	ori	r24, 0x01	; 1
    454a:	83 bf       	out	0x33, r24	; 51
    454c:	88 95       	sleep
    454e:	83 b7       	in	r24, 0x33	; 51
    4550:	8e 7f       	andi	r24, 0xFE	; 254
    4552:	83 bf       	out	0x33, r24	; 51
    4554:	08 95       	ret

00004556 <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    4556:	83 b7       	in	r24, 0x33	; 51
    4558:	81 7f       	andi	r24, 0xF1	; 241
    455a:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    455c:	83 b7       	in	r24, 0x33	; 51
    455e:	81 60       	ori	r24, 0x01	; 1
    4560:	83 bf       	out	0x33, r24	; 51
    4562:	88 95       	sleep
    4564:	83 b7       	in	r24, 0x33	; 51
    4566:	8e 7f       	andi	r24, 0xFE	; 254
    4568:	83 bf       	out	0x33, r24	; 51
    456a:	08 95       	ret

0000456c <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    456c:	fc 01       	movw	r30, r24
    456e:	76 83       	std	Z+6, r23	; 0x06
    4570:	65 83       	std	Z+5, r22	; 0x05
    4572:	08 95       	ret

00004574 <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    4574:	ef 92       	push	r14
    4576:	ff 92       	push	r15
    4578:	0f 93       	push	r16
    457a:	1f 93       	push	r17
    457c:	cf 93       	push	r28
    457e:	df 93       	push	r29
    4580:	8c 01       	movw	r16, r24
    4582:	7b 01       	movw	r14, r22
    4584:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    4586:	40 32       	cpi	r20, 0x20	; 32
    4588:	51 05       	cpc	r21, r1
    458a:	18 f4       	brcc	.+6      	; 0x4592 <nrk_task_set_stk+0x1e>
    458c:	81 e1       	ldi	r24, 0x11	; 17
    458e:	0e 94 ee 10 	call	0x21dc	; 0x21dc <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    4592:	21 97       	sbiw	r28, 0x01	; 1
    4594:	ce 0d       	add	r28, r14
    4596:	df 1d       	adc	r29, r15
    4598:	f8 01       	movw	r30, r16
    459a:	d2 83       	std	Z+2, r29	; 0x02
    459c:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    459e:	f4 82       	std	Z+4, r15	; 0x04
    45a0:	e3 82       	std	Z+3, r14	; 0x03

}
    45a2:	df 91       	pop	r29
    45a4:	cf 91       	pop	r28
    45a6:	1f 91       	pop	r17
    45a8:	0f 91       	pop	r16
    45aa:	ff 90       	pop	r15
    45ac:	ef 90       	pop	r14
    45ae:	08 95       	ret

000045b0 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    45b0:	25 e5       	ldi	r18, 0x55	; 85
    45b2:	fa 01       	movw	r30, r20
    45b4:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    45b6:	fb 01       	movw	r30, r22
    45b8:	32 97       	sbiw	r30, 0x02	; 2
    45ba:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    45bc:	31 96       	adiw	r30, 0x01	; 1
    45be:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    45c0:	33 97       	sbiw	r30, 0x03	; 3
    45c2:	11 82       	std	Z+1, r1	; 0x01
    45c4:	10 82       	st	Z, r1
    *(--stk) = 0;       
    45c6:	32 97       	sbiw	r30, 0x02	; 2
    45c8:	11 82       	std	Z+1, r1	; 0x01
    45ca:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    45cc:	32 97       	sbiw	r30, 0x02	; 2
    45ce:	11 82       	std	Z+1, r1	; 0x01
    45d0:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    45d2:	32 97       	sbiw	r30, 0x02	; 2
    45d4:	11 82       	std	Z+1, r1	; 0x01
    45d6:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    45d8:	32 97       	sbiw	r30, 0x02	; 2
    45da:	11 82       	std	Z+1, r1	; 0x01
    45dc:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    45de:	32 97       	sbiw	r30, 0x02	; 2
    45e0:	11 82       	std	Z+1, r1	; 0x01
    45e2:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    45e4:	32 97       	sbiw	r30, 0x02	; 2
    45e6:	11 82       	std	Z+1, r1	; 0x01
    45e8:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45ea:	32 97       	sbiw	r30, 0x02	; 2
    45ec:	11 82       	std	Z+1, r1	; 0x01
    45ee:	10 82       	st	Z, r1

    *(--stk) = 0; 
    45f0:	32 97       	sbiw	r30, 0x02	; 2
    45f2:	11 82       	std	Z+1, r1	; 0x01
    45f4:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45f6:	32 97       	sbiw	r30, 0x02	; 2
    45f8:	11 82       	std	Z+1, r1	; 0x01
    45fa:	10 82       	st	Z, r1
    *(--stk) = 0; 
    45fc:	32 97       	sbiw	r30, 0x02	; 2
    45fe:	11 82       	std	Z+1, r1	; 0x01
    4600:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4602:	32 97       	sbiw	r30, 0x02	; 2
    4604:	11 82       	std	Z+1, r1	; 0x01
    4606:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4608:	32 97       	sbiw	r30, 0x02	; 2
    460a:	11 82       	std	Z+1, r1	; 0x01
    460c:	10 82       	st	Z, r1
    *(--stk) = 0; 
    460e:	32 97       	sbiw	r30, 0x02	; 2
    4610:	11 82       	std	Z+1, r1	; 0x01
    4612:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4614:	32 97       	sbiw	r30, 0x02	; 2
    4616:	11 82       	std	Z+1, r1	; 0x01
    4618:	10 82       	st	Z, r1
    *(--stk) = 0; 
    461a:	32 97       	sbiw	r30, 0x02	; 2
    461c:	11 82       	std	Z+1, r1	; 0x01
    461e:	10 82       	st	Z, r1
    *(--stk) = 0;
    4620:	cb 01       	movw	r24, r22
    4622:	84 97       	sbiw	r24, 0x24	; 36
    4624:	fc 01       	movw	r30, r24
    4626:	11 82       	std	Z+1, r1	; 0x01
    4628:	10 82       	st	Z, r1


    return ((void *)stk);
}
    462a:	08 95       	ret

0000462c <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    462c:	85 e5       	ldi	r24, 0x55	; 85
    462e:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    4632:	ee ef       	ldi	r30, 0xFE	; 254
    4634:	f1 e4       	ldi	r31, 0x41	; 65
    4636:	f0 93 2b 04 	sts	0x042B, r31
    463a:	e0 93 2a 04 	sts	0x042A, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    463e:	8c e0       	ldi	r24, 0x0C	; 12
    4640:	9f e0       	ldi	r25, 0x0F	; 15
    4642:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4644:	80 93 ff 41 	sts	0x41FF, r24
    4648:	08 95       	ret

0000464a <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    464a:	8c e0       	ldi	r24, 0x0C	; 12
    464c:	9f e0       	ldi	r25, 0x0F	; 15
    464e:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4652:	80 93 ff 41 	sts	0x41FF, r24
    4656:	08 95       	ret

00004658 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    4658:	0e 94 59 1f 	call	0x3eb2	; 0x3eb2 <_nrk_setup_timer>
  nrk_int_enable();  
    465c:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <nrk_int_enable>

00004660 <nrk_start_high_ready_task>:
    4660:	a0 91 4a 05 	lds	r26, 0x054A
    4664:	b0 91 4b 05 	lds	r27, 0x054B
    4668:	cd 91       	ld	r28, X+
    466a:	cd bf       	out	0x3d, r28	; 61
    466c:	dd 91       	ld	r29, X+
    466e:	de bf       	out	0x3e, r29	; 62
    4670:	ff 91       	pop	r31
    4672:	ef 91       	pop	r30
    4674:	df 91       	pop	r29
    4676:	cf 91       	pop	r28
    4678:	bf 91       	pop	r27
    467a:	af 91       	pop	r26
    467c:	9f 91       	pop	r25
    467e:	8f 91       	pop	r24
    4680:	7f 91       	pop	r23
    4682:	6f 91       	pop	r22
    4684:	5f 91       	pop	r21
    4686:	4f 91       	pop	r20
    4688:	3f 91       	pop	r19
    468a:	2f 91       	pop	r18
    468c:	1f 91       	pop	r17
    468e:	0f 91       	pop	r16
    4690:	ff 90       	pop	r15
    4692:	ef 90       	pop	r14
    4694:	df 90       	pop	r13
    4696:	cf 90       	pop	r12
    4698:	bf 90       	pop	r11
    469a:	af 90       	pop	r10
    469c:	9f 90       	pop	r9
    469e:	8f 90       	pop	r8
    46a0:	7f 90       	pop	r7
    46a2:	6f 90       	pop	r6
    46a4:	5f 90       	pop	r5
    46a6:	4f 90       	pop	r4
    46a8:	3f 90       	pop	r3
    46aa:	2f 90       	pop	r2
    46ac:	1f 90       	pop	r1
    46ae:	0f 90       	pop	r0
    46b0:	0f be       	out	0x3f, r0	; 63
    46b2:	0f 90       	pop	r0
    46b4:	18 95       	reti

000046b6 <main>:

int
main ()
{
  uint8_t t;
  nrk_setup_ports();
    46b6:	0e 94 3d 09 	call	0x127a	; 0x127a <nrk_setup_ports>
  nrk_setup_uart(UART_BAUDRATE_115K2);
    46ba:	80 e1       	ldi	r24, 0x10	; 16
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	0e 94 b3 0c 	call	0x1966	; 0x1966 <nrk_setup_uart>

  printf( "Starting up...\r\n" );
    46c2:	83 ea       	ldi	r24, 0xA3	; 163
    46c4:	92 e0       	ldi	r25, 0x02	; 2
    46c6:	0e 94 32 26 	call	0x4c64	; 0x4c64 <puts>

  nrk_init();
    46ca:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <nrk_init>
  nrk_time_set(0,0);
    46ce:	20 e0       	ldi	r18, 0x00	; 0
    46d0:	30 e0       	ldi	r19, 0x00	; 0
    46d2:	a9 01       	movw	r20, r18
    46d4:	60 e0       	ldi	r22, 0x00	; 0
    46d6:	70 e0       	ldi	r23, 0x00	; 0
    46d8:	cb 01       	movw	r24, r22
    46da:	0e 94 cd 19 	call	0x339a	; 0x339a <nrk_time_set>

  nrk_register_drivers();
    46de:	0e 94 1c 03 	call	0x638	; 0x638 <nrk_register_drivers>
  nrk_create_taskset ();
    46e2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <nrk_create_taskset>
  nrk_start();
    46e6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <nrk_start>
  
  return 0;
}
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	90 e0       	ldi	r25, 0x00	; 0
    46ee:	08 95       	ret

000046f0 <vfprintf>:
    46f0:	6f 92       	push	r6
    46f2:	7f 92       	push	r7
    46f4:	8f 92       	push	r8
    46f6:	9f 92       	push	r9
    46f8:	af 92       	push	r10
    46fa:	bf 92       	push	r11
    46fc:	cf 92       	push	r12
    46fe:	df 92       	push	r13
    4700:	ef 92       	push	r14
    4702:	ff 92       	push	r15
    4704:	0f 93       	push	r16
    4706:	1f 93       	push	r17
    4708:	cf 93       	push	r28
    470a:	df 93       	push	r29
    470c:	cd b7       	in	r28, 0x3d	; 61
    470e:	de b7       	in	r29, 0x3e	; 62
    4710:	2c 97       	sbiw	r28, 0x0c	; 12
    4712:	0f b6       	in	r0, 0x3f	; 63
    4714:	f8 94       	cli
    4716:	de bf       	out	0x3e, r29	; 62
    4718:	0f be       	out	0x3f, r0	; 63
    471a:	cd bf       	out	0x3d, r28	; 61
    471c:	6c 01       	movw	r12, r24
    471e:	5b 01       	movw	r10, r22
    4720:	7a 01       	movw	r14, r20
    4722:	fc 01       	movw	r30, r24
    4724:	17 82       	std	Z+7, r1	; 0x07
    4726:	16 82       	std	Z+6, r1	; 0x06
    4728:	83 81       	ldd	r24, Z+3	; 0x03
    472a:	81 ff       	sbrs	r24, 1
    472c:	0e c1       	rjmp	.+540    	; 0x494a <vfprintf+0x25a>
    472e:	ce 01       	movw	r24, r28
    4730:	01 96       	adiw	r24, 0x01	; 1
    4732:	4c 01       	movw	r8, r24
    4734:	f6 01       	movw	r30, r12
    4736:	03 81       	ldd	r16, Z+3	; 0x03
    4738:	f5 01       	movw	r30, r10
    473a:	03 fd       	sbrc	r16, 3
    473c:	15 91       	lpm	r17, Z+
    473e:	03 ff       	sbrs	r16, 3
    4740:	11 91       	ld	r17, Z+
    4742:	5f 01       	movw	r10, r30
    4744:	11 23       	and	r17, r17
    4746:	09 f4       	brne	.+2      	; 0x474a <vfprintf+0x5a>
    4748:	fc c0       	rjmp	.+504    	; 0x4942 <vfprintf+0x252>
    474a:	15 32       	cpi	r17, 0x25	; 37
    474c:	49 f4       	brne	.+18     	; 0x4760 <vfprintf+0x70>
    474e:	03 fd       	sbrc	r16, 3
    4750:	15 91       	lpm	r17, Z+
    4752:	03 ff       	sbrs	r16, 3
    4754:	11 91       	ld	r17, Z+
    4756:	5f 01       	movw	r10, r30
    4758:	15 32       	cpi	r17, 0x25	; 37
    475a:	11 f0       	breq	.+4      	; 0x4760 <vfprintf+0x70>
    475c:	20 e0       	ldi	r18, 0x00	; 0
    475e:	1b c0       	rjmp	.+54     	; 0x4796 <vfprintf+0xa6>
    4760:	b6 01       	movw	r22, r12
    4762:	81 2f       	mov	r24, r17
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <fputc>
    476a:	37 01       	movw	r6, r14
    476c:	73 01       	movw	r14, r6
    476e:	e2 cf       	rjmp	.-60     	; 0x4734 <vfprintf+0x44>
    4770:	11 23       	and	r17, r17
    4772:	09 f4       	brne	.+2      	; 0x4776 <vfprintf+0x86>
    4774:	e6 c0       	rjmp	.+460    	; 0x4942 <vfprintf+0x252>
    4776:	61 2f       	mov	r22, r17
    4778:	70 e0       	ldi	r23, 0x00	; 0
    477a:	80 e7       	ldi	r24, 0x70	; 112
    477c:	94 e0       	ldi	r25, 0x04	; 4
    477e:	2c 87       	std	Y+12, r18	; 0x0c
    4780:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <strchr_P>
    4784:	2c 85       	ldd	r18, Y+12	; 0x0c
    4786:	89 2b       	or	r24, r25
    4788:	49 f0       	breq	.+18     	; 0x479c <vfprintf+0xac>
    478a:	f5 01       	movw	r30, r10
    478c:	03 fd       	sbrc	r16, 3
    478e:	15 91       	lpm	r17, Z+
    4790:	03 ff       	sbrs	r16, 3
    4792:	11 91       	ld	r17, Z+
    4794:	5f 01       	movw	r10, r30
    4796:	27 ff       	sbrs	r18, 7
    4798:	eb cf       	rjmp	.-42     	; 0x4770 <vfprintf+0x80>
    479a:	09 c0       	rjmp	.+18     	; 0x47ae <vfprintf+0xbe>
    479c:	13 32       	cpi	r17, 0x23	; 35
    479e:	29 f0       	breq	.+10     	; 0x47aa <vfprintf+0xba>
    47a0:	1c 36       	cpi	r17, 0x6C	; 108
    47a2:	09 f0       	breq	.+2      	; 0x47a6 <vfprintf+0xb6>
    47a4:	d5 c0       	rjmp	.+426    	; 0x4950 <vfprintf+0x260>
    47a6:	20 68       	ori	r18, 0x80	; 128
    47a8:	f0 cf       	rjmp	.-32     	; 0x478a <vfprintf+0x9a>
    47aa:	20 e1       	ldi	r18, 0x10	; 16
    47ac:	ee cf       	rjmp	.-36     	; 0x478a <vfprintf+0x9a>
    47ae:	02 2f       	mov	r16, r18
    47b0:	11 23       	and	r17, r17
    47b2:	09 f4       	brne	.+2      	; 0x47b6 <vfprintf+0xc6>
    47b4:	c6 c0       	rjmp	.+396    	; 0x4942 <vfprintf+0x252>
    47b6:	61 2f       	mov	r22, r17
    47b8:	70 e0       	ldi	r23, 0x00	; 0
    47ba:	89 e6       	ldi	r24, 0x69	; 105
    47bc:	94 e0       	ldi	r25, 0x04	; 4
    47be:	2c 87       	std	Y+12, r18	; 0x0c
    47c0:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <strchr_P>
    47c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    47c6:	89 2b       	or	r24, r25
    47c8:	41 f0       	breq	.+16     	; 0x47da <vfprintf+0xea>
    47ca:	37 01       	movw	r6, r14
    47cc:	f4 e0       	ldi	r31, 0x04	; 4
    47ce:	6f 0e       	add	r6, r31
    47d0:	71 1c       	adc	r7, r1
    47d2:	b6 01       	movw	r22, r12
    47d4:	8f e3       	ldi	r24, 0x3F	; 63
    47d6:	90 e0       	ldi	r25, 0x00	; 0
    47d8:	11 c0       	rjmp	.+34     	; 0x47fc <vfprintf+0x10c>
    47da:	13 36       	cpi	r17, 0x63	; 99
    47dc:	39 f0       	breq	.+14     	; 0x47ec <vfprintf+0xfc>
    47de:	13 37       	cpi	r17, 0x73	; 115
    47e0:	81 f0       	breq	.+32     	; 0x4802 <vfprintf+0x112>
    47e2:	13 35       	cpi	r17, 0x53	; 83
    47e4:	19 f5       	brne	.+70     	; 0x482c <vfprintf+0x13c>
    47e6:	02 2f       	mov	r16, r18
    47e8:	01 60       	ori	r16, 0x01	; 1
    47ea:	0b c0       	rjmp	.+22     	; 0x4802 <vfprintf+0x112>
    47ec:	37 01       	movw	r6, r14
    47ee:	82 e0       	ldi	r24, 0x02	; 2
    47f0:	68 0e       	add	r6, r24
    47f2:	71 1c       	adc	r7, r1
    47f4:	b6 01       	movw	r22, r12
    47f6:	f7 01       	movw	r30, r14
    47f8:	80 81       	ld	r24, Z
    47fa:	91 81       	ldd	r25, Z+1	; 0x01
    47fc:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <fputc>
    4800:	b5 cf       	rjmp	.-150    	; 0x476c <vfprintf+0x7c>
    4802:	37 01       	movw	r6, r14
    4804:	f2 e0       	ldi	r31, 0x02	; 2
    4806:	6f 0e       	add	r6, r31
    4808:	71 1c       	adc	r7, r1
    480a:	f7 01       	movw	r30, r14
    480c:	e0 80       	ld	r14, Z
    480e:	f1 80       	ldd	r15, Z+1	; 0x01
    4810:	f7 01       	movw	r30, r14
    4812:	00 fd       	sbrc	r16, 0
    4814:	85 91       	lpm	r24, Z+
    4816:	00 ff       	sbrs	r16, 0
    4818:	81 91       	ld	r24, Z+
    481a:	7f 01       	movw	r14, r30
    481c:	88 23       	and	r24, r24
    481e:	09 f4       	brne	.+2      	; 0x4822 <vfprintf+0x132>
    4820:	a5 cf       	rjmp	.-182    	; 0x476c <vfprintf+0x7c>
    4822:	b6 01       	movw	r22, r12
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <fputc>
    482a:	f2 cf       	rjmp	.-28     	; 0x4810 <vfprintf+0x120>
    482c:	14 36       	cpi	r17, 0x64	; 100
    482e:	11 f0       	breq	.+4      	; 0x4834 <vfprintf+0x144>
    4830:	19 36       	cpi	r17, 0x69	; 105
    4832:	29 f5       	brne	.+74     	; 0x487e <vfprintf+0x18e>
    4834:	37 01       	movw	r6, r14
    4836:	27 ff       	sbrs	r18, 7
    4838:	09 c0       	rjmp	.+18     	; 0x484c <vfprintf+0x15c>
    483a:	f4 e0       	ldi	r31, 0x04	; 4
    483c:	6f 0e       	add	r6, r31
    483e:	71 1c       	adc	r7, r1
    4840:	f7 01       	movw	r30, r14
    4842:	60 81       	ld	r22, Z
    4844:	71 81       	ldd	r23, Z+1	; 0x01
    4846:	82 81       	ldd	r24, Z+2	; 0x02
    4848:	93 81       	ldd	r25, Z+3	; 0x03
    484a:	0a c0       	rjmp	.+20     	; 0x4860 <vfprintf+0x170>
    484c:	f2 e0       	ldi	r31, 0x02	; 2
    484e:	6f 0e       	add	r6, r31
    4850:	71 1c       	adc	r7, r1
    4852:	f7 01       	movw	r30, r14
    4854:	60 81       	ld	r22, Z
    4856:	71 81       	ldd	r23, Z+1	; 0x01
    4858:	88 27       	eor	r24, r24
    485a:	77 fd       	sbrc	r23, 7
    485c:	80 95       	com	r24
    485e:	98 2f       	mov	r25, r24
    4860:	02 2f       	mov	r16, r18
    4862:	0f 7e       	andi	r16, 0xEF	; 239
    4864:	97 ff       	sbrs	r25, 7
    4866:	08 c0       	rjmp	.+16     	; 0x4878 <vfprintf+0x188>
    4868:	90 95       	com	r25
    486a:	80 95       	com	r24
    486c:	70 95       	com	r23
    486e:	61 95       	neg	r22
    4870:	7f 4f       	sbci	r23, 0xFF	; 255
    4872:	8f 4f       	sbci	r24, 0xFF	; 255
    4874:	9f 4f       	sbci	r25, 0xFF	; 255
    4876:	00 64       	ori	r16, 0x40	; 64
    4878:	2a e0       	ldi	r18, 0x0A	; 10
    487a:	30 e0       	ldi	r19, 0x00	; 0
    487c:	33 c0       	rjmp	.+102    	; 0x48e4 <vfprintf+0x1f4>
    487e:	10 37       	cpi	r17, 0x70	; 112
    4880:	99 f0       	breq	.+38     	; 0x48a8 <vfprintf+0x1b8>
    4882:	40 f4       	brcc	.+16     	; 0x4894 <vfprintf+0x1a4>
    4884:	18 35       	cpi	r17, 0x58	; 88
    4886:	b1 f0       	breq	.+44     	; 0x48b4 <vfprintf+0x1c4>
    4888:	1f 36       	cpi	r17, 0x6F	; 111
    488a:	09 f0       	breq	.+2      	; 0x488e <vfprintf+0x19e>
    488c:	5a c0       	rjmp	.+180    	; 0x4942 <vfprintf+0x252>
    488e:	28 e0       	ldi	r18, 0x08	; 8
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	14 c0       	rjmp	.+40     	; 0x48bc <vfprintf+0x1cc>
    4894:	15 37       	cpi	r17, 0x75	; 117
    4896:	19 f0       	breq	.+6      	; 0x489e <vfprintf+0x1ae>
    4898:	18 37       	cpi	r17, 0x78	; 120
    489a:	41 f0       	breq	.+16     	; 0x48ac <vfprintf+0x1bc>
    489c:	52 c0       	rjmp	.+164    	; 0x4942 <vfprintf+0x252>
    489e:	02 2f       	mov	r16, r18
    48a0:	0f 7e       	andi	r16, 0xEF	; 239
    48a2:	2a e0       	ldi	r18, 0x0A	; 10
    48a4:	30 e0       	ldi	r19, 0x00	; 0
    48a6:	0a c0       	rjmp	.+20     	; 0x48bc <vfprintf+0x1cc>
    48a8:	02 2f       	mov	r16, r18
    48aa:	00 61       	ori	r16, 0x10	; 16
    48ac:	04 62       	ori	r16, 0x24	; 36
    48ae:	20 e1       	ldi	r18, 0x10	; 16
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	04 c0       	rjmp	.+8      	; 0x48bc <vfprintf+0x1cc>
    48b4:	02 2f       	mov	r16, r18
    48b6:	04 60       	ori	r16, 0x04	; 4
    48b8:	20 e1       	ldi	r18, 0x10	; 16
    48ba:	32 e0       	ldi	r19, 0x02	; 2
    48bc:	37 01       	movw	r6, r14
    48be:	07 ff       	sbrs	r16, 7
    48c0:	09 c0       	rjmp	.+18     	; 0x48d4 <vfprintf+0x1e4>
    48c2:	f4 e0       	ldi	r31, 0x04	; 4
    48c4:	6f 0e       	add	r6, r31
    48c6:	71 1c       	adc	r7, r1
    48c8:	f7 01       	movw	r30, r14
    48ca:	60 81       	ld	r22, Z
    48cc:	71 81       	ldd	r23, Z+1	; 0x01
    48ce:	82 81       	ldd	r24, Z+2	; 0x02
    48d0:	93 81       	ldd	r25, Z+3	; 0x03
    48d2:	08 c0       	rjmp	.+16     	; 0x48e4 <vfprintf+0x1f4>
    48d4:	f2 e0       	ldi	r31, 0x02	; 2
    48d6:	6f 0e       	add	r6, r31
    48d8:	71 1c       	adc	r7, r1
    48da:	f7 01       	movw	r30, r14
    48dc:	60 81       	ld	r22, Z
    48de:	71 81       	ldd	r23, Z+1	; 0x01
    48e0:	80 e0       	ldi	r24, 0x00	; 0
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	a4 01       	movw	r20, r8
    48e6:	0e 94 92 26 	call	0x4d24	; 0x4d24 <__ultoa_invert>
    48ea:	18 2f       	mov	r17, r24
    48ec:	18 19       	sub	r17, r8
    48ee:	06 ff       	sbrs	r16, 6
    48f0:	05 c0       	rjmp	.+10     	; 0x48fc <vfprintf+0x20c>
    48f2:	b6 01       	movw	r22, r12
    48f4:	8d e2       	ldi	r24, 0x2D	; 45
    48f6:	90 e0       	ldi	r25, 0x00	; 0
    48f8:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <fputc>
    48fc:	04 ff       	sbrs	r16, 4
    48fe:	15 c0       	rjmp	.+42     	; 0x492a <vfprintf+0x23a>
    4900:	fe 01       	movw	r30, r28
    4902:	e1 0f       	add	r30, r17
    4904:	f1 1d       	adc	r31, r1
    4906:	80 81       	ld	r24, Z
    4908:	80 33       	cpi	r24, 0x30	; 48
    490a:	79 f0       	breq	.+30     	; 0x492a <vfprintf+0x23a>
    490c:	b6 01       	movw	r22, r12
    490e:	80 e3       	ldi	r24, 0x30	; 48
    4910:	90 e0       	ldi	r25, 0x00	; 0
    4912:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <fputc>
    4916:	02 ff       	sbrs	r16, 2
    4918:	08 c0       	rjmp	.+16     	; 0x492a <vfprintf+0x23a>
    491a:	00 72       	andi	r16, 0x20	; 32
    491c:	80 2f       	mov	r24, r16
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	b6 01       	movw	r22, r12
    4922:	88 5a       	subi	r24, 0xA8	; 168
    4924:	9f 4f       	sbci	r25, 0xFF	; 255
    4926:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <fputc>
    492a:	11 50       	subi	r17, 0x01	; 1
    492c:	f4 01       	movw	r30, r8
    492e:	e1 0f       	add	r30, r17
    4930:	f1 1d       	adc	r31, r1
    4932:	80 81       	ld	r24, Z
    4934:	b6 01       	movw	r22, r12
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <fputc>
    493c:	11 11       	cpse	r17, r1
    493e:	f5 cf       	rjmp	.-22     	; 0x492a <vfprintf+0x23a>
    4940:	15 cf       	rjmp	.-470    	; 0x476c <vfprintf+0x7c>
    4942:	f6 01       	movw	r30, r12
    4944:	86 81       	ldd	r24, Z+6	; 0x06
    4946:	97 81       	ldd	r25, Z+7	; 0x07
    4948:	05 c0       	rjmp	.+10     	; 0x4954 <vfprintf+0x264>
    494a:	8f ef       	ldi	r24, 0xFF	; 255
    494c:	9f ef       	ldi	r25, 0xFF	; 255
    494e:	02 c0       	rjmp	.+4      	; 0x4954 <vfprintf+0x264>
    4950:	02 2f       	mov	r16, r18
    4952:	31 cf       	rjmp	.-414    	; 0x47b6 <vfprintf+0xc6>
    4954:	2c 96       	adiw	r28, 0x0c	; 12
    4956:	0f b6       	in	r0, 0x3f	; 63
    4958:	f8 94       	cli
    495a:	de bf       	out	0x3e, r29	; 62
    495c:	0f be       	out	0x3f, r0	; 63
    495e:	cd bf       	out	0x3d, r28	; 61
    4960:	df 91       	pop	r29
    4962:	cf 91       	pop	r28
    4964:	1f 91       	pop	r17
    4966:	0f 91       	pop	r16
    4968:	ff 90       	pop	r15
    496a:	ef 90       	pop	r14
    496c:	df 90       	pop	r13
    496e:	cf 90       	pop	r12
    4970:	bf 90       	pop	r11
    4972:	af 90       	pop	r10
    4974:	9f 90       	pop	r9
    4976:	8f 90       	pop	r8
    4978:	7f 90       	pop	r7
    497a:	6f 90       	pop	r6
    497c:	08 95       	ret

0000497e <__muluhisi3>:
    497e:	0e 94 64 25 	call	0x4ac8	; 0x4ac8 <__umulhisi3>
    4982:	a5 9f       	mul	r26, r21
    4984:	90 0d       	add	r25, r0
    4986:	b4 9f       	mul	r27, r20
    4988:	90 0d       	add	r25, r0
    498a:	a4 9f       	mul	r26, r20
    498c:	80 0d       	add	r24, r0
    498e:	91 1d       	adc	r25, r1
    4990:	11 24       	eor	r1, r1
    4992:	08 95       	ret

00004994 <__mulsi3>:
    4994:	db 01       	movw	r26, r22
    4996:	8f 93       	push	r24
    4998:	9f 93       	push	r25
    499a:	0e 94 bf 24 	call	0x497e	; 0x497e <__muluhisi3>
    499e:	bf 91       	pop	r27
    49a0:	af 91       	pop	r26
    49a2:	a2 9f       	mul	r26, r18
    49a4:	80 0d       	add	r24, r0
    49a6:	91 1d       	adc	r25, r1
    49a8:	a3 9f       	mul	r26, r19
    49aa:	90 0d       	add	r25, r0
    49ac:	b2 9f       	mul	r27, r18
    49ae:	90 0d       	add	r25, r0
    49b0:	11 24       	eor	r1, r1
    49b2:	08 95       	ret

000049b4 <__udivmodsi4>:
    49b4:	a1 e2       	ldi	r26, 0x21	; 33
    49b6:	1a 2e       	mov	r1, r26
    49b8:	aa 1b       	sub	r26, r26
    49ba:	bb 1b       	sub	r27, r27
    49bc:	fd 01       	movw	r30, r26
    49be:	0d c0       	rjmp	.+26     	; 0x49da <__udivmodsi4_ep>

000049c0 <__udivmodsi4_loop>:
    49c0:	aa 1f       	adc	r26, r26
    49c2:	bb 1f       	adc	r27, r27
    49c4:	ee 1f       	adc	r30, r30
    49c6:	ff 1f       	adc	r31, r31
    49c8:	a2 17       	cp	r26, r18
    49ca:	b3 07       	cpc	r27, r19
    49cc:	e4 07       	cpc	r30, r20
    49ce:	f5 07       	cpc	r31, r21
    49d0:	20 f0       	brcs	.+8      	; 0x49da <__udivmodsi4_ep>
    49d2:	a2 1b       	sub	r26, r18
    49d4:	b3 0b       	sbc	r27, r19
    49d6:	e4 0b       	sbc	r30, r20
    49d8:	f5 0b       	sbc	r31, r21

000049da <__udivmodsi4_ep>:
    49da:	66 1f       	adc	r22, r22
    49dc:	77 1f       	adc	r23, r23
    49de:	88 1f       	adc	r24, r24
    49e0:	99 1f       	adc	r25, r25
    49e2:	1a 94       	dec	r1
    49e4:	69 f7       	brne	.-38     	; 0x49c0 <__udivmodsi4_loop>
    49e6:	60 95       	com	r22
    49e8:	70 95       	com	r23
    49ea:	80 95       	com	r24
    49ec:	90 95       	com	r25
    49ee:	9b 01       	movw	r18, r22
    49f0:	ac 01       	movw	r20, r24
    49f2:	bd 01       	movw	r22, r26
    49f4:	cf 01       	movw	r24, r30
    49f6:	08 95       	ret

000049f8 <__umoddi3>:
    49f8:	68 94       	set
    49fa:	01 c0       	rjmp	.+2      	; 0x49fe <__udivdi3_umoddi3>

000049fc <__udivdi3>:
    49fc:	e8 94       	clt

000049fe <__udivdi3_umoddi3>:
    49fe:	8f 92       	push	r8
    4a00:	9f 92       	push	r9
    4a02:	cf 93       	push	r28
    4a04:	df 93       	push	r29
    4a06:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <__udivmod64>
    4a0a:	df 91       	pop	r29
    4a0c:	cf 91       	pop	r28
    4a0e:	9f 90       	pop	r9
    4a10:	8f 90       	pop	r8
    4a12:	08 95       	ret

00004a14 <__udivmod64>:
    4a14:	88 24       	eor	r8, r8
    4a16:	99 24       	eor	r9, r9
    4a18:	f4 01       	movw	r30, r8
    4a1a:	e4 01       	movw	r28, r8
    4a1c:	b0 e4       	ldi	r27, 0x40	; 64
    4a1e:	9f 93       	push	r25
    4a20:	aa 27       	eor	r26, r26
    4a22:	9a 15       	cp	r25, r10
    4a24:	8b 04       	cpc	r8, r11
    4a26:	9c 04       	cpc	r9, r12
    4a28:	ed 05       	cpc	r30, r13
    4a2a:	fe 05       	cpc	r31, r14
    4a2c:	cf 05       	cpc	r28, r15
    4a2e:	d0 07       	cpc	r29, r16
    4a30:	a1 07       	cpc	r26, r17
    4a32:	98 f4       	brcc	.+38     	; 0x4a5a <__udivmod64+0x46>
    4a34:	ad 2f       	mov	r26, r29
    4a36:	dc 2f       	mov	r29, r28
    4a38:	cf 2f       	mov	r28, r31
    4a3a:	fe 2f       	mov	r31, r30
    4a3c:	e9 2d       	mov	r30, r9
    4a3e:	98 2c       	mov	r9, r8
    4a40:	89 2e       	mov	r8, r25
    4a42:	98 2f       	mov	r25, r24
    4a44:	87 2f       	mov	r24, r23
    4a46:	76 2f       	mov	r23, r22
    4a48:	65 2f       	mov	r22, r21
    4a4a:	54 2f       	mov	r21, r20
    4a4c:	43 2f       	mov	r20, r19
    4a4e:	32 2f       	mov	r19, r18
    4a50:	22 27       	eor	r18, r18
    4a52:	b8 50       	subi	r27, 0x08	; 8
    4a54:	31 f7       	brne	.-52     	; 0x4a22 <__udivmod64+0xe>
    4a56:	bf 91       	pop	r27
    4a58:	27 c0       	rjmp	.+78     	; 0x4aa8 <__udivmod64+0x94>
    4a5a:	1b 2e       	mov	r1, r27
    4a5c:	bf 91       	pop	r27
    4a5e:	bb 27       	eor	r27, r27
    4a60:	22 0f       	add	r18, r18
    4a62:	33 1f       	adc	r19, r19
    4a64:	44 1f       	adc	r20, r20
    4a66:	55 1f       	adc	r21, r21
    4a68:	66 1f       	adc	r22, r22
    4a6a:	77 1f       	adc	r23, r23
    4a6c:	88 1f       	adc	r24, r24
    4a6e:	99 1f       	adc	r25, r25
    4a70:	88 1c       	adc	r8, r8
    4a72:	99 1c       	adc	r9, r9
    4a74:	ee 1f       	adc	r30, r30
    4a76:	ff 1f       	adc	r31, r31
    4a78:	cc 1f       	adc	r28, r28
    4a7a:	dd 1f       	adc	r29, r29
    4a7c:	aa 1f       	adc	r26, r26
    4a7e:	bb 1f       	adc	r27, r27
    4a80:	8a 14       	cp	r8, r10
    4a82:	9b 04       	cpc	r9, r11
    4a84:	ec 05       	cpc	r30, r12
    4a86:	fd 05       	cpc	r31, r13
    4a88:	ce 05       	cpc	r28, r14
    4a8a:	df 05       	cpc	r29, r15
    4a8c:	a0 07       	cpc	r26, r16
    4a8e:	b1 07       	cpc	r27, r17
    4a90:	48 f0       	brcs	.+18     	; 0x4aa4 <__udivmod64+0x90>
    4a92:	8a 18       	sub	r8, r10
    4a94:	9b 08       	sbc	r9, r11
    4a96:	ec 09       	sbc	r30, r12
    4a98:	fd 09       	sbc	r31, r13
    4a9a:	ce 09       	sbc	r28, r14
    4a9c:	df 09       	sbc	r29, r15
    4a9e:	a0 0b       	sbc	r26, r16
    4aa0:	b1 0b       	sbc	r27, r17
    4aa2:	21 60       	ori	r18, 0x01	; 1
    4aa4:	1a 94       	dec	r1
    4aa6:	e1 f6       	brne	.-72     	; 0x4a60 <__udivmod64+0x4c>
    4aa8:	2e f4       	brtc	.+10     	; 0x4ab4 <__udivmod64+0xa0>
    4aaa:	94 01       	movw	r18, r8
    4aac:	af 01       	movw	r20, r30
    4aae:	be 01       	movw	r22, r28
    4ab0:	cd 01       	movw	r24, r26
    4ab2:	00 0c       	add	r0, r0
    4ab4:	08 95       	ret

00004ab6 <__tablejump2__>:
    4ab6:	ee 0f       	add	r30, r30
    4ab8:	ff 1f       	adc	r31, r31
    4aba:	00 24       	eor	r0, r0
    4abc:	00 1c       	adc	r0, r0
    4abe:	0b be       	out	0x3b, r0	; 59
    4ac0:	07 90       	elpm	r0, Z+
    4ac2:	f6 91       	elpm	r31, Z
    4ac4:	e0 2d       	mov	r30, r0
    4ac6:	09 94       	ijmp

00004ac8 <__umulhisi3>:
    4ac8:	a2 9f       	mul	r26, r18
    4aca:	b0 01       	movw	r22, r0
    4acc:	b3 9f       	mul	r27, r19
    4ace:	c0 01       	movw	r24, r0
    4ad0:	a3 9f       	mul	r26, r19
    4ad2:	70 0d       	add	r23, r0
    4ad4:	81 1d       	adc	r24, r1
    4ad6:	11 24       	eor	r1, r1
    4ad8:	91 1d       	adc	r25, r1
    4ada:	b2 9f       	mul	r27, r18
    4adc:	70 0d       	add	r23, r0
    4ade:	81 1d       	adc	r24, r1
    4ae0:	11 24       	eor	r1, r1
    4ae2:	91 1d       	adc	r25, r1
    4ae4:	08 95       	ret

00004ae6 <strchr_P>:
    4ae6:	fc 01       	movw	r30, r24
    4ae8:	05 90       	lpm	r0, Z+
    4aea:	06 16       	cp	r0, r22
    4aec:	21 f0       	breq	.+8      	; 0x4af6 <strchr_P+0x10>
    4aee:	00 20       	and	r0, r0
    4af0:	d9 f7       	brne	.-10     	; 0x4ae8 <strchr_P+0x2>
    4af2:	c0 01       	movw	r24, r0
    4af4:	08 95       	ret
    4af6:	31 97       	sbiw	r30, 0x01	; 1
    4af8:	cf 01       	movw	r24, r30
    4afa:	08 95       	ret

00004afc <memcpy>:
    4afc:	fb 01       	movw	r30, r22
    4afe:	dc 01       	movw	r26, r24
    4b00:	02 c0       	rjmp	.+4      	; 0x4b06 <memcpy+0xa>
    4b02:	01 90       	ld	r0, Z+
    4b04:	0d 92       	st	X+, r0
    4b06:	41 50       	subi	r20, 0x01	; 1
    4b08:	50 40       	sbci	r21, 0x00	; 0
    4b0a:	d8 f7       	brcc	.-10     	; 0x4b02 <memcpy+0x6>
    4b0c:	08 95       	ret

00004b0e <strncmp>:
    4b0e:	fb 01       	movw	r30, r22
    4b10:	dc 01       	movw	r26, r24
    4b12:	41 50       	subi	r20, 0x01	; 1
    4b14:	50 40       	sbci	r21, 0x00	; 0
    4b16:	30 f0       	brcs	.+12     	; 0x4b24 <strncmp+0x16>
    4b18:	8d 91       	ld	r24, X+
    4b1a:	01 90       	ld	r0, Z+
    4b1c:	80 19       	sub	r24, r0
    4b1e:	19 f4       	brne	.+6      	; 0x4b26 <strncmp+0x18>
    4b20:	00 20       	and	r0, r0
    4b22:	b9 f7       	brne	.-18     	; 0x4b12 <strncmp+0x4>
    4b24:	88 1b       	sub	r24, r24
    4b26:	99 0b       	sbc	r25, r25
    4b28:	08 95       	ret

00004b2a <fdevopen>:
    4b2a:	0f 93       	push	r16
    4b2c:	1f 93       	push	r17
    4b2e:	cf 93       	push	r28
    4b30:	df 93       	push	r29
    4b32:	00 97       	sbiw	r24, 0x00	; 0
    4b34:	31 f4       	brne	.+12     	; 0x4b42 <fdevopen+0x18>
    4b36:	61 15       	cp	r22, r1
    4b38:	71 05       	cpc	r23, r1
    4b3a:	19 f4       	brne	.+6      	; 0x4b42 <fdevopen+0x18>
    4b3c:	80 e0       	ldi	r24, 0x00	; 0
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	3a c0       	rjmp	.+116    	; 0x4bb6 <fdevopen+0x8c>
    4b42:	8b 01       	movw	r16, r22
    4b44:	ec 01       	movw	r28, r24
    4b46:	6e e0       	ldi	r22, 0x0E	; 14
    4b48:	70 e0       	ldi	r23, 0x00	; 0
    4b4a:	81 e0       	ldi	r24, 0x01	; 1
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <calloc>
    4b52:	fc 01       	movw	r30, r24
    4b54:	00 97       	sbiw	r24, 0x00	; 0
    4b56:	91 f3       	breq	.-28     	; 0x4b3c <fdevopen+0x12>
    4b58:	80 e8       	ldi	r24, 0x80	; 128
    4b5a:	83 83       	std	Z+3, r24	; 0x03
    4b5c:	01 15       	cp	r16, r1
    4b5e:	11 05       	cpc	r17, r1
    4b60:	71 f0       	breq	.+28     	; 0x4b7e <fdevopen+0x54>
    4b62:	13 87       	std	Z+11, r17	; 0x0b
    4b64:	02 87       	std	Z+10, r16	; 0x0a
    4b66:	81 e8       	ldi	r24, 0x81	; 129
    4b68:	83 83       	std	Z+3, r24	; 0x03
    4b6a:	80 91 7a 05 	lds	r24, 0x057A
    4b6e:	90 91 7b 05 	lds	r25, 0x057B
    4b72:	89 2b       	or	r24, r25
    4b74:	21 f4       	brne	.+8      	; 0x4b7e <fdevopen+0x54>
    4b76:	f0 93 7b 05 	sts	0x057B, r31
    4b7a:	e0 93 7a 05 	sts	0x057A, r30
    4b7e:	20 97       	sbiw	r28, 0x00	; 0
    4b80:	c9 f0       	breq	.+50     	; 0x4bb4 <fdevopen+0x8a>
    4b82:	d1 87       	std	Z+9, r29	; 0x09
    4b84:	c0 87       	std	Z+8, r28	; 0x08
    4b86:	83 81       	ldd	r24, Z+3	; 0x03
    4b88:	82 60       	ori	r24, 0x02	; 2
    4b8a:	83 83       	std	Z+3, r24	; 0x03
    4b8c:	80 91 7c 05 	lds	r24, 0x057C
    4b90:	90 91 7d 05 	lds	r25, 0x057D
    4b94:	89 2b       	or	r24, r25
    4b96:	71 f4       	brne	.+28     	; 0x4bb4 <fdevopen+0x8a>
    4b98:	f0 93 7d 05 	sts	0x057D, r31
    4b9c:	e0 93 7c 05 	sts	0x057C, r30
    4ba0:	80 91 7e 05 	lds	r24, 0x057E
    4ba4:	90 91 7f 05 	lds	r25, 0x057F
    4ba8:	89 2b       	or	r24, r25
    4baa:	21 f4       	brne	.+8      	; 0x4bb4 <fdevopen+0x8a>
    4bac:	f0 93 7f 05 	sts	0x057F, r31
    4bb0:	e0 93 7e 05 	sts	0x057E, r30
    4bb4:	cf 01       	movw	r24, r30
    4bb6:	df 91       	pop	r29
    4bb8:	cf 91       	pop	r28
    4bba:	1f 91       	pop	r17
    4bbc:	0f 91       	pop	r16
    4bbe:	08 95       	ret

00004bc0 <fputc>:
    4bc0:	0f 93       	push	r16
    4bc2:	1f 93       	push	r17
    4bc4:	cf 93       	push	r28
    4bc6:	df 93       	push	r29
    4bc8:	fb 01       	movw	r30, r22
    4bca:	23 81       	ldd	r18, Z+3	; 0x03
    4bcc:	21 fd       	sbrc	r18, 1
    4bce:	03 c0       	rjmp	.+6      	; 0x4bd6 <fputc+0x16>
    4bd0:	8f ef       	ldi	r24, 0xFF	; 255
    4bd2:	9f ef       	ldi	r25, 0xFF	; 255
    4bd4:	28 c0       	rjmp	.+80     	; 0x4c26 <fputc+0x66>
    4bd6:	22 ff       	sbrs	r18, 2
    4bd8:	16 c0       	rjmp	.+44     	; 0x4c06 <fputc+0x46>
    4bda:	46 81       	ldd	r20, Z+6	; 0x06
    4bdc:	57 81       	ldd	r21, Z+7	; 0x07
    4bde:	24 81       	ldd	r18, Z+4	; 0x04
    4be0:	35 81       	ldd	r19, Z+5	; 0x05
    4be2:	42 17       	cp	r20, r18
    4be4:	53 07       	cpc	r21, r19
    4be6:	44 f4       	brge	.+16     	; 0x4bf8 <fputc+0x38>
    4be8:	a0 81       	ld	r26, Z
    4bea:	b1 81       	ldd	r27, Z+1	; 0x01
    4bec:	9d 01       	movw	r18, r26
    4bee:	2f 5f       	subi	r18, 0xFF	; 255
    4bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf2:	31 83       	std	Z+1, r19	; 0x01
    4bf4:	20 83       	st	Z, r18
    4bf6:	8c 93       	st	X, r24
    4bf8:	26 81       	ldd	r18, Z+6	; 0x06
    4bfa:	37 81       	ldd	r19, Z+7	; 0x07
    4bfc:	2f 5f       	subi	r18, 0xFF	; 255
    4bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    4c00:	37 83       	std	Z+7, r19	; 0x07
    4c02:	26 83       	std	Z+6, r18	; 0x06
    4c04:	10 c0       	rjmp	.+32     	; 0x4c26 <fputc+0x66>
    4c06:	eb 01       	movw	r28, r22
    4c08:	09 2f       	mov	r16, r25
    4c0a:	18 2f       	mov	r17, r24
    4c0c:	00 84       	ldd	r0, Z+8	; 0x08
    4c0e:	f1 85       	ldd	r31, Z+9	; 0x09
    4c10:	e0 2d       	mov	r30, r0
    4c12:	09 95       	icall
    4c14:	89 2b       	or	r24, r25
    4c16:	e1 f6       	brne	.-72     	; 0x4bd0 <fputc+0x10>
    4c18:	8e 81       	ldd	r24, Y+6	; 0x06
    4c1a:	9f 81       	ldd	r25, Y+7	; 0x07
    4c1c:	01 96       	adiw	r24, 0x01	; 1
    4c1e:	9f 83       	std	Y+7, r25	; 0x07
    4c20:	8e 83       	std	Y+6, r24	; 0x06
    4c22:	81 2f       	mov	r24, r17
    4c24:	90 2f       	mov	r25, r16
    4c26:	df 91       	pop	r29
    4c28:	cf 91       	pop	r28
    4c2a:	1f 91       	pop	r17
    4c2c:	0f 91       	pop	r16
    4c2e:	08 95       	ret

00004c30 <printf>:
    4c30:	cf 93       	push	r28
    4c32:	df 93       	push	r29
    4c34:	cd b7       	in	r28, 0x3d	; 61
    4c36:	de b7       	in	r29, 0x3e	; 62
    4c38:	ae 01       	movw	r20, r28
    4c3a:	4b 5f       	subi	r20, 0xFB	; 251
    4c3c:	5f 4f       	sbci	r21, 0xFF	; 255
    4c3e:	fa 01       	movw	r30, r20
    4c40:	61 91       	ld	r22, Z+
    4c42:	71 91       	ld	r23, Z+
    4c44:	af 01       	movw	r20, r30
    4c46:	80 91 7c 05 	lds	r24, 0x057C
    4c4a:	90 91 7d 05 	lds	r25, 0x057D
    4c4e:	0e 94 78 23 	call	0x46f0	; 0x46f0 <vfprintf>
    4c52:	df 91       	pop	r29
    4c54:	cf 91       	pop	r28
    4c56:	08 95       	ret

00004c58 <putchar>:
    4c58:	60 91 7c 05 	lds	r22, 0x057C
    4c5c:	70 91 7d 05 	lds	r23, 0x057D
    4c60:	0c 94 e0 25 	jmp	0x4bc0	; 0x4bc0 <fputc>

00004c64 <puts>:
    4c64:	0f 93       	push	r16
    4c66:	1f 93       	push	r17
    4c68:	cf 93       	push	r28
    4c6a:	df 93       	push	r29
    4c6c:	e0 91 7c 05 	lds	r30, 0x057C
    4c70:	f0 91 7d 05 	lds	r31, 0x057D
    4c74:	23 81       	ldd	r18, Z+3	; 0x03
    4c76:	21 ff       	sbrs	r18, 1
    4c78:	1b c0       	rjmp	.+54     	; 0x4cb0 <puts+0x4c>
    4c7a:	8c 01       	movw	r16, r24
    4c7c:	d0 e0       	ldi	r29, 0x00	; 0
    4c7e:	c0 e0       	ldi	r28, 0x00	; 0
    4c80:	f8 01       	movw	r30, r16
    4c82:	81 91       	ld	r24, Z+
    4c84:	8f 01       	movw	r16, r30
    4c86:	60 91 7c 05 	lds	r22, 0x057C
    4c8a:	70 91 7d 05 	lds	r23, 0x057D
    4c8e:	db 01       	movw	r26, r22
    4c90:	18 96       	adiw	r26, 0x08	; 8
    4c92:	ed 91       	ld	r30, X+
    4c94:	fc 91       	ld	r31, X
    4c96:	19 97       	sbiw	r26, 0x09	; 9
    4c98:	88 23       	and	r24, r24
    4c9a:	31 f0       	breq	.+12     	; 0x4ca8 <puts+0x44>
    4c9c:	09 95       	icall
    4c9e:	89 2b       	or	r24, r25
    4ca0:	79 f3       	breq	.-34     	; 0x4c80 <puts+0x1c>
    4ca2:	df ef       	ldi	r29, 0xFF	; 255
    4ca4:	cf ef       	ldi	r28, 0xFF	; 255
    4ca6:	ec cf       	rjmp	.-40     	; 0x4c80 <puts+0x1c>
    4ca8:	8a e0       	ldi	r24, 0x0A	; 10
    4caa:	09 95       	icall
    4cac:	89 2b       	or	r24, r25
    4cae:	19 f0       	breq	.+6      	; 0x4cb6 <puts+0x52>
    4cb0:	8f ef       	ldi	r24, 0xFF	; 255
    4cb2:	9f ef       	ldi	r25, 0xFF	; 255
    4cb4:	02 c0       	rjmp	.+4      	; 0x4cba <puts+0x56>
    4cb6:	8d 2f       	mov	r24, r29
    4cb8:	9c 2f       	mov	r25, r28
    4cba:	df 91       	pop	r29
    4cbc:	cf 91       	pop	r28
    4cbe:	1f 91       	pop	r17
    4cc0:	0f 91       	pop	r16
    4cc2:	08 95       	ret

00004cc4 <sprintf>:
    4cc4:	0f 93       	push	r16
    4cc6:	1f 93       	push	r17
    4cc8:	cf 93       	push	r28
    4cca:	df 93       	push	r29
    4ccc:	cd b7       	in	r28, 0x3d	; 61
    4cce:	de b7       	in	r29, 0x3e	; 62
    4cd0:	2e 97       	sbiw	r28, 0x0e	; 14
    4cd2:	0f b6       	in	r0, 0x3f	; 63
    4cd4:	f8 94       	cli
    4cd6:	de bf       	out	0x3e, r29	; 62
    4cd8:	0f be       	out	0x3f, r0	; 63
    4cda:	cd bf       	out	0x3d, r28	; 61
    4cdc:	0d 89       	ldd	r16, Y+21	; 0x15
    4cde:	1e 89       	ldd	r17, Y+22	; 0x16
    4ce0:	86 e0       	ldi	r24, 0x06	; 6
    4ce2:	8c 83       	std	Y+4, r24	; 0x04
    4ce4:	1a 83       	std	Y+2, r17	; 0x02
    4ce6:	09 83       	std	Y+1, r16	; 0x01
    4ce8:	8f ef       	ldi	r24, 0xFF	; 255
    4cea:	9f e7       	ldi	r25, 0x7F	; 127
    4cec:	9e 83       	std	Y+6, r25	; 0x06
    4cee:	8d 83       	std	Y+5, r24	; 0x05
    4cf0:	ae 01       	movw	r20, r28
    4cf2:	47 5e       	subi	r20, 0xE7	; 231
    4cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    4cf6:	6f 89       	ldd	r22, Y+23	; 0x17
    4cf8:	78 8d       	ldd	r23, Y+24	; 0x18
    4cfa:	ce 01       	movw	r24, r28
    4cfc:	01 96       	adiw	r24, 0x01	; 1
    4cfe:	0e 94 78 23 	call	0x46f0	; 0x46f0 <vfprintf>
    4d02:	2f 81       	ldd	r18, Y+7	; 0x07
    4d04:	38 85       	ldd	r19, Y+8	; 0x08
    4d06:	f8 01       	movw	r30, r16
    4d08:	e2 0f       	add	r30, r18
    4d0a:	f3 1f       	adc	r31, r19
    4d0c:	10 82       	st	Z, r1
    4d0e:	2e 96       	adiw	r28, 0x0e	; 14
    4d10:	0f b6       	in	r0, 0x3f	; 63
    4d12:	f8 94       	cli
    4d14:	de bf       	out	0x3e, r29	; 62
    4d16:	0f be       	out	0x3f, r0	; 63
    4d18:	cd bf       	out	0x3d, r28	; 61
    4d1a:	df 91       	pop	r29
    4d1c:	cf 91       	pop	r28
    4d1e:	1f 91       	pop	r17
    4d20:	0f 91       	pop	r16
    4d22:	08 95       	ret

00004d24 <__ultoa_invert>:
    4d24:	fa 01       	movw	r30, r20
    4d26:	aa 27       	eor	r26, r26
    4d28:	28 30       	cpi	r18, 0x08	; 8
    4d2a:	51 f1       	breq	.+84     	; 0x4d80 <__ultoa_invert+0x5c>
    4d2c:	20 31       	cpi	r18, 0x10	; 16
    4d2e:	81 f1       	breq	.+96     	; 0x4d90 <__ultoa_invert+0x6c>
    4d30:	e8 94       	clt
    4d32:	6f 93       	push	r22
    4d34:	6e 7f       	andi	r22, 0xFE	; 254
    4d36:	6e 5f       	subi	r22, 0xFE	; 254
    4d38:	7f 4f       	sbci	r23, 0xFF	; 255
    4d3a:	8f 4f       	sbci	r24, 0xFF	; 255
    4d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d3e:	af 4f       	sbci	r26, 0xFF	; 255
    4d40:	b1 e0       	ldi	r27, 0x01	; 1
    4d42:	3e d0       	rcall	.+124    	; 0x4dc0 <__ultoa_invert+0x9c>
    4d44:	b4 e0       	ldi	r27, 0x04	; 4
    4d46:	3c d0       	rcall	.+120    	; 0x4dc0 <__ultoa_invert+0x9c>
    4d48:	67 0f       	add	r22, r23
    4d4a:	78 1f       	adc	r23, r24
    4d4c:	89 1f       	adc	r24, r25
    4d4e:	9a 1f       	adc	r25, r26
    4d50:	a1 1d       	adc	r26, r1
    4d52:	68 0f       	add	r22, r24
    4d54:	79 1f       	adc	r23, r25
    4d56:	8a 1f       	adc	r24, r26
    4d58:	91 1d       	adc	r25, r1
    4d5a:	a1 1d       	adc	r26, r1
    4d5c:	6a 0f       	add	r22, r26
    4d5e:	71 1d       	adc	r23, r1
    4d60:	81 1d       	adc	r24, r1
    4d62:	91 1d       	adc	r25, r1
    4d64:	a1 1d       	adc	r26, r1
    4d66:	20 d0       	rcall	.+64     	; 0x4da8 <__ultoa_invert+0x84>
    4d68:	09 f4       	brne	.+2      	; 0x4d6c <__ultoa_invert+0x48>
    4d6a:	68 94       	set
    4d6c:	3f 91       	pop	r19
    4d6e:	2a e0       	ldi	r18, 0x0A	; 10
    4d70:	26 9f       	mul	r18, r22
    4d72:	11 24       	eor	r1, r1
    4d74:	30 19       	sub	r19, r0
    4d76:	30 5d       	subi	r19, 0xD0	; 208
    4d78:	31 93       	st	Z+, r19
    4d7a:	de f6       	brtc	.-74     	; 0x4d32 <__ultoa_invert+0xe>
    4d7c:	cf 01       	movw	r24, r30
    4d7e:	08 95       	ret
    4d80:	46 2f       	mov	r20, r22
    4d82:	47 70       	andi	r20, 0x07	; 7
    4d84:	40 5d       	subi	r20, 0xD0	; 208
    4d86:	41 93       	st	Z+, r20
    4d88:	b3 e0       	ldi	r27, 0x03	; 3
    4d8a:	0f d0       	rcall	.+30     	; 0x4daa <__ultoa_invert+0x86>
    4d8c:	c9 f7       	brne	.-14     	; 0x4d80 <__ultoa_invert+0x5c>
    4d8e:	f6 cf       	rjmp	.-20     	; 0x4d7c <__ultoa_invert+0x58>
    4d90:	46 2f       	mov	r20, r22
    4d92:	4f 70       	andi	r20, 0x0F	; 15
    4d94:	40 5d       	subi	r20, 0xD0	; 208
    4d96:	4a 33       	cpi	r20, 0x3A	; 58
    4d98:	18 f0       	brcs	.+6      	; 0x4da0 <__ultoa_invert+0x7c>
    4d9a:	49 5d       	subi	r20, 0xD9	; 217
    4d9c:	31 fd       	sbrc	r19, 1
    4d9e:	40 52       	subi	r20, 0x20	; 32
    4da0:	41 93       	st	Z+, r20
    4da2:	02 d0       	rcall	.+4      	; 0x4da8 <__ultoa_invert+0x84>
    4da4:	a9 f7       	brne	.-22     	; 0x4d90 <__ultoa_invert+0x6c>
    4da6:	ea cf       	rjmp	.-44     	; 0x4d7c <__ultoa_invert+0x58>
    4da8:	b4 e0       	ldi	r27, 0x04	; 4
    4daa:	a6 95       	lsr	r26
    4dac:	97 95       	ror	r25
    4dae:	87 95       	ror	r24
    4db0:	77 95       	ror	r23
    4db2:	67 95       	ror	r22
    4db4:	ba 95       	dec	r27
    4db6:	c9 f7       	brne	.-14     	; 0x4daa <__ultoa_invert+0x86>
    4db8:	00 97       	sbiw	r24, 0x00	; 0
    4dba:	61 05       	cpc	r22, r1
    4dbc:	71 05       	cpc	r23, r1
    4dbe:	08 95       	ret
    4dc0:	9b 01       	movw	r18, r22
    4dc2:	ac 01       	movw	r20, r24
    4dc4:	0a 2e       	mov	r0, r26
    4dc6:	06 94       	lsr	r0
    4dc8:	57 95       	ror	r21
    4dca:	47 95       	ror	r20
    4dcc:	37 95       	ror	r19
    4dce:	27 95       	ror	r18
    4dd0:	ba 95       	dec	r27
    4dd2:	c9 f7       	brne	.-14     	; 0x4dc6 <__ultoa_invert+0xa2>
    4dd4:	62 0f       	add	r22, r18
    4dd6:	73 1f       	adc	r23, r19
    4dd8:	84 1f       	adc	r24, r20
    4dda:	95 1f       	adc	r25, r21
    4ddc:	a0 1d       	adc	r26, r0
    4dde:	08 95       	ret

00004de0 <__eerd_byte_m128rfa1>:
    4de0:	f9 99       	sbic	0x1f, 1	; 31
    4de2:	fe cf       	rjmp	.-4      	; 0x4de0 <__eerd_byte_m128rfa1>
    4de4:	92 bd       	out	0x22, r25	; 34
    4de6:	81 bd       	out	0x21, r24	; 33
    4de8:	f8 9a       	sbi	0x1f, 0	; 31
    4dea:	99 27       	eor	r25, r25
    4dec:	80 b5       	in	r24, 0x20	; 32
    4dee:	08 95       	ret

00004df0 <__eewr_byte_m128rfa1>:
    4df0:	26 2f       	mov	r18, r22

00004df2 <__eewr_r18_m128rfa1>:
    4df2:	f9 99       	sbic	0x1f, 1	; 31
    4df4:	fe cf       	rjmp	.-4      	; 0x4df2 <__eewr_r18_m128rfa1>
    4df6:	1f ba       	out	0x1f, r1	; 31
    4df8:	92 bd       	out	0x22, r25	; 34
    4dfa:	81 bd       	out	0x21, r24	; 33
    4dfc:	20 bd       	out	0x20, r18	; 32
    4dfe:	0f b6       	in	r0, 0x3f	; 63
    4e00:	f8 94       	cli
    4e02:	fa 9a       	sbi	0x1f, 2	; 31
    4e04:	f9 9a       	sbi	0x1f, 1	; 31
    4e06:	0f be       	out	0x3f, r0	; 63
    4e08:	01 96       	adiw	r24, 0x01	; 1
    4e0a:	08 95       	ret

00004e0c <calloc>:
    4e0c:	0f 93       	push	r16
    4e0e:	1f 93       	push	r17
    4e10:	cf 93       	push	r28
    4e12:	df 93       	push	r29
    4e14:	86 9f       	mul	r24, r22
    4e16:	80 01       	movw	r16, r0
    4e18:	87 9f       	mul	r24, r23
    4e1a:	10 0d       	add	r17, r0
    4e1c:	96 9f       	mul	r25, r22
    4e1e:	10 0d       	add	r17, r0
    4e20:	11 24       	eor	r1, r1
    4e22:	c8 01       	movw	r24, r16
    4e24:	0e 94 22 27 	call	0x4e44	; 0x4e44 <malloc>
    4e28:	ec 01       	movw	r28, r24
    4e2a:	00 97       	sbiw	r24, 0x00	; 0
    4e2c:	29 f0       	breq	.+10     	; 0x4e38 <calloc+0x2c>
    4e2e:	a8 01       	movw	r20, r16
    4e30:	60 e0       	ldi	r22, 0x00	; 0
    4e32:	70 e0       	ldi	r23, 0x00	; 0
    4e34:	0e 94 4f 28 	call	0x509e	; 0x509e <memset>
    4e38:	ce 01       	movw	r24, r28
    4e3a:	df 91       	pop	r29
    4e3c:	cf 91       	pop	r28
    4e3e:	1f 91       	pop	r17
    4e40:	0f 91       	pop	r16
    4e42:	08 95       	ret

00004e44 <malloc>:
    4e44:	cf 93       	push	r28
    4e46:	df 93       	push	r29
    4e48:	82 30       	cpi	r24, 0x02	; 2
    4e4a:	91 05       	cpc	r25, r1
    4e4c:	10 f4       	brcc	.+4      	; 0x4e52 <malloc+0xe>
    4e4e:	82 e0       	ldi	r24, 0x02	; 2
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	e0 91 82 05 	lds	r30, 0x0582
    4e56:	f0 91 83 05 	lds	r31, 0x0583
    4e5a:	20 e0       	ldi	r18, 0x00	; 0
    4e5c:	30 e0       	ldi	r19, 0x00	; 0
    4e5e:	c0 e0       	ldi	r28, 0x00	; 0
    4e60:	d0 e0       	ldi	r29, 0x00	; 0
    4e62:	30 97       	sbiw	r30, 0x00	; 0
    4e64:	11 f1       	breq	.+68     	; 0x4eaa <malloc+0x66>
    4e66:	40 81       	ld	r20, Z
    4e68:	51 81       	ldd	r21, Z+1	; 0x01
    4e6a:	48 17       	cp	r20, r24
    4e6c:	59 07       	cpc	r21, r25
    4e6e:	c0 f0       	brcs	.+48     	; 0x4ea0 <malloc+0x5c>
    4e70:	48 17       	cp	r20, r24
    4e72:	59 07       	cpc	r21, r25
    4e74:	61 f4       	brne	.+24     	; 0x4e8e <malloc+0x4a>
    4e76:	82 81       	ldd	r24, Z+2	; 0x02
    4e78:	93 81       	ldd	r25, Z+3	; 0x03
    4e7a:	20 97       	sbiw	r28, 0x00	; 0
    4e7c:	19 f0       	breq	.+6      	; 0x4e84 <malloc+0x40>
    4e7e:	9b 83       	std	Y+3, r25	; 0x03
    4e80:	8a 83       	std	Y+2, r24	; 0x02
    4e82:	2b c0       	rjmp	.+86     	; 0x4eda <malloc+0x96>
    4e84:	90 93 83 05 	sts	0x0583, r25
    4e88:	80 93 82 05 	sts	0x0582, r24
    4e8c:	26 c0       	rjmp	.+76     	; 0x4eda <malloc+0x96>
    4e8e:	21 15       	cp	r18, r1
    4e90:	31 05       	cpc	r19, r1
    4e92:	19 f0       	breq	.+6      	; 0x4e9a <malloc+0x56>
    4e94:	42 17       	cp	r20, r18
    4e96:	53 07       	cpc	r21, r19
    4e98:	18 f4       	brcc	.+6      	; 0x4ea0 <malloc+0x5c>
    4e9a:	9a 01       	movw	r18, r20
    4e9c:	be 01       	movw	r22, r28
    4e9e:	df 01       	movw	r26, r30
    4ea0:	ef 01       	movw	r28, r30
    4ea2:	02 80       	ldd	r0, Z+2	; 0x02
    4ea4:	f3 81       	ldd	r31, Z+3	; 0x03
    4ea6:	e0 2d       	mov	r30, r0
    4ea8:	dc cf       	rjmp	.-72     	; 0x4e62 <malloc+0x1e>
    4eaa:	21 15       	cp	r18, r1
    4eac:	31 05       	cpc	r19, r1
    4eae:	09 f1       	breq	.+66     	; 0x4ef2 <malloc+0xae>
    4eb0:	28 1b       	sub	r18, r24
    4eb2:	39 0b       	sbc	r19, r25
    4eb4:	24 30       	cpi	r18, 0x04	; 4
    4eb6:	31 05       	cpc	r19, r1
    4eb8:	90 f4       	brcc	.+36     	; 0x4ede <malloc+0x9a>
    4eba:	12 96       	adiw	r26, 0x02	; 2
    4ebc:	8d 91       	ld	r24, X+
    4ebe:	9c 91       	ld	r25, X
    4ec0:	13 97       	sbiw	r26, 0x03	; 3
    4ec2:	61 15       	cp	r22, r1
    4ec4:	71 05       	cpc	r23, r1
    4ec6:	21 f0       	breq	.+8      	; 0x4ed0 <malloc+0x8c>
    4ec8:	fb 01       	movw	r30, r22
    4eca:	93 83       	std	Z+3, r25	; 0x03
    4ecc:	82 83       	std	Z+2, r24	; 0x02
    4ece:	04 c0       	rjmp	.+8      	; 0x4ed8 <malloc+0x94>
    4ed0:	90 93 83 05 	sts	0x0583, r25
    4ed4:	80 93 82 05 	sts	0x0582, r24
    4ed8:	fd 01       	movw	r30, r26
    4eda:	32 96       	adiw	r30, 0x02	; 2
    4edc:	44 c0       	rjmp	.+136    	; 0x4f66 <malloc+0x122>
    4ede:	fd 01       	movw	r30, r26
    4ee0:	e2 0f       	add	r30, r18
    4ee2:	f3 1f       	adc	r31, r19
    4ee4:	81 93       	st	Z+, r24
    4ee6:	91 93       	st	Z+, r25
    4ee8:	22 50       	subi	r18, 0x02	; 2
    4eea:	31 09       	sbc	r19, r1
    4eec:	2d 93       	st	X+, r18
    4eee:	3c 93       	st	X, r19
    4ef0:	3a c0       	rjmp	.+116    	; 0x4f66 <malloc+0x122>
    4ef2:	20 91 80 05 	lds	r18, 0x0580
    4ef6:	30 91 81 05 	lds	r19, 0x0581
    4efa:	23 2b       	or	r18, r19
    4efc:	41 f4       	brne	.+16     	; 0x4f0e <malloc+0xca>
    4efe:	20 91 12 02 	lds	r18, 0x0212
    4f02:	30 91 13 02 	lds	r19, 0x0213
    4f06:	30 93 81 05 	sts	0x0581, r19
    4f0a:	20 93 80 05 	sts	0x0580, r18
    4f0e:	20 91 10 02 	lds	r18, 0x0210
    4f12:	30 91 11 02 	lds	r19, 0x0211
    4f16:	21 15       	cp	r18, r1
    4f18:	31 05       	cpc	r19, r1
    4f1a:	41 f4       	brne	.+16     	; 0x4f2c <malloc+0xe8>
    4f1c:	2d b7       	in	r18, 0x3d	; 61
    4f1e:	3e b7       	in	r19, 0x3e	; 62
    4f20:	40 91 14 02 	lds	r20, 0x0214
    4f24:	50 91 15 02 	lds	r21, 0x0215
    4f28:	24 1b       	sub	r18, r20
    4f2a:	35 0b       	sbc	r19, r21
    4f2c:	e0 91 80 05 	lds	r30, 0x0580
    4f30:	f0 91 81 05 	lds	r31, 0x0581
    4f34:	e2 17       	cp	r30, r18
    4f36:	f3 07       	cpc	r31, r19
    4f38:	a0 f4       	brcc	.+40     	; 0x4f62 <malloc+0x11e>
    4f3a:	2e 1b       	sub	r18, r30
    4f3c:	3f 0b       	sbc	r19, r31
    4f3e:	28 17       	cp	r18, r24
    4f40:	39 07       	cpc	r19, r25
    4f42:	78 f0       	brcs	.+30     	; 0x4f62 <malloc+0x11e>
    4f44:	ac 01       	movw	r20, r24
    4f46:	4e 5f       	subi	r20, 0xFE	; 254
    4f48:	5f 4f       	sbci	r21, 0xFF	; 255
    4f4a:	24 17       	cp	r18, r20
    4f4c:	35 07       	cpc	r19, r21
    4f4e:	48 f0       	brcs	.+18     	; 0x4f62 <malloc+0x11e>
    4f50:	4e 0f       	add	r20, r30
    4f52:	5f 1f       	adc	r21, r31
    4f54:	50 93 81 05 	sts	0x0581, r21
    4f58:	40 93 80 05 	sts	0x0580, r20
    4f5c:	81 93       	st	Z+, r24
    4f5e:	91 93       	st	Z+, r25
    4f60:	02 c0       	rjmp	.+4      	; 0x4f66 <malloc+0x122>
    4f62:	e0 e0       	ldi	r30, 0x00	; 0
    4f64:	f0 e0       	ldi	r31, 0x00	; 0
    4f66:	cf 01       	movw	r24, r30
    4f68:	df 91       	pop	r29
    4f6a:	cf 91       	pop	r28
    4f6c:	08 95       	ret

00004f6e <free>:
    4f6e:	0f 93       	push	r16
    4f70:	1f 93       	push	r17
    4f72:	cf 93       	push	r28
    4f74:	df 93       	push	r29
    4f76:	00 97       	sbiw	r24, 0x00	; 0
    4f78:	09 f4       	brne	.+2      	; 0x4f7c <free+0xe>
    4f7a:	8c c0       	rjmp	.+280    	; 0x5094 <free+0x126>
    4f7c:	fc 01       	movw	r30, r24
    4f7e:	32 97       	sbiw	r30, 0x02	; 2
    4f80:	13 82       	std	Z+3, r1	; 0x03
    4f82:	12 82       	std	Z+2, r1	; 0x02
    4f84:	00 91 82 05 	lds	r16, 0x0582
    4f88:	10 91 83 05 	lds	r17, 0x0583
    4f8c:	01 15       	cp	r16, r1
    4f8e:	11 05       	cpc	r17, r1
    4f90:	81 f4       	brne	.+32     	; 0x4fb2 <free+0x44>
    4f92:	20 81       	ld	r18, Z
    4f94:	31 81       	ldd	r19, Z+1	; 0x01
    4f96:	82 0f       	add	r24, r18
    4f98:	93 1f       	adc	r25, r19
    4f9a:	20 91 80 05 	lds	r18, 0x0580
    4f9e:	30 91 81 05 	lds	r19, 0x0581
    4fa2:	28 17       	cp	r18, r24
    4fa4:	39 07       	cpc	r19, r25
    4fa6:	79 f5       	brne	.+94     	; 0x5006 <free+0x98>
    4fa8:	f0 93 81 05 	sts	0x0581, r31
    4fac:	e0 93 80 05 	sts	0x0580, r30
    4fb0:	71 c0       	rjmp	.+226    	; 0x5094 <free+0x126>
    4fb2:	d8 01       	movw	r26, r16
    4fb4:	40 e0       	ldi	r20, 0x00	; 0
    4fb6:	50 e0       	ldi	r21, 0x00	; 0
    4fb8:	ae 17       	cp	r26, r30
    4fba:	bf 07       	cpc	r27, r31
    4fbc:	50 f4       	brcc	.+20     	; 0x4fd2 <free+0x64>
    4fbe:	12 96       	adiw	r26, 0x02	; 2
    4fc0:	2d 91       	ld	r18, X+
    4fc2:	3c 91       	ld	r19, X
    4fc4:	13 97       	sbiw	r26, 0x03	; 3
    4fc6:	ad 01       	movw	r20, r26
    4fc8:	21 15       	cp	r18, r1
    4fca:	31 05       	cpc	r19, r1
    4fcc:	09 f1       	breq	.+66     	; 0x5010 <free+0xa2>
    4fce:	d9 01       	movw	r26, r18
    4fd0:	f3 cf       	rjmp	.-26     	; 0x4fb8 <free+0x4a>
    4fd2:	9d 01       	movw	r18, r26
    4fd4:	da 01       	movw	r26, r20
    4fd6:	33 83       	std	Z+3, r19	; 0x03
    4fd8:	22 83       	std	Z+2, r18	; 0x02
    4fda:	60 81       	ld	r22, Z
    4fdc:	71 81       	ldd	r23, Z+1	; 0x01
    4fde:	86 0f       	add	r24, r22
    4fe0:	97 1f       	adc	r25, r23
    4fe2:	82 17       	cp	r24, r18
    4fe4:	93 07       	cpc	r25, r19
    4fe6:	69 f4       	brne	.+26     	; 0x5002 <free+0x94>
    4fe8:	ec 01       	movw	r28, r24
    4fea:	28 81       	ld	r18, Y
    4fec:	39 81       	ldd	r19, Y+1	; 0x01
    4fee:	26 0f       	add	r18, r22
    4ff0:	37 1f       	adc	r19, r23
    4ff2:	2e 5f       	subi	r18, 0xFE	; 254
    4ff4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ff6:	31 83       	std	Z+1, r19	; 0x01
    4ff8:	20 83       	st	Z, r18
    4ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    4ffc:	9b 81       	ldd	r25, Y+3	; 0x03
    4ffe:	93 83       	std	Z+3, r25	; 0x03
    5000:	82 83       	std	Z+2, r24	; 0x02
    5002:	45 2b       	or	r20, r21
    5004:	29 f4       	brne	.+10     	; 0x5010 <free+0xa2>
    5006:	f0 93 83 05 	sts	0x0583, r31
    500a:	e0 93 82 05 	sts	0x0582, r30
    500e:	42 c0       	rjmp	.+132    	; 0x5094 <free+0x126>
    5010:	13 96       	adiw	r26, 0x03	; 3
    5012:	fc 93       	st	X, r31
    5014:	ee 93       	st	-X, r30
    5016:	12 97       	sbiw	r26, 0x02	; 2
    5018:	ed 01       	movw	r28, r26
    501a:	49 91       	ld	r20, Y+
    501c:	59 91       	ld	r21, Y+
    501e:	9e 01       	movw	r18, r28
    5020:	24 0f       	add	r18, r20
    5022:	35 1f       	adc	r19, r21
    5024:	e2 17       	cp	r30, r18
    5026:	f3 07       	cpc	r31, r19
    5028:	71 f4       	brne	.+28     	; 0x5046 <free+0xd8>
    502a:	80 81       	ld	r24, Z
    502c:	91 81       	ldd	r25, Z+1	; 0x01
    502e:	84 0f       	add	r24, r20
    5030:	95 1f       	adc	r25, r21
    5032:	02 96       	adiw	r24, 0x02	; 2
    5034:	11 96       	adiw	r26, 0x01	; 1
    5036:	9c 93       	st	X, r25
    5038:	8e 93       	st	-X, r24
    503a:	82 81       	ldd	r24, Z+2	; 0x02
    503c:	93 81       	ldd	r25, Z+3	; 0x03
    503e:	13 96       	adiw	r26, 0x03	; 3
    5040:	9c 93       	st	X, r25
    5042:	8e 93       	st	-X, r24
    5044:	12 97       	sbiw	r26, 0x02	; 2
    5046:	e0 e0       	ldi	r30, 0x00	; 0
    5048:	f0 e0       	ldi	r31, 0x00	; 0
    504a:	d8 01       	movw	r26, r16
    504c:	12 96       	adiw	r26, 0x02	; 2
    504e:	8d 91       	ld	r24, X+
    5050:	9c 91       	ld	r25, X
    5052:	13 97       	sbiw	r26, 0x03	; 3
    5054:	00 97       	sbiw	r24, 0x00	; 0
    5056:	19 f0       	breq	.+6      	; 0x505e <free+0xf0>
    5058:	f8 01       	movw	r30, r16
    505a:	8c 01       	movw	r16, r24
    505c:	f6 cf       	rjmp	.-20     	; 0x504a <free+0xdc>
    505e:	8d 91       	ld	r24, X+
    5060:	9c 91       	ld	r25, X
    5062:	98 01       	movw	r18, r16
    5064:	2e 5f       	subi	r18, 0xFE	; 254
    5066:	3f 4f       	sbci	r19, 0xFF	; 255
    5068:	82 0f       	add	r24, r18
    506a:	93 1f       	adc	r25, r19
    506c:	20 91 80 05 	lds	r18, 0x0580
    5070:	30 91 81 05 	lds	r19, 0x0581
    5074:	28 17       	cp	r18, r24
    5076:	39 07       	cpc	r19, r25
    5078:	69 f4       	brne	.+26     	; 0x5094 <free+0x126>
    507a:	30 97       	sbiw	r30, 0x00	; 0
    507c:	29 f4       	brne	.+10     	; 0x5088 <free+0x11a>
    507e:	10 92 83 05 	sts	0x0583, r1
    5082:	10 92 82 05 	sts	0x0582, r1
    5086:	02 c0       	rjmp	.+4      	; 0x508c <free+0x11e>
    5088:	13 82       	std	Z+3, r1	; 0x03
    508a:	12 82       	std	Z+2, r1	; 0x02
    508c:	10 93 81 05 	sts	0x0581, r17
    5090:	00 93 80 05 	sts	0x0580, r16
    5094:	df 91       	pop	r29
    5096:	cf 91       	pop	r28
    5098:	1f 91       	pop	r17
    509a:	0f 91       	pop	r16
    509c:	08 95       	ret

0000509e <memset>:
    509e:	dc 01       	movw	r26, r24
    50a0:	01 c0       	rjmp	.+2      	; 0x50a4 <memset+0x6>
    50a2:	6d 93       	st	X+, r22
    50a4:	41 50       	subi	r20, 0x01	; 1
    50a6:	50 40       	sbci	r21, 0x00	; 0
    50a8:	e0 f7       	brcc	.-8      	; 0x50a2 <memset+0x4>
    50aa:	08 95       	ret

000050ac <_exit>:
    50ac:	f8 94       	cli

000050ae <__stop_program>:
    50ae:	ff cf       	rjmp	.-2      	; 0x50ae <__stop_program>
