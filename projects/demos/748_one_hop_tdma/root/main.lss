
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000022a  00800200  00005b46  00005bda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005b46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003dc  0080042a  0080042a  00005e04  2**0
                  ALLOC
  3 .stab         00011910  00000000  00000000  00005e04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000a373  00000000  00000000  00017714  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00021a87  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  00021a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  00022bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00023c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  00023c87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__ctors_end>
       4:	0c 94 32 26 	jmp	0x4c64	; 0x4c64 <__vector_1>
       8:	0c 94 64 26 	jmp	0x4cc8	; 0x4cc8 <__vector_2>
       c:	0c 94 96 26 	jmp	0x4d2c	; 0x4d2c <__vector_3>
      10:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      14:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      18:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      1c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      20:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      24:	0c 94 00 26 	jmp	0x4c00	; 0x4c00 <__vector_9>
      28:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      2c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      30:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      34:	0c 94 5f 24 	jmp	0x48be	; 0x48be <__vector_13>
      38:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      3c:	0c 94 5f 24 	jmp	0x48be	; 0x48be <__vector_13>
      40:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      44:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      48:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      4c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      50:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      54:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      58:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      5c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      60:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      64:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      68:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      6c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      70:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      74:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      78:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      7c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      80:	0c 94 92 24 	jmp	0x4924	; 0x4924 <__vector_32>
      84:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      88:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      8c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      90:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      94:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      98:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      9c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      a0:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      a4:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      a8:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      ac:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      b0:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      b4:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      b8:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      bc:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      c0:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      c4:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      c8:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      cc:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      d0:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      d4:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      d8:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      dc:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      e0:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      e4:	0c 94 97 0a 	jmp	0x152e	; 0x152e <__vector_57>
      e8:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__vector_58>
      ec:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__vector_59>
      f0:	0c 94 48 0b 	jmp	0x1690	; 0x1690 <__vector_60>
      f4:	0c 94 49 0a 	jmp	0x1492	; 0x1492 <__vector_61>
      f8:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__vector_62>
      fc:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__vector_63>
     100:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__vector_64>
     104:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
     108:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
     10c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
     110:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
     114:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
     118:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
     11c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
     120:	c8 0c       	add	r12, r8
     122:	d5 0c       	add	r13, r5
     124:	e2 0c       	add	r14, r2
     126:	ef 0c       	add	r14, r15
     128:	fc 0c       	add	r15, r12
     12a:	09 0d       	add	r16, r9
     12c:	16 0d       	add	r17, r6
     12e:	39 0d       	add	r19, r9
     130:	47 0d       	add	r20, r7
     132:	55 0d       	add	r21, r5
     134:	63 0d       	add	r22, r3
     136:	71 0d       	add	r23, r1
     138:	7f 0d       	add	r23, r15
     13a:	8d 0d       	add	r24, r13
     13c:	b0 0d       	add	r27, r0
     13e:	b2 0d       	add	r27, r2
     140:	b4 0d       	add	r27, r4
     142:	b6 0d       	add	r27, r6
     144:	b8 0d       	add	r27, r8
     146:	ba 0d       	add	r27, r10
     148:	bc 0d       	add	r27, r12
     14a:	db 0d       	add	r29, r11
     14c:	fe 0d       	add	r31, r14
     14e:	22 0e       	add	r2, r18
     150:	45 0e       	add	r4, r21
     152:	68 0e       	add	r6, r24
     154:	8b 0e       	add	r8, r27
     156:	ae 0e       	add	r10, r30
     158:	e8 0e       	add	r14, r24
     15a:	f5 0e       	add	r15, r21
     15c:	02 0f       	add	r16, r18
     15e:	0f 0f       	add	r16, r31
     160:	1c 0f       	add	r17, r28
     162:	29 0f       	add	r18, r25
     164:	36 0f       	add	r19, r22
     166:	4f 0f       	add	r20, r31
     168:	5c 0f       	add	r21, r28
     16a:	69 0f       	add	r22, r25
     16c:	76 0f       	add	r23, r22
     16e:	83 0f       	add	r24, r19
     170:	90 0f       	add	r25, r16
     172:	9d 0f       	add	r25, r29
     174:	eb 12       	cpse	r14, r27
     176:	f1 12       	cpse	r15, r17
     178:	f4 12       	cpse	r15, r20
     17a:	f7 12       	cpse	r15, r23
     17c:	fa 12       	cpse	r15, r26
     17e:	fd 12       	cpse	r15, r29
     180:	03 13       	cpse	r16, r19
     182:	00 13       	cpse	r16, r16
     184:	06 13       	cpse	r16, r22
     186:	09 13       	cpse	r16, r25
     188:	0c 13       	cpse	r16, r28
     18a:	15 13       	cpse	r17, r21
     18c:	18 13       	cpse	r17, r24
     18e:	1b 13       	cpse	r17, r27
     190:	1e 13       	cpse	r17, r30
     192:	12 13       	cpse	r17, r18
     194:	e8 12       	cpse	r14, r24
     196:	ee 12       	cpse	r14, r30
     198:	21 13       	cpse	r18, r17
     19a:	24 13       	cpse	r18, r20
     19c:	0f 13       	cpse	r16, r31
     19e:	e5 12       	cpse	r14, r21
     1a0:	f2 13       	cpse	r31, r18
     1a2:	f5 13       	cpse	r31, r21
     1a4:	00 14       	cp	r0, r0
     1a6:	05 14       	cp	r0, r5
     1a8:	0c 14       	cp	r0, r12
     1aa:	15 14       	cp	r1, r5
     1ac:	18 14       	cp	r1, r8
     1ae:	1d 14       	cp	r1, r13
     1b0:	24 14       	cp	r2, r4
     1b2:	2d 14       	cp	r2, r13

000001b4 <__trampolines_end>:
     1b4:	74 78       	andi	r23, 0x84	; 132
     1b6:	20 66       	ori	r18, 0x60	; 96
     1b8:	61 69       	ori	r22, 0x91	; 145
     1ba:	6c 65       	ori	r22, 0x5C	; 92
     1bc:	64 20       	and	r6, r4
     1be:	64 75       	andi	r22, 0x54	; 84
     1c0:	65 20       	and	r6, r5
     1c2:	74 6f       	ori	r23, 0xF4	; 244
     1c4:	20 69       	ori	r18, 0x90	; 144
     1c6:	6e 63       	ori	r22, 0x3E	; 62
     1c8:	6f 72       	andi	r22, 0x2F	; 47
     1ca:	72 65       	ori	r23, 0x52	; 82
     1cc:	63 74       	andi	r22, 0x43	; 67
     1ce:	20 74       	andi	r18, 0x40	; 64
     1d0:	72 78       	andi	r23, 0x82	; 130
     1d2:	20 73       	andi	r18, 0x30	; 48
     1d4:	74 61       	ori	r23, 0x14	; 20
     1d6:	74 75       	andi	r23, 0x54	; 84
     1d8:	73 0d       	add	r23, r3
     1da:	0a 00       	.word	0x000a	; ????

000001dc <__c.3389>:
     1dc:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000001e3 <__c.3386>:
     1e3:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000001f2 <__c.3383>:
     1f2:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

00000203 <__c.3380>:
     203:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     213:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

0000021e <__c.3377>:
     21e:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     22e:	20 53 69 67 6e 61 6c 00                              Signal.

00000236 <__c.3374>:
     236:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     246:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000256 <__c.3371>:
     256:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     266:	72 6f 72 00                                         ror.

0000026a <__c.3368>:
     26a:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

0000027b <__c.3365>:
     27b:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     28b:	61 72 74 00                                         art.

0000028f <__c.3362>:
     28f:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

0000029e <__c.3359>:
     29e:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     2ae:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

000002b9 <__c.3356>:
     2b9:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

000002c5 <__c.3353>:
     2c5:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     2d5:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     2e5:	20 6f 6b 3f 00                                       ok?.

000002ea <__c.3350>:
     2ea:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2fa:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

00000308 <__c.3347>:
     308:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     318:	72 74 00                                            rt.

0000031b <__c.3344>:
     31b:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     32b:	49 44 00                                            ID.

0000032e <__c.3341>:
     32e:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     33e:	20 57 61 6b 65 75 70 00                              Wakeup.

00000346 <__c.3338>:
     346:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     356:	6c 61 74 65 64 00                                   lated.

0000035c <__c.3335>:
     35c:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     36c:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000377 <__c.3332>:
     377:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     387:	69 6e 74 65 72 00                                   inter.

0000038d <__c.3329>:
     38d:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     39d:	6c 6f 77 00                                         low.

000003a1 <__c.3326>:
     3a1:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     3b1:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     3c1:	6e 6f 75 67 68 21 00                                nough!.

000003c8 <__c.3322>:
     3c8:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     3d8:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     3e8:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     3f8:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

00000404 <__c.3319>:
     404:	29 3a 20 00                                         ): .

00000408 <__c.3317>:
     408:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000414 <__c.3247>:
     414:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000423 <__c.2228>:
     423:	45 46 47 65 66 67 00                                EFGefg.

0000042a <__c.2222>:
     42a:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

0000043a <__ctors_end>:
     43a:	11 24       	eor	r1, r1
     43c:	1f be       	out	0x3f, r1	; 63
     43e:	cf ef       	ldi	r28, 0xFF	; 255
     440:	d1 e4       	ldi	r29, 0x41	; 65
     442:	de bf       	out	0x3e, r29	; 62
     444:	cd bf       	out	0x3d, r28	; 61

00000446 <__do_copy_data>:
     446:	14 e0       	ldi	r17, 0x04	; 4
     448:	a0 e0       	ldi	r26, 0x00	; 0
     44a:	b2 e0       	ldi	r27, 0x02	; 2
     44c:	e6 e4       	ldi	r30, 0x46	; 70
     44e:	fb e5       	ldi	r31, 0x5B	; 91
     450:	00 e0       	ldi	r16, 0x00	; 0
     452:	0b bf       	out	0x3b, r16	; 59
     454:	02 c0       	rjmp	.+4      	; 0x45a <__do_copy_data+0x14>
     456:	07 90       	elpm	r0, Z+
     458:	0d 92       	st	X+, r0
     45a:	aa 32       	cpi	r26, 0x2A	; 42
     45c:	b1 07       	cpc	r27, r17
     45e:	d9 f7       	brne	.-10     	; 0x456 <__do_copy_data+0x10>

00000460 <__do_clear_bss>:
     460:	18 e0       	ldi	r17, 0x08	; 8
     462:	aa e2       	ldi	r26, 0x2A	; 42
     464:	b4 e0       	ldi	r27, 0x04	; 4
     466:	01 c0       	rjmp	.+2      	; 0x46a <.do_clear_bss_start>

00000468 <.do_clear_bss_loop>:
     468:	1d 92       	st	X+, r1

0000046a <.do_clear_bss_start>:
     46a:	a6 30       	cpi	r26, 0x06	; 6
     46c:	b1 07       	cpc	r27, r17
     46e:	e1 f7       	brne	.-8      	; 0x468 <.do_clear_bss_loop>
     470:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <main>
     474:	0c 94 a1 2d 	jmp	0x5b42	; 0x5b42 <_exit>

00000478 <__bad_interrupt>:
     478:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <__vector_default>

0000047c <node_data_callback>:
}

int32_t correct = 0;
int32_t failed = 0;
void node_data_callback(uint8_t *data, uint64_t time)
{
     47c:	2f 92       	push	r2
     47e:	3f 92       	push	r3
     480:	4f 92       	push	r4
     482:	5f 92       	push	r5
     484:	6f 92       	push	r6
     486:	7f 92       	push	r7
     488:	8f 92       	push	r8
     48a:	9f 92       	push	r9
     48c:	af 92       	push	r10
     48e:	bf 92       	push	r11
     490:	cf 92       	push	r12
     492:	df 92       	push	r13
     494:	ef 92       	push	r14
     496:	ff 92       	push	r15
     498:	0f 93       	push	r16
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <node_data_callback+0x26>
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	8c 01       	movw	r16, r24
	uint32_t time_32 = (uint32_t)time;
	uint32_t press = *(uint32_t *)(data + 1);
     4a8:	fc 01       	movw	r30, r24
     4aa:	f1 81       	ldd	r31, Z+1	; 0x01
     4ac:	f9 83       	std	Y+1, r31	; 0x01
     4ae:	fc 01       	movw	r30, r24
     4b0:	f2 81       	ldd	r31, Z+2	; 0x02
     4b2:	fa 83       	std	Y+2, r31	; 0x02
     4b4:	fc 01       	movw	r30, r24
     4b6:	73 80       	ldd	r7, Z+3	; 0x03
     4b8:	64 80       	ldd	r6, Z+4	; 0x04
	int slot = (flash_get_current_time()/TDMA_SLOT_LEN)%NUM_NODES;
     4ba:	0e 94 02 05 	call	0xa04	; 0xa04 <flash_get_current_time>
	int sender_node = data[0];
     4be:	f8 01       	movw	r30, r16
     4c0:	40 80       	ld	r4, Z
     4c2:	51 2c       	mov	r5, r1
int32_t failed = 0;
void node_data_callback(uint8_t *data, uint64_t time)
{
	uint32_t time_32 = (uint32_t)time;
	uint32_t press = *(uint32_t *)(data + 1);
	int slot = (flash_get_current_time()/TDMA_SLOT_LEN)%NUM_NODES;
     4c4:	e0 ed       	ldi	r30, 0xD0	; 208
     4c6:	ae 2e       	mov	r10, r30
     4c8:	f7 e0       	ldi	r31, 0x07	; 7
     4ca:	bf 2e       	mov	r11, r31
     4cc:	c1 2c       	mov	r12, r1
     4ce:	d1 2c       	mov	r13, r1
     4d0:	e1 2c       	mov	r14, r1
     4d2:	f1 2c       	mov	r15, r1
     4d4:	00 e0       	ldi	r16, 0x00	; 0
     4d6:	10 e0       	ldi	r17, 0x00	; 0
     4d8:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <__udivdi3>
     4dc:	aa e0       	ldi	r26, 0x0A	; 10
     4de:	aa 2e       	mov	r10, r26
     4e0:	b1 2c       	mov	r11, r1
     4e2:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <__umoddi3>
	int sender_node = data[0];
	if (sender_node != slot){
     4e6:	42 16       	cp	r4, r18
     4e8:	53 06       	cpc	r5, r19
     4ea:	a1 f0       	breq	.+40     	; 0x514 <node_data_callback+0x98>
		failed ++;
     4ec:	80 91 2a 04 	lds	r24, 0x042A
     4f0:	90 91 2b 04 	lds	r25, 0x042B
     4f4:	a0 91 2c 04 	lds	r26, 0x042C
     4f8:	b0 91 2d 04 	lds	r27, 0x042D
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	a1 1d       	adc	r26, r1
     500:	b1 1d       	adc	r27, r1
     502:	80 93 2a 04 	sts	0x042A, r24
     506:	90 93 2b 04 	sts	0x042B, r25
     50a:	a0 93 2c 04 	sts	0x042C, r26
     50e:	b0 93 2d 04 	sts	0x042D, r27
     512:	13 c0       	rjmp	.+38     	; 0x53a <node_data_callback+0xbe>
		//printf("slot error[slot:%d,sender:%d]\r\n", slot, sender_node);
	}
	else{
		correct ++;
     514:	80 91 2e 04 	lds	r24, 0x042E
     518:	90 91 2f 04 	lds	r25, 0x042F
     51c:	a0 91 30 04 	lds	r26, 0x0430
     520:	b0 91 31 04 	lds	r27, 0x0431
     524:	01 96       	adiw	r24, 0x01	; 1
     526:	a1 1d       	adc	r26, r1
     528:	b1 1d       	adc	r27, r1
     52a:	80 93 2e 04 	sts	0x042E, r24
     52e:	90 93 2f 04 	sts	0x042F, r25
     532:	a0 93 30 04 	sts	0x0430, r26
     536:	b0 93 31 04 	sts	0x0431, r27
		//printf("slot correct\r\n");
	}
	if (!((failed + correct)%10))
     53a:	20 90 2a 04 	lds	r2, 0x042A
     53e:	30 90 2b 04 	lds	r3, 0x042B
     542:	40 90 2c 04 	lds	r4, 0x042C
     546:	50 90 2d 04 	lds	r5, 0x042D
     54a:	c0 90 2e 04 	lds	r12, 0x042E
     54e:	d0 90 2f 04 	lds	r13, 0x042F
     552:	e0 90 30 04 	lds	r14, 0x0430
     556:	f0 90 31 04 	lds	r15, 0x0431
     55a:	52 01       	movw	r10, r4
     55c:	41 01       	movw	r8, r2
     55e:	8c 0c       	add	r8, r12
     560:	9d 1c       	adc	r9, r13
     562:	ae 1c       	adc	r10, r14
     564:	bf 1c       	adc	r11, r15
     566:	c5 01       	movw	r24, r10
     568:	b4 01       	movw	r22, r8
     56a:	2a e0       	ldi	r18, 0x0A	; 10
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	50 e0       	ldi	r21, 0x00	; 0
     572:	0e 94 ca 29 	call	0x5394	; 0x5394 <__divmodsi4>
     576:	67 2b       	or	r22, r23
     578:	68 2b       	or	r22, r24
     57a:	69 2b       	or	r22, r25
     57c:	39 f5       	brne	.+78     	; 0x5cc <node_data_callback+0x150>
		printf("percentage correct:%ld, [c:%ld, f:%ld] press:%lu\r\n", 
     57e:	6f 92       	push	r6
     580:	7f 92       	push	r7
     582:	fa 81       	ldd	r31, Y+2	; 0x02
     584:	ff 93       	push	r31
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	8f 93       	push	r24
     58a:	5f 92       	push	r5
     58c:	4f 92       	push	r4
     58e:	3f 92       	push	r3
     590:	2f 92       	push	r2
     592:	ff 92       	push	r15
     594:	ef 92       	push	r14
     596:	df 92       	push	r13
     598:	cf 92       	push	r12
				(correct * 100)/(correct + failed), correct, failed, press);
     59a:	a4 e6       	ldi	r26, 0x64	; 100
     59c:	b0 e0       	ldi	r27, 0x00	; 0
     59e:	a7 01       	movw	r20, r14
     5a0:	96 01       	movw	r18, r12
     5a2:	0e 94 8d 29 	call	0x531a	; 0x531a <__muluhisi3>
	else{
		correct ++;
		//printf("slot correct\r\n");
	}
	if (!((failed + correct)%10))
		printf("percentage correct:%ld, [c:%ld, f:%ld] press:%lu\r\n", 
     5a6:	a5 01       	movw	r20, r10
     5a8:	94 01       	movw	r18, r8
     5aa:	0e 94 ca 29 	call	0x5394	; 0x5394 <__divmodsi4>
     5ae:	5f 93       	push	r21
     5b0:	4f 93       	push	r20
     5b2:	3f 93       	push	r19
     5b4:	2f 93       	push	r18
     5b6:	87 e6       	ldi	r24, 0x67	; 103
     5b8:	92 e0       	ldi	r25, 0x02	; 2
     5ba:	9f 93       	push	r25
     5bc:	8f 93       	push	r24
     5be:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <printf>
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	f8 94       	cli
     5c6:	de bf       	out	0x3e, r29	; 62
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	cd bf       	out	0x3d, r28	; 61

	//printf("{\"mac\":%d;\"temp\":%d}\r\n",
	//	data[0], *(uint16_t*)(data+1));
	
	
	nrk_led_toggle(GREEN_LED);
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	90 e0       	ldi	r25, 0x00	; 0
}
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	df 90       	pop	r13
     5e2:	cf 90       	pop	r12
     5e4:	bf 90       	pop	r11
     5e6:	af 90       	pop	r10
     5e8:	9f 90       	pop	r9
     5ea:	8f 90       	pop	r8
     5ec:	7f 90       	pop	r7
     5ee:	6f 90       	pop	r6
     5f0:	5f 90       	pop	r5
     5f2:	4f 90       	pop	r4
     5f4:	3f 90       	pop	r3
     5f6:	2f 90       	pop	r2

	//printf("{\"mac\":%d;\"temp\":%d}\r\n",
	//	data[0], *(uint16_t*)(data+1));
	
	
	nrk_led_toggle(GREEN_LED);
     5f8:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <nrk_led_toggle>

000005fc <main_disabled>:
void nrk_create_taskset();

void nrk_register_drivers();

int main_disabled() {
	nrk_setup_ports();
     5fc:	0e 94 b3 0c 	call	0x1966	; 0x1966 <nrk_setup_ports>
	nrk_setup_uart(UART_BAUDRATE_9K6);
     600:	8f ec       	ldi	r24, 0xCF	; 207
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 37 10 	call	0x206e	; 0x206e <nrk_setup_uart>
	
	nrk_init();
     608:	0e 94 09 11 	call	0x2212	; 0x2212 <nrk_init>
	
	printf("nrk starting...\r\n");
     60c:	8a e9       	ldi	r24, 0x9A	; 154
     60e:	92 e0       	ldi	r25, 0x02	; 2
     610:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <puts>
	
	nrk_led_clr(0);
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <nrk_led_clr>
	nrk_led_clr(1);
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <nrk_led_clr>
	nrk_led_clr(2);
     624:	82 e0       	ldi	r24, 0x02	; 2
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <nrk_led_clr>
	nrk_led_clr(3);
     62c:	83 e0       	ldi	r24, 0x03	; 3
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <nrk_led_clr>
	
	nrk_time_set(0, 0);
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	a9 01       	movw	r20, r18
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	cb 01       	movw	r24, r22
     640:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <nrk_time_set>
	flash_init(14);
     644:	8e e0       	ldi	r24, 0x0E	; 14
     646:	0e 94 a0 04 	call	0x940	; 0x940 <flash_init>
	flash_timer_setup();
     64a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <flash_timer_setup>

	//nrk_create_taskset();
	nrk_start();
     64e:	0e 94 ab 11 	call	0x2356	; 0x2356 <nrk_start>
	return 0;
}
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	08 95       	ret

00000658 <timer_3_callback>:
	return nrk_timer_int_start(timer);
}


/* this will overflow after 2^32uS (4000 seconds... 1h 6m 40s) */
void timer_3_callback(){
     658:	cf 92       	push	r12
     65a:	df 92       	push	r13
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
	DISABLE_GLOBAL_INT();
     666:	f8 94       	cli
     668:	f0 90 1c 07 	lds	r15, 0x071C
     66c:	00 91 1d 07 	lds	r16, 0x071D
     670:	10 91 1e 07 	lds	r17, 0x071E
     674:	d0 91 1f 07 	lds	r29, 0x071F
     678:	c0 91 20 07 	lds	r28, 0x0720
     67c:	b0 91 21 07 	lds	r27, 0x0721
     680:	f0 91 22 07 	lds	r31, 0x0722
     684:	e0 91 23 07 	lds	r30, 0x0723
	//current_time_ms += 1;
	while (TCNT3 > TICKS_PER_MS){
     688:	c0 90 94 00 	lds	r12, 0x0094
     68c:	d0 90 95 00 	lds	r13, 0x0095
     690:	2f 2d       	mov	r18, r15
     692:	30 2f       	mov	r19, r16
     694:	41 2f       	mov	r20, r17
     696:	5d 2f       	mov	r21, r29
     698:	6c 2f       	mov	r22, r28
     69a:	7b 2f       	mov	r23, r27
     69c:	8f 2f       	mov	r24, r31
     69e:	9e 2f       	mov	r25, r30
     6a0:	a1 e0       	ldi	r26, 0x01	; 1
     6a2:	0e 94 91 2a 	call	0x5522	; 0x5522 <__adddi3_s8>
     6a6:	a5 e7       	ldi	r26, 0x75	; 117
     6a8:	ca 16       	cp	r12, r26
     6aa:	af e3       	ldi	r26, 0x3F	; 63
     6ac:	da 06       	cpc	r13, r26
     6ae:	98 f0       	brcs	.+38     	; 0x6d6 <timer_3_callback+0x7e>
		TCNT3 -= TICKS_PER_MS;
     6b0:	e0 91 94 00 	lds	r30, 0x0094
     6b4:	f0 91 95 00 	lds	r31, 0x0095
     6b8:	e4 57       	subi	r30, 0x74	; 116
     6ba:	ff 43       	sbci	r31, 0x3F	; 63
     6bc:	f0 93 95 00 	sts	0x0095, r31
     6c0:	e0 93 94 00 	sts	0x0094, r30
     6c4:	f2 2e       	mov	r15, r18
     6c6:	03 2f       	mov	r16, r19
     6c8:	14 2f       	mov	r17, r20
     6ca:	d5 2f       	mov	r29, r21
     6cc:	c6 2f       	mov	r28, r22
     6ce:	b7 2f       	mov	r27, r23
     6d0:	f8 2f       	mov	r31, r24
     6d2:	e9 2f       	mov	r30, r25
     6d4:	d9 cf       	rjmp	.-78     	; 0x688 <timer_3_callback+0x30>
     6d6:	f0 92 1c 07 	sts	0x071C, r15
     6da:	00 93 1d 07 	sts	0x071D, r16
     6de:	10 93 1e 07 	sts	0x071E, r17
     6e2:	d0 93 1f 07 	sts	0x071F, r29
     6e6:	c0 93 20 07 	sts	0x0720, r28
     6ea:	b0 93 21 07 	sts	0x0721, r27
     6ee:	f0 93 22 07 	sts	0x0722, r31
     6f2:	e0 93 23 07 	sts	0x0723, r30
		current_time_ms += 1;
	}
	ENABLE_GLOBAL_INT();
     6f6:	78 94       	sei
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	ff 90       	pop	r15
     702:	df 90       	pop	r13
     704:	cf 90       	pop	r12
     706:	08 95       	ret

00000708 <rx_finished_callback>:

/* this will be called whenver flash listening is on */
void rx_finished_callback()
{
	//receive the packet
	nrk_led_set(ORANGE_LED);
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <nrk_led_set>
	flash_pkt_received = true;
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	80 93 0a 07 	sts	0x070A, r24
     716:	08 95       	ret

00000718 <nrk_time_compare>:

// return 1 if a > b
// return 0 if a == b
// return -1 if a < b
int8_t nrk_time_compare(nrk_time_t *a, nrk_time_t *b)
{
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	8c 01       	movw	r16, r24
     722:	eb 01       	movw	r28, r22
	nrk_time_compact_nanos(a);
     724:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <nrk_time_compact_nanos>
	nrk_time_compact_nanos(b);
     728:	ce 01       	movw	r24, r28
     72a:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <nrk_time_compact_nanos>
	if (a->secs > b->secs)
     72e:	f8 01       	movw	r30, r16
     730:	40 81       	ld	r20, Z
     732:	51 81       	ldd	r21, Z+1	; 0x01
     734:	62 81       	ldd	r22, Z+2	; 0x02
     736:	73 81       	ldd	r23, Z+3	; 0x03
     738:	88 81       	ld	r24, Y
     73a:	99 81       	ldd	r25, Y+1	; 0x01
     73c:	aa 81       	ldd	r26, Y+2	; 0x02
     73e:	bb 81       	ldd	r27, Y+3	; 0x03
     740:	84 17       	cp	r24, r20
     742:	95 07       	cpc	r25, r21
     744:	a6 07       	cpc	r26, r22
     746:	b7 07       	cpc	r27, r23
     748:	00 f1       	brcs	.+64     	; 0x78a <nrk_time_compare+0x72>
		return 1;
	if (a->secs < b->secs)
     74a:	48 17       	cp	r20, r24
     74c:	59 07       	cpc	r21, r25
     74e:	6a 07       	cpc	r22, r26
     750:	7b 07       	cpc	r23, r27
     752:	e8 f0       	brcs	.+58     	; 0x78e <nrk_time_compare+0x76>
		return -1;
	if (a->secs == b->secs)
     754:	48 17       	cp	r20, r24
     756:	59 07       	cpc	r21, r25
     758:	6a 07       	cpc	r22, r26
     75a:	7b 07       	cpc	r23, r27
     75c:	d1 f4       	brne	.+52     	; 0x792 <nrk_time_compare+0x7a>
	{
		if (a->nano_secs > b->nano_secs)
     75e:	04 81       	ldd	r16, Z+4	; 0x04
     760:	15 81       	ldd	r17, Z+5	; 0x05
     762:	26 81       	ldd	r18, Z+6	; 0x06
     764:	37 81       	ldd	r19, Z+7	; 0x07
     766:	4c 81       	ldd	r20, Y+4	; 0x04
     768:	5d 81       	ldd	r21, Y+5	; 0x05
     76a:	6e 81       	ldd	r22, Y+6	; 0x06
     76c:	7f 81       	ldd	r23, Y+7	; 0x07
int8_t nrk_time_compare(nrk_time_t *a, nrk_time_t *b)
{
	nrk_time_compact_nanos(a);
	nrk_time_compact_nanos(b);
	if (a->secs > b->secs)
		return 1;
     76e:	81 e0       	ldi	r24, 0x01	; 1
	if (a->secs < b->secs)
		return -1;
	if (a->secs == b->secs)
	{
		if (a->nano_secs > b->nano_secs)
     770:	40 17       	cp	r20, r16
     772:	51 07       	cpc	r21, r17
     774:	62 07       	cpc	r22, r18
     776:	73 07       	cpc	r23, r19
     778:	68 f0       	brcs	.+26     	; 0x794 <nrk_time_compare+0x7c>
			return 1;
		if (a->nano_secs < b->nano_secs)
     77a:	04 17       	cp	r16, r20
     77c:	15 07       	cpc	r17, r21
     77e:	26 07       	cpc	r18, r22
     780:	37 07       	cpc	r19, r23
     782:	08 f0       	brcs	.+2      	; 0x786 <nrk_time_compare+0x6e>
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	81 95       	neg	r24
     788:	05 c0       	rjmp	.+10     	; 0x794 <nrk_time_compare+0x7c>
int8_t nrk_time_compare(nrk_time_t *a, nrk_time_t *b)
{
	nrk_time_compact_nanos(a);
	nrk_time_compact_nanos(b);
	if (a->secs > b->secs)
		return 1;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	03 c0       	rjmp	.+6      	; 0x794 <nrk_time_compare+0x7c>
	if (a->secs < b->secs)
		return -1;
     78e:	8f ef       	ldi	r24, 0xFF	; 255
     790:	01 c0       	rjmp	.+2      	; 0x794 <nrk_time_compare+0x7c>
		if (a->nano_secs > b->nano_secs)
			return 1;
		if (a->nano_secs < b->nano_secs)
			return -1;
	}
	return 0;
     792:	80 e0       	ldi	r24, 0x00	; 0
}
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	08 95       	ret

0000079e <flash_msg_len_set>:

void flash_msg_len_set(uint16_t msg_len)
{
	flash_message_len = msg_len;
     79e:	90 93 bb 04 	sts	0x04BB, r25
     7a2:	80 93 ba 04 	sts	0x04BA, r24
     7a6:	08 95       	ret

000007a8 <flash_msg_len_get>:
}

uint16_t flash_msg_len_get()
{
	return flash_message_len;
}
     7a8:	80 91 ba 04 	lds	r24, 0x04BA
     7ac:	90 91 bb 04 	lds	r25, 0x04BB
     7b0:	08 95       	ret

000007b2 <flash_rf_power_set>:

int8_t flash_rf_power_set(uint8_t power)
{
	if (power>31) return NRK_ERROR;
     7b2:	80 32       	cpi	r24, 0x20	; 32
     7b4:	20 f4       	brcc	.+8      	; 0x7be <flash_rf_power_set+0xc>
	rf_tx_power(power);
     7b6:	0e 94 48 07 	call	0xe90	; 0xe90 <rf_tx_power>
	return NRK_OK;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	08 95       	ret
	return flash_message_len;
}

int8_t flash_rf_power_set(uint8_t power)
{
	if (power>31) return NRK_ERROR;
     7be:	8f ef       	ldi	r24, 0xFF	; 255
	rf_tx_power(power);
	return NRK_OK;
}
     7c0:	08 95       	ret

000007c2 <flash_err_count_reset>:

void flash_err_count_reset()
{
	flash_err_count = 0;
     7c2:	10 92 b6 04 	sts	0x04B6, r1
     7c6:	10 92 b7 04 	sts	0x04B7, r1
     7ca:	10 92 b8 04 	sts	0x04B8, r1
     7ce:	10 92 b9 04 	sts	0x04B9, r1
     7d2:	08 95       	ret

000007d4 <flash_err_count_get>:
}

uint32_t flash_err_count_get()
{
	return flash_err_count;
     7d4:	60 91 b6 04 	lds	r22, 0x04B6
     7d8:	70 91 b7 04 	lds	r23, 0x04B7
     7dc:	80 91 b8 04 	lds	r24, 0x04B8
     7e0:	90 91 b9 04 	lds	r25, 0x04B9
}
     7e4:	08 95       	ret

000007e6 <flash_tx_pkt>:

void flash_tx_pkt(uint8_t *buf, uint8_t len)
{
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	1f 92       	push	r1
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62
     7f4:	8c 01       	movw	r16, r24
	nrk_led_set(BLUE_LED);
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	69 83       	std	Y+1, r22	; 0x01
     7fc:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <nrk_led_set>
	flash_rfTxInfo.pPayload = buf;
     800:	e4 e2       	ldi	r30, 0x24	; 36
     802:	f7 e0       	ldi	r31, 0x07	; 7
     804:	14 83       	std	Z+4, r17	; 0x04
     806:	03 83       	std	Z+3, r16	; 0x03
	flash_rfTxInfo.length = len;
     808:	69 81       	ldd	r22, Y+1	; 0x01
     80a:	62 83       	std	Z+2, r22	; 0x02
	if(rf_tx_packet_blocking(&flash_rfTxInfo) == NRK_ERROR){
     80c:	cf 01       	movw	r24, r30
     80e:	0e 94 d7 08 	call	0x11ae	; 0x11ae <rf_tx_packet_blocking>
	if (rf_tx_packet_blocking(&flash_rfTxInfo) == NRK_ERROR){
		printf("ERROR: TX timed out\r\n");
	}
#endif
	
	nrk_led_clr(BLUE_LED);
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	90 e0       	ldi	r25, 0x00	; 0
}
     816:	0f 90       	pop	r0
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
	if (rf_tx_packet_blocking(&flash_rfTxInfo) == NRK_ERROR){
		printf("ERROR: TX timed out\r\n");
	}
#endif
	
	nrk_led_clr(BLUE_LED);
     820:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <nrk_led_clr>

00000824 <flash_tx_callback_set>:
}

void flash_tx_callback_set(void(*callback)(uint16_t, uint8_t *))
{
	//flash_tx_callback = callback;
	tx_start_callback(callback);
     824:	0c 94 8a 07 	jmp	0xf14	; 0xf14 <tx_start_callback>

00000828 <flash_run_tests>:
}

void flash_run_tests()
{
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	60 97       	sbiw	r28, 0x10	; 16
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
	bool bad = false;
	nrk_time_t t1, t2;
	t1.secs = 1;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	a0 e0       	ldi	r26, 0x00	; 0
     846:	b0 e0       	ldi	r27, 0x00	; 0
     848:	89 87       	std	Y+9, r24	; 0x09
     84a:	9a 87       	std	Y+10, r25	; 0x0a
     84c:	ab 87       	std	Y+11, r26	; 0x0b
     84e:	bc 87       	std	Y+12, r27	; 0x0c
	t2.secs = 2;
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	a0 e0       	ldi	r26, 0x00	; 0
     856:	b0 e0       	ldi	r27, 0x00	; 0
     858:	89 83       	std	Y+1, r24	; 0x01
     85a:	9a 83       	std	Y+2, r25	; 0x02
     85c:	ab 83       	std	Y+3, r26	; 0x03
     85e:	bc 83       	std	Y+4, r27	; 0x04
	if (nrk_time_compare(&t1, &t2) != -1)
     860:	be 01       	movw	r22, r28
     862:	6f 5f       	subi	r22, 0xFF	; 255
     864:	7f 4f       	sbci	r23, 0xFF	; 255
     866:	ce 01       	movw	r24, r28
     868:	09 96       	adiw	r24, 0x09	; 9
     86a:	0e 94 8c 03 	call	0x718	; 0x718 <nrk_time_compare>
     86e:	08 2f       	mov	r16, r24
		bad = true;
	if (nrk_time_compare(&t2, &t1) != 1)
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	ce 01       	movw	r24, r28
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	0e 94 8c 03 	call	0x718	; 0x718 <nrk_time_compare>
		bad = true;
     87e:	11 e0       	ldi	r17, 0x01	; 1
	nrk_time_t t1, t2;
	t1.secs = 1;
	t2.secs = 2;
	if (nrk_time_compare(&t1, &t2) != -1)
		bad = true;
	if (nrk_time_compare(&t2, &t1) != 1)
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	19 f4       	brne	.+6      	; 0x88a <flash_run_tests+0x62>
{
	bool bad = false;
	nrk_time_t t1, t2;
	t1.secs = 1;
	t2.secs = 2;
	if (nrk_time_compare(&t1, &t2) != -1)
     884:	0f 3f       	cpi	r16, 0xFF	; 255
     886:	09 f4       	brne	.+2      	; 0x88a <flash_run_tests+0x62>
     888:	10 e0       	ldi	r17, 0x00	; 0
		bad = true;
	if (nrk_time_compare(&t2, &t1) != 1)
		bad = true;
	t2.secs = 1;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	a0 e0       	ldi	r26, 0x00	; 0
     890:	b0 e0       	ldi	r27, 0x00	; 0
     892:	89 83       	std	Y+1, r24	; 0x01
     894:	9a 83       	std	Y+2, r25	; 0x02
     896:	ab 83       	std	Y+3, r26	; 0x03
     898:	bc 83       	std	Y+4, r27	; 0x04
	t1.nano_secs = 30;
     89a:	8e e1       	ldi	r24, 0x1E	; 30
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	a0 e0       	ldi	r26, 0x00	; 0
     8a0:	b0 e0       	ldi	r27, 0x00	; 0
     8a2:	8d 87       	std	Y+13, r24	; 0x0d
     8a4:	9e 87       	std	Y+14, r25	; 0x0e
     8a6:	af 87       	std	Y+15, r26	; 0x0f
     8a8:	b8 8b       	std	Y+16, r27	; 0x10
	t2.nano_secs = 31;
     8aa:	8f e1       	ldi	r24, 0x1F	; 31
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	a0 e0       	ldi	r26, 0x00	; 0
     8b0:	b0 e0       	ldi	r27, 0x00	; 0
     8b2:	8d 83       	std	Y+5, r24	; 0x05
     8b4:	9e 83       	std	Y+6, r25	; 0x06
     8b6:	af 83       	std	Y+7, r26	; 0x07
     8b8:	b8 87       	std	Y+8, r27	; 0x08
	if (nrk_time_compare(&t1, &t2) != -1)
     8ba:	be 01       	movw	r22, r28
     8bc:	6f 5f       	subi	r22, 0xFF	; 255
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	ce 01       	movw	r24, r28
     8c2:	09 96       	adiw	r24, 0x09	; 9
     8c4:	0e 94 8c 03 	call	0x718	; 0x718 <nrk_time_compare>
     8c8:	8f 3f       	cpi	r24, 0xFF	; 255
     8ca:	09 f0       	breq	.+2      	; 0x8ce <flash_run_tests+0xa6>
		bad = true;
     8cc:	11 e0       	ldi	r17, 0x01	; 1
	if (nrk_time_compare(&t2, &t1) != 1)
     8ce:	be 01       	movw	r22, r28
     8d0:	67 5f       	subi	r22, 0xF7	; 247
     8d2:	7f 4f       	sbci	r23, 0xFF	; 255
     8d4:	ce 01       	movw	r24, r28
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	0e 94 8c 03 	call	0x718	; 0x718 <nrk_time_compare>
     8dc:	81 30       	cpi	r24, 0x01	; 1
     8de:	09 f0       	breq	.+2      	; 0x8e2 <flash_run_tests+0xba>
		bad = true;
     8e0:	11 e0       	ldi	r17, 0x01	; 1
	t2.nano_secs = 30;
     8e2:	8e e1       	ldi	r24, 0x1E	; 30
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	8d 83       	std	Y+5, r24	; 0x05
     8ec:	9e 83       	std	Y+6, r25	; 0x06
     8ee:	af 83       	std	Y+7, r26	; 0x07
     8f0:	b8 87       	std	Y+8, r27	; 0x08
	if (nrk_time_compare(&t1, &t2) != 0)
     8f2:	be 01       	movw	r22, r28
     8f4:	6f 5f       	subi	r22, 0xFF	; 255
     8f6:	7f 4f       	sbci	r23, 0xFF	; 255
     8f8:	ce 01       	movw	r24, r28
     8fa:	09 96       	adiw	r24, 0x09	; 9
     8fc:	0e 94 8c 03 	call	0x718	; 0x718 <nrk_time_compare>
     900:	81 11       	cpse	r24, r1
		bad = true;
     902:	11 e0       	ldi	r17, 0x01	; 1
	if (nrk_time_compare(&t2, &t1) != 0)
     904:	be 01       	movw	r22, r28
     906:	67 5f       	subi	r22, 0xF7	; 247
     908:	7f 4f       	sbci	r23, 0xFF	; 255
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	0e 94 8c 03 	call	0x718	; 0x718 <nrk_time_compare>
     912:	81 11       	cpse	r24, r1
     914:	02 c0       	rjmp	.+4      	; 0x91a <flash_run_tests+0xf2>
		bad = true;
	if (bad){
     916:	11 23       	and	r17, r17
     918:	41 f0       	breq	.+16     	; 0x92a <flash_run_tests+0x102>
		printf("time compare error\r\n");
     91a:	86 e0       	ldi	r24, 0x06	; 6
     91c:	93 e0       	ldi	r25, 0x03	; 3
     91e:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <puts>
		exit(1);
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <_exit>
	}
}
     92a:	60 96       	adiw	r28, 0x10	; 16
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	de bf       	out	0x3e, r29	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	cd bf       	out	0x3d, r28	; 61
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	08 95       	ret

00000940 <flash_init>:

int8_t flash_init (uint8_t chan)
{	
     940:	cf 93       	push	r28
     942:	c8 2f       	mov	r28, r24
	// tests to ensure proper performance of sub-modules
#ifdef DEBUG 
	flash_run_tests(); 
     944:	0e 94 14 04 	call	0x828	; 0x828 <flash_run_tests>
#endif
	// 16 byte payload and 1 byte header for flash id and re tx number
	flash_message_len = RF_MAX_PAYLOAD_SIZE;
     948:	84 e7       	ldi	r24, 0x74	; 116
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	90 93 bb 04 	sts	0x04BB, r25
     950:	80 93 ba 04 	sts	0x04BA, r24
	
	flash_err_count = 0;
     954:	10 92 b6 04 	sts	0x04B6, r1
     958:	10 92 b7 04 	sts	0x04B7, r1
     95c:	10 92 b8 04 	sts	0x04B8, r1
     960:	10 92 b9 04 	sts	0x04B9, r1
	flash_rfRxInfo.pPayload = flash_buf;
     964:	ee ef       	ldi	r30, 0xFE	; 254
     966:	f6 e0       	ldi	r31, 0x06	; 6
     968:	83 e3       	ldi	r24, 0x33	; 51
     96a:	94 e0       	ldi	r25, 0x04	; 4
     96c:	96 83       	std	Z+6, r25	; 0x06
     96e:	85 83       	std	Z+5, r24	; 0x05
	flash_rfRxInfo.max_length = RF_MAX_PAYLOAD_SIZE;
     970:	84 e7       	ldi	r24, 0x74	; 116
     972:	84 83       	std	Z+4, r24	; 0x04
	flash_rfRxInfo.ackRequest = 0;
     974:	17 82       	std	Z+7, r1	; 0x07
	
	flash_rfTxInfo.ackRequest = 0;
     976:	e4 e2       	ldi	r30, 0x24	; 36
     978:	f7 e0       	ldi	r31, 0x07	; 7
     97a:	16 82       	std	Z+6, r1	; 0x06
	flash_rfTxInfo.destAddr = 0;
     97c:	11 82       	std	Z+1, r1	; 0x01
     97e:	10 82       	st	Z, r1
	flash_rfTxInfo.cca = 0;
     980:	15 82       	std	Z+5, r1	; 0x05

	//set callback functions for start and end of packet reception
	rx_start_callback(rx_started_callback);
     982:	82 eb       	ldi	r24, 0xB2	; 178
     984:	95 e0       	ldi	r25, 0x05	; 5
     986:	0e 94 80 07 	call	0xf00	; 0xf00 <rx_start_callback>
	rx_end_callback(rx_finished_callback);
     98a:	84 e8       	ldi	r24, 0x84	; 132
     98c:	93 e0       	ldi	r25, 0x03	; 3
     98e:	0e 94 85 07 	call	0xf0a	; 0xf0a <rx_end_callback>
    
	rf_power_up();
     992:	0e 94 2f 07 	call	0xe5e	; 0xe5e <rf_power_up>
	rf_init (&flash_rfRxInfo, chan, 0xffff, 0);
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	4f ef       	ldi	r20, 0xFF	; 255
     99c:	5f ef       	ldi	r21, 0xFF	; 255
     99e:	6c 2f       	mov	r22, r28
     9a0:	8e ef       	ldi	r24, 0xFE	; 254
     9a2:	96 e0       	ldi	r25, 0x06	; 6
     9a4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <rf_init>
	nrk_int_enable();
     9a8:	0e 94 04 11 	call	0x2208	; 0x2208 <nrk_int_enable>

	// Setup channel number
	flash_chan = chan;
     9ac:	c0 93 b5 04 	sts	0x04B5, r28
	flash_started = 1;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	80 93 b3 04 	sts	0x04B3, r24
	auto_re_tx = 1;
     9b6:	80 93 0b 07 	sts	0x070B, r24
    return NRK_OK;
}
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <flash_set_retransmit>:

void flash_set_retransmit(uint8_t retransmit_flag){
	auto_re_tx = retransmit_flag;
     9be:	80 93 0b 07 	sts	0x070B, r24
     9c2:	08 95       	ret

000009c4 <flash_timer_setup>:

/* reset current time in microseconds and initialize the timer interrupt */
uint8_t flash_timer_setup(){
	uint8_t timer = NRK_APP_TIMER_0;

	current_time_ms = 0;
     9c4:	10 92 1c 07 	sts	0x071C, r1
     9c8:	10 92 1d 07 	sts	0x071D, r1
     9cc:	10 92 1e 07 	sts	0x071E, r1
     9d0:	10 92 1f 07 	sts	0x071F, r1
     9d4:	10 92 20 07 	sts	0x0720, r1
     9d8:	10 92 21 07 	sts	0x0721, r1
     9dc:	10 92 22 07 	sts	0x0722, r1
     9e0:	10 92 23 07 	sts	0x0723, r1
	/* inc counter every ms */
	/* use 0x3E80 for 16MHz */
	/* 0x3F12 experimentally returns correct result when compared to nrk_spin_wait_us()*/
	if (nrk_timer_int_configure(timer, 1, TICKS_PER_MS, timer_3_callback) != NRK_OK)
     9e4:	2c e2       	ldi	r18, 0x2C	; 44
     9e6:	33 e0       	ldi	r19, 0x03	; 3
     9e8:	44 e7       	ldi	r20, 0x74	; 116
     9ea:	5f e3       	ldi	r21, 0x3F	; 63
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	0e 94 18 24 	call	0x4830	; 0x4830 <nrk_timer_int_configure>
     9f6:	81 30       	cpi	r24, 0x01	; 1
     9f8:	19 f4       	brne	.+6      	; 0xa00 <flash_timer_setup+0x3c>
		return NRK_ERROR;
	return nrk_timer_int_start(timer);
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	0c 94 0f 24 	jmp	0x481e	; 0x481e <nrk_timer_int_start>
}
     a00:	8f ef       	ldi	r24, 0xFF	; 255
     a02:	08 95       	ret

00000a04 <flash_get_current_time>:
		current_time_ms += 1;
	}
	ENABLE_GLOBAL_INT();
}

uint64_t flash_get_current_time(){
     a04:	2f 92       	push	r2
     a06:	3f 92       	push	r3
     a08:	4f 92       	push	r4
     a0a:	5f 92       	push	r5
     a0c:	6f 92       	push	r6
     a0e:	7f 92       	push	r7
     a10:	8f 92       	push	r8
     a12:	9f 92       	push	r9
     a14:	af 92       	push	r10
     a16:	bf 92       	push	r11
     a18:	cf 92       	push	r12
     a1a:	df 92       	push	r13
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	29 97       	sbiw	r28, 0x09	; 9
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
	DISABLE_GLOBAL_INT();
     a38:	f8 94       	cli
	uint32_t orig_ticks = TCNT3;
     a3a:	40 90 94 00 	lds	r4, 0x0094
     a3e:	50 90 95 00 	lds	r5, 0x0095
     a42:	61 2c       	mov	r6, r1
     a44:	71 2c       	mov	r7, r1
	uint64_t orig_ms = current_time_ms;
     a46:	80 90 1c 07 	lds	r8, 0x071C
     a4a:	90 90 1d 07 	lds	r9, 0x071D
     a4e:	e0 91 1e 07 	lds	r30, 0x071E
     a52:	30 90 1f 07 	lds	r3, 0x071F
     a56:	b0 91 20 07 	lds	r27, 0x0720
     a5a:	a0 91 21 07 	lds	r26, 0x0721
     a5e:	20 90 22 07 	lds	r2, 0x0722
     a62:	f0 91 23 07 	lds	r31, 0x0723
	uint8_t extra = 0;
     a66:	20 e0       	ldi	r18, 0x00	; 0
	while (TCNT3 > TICKS_PER_MS){
     a68:	80 91 94 00 	lds	r24, 0x0094
     a6c:	90 91 95 00 	lds	r25, 0x0095
     a70:	85 37       	cpi	r24, 0x75	; 117
     a72:	9f 43       	sbci	r25, 0x3F	; 63
     a74:	60 f0       	brcs	.+24     	; 0xa8e <flash_get_current_time+0x8a>
		TCNT3 -= TICKS_PER_MS;
     a76:	80 91 94 00 	lds	r24, 0x0094
     a7a:	90 91 95 00 	lds	r25, 0x0095
     a7e:	84 57       	subi	r24, 0x74	; 116
     a80:	9f 43       	sbci	r25, 0x3F	; 63
     a82:	90 93 95 00 	sts	0x0095, r25
     a86:	80 93 94 00 	sts	0x0094, r24
		//current_time_ms += 1;
		extra++;
     a8a:	2f 5f       	subi	r18, 0xFF	; 255
     a8c:	ed cf       	rjmp	.-38     	; 0xa68 <flash_get_current_time+0x64>
	}
	current_time_ms += extra;
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	40 e0       	ldi	r20, 0x00	; 0
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	54 01       	movw	r10, r8
     a9e:	ce 2e       	mov	r12, r30
     aa0:	d3 2c       	mov	r13, r3
     aa2:	eb 2e       	mov	r14, r27
     aa4:	fa 2e       	mov	r15, r26
     aa6:	02 2d       	mov	r16, r2
     aa8:	1f 2f       	mov	r17, r31
     aaa:	0e 94 88 2a 	call	0x5510	; 0x5510 <__adddi3>
     aae:	20 93 1c 07 	sts	0x071C, r18
     ab2:	30 93 1d 07 	sts	0x071D, r19
     ab6:	40 93 1e 07 	sts	0x071E, r20
     aba:	50 93 1f 07 	sts	0x071F, r21
     abe:	60 93 20 07 	sts	0x0720, r22
     ac2:	70 93 21 07 	sts	0x0721, r23
     ac6:	80 93 22 07 	sts	0x0722, r24
     aca:	90 93 23 07 	sts	0x0723, r25
	//uint64_t ticks = current_time_ms;
	//uint32_t offset_ticks = TCNT3;
	ENABLE_GLOBAL_INT();
     ace:	78 94       	sei
	//return (ticks * 1000) + (offset_ticks >> 4);
	return (orig_ms * 1000) + (orig_ticks >> 4);
     ad0:	84 e0       	ldi	r24, 0x04	; 4
     ad2:	76 94       	lsr	r7
     ad4:	67 94       	ror	r6
     ad6:	57 94       	ror	r5
     ad8:	47 94       	ror	r4
     ada:	8a 95       	dec	r24
     adc:	d1 f7       	brne	.-12     	; 0xad2 <flash_get_current_time+0xce>
     ade:	a3 01       	movw	r20, r6
     ae0:	92 01       	movw	r18, r4
     ae2:	49 82       	std	Y+1, r4	; 0x01
     ae4:	3a 83       	std	Y+2, r19	; 0x02
     ae6:	4b 83       	std	Y+3, r20	; 0x03
     ae8:	5c 83       	std	Y+4, r21	; 0x04
     aea:	94 01       	movw	r18, r8
     aec:	4e 2f       	mov	r20, r30
     aee:	53 2d       	mov	r21, r3
     af0:	6b 2f       	mov	r22, r27
     af2:	7a 2f       	mov	r23, r26
     af4:	82 2d       	mov	r24, r2
     af6:	9f 2f       	mov	r25, r31
     af8:	06 e0       	ldi	r16, 0x06	; 6
     afa:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__ashldi3>
     afe:	02 2d       	mov	r16, r2
     b00:	0e 94 9d 2a 	call	0x553a	; 0x553a <__subdi3>
     b04:	01 e0       	ldi	r16, 0x01	; 1
     b06:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__ashldi3>
     b0a:	02 2d       	mov	r16, r2
     b0c:	0e 94 9d 2a 	call	0x553a	; 0x553a <__subdi3>
     b10:	03 e0       	ldi	r16, 0x03	; 3
     b12:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__ashldi3>
     b16:	59 01       	movw	r10, r18
     b18:	6a 01       	movw	r12, r20
     b1a:	7b 01       	movw	r14, r22
     b1c:	8c 01       	movw	r16, r24
     b1e:	29 81       	ldd	r18, Y+1	; 0x01
     b20:	3a 81       	ldd	r19, Y+2	; 0x02
     b22:	4b 81       	ldd	r20, Y+3	; 0x03
     b24:	5c 81       	ldd	r21, Y+4	; 0x04
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 88 2a 	call	0x5510	; 0x5510 <__adddi3>
}
     b32:	29 96       	adiw	r28, 0x09	; 9
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	ff 90       	pop	r15
     b48:	ef 90       	pop	r14
     b4a:	df 90       	pop	r13
     b4c:	cf 90       	pop	r12
     b4e:	bf 90       	pop	r11
     b50:	af 90       	pop	r10
     b52:	9f 90       	pop	r9
     b54:	8f 90       	pop	r8
     b56:	7f 90       	pop	r7
     b58:	6f 90       	pop	r6
     b5a:	5f 90       	pop	r5
     b5c:	4f 90       	pop	r4
     b5e:	3f 90       	pop	r3
     b60:	2f 90       	pop	r2
     b62:	08 95       	ret

00000b64 <rx_started_callback>:
}
*/
void rx_started_callback()
{
	//printf("received packet\r\n");
	last_rx_time = flash_get_current_time();
     b64:	0e 94 02 05 	call	0xa04	; 0xa04 <flash_get_current_time>
     b68:	20 93 0c 07 	sts	0x070C, r18
     b6c:	30 93 0d 07 	sts	0x070D, r19
     b70:	40 93 0e 07 	sts	0x070E, r20
     b74:	50 93 0f 07 	sts	0x070F, r21
     b78:	60 93 10 07 	sts	0x0710, r22
     b7c:	70 93 11 07 	sts	0x0711, r23
     b80:	80 93 12 07 	sts	0x0712, r24
     b84:	90 93 13 07 	sts	0x0713, r25
     b88:	08 95       	ret

00000b8a <flash_enable>:
	auto_re_tx = retransmit_flag;
}

void 
flash_enable(uint8_t msg_len, uint64_t *timeout, void (*edit_buf)(uint8_t *buf, uint64_t rcv_time))
{
     b8a:	4f 92       	push	r4
     b8c:	5f 92       	push	r5
     b8e:	6f 92       	push	r6
     b90:	7f 92       	push	r7
     b92:	8f 92       	push	r8
     b94:	9f 92       	push	r9
     b96:	af 92       	push	r10
     b98:	bf 92       	push	r11
     b9a:	cf 92       	push	r12
     b9c:	df 92       	push	r13
     b9e:	ef 92       	push	r14
     ba0:	ff 92       	push	r15
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	18 2f       	mov	r17, r24
     bac:	eb 01       	movw	r28, r22
     bae:	4a 01       	movw	r8, r20
	//uint8_t flash_rx_buf[FLASH_MAX_PKT_LEN];
	uint64_t timeout_time;//0xFFFFFFFFFFFFFFFF;

	nrk_led_set(ORANGE_LED);
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <nrk_led_set>
	is_enabled=1;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	80 93 b4 04 	sts	0x04B4, r24
	flash_pkt_received = 0;
     bbe:	10 92 0a 07 	sts	0x070A, r1
	flash_message_len = msg_len;
     bc2:	81 2f       	mov	r24, r17
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	90 93 bb 04 	sts	0x04BB, r25
     bca:	80 93 ba 04 	sts	0x04BA, r24


	user_rx_callback = edit_buf;
     bce:	90 92 17 07 	sts	0x0717, r9
     bd2:	80 92 16 07 	sts	0x0716, r8
	nrk_int_enable();
     bd6:	0e 94 04 11 	call	0x2208	; 0x2208 <nrk_int_enable>
	rf_rx_on();
     bda:	0e 94 ff 07 	call	0xffe	; 0xffe <rf_rx_on>
	
	//gets most recently received buffer and puts rx data into falsh_rfRxInfo
	uint8_t resp;
	if (timeout != NULL){
     bde:	20 97       	sbiw	r28, 0x00	; 0
     be0:	a9 f1       	breq	.+106    	; 0xc4c <flash_enable+0xc2>
		timeout_time = flash_get_current_time() + *timeout;
     be2:	0e 94 02 05 	call	0xa04	; 0xa04 <flash_get_current_time>
     be6:	a8 80       	ld	r10, Y
     be8:	b9 80       	ldd	r11, Y+1	; 0x01
     bea:	ca 80       	ldd	r12, Y+2	; 0x02
     bec:	db 80       	ldd	r13, Y+3	; 0x03
     bee:	ec 80       	ldd	r14, Y+4	; 0x04
     bf0:	fd 80       	ldd	r15, Y+5	; 0x05
     bf2:	0e 81       	ldd	r16, Y+6	; 0x06
     bf4:	1f 81       	ldd	r17, Y+7	; 0x07
     bf6:	0e 94 88 2a 	call	0x5510	; 0x5510 <__adddi3>
     bfa:	e9 01       	movw	r28, r18
     bfc:	94 2e       	mov	r9, r20
     bfe:	85 2e       	mov	r8, r21
     c00:	76 2e       	mov	r7, r22
     c02:	67 2e       	mov	r6, r23
     c04:	58 2e       	mov	r5, r24
     c06:	49 2e       	mov	r4, r25
		while (!flash_pkt_received){
     c08:	e0 91 0a 07 	lds	r30, 0x070A
     c0c:	e1 11       	cpse	r30, r1
     c0e:	22 c0       	rjmp	.+68     	; 0xc54 <flash_enable+0xca>
			if (flash_get_current_time() > timeout_time){
     c10:	0e 94 02 05 	call	0xa04	; 0xa04 <flash_get_current_time>
     c14:	5e 01       	movw	r10, r28
     c16:	c9 2c       	mov	r12, r9
     c18:	d8 2c       	mov	r13, r8
     c1a:	e7 2c       	mov	r14, r7
     c1c:	f6 2c       	mov	r15, r6
     c1e:	05 2d       	mov	r16, r5
     c20:	14 2d       	mov	r17, r4
     c22:	0e 94 a6 2a 	call	0x554c	; 0x554c <__cmpdi2>
     c26:	81 f3       	breq	.-32     	; 0xc08 <flash_enable+0x7e>
     c28:	78 f3       	brcs	.-34     	; 0xc08 <flash_enable+0x7e>
		*/
		flash_tx_pkt(flash_buf, flash_message_len);
		nrk_led_clr(BLUE_LED);
	}
	nrk_int_enable();
}
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	df 90       	pop	r13
     c38:	cf 90       	pop	r12
     c3a:	bf 90       	pop	r11
     c3c:	af 90       	pop	r10
     c3e:	9f 90       	pop	r9
     c40:	8f 90       	pop	r8
     c42:	7f 90       	pop	r7
     c44:	6f 90       	pop	r6
     c46:	5f 90       	pop	r5
     c48:	4f 90       	pop	r4
     c4a:	08 95       	ret
				return;
			}
		}
	}
	else {
		while(!flash_pkt_received);
     c4c:	80 91 0a 07 	lds	r24, 0x070A
     c50:	88 23       	and	r24, r24
     c52:	e1 f3       	breq	.-8      	; 0xc4c <flash_enable+0xc2>

	/*if (!flash_pkt_received)
	  printf("failed to correctly receive nonblocking packet\r\n");
*/
	//ensure that rf rx if off after message has been received
	resp = rf_rx_packet_nonblock();
     c54:	0e 94 28 09 	call	0x1250	; 0x1250 <rf_rx_packet_nonblock>
	/*
	if (resp == 0)
		printf("packet incorrectly received\r\n");
*/
	rf_rx_off();
     c58:	0e 94 05 08 	call	0x100a	; 0x100a <rf_rx_off>
	nrk_int_disable();
     c5c:	0e 94 02 11 	call	0x2204	; 0x2204 <nrk_int_disable>
	
	//get metadata about received packet
	//printf("received buffer of length %d\r\n", flash_rfRxInfo.length);
	//printf("buffer[0] = %d, buffer[1:5] = %u\r\n", flash_rx_buf[0], flash_rx_buf[4]);
	flash_message_len = flash_rfRxInfo.length;
     c60:	80 91 01 07 	lds	r24, 0x0701
     c64:	99 27       	eor	r25, r25
     c66:	87 fd       	sbrc	r24, 7
     c68:	90 95       	com	r25
     c6a:	90 93 bb 04 	sts	0x04BB, r25
     c6e:	80 93 ba 04 	sts	0x04BA, r24
	//memcpy(flash_rx_buf, flash_rfRxInfo.pPayload, flash_rfRxInfo.length);
	//memset(flash_rfRxInfo.pPayload, 0, flash_rfRxInfo.length);
	//flash_buf = flash_rfRxInfo.pPayload;

	//call user callback function on buffer
	if (user_rx_callback != NULL)
     c72:	e0 91 16 07 	lds	r30, 0x0716
     c76:	f0 91 17 07 	lds	r31, 0x0717
     c7a:	30 97       	sbiw	r30, 0x00	; 0
     c7c:	99 f0       	breq	.+38     	; 0xca4 <flash_enable+0x11a>
		user_rx_callback(flash_buf, last_rx_time);
     c7e:	00 91 0c 07 	lds	r16, 0x070C
     c82:	10 91 0d 07 	lds	r17, 0x070D
     c86:	20 91 0e 07 	lds	r18, 0x070E
     c8a:	30 91 0f 07 	lds	r19, 0x070F
     c8e:	40 91 10 07 	lds	r20, 0x0710
     c92:	50 91 11 07 	lds	r21, 0x0711
     c96:	60 91 12 07 	lds	r22, 0x0712
     c9a:	70 91 13 07 	lds	r23, 0x0713
     c9e:	83 e3       	ldi	r24, 0x33	; 51
     ca0:	94 e0       	ldi	r25, 0x04	; 4
     ca2:	09 95       	icall
	nrk_led_clr(ORANGE_LED);
     ca4:	82 e0       	ldi	r24, 0x02	; 2
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <nrk_led_clr>

	if (auto_re_tx){
     cac:	80 91 0b 07 	lds	r24, 0x070B
     cb0:	88 23       	and	r24, r24
     cb2:	71 f0       	breq	.+28     	; 0xcd0 <flash_enable+0x146>
		//re transmission of packet
		nrk_led_set(BLUE_LED);
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <nrk_led_set>
		flash_rfTxInfo.cca = 0;
		//if (flash_tx_callback != NULL)
		//flash_tx_callback(flash_message_len, flash_buf);
		//rf_tx_packet(&flash_rfTxInfo);
		*/
		flash_tx_pkt(flash_buf, flash_message_len);
     cbc:	60 91 ba 04 	lds	r22, 0x04BA
     cc0:	83 e3       	ldi	r24, 0x33	; 51
     cc2:	94 e0       	ldi	r25, 0x04	; 4
     cc4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <flash_tx_pkt>
		nrk_led_clr(BLUE_LED);
     cc8:	83 e0       	ldi	r24, 0x03	; 3
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <nrk_led_clr>
	}
	nrk_int_enable();
}
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	1f 91       	pop	r17
     cd6:	0f 91       	pop	r16
     cd8:	ff 90       	pop	r15
     cda:	ef 90       	pop	r14
     cdc:	df 90       	pop	r13
     cde:	cf 90       	pop	r12
     ce0:	bf 90       	pop	r11
     ce2:	af 90       	pop	r10
     ce4:	9f 90       	pop	r9
     ce6:	8f 90       	pop	r8
     ce8:	7f 90       	pop	r7
     cea:	6f 90       	pop	r6
     cec:	5f 90       	pop	r5
     cee:	4f 90       	pop	r4
		//rf_tx_packet(&flash_rfTxInfo);
		*/
		flash_tx_pkt(flash_buf, flash_message_len);
		nrk_led_clr(BLUE_LED);
	}
	nrk_int_enable();
     cf0:	0c 94 04 11 	jmp	0x2208	; 0x2208 <nrk_int_enable>

00000cf4 <flash_set_time>:
	ENABLE_GLOBAL_INT();
	//return (ticks * 1000) + (offset_ticks >> 4);
	return (orig_ms * 1000) + (orig_ticks >> 4);
}

void flash_set_time(uint64_t current_time){
     cf4:	4f 92       	push	r4
     cf6:	5f 92       	push	r5
     cf8:	6f 92       	push	r6
     cfa:	7f 92       	push	r7
     cfc:	8f 92       	push	r8
     cfe:	9f 92       	push	r9
     d00:	af 92       	push	r10
     d02:	bf 92       	push	r11
     d04:	cf 92       	push	r12
     d06:	df 92       	push	r13
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	29 01       	movw	r4, r18
     d16:	3a 01       	movw	r6, r20
     d18:	d6 2f       	mov	r29, r22
     d1a:	c7 2f       	mov	r28, r23
     d1c:	4c 01       	movw	r8, r24
	DISABLE_GLOBAL_INT();
     d1e:	f8 94       	cli
	current_time_ms = current_time/1000;
     d20:	88 ee       	ldi	r24, 0xE8	; 232
     d22:	a8 2e       	mov	r10, r24
     d24:	93 e0       	ldi	r25, 0x03	; 3
     d26:	b9 2e       	mov	r11, r25
     d28:	c1 2c       	mov	r12, r1
     d2a:	d1 2c       	mov	r13, r1
     d2c:	e1 2c       	mov	r14, r1
     d2e:	f1 2c       	mov	r15, r1
     d30:	00 e0       	ldi	r16, 0x00	; 0
     d32:	10 e0       	ldi	r17, 0x00	; 0
     d34:	c4 01       	movw	r24, r8
     d36:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <__udivdi3>
     d3a:	20 93 1c 07 	sts	0x071C, r18
     d3e:	30 93 1d 07 	sts	0x071D, r19
     d42:	40 93 1e 07 	sts	0x071E, r20
     d46:	50 93 1f 07 	sts	0x071F, r21
     d4a:	60 93 20 07 	sts	0x0720, r22
     d4e:	70 93 21 07 	sts	0x0721, r23
     d52:	80 93 22 07 	sts	0x0722, r24
     d56:	90 93 23 07 	sts	0x0723, r25
	TCNT3 = (current_time % 1000) * 16;
     d5a:	92 01       	movw	r18, r4
     d5c:	a3 01       	movw	r20, r6
     d5e:	6d 2f       	mov	r22, r29
     d60:	7c 2f       	mov	r23, r28
     d62:	c4 01       	movw	r24, r8
     d64:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <__umoddi3>
     d68:	49 01       	movw	r8, r18
     d6a:	24 e0       	ldi	r18, 0x04	; 4
     d6c:	88 0c       	add	r8, r8
     d6e:	99 1c       	adc	r9, r9
     d70:	2a 95       	dec	r18
     d72:	e1 f7       	brne	.-8      	; 0xd6c <flash_set_time+0x78>
     d74:	90 92 95 00 	sts	0x0095, r9
     d78:	80 92 94 00 	sts	0x0094, r8
	ENABLE_GLOBAL_INT();
     d7c:	78 94       	sei
}
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	ff 90       	pop	r15
     d88:	ef 90       	pop	r14
     d8a:	df 90       	pop	r13
     d8c:	cf 90       	pop	r12
     d8e:	bf 90       	pop	r11
     d90:	af 90       	pop	r10
     d92:	9f 90       	pop	r9
     d94:	8f 90       	pop	r8
     d96:	7f 90       	pop	r7
     d98:	6f 90       	pop	r6
     d9a:	5f 90       	pop	r5
     d9c:	4f 90       	pop	r4
     d9e:	08 95       	ret

00000da0 <flash_reset_timer>:

void flash_reset_timer(){
	current_time_ms = 0;
     da0:	10 92 1c 07 	sts	0x071C, r1
     da4:	10 92 1d 07 	sts	0x071D, r1
     da8:	10 92 1e 07 	sts	0x071E, r1
     dac:	10 92 1f 07 	sts	0x071F, r1
     db0:	10 92 20 07 	sts	0x0720, r1
     db4:	10 92 21 07 	sts	0x0721, r1
     db8:	10 92 22 07 	sts	0x0722, r1
     dbc:	10 92 23 07 	sts	0x0723, r1
     dc0:	08 95       	ret

00000dc2 <rf_cmd>:
}


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
     dc2:	cf 93       	push	r28
     dc4:	c8 2f       	mov	r28, r24
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     dc6:	90 91 41 01 	lds	r25, 0x0141
     dca:	9f 71       	andi	r25, 0x1F	; 31
     dcc:	9f 31       	cpi	r25, 0x1F	; 31
     dce:	d9 f3       	breq	.-10     	; 0xdc6 <rf_cmd+0x4>
		continue;
	// added for accessing buffer immediately before transmission for Flash implementation
	DISABLE_GLOBAL_INT();
     dd0:	f8 94       	cli
	if ((cmd == 0x2) && tx_start_func)
     dd2:	c2 30       	cpi	r28, 0x02	; 2
     dd4:	79 f4       	brne	.+30     	; 0xdf4 <rf_cmd+0x32>
     dd6:	e0 91 bd 04 	lds	r30, 0x04BD
     dda:	f0 91 be 04 	lds	r31, 0x04BE
     dde:	30 97       	sbiw	r30, 0x00	; 0
     de0:	49 f0       	breq	.+18     	; 0xdf4 <rf_cmd+0x32>
		tx_start_func(tx_len, tx_buf);
     de2:	60 91 4f 07 	lds	r22, 0x074F
     de6:	70 91 50 07 	lds	r23, 0x0750
     dea:	80 91 67 07 	lds	r24, 0x0767
     dee:	90 91 68 07 	lds	r25, 0x0768
     df2:	09 95       	icall
	TRX_STATE = cmd;
     df4:	c0 93 42 01 	sts	0x0142, r28
	ENABLE_GLOBAL_INT();
     df8:	78 94       	sei
}
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <set_wireless_prog>:
uint8_t reset_val[] = {0x43, 0x15, 0xa6, 0xd9, 0x3d, 0x31, 0x82, 0xf1, 0x8c, 0xa7, 0x4f, 0xc5, 0x99, 0x97, 0x04, 0xac};


void set_wireless_prog(uint8_t val)
{
   wireless_prog = val;
     dfe:	80 93 bc 04 	sts	0x04BC, r24
     e02:	08 95       	ret

00000e04 <rf_enable_glossy>:
}

void rf_enable_glossy()
{
	use_glossy = 1;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	80 93 31 07 	sts	0x0731, r24
     e0a:	08 95       	ret

00000e0c <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
     e0c:	10 92 31 07 	sts	0x0731, r1
     e10:	08 95       	ret

00000e12 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     e12:	80 91 41 01 	lds	r24, 0x0141
     e16:	8f 71       	andi	r24, 0x1F	; 31
     e18:	8f 31       	cpi	r24, 0x1F	; 31
     e1a:	d9 f3       	breq	.-10     	; 0xe12 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     e1c:	80 91 41 01 	lds	r24, 0x0141
     e20:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
     e22:	e1 f0       	breq	.+56     	; 0xe5c <rf_power_down+0x4a>
     e24:	8f 30       	cpi	r24, 0x0F	; 15
     e26:	d1 f0       	breq	.+52     	; 0xe5c <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
     e28:	80 91 41 01 	lds	r24, 0x0141
     e2c:	8f 71       	andi	r24, 0x1F	; 31
     e2e:	88 30       	cpi	r24, 0x08	; 8
     e30:	31 f4       	brne	.+12     	; 0xe3e <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
     e32:	80 91 39 01 	lds	r24, 0x0139
     e36:	82 60       	ori	r24, 0x02	; 2
     e38:	80 93 39 01 	sts	0x0139, r24
     e3c:	0b c0       	rjmp	.+22     	; 0xe54 <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
     e3e:	88 e0       	ldi	r24, 0x08	; 8
     e40:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
     e44:	80 91 41 01 	lds	r24, 0x0141
     e48:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
     e4a:	88 30       	cpi	r24, 0x08	; 8
     e4c:	d9 f7       	brne	.-10     	; 0xe44 <rf_power_down+0x32>
     e4e:	f1 cf       	rjmp	.-30     	; 0xe32 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
     e50:	8f 30       	cpi	r24, 0x0F	; 15
     e52:	21 f0       	breq	.+8      	; 0xe5c <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
     e54:	80 91 41 01 	lds	r24, 0x0141
     e58:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
     e5a:	d1 f7       	brne	.-12     	; 0xe50 <rf_power_down+0x3e>
     e5c:	08 95       	ret

00000e5e <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
     e5e:	80 91 41 01 	lds	r24, 0x0141
     e62:	8f 71       	andi	r24, 0x1F	; 31
     e64:	8f 31       	cpi	r24, 0x1F	; 31
     e66:	d9 f3       	breq	.-10     	; 0xe5e <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
     e68:	80 91 41 01 	lds	r24, 0x0141
     e6c:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
     e6e:	11 f0       	breq	.+4      	; 0xe74 <rf_power_up+0x16>
     e70:	8f 30       	cpi	r24, 0x0F	; 15
     e72:	51 f4       	brne	.+20     	; 0xe88 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
     e74:	80 91 39 01 	lds	r24, 0x0139
     e78:	8d 7f       	andi	r24, 0xFD	; 253
     e7a:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
     e7e:	80 91 41 01 	lds	r24, 0x0141
     e82:	8f 71       	andi	r24, 0x1F	; 31
     e84:	88 30       	cpi	r24, 0x08	; 8
     e86:	d9 f7       	brne	.-10     	; 0xe7e <rf_power_up+0x20>
     e88:	08 95       	ret

00000e8a <rf_pll_on>:
	ENABLE_GLOBAL_INT();
}

void rf_pll_on()
{
   rf_cmd(PLL_ON);
     e8a:	89 e0       	ldi	r24, 0x09	; 9
     e8c:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <rf_cmd>

00000e90 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
     e90:	e5 e4       	ldi	r30, 0x45	; 69
     e92:	f1 e0       	ldi	r31, 0x01	; 1
     e94:	90 81       	ld	r25, Z
     e96:	90 7f       	andi	r25, 0xF0	; 240
     e98:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
     e9a:	90 81       	ld	r25, Z
     e9c:	8f 70       	andi	r24, 0x0F	; 15
     e9e:	98 2b       	or	r25, r24
     ea0:	90 83       	st	Z, r25
     ea2:	08 95       	ret

00000ea4 <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
     ea4:	e7 e5       	ldi	r30, 0x57	; 87
     ea6:	f1 e0       	ldi	r31, 0x01	; 1
     ea8:	80 81       	ld	r24, Z
     eaa:	8d 7f       	andi	r24, 0xFD	; 253
     eac:	80 83       	st	Z, r24
     eae:	08 95       	ret

00000eb0 <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
     eb0:	e7 e5       	ldi	r30, 0x57	; 87
     eb2:	f1 e0       	ldi	r31, 0x01	; 1
     eb4:	80 81       	ld	r24, Z
     eb6:	82 60       	ori	r24, 0x02	; 2
     eb8:	80 83       	st	Z, r24
     eba:	08 95       	ret

00000ebc <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
     ebc:	ee e6       	ldi	r30, 0x6E	; 110
     ebe:	f1 e0       	ldi	r31, 0x01	; 1
     ec0:	80 81       	ld	r24, Z
     ec2:	8f 7e       	andi	r24, 0xEF	; 239
     ec4:	80 83       	st	Z, r24
     ec6:	08 95       	ret

00000ec8 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
     ec8:	ee e6       	ldi	r30, 0x6E	; 110
     eca:	f1 e0       	ldi	r31, 0x01	; 1
     ecc:	80 81       	ld	r24, Z
     ece:	80 61       	ori	r24, 0x10	; 16
     ed0:	80 83       	st	Z, r24
     ed2:	08 95       	ret

00000ed4 <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
     ed4:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
     ed8:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
     edc:	90 93 3b 07 	sts	0x073B, r25
     ee0:	80 93 3a 07 	sts	0x073A, r24
     ee4:	08 95       	ret

00000ee6 <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
     ee6:	90 93 35 07 	sts	0x0735, r25
     eea:	80 93 34 07 	sts	0x0734, r24
	PHY_CC_CCA &= ~(0x1F);
     eee:	e8 e4       	ldi	r30, 0x48	; 72
     ef0:	f1 e0       	ldi	r31, 0x01	; 1
     ef2:	80 81       	ld	r24, Z
     ef4:	80 7e       	andi	r24, 0xE0	; 224
     ef6:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
     ef8:	80 81       	ld	r24, Z
     efa:	68 2b       	or	r22, r24
     efc:	60 83       	st	Z, r22
     efe:	08 95       	ret

00000f00 <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
     f00:	90 93 c2 04 	sts	0x04C2, r25
     f04:	80 93 c1 04 	sts	0x04C1, r24
     f08:	08 95       	ret

00000f0a <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
     f0a:	90 93 c0 04 	sts	0x04C0, r25
     f0e:	80 93 bf 04 	sts	0x04BF, r24
     f12:	08 95       	ret

00000f14 <tx_start_callback>:
}

void tx_start_callback(void (*func)(uint16_t, uint8_t*)) {
	tx_start_func = func;
     f14:	90 93 be 04 	sts	0x04BE, r25
     f18:	80 93 bd 04 	sts	0x04BD, r24
     f1c:	08 95       	ret

00000f1e <rf_init>:
}

void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
     f1e:	0f 93       	push	r16
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	fc 01       	movw	r30, r24
     f28:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
     f2a:	80 e2       	ldi	r24, 0x20	; 32
     f2c:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
     f30:	80 ec       	ldi	r24, 0xC0	; 192
     f32:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
     f36:	60 62       	ori	r22, 0x20	; 32
     f38:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
     f3c:	85 ec       	ldi	r24, 0xC5	; 197
     f3e:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
     f42:	87 ea       	ldi	r24, 0xA7	; 167
     f44:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
     f48:	80 e8       	ldi	r24, 0x80	; 128
     f4a:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
     f4e:	20 93 60 01 	sts	0x0160, r18
     f52:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
     f56:	40 93 62 01 	sts	0x0162, r20
     f5a:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     f5e:	c6 e4       	ldi	r28, 0x46	; 70
     f60:	d1 e0       	ldi	r29, 0x01	; 1
     f62:	08 81       	ld	r16, Y
     f64:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     f66:	98 81       	ld	r25, Y
     f68:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     f6a:	30 2f       	mov	r19, r16
     f6c:	32 95       	swap	r19
     f6e:	36 95       	lsr	r19
     f70:	37 70       	andi	r19, 0x07	; 7
     f72:	60 e4       	ldi	r22, 0x40	; 64
     f74:	36 9f       	mul	r19, r22
     f76:	80 01       	movw	r16, r0
     f78:	11 24       	eor	r1, r1
     f7a:	22 95       	swap	r18
     f7c:	26 95       	lsr	r18
     f7e:	23 70       	andi	r18, 0x03	; 3
     f80:	62 2f       	mov	r22, r18
     f82:	60 2b       	or	r22, r16
     f84:	82 95       	swap	r24
     f86:	86 95       	lsr	r24
     f88:	83 70       	andi	r24, 0x03	; 3
     f8a:	70 e1       	ldi	r23, 0x10	; 16
     f8c:	87 9f       	mul	r24, r23
     f8e:	90 01       	movw	r18, r0
     f90:	11 24       	eor	r1, r1
     f92:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
     f94:	92 95       	swap	r25
     f96:	96 95       	lsr	r25
     f98:	93 70       	andi	r25, 0x03	; 3
     f9a:	84 e0       	ldi	r24, 0x04	; 4
     f9c:	98 9f       	mul	r25, r24
     f9e:	b0 01       	movw	r22, r0
     fa0:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
     fa2:	62 2b       	or	r22, r18
     fa4:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     fa8:	88 81       	ld	r24, Y
     faa:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     fac:	92 95       	swap	r25
     fae:	96 95       	lsr	r25
     fb0:	93 70       	andi	r25, 0x03	; 3
     fb2:	39 2f       	mov	r19, r25
     fb4:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
     fb6:	98 2f       	mov	r25, r24
     fb8:	92 95       	swap	r25
     fba:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
     fbc:	93 2b       	or	r25, r19
     fbe:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
     fc2:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
   
   /* Enable all radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
     fc6:	8f ef       	ldi	r24, 0xFF	; 255
     fc8:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
     fcc:	c4 e3       	ldi	r28, 0x34	; 52
     fce:	d7 e0       	ldi	r29, 0x07	; 7
     fd0:	f9 83       	std	Y+1, r31	; 0x01
     fd2:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
     fd4:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
     fd6:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
     fd8:	5d 83       	std	Y+5, r21	; 0x05
     fda:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
     fdc:	bf 83       	std	Y+7, r27	; 0x07
     fde:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
     fe0:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	80 93 4e 07 	sts	0x074E, r24
   rx_ready = 0;
     fe8:	10 92 69 07 	sts	0x0769, r1
   tx_done = 0;
     fec:	10 92 3d 07 	sts	0x073D, r1

	use_glossy = 0;
     ff0:	10 92 31 07 	sts	0x0731, r1

} // rf_init() 
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	08 95       	ret

00000ffe <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
     ffe:	86 e1       	ldi	r24, 0x16	; 22
    1000:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <rf_cmd>

00001004 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    1004:	86 e1       	ldi	r24, 0x16	; 22
    1006:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <rf_cmd>

0000100a <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
   rf_cmd(TRX_OFF);
    100a:	88 e0       	ldi	r24, 0x08	; 8
    100c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <rf_cmd>
   rx_ready = 0;
    1010:	10 92 69 07 	sts	0x0769, r1
    1014:	08 95       	ret

00001016 <rf_tx_packet>:
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------


uint8_t rf_tx_packet(RF_TX_INFO *pRTI)
{
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	ec 01       	movw	r28, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready){
    101e:	80 91 4e 07 	lds	r24, 0x074E
    1022:	88 23       	and	r24, r24
    1024:	09 f4       	brne	.+2      	; 0x1028 <rf_tx_packet+0x12>
    1026:	68 c0       	rjmp	.+208    	; 0x10f8 <rf_tx_packet+0xe2>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    1028:	2e 81       	ldd	r18, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    102a:	80 91 36 07 	lds	r24, 0x0736
    102e:	8f 5f       	subi	r24, 0xFF	; 255
    1030:	80 93 36 07 	sts	0x0736, r24
	machead->fcf = fcf;
    1034:	90 91 81 01 	lds	r25, 0x0181
    1038:	90 7e       	andi	r25, 0xE0	; 224
    103a:	91 60       	ori	r25, 0x01	; 1
    103c:	20 fb       	bst	r18, 0
    103e:	95 f9       	bld	r25, 5
    1040:	9f 73       	andi	r25, 0x3F	; 63
    1042:	90 64       	ori	r25, 0x40	; 64
    1044:	90 93 81 01 	sts	0x0181, r25
    1048:	88 e8       	ldi	r24, 0x88	; 136
    104a:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
    104e:	80 91 31 07 	lds	r24, 0x0731
    1052:	88 23       	and	r24, r24
    1054:	61 f0       	breq	.+24     	; 0x106e <rf_tx_packet+0x58>
		machead->seq_num = 0xFF;
    1056:	8f ef       	ldi	r24, 0xFF	; 255
    1058:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
    105c:	8a ea       	ldi	r24, 0xAA	; 170
    105e:	9a ea       	ldi	r25, 0xAA	; 170
    1060:	90 93 89 01 	sts	0x0189, r25
    1064:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
    1068:	8f ef       	ldi	r24, 0xFF	; 255
    106a:	9f ef       	ldi	r25, 0xFF	; 255
    106c:	10 c0       	rjmp	.+32     	; 0x108e <rf_tx_packet+0x78>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    106e:	80 91 36 07 	lds	r24, 0x0736
    1072:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    1076:	20 91 61 01 	lds	r18, 0x0161
    107a:	80 91 60 01 	lds	r24, 0x0160
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	92 2b       	or	r25, r18
    1082:	90 93 89 01 	sts	0x0189, r25
    1086:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = pRTI->destAddr;
    108a:	88 81       	ld	r24, Y
    108c:	99 81       	ldd	r25, Y+1	; 0x01
    108e:	90 93 87 01 	sts	0x0187, r25
    1092:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    1096:	20 91 63 01 	lds	r18, 0x0163
    109a:	80 91 62 01 	lds	r24, 0x0162
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	92 2b       	or	r25, r18
    10a2:	90 93 85 01 	sts	0x0185, r25
    10a6:	80 93 84 01 	sts	0x0184, r24
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    10aa:	4a 81       	ldd	r20, Y+2	; 0x02
    10ac:	55 27       	eor	r21, r21
    10ae:	47 fd       	sbrc	r20, 7
    10b0:	50 95       	com	r21
    10b2:	6b 81       	ldd	r22, Y+3	; 0x03
    10b4:	7c 81       	ldd	r23, Y+4	; 0x04
    10b6:	8a e8       	ldi	r24, 0x8A	; 138
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	0e 94 c9 2a 	call	0x5592	; 0x5592 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	85 5f       	subi	r24, 0xF5	; 245
    10c2:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    10c6:	80 91 41 01 	lds	r24, 0x0141
    10ca:	18 2f       	mov	r17, r24
    10cc:	1f 71       	andi	r17, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    10ce:	9f ef       	ldi	r25, 0xFF	; 255
    10d0:	91 0f       	add	r25, r17
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    10d2:	92 30       	cpi	r25, 0x02	; 2
    10d4:	c0 f3       	brcs	.-16     	; 0x10c6 <rf_tx_packet+0xb0>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    10d6:	11 31       	cpi	r17, 0x11	; 17
    10d8:	b1 f3       	breq	.-20     	; 0x10c6 <rf_tx_packet+0xb0>
    10da:	12 31       	cpi	r17, 0x12	; 18
    10dc:	a1 f3       	breq	.-24     	; 0x10c6 <rf_tx_packet+0xb0>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    10de:	1f 31       	cpi	r17, 0x1F	; 31
    10e0:	91 f3       	breq	.-28     	; 0x10c6 <rf_tx_packet+0xb0>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    10e2:	98 ef       	ldi	r25, 0xF8	; 248
    10e4:	91 0f       	add	r25, r17
    10e6:	92 30       	cpi	r25, 0x02	; 2
    10e8:	48 f0       	brcs	.+18     	; 0x10fc <rf_tx_packet+0xe6>
    10ea:	8f 70       	andi	r24, 0x0F	; 15
    10ec:	86 30       	cpi	r24, 0x06	; 6
    10ee:	31 f0       	breq	.+12     	; 0x10fc <rf_tx_packet+0xe6>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		nrk_kprintf(PSTR("tx failed due to incorrect trx status\r\n"));
    10f0:	84 eb       	ldi	r24, 0xB4	; 180
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	0e 94 94 0c 	call	0x1928	; 0x1928 <nrk_kprintf>
		return NRK_ERROR;
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	55 c0       	rjmp	.+170    	; 0x11a6 <rf_tx_packet+0x190>
	}

	rf_cmd(RX_AACK_ON);
    10fc:	86 e1       	ldi	r24, 0x16	; 22
    10fe:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    1102:	8d 81       	ldd	r24, Y+5	; 0x05
    1104:	81 11       	cpse	r24, r1
    1106:	0a c0       	rjmp	.+20     	; 0x111c <rf_tx_packet+0x106>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    1108:	89 e0       	ldi	r24, 0x09	; 9
    110a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <rf_cmd>
	if(pRTI->ackRequest)
    110e:	8e 81       	ldd	r24, Y+6	; 0x06
    1110:	88 23       	and	r24, r24
    1112:	91 f0       	breq	.+36     	; 0x1138 <rf_tx_packet+0x122>
		rf_cmd(TX_ARET_ON);
    1114:	89 e1       	ldi	r24, 0x19	; 25
    1116:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <rf_cmd>
    111a:	0e c0       	rjmp	.+28     	; 0x1138 <rf_tx_packet+0x122>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    111c:	80 91 48 01 	lds	r24, 0x0148
    1120:	80 68       	ori	r24, 0x80	; 128
    1122:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    1126:	80 91 41 01 	lds	r24, 0x0141
    112a:	87 ff       	sbrs	r24, 7
    112c:	fc cf       	rjmp	.-8      	; 0x1126 <rf_tx_packet+0x110>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    112e:	80 91 41 01 	lds	r24, 0x0141
    1132:	86 ff       	sbrs	r24, 6
    1134:	e1 cf       	rjmp	.-62     	; 0x10f8 <rf_tx_packet+0xe2>
    1136:	e8 cf       	rjmp	.-48     	; 0x1108 <rf_tx_packet+0xf2>
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

	// set arguments for calling tx_start_func
	if (tx_start_func) {
    1138:	80 91 bd 04 	lds	r24, 0x04BD
    113c:	90 91 be 04 	lds	r25, 0x04BE
    1140:	89 2b       	or	r24, r25
    1142:	71 f0       	breq	.+28     	; 0x1160 <rf_tx_packet+0x14a>
		tx_len = pRTI->length;
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	99 27       	eor	r25, r25
    1148:	87 fd       	sbrc	r24, 7
    114a:	90 95       	com	r25
    114c:	90 93 68 07 	sts	0x0768, r25
    1150:	80 93 67 07 	sts	0x0767, r24
		tx_buf = data_start;
    1154:	8a e8       	ldi	r24, 0x8A	; 138
    1156:	91 e0       	ldi	r25, 0x01	; 1
    1158:	90 93 50 07 	sts	0x0750, r25
    115c:	80 93 4f 07 	sts	0x074F, r24
	}

   tx_done = 0;
    1160:	10 92 3d 07 	sts	0x073D, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
    1164:	82 e0       	ldi	r24, 0x02	; 2
    1166:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <rf_cmd>
   for(i=0; (i<65000) && !tx_done; i++){
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	20 91 3d 07 	lds	r18, 0x073D
    1172:	21 11       	cpse	r18, r1
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <rf_tx_packet+0x16a>
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	88 3e       	cpi	r24, 0xE8	; 232
    117a:	2d ef       	ldi	r18, 0xFD	; 253
    117c:	92 07       	cpc	r25, r18
    117e:	b9 f7       	brne	.-18     	; 0x116e <rf_tx_packet+0x158>
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
    1180:	2e 81       	ldd	r18, Y+6	; 0x06
    1182:	22 23       	and	r18, r18
    1184:	31 f0       	breq	.+12     	; 0x1192 <rf_tx_packet+0x17c>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    1186:	20 91 42 01 	lds	r18, 0x0142
    118a:	22 95       	swap	r18
    118c:	26 95       	lsr	r18
    118e:	27 70       	andi	r18, 0x07	; 7
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
    1190:	29 f4       	brne	.+10     	; 0x119c <rf_tx_packet+0x186>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    1192:	88 3e       	cpi	r24, 0xE8	; 232
    1194:	9d 4f       	sbci	r25, 0xFD	; 253
    1196:	11 f0       	breq	.+4      	; 0x119c <rf_tx_packet+0x186>
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
    1198:	c1 e0       	ldi	r28, 0x01	; 1
    119a:	01 c0       	rjmp	.+2      	; 0x119e <rf_tx_packet+0x188>
    119c:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    119e:	81 2f       	mov	r24, r17
    11a0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    11a4:	8c 2f       	mov	r24, r28
}
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	08 95       	ret

000011ae <rf_tx_packet_blocking>:

uint8_t rf_tx_packet_blocking(RF_TX_INFO *pRTI)
{
	uint16_t count = 0;
	if (rf_tx_packet(pRTI) == NRK_ERROR)
    11ae:	0e 94 0b 08 	call	0x1016	; 0x1016 <rf_tx_packet>
		nrk_kprintf(PSTR("failed to send packet\r\n"));
	while (!tx_done){
    11b2:	89 ee       	ldi	r24, 0xE9	; 233
    11b4:	9d ef       	ldi	r25, 0xFD	; 253
    11b6:	20 91 3d 07 	lds	r18, 0x073D
    11ba:	21 11       	cpse	r18, r1
    11bc:	04 c0       	rjmp	.+8      	; 0x11c6 <rf_tx_packet_blocking+0x18>
    11be:	01 97       	sbiw	r24, 0x01	; 1
		count += 1;
		if (count > 65000)//some somewhat arbitrary timeout i am too lazy to calculate
    11c0:	d1 f7       	brne	.-12     	; 0x11b6 <rf_tx_packet_blocking+0x8>
			return NRK_ERROR;
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
	}
	return NRK_OK;
}
    11c4:	08 95       	ret
	while (!tx_done){
		count += 1;
		if (count > 65000)//some somewhat arbitrary timeout i am too lazy to calculate
			return NRK_ERROR;
	}
	return NRK_OK;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	08 95       	ret

000011ca <rf_tx_packet_resend>:
uint8_t rf_tx_packet_resend()
{
   uint8_t trx_error;
   uint16_t i;

   tx_done = 0;
    11ca:	10 92 3d 07 	sts	0x073D, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
    11ce:	82 e0       	ldi	r24, 0x02	; 2
    11d0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <rf_cmd>
    11d4:	88 ee       	ldi	r24, 0xE8	; 232
    11d6:	9d ef       	ldi	r25, 0xFD	; 253
   for(i=0; (i<65000) && !tx_done; i++)
    11d8:	20 91 3d 07 	lds	r18, 0x073D
    11dc:	21 11       	cpse	r18, r1
    11de:	04 c0       	rjmp	.+8      	; 0x11e8 <rf_tx_packet_resend+0x1e>
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	d1 f7       	brne	.-12     	; 0x11d8 <rf_tx_packet_resend+0xe>
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
    11e4:	8f ef       	ldi	r24, 0xFF	; 255

   return trx_error;
}
    11e6:	08 95       	ret
   tx_done = 0;
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
   for(i=0; (i<65000) && !tx_done; i++)
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	08 95       	ret

000011ec <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    11f0:	80 91 4e 07 	lds	r24, 0x074E
    11f4:	88 23       	and	r24, r24
    11f6:	41 f1       	breq	.+80     	; 0x1248 <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    11f8:	80 91 41 01 	lds	r24, 0x0141
    11fc:	c8 2f       	mov	r28, r24
    11fe:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    1200:	9f ef       	ldi	r25, 0xFF	; 255
    1202:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    1204:	92 30       	cpi	r25, 0x02	; 2
    1206:	c0 f3       	brcs	.-16     	; 0x11f8 <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    1208:	c1 31       	cpi	r28, 0x11	; 17
    120a:	b1 f3       	breq	.-20     	; 0x11f8 <rf_cca_check+0xc>
    120c:	c2 31       	cpi	r28, 0x12	; 18
    120e:	a1 f3       	breq	.-24     	; 0x11f8 <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    1210:	cf 31       	cpi	r28, 0x1F	; 31
    1212:	91 f3       	breq	.-28     	; 0x11f8 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    1214:	c8 30       	cpi	r28, 0x08	; 8
    1216:	19 f0       	breq	.+6      	; 0x121e <rf_cca_check+0x32>
    1218:	8f 70       	andi	r24, 0x0F	; 15
    121a:	86 30       	cpi	r24, 0x06	; 6
    121c:	a9 f4       	brne	.+42     	; 0x1248 <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    121e:	86 e1       	ldi	r24, 0x16	; 22
    1220:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    1224:	80 91 48 01 	lds	r24, 0x0148
    1228:	80 68       	ori	r24, 0x80	; 128
    122a:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    122e:	80 91 41 01 	lds	r24, 0x0141
    1232:	87 ff       	sbrs	r24, 7
    1234:	fc cf       	rjmp	.-8      	; 0x122e <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    1236:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
    123a:	8c 2f       	mov	r24, r28
    123c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    1240:	d6 fb       	bst	r29, 6
    1242:	88 27       	eor	r24, r24
    1244:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
    1246:	01 c0       	rjmp	.+2      	; 0x124a <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
    1248:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	08 95       	ret

00001250 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready){
    1250:	80 91 4e 07 	lds	r24, 0x074E
    1254:	81 11       	cpse	r24, r1
    1256:	03 c0       	rjmp	.+6      	; 0x125e <rf_rx_packet_nonblock+0xe>
		printf("rf not ready\r\n");
    1258:	8a e1       	ldi	r24, 0x1A	; 26
    125a:	93 e0       	ldi	r25, 0x03	; 3
    125c:	52 c0       	rjmp	.+164    	; 0x1302 <rf_rx_packet_nonblock+0xb2>
		return NRK_ERROR;
	}
   if(!rx_ready){
    125e:	80 91 69 07 	lds	r24, 0x0769
    1262:	88 23       	and	r24, r24
    1264:	09 f4       	brne	.+2      	; 0x1268 <rf_rx_packet_nonblock+0x18>
    1266:	e3 c0       	rjmp	.+454    	; 0x142e <rf_rx_packet_nonblock+0x1de>
	   //printf("rx not ready\r\n");
      return 0;
   }
   else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length){
    1268:	80 91 7b 01 	lds	r24, 0x017B
    126c:	e0 91 34 07 	lds	r30, 0x0734
    1270:	f0 91 35 07 	lds	r31, 0x0735
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 97       	sbiw	r24, 0x02	; 2
    1278:	24 81       	ldd	r18, Z+4	; 0x04
    127a:	33 27       	eor	r19, r19
    127c:	27 fd       	sbrc	r18, 7
    127e:	30 95       	com	r19
    1280:	28 17       	cp	r18, r24
    1282:	39 07       	cpc	r19, r25
    1284:	1c f4       	brge	.+6      	; 0x128c <rf_rx_packet_nonblock+0x3c>
	   	printf("length too great\r\n");
    1286:	88 e2       	ldi	r24, 0x28	; 40
    1288:	93 e0       	ldi	r25, 0x03	; 3
    128a:	3b c0       	rjmp	.+118    	; 0x1302 <rf_rx_packet_nonblock+0xb2>
		return NRK_ERROR;
	}

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    128c:	e0 91 34 07 	lds	r30, 0x0734
    1290:	f0 91 35 07 	lds	r31, 0x0735
    1294:	80 91 82 01 	lds	r24, 0x0182
    1298:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    129a:	e0 91 34 07 	lds	r30, 0x0734
    129e:	f0 91 35 07 	lds	r31, 0x0735
    12a2:	80 91 87 01 	lds	r24, 0x0187
    12a6:	90 91 88 01 	lds	r25, 0x0188
    12aa:	92 83       	std	Z+2, r25	; 0x02
    12ac:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    12ae:	e0 91 34 07 	lds	r30, 0x0734
    12b2:	f0 91 35 07 	lds	r31, 0x0735
    12b6:	80 91 7b 01 	lds	r24, 0x017B
    12ba:	8b 50       	subi	r24, 0x0B	; 11
    12bc:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    12be:	a0 91 34 07 	lds	r26, 0x0734
    12c2:	b0 91 35 07 	lds	r27, 0x0735
    12c6:	e0 91 34 07 	lds	r30, 0x0734
    12ca:	f0 91 35 07 	lds	r31, 0x0735
    12ce:	13 96       	adiw	r26, 0x03	; 3
    12d0:	9c 91       	ld	r25, X
    12d2:	84 81       	ldd	r24, Z+4	; 0x04
    12d4:	89 17       	cp	r24, r25
    12d6:	3c f0       	brlt	.+14     	; 0x12e6 <rf_rx_packet_nonblock+0x96>
			|| (rfSettings.pRxInfo->length < 0)){
    12d8:	e0 91 34 07 	lds	r30, 0x0734
    12dc:	f0 91 35 07 	lds	r31, 0x0735
    12e0:	83 81       	ldd	r24, Z+3	; 0x03
    12e2:	87 ff       	sbrs	r24, 7
    12e4:	12 c0       	rjmp	.+36     	; 0x130a <rf_rx_packet_nonblock+0xba>
		rx_ready = 0;
    12e6:	10 92 69 07 	sts	0x0769, r1
      	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    12ea:	80 91 4c 01 	lds	r24, 0x014C
    12ee:	8f 77       	andi	r24, 0x7F	; 127
    12f0:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    12f4:	80 91 4c 01 	lds	r24, 0x014C
    12f8:	80 68       	ori	r24, 0x80	; 128
    12fa:	80 93 4c 01 	sts	0x014C, r24
		printf("incorrect length setting in rf settings\r\n");
    12fe:	8a e3       	ldi	r24, 0x3A	; 58
    1300:	93 e0       	ldi	r25, 0x03	; 3
    1302:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <puts>
		return NRK_ERROR;
    1306:	8f ef       	ldi	r24, 0xFF	; 255
    1308:	08 95       	ret
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    130a:	a0 91 34 07 	lds	r26, 0x0734
    130e:	b0 91 35 07 	lds	r27, 0x0735
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		printf("incorrect length setting in rf settings\r\n");
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    1312:	e0 91 34 07 	lds	r30, 0x0734
    1316:	f0 91 35 07 	lds	r31, 0x0735
    131a:	13 96       	adiw	r26, 0x03	; 3
    131c:	4c 91       	ld	r20, X
    131e:	55 27       	eor	r21, r21
    1320:	47 fd       	sbrc	r20, 7
    1322:	50 95       	com	r21
    1324:	69 e8       	ldi	r22, 0x89	; 137
    1326:	71 e0       	ldi	r23, 0x01	; 1
    1328:	85 81       	ldd	r24, Z+5	; 0x05
    132a:	96 81       	ldd	r25, Z+6	; 0x06
    132c:	0e 94 c9 2a 	call	0x5592	; 0x5592 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);

   /* if reset packet received, perform reset */
   if(wireless_prog && (rfSettings.pRxInfo->length == 16)){
    1330:	80 91 bc 04 	lds	r24, 0x04BC
    1334:	88 23       	and	r24, r24
    1336:	09 f4       	brne	.+2      	; 0x133a <rf_rx_packet_nonblock+0xea>
    1338:	3e c0       	rjmp	.+124    	; 0x13b6 <rf_rx_packet_nonblock+0x166>
    133a:	e0 91 34 07 	lds	r30, 0x0734
    133e:	f0 91 35 07 	lds	r31, 0x0735
    1342:	83 81       	ldd	r24, Z+3	; 0x03
    1344:	80 31       	cpi	r24, 0x10	; 16
    1346:	b9 f5       	brne	.+110    	; 0x13b6 <rf_rx_packet_nonblock+0x166>
      if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 4) == 0){
    1348:	e0 91 34 07 	lds	r30, 0x0734
    134c:	f0 91 35 07 	lds	r31, 0x0735
    1350:	65 81       	ldd	r22, Z+5	; 0x05
    1352:	76 81       	ldd	r23, Z+6	; 0x06
    1354:	44 e0       	ldi	r20, 0x04	; 4
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	92 e0       	ldi	r25, 0x02	; 2
    135c:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <strncmp>
    1360:	89 2b       	or	r24, r25
    1362:	49 f5       	brne	.+82     	; 0x13b6 <rf_rx_packet_nonblock+0x166>
         if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 16) == 0){
    1364:	e0 91 34 07 	lds	r30, 0x0734
    1368:	f0 91 35 07 	lds	r31, 0x0735
    136c:	65 81       	ldd	r22, Z+5	; 0x05
    136e:	76 81       	ldd	r23, Z+6	; 0x06
    1370:	40 e1       	ldi	r20, 0x10	; 16
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	92 e0       	ldi	r25, 0x02	; 2
    1378:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <strncmp>
    137c:	89 2b       	or	r24, r25
    137e:	d9 f4       	brne	.+54     	; 0x13b6 <rf_rx_packet_nonblock+0x166>
            wdt_enable(WDTO_500MS);
    1380:	9d e0       	ldi	r25, 0x0D	; 13
    1382:	88 e1       	ldi	r24, 0x18	; 24
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	a8 95       	wdr
    138a:	80 93 60 00 	sts	0x0060, r24
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	90 93 60 00 	sts	0x0060, r25
            nrk_led_set(0);
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <nrk_led_set>
            nrk_led_set(1);
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <nrk_led_set>
            nrk_led_set(2);
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <nrk_led_set>
            nrk_led_set(3);
    13ac:	83 e0       	ldi	r24, 0x03	; 3
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <nrk_led_set>
    13b4:	ff cf       	rjmp	.-2      	; 0x13b4 <rf_rx_packet_nonblock+0x164>
      }
   }

	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    13b6:	e0 91 34 07 	lds	r30, 0x0734
    13ba:	f0 91 35 07 	lds	r31, 0x0735
    13be:	80 91 80 01 	lds	r24, 0x0180
    13c2:	85 fb       	bst	r24, 5
    13c4:	88 27       	eor	r24, r24
    13c6:	80 f9       	bld	r24, 0
    13c8:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    13ca:	e0 91 34 07 	lds	r30, 0x0734
    13ce:	f0 91 35 07 	lds	r31, 0x0735
    13d2:	80 91 47 01 	lds	r24, 0x0147
    13d6:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    13d8:	e0 91 34 07 	lds	r30, 0x0734
    13dc:	f0 91 35 07 	lds	r31, 0x0735
    13e0:	80 91 46 01 	lds	r24, 0x0146
    13e4:	86 95       	lsr	r24
    13e6:	86 95       	lsr	r24
    13e8:	86 95       	lsr	r24
    13ea:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    13ec:	e0 91 34 07 	lds	r30, 0x0734
    13f0:	f0 91 35 07 	lds	r31, 0x0735
    13f4:	80 91 47 01 	lds	r24, 0x0147
    13f8:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    13fa:	a0 91 34 07 	lds	r26, 0x0734
    13fe:	b0 91 35 07 	lds	r27, 0x0735
    1402:	e0 91 7b 01 	lds	r30, 0x017B
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	e0 58       	subi	r30, 0x80	; 128
    140a:	fe 4f       	sbci	r31, 0xFE	; 254
    140c:	80 81       	ld	r24, Z
    140e:	1b 96       	adiw	r26, 0x0b	; 11
    1410:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
    1412:	10 92 69 07 	sts	0x0769, r1
   TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1416:	80 91 4c 01 	lds	r24, 0x014C
    141a:	8f 77       	andi	r24, 0x7F	; 127
    141c:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    1420:	80 91 4c 01 	lds	r24, 0x014C
    1424:	80 68       	ori	r24, 0x80	; 128
    1426:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	08 95       	ret
		printf("rf not ready\r\n");
		return NRK_ERROR;
	}
   if(!rx_ready){
	   //printf("rx not ready\r\n");
      return 0;
    142e:	80 e0       	ldi	r24, 0x00	; 0
	rx_ready = 0;
   TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    1430:	08 95       	ret

00001432 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    1432:	1f 92       	push	r1
    1434:	0f 92       	push	r0
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	0f 92       	push	r0
    143a:	11 24       	eor	r1, r1
    143c:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    143e:	80 e8       	ldi	r24, 0x80	; 128
    1440:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1444:	8f 91       	pop	r24
    1446:	0f 90       	pop	r0
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	0f 90       	pop	r0
    144c:	1f 90       	pop	r1
    144e:	18 95       	reti

00001450 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    1450:	1f 92       	push	r1
    1452:	0f 92       	push	r0
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	0f 92       	push	r0
    1458:	11 24       	eor	r1, r1
    145a:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	80 93 3d 07 	sts	0x073D, r24
   IRQ_STATUS = (1 << TX_END);
    1462:	80 e4       	ldi	r24, 0x40	; 64
    1464:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    1468:	8f 91       	pop	r24
    146a:	0f 90       	pop	r0
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	0f 90       	pop	r0
    1470:	1f 90       	pop	r1
    1472:	18 95       	reti

00001474 <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    1474:	1f 92       	push	r1
    1476:	0f 92       	push	r0
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	0f 92       	push	r0
    147c:	11 24       	eor	r1, r1
    147e:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    1480:	80 e2       	ldi	r24, 0x20	; 32
    1482:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1486:	8f 91       	pop	r24
    1488:	0f 90       	pop	r0
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	0f 90       	pop	r0
    148e:	1f 90       	pop	r1
    1490:	18 95       	reti

00001492 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    1492:	1f 92       	push	r1
    1494:	0f 92       	push	r0
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	0f 92       	push	r0
    149a:	11 24       	eor	r1, r1
    149c:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    149e:	80 e1       	ldi	r24, 0x10	; 16
    14a0:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    14a4:	8f 91       	pop	r24
    14a6:	0f 90       	pop	r0
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	0f 90       	pop	r0
    14ac:	1f 90       	pop	r1
    14ae:	18 95       	reti

000014b0 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    14b0:	1f 92       	push	r1
    14b2:	0f 92       	push	r0
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	0f 92       	push	r0
    14b8:	11 24       	eor	r1, r1
    14ba:	0b b6       	in	r0, 0x3b	; 59
    14bc:	0f 92       	push	r0
    14be:	2f 93       	push	r18
    14c0:	3f 93       	push	r19
    14c2:	4f 93       	push	r20
    14c4:	5f 93       	push	r21
    14c6:	6f 93       	push	r22
    14c8:	7f 93       	push	r23
    14ca:	8f 93       	push	r24
    14cc:	9f 93       	push	r25
    14ce:	af 93       	push	r26
    14d0:	bf 93       	push	r27
    14d2:	ef 93       	push	r30
    14d4:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    14d6:	84 e0       	ldi	r24, 0x04	; 4
    14d8:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    14dc:	e0 91 c1 04 	lds	r30, 0x04C1
    14e0:	f0 91 c2 04 	lds	r31, 0x04C2
    14e4:	30 97       	sbiw	r30, 0x00	; 0
    14e6:	09 f0       	breq	.+2      	; 0x14ea <__vector_59+0x3a>
		rx_start_func();
    14e8:	09 95       	icall

	return;
}
    14ea:	ff 91       	pop	r31
    14ec:	ef 91       	pop	r30
    14ee:	bf 91       	pop	r27
    14f0:	af 91       	pop	r26
    14f2:	9f 91       	pop	r25
    14f4:	8f 91       	pop	r24
    14f6:	7f 91       	pop	r23
    14f8:	6f 91       	pop	r22
    14fa:	5f 91       	pop	r21
    14fc:	4f 91       	pop	r20
    14fe:	3f 91       	pop	r19
    1500:	2f 91       	pop	r18
    1502:	0f 90       	pop	r0
    1504:	0b be       	out	0x3b, r0	; 59
    1506:	0f 90       	pop	r0
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	0f 90       	pop	r0
    150c:	1f 90       	pop	r1
    150e:	18 95       	reti

00001510 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    1510:	1f 92       	push	r1
    1512:	0f 92       	push	r0
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	0f 92       	push	r0
    1518:	11 24       	eor	r1, r1
    151a:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    151c:	82 e0       	ldi	r24, 0x02	; 2
    151e:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1522:	8f 91       	pop	r24
    1524:	0f 90       	pop	r0
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	0f 90       	pop	r0
    152a:	1f 90       	pop	r1
    152c:	18 95       	reti

0000152e <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    152e:	1f 92       	push	r1
    1530:	0f 92       	push	r0
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	0f 92       	push	r0
    1536:	11 24       	eor	r1, r1
    1538:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1540:	8f 91       	pop	r24
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	0f 90       	pop	r0
    1548:	1f 90       	pop	r1
    154a:	18 95       	reti

0000154c <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    154c:	e9 e4       	ldi	r30, 0x49	; 73
    154e:	f1 e0       	ldi	r31, 0x01	; 1
    1550:	90 81       	ld	r25, Z
    1552:	90 7f       	andi	r25, 0xF0	; 240
    1554:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    1556:	90 81       	ld	r25, Z
    1558:	8f 70       	andi	r24, 0x0F	; 15
    155a:	98 2b       	or	r25, r24
    155c:	90 83       	st	Z, r25
    155e:	08 95       	ret

00001560 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	08 95       	ret

00001564 <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    1564:	08 95       	ret

00001566 <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
    1566:	08 95       	ret

00001568 <rf_security_disable>:
}



void rf_security_disable()
{
    1568:	08 95       	ret

0000156a <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	08 95       	ret

0000156e <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    156e:	80 91 2f 07 	lds	r24, 0x072F
    1572:	90 91 30 07 	lds	r25, 0x0730
    1576:	08 95       	ret

00001578 <rf_flush_rx_fifo>:



inline void rf_flush_rx_fifo()
{
    1578:	08 95       	ret

0000157a <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	08 95       	ret

0000157e <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	08 95       	ret

00001582 <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	08 95       	ret

00001586 <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
    1586:	08 95       	ret

00001588 <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
    1588:	08 95       	ret

0000158a <rf_test_mode>:
}



void rf_test_mode()
{
    158a:	08 95       	ret

0000158c <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
    158c:	08 95       	ret

0000158e <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    158e:	08 95       	ret

00001590 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    1590:	08 95       	ret

00001592 <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    1592:	08 95       	ret

00001594 <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
    1594:	08 95       	ret

00001596 <rf_cc2591_tx_on>:
	PORTG	|= 0x1;
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	
	DDRG	&= ~(0x1);  // Set RXTX as input
    1596:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
    1598:	8d b1       	in	r24, 0x0d	; 13
    159a:	80 6e       	ori	r24, 0xE0	; 224
    159c:	8d b9       	out	0x0d, r24	; 13
	// PAEN=1  EN=0  HGM=x RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0xA0;
    159e:	8e b1       	in	r24, 0x0e	; 14
    15a0:	80 6a       	ori	r24, 0xA0	; 160
    15a2:	8e b9       	out	0x0e, r24	; 14
    15a4:	08 95       	ret

000015a6 <rf_cc2591_rx_on>:
	DDRG	|= 0x1;
	PORTG	&= ~(0x1);
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	DDRG	&= ~(0x1);  // Set RXTX as input
    15a6:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
    15a8:	8d b1       	in	r24, 0x0d	; 13
    15aa:	80 6e       	ori	r24, 0xE0	; 224
    15ac:	8d b9       	out	0x0d, r24	; 13
	// PAEN=0  EN=1  HGM=1 RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0x60;
    15ae:	8e b1       	in	r24, 0x0e	; 14
    15b0:	80 66       	ori	r24, 0x60	; 96
    15b2:	8e b9       	out	0x0e, r24	; 14
    15b4:	08 95       	ret

000015b6 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    15b6:	cf 92       	push	r12
    15b8:	df 92       	push	r13
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	27 97       	sbiw	r28, 0x07	; 7
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    15d6:	0e 94 02 11 	call	0x2204	; 0x2204 <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    15da:	e0 91 34 07 	lds	r30, 0x0734
    15de:	f0 91 35 07 	lds	r31, 0x0735
    15e2:	c0 80       	ld	r12, Z
    15e4:	d3 80       	ldd	r13, Z+3	; 0x03
    15e6:	e5 80       	ldd	r14, Z+5	; 0x05
    15e8:	f6 80       	ldd	r15, Z+6	; 0x06
    15ea:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    15ec:	0e 94 28 09 	call	0x1250	; 0x1250 <rf_rx_packet_nonblock>
	if (err < 1) {
    15f0:	18 16       	cp	r1, r24
    15f2:	1c f0       	brlt	.+6      	; 0x15fa <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    15f4:	83 e6       	ldi	r24, 0x63	; 99
    15f6:	93 e0       	ldi	r25, 0x03	; 3
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    15fa:	f7 01       	movw	r30, r14
    15fc:	10 81       	ld	r17, Z
	if (ttl == 0) {
    15fe:	11 11       	cpse	r17, r1
    1600:	07 c0       	rjmp	.+14     	; 0x1610 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    1602:	82 e8       	ldi	r24, 0x82	; 130
    1604:	93 e0       	ldi	r25, 0x03	; 3
    1606:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <puts>
#endif
		nrk_int_enable();
    160a:	0e 94 04 11 	call	0x2208	; 0x2208 <nrk_int_enable>
		return;
    160e:	31 c0       	rjmp	.+98     	; 0x1672 <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
    1610:	15 30       	cpi	r17, 0x05	; 5
    1612:	21 f4       	brne	.+8      	; 0x161c <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
    1614:	8a e0       	ldi	r24, 0x0A	; 10
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 77 2b 	call	0x56ee	; 0x56ee <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    161c:	c7 01       	movw	r24, r14
    161e:	01 96       	adiw	r24, 0x01	; 1
    1620:	9f 93       	push	r25
    1622:	8f 93       	push	r24
    1624:	80 2f       	mov	r24, r16
    1626:	99 27       	eor	r25, r25
    1628:	87 fd       	sbrc	r24, 7
    162a:	90 95       	com	r25
    162c:	9f 93       	push	r25
    162e:	0f 93       	push	r16
    1630:	1f 92       	push	r1
    1632:	1f 93       	push	r17
    1634:	1f 92       	push	r1
    1636:	cf 92       	push	r12
    1638:	84 ea       	ldi	r24, 0xA4	; 164
    163a:	93 e0       	ldi	r25, 0x03	; 3
    163c:	9f 93       	push	r25
    163e:	8f 93       	push	r24
    1640:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    1644:	fd 82       	std	Y+5, r15	; 0x05
    1646:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    1648:	11 50       	subi	r17, 0x01	; 1
    164a:	f7 01       	movw	r30, r14
    164c:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
    164e:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
    1650:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    1652:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    1654:	8f ef       	ldi	r24, 0xFF	; 255
    1656:	9f ef       	ldi	r25, 0xFF	; 255
    1658:	9a 83       	std	Y+2, r25	; 0x02
    165a:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    165c:	0e 94 04 11 	call	0x2208	; 0x2208 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    1660:	ce 01       	movw	r24, r28
    1662:	01 96       	adiw	r24, 0x01	; 1
    1664:	0e 94 0b 08 	call	0x1016	; 0x1016 <rf_tx_packet>
#endif
	return;
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
}
    1672:	27 96       	adiw	r28, 0x07	; 7
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	cf 90       	pop	r12
    168e:	08 95       	ret

00001690 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    1690:	1f 92       	push	r1
    1692:	0f 92       	push	r0
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	0f 92       	push	r0
    1698:	11 24       	eor	r1, r1
    169a:	0b b6       	in	r0, 0x3b	; 59
    169c:	0f 92       	push	r0
    169e:	2f 93       	push	r18
    16a0:	3f 93       	push	r19
    16a2:	4f 93       	push	r20
    16a4:	5f 93       	push	r21
    16a6:	6f 93       	push	r22
    16a8:	7f 93       	push	r23
    16aa:	8f 93       	push	r24
    16ac:	9f 93       	push	r25
    16ae:	af 93       	push	r26
    16b0:	bf 93       	push	r27
    16b2:	ef 93       	push	r30
    16b4:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	90 91 7b 01 	lds	r25, 0x017B
    16bc:	89 17       	cp	r24, r25
    16be:	10 f4       	brcc	.+4      	; 0x16c4 <__vector_60+0x34>
    16c0:	8f 5f       	subi	r24, 0xFF	; 255
    16c2:	fa cf       	rjmp	.-12     	; 0x16b8 <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

   if((PHY_RSSI >> RX_CRC_VALID) & 0x1){
    16c4:	80 91 46 01 	lds	r24, 0x0146
    16c8:	87 ff       	sbrs	r24, 7
    16ca:	04 c0       	rjmp	.+8      	; 0x16d4 <__vector_60+0x44>
      rx_ready = 1;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	80 93 69 07 	sts	0x0769, r24
    16d2:	04 c0       	rjmp	.+8      	; 0x16dc <__vector_60+0x4c>
   } else {
      printf("RX end failed checksum!\r\n");
    16d4:	8d ec       	ldi	r24, 0xCD	; 205
    16d6:	93 e0       	ldi	r25, 0x03	; 3
    16d8:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <puts>
   }
   IRQ_STATUS = (1 << RX_END);
    16dc:	88 e0       	ldi	r24, 0x08	; 8
    16de:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    16e2:	80 91 46 01 	lds	r24, 0x0146
    16e6:	87 ff       	sbrs	r24, 7
    16e8:	05 c0       	rjmp	.+10     	; 0x16f4 <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
    16ea:	80 91 31 07 	lds	r24, 0x0731
    16ee:	81 11       	cpse	r24, r1
    16f0:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <rf_glossy_interrupt>
	}

	if(rx_end_func)
    16f4:	e0 91 bf 04 	lds	r30, 0x04BF
    16f8:	f0 91 c0 04 	lds	r31, 0x04C0
    16fc:	30 97       	sbiw	r30, 0x00	; 0
    16fe:	09 f0       	breq	.+2      	; 0x1702 <__vector_60+0x72>
		rx_end_func();
    1700:	09 95       	icall

	return;
}
    1702:	ff 91       	pop	r31
    1704:	ef 91       	pop	r30
    1706:	bf 91       	pop	r27
    1708:	af 91       	pop	r26
    170a:	9f 91       	pop	r25
    170c:	8f 91       	pop	r24
    170e:	7f 91       	pop	r23
    1710:	6f 91       	pop	r22
    1712:	5f 91       	pop	r21
    1714:	4f 91       	pop	r20
    1716:	3f 91       	pop	r19
    1718:	2f 91       	pop	r18
    171a:	0f 90       	pop	r0
    171c:	0b be       	out	0x3b, r0	; 59
    171e:	0f 90       	pop	r0
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	0f 90       	pop	r0
    1724:	1f 90       	pop	r1
    1726:	18 95       	reti

00001728 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    1728:	ae e3       	ldi	r26, 0x3E	; 62
    172a:	b7 e0       	ldi	r27, 0x07	; 7
    172c:	fc 01       	movw	r30, r24
    172e:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    1730:	20 81       	ld	r18, Z
    1732:	2d 93       	st	X+, r18
      AES_KEY = key[i];
    1734:	21 91       	ld	r18, Z+
    1736:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    173a:	e8 17       	cp	r30, r24
    173c:	f9 07       	cpc	r31, r25
    173e:	c1 f7       	brne	.-16     	; 0x1730 <aes_setkey+0x8>
    1740:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    1742:	10 92 3e 01 	sts	0x013E, r1
    1746:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    1748:	e1 f7       	brne	.-8      	; 0x1742 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    174a:	80 e8       	ldi	r24, 0x80	; 128
    174c:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    1750:	80 91 3d 01 	lds	r24, 0x013D
    1754:	80 ff       	sbrs	r24, 0
    1756:	fc cf       	rjmp	.-8      	; 0x1750 <aes_setkey+0x28>
    1758:	e1 e5       	ldi	r30, 0x51	; 81
    175a:	f7 e0       	ldi	r31, 0x07	; 7
    175c:	80 e1       	ldi	r24, 0x10	; 16
    175e:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    1760:	90 91 3f 01 	lds	r25, 0x013F
    1764:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    1766:	8e 13       	cpse	r24, r30
    1768:	fb cf       	rjmp	.-10     	; 0x1760 <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
    176a:	08 95       	ret

0000176c <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
    1772:	66 23       	and	r22, r22
    1774:	09 f4       	brne	.+2      	; 0x1778 <aes_encrypt+0xc>
    1776:	45 c0       	rjmp	.+138    	; 0x1802 <aes_encrypt+0x96>
    1778:	86 2f       	mov	r24, r22
    177a:	8f 70       	andi	r24, 0x0F	; 15
    177c:	09 f0       	breq	.+2      	; 0x1780 <aes_encrypt+0x14>
    177e:	41 c0       	rjmp	.+130    	; 0x1802 <aes_encrypt+0x96>
    1780:	ee e3       	ldi	r30, 0x3E	; 62
    1782:	f7 e0       	ldi	r31, 0x07	; 7
    1784:	90 e1       	ldi	r25, 0x10	; 16
    1786:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    1788:	21 91       	ld	r18, Z+
    178a:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    178e:	9e 13       	cpse	r25, r30
    1790:	fb cf       	rjmp	.-10     	; 0x1788 <aes_encrypt+0x1c>
    1792:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1794:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    1796:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1798:	40 e1       	ldi	r20, 0x10	; 16
    179a:	94 9f       	mul	r25, r20
    179c:	90 01       	movw	r18, r0
    179e:	11 24       	eor	r1, r1
    17a0:	26 17       	cp	r18, r22
    17a2:	37 07       	cpc	r19, r23
    17a4:	7c f5       	brge	.+94     	; 0x1804 <aes_encrypt+0x98>
      if(i==0)
    17a6:	91 11       	cpse	r25, r1
    17a8:	03 c0       	rjmp	.+6      	; 0x17b0 <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    17aa:	10 92 3c 01 	sts	0x013C, r1
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    17b0:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	50 e0       	ldi	r21, 0x00	; 0
    17b8:	2a 0f       	add	r18, r26
    17ba:	3b 1f       	adc	r19, r27
    17bc:	e9 01       	movw	r28, r18
    17be:	c4 0f       	add	r28, r20
    17c0:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    17c2:	f8 81       	ld	r31, Y
    17c4:	f0 93 3e 01 	sts	0x013E, r31
    17c8:	4f 5f       	subi	r20, 0xFF	; 255
    17ca:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    17cc:	40 31       	cpi	r20, 0x10	; 16
    17ce:	51 05       	cpc	r21, r1
    17d0:	a9 f7       	brne	.-22     	; 0x17bc <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    17d2:	40 91 3c 01 	lds	r20, 0x013C
    17d6:	40 68       	ori	r20, 0x80	; 128
    17d8:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
    17dc:	40 91 3d 01 	lds	r20, 0x013D
    17e0:	40 ff       	sbrs	r20, 0
    17e2:	fc cf       	rjmp	.-8      	; 0x17dc <aes_encrypt+0x70>
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    17e8:	f0 91 3e 01 	lds	r31, 0x013E
    17ec:	e9 01       	movw	r28, r18
    17ee:	c4 0f       	add	r28, r20
    17f0:	d5 1f       	adc	r29, r21
    17f2:	f8 83       	st	Y, r31
    17f4:	4f 5f       	subi	r20, 0xFF	; 255
    17f6:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    17f8:	40 31       	cpi	r20, 0x10	; 16
    17fa:	51 05       	cpc	r21, r1
    17fc:	a9 f7       	brne	.-22     	; 0x17e8 <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    17fe:	9f 5f       	subi	r25, 0xFF	; 255
    1800:	cb cf       	rjmp	.-106    	; 0x1798 <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    1802:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	08 95       	ret

0000180a <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    180a:	0f 93       	push	r16
    180c:	1f 93       	push	r17
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    1814:	61 30       	cpi	r22, 0x01	; 1
    1816:	09 f4       	brne	.+2      	; 0x181a <aes_decrypt+0x10>
    1818:	58 c0       	rjmp	.+176    	; 0x18ca <aes_decrypt+0xc0>
    181a:	86 2f       	mov	r24, r22
    181c:	8f 70       	andi	r24, 0x0F	; 15
    181e:	09 f0       	breq	.+2      	; 0x1822 <aes_decrypt+0x18>
    1820:	54 c0       	rjmp	.+168    	; 0x18ca <aes_decrypt+0xc0>
    1822:	e1 e5       	ldi	r30, 0x51	; 81
    1824:	f7 e0       	ldi	r31, 0x07	; 7
    1826:	90 e1       	ldi	r25, 0x10	; 16
    1828:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    182a:	21 91       	ld	r18, Z+
    182c:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1830:	9e 13       	cpse	r25, r30
    1832:	fb cf       	rjmp	.-10     	; 0x182a <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1834:	62 95       	swap	r22
    1836:	6f 70       	andi	r22, 0x0F	; 15
    1838:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    183a:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    183c:	6f 3f       	cpi	r22, 0xFF	; 255
    183e:	09 f4       	brne	.+2      	; 0x1842 <aes_decrypt+0x38>
    1840:	45 c0       	rjmp	.+138    	; 0x18cc <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1842:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    1846:	46 2f       	mov	r20, r22
    1848:	55 27       	eor	r21, r21
    184a:	47 fd       	sbrc	r20, 7
    184c:	50 95       	com	r21
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	ed 01       	movw	r28, r26
    1854:	90 e1       	ldi	r25, 0x10	; 16
    1856:	69 02       	muls	r22, r25
    1858:	c0 0d       	add	r28, r0
    185a:	d1 1d       	adc	r29, r1
    185c:	11 24       	eor	r1, r1
    185e:	fe 01       	movw	r30, r28
    1860:	e2 0f       	add	r30, r18
    1862:	f3 1f       	adc	r31, r19
    1864:	90 81       	ld	r25, Z
    1866:	90 93 3e 01 	sts	0x013E, r25
    186a:	2f 5f       	subi	r18, 0xFF	; 255
    186c:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    186e:	20 31       	cpi	r18, 0x10	; 16
    1870:	31 05       	cpc	r19, r1
    1872:	a9 f7       	brne	.-22     	; 0x185e <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1874:	90 91 3c 01 	lds	r25, 0x013C
    1878:	90 68       	ori	r25, 0x80	; 128
    187a:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
    187e:	90 91 3d 01 	lds	r25, 0x013D
    1882:	90 ff       	sbrs	r25, 0
    1884:	fc cf       	rjmp	.-8      	; 0x187e <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    1886:	41 50       	subi	r20, 0x01	; 1
    1888:	51 09       	sbc	r21, r1
    188a:	94 e0       	ldi	r25, 0x04	; 4
    188c:	44 0f       	add	r20, r20
    188e:	55 1f       	adc	r21, r21
    1890:	9a 95       	dec	r25
    1892:	e1 f7       	brne	.-8      	; 0x188c <aes_decrypt+0x82>
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    1898:	90 91 3e 01 	lds	r25, 0x013E
    189c:	8e 01       	movw	r16, r28
    189e:	02 0f       	add	r16, r18
    18a0:	13 1f       	adc	r17, r19
    18a2:	f8 01       	movw	r30, r16
    18a4:	90 83       	st	Z, r25
         if(i!=0)
    18a6:	66 23       	and	r22, r22
    18a8:	49 f0       	breq	.+18     	; 0x18bc <aes_decrypt+0xb2>
    18aa:	f9 01       	movw	r30, r18
    18ac:	e4 0f       	add	r30, r20
    18ae:	f5 1f       	adc	r31, r21
    18b0:	ea 0f       	add	r30, r26
    18b2:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
    18b4:	e0 81       	ld	r30, Z
    18b6:	9e 27       	eor	r25, r30
    18b8:	f8 01       	movw	r30, r16
    18ba:	90 83       	st	Z, r25
    18bc:	2f 5f       	subi	r18, 0xFF	; 255
    18be:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    18c0:	20 31       	cpi	r18, 0x10	; 16
    18c2:	31 05       	cpc	r19, r1
    18c4:	49 f7       	brne	.-46     	; 0x1898 <aes_decrypt+0x8e>
    18c6:	61 50       	subi	r22, 0x01	; 1
    18c8:	b9 cf       	rjmp	.-142    	; 0x183c <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	08 95       	ret

000018d6 <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
    18d6:	80 91 c0 00 	lds	r24, 0x00C0
    18da:	87 ff       	sbrs	r24, 7
    18dc:	fc cf       	rjmp	.-8      	; 0x18d6 <getc0>
    18de:	80 91 c0 00 	lds	r24, 0x00C0
    18e2:	8f 77       	andi	r24, 0x7F	; 127
    18e4:	80 93 c0 00 	sts	0x00C0, r24
    18e8:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
    18ec:	08 95       	ret

000018ee <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    18ee:	90 91 c0 00 	lds	r25, 0x00C0
    18f2:	95 ff       	sbrs	r25, 5
    18f4:	fc cf       	rjmp	.-8      	; 0x18ee <putc0>
    18f6:	90 91 c0 00 	lds	r25, 0x00C0
    18fa:	9f 7d       	andi	r25, 0xDF	; 223
    18fc:	90 93 c0 00 	sts	0x00C0, r25
    1900:	80 93 c6 00 	sts	0x00C6, r24
    1904:	08 95       	ret

00001906 <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    1906:	8f ef       	ldi	r24, 0xFF	; 255
    1908:	08 95       	ret

0000190a <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
    190a:	81 30       	cpi	r24, 0x01	; 1
    190c:	19 f4       	brne	.+6      	; 0x1914 <nrk_uart_data_ready+0xa>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    190e:	80 91 c8 00 	lds	r24, 0x00C8
    1912:	04 c0       	rjmp	.+8      	; 0x191c <nrk_uart_data_ready+0x12>
        }
if(uart_num==0)
    1914:	81 11       	cpse	r24, r1
    1916:	06 c0       	rjmp	.+12     	; 0x1924 <nrk_uart_data_ready+0x1a>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    1918:	80 91 c0 00 	lds	r24, 0x00C0
    191c:	88 1f       	adc	r24, r24
    191e:	88 27       	eor	r24, r24
    1920:	88 1f       	adc	r24, r24
    1922:	08 95       	ret
        }
return 0;
    1924:	80 e0       	ldi	r24, 0x00	; 0
}
    1926:	08 95       	ret

00001928 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    192c:	fc 01       	movw	r30, r24
    192e:	24 91       	lpm	r18, Z
    1930:	ec 01       	movw	r28, r24
    1932:	21 96       	adiw	r28, 0x01	; 1
    1934:	22 23       	and	r18, r18
    1936:	51 f0       	breq	.+20     	; 0x194c <nrk_kprintf+0x24>
        putchar(c);
    1938:	60 91 fe 07 	lds	r22, 0x07FE
    193c:	70 91 ff 07 	lds	r23, 0x07FF
    1940:	82 2f       	mov	r24, r18
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 2b 2b 	call	0x5656	; 0x5656 <fputc>
    1948:	ce 01       	movw	r24, r28
    194a:	f0 cf       	rjmp	.-32     	; 0x192c <nrk_kprintf+0x4>
}
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	08 95       	ret

00001952 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    1952:	86 e0       	ldi	r24, 0x06	; 6
    1954:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    1956:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    1958:	88 ef       	ldi	r24, 0xF8	; 248
    195a:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    195c:	80 ef       	ldi	r24, 0xF0	; 240
    195e:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    1960:	82 e0       	ldi	r24, 0x02	; 2
    1962:	8d b9       	out	0x0d, r24	; 13
    1964:	08 95       	ret

00001966 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    1966:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <PORT_INIT>

0000196a <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    196a:	8f 3f       	cpi	r24, 0xFF	; 255
    196c:	09 f4       	brne	.+2      	; 0x1970 <nrk_gpio_set+0x6>
    196e:	6c c0       	rjmp	.+216    	; 0x1a48 <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    1970:	e8 2f       	mov	r30, r24
    1972:	e7 70       	andi	r30, 0x07	; 7
    1974:	4e 2f       	mov	r20, r30
    1976:	50 e0       	ldi	r21, 0x00	; 0
    1978:	47 30       	cpi	r20, 0x07	; 7
    197a:	51 05       	cpc	r21, r1
    197c:	08 f0       	brcs	.+2      	; 0x1980 <nrk_gpio_set+0x16>
    197e:	64 c0       	rjmp	.+200    	; 0x1a48 <nrk_gpio_set+0xde>
    1980:	fa 01       	movw	r30, r20
    1982:	e0 57       	subi	r30, 0x70	; 112
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	86 95       	lsr	r24
    1988:	86 95       	lsr	r24
    198a:	86 95       	lsr	r24
    198c:	0c 94 48 2a 	jmp	0x5490	; 0x5490 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1990:	42 b1       	in	r20, 0x02	; 2
    1992:	21 e0       	ldi	r18, 0x01	; 1
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	b9 01       	movw	r22, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <nrk_gpio_set+0x34>
    199a:	66 0f       	add	r22, r22
    199c:	77 1f       	adc	r23, r23
    199e:	8a 95       	dec	r24
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <nrk_gpio_set+0x30>
    19a2:	cb 01       	movw	r24, r22
    19a4:	84 2b       	or	r24, r20
    19a6:	82 b9       	out	0x02, r24	; 2
    19a8:	4d c0       	rjmp	.+154    	; 0x1a44 <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    19aa:	45 b1       	in	r20, 0x05	; 5
    19ac:	21 e0       	ldi	r18, 0x01	; 1
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	b9 01       	movw	r22, r18
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <nrk_gpio_set+0x4e>
    19b4:	66 0f       	add	r22, r22
    19b6:	77 1f       	adc	r23, r23
    19b8:	8a 95       	dec	r24
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <nrk_gpio_set+0x4a>
    19bc:	cb 01       	movw	r24, r22
    19be:	84 2b       	or	r24, r20
    19c0:	85 b9       	out	0x05, r24	; 5
    19c2:	40 c0       	rjmp	.+128    	; 0x1a44 <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    19c4:	48 b1       	in	r20, 0x08	; 8
    19c6:	21 e0       	ldi	r18, 0x01	; 1
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	b9 01       	movw	r22, r18
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <nrk_gpio_set+0x68>
    19ce:	66 0f       	add	r22, r22
    19d0:	77 1f       	adc	r23, r23
    19d2:	8a 95       	dec	r24
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <nrk_gpio_set+0x64>
    19d6:	cb 01       	movw	r24, r22
    19d8:	84 2b       	or	r24, r20
    19da:	88 b9       	out	0x08, r24	; 8
    19dc:	33 c0       	rjmp	.+102    	; 0x1a44 <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    19de:	4b b1       	in	r20, 0x0b	; 11
    19e0:	21 e0       	ldi	r18, 0x01	; 1
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	b9 01       	movw	r22, r18
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <nrk_gpio_set+0x82>
    19e8:	66 0f       	add	r22, r22
    19ea:	77 1f       	adc	r23, r23
    19ec:	8a 95       	dec	r24
    19ee:	e2 f7       	brpl	.-8      	; 0x19e8 <nrk_gpio_set+0x7e>
    19f0:	cb 01       	movw	r24, r22
    19f2:	84 2b       	or	r24, r20
    19f4:	8b b9       	out	0x0b, r24	; 11
    19f6:	26 c0       	rjmp	.+76     	; 0x1a44 <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    19f8:	4e b1       	in	r20, 0x0e	; 14
    19fa:	21 e0       	ldi	r18, 0x01	; 1
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	b9 01       	movw	r22, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <nrk_gpio_set+0x9c>
    1a02:	66 0f       	add	r22, r22
    1a04:	77 1f       	adc	r23, r23
    1a06:	8a 95       	dec	r24
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <nrk_gpio_set+0x98>
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	84 2b       	or	r24, r20
    1a0e:	8e b9       	out	0x0e, r24	; 14
    1a10:	19 c0       	rjmp	.+50     	; 0x1a44 <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1a12:	41 b3       	in	r20, 0x11	; 17
    1a14:	21 e0       	ldi	r18, 0x01	; 1
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	b9 01       	movw	r22, r18
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <nrk_gpio_set+0xb6>
    1a1c:	66 0f       	add	r22, r22
    1a1e:	77 1f       	adc	r23, r23
    1a20:	8a 95       	dec	r24
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <nrk_gpio_set+0xb2>
    1a24:	cb 01       	movw	r24, r22
    1a26:	84 2b       	or	r24, r20
    1a28:	81 bb       	out	0x11, r24	; 17
    1a2a:	0c c0       	rjmp	.+24     	; 0x1a44 <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1a2c:	44 b3       	in	r20, 0x14	; 20
    1a2e:	21 e0       	ldi	r18, 0x01	; 1
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	b9 01       	movw	r22, r18
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <nrk_gpio_set+0xd0>
    1a36:	66 0f       	add	r22, r22
    1a38:	77 1f       	adc	r23, r23
    1a3a:	8a 95       	dec	r24
    1a3c:	e2 f7       	brpl	.-8      	; 0x1a36 <nrk_gpio_set+0xcc>
    1a3e:	cb 01       	movw	r24, r22
    1a40:	84 2b       	or	r24, r20
    1a42:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1a46:	08 95       	ret
                default: return -1;
    1a48:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1a4a:	08 95       	ret

00001a4c <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1a4c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <nrk_gpio_clr+0x6>
    1a50:	73 c0       	rjmp	.+230    	; 0x1b38 <nrk_gpio_clr+0xec>
        switch (pin & 0x07) {
    1a52:	e8 2f       	mov	r30, r24
    1a54:	e7 70       	andi	r30, 0x07	; 7
    1a56:	4e 2f       	mov	r20, r30
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	47 30       	cpi	r20, 0x07	; 7
    1a5c:	51 05       	cpc	r21, r1
    1a5e:	08 f0       	brcs	.+2      	; 0x1a62 <nrk_gpio_clr+0x16>
    1a60:	6b c0       	rjmp	.+214    	; 0x1b38 <nrk_gpio_clr+0xec>
    1a62:	fa 01       	movw	r30, r20
    1a64:	e9 56       	subi	r30, 0x69	; 105
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	86 95       	lsr	r24
    1a6a:	86 95       	lsr	r24
    1a6c:	86 95       	lsr	r24
    1a6e:	0c 94 48 2a 	jmp	0x5490	; 0x5490 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1a72:	42 b1       	in	r20, 0x02	; 2
    1a74:	21 e0       	ldi	r18, 0x01	; 1
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	b9 01       	movw	r22, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <nrk_gpio_clr+0x34>
    1a7c:	66 0f       	add	r22, r22
    1a7e:	77 1f       	adc	r23, r23
    1a80:	8a 95       	dec	r24
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <nrk_gpio_clr+0x30>
    1a84:	cb 01       	movw	r24, r22
    1a86:	80 95       	com	r24
    1a88:	84 23       	and	r24, r20
    1a8a:	82 b9       	out	0x02, r24	; 2
    1a8c:	53 c0       	rjmp	.+166    	; 0x1b34 <nrk_gpio_clr+0xe8>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1a8e:	45 b1       	in	r20, 0x05	; 5
    1a90:	21 e0       	ldi	r18, 0x01	; 1
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	b9 01       	movw	r22, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <nrk_gpio_clr+0x50>
    1a98:	66 0f       	add	r22, r22
    1a9a:	77 1f       	adc	r23, r23
    1a9c:	8a 95       	dec	r24
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <nrk_gpio_clr+0x4c>
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	80 95       	com	r24
    1aa4:	84 23       	and	r24, r20
    1aa6:	85 b9       	out	0x05, r24	; 5
    1aa8:	45 c0       	rjmp	.+138    	; 0x1b34 <nrk_gpio_clr+0xe8>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1aaa:	48 b1       	in	r20, 0x08	; 8
    1aac:	21 e0       	ldi	r18, 0x01	; 1
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	b9 01       	movw	r22, r18
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <nrk_gpio_clr+0x6c>
    1ab4:	66 0f       	add	r22, r22
    1ab6:	77 1f       	adc	r23, r23
    1ab8:	8a 95       	dec	r24
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <nrk_gpio_clr+0x68>
    1abc:	cb 01       	movw	r24, r22
    1abe:	80 95       	com	r24
    1ac0:	84 23       	and	r24, r20
    1ac2:	88 b9       	out	0x08, r24	; 8
    1ac4:	37 c0       	rjmp	.+110    	; 0x1b34 <nrk_gpio_clr+0xe8>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1ac6:	4b b1       	in	r20, 0x0b	; 11
    1ac8:	21 e0       	ldi	r18, 0x01	; 1
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	b9 01       	movw	r22, r18
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <nrk_gpio_clr+0x88>
    1ad0:	66 0f       	add	r22, r22
    1ad2:	77 1f       	adc	r23, r23
    1ad4:	8a 95       	dec	r24
    1ad6:	e2 f7       	brpl	.-8      	; 0x1ad0 <nrk_gpio_clr+0x84>
    1ad8:	cb 01       	movw	r24, r22
    1ada:	80 95       	com	r24
    1adc:	84 23       	and	r24, r20
    1ade:	8b b9       	out	0x0b, r24	; 11
    1ae0:	29 c0       	rjmp	.+82     	; 0x1b34 <nrk_gpio_clr+0xe8>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1ae2:	4e b1       	in	r20, 0x0e	; 14
    1ae4:	21 e0       	ldi	r18, 0x01	; 1
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	b9 01       	movw	r22, r18
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <nrk_gpio_clr+0xa4>
    1aec:	66 0f       	add	r22, r22
    1aee:	77 1f       	adc	r23, r23
    1af0:	8a 95       	dec	r24
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <nrk_gpio_clr+0xa0>
    1af4:	cb 01       	movw	r24, r22
    1af6:	80 95       	com	r24
    1af8:	84 23       	and	r24, r20
    1afa:	8e b9       	out	0x0e, r24	; 14
    1afc:	1b c0       	rjmp	.+54     	; 0x1b34 <nrk_gpio_clr+0xe8>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1afe:	41 b3       	in	r20, 0x11	; 17
    1b00:	21 e0       	ldi	r18, 0x01	; 1
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	b9 01       	movw	r22, r18
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <nrk_gpio_clr+0xc0>
    1b08:	66 0f       	add	r22, r22
    1b0a:	77 1f       	adc	r23, r23
    1b0c:	8a 95       	dec	r24
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <nrk_gpio_clr+0xbc>
    1b10:	cb 01       	movw	r24, r22
    1b12:	80 95       	com	r24
    1b14:	84 23       	and	r24, r20
    1b16:	81 bb       	out	0x11, r24	; 17
    1b18:	0d c0       	rjmp	.+26     	; 0x1b34 <nrk_gpio_clr+0xe8>
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1b1a:	44 b3       	in	r20, 0x14	; 20
    1b1c:	21 e0       	ldi	r18, 0x01	; 1
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	b9 01       	movw	r22, r18
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <nrk_gpio_clr+0xdc>
    1b24:	66 0f       	add	r22, r22
    1b26:	77 1f       	adc	r23, r23
    1b28:	8a 95       	dec	r24
    1b2a:	e2 f7       	brpl	.-8      	; 0x1b24 <nrk_gpio_clr+0xd8>
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	80 95       	com	r24
    1b30:	84 23       	and	r24, r20
    1b32:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1b36:	08 95       	ret
                default: return -1;
    1b38:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1b3a:	08 95       	ret

00001b3c <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1b3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1b3e:	31 f1       	breq	.+76     	; 0x1b8c <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    1b40:	e8 2f       	mov	r30, r24
    1b42:	e7 70       	andi	r30, 0x07	; 7
    1b44:	4e 2f       	mov	r20, r30
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	47 30       	cpi	r20, 0x07	; 7
    1b4a:	51 05       	cpc	r21, r1
    1b4c:	f8 f4       	brcc	.+62     	; 0x1b8c <nrk_gpio_get+0x50>
    1b4e:	fa 01       	movw	r30, r20
    1b50:	e2 56       	subi	r30, 0x62	; 98
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	28 2f       	mov	r18, r24
    1b56:	26 95       	lsr	r18
    1b58:	26 95       	lsr	r18
    1b5a:	26 95       	lsr	r18
    1b5c:	0c 94 48 2a 	jmp	0x5490	; 0x5490 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    1b60:	90 b1       	in	r25, 0x00	; 0
    1b62:	0b c0       	rjmp	.+22     	; 0x1b7a <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    1b64:	93 b1       	in	r25, 0x03	; 3
    1b66:	09 c0       	rjmp	.+18     	; 0x1b7a <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    1b68:	96 b1       	in	r25, 0x06	; 6
    1b6a:	07 c0       	rjmp	.+14     	; 0x1b7a <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    1b6c:	99 b1       	in	r25, 0x09	; 9
    1b6e:	05 c0       	rjmp	.+10     	; 0x1b7a <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    1b70:	9c b1       	in	r25, 0x0c	; 12
    1b72:	03 c0       	rjmp	.+6      	; 0x1b7a <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    1b74:	9f b1       	in	r25, 0x0f	; 15
    1b76:	01 c0       	rjmp	.+2      	; 0x1b7a <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    1b78:	92 b3       	in	r25, 0x12	; 18
    1b7a:	89 2f       	mov	r24, r25
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <nrk_gpio_get+0x48>
    1b80:	95 95       	asr	r25
    1b82:	87 95       	ror	r24
    1b84:	2a 95       	dec	r18
    1b86:	e2 f7       	brpl	.-8      	; 0x1b80 <nrk_gpio_get+0x44>
    1b88:	81 70       	andi	r24, 0x01	; 1
    1b8a:	08 95       	ret
                default: return -1;
    1b8c:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1b8e:	08 95       	ret

00001b90 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    1b90:	8f 3f       	cpi	r24, 0xFF	; 255
    1b92:	09 f4       	brne	.+2      	; 0x1b96 <nrk_gpio_toggle+0x6>
    1b94:	06 c1       	rjmp	.+524    	; 0x1da2 <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    1b96:	e8 2f       	mov	r30, r24
    1b98:	e7 70       	andi	r30, 0x07	; 7
    1b9a:	4e 2f       	mov	r20, r30
    1b9c:	50 e0       	ldi	r21, 0x00	; 0
    1b9e:	47 30       	cpi	r20, 0x07	; 7
    1ba0:	51 05       	cpc	r21, r1
    1ba2:	08 f0       	brcs	.+2      	; 0x1ba6 <nrk_gpio_toggle+0x16>
    1ba4:	fe c0       	rjmp	.+508    	; 0x1da2 <nrk_gpio_toggle+0x212>
    1ba6:	fa 01       	movw	r30, r20
    1ba8:	eb 55       	subi	r30, 0x5B	; 91
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	86 95       	lsr	r24
    1bae:	86 95       	lsr	r24
    1bb0:	86 95       	lsr	r24
    1bb2:	0c 94 48 2a 	jmp	0x5490	; 0x5490 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    1bb6:	20 b1       	in	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	08 2e       	mov	r0, r24
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <nrk_gpio_toggle+0x32>
    1bbe:	35 95       	asr	r19
    1bc0:	27 95       	ror	r18
    1bc2:	0a 94       	dec	r0
    1bc4:	e2 f7       	brpl	.-8      	; 0x1bbe <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    1bc6:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    1bc8:	20 fd       	sbrc	r18, 0
    1bca:	0b c0       	rjmp	.+22     	; 0x1be2 <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    1bcc:	21 e0       	ldi	r18, 0x01	; 1
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	b9 01       	movw	r22, r18
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <nrk_gpio_toggle+0x48>
    1bd4:	66 0f       	add	r22, r22
    1bd6:	77 1f       	adc	r23, r23
    1bd8:	8a 95       	dec	r24
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <nrk_gpio_toggle+0x44>
    1bdc:	cb 01       	movw	r24, r22
    1bde:	84 2b       	or	r24, r20
    1be0:	0b c0       	rjmp	.+22     	; 0x1bf8 <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    1be2:	21 e0       	ldi	r18, 0x01	; 1
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	b9 01       	movw	r22, r18
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <nrk_gpio_toggle+0x5e>
    1bea:	66 0f       	add	r22, r22
    1bec:	77 1f       	adc	r23, r23
    1bee:	8a 95       	dec	r24
    1bf0:	e2 f7       	brpl	.-8      	; 0x1bea <nrk_gpio_toggle+0x5a>
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	80 95       	com	r24
    1bf6:	84 23       	and	r24, r20
    1bf8:	82 b9       	out	0x02, r24	; 2
    1bfa:	16 c0       	rjmp	.+44     	; 0x1c28 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1bfc:	23 b1       	in	r18, 0x03	; 3
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	08 2e       	mov	r0, r24
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <nrk_gpio_toggle+0x78>
    1c04:	35 95       	asr	r19
    1c06:	27 95       	ror	r18
    1c08:	0a 94       	dec	r0
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1c0c:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    1c0e:	20 fd       	sbrc	r18, 0
    1c10:	0d c0       	rjmp	.+26     	; 0x1c2c <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    1c12:	21 e0       	ldi	r18, 0x01	; 1
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	b9 01       	movw	r22, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <nrk_gpio_toggle+0x8e>
    1c1a:	66 0f       	add	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	8a 95       	dec	r24
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <nrk_gpio_toggle+0x8a>
    1c22:	cb 01       	movw	r24, r22
    1c24:	84 2b       	or	r24, r20
    1c26:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    1c2c:	21 e0       	ldi	r18, 0x01	; 1
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	b9 01       	movw	r22, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <nrk_gpio_toggle+0xa8>
    1c34:	66 0f       	add	r22, r22
    1c36:	77 1f       	adc	r23, r23
    1c38:	8a 95       	dec	r24
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <nrk_gpio_toggle+0xa4>
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	80 95       	com	r24
    1c40:	84 23       	and	r24, r20
    1c42:	f1 cf       	rjmp	.-30     	; 0x1c26 <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1c44:	26 b1       	in	r18, 0x06	; 6
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	08 2e       	mov	r0, r24
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <nrk_gpio_toggle+0xc0>
    1c4c:	35 95       	asr	r19
    1c4e:	27 95       	ror	r18
    1c50:	0a 94       	dec	r0
    1c52:	e2 f7       	brpl	.-8      	; 0x1c4c <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1c54:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    1c56:	20 fd       	sbrc	r18, 0
    1c58:	0b c0       	rjmp	.+22     	; 0x1c70 <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    1c5a:	21 e0       	ldi	r18, 0x01	; 1
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	b9 01       	movw	r22, r18
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <nrk_gpio_toggle+0xd6>
    1c62:	66 0f       	add	r22, r22
    1c64:	77 1f       	adc	r23, r23
    1c66:	8a 95       	dec	r24
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <nrk_gpio_toggle+0xd2>
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	84 2b       	or	r24, r20
    1c6e:	0b c0       	rjmp	.+22     	; 0x1c86 <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    1c70:	21 e0       	ldi	r18, 0x01	; 1
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	b9 01       	movw	r22, r18
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <nrk_gpio_toggle+0xec>
    1c78:	66 0f       	add	r22, r22
    1c7a:	77 1f       	adc	r23, r23
    1c7c:	8a 95       	dec	r24
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <nrk_gpio_toggle+0xe8>
    1c80:	cb 01       	movw	r24, r22
    1c82:	80 95       	com	r24
    1c84:	84 23       	and	r24, r20
    1c86:	88 b9       	out	0x08, r24	; 8
    1c88:	cf cf       	rjmp	.-98     	; 0x1c28 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    1c8a:	29 b1       	in	r18, 0x09	; 9
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	08 2e       	mov	r0, r24
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <nrk_gpio_toggle+0x106>
    1c92:	35 95       	asr	r19
    1c94:	27 95       	ror	r18
    1c96:	0a 94       	dec	r0
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    1c9a:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    1c9c:	20 fd       	sbrc	r18, 0
    1c9e:	0b c0       	rjmp	.+22     	; 0x1cb6 <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    1ca0:	21 e0       	ldi	r18, 0x01	; 1
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	b9 01       	movw	r22, r18
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <nrk_gpio_toggle+0x11c>
    1ca8:	66 0f       	add	r22, r22
    1caa:	77 1f       	adc	r23, r23
    1cac:	8a 95       	dec	r24
    1cae:	e2 f7       	brpl	.-8      	; 0x1ca8 <nrk_gpio_toggle+0x118>
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	84 2b       	or	r24, r20
    1cb4:	0b c0       	rjmp	.+22     	; 0x1ccc <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    1cb6:	21 e0       	ldi	r18, 0x01	; 1
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	b9 01       	movw	r22, r18
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <nrk_gpio_toggle+0x132>
    1cbe:	66 0f       	add	r22, r22
    1cc0:	77 1f       	adc	r23, r23
    1cc2:	8a 95       	dec	r24
    1cc4:	e2 f7       	brpl	.-8      	; 0x1cbe <nrk_gpio_toggle+0x12e>
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	80 95       	com	r24
    1cca:	84 23       	and	r24, r20
    1ccc:	8b b9       	out	0x0b, r24	; 11
    1cce:	ac cf       	rjmp	.-168    	; 0x1c28 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    1cd0:	2c b1       	in	r18, 0x0c	; 12
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	08 2e       	mov	r0, r24
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <nrk_gpio_toggle+0x14c>
    1cd8:	35 95       	asr	r19
    1cda:	27 95       	ror	r18
    1cdc:	0a 94       	dec	r0
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    1ce0:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    1ce2:	20 fd       	sbrc	r18, 0
    1ce4:	0b c0       	rjmp	.+22     	; 0x1cfc <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    1ce6:	21 e0       	ldi	r18, 0x01	; 1
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	b9 01       	movw	r22, r18
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <nrk_gpio_toggle+0x162>
    1cee:	66 0f       	add	r22, r22
    1cf0:	77 1f       	adc	r23, r23
    1cf2:	8a 95       	dec	r24
    1cf4:	e2 f7       	brpl	.-8      	; 0x1cee <nrk_gpio_toggle+0x15e>
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	84 2b       	or	r24, r20
    1cfa:	0b c0       	rjmp	.+22     	; 0x1d12 <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    1cfc:	21 e0       	ldi	r18, 0x01	; 1
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	b9 01       	movw	r22, r18
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <nrk_gpio_toggle+0x178>
    1d04:	66 0f       	add	r22, r22
    1d06:	77 1f       	adc	r23, r23
    1d08:	8a 95       	dec	r24
    1d0a:	e2 f7       	brpl	.-8      	; 0x1d04 <nrk_gpio_toggle+0x174>
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	80 95       	com	r24
    1d10:	84 23       	and	r24, r20
    1d12:	8e b9       	out	0x0e, r24	; 14
    1d14:	89 cf       	rjmp	.-238    	; 0x1c28 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    1d16:	2f b1       	in	r18, 0x0f	; 15
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	08 2e       	mov	r0, r24
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <nrk_gpio_toggle+0x192>
    1d1e:	35 95       	asr	r19
    1d20:	27 95       	ror	r18
    1d22:	0a 94       	dec	r0
    1d24:	e2 f7       	brpl	.-8      	; 0x1d1e <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    1d26:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    1d28:	20 fd       	sbrc	r18, 0
    1d2a:	0b c0       	rjmp	.+22     	; 0x1d42 <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    1d2c:	21 e0       	ldi	r18, 0x01	; 1
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	b9 01       	movw	r22, r18
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <nrk_gpio_toggle+0x1a8>
    1d34:	66 0f       	add	r22, r22
    1d36:	77 1f       	adc	r23, r23
    1d38:	8a 95       	dec	r24
    1d3a:	e2 f7       	brpl	.-8      	; 0x1d34 <nrk_gpio_toggle+0x1a4>
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	84 2b       	or	r24, r20
    1d40:	0b c0       	rjmp	.+22     	; 0x1d58 <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    1d42:	21 e0       	ldi	r18, 0x01	; 1
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	b9 01       	movw	r22, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <nrk_gpio_toggle+0x1be>
    1d4a:	66 0f       	add	r22, r22
    1d4c:	77 1f       	adc	r23, r23
    1d4e:	8a 95       	dec	r24
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <nrk_gpio_toggle+0x1ba>
    1d52:	cb 01       	movw	r24, r22
    1d54:	80 95       	com	r24
    1d56:	84 23       	and	r24, r20
    1d58:	81 bb       	out	0x11, r24	; 17
    1d5a:	66 cf       	rjmp	.-308    	; 0x1c28 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    1d5c:	22 b3       	in	r18, 0x12	; 18
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	08 2e       	mov	r0, r24
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <nrk_gpio_toggle+0x1d8>
    1d64:	35 95       	asr	r19
    1d66:	27 95       	ror	r18
    1d68:	0a 94       	dec	r0
    1d6a:	e2 f7       	brpl	.-8      	; 0x1d64 <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    1d6c:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    1d6e:	20 fd       	sbrc	r18, 0
    1d70:	0b c0       	rjmp	.+22     	; 0x1d88 <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    1d72:	21 e0       	ldi	r18, 0x01	; 1
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	b9 01       	movw	r22, r18
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <nrk_gpio_toggle+0x1ee>
    1d7a:	66 0f       	add	r22, r22
    1d7c:	77 1f       	adc	r23, r23
    1d7e:	8a 95       	dec	r24
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <nrk_gpio_toggle+0x1ea>
    1d82:	cb 01       	movw	r24, r22
    1d84:	84 2b       	or	r24, r20
    1d86:	0b c0       	rjmp	.+22     	; 0x1d9e <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    1d88:	21 e0       	ldi	r18, 0x01	; 1
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	b9 01       	movw	r22, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <nrk_gpio_toggle+0x204>
    1d90:	66 0f       	add	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	8a 95       	dec	r24
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <nrk_gpio_toggle+0x200>
    1d98:	cb 01       	movw	r24, r22
    1d9a:	80 95       	com	r24
    1d9c:	84 23       	and	r24, r20
    1d9e:	84 bb       	out	0x14, r24	; 20
    1da0:	43 cf       	rjmp	.-378    	; 0x1c28 <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    1da2:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1da4:	08 95       	ret

00001da6 <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1da6:	8f 3f       	cpi	r24, 0xFF	; 255
    1da8:	09 f4       	brne	.+2      	; 0x1dac <nrk_gpio_direction+0x6>
    1daa:	d5 c0       	rjmp	.+426    	; 0x1f56 <nrk_gpio_direction+0x1b0>
    1dac:	e8 2f       	mov	r30, r24
    1dae:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    1db0:	4e 2f       	mov	r20, r30
    1db2:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    1db4:	61 11       	cpse	r22, r1
    1db6:	67 c0       	rjmp	.+206    	; 0x1e86 <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    1db8:	47 30       	cpi	r20, 0x07	; 7
    1dba:	51 05       	cpc	r21, r1
    1dbc:	08 f0       	brcs	.+2      	; 0x1dc0 <nrk_gpio_direction+0x1a>
    1dbe:	cb c0       	rjmp	.+406    	; 0x1f56 <nrk_gpio_direction+0x1b0>
    1dc0:	fa 01       	movw	r30, r20
    1dc2:	e4 55       	subi	r30, 0x54	; 84
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	86 95       	lsr	r24
    1dc8:	86 95       	lsr	r24
    1dca:	86 95       	lsr	r24
    1dcc:	0c 94 48 2a 	jmp	0x5490	; 0x5490 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    1dd0:	41 b1       	in	r20, 0x01	; 1
    1dd2:	21 e0       	ldi	r18, 0x01	; 1
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	b9 01       	movw	r22, r18
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <nrk_gpio_direction+0x38>
    1dda:	66 0f       	add	r22, r22
    1ddc:	77 1f       	adc	r23, r23
    1dde:	8a 95       	dec	r24
    1de0:	e2 f7       	brpl	.-8      	; 0x1dda <nrk_gpio_direction+0x34>
    1de2:	cb 01       	movw	r24, r22
    1de4:	80 95       	com	r24
    1de6:	84 23       	and	r24, r20
    1de8:	65 c0       	rjmp	.+202    	; 0x1eb4 <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    1dea:	44 b1       	in	r20, 0x04	; 4
    1dec:	21 e0       	ldi	r18, 0x01	; 1
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	b9 01       	movw	r22, r18
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <nrk_gpio_direction+0x52>
    1df4:	66 0f       	add	r22, r22
    1df6:	77 1f       	adc	r23, r23
    1df8:	8a 95       	dec	r24
    1dfa:	e2 f7       	brpl	.-8      	; 0x1df4 <nrk_gpio_direction+0x4e>
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	80 95       	com	r24
    1e00:	84 23       	and	r24, r20
    1e02:	65 c0       	rjmp	.+202    	; 0x1ece <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    1e04:	47 b1       	in	r20, 0x07	; 7
    1e06:	21 e0       	ldi	r18, 0x01	; 1
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	b9 01       	movw	r22, r18
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <nrk_gpio_direction+0x6c>
    1e0e:	66 0f       	add	r22, r22
    1e10:	77 1f       	adc	r23, r23
    1e12:	8a 95       	dec	r24
    1e14:	e2 f7       	brpl	.-8      	; 0x1e0e <nrk_gpio_direction+0x68>
    1e16:	cb 01       	movw	r24, r22
    1e18:	80 95       	com	r24
    1e1a:	84 23       	and	r24, r20
    1e1c:	65 c0       	rjmp	.+202    	; 0x1ee8 <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    1e1e:	4a b1       	in	r20, 0x0a	; 10
    1e20:	21 e0       	ldi	r18, 0x01	; 1
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	b9 01       	movw	r22, r18
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <nrk_gpio_direction+0x86>
    1e28:	66 0f       	add	r22, r22
    1e2a:	77 1f       	adc	r23, r23
    1e2c:	8a 95       	dec	r24
    1e2e:	e2 f7       	brpl	.-8      	; 0x1e28 <nrk_gpio_direction+0x82>
    1e30:	cb 01       	movw	r24, r22
    1e32:	80 95       	com	r24
    1e34:	84 23       	and	r24, r20
    1e36:	65 c0       	rjmp	.+202    	; 0x1f02 <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    1e38:	4d b1       	in	r20, 0x0d	; 13
    1e3a:	21 e0       	ldi	r18, 0x01	; 1
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	b9 01       	movw	r22, r18
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <nrk_gpio_direction+0xa0>
    1e42:	66 0f       	add	r22, r22
    1e44:	77 1f       	adc	r23, r23
    1e46:	8a 95       	dec	r24
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <nrk_gpio_direction+0x9c>
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	80 95       	com	r24
    1e4e:	84 23       	and	r24, r20
    1e50:	65 c0       	rjmp	.+202    	; 0x1f1c <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    1e52:	40 b3       	in	r20, 0x10	; 16
    1e54:	21 e0       	ldi	r18, 0x01	; 1
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	b9 01       	movw	r22, r18
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <nrk_gpio_direction+0xba>
    1e5c:	66 0f       	add	r22, r22
    1e5e:	77 1f       	adc	r23, r23
    1e60:	8a 95       	dec	r24
    1e62:	e2 f7       	brpl	.-8      	; 0x1e5c <nrk_gpio_direction+0xb6>
    1e64:	cb 01       	movw	r24, r22
    1e66:	80 95       	com	r24
    1e68:	84 23       	and	r24, r20
    1e6a:	65 c0       	rjmp	.+202    	; 0x1f36 <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    1e6c:	43 b3       	in	r20, 0x13	; 19
    1e6e:	21 e0       	ldi	r18, 0x01	; 1
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	b9 01       	movw	r22, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <nrk_gpio_direction+0xd4>
    1e76:	66 0f       	add	r22, r22
    1e78:	77 1f       	adc	r23, r23
    1e7a:	8a 95       	dec	r24
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <nrk_gpio_direction+0xd0>
    1e7e:	cb 01       	movw	r24, r22
    1e80:	80 95       	com	r24
    1e82:	84 23       	and	r24, r20
    1e84:	65 c0       	rjmp	.+202    	; 0x1f50 <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    1e86:	47 30       	cpi	r20, 0x07	; 7
    1e88:	51 05       	cpc	r21, r1
    1e8a:	08 f0       	brcs	.+2      	; 0x1e8e <nrk_gpio_direction+0xe8>
    1e8c:	64 c0       	rjmp	.+200    	; 0x1f56 <nrk_gpio_direction+0x1b0>
    1e8e:	fa 01       	movw	r30, r20
    1e90:	ed 54       	subi	r30, 0x4D	; 77
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	86 95       	lsr	r24
    1e96:	86 95       	lsr	r24
    1e98:	86 95       	lsr	r24
    1e9a:	0c 94 48 2a 	jmp	0x5490	; 0x5490 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    1e9e:	41 b1       	in	r20, 0x01	; 1
    1ea0:	21 e0       	ldi	r18, 0x01	; 1
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	b9 01       	movw	r22, r18
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <nrk_gpio_direction+0x106>
    1ea8:	66 0f       	add	r22, r22
    1eaa:	77 1f       	adc	r23, r23
    1eac:	8a 95       	dec	r24
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <nrk_gpio_direction+0x102>
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	84 2b       	or	r24, r20
    1eb4:	81 b9       	out	0x01, r24	; 1
    1eb6:	4d c0       	rjmp	.+154    	; 0x1f52 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    1eb8:	44 b1       	in	r20, 0x04	; 4
    1eba:	21 e0       	ldi	r18, 0x01	; 1
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	b9 01       	movw	r22, r18
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <nrk_gpio_direction+0x120>
    1ec2:	66 0f       	add	r22, r22
    1ec4:	77 1f       	adc	r23, r23
    1ec6:	8a 95       	dec	r24
    1ec8:	e2 f7       	brpl	.-8      	; 0x1ec2 <nrk_gpio_direction+0x11c>
    1eca:	cb 01       	movw	r24, r22
    1ecc:	84 2b       	or	r24, r20
    1ece:	84 b9       	out	0x04, r24	; 4
    1ed0:	40 c0       	rjmp	.+128    	; 0x1f52 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    1ed2:	47 b1       	in	r20, 0x07	; 7
    1ed4:	21 e0       	ldi	r18, 0x01	; 1
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	b9 01       	movw	r22, r18
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <nrk_gpio_direction+0x13a>
    1edc:	66 0f       	add	r22, r22
    1ede:	77 1f       	adc	r23, r23
    1ee0:	8a 95       	dec	r24
    1ee2:	e2 f7       	brpl	.-8      	; 0x1edc <nrk_gpio_direction+0x136>
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	84 2b       	or	r24, r20
    1ee8:	87 b9       	out	0x07, r24	; 7
    1eea:	33 c0       	rjmp	.+102    	; 0x1f52 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    1eec:	4a b1       	in	r20, 0x0a	; 10
    1eee:	21 e0       	ldi	r18, 0x01	; 1
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	b9 01       	movw	r22, r18
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <nrk_gpio_direction+0x154>
    1ef6:	66 0f       	add	r22, r22
    1ef8:	77 1f       	adc	r23, r23
    1efa:	8a 95       	dec	r24
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <nrk_gpio_direction+0x150>
    1efe:	cb 01       	movw	r24, r22
    1f00:	84 2b       	or	r24, r20
    1f02:	8a b9       	out	0x0a, r24	; 10
    1f04:	26 c0       	rjmp	.+76     	; 0x1f52 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    1f06:	4d b1       	in	r20, 0x0d	; 13
    1f08:	21 e0       	ldi	r18, 0x01	; 1
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	b9 01       	movw	r22, r18
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <nrk_gpio_direction+0x16e>
    1f10:	66 0f       	add	r22, r22
    1f12:	77 1f       	adc	r23, r23
    1f14:	8a 95       	dec	r24
    1f16:	e2 f7       	brpl	.-8      	; 0x1f10 <nrk_gpio_direction+0x16a>
    1f18:	cb 01       	movw	r24, r22
    1f1a:	84 2b       	or	r24, r20
    1f1c:	8d b9       	out	0x0d, r24	; 13
    1f1e:	19 c0       	rjmp	.+50     	; 0x1f52 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    1f20:	40 b3       	in	r20, 0x10	; 16
    1f22:	21 e0       	ldi	r18, 0x01	; 1
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	b9 01       	movw	r22, r18
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <nrk_gpio_direction+0x188>
    1f2a:	66 0f       	add	r22, r22
    1f2c:	77 1f       	adc	r23, r23
    1f2e:	8a 95       	dec	r24
    1f30:	e2 f7       	brpl	.-8      	; 0x1f2a <nrk_gpio_direction+0x184>
    1f32:	cb 01       	movw	r24, r22
    1f34:	84 2b       	or	r24, r20
    1f36:	80 bb       	out	0x10, r24	; 16
    1f38:	0c c0       	rjmp	.+24     	; 0x1f52 <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    1f3a:	43 b3       	in	r20, 0x13	; 19
    1f3c:	21 e0       	ldi	r18, 0x01	; 1
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	b9 01       	movw	r22, r18
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <nrk_gpio_direction+0x1a2>
    1f44:	66 0f       	add	r22, r22
    1f46:	77 1f       	adc	r23, r23
    1f48:	8a 95       	dec	r24
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <nrk_gpio_direction+0x19e>
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	84 2b       	or	r24, r20
    1f50:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    1f54:	08 95       	ret
                        default: return -1;
    1f56:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    1f58:	08 95       	ret

00001f5a <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    1f5a:	81 11       	cpse	r24, r1
    1f5c:	06 c0       	rjmp	.+12     	; 0x1f6a <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    1f5e:	80 b1       	in	r24, 0x00	; 0
    1f60:	86 95       	lsr	r24
    1f62:	81 70       	andi	r24, 0x01	; 1
    1f64:	91 e0       	ldi	r25, 0x01	; 1
    1f66:	89 27       	eor	r24, r25
    1f68:	08 95       	ret
	} 
return -1;
    1f6a:	8f ef       	ldi	r24, 0xFF	; 255
}
    1f6c:	08 95       	ret

00001f6e <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    1f6e:	00 97       	sbiw	r24, 0x00	; 0
    1f70:	11 f4       	brne	.+4      	; 0x1f76 <nrk_led_toggle+0x8>
    1f72:	83 e2       	ldi	r24, 0x23	; 35
    1f74:	0d c0       	rjmp	.+26     	; 0x1f90 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    1f76:	81 30       	cpi	r24, 0x01	; 1
    1f78:	91 05       	cpc	r25, r1
    1f7a:	11 f4       	brne	.+4      	; 0x1f80 <nrk_led_toggle+0x12>
    1f7c:	8b e2       	ldi	r24, 0x2B	; 43
    1f7e:	08 c0       	rjmp	.+16     	; 0x1f90 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    1f80:	82 30       	cpi	r24, 0x02	; 2
    1f82:	91 05       	cpc	r25, r1
    1f84:	11 f4       	brne	.+4      	; 0x1f8a <nrk_led_toggle+0x1c>
    1f86:	83 e3       	ldi	r24, 0x33	; 51
    1f88:	03 c0       	rjmp	.+6      	; 0x1f90 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    1f8a:	03 97       	sbiw	r24, 0x03	; 3
    1f8c:	29 f4       	brne	.+10     	; 0x1f98 <nrk_led_toggle+0x2a>
    1f8e:	8b e3       	ldi	r24, 0x3B	; 59
    1f90:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <nrk_gpio_toggle>
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	08 95       	ret
return -1;
    1f98:	8f ef       	ldi	r24, 0xFF	; 255
}
    1f9a:	08 95       	ret

00001f9c <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	11 f4       	brne	.+4      	; 0x1fa4 <nrk_led_clr+0x8>
    1fa0:	83 e2       	ldi	r24, 0x23	; 35
    1fa2:	0d c0       	rjmp	.+26     	; 0x1fbe <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    1fa4:	81 30       	cpi	r24, 0x01	; 1
    1fa6:	91 05       	cpc	r25, r1
    1fa8:	11 f4       	brne	.+4      	; 0x1fae <nrk_led_clr+0x12>
    1faa:	8b e2       	ldi	r24, 0x2B	; 43
    1fac:	08 c0       	rjmp	.+16     	; 0x1fbe <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    1fae:	82 30       	cpi	r24, 0x02	; 2
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	11 f4       	brne	.+4      	; 0x1fb8 <nrk_led_clr+0x1c>
    1fb4:	83 e3       	ldi	r24, 0x33	; 51
    1fb6:	03 c0       	rjmp	.+6      	; 0x1fbe <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    1fb8:	03 97       	sbiw	r24, 0x03	; 3
    1fba:	29 f4       	brne	.+10     	; 0x1fc6 <nrk_led_clr+0x2a>
    1fbc:	8b e3       	ldi	r24, 0x3B	; 59
    1fbe:	0e 94 b5 0c 	call	0x196a	; 0x196a <nrk_gpio_set>
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	08 95       	ret
return -1;
    1fc6:	8f ef       	ldi	r24, 0xFF	; 255
}
    1fc8:	08 95       	ret

00001fca <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	11 f4       	brne	.+4      	; 0x1fd2 <nrk_led_set+0x8>
    1fce:	83 e2       	ldi	r24, 0x23	; 35
    1fd0:	0d c0       	rjmp	.+26     	; 0x1fec <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    1fd2:	81 30       	cpi	r24, 0x01	; 1
    1fd4:	91 05       	cpc	r25, r1
    1fd6:	11 f4       	brne	.+4      	; 0x1fdc <nrk_led_set+0x12>
    1fd8:	8b e2       	ldi	r24, 0x2B	; 43
    1fda:	08 c0       	rjmp	.+16     	; 0x1fec <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    1fdc:	82 30       	cpi	r24, 0x02	; 2
    1fde:	91 05       	cpc	r25, r1
    1fe0:	11 f4       	brne	.+4      	; 0x1fe6 <nrk_led_set+0x1c>
    1fe2:	83 e3       	ldi	r24, 0x33	; 51
    1fe4:	03 c0       	rjmp	.+6      	; 0x1fec <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    1fe6:	03 97       	sbiw	r24, 0x03	; 3
    1fe8:	29 f4       	brne	.+10     	; 0x1ff4 <nrk_led_set+0x2a>
    1fea:	8b e3       	ldi	r24, 0x3B	; 59
    1fec:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <nrk_gpio_clr>
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	08 95       	ret
return -1;
    1ff4:	8f ef       	ldi	r24, 0xFF	; 255
}
    1ff6:	08 95       	ret

00001ff8 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    1ff8:	88 23       	and	r24, r24
    1ffa:	19 f0       	breq	.+6      	; 0x2002 <nrk_gpio_pullups+0xa>
    1ffc:	85 b7       	in	r24, 0x35	; 53
    1ffe:	8f 7e       	andi	r24, 0xEF	; 239
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    2002:	85 b7       	in	r24, 0x35	; 53
    2004:	80 61       	ori	r24, 0x10	; 16
    2006:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	08 95       	ret

0000200c <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    200c:	90 91 c8 00 	lds	r25, 0x00C8
    2010:	95 ff       	sbrs	r25, 5
    2012:	fc cf       	rjmp	.-8      	; 0x200c <putc1>
    2014:	80 93 ce 00 	sts	0x00CE, r24
    2018:	08 95       	ret

0000201a <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    201a:	90 93 c5 00 	sts	0x00C5, r25
    201e:	80 93 c4 00 	sts	0x00C4, r24
    2022:	86 e0       	ldi	r24, 0x06	; 6
    2024:	80 93 c2 00 	sts	0x00C2, r24
    2028:	e1 ec       	ldi	r30, 0xC1	; 193
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	8b 7f       	andi	r24, 0xFB	; 251
    2030:	80 83       	st	Z, r24
    2032:	a0 ec       	ldi	r26, 0xC0	; 192
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	8c 91       	ld	r24, X
    2038:	82 60       	ori	r24, 0x02	; 2
    203a:	8c 93       	st	X, r24
ENABLE_UART0();
    203c:	80 81       	ld	r24, Z
    203e:	88 61       	ori	r24, 0x18	; 24
    2040:	80 83       	st	Z, r24
    2042:	08 95       	ret

00002044 <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2044:	90 93 cd 00 	sts	0x00CD, r25
    2048:	80 93 cc 00 	sts	0x00CC, r24
    204c:	86 e0       	ldi	r24, 0x06	; 6
    204e:	80 93 ca 00 	sts	0x00CA, r24
    2052:	e9 ec       	ldi	r30, 0xC9	; 201
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	8b 7f       	andi	r24, 0xFB	; 251
    205a:	80 83       	st	Z, r24
    205c:	a8 ec       	ldi	r26, 0xC8	; 200
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	8c 91       	ld	r24, X
    2062:	82 60       	ori	r24, 0x02	; 2
    2064:	8c 93       	st	X, r24
ENABLE_UART1();
    2066:	80 81       	ld	r24, Z
    2068:	88 61       	ori	r24, 0x18	; 24
    206a:	80 83       	st	Z, r24
    206c:	08 95       	ret

0000206e <nrk_setup_uart>:
 *
 * More advanced UART usage will require manually
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    2072:	0e 94 0d 10 	call	0x201a	; 0x201a <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    2076:	6b e6       	ldi	r22, 0x6B	; 107
    2078:	7c e0       	ldi	r23, 0x0C	; 12
    207a:	87 e7       	ldi	r24, 0x77	; 119
    207c:	9c e0       	ldi	r25, 0x0C	; 12
    207e:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <fdevopen>
    2082:	cc ef       	ldi	r28, 0xFC	; 252
    2084:	d7 e0       	ldi	r29, 0x07	; 7
    2086:	9b 83       	std	Y+3, r25	; 0x03
    2088:	8a 83       	std	Y+2, r24	; 0x02
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    208a:	6b e6       	ldi	r22, 0x6B	; 107
    208c:	7c e0       	ldi	r23, 0x0C	; 12
    208e:	87 e7       	ldi	r24, 0x77	; 119
    2090:	9c e0       	ldi	r25, 0x0C	; 12
    2092:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <fdevopen>
    2096:	99 83       	std	Y+1, r25	; 0x01
    2098:	88 83       	st	Y, r24
   uart_rx_buf_start=0;
   uart_rx_buf_end=0;
   ENABLE_UART0_RX_INT();
#endif

}
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	08 95       	ret

000020a0 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    20a0:	80 91 c8 00 	lds	r24, 0x00C8
    20a4:	87 ff       	sbrs	r24, 7
    20a6:	fc cf       	rjmp	.-8      	; 0x20a0 <getc1>
    20a8:	80 91 c8 00 	lds	r24, 0x00C8
    20ac:	8f 77       	andi	r24, 0x7F	; 127
    20ae:	80 93 c8 00 	sts	0x00C8, r24
    20b2:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    20b6:	08 95       	ret

000020b8 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	d1 f7       	brne	.-12     	; 0x20b8 <halWait>

} // halWait
    20c4:	08 95       	ret

000020c6 <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    20c6:	0c 94 3b 2c 	jmp	0x5876	; 0x5876 <__eerd_byte_m128rfa1>

000020ca <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    20ca:	0e 94 43 2c 	call	0x5886	; 0x5886 <__eewr_byte_m128rfa1>
}
    20ce:	08 95       	ret

000020d0 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    20d0:	ef 92       	push	r14
    20d2:	ff 92       	push	r15
    20d4:	0f 93       	push	r16
    20d6:	1f 93       	push	r17
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__eerd_byte_m128rfa1>
    20e6:	18 2f       	mov	r17, r24
    20e8:	f7 01       	movw	r30, r14
    20ea:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__eerd_byte_m128rfa1>
    20f4:	08 2f       	mov	r16, r24
    20f6:	f7 01       	movw	r30, r14
    20f8:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    20fa:	82 e0       	ldi	r24, 0x02	; 2
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__eerd_byte_m128rfa1>
    2102:	d8 2f       	mov	r29, r24
    2104:	f7 01       	movw	r30, r14
    2106:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    2108:	83 e0       	ldi	r24, 0x03	; 3
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__eerd_byte_m128rfa1>
    2110:	c8 2f       	mov	r28, r24
    2112:	f7 01       	movw	r30, r14
    2114:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    2116:	84 e0       	ldi	r24, 0x04	; 4
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__eerd_byte_m128rfa1>
    211e:	10 0f       	add	r17, r16
    2120:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    2122:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    2124:	8c 17       	cp	r24, r28
    2126:	11 f0       	breq	.+4      	; 0x212c <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    2128:	8f ef       	ldi	r24, 0xFF	; 255
    212a:	01 c0       	rjmp	.+2      	; 0x212e <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    212c:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    212e:	df 91       	pop	r29
    2130:	cf 91       	pop	r28
    2132:	1f 91       	pop	r17
    2134:	0f 91       	pop	r16
    2136:	ff 90       	pop	r15
    2138:	ef 90       	pop	r14
    213a:	08 95       	ret

0000213c <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    2142:	85 e0       	ldi	r24, 0x05	; 5
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__eerd_byte_m128rfa1>
    214a:	88 83       	st	Y, r24
return NRK_OK;
}
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	df 91       	pop	r29
    2150:	cf 91       	pop	r28
    2152:	08 95       	ret

00002154 <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    2154:	fc 01       	movw	r30, r24
    2156:	60 81       	ld	r22, Z
    2158:	86 e0       	ldi	r24, 0x06	; 6
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	0e 94 43 2c 	call	0x5886	; 0x5886 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	08 95       	ret

00002164 <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
    2168:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    216a:	86 e0       	ldi	r24, 0x06	; 6
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__eerd_byte_m128rfa1>
    2172:	88 83       	st	Y, r24
  return NRK_OK;
}
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	08 95       	ret

0000217c <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    217c:	0f 93       	push	r16
    217e:	1f 93       	push	r17
    2180:	cf 93       	push	r28
    2182:	df 93       	push	r29
    2184:	8c 01       	movw	r16, r24
    2186:	c0 e0       	ldi	r28, 0x00	; 0
    2188:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    218a:	ce 01       	movw	r24, r28
    218c:	08 96       	adiw	r24, 0x08	; 8
    218e:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__eerd_byte_m128rfa1>
    2192:	f8 01       	movw	r30, r16
    2194:	81 93       	st	Z+, r24
    2196:	8f 01       	movw	r16, r30
    2198:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    219a:	c0 31       	cpi	r28, 0x10	; 16
    219c:	d1 05       	cpc	r29, r1
    219e:	a9 f7       	brne	.-22     	; 0x218a <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	df 91       	pop	r29
    21a4:	cf 91       	pop	r28
    21a6:	1f 91       	pop	r17
    21a8:	0f 91       	pop	r16
    21aa:	08 95       	ret

000021ac <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    21ac:	0f 93       	push	r16
    21ae:	1f 93       	push	r17
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	8c 01       	movw	r16, r24
    21b6:	c0 e0       	ldi	r28, 0x00	; 0
    21b8:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    21ba:	f8 01       	movw	r30, r16
    21bc:	61 91       	ld	r22, Z+
    21be:	8f 01       	movw	r16, r30
    21c0:	ce 01       	movw	r24, r28
    21c2:	08 96       	adiw	r24, 0x08	; 8
    21c4:	0e 94 43 2c 	call	0x5886	; 0x5886 <__eewr_byte_m128rfa1>
    21c8:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    21ca:	c0 31       	cpi	r28, 0x10	; 16
    21cc:	d1 05       	cpc	r29, r1
    21ce:	a9 f7       	brne	.-22     	; 0x21ba <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	df 91       	pop	r29
    21d4:	cf 91       	pop	r28
    21d6:	1f 91       	pop	r17
    21d8:	0f 91       	pop	r16
    21da:	08 95       	ret

000021dc <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    21dc:	cf 93       	push	r28
    21de:	df 93       	push	r29
    21e0:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    21e2:	87 e0       	ldi	r24, 0x07	; 7
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__eerd_byte_m128rfa1>
    21ea:	88 83       	st	Y, r24
  return NRK_OK;
}
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	08 95       	ret

000021f4 <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    21f4:	fc 01       	movw	r30, r24
    21f6:	60 81       	ld	r22, Z
    21f8:	87 e0       	ldi	r24, 0x07	; 7
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	0e 94 43 2c 	call	0x5886	; 0x5886 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	08 95       	ret

00002204 <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    2204:	f8 94       	cli
    2206:	08 95       	ret

00002208 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    2208:	78 94       	sei
    220a:	08 95       	ret

0000220c <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    220c:	0e 94 02 11 	call	0x2204	; 0x2204 <nrk_int_disable>
while(1);
    2210:	ff cf       	rjmp	.-2      	; 0x2210 <nrk_halt+0x4>

00002212 <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	a3 97       	sbiw	r28, 0x23	; 35
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    2226:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <nrk_signal_create>
    222a:	80 93 cb 07 	sts	0x07CB, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    222e:	8f 3f       	cpi	r24, 0xFF	; 255
    2230:	21 f4       	brne	.+8      	; 0x223a <nrk_init+0x28>
    2232:	60 e0       	ldi	r22, 0x00	; 0
    2234:	8e e0       	ldi	r24, 0x0E	; 14
    2236:	0e 94 4e 13 	call	0x269c	; 0x269c <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    223a:	0e 94 ce 24 	call	0x499c	; 0x499c <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    223e:	80 ff       	sbrs	r24, 0
    2240:	04 c0       	rjmp	.+8      	; 0x224a <nrk_init+0x38>
    2242:	60 e0       	ldi	r22, 0x00	; 0
    2244:	86 e0       	ldi	r24, 0x06	; 6
    2246:	0e 94 4e 13 	call	0x269c	; 0x269c <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    224a:	10 92 ce 07 	sts	0x07CE, r1
    nrk_cur_task_TCB = NULL;
    224e:	10 92 dc 07 	sts	0x07DC, r1
    2252:	10 92 db 07 	sts	0x07DB, r1
    
    nrk_high_ready_TCB = NULL;
    2256:	10 92 cd 07 	sts	0x07CD, r1
    225a:	10 92 cc 07 	sts	0x07CC, r1
    nrk_high_ready_prio = 0; 
    225e:	10 92 dd 07 	sts	0x07DD, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    2262:	10 92 da 07 	sts	0x07DA, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    2266:	8f ef       	ldi	r24, 0xFF	; 255
    2268:	80 93 c4 07 	sts	0x07C4, r24
    nrk_sem_list[i].value=-1;
    226c:	80 93 c6 07 	sts	0x07C6, r24
    nrk_sem_list[i].resource_ceiling=-1;
    2270:	80 93 c5 07 	sts	0x07C5, r24

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    2274:	80 93 c7 07 	sts	0x07C7, r24
    nrk_sem_list[i].value=-1;
    2278:	80 93 c9 07 	sts	0x07C9, r24
    nrk_sem_list[i].resource_ceiling=-1;
    227c:	80 93 c8 07 	sts	0x07C8, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2280:	93 e6       	ldi	r25, 0x63	; 99
    2282:	90 93 76 07 	sts	0x0776, r25
        nrk_task_TCB[i].task_ID = -1; 
    2286:	80 93 74 07 	sts	0x0774, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    228a:	90 93 a1 07 	sts	0x07A1, r25
        nrk_task_TCB[i].task_ID = -1; 
    228e:	80 93 9f 07 	sts	0x079F, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2292:	8e ed       	ldi	r24, 0xDE	; 222
    2294:	97 e0       	ldi	r25, 0x07	; 7
    2296:	23 ee       	ldi	r18, 0xE3	; 227
    2298:	37 e0       	ldi	r19, 0x07	; 7
    229a:	30 93 e2 07 	sts	0x07E2, r19
    229e:	20 93 e1 07 	sts	0x07E1, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    22a2:	90 93 e5 07 	sts	0x07E5, r25
    22a6:	80 93 e4 07 	sts	0x07E4, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    22aa:	48 ee       	ldi	r20, 0xE8	; 232
    22ac:	57 e0       	ldi	r21, 0x07	; 7
    22ae:	50 93 e7 07 	sts	0x07E7, r21
    22b2:	40 93 e6 07 	sts	0x07E6, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    22b6:	30 93 ea 07 	sts	0x07EA, r19
    22ba:	20 93 e9 07 	sts	0x07E9, r18
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    22be:	10 92 e0 07 	sts	0x07E0, r1
    22c2:	10 92 df 07 	sts	0x07DF, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    22c6:	10 92 ec 07 	sts	0x07EC, r1
    22ca:	10 92 eb 07 	sts	0x07EB, r1
	_head_node = NULL;
    22ce:	10 92 d1 07 	sts	0x07D1, r1
    22d2:	10 92 d0 07 	sts	0x07D0, r1
	_free_node = &_nrk_readyQ[0];
    22d6:	90 93 6b 07 	sts	0x076B, r25
    22da:	80 93 6a 07 	sts	0x076A, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    22de:	6d e3       	ldi	r22, 0x3D	; 61
    22e0:	7f e1       	ldi	r23, 0x1F	; 31
    22e2:	ce 01       	movw	r24, r28
    22e4:	01 96       	adiw	r24, 0x01	; 1
    22e6:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    22ea:	40 e8       	ldi	r20, 0x80	; 128
    22ec:	50 e0       	ldi	r21, 0x00	; 0
    22ee:	6e e7       	ldi	r22, 0x7E	; 126
    22f0:	76 e0       	ldi	r23, 0x06	; 6
    22f2:	ce 01       	movw	r24, r28
    22f4:	01 96       	adiw	r24, 0x01	; 1
    22f6:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    22fa:	85 e5       	ldi	r24, 0x55	; 85
    22fc:	80 93 7e 06 	sts	0x067E, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    2300:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    2302:	1c 86       	std	Y+12, r1	; 0x0c
    2304:	1d 86       	std	Y+13, r1	; 0x0d
    2306:	1e 86       	std	Y+14, r1	; 0x0e
    2308:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    230a:	18 8a       	std	Y+16, r1	; 0x10
    230c:	19 8a       	std	Y+17, r1	; 0x11
    230e:	1a 8a       	std	Y+18, r1	; 0x12
    2310:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    2312:	1c 8a       	std	Y+20, r1	; 0x14
    2314:	1d 8a       	std	Y+21, r1	; 0x15
    2316:	1e 8a       	std	Y+22, r1	; 0x16
    2318:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    231a:	18 8e       	std	Y+24, r1	; 0x18
    231c:	19 8e       	std	Y+25, r1	; 0x19
    231e:	1a 8e       	std	Y+26, r1	; 0x1a
    2320:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    2322:	1c 8e       	std	Y+28, r1	; 0x1c
    2324:	1d 8e       	std	Y+29, r1	; 0x1d
    2326:	1e 8e       	std	Y+30, r1	; 0x1e
    2328:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    232a:	18 a2       	std	Y+32, r1	; 0x20
    232c:	19 a2       	std	Y+33, r1	; 0x21
    232e:	1a a2       	std	Y+34, r1	; 0x22
    2330:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    2336:	92 e0       	ldi	r25, 0x02	; 2
    2338:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    233a:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    233c:	ce 01       	movw	r24, r28
    233e:	01 96       	adiw	r24, 0x01	; 1
    2340:	0e 94 8c 19 	call	0x3318	; 0x3318 <nrk_activate_task>
	
}
    2344:	a3 96       	adiw	r28, 0x23	; 35
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	08 95       	ret

00002356 <nrk_start>:
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    2356:	60 91 74 07 	lds	r22, 0x0774
	// only check activated tasks
	if(task_ID!=-1)
    235a:	6f 3f       	cpi	r22, 0xFF	; 255
    235c:	39 f0       	breq	.+14     	; 0x236c <nrk_start+0x16>
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    235e:	80 91 9f 07 	lds	r24, 0x079F
    2362:	68 13       	cpse	r22, r24
    2364:	03 c0       	rjmp	.+6      	; 0x236c <nrk_start+0x16>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    2366:	85 e0       	ldi	r24, 0x05	; 5
    2368:	0e 94 4e 13 	call	0x269c	; 0x269c <nrk_kernel_error_add>
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    236c:	60 91 9f 07 	lds	r22, 0x079F
	// only check activated tasks
	if(task_ID!=-1)
    2370:	6f 3f       	cpi	r22, 0xFF	; 255
    2372:	e9 f4       	brne	.+58     	; 0x23ae <nrk_start+0x58>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    2374:	0e 94 7f 18 	call	0x30fe	; 0x30fe <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    2378:	2b e2       	ldi	r18, 0x2B	; 43
    237a:	82 02       	muls	r24, r18
    237c:	c0 01       	movw	r24, r0
    237e:	11 24       	eor	r1, r1
    2380:	fc 01       	movw	r30, r24
    2382:	e4 59       	subi	r30, 0x94	; 148
    2384:	f8 4f       	sbci	r31, 0xF8	; 248
    2386:	82 85       	ldd	r24, Z+10	; 0x0a
    2388:	80 93 dd 07 	sts	0x07DD, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    238c:	f0 93 dc 07 	sts	0x07DC, r31
    2390:	e0 93 db 07 	sts	0x07DB, r30
    2394:	f0 93 cd 07 	sts	0x07CD, r31
    2398:	e0 93 cc 07 	sts	0x07CC, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    239c:	80 93 ce 07 	sts	0x07CE, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    23a0:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <nrk_target_start>
    nrk_stack_pointer_init(); 
    23a4:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    23a8:	0e 94 80 27 	call	0x4f00	; 0x4f00 <nrk_start_high_ready_task>
    23ac:	08 c0       	rjmp	.+16     	; 0x23be <nrk_start+0x68>
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    23ae:	80 91 74 07 	lds	r24, 0x0774
    23b2:	68 13       	cpse	r22, r24
    23b4:	df cf       	rjmp	.-66     	; 0x2374 <nrk_start+0x1e>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    23b6:	85 e0       	ldi	r24, 0x05	; 5
    23b8:	0e 94 4e 13 	call	0x269c	; 0x269c <nrk_kernel_error_add>
    23bc:	db cf       	rjmp	.-74     	; 0x2374 <nrk_start+0x1e>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    23be:	ff cf       	rjmp	.-2      	; 0x23be <nrk_start+0x68>

000023c0 <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    23c0:	cf 92       	push	r12
    23c2:	df 92       	push	r13
    23c4:	ef 92       	push	r14
    23c6:	ff 92       	push	r15
    23c8:	0f 93       	push	r16
    23ca:	1f 93       	push	r17
    23cc:	cf 93       	push	r28
    23ce:	df 93       	push	r29
    23d0:	ec 01       	movw	r28, r24
    23d2:	8b 01       	movw	r16, r22
    23d4:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    23d6:	89 85       	ldd	r24, Y+9	; 0x09
    23d8:	82 30       	cpi	r24, 0x02	; 2
    23da:	21 f0       	breq	.+8      	; 0x23e4 <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    23dc:	80 91 ca 07 	lds	r24, 0x07CA
    23e0:	88 83       	st	Y, r24
    23e2:	01 c0       	rjmp	.+2      	; 0x23e6 <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    23e4:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    23e6:	80 91 ca 07 	lds	r24, 0x07CA
    23ea:	82 30       	cpi	r24, 0x02	; 2
    23ec:	20 f0       	brcs	.+8      	; 0x23f6 <nrk_TCB_init+0x36>
    23ee:	60 e0       	ldi	r22, 0x00	; 0
    23f0:	87 e0       	ldi	r24, 0x07	; 7
    23f2:	0e 94 4e 13 	call	0x269c	; 0x269c <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    23f6:	89 85       	ldd	r24, Y+9	; 0x09
    23f8:	82 30       	cpi	r24, 0x02	; 2
    23fa:	29 f0       	breq	.+10     	; 0x2406 <nrk_TCB_init+0x46>
    23fc:	80 91 ca 07 	lds	r24, 0x07CA
    2400:	8f 5f       	subi	r24, 0xFF	; 255
    2402:	80 93 ca 07 	sts	0x07CA, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    2406:	80 91 ca 07 	lds	r24, 0x07CA
    240a:	81 11       	cpse	r24, r1
    240c:	03 c0       	rjmp	.+6      	; 0x2414 <nrk_TCB_init+0x54>
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	80 93 ca 07 	sts	0x07CA, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    2414:	38 81       	ld	r19, Y
    2416:	2b e2       	ldi	r18, 0x2B	; 43
    2418:	32 03       	mulsu	r19, r18
    241a:	f0 01       	movw	r30, r0
    241c:	11 24       	eor	r1, r1
    241e:	e4 59       	subi	r30, 0x94	; 148
    2420:	f8 4f       	sbci	r31, 0xF8	; 248
    2422:	11 83       	std	Z+1, r17	; 0x01
    2424:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    2426:	88 85       	ldd	r24, Y+8	; 0x08
    2428:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    242a:	38 81       	ld	r19, Y
    242c:	32 03       	mulsu	r19, r18
    242e:	f0 01       	movw	r30, r0
    2430:	11 24       	eor	r1, r1
    2432:	e4 59       	subi	r30, 0x94	; 148
    2434:	f8 4f       	sbci	r31, 0xF8	; 248
    2436:	83 e0       	ldi	r24, 0x03	; 3
    2438:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    243a:	38 81       	ld	r19, Y
    243c:	32 03       	mulsu	r19, r18
    243e:	f0 01       	movw	r30, r0
    2440:	11 24       	eor	r1, r1
    2442:	e4 59       	subi	r30, 0x94	; 148
    2444:	f8 4f       	sbci	r31, 0xF8	; 248
    2446:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    2448:	08 81       	ld	r16, Y
    244a:	02 03       	mulsu	r16, r18
    244c:	80 01       	movw	r16, r0
    244e:	11 24       	eor	r1, r1
    2450:	04 59       	subi	r16, 0x94	; 148
    2452:	18 4f       	sbci	r17, 0xF8	; 248
    2454:	f8 01       	movw	r30, r16
    2456:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    2458:	ce 01       	movw	r24, r28
    245a:	0b 96       	adiw	r24, 0x0b	; 11
    245c:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_nrk_time_to_ticks_long>
    2460:	f8 01       	movw	r30, r16
    2462:	61 a3       	std	Z+33, r22	; 0x21
    2464:	72 a3       	std	Z+34, r23	; 0x22
    2466:	83 a3       	std	Z+35, r24	; 0x23
    2468:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    246a:	8b 85       	ldd	r24, Y+11	; 0x0b
    246c:	9c 85       	ldd	r25, Y+12	; 0x0c
    246e:	ad 85       	ldd	r26, Y+13	; 0x0d
    2470:	be 85       	ldd	r27, Y+14	; 0x0e
    2472:	88 33       	cpi	r24, 0x38	; 56
    2474:	99 48       	sbci	r25, 0x89	; 137
    2476:	a1 44       	sbci	r26, 0x41	; 65
    2478:	b1 05       	cpc	r27, r1
    247a:	20 f0       	brcs	.+8      	; 0x2484 <nrk_TCB_init+0xc4>
    247c:	68 81       	ld	r22, Y
    247e:	86 e1       	ldi	r24, 0x16	; 22
    2480:	0e 94 4e 13 	call	0x269c	; 0x269c <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    2484:	c8 80       	ld	r12, Y
    2486:	dd 24       	eor	r13, r13
    2488:	c7 fc       	sbrc	r12, 7
    248a:	d0 94       	com	r13
    248c:	ce 01       	movw	r24, r28
    248e:	4b 96       	adiw	r24, 0x1b	; 27
    2490:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_nrk_time_to_ticks_long>
    2494:	1b e2       	ldi	r17, 0x2B	; 43
    2496:	1c 9d       	mul	r17, r12
    2498:	f0 01       	movw	r30, r0
    249a:	1d 9d       	mul	r17, r13
    249c:	f0 0d       	add	r31, r0
    249e:	11 24       	eor	r1, r1
    24a0:	e4 59       	subi	r30, 0x94	; 148
    24a2:	f8 4f       	sbci	r31, 0xF8	; 248
    24a4:	65 8b       	std	Z+21, r22	; 0x15
    24a6:	76 8b       	std	Z+22, r23	; 0x16
    24a8:	87 8b       	std	Z+23, r24	; 0x17
    24aa:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    24ac:	28 81       	ld	r18, Y
    24ae:	21 03       	mulsu	r18, r17
    24b0:	c0 01       	movw	r24, r0
    24b2:	11 24       	eor	r1, r1
    24b4:	9c 01       	movw	r18, r24
    24b6:	24 59       	subi	r18, 0x94	; 148
    24b8:	38 4f       	sbci	r19, 0xF8	; 248
    24ba:	69 01       	movw	r12, r18
    24bc:	f9 01       	movw	r30, r18
    24be:	45 89       	ldd	r20, Z+21	; 0x15
    24c0:	56 89       	ldd	r21, Z+22	; 0x16
    24c2:	67 89       	ldd	r22, Z+23	; 0x17
    24c4:	70 8d       	ldd	r23, Z+24	; 0x18
    24c6:	81 a1       	ldd	r24, Z+33	; 0x21
    24c8:	92 a1       	ldd	r25, Z+34	; 0x22
    24ca:	a3 a1       	ldd	r26, Z+35	; 0x23
    24cc:	b4 a1       	ldd	r27, Z+36	; 0x24
    24ce:	84 0f       	add	r24, r20
    24d0:	95 1f       	adc	r25, r21
    24d2:	a6 1f       	adc	r26, r22
    24d4:	b7 1f       	adc	r27, r23
    24d6:	81 8f       	std	Z+25, r24	; 0x19
    24d8:	92 8f       	std	Z+26, r25	; 0x1a
    24da:	a3 8f       	std	Z+27, r26	; 0x1b
    24dc:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    24de:	ce 01       	movw	r24, r28
    24e0:	43 96       	adiw	r24, 0x13	; 19
    24e2:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_nrk_time_to_ticks_long>
    24e6:	f6 01       	movw	r30, r12
    24e8:	65 a3       	std	Z+37, r22	; 0x25
    24ea:	76 a3       	std	Z+38, r23	; 0x26
    24ec:	87 a3       	std	Z+39, r24	; 0x27
    24ee:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    24f0:	28 81       	ld	r18, Y
    24f2:	21 03       	mulsu	r18, r17
    24f4:	f0 01       	movw	r30, r0
    24f6:	11 24       	eor	r1, r1
    24f8:	e4 59       	subi	r30, 0x94	; 148
    24fa:	f8 4f       	sbci	r31, 0xF8	; 248
    24fc:	85 a1       	ldd	r24, Z+37	; 0x25
    24fe:	96 a1       	ldd	r25, Z+38	; 0x26
    2500:	a7 a1       	ldd	r26, Z+39	; 0x27
    2502:	b0 a5       	ldd	r27, Z+40	; 0x28
    2504:	85 8f       	std	Z+29, r24	; 0x1d
    2506:	96 8f       	std	Z+30, r25	; 0x1e
    2508:	a7 8f       	std	Z+31, r26	; 0x1f
    250a:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	92 a7       	std	Z+42, r25	; 0x2a
    2512:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    2514:	f3 82       	std	Z+3, r15	; 0x03
    2516:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    2518:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    251a:	df 91       	pop	r29
    251c:	cf 91       	pop	r28
    251e:	1f 91       	pop	r17
    2520:	0f 91       	pop	r16
    2522:	ff 90       	pop	r15
    2524:	ef 90       	pop	r14
    2526:	df 90       	pop	r13
    2528:	cf 90       	pop	r12
    252a:	08 95       	ret

0000252c <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    252c:	0c 94 61 1f 	jmp	0x3ec2	; 0x3ec2 <_nrk_scheduler>

00002530 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    2530:	85 e6       	ldi	r24, 0x65	; 101
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	08 95       	ret

00002536 <_nrk_errno_set>:
    2536:	e0 91 db 07 	lds	r30, 0x07DB
    253a:	f0 91 dc 07 	lds	r31, 0x07DC
    253e:	84 87       	std	Z+12, r24	; 0x0c
    2540:	08 95       	ret

00002542 <nrk_errno_get>:
    nrk_cur_task_TCB->errno = error_code;
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    2542:	e0 91 db 07 	lds	r30, 0x07DB
    2546:	f0 91 dc 07 	lds	r31, 0x07DC
}
    254a:	84 85       	ldd	r24, Z+12	; 0x0c
    254c:	08 95       	ret

0000254e <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    254e:	fc 01       	movw	r30, r24
    if (error_num == 0)
    2550:	80 91 7d 06 	lds	r24, 0x067D
    2554:	88 23       	and	r24, r24
    2556:	31 f0       	breq	.+12     	; 0x2564 <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    2558:	db 01       	movw	r26, r22
    255a:	8c 93       	st	X, r24
    *task_id = error_task;
    255c:	80 91 c6 04 	lds	r24, 0x04C6
    2560:	80 83       	st	Z, r24
    return 1;
    2562:	81 e0       	ldi	r24, 0x01	; 1
}
    2564:	08 95       	ret

00002566 <nrk_error_handle>:
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    2566:	10 92 7d 06 	sts	0x067D, r1
    256a:	08 95       	ret

0000256c <nrk_error_print>:
uint8_t i,t;




    if (error_num == 0)
    256c:	80 91 7d 06 	lds	r24, 0x067D
    2570:	88 23       	and	r24, r24
    2572:	09 f4       	brne	.+2      	; 0x2576 <nrk_error_print+0xa>
    2574:	83 c0       	rjmp	.+262    	; 0x267c <nrk_error_print+0x110>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    2576:	88 e0       	ldi	r24, 0x08	; 8
    2578:	94 e0       	ldi	r25, 0x04	; 4
    257a:	0e 94 94 0c 	call	0x1928	; 0x1928 <nrk_kprintf>
        printf ("%d", error_task);
    257e:	80 91 c6 04 	lds	r24, 0x04C6
    2582:	1f 92       	push	r1
    2584:	8f 93       	push	r24
    2586:	86 ee       	ldi	r24, 0xE6	; 230
    2588:	93 e0       	ldi	r25, 0x03	; 3
    258a:	9f 93       	push	r25
    258c:	8f 93       	push	r24
    258e:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <printf>
        nrk_kprintf (PSTR ("): "));
    2592:	84 e0       	ldi	r24, 0x04	; 4
    2594:	94 e0       	ldi	r25, 0x04	; 4
    2596:	0e 94 94 0c 	call	0x1928	; 0x1928 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	80 91 7d 06 	lds	r24, 0x067D
    25a6:	88 31       	cpi	r24, 0x18	; 24
    25a8:	10 f0       	brcs	.+4      	; 0x25ae <nrk_error_print+0x42>
            error_num = NRK_UNKOWN;
    25aa:	10 92 7d 06 	sts	0x067D, r1
        switch (error_num)
    25ae:	e0 91 7d 06 	lds	r30, 0x067D
    25b2:	8e 2f       	mov	r24, r30
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	fc 01       	movw	r30, r24
    25b8:	31 97       	sbiw	r30, 0x01	; 1
    25ba:	e6 31       	cpi	r30, 0x16	; 22
    25bc:	f1 05       	cpc	r31, r1
    25be:	08 f0       	brcs	.+2      	; 0x25c2 <nrk_error_print+0x56>
    25c0:	46 c0       	rjmp	.+140    	; 0x264e <nrk_error_print+0xe2>
    25c2:	e6 54       	subi	r30, 0x46	; 70
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	0c 94 48 2a 	jmp	0x5490	; 0x5490 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    25ca:	88 ec       	ldi	r24, 0xC8	; 200
    25cc:	93 e0       	ldi	r25, 0x03	; 3
    25ce:	41 c0       	rjmp	.+130    	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    25d0:	81 ea       	ldi	r24, 0xA1	; 161
    25d2:	93 e0       	ldi	r25, 0x03	; 3
    25d4:	3e c0       	rjmp	.+124    	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    25d6:	8d e8       	ldi	r24, 0x8D	; 141
    25d8:	93 e0       	ldi	r25, 0x03	; 3
    25da:	3b c0       	rjmp	.+118    	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    25dc:	87 e7       	ldi	r24, 0x77	; 119
    25de:	93 e0       	ldi	r25, 0x03	; 3
    25e0:	38 c0       	rjmp	.+112    	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    25e2:	8c e5       	ldi	r24, 0x5C	; 92
    25e4:	93 e0       	ldi	r25, 0x03	; 3
    25e6:	35 c0       	rjmp	.+106    	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    25e8:	86 e4       	ldi	r24, 0x46	; 70
    25ea:	93 e0       	ldi	r25, 0x03	; 3
    25ec:	32 c0       	rjmp	.+100    	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    25ee:	8e e2       	ldi	r24, 0x2E	; 46
    25f0:	93 e0       	ldi	r25, 0x03	; 3
    25f2:	2f c0       	rjmp	.+94     	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    25f4:	8b e1       	ldi	r24, 0x1B	; 27
    25f6:	93 e0       	ldi	r25, 0x03	; 3
    25f8:	2c c0       	rjmp	.+88     	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    25fa:	88 e0       	ldi	r24, 0x08	; 8
    25fc:	93 e0       	ldi	r25, 0x03	; 3
    25fe:	29 c0       	rjmp	.+82     	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    2600:	8a ee       	ldi	r24, 0xEA	; 234
    2602:	92 e0       	ldi	r25, 0x02	; 2
    2604:	26 c0       	rjmp	.+76     	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    2606:	85 ec       	ldi	r24, 0xC5	; 197
    2608:	92 e0       	ldi	r25, 0x02	; 2
    260a:	23 c0       	rjmp	.+70     	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    260c:	89 eb       	ldi	r24, 0xB9	; 185
    260e:	92 e0       	ldi	r25, 0x02	; 2
    2610:	20 c0       	rjmp	.+64     	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    2612:	8e e9       	ldi	r24, 0x9E	; 158
    2614:	92 e0       	ldi	r25, 0x02	; 2
    2616:	1d c0       	rjmp	.+58     	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    2618:	8f e8       	ldi	r24, 0x8F	; 143
    261a:	92 e0       	ldi	r25, 0x02	; 2
    261c:	1a c0       	rjmp	.+52     	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    261e:	8b e7       	ldi	r24, 0x7B	; 123
    2620:	92 e0       	ldi	r25, 0x02	; 2
    2622:	17 c0       	rjmp	.+46     	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    2624:	8a e6       	ldi	r24, 0x6A	; 106
    2626:	92 e0       	ldi	r25, 0x02	; 2
    2628:	14 c0       	rjmp	.+40     	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    262a:	86 e5       	ldi	r24, 0x56	; 86
    262c:	92 e0       	ldi	r25, 0x02	; 2
    262e:	11 c0       	rjmp	.+34     	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    2630:	86 e3       	ldi	r24, 0x36	; 54
    2632:	92 e0       	ldi	r25, 0x02	; 2
    2634:	0e c0       	rjmp	.+28     	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    2636:	8e e1       	ldi	r24, 0x1E	; 30
    2638:	92 e0       	ldi	r25, 0x02	; 2
    263a:	0b c0       	rjmp	.+22     	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    263c:	83 e0       	ldi	r24, 0x03	; 3
    263e:	92 e0       	ldi	r25, 0x02	; 2
    2640:	08 c0       	rjmp	.+16     	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    2642:	82 ef       	ldi	r24, 0xF2	; 242
    2644:	91 e0       	ldi	r25, 0x01	; 1
    2646:	05 c0       	rjmp	.+10     	; 0x2652 <nrk_error_print+0xe6>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    2648:	83 ee       	ldi	r24, 0xE3	; 227
    264a:	91 e0       	ldi	r25, 0x01	; 1
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <nrk_error_print+0xe6>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    264e:	8c ed       	ldi	r24, 0xDC	; 220
    2650:	91 e0       	ldi	r25, 0x01	; 1
    2652:	0e 94 94 0c 	call	0x1928	; 0x1928 <nrk_kprintf>
        }
        putchar ('\r');
    2656:	60 91 fe 07 	lds	r22, 0x07FE
    265a:	70 91 ff 07 	lds	r23, 0x07FF
    265e:	8d e0       	ldi	r24, 0x0D	; 13
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	0e 94 2b 2b 	call	0x5656	; 0x5656 <fputc>
        putchar ('\n');
    2666:	60 91 fe 07 	lds	r22, 0x07FE
    266a:	70 91 ff 07 	lds	r23, 0x07FF
    266e:	8a e0       	ldi	r24, 0x0A	; 10
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	0e 94 2b 2b 	call	0x5656	; 0x5656 <fputc>
}


#endif

    return error_num;
    2676:	80 91 7d 06 	lds	r24, 0x067D
    267a:	08 95       	ret




    if (error_num == 0)
        return 0;
    267c:	80 e0       	ldi	r24, 0x00	; 0


#endif

    return error_num;
}
    267e:	08 95       	ret

00002680 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    2680:	80 93 7d 06 	sts	0x067D, r24
    error_task = nrk_cur_task_TCB->task_ID;
    2684:	e0 91 db 07 	lds	r30, 0x07DB
    2688:	f0 91 dc 07 	lds	r31, 0x07DC
    268c:	80 85       	ldd	r24, Z+8	; 0x08
    268e:	80 93 c6 04 	sts	0x04C6, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2692:	0e 94 b6 12 	call	0x256c	; 0x256c <nrk_error_print>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    2696:	10 92 7d 06 	sts	0x067D, r1
    269a:	08 95       	ret

0000269c <nrk_kernel_error_add>:

}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    269c:	80 93 7d 06 	sts	0x067D, r24
    error_task = task;
    26a0:	60 93 c6 04 	sts	0x04C6, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    26a4:	0e 94 b6 12 	call	0x256c	; 0x256c <nrk_error_print>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    26a8:	10 92 7d 06 	sts	0x067D, r1
    26ac:	08 95       	ret

000026ae <clear_regs>:
}

inline void clear_regs()
{

        GTCCR=0;
    26ae:	13 bc       	out	0x23, r1	; 35
        ASSR=0;
    26b0:	10 92 b6 00 	sts	0x00B6, r1

        OCR0B=0;
    26b4:	18 bc       	out	0x28, r1	; 40
        OCR0A=0;
    26b6:	17 bc       	out	0x27, r1	; 39
        TCNT0=0;
    26b8:	16 bc       	out	0x26, r1	; 38
        TCCR0B=0;
    26ba:	15 bc       	out	0x25, r1	; 37
        TCCR0A=0;
    26bc:	14 bc       	out	0x24, r1	; 36

        EIMSK=0;
    26be:	1d ba       	out	0x1d, r1	; 29
        EIFR=0;
    26c0:	1c ba       	out	0x1c, r1	; 28
        PCIFR=0;
    26c2:	1b ba       	out	0x1b, r1	; 27


        OCR3B =0;
    26c4:	10 92 9b 00 	sts	0x009B, r1
    26c8:	10 92 9a 00 	sts	0x009A, r1
        OCR3A =0;
    26cc:	10 92 99 00 	sts	0x0099, r1
    26d0:	10 92 98 00 	sts	0x0098, r1
        TCNT3 =0;
    26d4:	10 92 95 00 	sts	0x0095, r1
    26d8:	10 92 94 00 	sts	0x0094, r1
        TCCR3B=0;
    26dc:	10 92 91 00 	sts	0x0091, r1
        TCCR3A=0;
    26e0:	10 92 90 00 	sts	0x0090, r1
        TIFR3=0;
    26e4:	18 ba       	out	0x18, r1	; 24
        TIMSK3=0;
    26e6:	10 92 71 00 	sts	0x0071, r1


        OCR2B =0;
    26ea:	10 92 b4 00 	sts	0x00B4, r1
        OCR2A =0;
    26ee:	10 92 b3 00 	sts	0x00B3, r1
        TCNT2 =0;
    26f2:	10 92 b2 00 	sts	0x00B2, r1
        TCCR2B=0;
    26f6:	10 92 b1 00 	sts	0x00B1, r1
        TCCR2A=0;
    26fa:	e0 eb       	ldi	r30, 0xB0	; 176
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	10 82       	st	Z, r1
        TCCR2A=0;
    2700:	10 82       	st	Z, r1
        TIFR2=0;
    2702:	17 ba       	out	0x17, r1	; 23
        TIMSK2=0;
    2704:	10 92 70 00 	sts	0x0070, r1


	// set all bits to 1 in order to clear
	MCUSR=0xff;
    2708:	8f ef       	ldi	r24, 0xFF	; 255
    270a:	84 bf       	out	0x34, r24	; 52
    270c:	08 95       	ret

0000270e <pause>:
    }

}

void pause()
{
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	1f 92       	push	r1
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2718:	19 82       	std	Y+1, r1	; 0x01
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	84 36       	cpi	r24, 0x64	; 100
    271e:	40 f4       	brcc	.+16     	; 0x2730 <pause+0x22>
        nrk_spin_wait_us (2000);
    2720:	80 ed       	ldi	r24, 0xD0	; 208
    2722:	97 e0       	ldi	r25, 0x07	; 7
    2724:	0e 94 05 23 	call	0x460a	; 0x460a <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	8f 5f       	subi	r24, 0xFF	; 255
    272c:	89 83       	std	Y+1, r24	; 0x01
    272e:	f5 cf       	rjmp	.-22     	; 0x271a <pause+0xc>
        nrk_spin_wait_us (2000);
}
    2730:	0f 90       	pop	r0
    2732:	df 91       	pop	r29
    2734:	cf 91       	pop	r28
    2736:	08 95       	ret

00002738 <blink_dash>:

}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <nrk_led_set>
    pause();
    2740:	0e 94 87 13 	call	0x270e	; 0x270e <pause>
    pause();
    2744:	0e 94 87 13 	call	0x270e	; 0x270e <pause>
    pause();
    2748:	0e 94 87 13 	call	0x270e	; 0x270e <pause>
    nrk_led_clr(GREEN_LED);
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <nrk_led_clr>
    pause();
    2754:	0c 94 87 13 	jmp	0x270e	; 0x270e <pause>

00002758 <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <nrk_led_set>
    pause();
    2760:	0e 94 87 13 	call	0x270e	; 0x270e <pause>
    nrk_led_clr(GREEN_LED);
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <nrk_led_clr>
    pause();
    276c:	0c 94 87 13 	jmp	0x270e	; 0x270e <pause>

00002770 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    2770:	ff 92       	push	r15
    2772:	0f 93       	push	r16
    2774:	1f 93       	push	r17
    2776:	cf 93       	push	r28
    2778:	df 93       	push	r29
    277a:	00 d0       	rcall	.+0      	; 0x277c <blink_morse_code_error+0xc>
    277c:	1f 92       	push	r1
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    2782:	1f 92       	push	r1
    2784:	8f 93       	push	r24
    2786:	86 ee       	ldi	r24, 0xE6	; 230
    2788:	93 e0       	ldi	r25, 0x03	; 3
    278a:	9f 93       	push	r25
    278c:	8f 93       	push	r24
    278e:	8e 01       	movw	r16, r28
    2790:	0f 5f       	subi	r16, 0xFF	; 255
    2792:	1f 4f       	sbci	r17, 0xFF	; 255
    2794:	1f 93       	push	r17
    2796:	0f 93       	push	r16
    2798:	0e 94 ad 2b 	call	0x575a	; 0x575a <sprintf>

    for(i=0; i<strlen(str); i++ )
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	f1 2c       	mov	r15, r1
    27aa:	f8 01       	movw	r30, r16
    27ac:	01 90       	ld	r0, Z+
    27ae:	00 20       	and	r0, r0
    27b0:	e9 f7       	brne	.-6      	; 0x27ac <blink_morse_code_error+0x3c>
    27b2:	31 97       	sbiw	r30, 0x01	; 1
    27b4:	e0 1b       	sub	r30, r16
    27b6:	f1 0b       	sbc	r31, r17
    27b8:	8f 2d       	mov	r24, r15
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	8e 17       	cp	r24, r30
    27be:	9f 07       	cpc	r25, r31
    27c0:	08 f0       	brcs	.+2      	; 0x27c4 <blink_morse_code_error+0x54>
    27c2:	5d c0       	rjmp	.+186    	; 0x287e <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    27c4:	f8 01       	movw	r30, r16
    27c6:	e8 0f       	add	r30, r24
    27c8:	f9 1f       	adc	r31, r25
    27ca:	e0 81       	ld	r30, Z
    27cc:	8e 2f       	mov	r24, r30
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	fc 01       	movw	r30, r24
    27d2:	f0 97       	sbiw	r30, 0x30	; 48
    27d4:	ea 30       	cpi	r30, 0x0A	; 10
    27d6:	f1 05       	cpc	r31, r1
    27d8:	08 f0       	brcs	.+2      	; 0x27dc <blink_morse_code_error+0x6c>
    27da:	49 c0       	rjmp	.+146    	; 0x286e <blink_morse_code_error+0xfe>
    27dc:	e0 53       	subi	r30, 0x30	; 48
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	0c 94 48 2a 	jmp	0x5490	; 0x5490 <__tablejump2__>
        {
        case '0':
            blink_dash();
    27e4:	0e 94 9c 13 	call	0x2738	; 0x2738 <blink_dash>
    27e8:	02 c0       	rjmp	.+4      	; 0x27ee <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    27ea:	0e 94 ac 13 	call	0x2758	; 0x2758 <blink_dot>
            blink_dash();
    27ee:	0e 94 9c 13 	call	0x2738	; 0x2738 <blink_dash>
            blink_dash();
    27f2:	0e 94 9c 13 	call	0x2738	; 0x2738 <blink_dash>
            blink_dash();
    27f6:	0e 94 9c 13 	call	0x2738	; 0x2738 <blink_dash>
            blink_dash();
    27fa:	0e 94 9c 13 	call	0x2738	; 0x2738 <blink_dash>
            break;
    27fe:	37 c0       	rjmp	.+110    	; 0x286e <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    2800:	0e 94 ac 13 	call	0x2758	; 0x2758 <blink_dot>
            blink_dot();
    2804:	0e 94 ac 13 	call	0x2758	; 0x2758 <blink_dot>
    2808:	f4 cf       	rjmp	.-24     	; 0x27f2 <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    280a:	0e 94 ac 13 	call	0x2758	; 0x2758 <blink_dot>
            blink_dot();
    280e:	0e 94 ac 13 	call	0x2758	; 0x2758 <blink_dot>
            blink_dot();
    2812:	0e 94 ac 13 	call	0x2758	; 0x2758 <blink_dot>
    2816:	ef cf       	rjmp	.-34     	; 0x27f6 <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    2818:	0e 94 ac 13 	call	0x2758	; 0x2758 <blink_dot>
            blink_dot();
    281c:	0e 94 ac 13 	call	0x2758	; 0x2758 <blink_dot>
            blink_dot();
    2820:	0e 94 ac 13 	call	0x2758	; 0x2758 <blink_dot>
            blink_dot();
    2824:	0e 94 ac 13 	call	0x2758	; 0x2758 <blink_dot>
    2828:	e8 cf       	rjmp	.-48     	; 0x27fa <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    282a:	0e 94 ac 13 	call	0x2758	; 0x2758 <blink_dot>
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    2830:	0e 94 9c 13 	call	0x2738	; 0x2738 <blink_dash>
            blink_dot();
    2834:	0e 94 ac 13 	call	0x2758	; 0x2758 <blink_dot>
    2838:	04 c0       	rjmp	.+8      	; 0x2842 <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    283a:	0e 94 9c 13 	call	0x2738	; 0x2738 <blink_dash>
            blink_dash();
    283e:	0e 94 9c 13 	call	0x2738	; 0x2738 <blink_dash>
            blink_dot();
    2842:	0e 94 ac 13 	call	0x2758	; 0x2758 <blink_dot>
    2846:	06 c0       	rjmp	.+12     	; 0x2854 <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    2848:	0e 94 9c 13 	call	0x2738	; 0x2738 <blink_dash>
            blink_dash();
    284c:	0e 94 9c 13 	call	0x2738	; 0x2738 <blink_dash>
            blink_dash();
    2850:	0e 94 9c 13 	call	0x2738	; 0x2738 <blink_dash>
            blink_dot();
    2854:	0e 94 ac 13 	call	0x2758	; 0x2758 <blink_dot>
    2858:	08 c0       	rjmp	.+16     	; 0x286a <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    285a:	0e 94 9c 13 	call	0x2738	; 0x2738 <blink_dash>
            blink_dash();
    285e:	0e 94 9c 13 	call	0x2738	; 0x2738 <blink_dash>
            blink_dash();
    2862:	0e 94 9c 13 	call	0x2738	; 0x2738 <blink_dash>
            blink_dash();
    2866:	0e 94 9c 13 	call	0x2738	; 0x2738 <blink_dash>
            blink_dot();
    286a:	0e 94 ac 13 	call	0x2758	; 0x2758 <blink_dot>
            break;
        }
        pause();
    286e:	0e 94 87 13 	call	0x270e	; 0x270e <pause>
        pause();
    2872:	0e 94 87 13 	call	0x270e	; 0x270e <pause>
        pause();
    2876:	0e 94 87 13 	call	0x270e	; 0x270e <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    287a:	f3 94       	inc	r15
    287c:	96 cf       	rjmp	.-212    	; 0x27aa <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	df 91       	pop	r29
    2886:	cf 91       	pop	r28
    2888:	1f 91       	pop	r17
    288a:	0f 91       	pop	r16
    288c:	ff 90       	pop	r15
    288e:	08 95       	ret

00002890 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    2890:	6f 92       	push	r6
    2892:	7f 92       	push	r7
    2894:	8f 92       	push	r8
    2896:	9f 92       	push	r9
    2898:	af 92       	push	r10
    289a:	bf 92       	push	r11
    289c:	cf 92       	push	r12
    289e:	df 92       	push	r13
    28a0:	ef 92       	push	r14
    28a2:	ff 92       	push	r15
    28a4:	0f 93       	push	r16
    28a6:	1f 93       	push	r17
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    28ac:	84 e1       	ldi	r24, 0x14	; 20
    28ae:	94 e0       	ldi	r25, 0x04	; 4
    28b0:	0e 94 94 0c 	call	0x1928	; 0x1928 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    28b4:	e0 91 db 07 	lds	r30, 0x07DB
    28b8:	f0 91 dc 07 	lds	r31, 0x07DC
    28bc:	80 85       	ldd	r24, Z+8	; 0x08
    28be:	28 2f       	mov	r18, r24
    28c0:	33 27       	eor	r19, r19
    28c2:	27 fd       	sbrc	r18, 7
    28c4:	30 95       	com	r19
    28c6:	3f 93       	push	r19
    28c8:	8f 93       	push	r24
    28ca:	89 ee       	ldi	r24, 0xE9	; 233
    28cc:	93 e0       	ldi	r25, 0x03	; 3
    28ce:	9f 93       	push	r25
    28d0:	8f 93       	push	r24
    28d2:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    28d6:	e0 91 db 07 	lds	r30, 0x07DB
    28da:	f0 91 dc 07 	lds	r31, 0x07DC
    28de:	c2 81       	ldd	r28, Z+2	; 0x02
    28e0:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	8d e1       	ldi	r24, 0x1D	; 29
    28e8:	94 e0       	ldi	r25, 0x04	; 4
    28ea:	9f 93       	push	r25
    28ec:	8f 93       	push	r24
    28ee:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <printf>
    printf( "canary = %x ",*stkc );
    28f2:	88 81       	ld	r24, Y
    28f4:	1f 92       	push	r1
    28f6:	8f 93       	push	r24
    28f8:	82 ef       	ldi	r24, 0xF2	; 242
    28fa:	93 e0       	ldi	r25, 0x03	; 3
    28fc:	9f 93       	push	r25
    28fe:	8f 93       	push	r24
    2900:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    2904:	e0 91 db 07 	lds	r30, 0x07DB
    2908:	f0 91 dc 07 	lds	r31, 0x07DC
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    290c:	81 81       	ldd	r24, Z+1	; 0x01
    290e:	8f 93       	push	r24
    2910:	80 81       	ld	r24, Z
    2912:	8f 93       	push	r24
    2914:	8f ef       	ldi	r24, 0xFF	; 255
    2916:	93 e0       	ldi	r25, 0x03	; 3
    2918:	9f 93       	push	r25
    291a:	8f 93       	push	r24
    291c:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    2920:	80 91 dc 07 	lds	r24, 0x07DC
    2924:	8f 93       	push	r24
    2926:	80 91 db 07 	lds	r24, 0x07DB
    292a:	8f 93       	push	r24
    292c:	89 e0       	ldi	r24, 0x09	; 9
    292e:	94 e0       	ldi	r25, 0x04	; 4
    2930:	9f 93       	push	r25
    2932:	8f 93       	push	r24
    2934:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <printf>
    2938:	cc e6       	ldi	r28, 0x6C	; 108
    293a:	d7 e0       	ldi	r29, 0x07	; 7
    293c:	ed b7       	in	r30, 0x3d	; 61
    293e:	fe b7       	in	r31, 0x3e	; 62
    2940:	74 96       	adiw	r30, 0x14	; 20
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	fe bf       	out	0x3e, r31	; 62
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	ed bf       	out	0x3d, r30	; 61
    294c:	00 e0       	ldi	r16, 0x00	; 0
    294e:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2950:	89 e1       	ldi	r24, 0x19	; 25
    2952:	68 2e       	mov	r6, r24
    2954:	84 e0       	ldi	r24, 0x04	; 4
    2956:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    2958:	92 ef       	ldi	r25, 0xF2	; 242
    295a:	89 2e       	mov	r8, r25
    295c:	93 e0       	ldi	r25, 0x03	; 3
    295e:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2960:	2f ef       	ldi	r18, 0xFF	; 255
    2962:	a2 2e       	mov	r10, r18
    2964:	23 e0       	ldi	r18, 0x03	; 3
    2966:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2968:	39 e0       	ldi	r19, 0x09	; 9
    296a:	c3 2e       	mov	r12, r19
    296c:	34 e0       	ldi	r19, 0x04	; 4
    296e:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    2970:	ea 80       	ldd	r14, Y+2	; 0x02
    2972:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2974:	ff 92       	push	r15
    2976:	ef 92       	push	r14
    2978:	1f 93       	push	r17
    297a:	0f 93       	push	r16
    297c:	7f 92       	push	r7
    297e:	6f 92       	push	r6
    2980:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <printf>
        printf( "canary = %x ",*stkc );
    2984:	f7 01       	movw	r30, r14
    2986:	80 81       	ld	r24, Z
    2988:	1f 92       	push	r1
    298a:	8f 93       	push	r24
    298c:	9f 92       	push	r9
    298e:	8f 92       	push	r8
    2990:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	8f 93       	push	r24
    2998:	88 81       	ld	r24, Y
    299a:	8f 93       	push	r24
    299c:	bf 92       	push	r11
    299e:	af 92       	push	r10
    29a0:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    29a4:	df 93       	push	r29
    29a6:	cf 93       	push	r28
    29a8:	df 92       	push	r13
    29aa:	cf 92       	push	r12
    29ac:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <printf>
    29b0:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    29b2:	ed b7       	in	r30, 0x3d	; 61
    29b4:	fe b7       	in	r31, 0x3e	; 62
    29b6:	72 96       	adiw	r30, 0x12	; 18
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	f8 94       	cli
    29bc:	fe bf       	out	0x3e, r31	; 62
    29be:	0f be       	out	0x3f, r0	; 63
    29c0:	ed bf       	out	0x3d, r30	; 61
    29c2:	01 30       	cpi	r16, 0x01	; 1
    29c4:	11 05       	cpc	r17, r1
    29c6:	19 f0       	breq	.+6      	; 0x29ce <dump_stack_info+0x13e>
    29c8:	01 e0       	ldi	r16, 0x01	; 1
    29ca:	10 e0       	ldi	r17, 0x00	; 0
    29cc:	d1 cf       	rjmp	.-94     	; 0x2970 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    29ce:	df 91       	pop	r29
    29d0:	cf 91       	pop	r28
    29d2:	1f 91       	pop	r17
    29d4:	0f 91       	pop	r16
    29d6:	ff 90       	pop	r15
    29d8:	ef 90       	pop	r14
    29da:	df 90       	pop	r13
    29dc:	cf 90       	pop	r12
    29de:	bf 90       	pop	r11
    29e0:	af 90       	pop	r10
    29e2:	9f 90       	pop	r9
    29e4:	8f 90       	pop	r8
    29e6:	7f 90       	pop	r7
    29e8:	6f 90       	pop	r6
    29ea:	08 95       	ret

000029ec <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    29ec:	cf 93       	push	r28
    29ee:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    29f0:	e0 91 db 07 	lds	r30, 0x07DB
    29f4:	f0 91 dc 07 	lds	r31, 0x07DC
    29f8:	c2 81       	ldd	r28, Z+2	; 0x02
    29fa:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    29fc:	88 81       	ld	r24, Y
    29fe:	85 35       	cpi	r24, 0x55	; 85
    2a00:	39 f0       	breq	.+14     	; 0x2a10 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    2a02:	0e 94 48 14 	call	0x2890	; 0x2890 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	0e 94 40 13 	call	0x2680	; 0x2680 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    2a0c:	85 e5       	ldi	r24, 0x55	; 85
    2a0e:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    2a10:	e0 91 db 07 	lds	r30, 0x07DB
    2a14:	f0 91 dc 07 	lds	r31, 0x07DC
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2a18:	80 81       	ld	r24, Z
    2a1a:	91 81       	ldd	r25, Z+1	; 0x01
    2a1c:	81 15       	cp	r24, r1
    2a1e:	92 44       	sbci	r25, 0x42	; 66
    2a20:	38 f0       	brcs	.+14     	; 0x2a30 <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    2a22:	0e 94 48 14 	call	0x2890	; 0x2890 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2a26:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    2a28:	df 91       	pop	r29
    2a2a:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2a2c:	0c 94 40 13 	jmp	0x2680	; 0x2680 <nrk_error_add>




#endif
}
    2a30:	df 91       	pop	r29
    2a32:	cf 91       	pop	r28
    2a34:	08 95       	ret

00002a36 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    2a36:	2b e2       	ldi	r18, 0x2B	; 43
    2a38:	82 02       	muls	r24, r18
    2a3a:	c0 01       	movw	r24, r0
    2a3c:	11 24       	eor	r1, r1
    2a3e:	fc 01       	movw	r30, r24
    2a40:	e4 59       	subi	r30, 0x94	; 148
    2a42:	f8 4f       	sbci	r31, 0xF8	; 248
    2a44:	a2 81       	ldd	r26, Z+2	; 0x02
    2a46:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2a48:	8c 91       	ld	r24, X
    2a4a:	85 35       	cpi	r24, 0x55	; 85
    2a4c:	19 f0       	breq	.+6      	; 0x2a54 <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    2a4e:	85 e5       	ldi	r24, 0x55	; 85
    2a50:	8c 93       	st	X, r24
    2a52:	08 c0       	rjmp	.+16     	; 0x2a64 <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2a54:	80 81       	ld	r24, Z
    2a56:	91 81       	ldd	r25, Z+1	; 0x01
    2a58:	81 15       	cp	r24, r1
    2a5a:	92 44       	sbci	r25, 0x42	; 66
    2a5c:	28 f0       	brcs	.+10     	; 0x2a68 <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2a5e:	82 e1       	ldi	r24, 0x12	; 18
    2a60:	0e 94 40 13 	call	0x2680	; 0x2680 <nrk_error_add>
        return NRK_ERROR;
    2a64:	8f ef       	ldi	r24, 0xFF	; 255
    2a66:	08 95       	ret
    }
#endif
    return NRK_OK;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
}
    2a6a:	08 95       	ret

00002a6c <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    2a70:	40 91 d4 05 	lds	r20, 0x05D4
    2a74:	50 91 d5 05 	lds	r21, 0x05D5
    2a78:	60 91 d6 05 	lds	r22, 0x05D6
    2a7c:	70 91 d7 05 	lds	r23, 0x05D7
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	8a 01       	movw	r16, r20
    2a86:	9b 01       	movw	r18, r22
    2a88:	08 2e       	mov	r0, r24
    2a8a:	04 c0       	rjmp	.+8      	; 0x2a94 <nrk_signal_create+0x28>
    2a8c:	36 95       	lsr	r19
    2a8e:	27 95       	ror	r18
    2a90:	17 95       	ror	r17
    2a92:	07 95       	ror	r16
    2a94:	0a 94       	dec	r0
    2a96:	d2 f7       	brpl	.-12     	; 0x2a8c <nrk_signal_create+0x20>
    2a98:	00 fd       	sbrc	r16, 0
    2a9a:	19 c0       	rjmp	.+50     	; 0x2ace <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    2a9c:	01 e0       	ldi	r16, 0x01	; 1
    2a9e:	10 e0       	ldi	r17, 0x00	; 0
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	08 2e       	mov	r0, r24
    2aa6:	04 c0       	rjmp	.+8      	; 0x2ab0 <nrk_signal_create+0x44>
    2aa8:	00 0f       	add	r16, r16
    2aaa:	11 1f       	adc	r17, r17
    2aac:	22 1f       	adc	r18, r18
    2aae:	33 1f       	adc	r19, r19
    2ab0:	0a 94       	dec	r0
    2ab2:	d2 f7       	brpl	.-12     	; 0x2aa8 <nrk_signal_create+0x3c>
    2ab4:	40 2b       	or	r20, r16
    2ab6:	51 2b       	or	r21, r17
    2ab8:	62 2b       	or	r22, r18
    2aba:	73 2b       	or	r23, r19
    2abc:	40 93 d4 05 	sts	0x05D4, r20
    2ac0:	50 93 d5 05 	sts	0x05D5, r21
    2ac4:	60 93 d6 05 	sts	0x05D6, r22
    2ac8:	70 93 d7 05 	sts	0x05D7, r23
			return i;
    2acc:	05 c0       	rjmp	.+10     	; 0x2ad8 <nrk_signal_create+0x6c>
    2ace:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    2ad0:	80 32       	cpi	r24, 0x20	; 32
    2ad2:	91 05       	cpc	r25, r1
    2ad4:	b9 f6       	brne	.-82     	; 0x2a84 <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    2ad6:	8f ef       	ldi	r24, 0xFF	; 255


}
    2ad8:	1f 91       	pop	r17
    2ada:	0f 91       	pop	r16
    2adc:	08 95       	ret

00002ade <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    2ade:	e0 91 db 07 	lds	r30, 0x07DB
    2ae2:	f0 91 dc 07 	lds	r31, 0x07DC
    2ae6:	65 85       	ldd	r22, Z+13	; 0x0d
    2ae8:	76 85       	ldd	r23, Z+14	; 0x0e
    2aea:	87 85       	ldd	r24, Z+15	; 0x0f
    2aec:	90 89       	ldd	r25, Z+16	; 0x10
}
    2aee:	08 95       	ret

00002af0 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    2af0:	cf 92       	push	r12
    2af2:	df 92       	push	r13
    2af4:	ef 92       	push	r14
    2af6:	ff 92       	push	r15
    2af8:	0f 93       	push	r16
    2afa:	1f 93       	push	r17
    2afc:	cf 93       	push	r28
    2afe:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    2b00:	c1 2c       	mov	r12, r1
    2b02:	d1 2c       	mov	r13, r1
    2b04:	76 01       	movw	r14, r12
    2b06:	c3 94       	inc	r12
    2b08:	08 2e       	mov	r0, r24
    2b0a:	04 c0       	rjmp	.+8      	; 0x2b14 <nrk_signal_delete+0x24>
    2b0c:	cc 0c       	add	r12, r12
    2b0e:	dd 1c       	adc	r13, r13
    2b10:	ee 1c       	adc	r14, r14
    2b12:	ff 1c       	adc	r15, r15
    2b14:	0a 94       	dec	r0
    2b16:	d2 f7       	brpl	.-12     	; 0x2b0c <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2b18:	40 91 d4 05 	lds	r20, 0x05D4
    2b1c:	50 91 d5 05 	lds	r21, 0x05D5
    2b20:	60 91 d6 05 	lds	r22, 0x05D6
    2b24:	70 91 d7 05 	lds	r23, 0x05D7
    2b28:	4c 21       	and	r20, r12
    2b2a:	5d 21       	and	r21, r13
    2b2c:	6e 21       	and	r22, r14
    2b2e:	7f 21       	and	r23, r15
    2b30:	45 2b       	or	r20, r21
    2b32:	46 2b       	or	r20, r22
    2b34:	47 2b       	or	r20, r23
    2b36:	09 f4       	brne	.+2      	; 0x2b3a <nrk_signal_delete+0x4a>
    2b38:	60 c0       	rjmp	.+192    	; 0x2bfa <nrk_signal_delete+0x10a>
    2b3a:	08 2f       	mov	r16, r24

	nrk_int_disable();
    2b3c:	0e 94 02 11 	call	0x2204	; 0x2204 <nrk_int_disable>
    2b40:	e5 e7       	ldi	r30, 0x75	; 117
    2b42:	f7 e0       	ldi	r31, 0x07	; 7
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2b44:	b7 01       	movw	r22, r14
    2b46:	a6 01       	movw	r20, r12
    2b48:	40 95       	com	r20
    2b4a:	50 95       	com	r21
    2b4c:	60 95       	com	r22
    2b4e:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2b50:	13 e0       	ldi	r17, 0x03	; 3
    2b52:	df 01       	movw	r26, r30
    2b54:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    2b56:	8c 91       	ld	r24, X
    2b58:	8f 3f       	cpi	r24, 0xFF	; 255
    2b5a:	39 f1       	breq	.+78     	; 0x2baa <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    2b5c:	84 81       	ldd	r24, Z+4	; 0x04
    2b5e:	95 81       	ldd	r25, Z+5	; 0x05
    2b60:	a6 81       	ldd	r26, Z+6	; 0x06
    2b62:	b7 81       	ldd	r27, Z+7	; 0x07
    2b64:	8c 15       	cp	r24, r12
    2b66:	9d 05       	cpc	r25, r13
    2b68:	ae 05       	cpc	r26, r14
    2b6a:	bf 05       	cpc	r27, r15
    2b6c:	51 f4       	brne	.+20     	; 0x2b82 <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    2b6e:	10 86       	std	Z+8, r1	; 0x08
    2b70:	11 86       	std	Z+9, r1	; 0x09
    2b72:	12 86       	std	Z+10, r1	; 0x0a
    2b74:	13 86       	std	Z+11, r1	; 0x0b
    2b76:	9f 01       	movw	r18, r30
    2b78:	22 50       	subi	r18, 0x02	; 2
    2b7a:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    2b7c:	e9 01       	movw	r28, r18
    2b7e:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2b80:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2b82:	84 23       	and	r24, r20
    2b84:	95 23       	and	r25, r21
    2b86:	a6 23       	and	r26, r22
    2b88:	b7 23       	and	r27, r23
    2b8a:	84 83       	std	Z+4, r24	; 0x04
    2b8c:	95 83       	std	Z+5, r25	; 0x05
    2b8e:	a6 83       	std	Z+6, r26	; 0x06
    2b90:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2b92:	80 85       	ldd	r24, Z+8	; 0x08
    2b94:	91 85       	ldd	r25, Z+9	; 0x09
    2b96:	a2 85       	ldd	r26, Z+10	; 0x0a
    2b98:	b3 85       	ldd	r27, Z+11	; 0x0b
    2b9a:	84 23       	and	r24, r20
    2b9c:	95 23       	and	r25, r21
    2b9e:	a6 23       	and	r26, r22
    2ba0:	b7 23       	and	r27, r23
    2ba2:	80 87       	std	Z+8, r24	; 0x08
    2ba4:	91 87       	std	Z+9, r25	; 0x09
    2ba6:	a2 87       	std	Z+10, r26	; 0x0a
    2ba8:	b3 87       	std	Z+11, r27	; 0x0b
    2baa:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2bac:	d7 e0       	ldi	r29, 0x07	; 7
    2bae:	eb 3c       	cpi	r30, 0xCB	; 203
    2bb0:	fd 07       	cpc	r31, r29
    2bb2:	79 f6       	brne	.-98     	; 0x2b52 <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    2bb4:	8e ef       	ldi	r24, 0xFE	; 254
    2bb6:	9f ef       	ldi	r25, 0xFF	; 255
    2bb8:	af ef       	ldi	r26, 0xFF	; 255
    2bba:	bf ef       	ldi	r27, 0xFF	; 255
    2bbc:	04 c0       	rjmp	.+8      	; 0x2bc6 <nrk_signal_delete+0xd6>
    2bbe:	88 0f       	add	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	aa 1f       	adc	r26, r26
    2bc4:	bb 1f       	adc	r27, r27
    2bc6:	0a 95       	dec	r16
    2bc8:	d2 f7       	brpl	.-12     	; 0x2bbe <nrk_signal_delete+0xce>
    2bca:	40 91 d4 05 	lds	r20, 0x05D4
    2bce:	50 91 d5 05 	lds	r21, 0x05D5
    2bd2:	60 91 d6 05 	lds	r22, 0x05D6
    2bd6:	70 91 d7 05 	lds	r23, 0x05D7
    2bda:	84 23       	and	r24, r20
    2bdc:	95 23       	and	r25, r21
    2bde:	a6 23       	and	r26, r22
    2be0:	b7 23       	and	r27, r23
    2be2:	80 93 d4 05 	sts	0x05D4, r24
    2be6:	90 93 d5 05 	sts	0x05D5, r25
    2bea:	a0 93 d6 05 	sts	0x05D6, r26
    2bee:	b0 93 d7 05 	sts	0x05D7, r27
	nrk_int_enable();
    2bf2:	0e 94 04 11 	call	0x2208	; 0x2208 <nrk_int_enable>

	return NRK_OK;
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	01 c0       	rjmp	.+2      	; 0x2bfc <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2bfa:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    2bfc:	df 91       	pop	r29
    2bfe:	cf 91       	pop	r28
    2c00:	1f 91       	pop	r17
    2c02:	0f 91       	pop	r16
    2c04:	ff 90       	pop	r15
    2c06:	ef 90       	pop	r14
    2c08:	df 90       	pop	r13
    2c0a:	cf 90       	pop	r12
    2c0c:	08 95       	ret

00002c0e <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    2c0e:	0f 93       	push	r16
    2c10:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    2c12:	41 e0       	ldi	r20, 0x01	; 1
    2c14:	50 e0       	ldi	r21, 0x00	; 0
    2c16:	60 e0       	ldi	r22, 0x00	; 0
    2c18:	70 e0       	ldi	r23, 0x00	; 0
    2c1a:	8a 01       	movw	r16, r20
    2c1c:	9b 01       	movw	r18, r22
    2c1e:	04 c0       	rjmp	.+8      	; 0x2c28 <nrk_signal_unregister+0x1a>
    2c20:	00 0f       	add	r16, r16
    2c22:	11 1f       	adc	r17, r17
    2c24:	22 1f       	adc	r18, r18
    2c26:	33 1f       	adc	r19, r19
    2c28:	8a 95       	dec	r24
    2c2a:	d2 f7       	brpl	.-12     	; 0x2c20 <nrk_signal_unregister+0x12>
    2c2c:	d9 01       	movw	r26, r18
    2c2e:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    2c30:	e0 91 db 07 	lds	r30, 0x07DB
    2c34:	f0 91 dc 07 	lds	r31, 0x07DC
    2c38:	45 85       	ldd	r20, Z+13	; 0x0d
    2c3a:	56 85       	ldd	r21, Z+14	; 0x0e
    2c3c:	67 85       	ldd	r22, Z+15	; 0x0f
    2c3e:	70 89       	ldd	r23, Z+16	; 0x10
    2c40:	04 23       	and	r16, r20
    2c42:	15 23       	and	r17, r21
    2c44:	26 23       	and	r18, r22
    2c46:	37 23       	and	r19, r23
    2c48:	01 2b       	or	r16, r17
    2c4a:	02 2b       	or	r16, r18
    2c4c:	03 2b       	or	r16, r19
    2c4e:	d1 f0       	breq	.+52     	; 0x2c84 <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    2c50:	80 95       	com	r24
    2c52:	90 95       	com	r25
    2c54:	a0 95       	com	r26
    2c56:	b0 95       	com	r27
    2c58:	48 23       	and	r20, r24
    2c5a:	59 23       	and	r21, r25
    2c5c:	6a 23       	and	r22, r26
    2c5e:	7b 23       	and	r23, r27
    2c60:	45 87       	std	Z+13, r20	; 0x0d
    2c62:	56 87       	std	Z+14, r21	; 0x0e
    2c64:	67 87       	std	Z+15, r22	; 0x0f
    2c66:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    2c68:	41 89       	ldd	r20, Z+17	; 0x11
    2c6a:	52 89       	ldd	r21, Z+18	; 0x12
    2c6c:	63 89       	ldd	r22, Z+19	; 0x13
    2c6e:	74 89       	ldd	r23, Z+20	; 0x14
    2c70:	84 23       	and	r24, r20
    2c72:	95 23       	and	r25, r21
    2c74:	a6 23       	and	r26, r22
    2c76:	b7 23       	and	r27, r23
    2c78:	81 8b       	std	Z+17, r24	; 0x11
    2c7a:	92 8b       	std	Z+18, r25	; 0x12
    2c7c:	a3 8b       	std	Z+19, r26	; 0x13
    2c7e:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	01 c0       	rjmp	.+2      	; 0x2c86 <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    2c84:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    2c86:	1f 91       	pop	r17
    2c88:	0f 91       	pop	r16
    2c8a:	08 95       	ret

00002c8c <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    2c8c:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    2c8e:	40 91 d4 05 	lds	r20, 0x05D4
    2c92:	50 91 d5 05 	lds	r21, 0x05D5
    2c96:	60 91 d6 05 	lds	r22, 0x05D6
    2c9a:	70 91 d7 05 	lds	r23, 0x05D7
    2c9e:	08 2e       	mov	r0, r24
    2ca0:	04 c0       	rjmp	.+8      	; 0x2caa <nrk_signal_register+0x1e>
    2ca2:	76 95       	lsr	r23
    2ca4:	67 95       	ror	r22
    2ca6:	57 95       	ror	r21
    2ca8:	47 95       	ror	r20
    2caa:	0a 94       	dec	r0
    2cac:	d2 f7       	brpl	.-12     	; 0x2ca2 <nrk_signal_register+0x16>
    2cae:	40 ff       	sbrs	r20, 0
    2cb0:	1d c0       	rjmp	.+58     	; 0x2cec <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    2cb2:	e0 91 db 07 	lds	r30, 0x07DB
    2cb6:	f0 91 dc 07 	lds	r31, 0x07DC
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	a0 e0       	ldi	r26, 0x00	; 0
    2cc0:	b0 e0       	ldi	r27, 0x00	; 0
    2cc2:	04 c0       	rjmp	.+8      	; 0x2ccc <nrk_signal_register+0x40>
    2cc4:	88 0f       	add	r24, r24
    2cc6:	99 1f       	adc	r25, r25
    2cc8:	aa 1f       	adc	r26, r26
    2cca:	bb 1f       	adc	r27, r27
    2ccc:	2a 95       	dec	r18
    2cce:	d2 f7       	brpl	.-12     	; 0x2cc4 <nrk_signal_register+0x38>
    2cd0:	45 85       	ldd	r20, Z+13	; 0x0d
    2cd2:	56 85       	ldd	r21, Z+14	; 0x0e
    2cd4:	67 85       	ldd	r22, Z+15	; 0x0f
    2cd6:	70 89       	ldd	r23, Z+16	; 0x10
    2cd8:	84 2b       	or	r24, r20
    2cda:	95 2b       	or	r25, r21
    2cdc:	a6 2b       	or	r26, r22
    2cde:	b7 2b       	or	r27, r23
    2ce0:	85 87       	std	Z+13, r24	; 0x0d
    2ce2:	96 87       	std	Z+14, r25	; 0x0e
    2ce4:	a7 87       	std	Z+15, r26	; 0x0f
    2ce6:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	08 95       	ret
	}
            
	return NRK_ERROR;
    2cec:	8f ef       	ldi	r24, 0xFF	; 255
}
    2cee:	08 95       	ret

00002cf0 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    2cf0:	cf 92       	push	r12
    2cf2:	df 92       	push	r13
    2cf4:	ef 92       	push	r14
    2cf6:	ff 92       	push	r15
    2cf8:	cf 93       	push	r28
	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;
    uint8_t timer;

	sig_mask=SIG(sig_id);
    2cfa:	c1 2c       	mov	r12, r1
    2cfc:	d1 2c       	mov	r13, r1
    2cfe:	76 01       	movw	r14, r12
    2d00:	c3 94       	inc	r12
    2d02:	04 c0       	rjmp	.+8      	; 0x2d0c <nrk_event_signal+0x1c>
    2d04:	cc 0c       	add	r12, r12
    2d06:	dd 1c       	adc	r13, r13
    2d08:	ee 1c       	adc	r14, r14
    2d0a:	ff 1c       	adc	r15, r15
    2d0c:	8a 95       	dec	r24
    2d0e:	d2 f7       	brpl	.-12     	; 0x2d04 <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    2d10:	80 91 d4 05 	lds	r24, 0x05D4
    2d14:	90 91 d5 05 	lds	r25, 0x05D5
    2d18:	a0 91 d6 05 	lds	r26, 0x05D6
    2d1c:	b0 91 d7 05 	lds	r27, 0x05D7
    2d20:	8c 21       	and	r24, r12
    2d22:	9d 21       	and	r25, r13
    2d24:	ae 21       	and	r26, r14
    2d26:	bf 21       	and	r27, r15
    2d28:	89 2b       	or	r24, r25
    2d2a:	8a 2b       	or	r24, r26
    2d2c:	8b 2b       	or	r24, r27
    2d2e:	11 f4       	brne	.+4      	; 0x2d34 <nrk_event_signal+0x44>
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	44 c0       	rjmp	.+136    	; 0x2dbc <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    2d34:	0e 94 02 11 	call	0x2204	; 0x2204 <nrk_int_disable>
    2d38:	e3 e7       	ldi	r30, 0x73	; 115
    2d3a:	f7 e0       	ldi	r31, 0x07	; 7
    2d3c:	a5 e7       	ldi	r26, 0x75	; 117
    2d3e:	b7 e0       	ldi	r27, 0x07	; 7

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    2d40:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2d42:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    2d44:	90 81       	ld	r25, Z
    2d46:	91 30       	cpi	r25, 0x01	; 1
    2d48:	b9 f4       	brne	.+46     	; 0x2d78 <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    2d4a:	42 85       	ldd	r20, Z+10	; 0x0a
    2d4c:	53 85       	ldd	r21, Z+11	; 0x0b
    2d4e:	64 85       	ldd	r22, Z+12	; 0x0c
    2d50:	75 85       	ldd	r23, Z+13	; 0x0d
    2d52:	4c 21       	and	r20, r12
    2d54:	5d 21       	and	r21, r13
    2d56:	6e 21       	and	r22, r14
    2d58:	7f 21       	and	r23, r15
    2d5a:	45 2b       	or	r20, r21
    2d5c:	46 2b       	or	r20, r22
    2d5e:	47 2b       	or	r20, r23
    2d60:	59 f0       	breq	.+22     	; 0x2d78 <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2d62:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    2d64:	16 86       	std	Z+14, r1	; 0x0e
    2d66:	17 86       	std	Z+15, r1	; 0x0f
    2d68:	10 8a       	std	Z+16, r1	; 0x10
    2d6a:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    2d6c:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    2d6e:	c2 86       	std	Z+10, r12	; 0x0a
    2d70:	d3 86       	std	Z+11, r13	; 0x0b
    2d72:	e4 86       	std	Z+12, r14	; 0x0c
    2d74:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    2d76:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2d78:	90 81       	ld	r25, Z
    2d7a:	92 30       	cpi	r25, 0x02	; 2
    2d7c:	a1 f4       	brne	.+40     	; 0x2da6 <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    2d7e:	42 85       	ldd	r20, Z+10	; 0x0a
    2d80:	53 85       	ldd	r21, Z+11	; 0x0b
    2d82:	64 85       	ldd	r22, Z+12	; 0x0c
    2d84:	75 85       	ldd	r23, Z+13	; 0x0d
    2d86:	4c 15       	cp	r20, r12
    2d88:	5d 05       	cpc	r21, r13
    2d8a:	6e 05       	cpc	r22, r14
    2d8c:	7f 05       	cpc	r23, r15
    2d8e:	59 f4       	brne	.+22     	; 0x2da6 <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2d90:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    2d92:	16 86       	std	Z+14, r1	; 0x0e
    2d94:	17 86       	std	Z+15, r1	; 0x0f
    2d96:	10 8a       	std	Z+16, r1	; 0x10
    2d98:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    2d9a:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    2d9c:	12 86       	std	Z+10, r1	; 0x0a
    2d9e:	13 86       	std	Z+11, r1	; 0x0b
    2da0:	14 86       	std	Z+12, r1	; 0x0c
    2da2:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    2da4:	c1 e0       	ldi	r28, 0x01	; 1
    2da6:	bb 96       	adiw	r30, 0x2b	; 43
    2da8:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    2daa:	97 e0       	ldi	r25, 0x07	; 7
    2dac:	e9 3c       	cpi	r30, 0xC9	; 201
    2dae:	f9 07       	cpc	r31, r25
    2db0:	49 f6       	brne	.-110    	; 0x2d44 <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    2db2:	0e 94 04 11 	call	0x2208	; 0x2208 <nrk_int_enable>
	if(event_occured)
    2db6:	c1 11       	cpse	r28, r1
    2db8:	05 c0       	rjmp	.+10     	; 0x2dc4 <nrk_event_signal+0xd4>
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    2dba:	82 e0       	ldi	r24, 0x02	; 2
    2dbc:	0e 94 9b 12 	call	0x2536	; 0x2536 <_nrk_errno_set>
	return NRK_ERROR;
    2dc0:	8f ef       	ldi	r24, 0xFF	; 255
    2dc2:	01 c0       	rjmp	.+2      	; 0x2dc6 <nrk_event_signal+0xd6>
            			_nrk_set_next_wakeup (timer);
			}	
		else
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    2dc6:	cf 91       	pop	r28
    2dc8:	ff 90       	pop	r15
    2dca:	ef 90       	pop	r14
    2dcc:	df 90       	pop	r13
    2dce:	cf 90       	pop	r12
    2dd0:	08 95       	ret

00002dd2 <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    2dd2:	0f 93       	push	r16
    2dd4:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    2dd6:	e0 91 db 07 	lds	r30, 0x07DB
    2dda:	f0 91 dc 07 	lds	r31, 0x07DC
    2dde:	05 85       	ldd	r16, Z+13	; 0x0d
    2de0:	16 85       	ldd	r17, Z+14	; 0x0e
    2de2:	27 85       	ldd	r18, Z+15	; 0x0f
    2de4:	30 89       	ldd	r19, Z+16	; 0x10
    2de6:	06 23       	and	r16, r22
    2de8:	17 23       	and	r17, r23
    2dea:	28 23       	and	r18, r24
    2dec:	39 23       	and	r19, r25
    2dee:	01 15       	cp	r16, r1
    2df0:	11 05       	cpc	r17, r1
    2df2:	21 05       	cpc	r18, r1
    2df4:	31 05       	cpc	r19, r1
    2df6:	11 f1       	breq	.+68     	; 0x2e3c <nrk_event_wait+0x6a>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    2dfc:	81 8b       	std	Z+17, r24	; 0x11
    2dfe:	92 8b       	std	Z+18, r25	; 0x12
    2e00:	a3 8b       	std	Z+19, r26	; 0x13
    2e02:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    2e04:	21 e0       	ldi	r18, 0x01	; 1
    2e06:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    2e08:	00 90 cb 07 	lds	r0, 0x07CB
    2e0c:	04 c0       	rjmp	.+8      	; 0x2e16 <nrk_event_wait+0x44>
    2e0e:	b6 95       	lsr	r27
    2e10:	a7 95       	ror	r26
    2e12:	97 95       	ror	r25
    2e14:	87 95       	ror	r24
    2e16:	0a 94       	dec	r0
    2e18:	d2 f7       	brpl	.-12     	; 0x2e0e <nrk_event_wait+0x3c>
    2e1a:	80 ff       	sbrs	r24, 0
    2e1c:	03 c0       	rjmp	.+6      	; 0x2e24 <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    2e1e:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <nrk_wait_until_nw>
    2e22:	04 c0       	rjmp	.+8      	; 0x2e2c <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	0e 94 c5 1a 	call	0x358a	; 0x358a <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    2e2c:	e0 91 db 07 	lds	r30, 0x07DB
    2e30:	f0 91 dc 07 	lds	r31, 0x07DC
    2e34:	01 89       	ldd	r16, Z+17	; 0x11
    2e36:	12 89       	ldd	r17, Z+18	; 0x12
    2e38:	23 89       	ldd	r18, Z+19	; 0x13
    2e3a:	34 89       	ldd	r19, Z+20	; 0x14
}
    2e3c:	c9 01       	movw	r24, r18
    2e3e:	b8 01       	movw	r22, r16
    2e40:	1f 91       	pop	r17
    2e42:	0f 91       	pop	r16
    2e44:	08 95       	ret

00002e46 <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    2e46:	90 91 da 07 	lds	r25, 0x07DA
    2e4a:	91 11       	cpse	r25, r1
    2e4c:	1d c0       	rjmp	.+58     	; 0x2e88 <nrk_sem_create+0x42>
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    2e4e:	90 91 c4 07 	lds	r25, 0x07C4
    2e52:	9f 3f       	cpi	r25, 0xFF	; 255
    2e54:	31 f0       	breq	.+12     	; 0x2e62 <nrk_sem_create+0x1c>
    2e56:	90 91 c7 07 	lds	r25, 0x07C7
    2e5a:	9f 3f       	cpi	r25, 0xFF	; 255
    2e5c:	21 f0       	breq	.+8      	; 0x2e66 <nrk_sem_create+0x20>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    2e5e:	e2 e0       	ldi	r30, 0x02	; 2
    2e60:	03 c0       	rjmp	.+6      	; 0x2e68 <nrk_sem_create+0x22>
		{
		   if(nrk_sem_list[i].count==-1) break;
    2e62:	e0 e0       	ldi	r30, 0x00	; 0
    2e64:	01 c0       	rjmp	.+2      	; 0x2e68 <nrk_sem_create+0x22>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    2e66:	e1 e0       	ldi	r30, 0x01	; 1
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	9f 01       	movw	r18, r30
    2e6c:	22 0f       	add	r18, r18
    2e6e:	33 1f       	adc	r19, r19
    2e70:	e2 0f       	add	r30, r18
    2e72:	f3 1f       	adc	r31, r19
    2e74:	ec 53       	subi	r30, 0x3C	; 60
    2e76:	f8 4f       	sbci	r31, 0xF8	; 248
    2e78:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    2e7a:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    2e7c:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	80 93 da 07 	sts	0x07DA, r24
	return	&nrk_sem_list[i];
    2e84:	cf 01       	movw	r24, r30
    2e86:	08 95       	ret

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    2e8c:	08 95       	ret

00002e8e <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    2e8e:	27 e0       	ldi	r18, 0x07	; 7
    2e90:	84 3c       	cpi	r24, 0xC4	; 196
    2e92:	92 07       	cpc	r25, r18
    2e94:	29 f0       	breq	.+10     	; 0x2ea0 <nrk_get_resource_index+0x12>
    2e96:	87 5c       	subi	r24, 0xC7	; 199
    2e98:	97 40       	sbci	r25, 0x07	; 7
    2e9a:	21 f4       	brne	.+8      	; 0x2ea4 <nrk_get_resource_index+0x16>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	08 95       	ret
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
    2ea2:	08 95       	ret
	return NRK_ERROR;
    2ea4:	8f ef       	ldi	r24, 0xFF	; 255
}
    2ea6:	08 95       	ret

00002ea8 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2ea8:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2eac:	8f 3f       	cpi	r24, 0xFF	; 255
    2eae:	11 f4       	brne	.+4      	; 0x2eb4 <nrk_sem_query+0xc>
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	02 c0       	rjmp	.+4      	; 0x2eb8 <nrk_sem_query+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2eb4:	82 30       	cpi	r24, 0x02	; 2
    2eb6:	21 f4       	brne	.+8      	; 0x2ec0 <nrk_sem_query+0x18>
    2eb8:	0e 94 9b 12 	call	0x2536	; 0x2536 <_nrk_errno_set>
    2ebc:	8f ef       	ldi	r24, 0xFF	; 255
    2ebe:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    2ec0:	99 27       	eor	r25, r25
    2ec2:	87 fd       	sbrc	r24, 7
    2ec4:	90 95       	com	r25
    2ec6:	fc 01       	movw	r30, r24
    2ec8:	ee 0f       	add	r30, r30
    2eca:	ff 1f       	adc	r31, r31
    2ecc:	8e 0f       	add	r24, r30
    2ece:	9f 1f       	adc	r25, r31
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	ec 53       	subi	r30, 0x3C	; 60
    2ed4:	f8 4f       	sbci	r31, 0xF8	; 248
    2ed6:	82 81       	ldd	r24, Z+2	; 0x02
}
    2ed8:	08 95       	ret

00002eda <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    2eda:	ef 92       	push	r14
    2edc:	ff 92       	push	r15
    2ede:	0f 93       	push	r16
    2ee0:	1f 93       	push	r17
    2ee2:	cf 93       	push	r28
    2ee4:	df 93       	push	r29
    2ee6:	1f 92       	push	r1
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    2eec:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2ef0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ef2:	11 f4       	brne	.+4      	; 0x2ef8 <nrk_sem_pend+0x1e>
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	02 c0       	rjmp	.+4      	; 0x2efc <nrk_sem_pend+0x22>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2ef8:	82 30       	cpi	r24, 0x02	; 2
    2efa:	21 f4       	brne	.+8      	; 0x2f04 <nrk_sem_pend+0x2a>
    2efc:	0e 94 9b 12 	call	0x2536	; 0x2536 <_nrk_errno_set>
    2f00:	8f ef       	ldi	r24, 0xFF	; 255
    2f02:	41 c0       	rjmp	.+130    	; 0x2f86 <nrk_sem_pend+0xac>
	
	nrk_int_disable();
    2f04:	89 83       	std	Y+1, r24	; 0x01
    2f06:	0e 94 02 11 	call	0x2204	; 0x2204 <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    2f0a:	89 81       	ldd	r24, Y+1	; 0x01
    2f0c:	e8 2e       	mov	r14, r24
    2f0e:	ff 24       	eor	r15, r15
    2f10:	e7 fc       	sbrc	r14, 7
    2f12:	f0 94       	com	r15
    2f14:	87 01       	movw	r16, r14
    2f16:	00 0f       	add	r16, r16
    2f18:	11 1f       	adc	r17, r17
    2f1a:	f8 01       	movw	r30, r16
    2f1c:	ee 0d       	add	r30, r14
    2f1e:	ff 1d       	adc	r31, r15
    2f20:	ec 53       	subi	r30, 0x3C	; 60
    2f22:	f8 4f       	sbci	r31, 0xF8	; 248
    2f24:	92 81       	ldd	r25, Z+2	; 0x02
    2f26:	91 11       	cpse	r25, r1
    2f28:	16 c0       	rjmp	.+44     	; 0x2f56 <nrk_sem_pend+0x7c>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    2f2a:	e0 91 db 07 	lds	r30, 0x07DB
    2f2e:	f0 91 dc 07 	lds	r31, 0x07DC
    2f32:	97 81       	ldd	r25, Z+7	; 0x07
    2f34:	92 60       	ori	r25, 0x02	; 2
    2f36:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    2f38:	99 27       	eor	r25, r25
    2f3a:	87 fd       	sbrc	r24, 7
    2f3c:	90 95       	com	r25
    2f3e:	a9 2f       	mov	r26, r25
    2f40:	b9 2f       	mov	r27, r25
    2f42:	81 8b       	std	Z+17, r24	; 0x11
    2f44:	92 8b       	std	Z+18, r25	; 0x12
    2f46:	a3 8b       	std	Z+19, r26	; 0x13
    2f48:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    2f4a:	0e 94 04 11 	call	0x2208	; 0x2208 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	0e 94 c5 1a 	call	0x358a	; 0x358a <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    2f56:	0e 0d       	add	r16, r14
    2f58:	1f 1d       	adc	r17, r15
    2f5a:	d8 01       	movw	r26, r16
    2f5c:	ac 53       	subi	r26, 0x3C	; 60
    2f5e:	b8 4f       	sbci	r27, 0xF8	; 248
    2f60:	12 96       	adiw	r26, 0x02	; 2
    2f62:	8c 91       	ld	r24, X
    2f64:	12 97       	sbiw	r26, 0x02	; 2
    2f66:	81 50       	subi	r24, 0x01	; 1
    2f68:	12 96       	adiw	r26, 0x02	; 2
    2f6a:	8c 93       	st	X, r24
    2f6c:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    2f6e:	e0 91 db 07 	lds	r30, 0x07DB
    2f72:	f0 91 dc 07 	lds	r31, 0x07DC
    2f76:	11 96       	adiw	r26, 0x01	; 1
    2f78:	8c 91       	ld	r24, X
    2f7a:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    2f80:	0e 94 04 11 	call	0x2208	; 0x2208 <nrk_int_enable>

	return NRK_OK;
    2f84:	81 e0       	ldi	r24, 0x01	; 1
}
    2f86:	0f 90       	pop	r0
    2f88:	df 91       	pop	r29
    2f8a:	cf 91       	pop	r28
    2f8c:	1f 91       	pop	r17
    2f8e:	0f 91       	pop	r16
    2f90:	ff 90       	pop	r15
    2f92:	ef 90       	pop	r14
    2f94:	08 95       	ret

00002f96 <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    2f96:	0f 93       	push	r16
    2f98:	1f 93       	push	r17
    2f9a:	cf 93       	push	r28
    2f9c:	df 93       	push	r29
    2f9e:	1f 92       	push	r1
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    2fa4:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    2fa8:	8f 3f       	cpi	r24, 0xFF	; 255
    2faa:	11 f4       	brne	.+4      	; 0x2fb0 <nrk_sem_post+0x1a>
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	02 c0       	rjmp	.+4      	; 0x2fb4 <nrk_sem_post+0x1e>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    2fb0:	82 30       	cpi	r24, 0x02	; 2
    2fb2:	21 f4       	brne	.+8      	; 0x2fbc <nrk_sem_post+0x26>
    2fb4:	0e 94 9b 12 	call	0x2536	; 0x2536 <_nrk_errno_set>
    2fb8:	8f ef       	ldi	r24, 0xFF	; 255
    2fba:	79 c0       	rjmp	.+242    	; 0x30ae <nrk_sem_post+0x118>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    2fbc:	48 2f       	mov	r20, r24
    2fbe:	55 27       	eor	r21, r21
    2fc0:	47 fd       	sbrc	r20, 7
    2fc2:	50 95       	com	r21
    2fc4:	9a 01       	movw	r18, r20
    2fc6:	22 0f       	add	r18, r18
    2fc8:	33 1f       	adc	r19, r19
    2fca:	24 0f       	add	r18, r20
    2fcc:	35 1f       	adc	r19, r21
    2fce:	89 01       	movw	r16, r18
    2fd0:	0c 53       	subi	r16, 0x3C	; 60
    2fd2:	18 4f       	sbci	r17, 0xF8	; 248
    2fd4:	f8 01       	movw	r30, r16
    2fd6:	22 81       	ldd	r18, Z+2	; 0x02
    2fd8:	90 81       	ld	r25, Z
    2fda:	29 17       	cp	r18, r25
    2fdc:	0c f0       	brlt	.+2      	; 0x2fe0 <nrk_sem_post+0x4a>
    2fde:	66 c0       	rjmp	.+204    	; 0x30ac <nrk_sem_post+0x116>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    2fe0:	89 83       	std	Y+1, r24	; 0x01
    2fe2:	0e 94 02 11 	call	0x2204	; 0x2204 <nrk_int_disable>

		nrk_sem_list[id].value++;
    2fe6:	f8 01       	movw	r30, r16
    2fe8:	92 81       	ldd	r25, Z+2	; 0x02
    2fea:	9f 5f       	subi	r25, 0xFF	; 255
    2fec:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    2fee:	e0 91 db 07 	lds	r30, 0x07DB
    2ff2:	f0 91 dc 07 	lds	r31, 0x07DC
    2ff6:	14 82       	std	Z+4, r1	; 0x04

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    2ff8:	90 91 73 07 	lds	r25, 0x0773
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	92 30       	cpi	r25, 0x02	; 2
    3000:	41 f5       	brne	.+80     	; 0x3052 <nrk_sem_post+0xbc>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3002:	00 91 7d 07 	lds	r16, 0x077D
    3006:	10 91 7e 07 	lds	r17, 0x077E
    300a:	20 91 7f 07 	lds	r18, 0x077F
    300e:	30 91 80 07 	lds	r19, 0x0780
    3012:	48 2f       	mov	r20, r24
    3014:	55 27       	eor	r21, r21
    3016:	47 fd       	sbrc	r20, 7
    3018:	50 95       	com	r21
    301a:	65 2f       	mov	r22, r21
    301c:	75 2f       	mov	r23, r21
    301e:	04 17       	cp	r16, r20
    3020:	15 07       	cpc	r17, r21
    3022:	26 07       	cpc	r18, r22
    3024:	37 07       	cpc	r19, r23
    3026:	a9 f4       	brne	.+42     	; 0x3052 <nrk_sem_post+0xbc>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3028:	93 e0       	ldi	r25, 0x03	; 3
    302a:	90 93 75 07 	sts	0x0775, r25
					nrk_task_TCB[task_ID].next_wakeup=0;
    302e:	10 92 81 07 	sts	0x0781, r1
    3032:	10 92 82 07 	sts	0x0782, r1
    3036:	10 92 83 07 	sts	0x0783, r1
    303a:	10 92 84 07 	sts	0x0784, r1
					nrk_task_TCB[task_ID].event_suspend=0;
    303e:	10 92 73 07 	sts	0x0773, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3042:	10 92 7d 07 	sts	0x077D, r1
    3046:	10 92 7e 07 	sts	0x077E, r1
    304a:	10 92 7f 07 	sts	0x077F, r1
    304e:	10 92 80 07 	sts	0x0780, r1

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3052:	90 91 9e 07 	lds	r25, 0x079E
    3056:	92 30       	cpi	r25, 0x02	; 2
    3058:	39 f5       	brne	.+78     	; 0x30a8 <nrk_sem_post+0x112>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    305a:	99 27       	eor	r25, r25
    305c:	87 fd       	sbrc	r24, 7
    305e:	90 95       	com	r25
    3060:	a9 2f       	mov	r26, r25
    3062:	b9 2f       	mov	r27, r25
    3064:	40 91 a8 07 	lds	r20, 0x07A8
    3068:	50 91 a9 07 	lds	r21, 0x07A9
    306c:	60 91 aa 07 	lds	r22, 0x07AA
    3070:	70 91 ab 07 	lds	r23, 0x07AB
    3074:	48 17       	cp	r20, r24
    3076:	59 07       	cpc	r21, r25
    3078:	6a 07       	cpc	r22, r26
    307a:	7b 07       	cpc	r23, r27
    307c:	a9 f4       	brne	.+42     	; 0x30a8 <nrk_sem_post+0x112>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    307e:	83 e0       	ldi	r24, 0x03	; 3
    3080:	80 93 a0 07 	sts	0x07A0, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    3084:	10 92 ac 07 	sts	0x07AC, r1
    3088:	10 92 ad 07 	sts	0x07AD, r1
    308c:	10 92 ae 07 	sts	0x07AE, r1
    3090:	10 92 af 07 	sts	0x07AF, r1
					nrk_task_TCB[task_ID].event_suspend=0;
    3094:	10 92 9e 07 	sts	0x079E, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3098:	10 92 a8 07 	sts	0x07A8, r1
    309c:	10 92 a9 07 	sts	0x07A9, r1
    30a0:	10 92 aa 07 	sts	0x07AA, r1
    30a4:	10 92 ab 07 	sts	0x07AB, r1
				}   

		}
		nrk_int_enable();
    30a8:	0e 94 04 11 	call	0x2208	; 0x2208 <nrk_int_enable>
	}
		
return NRK_OK;
    30ac:	81 e0       	ldi	r24, 0x01	; 1
}
    30ae:	0f 90       	pop	r0
    30b0:	df 91       	pop	r29
    30b2:	cf 91       	pop	r28
    30b4:	1f 91       	pop	r17
    30b6:	0f 91       	pop	r16
    30b8:	08 95       	ret

000030ba <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    30ba:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    30be:	8f 3f       	cpi	r24, 0xFF	; 255
    30c0:	11 f4       	brne	.+4      	; 0x30c6 <nrk_sem_delete+0xc>
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	02 c0       	rjmp	.+4      	; 0x30ca <nrk_sem_delete+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    30c6:	82 30       	cpi	r24, 0x02	; 2
    30c8:	21 f4       	brne	.+8      	; 0x30d2 <nrk_sem_delete+0x18>
    30ca:	0e 94 9b 12 	call	0x2536	; 0x2536 <_nrk_errno_set>
    30ce:	8f ef       	ldi	r24, 0xFF	; 255
    30d0:	08 95       	ret

	nrk_sem_list[id].count=-1;
    30d2:	99 27       	eor	r25, r25
    30d4:	87 fd       	sbrc	r24, 7
    30d6:	90 95       	com	r25
    30d8:	fc 01       	movw	r30, r24
    30da:	ee 0f       	add	r30, r30
    30dc:	ff 1f       	adc	r31, r31
    30de:	8e 0f       	add	r24, r30
    30e0:	9f 1f       	adc	r25, r31
    30e2:	fc 01       	movw	r30, r24
    30e4:	ec 53       	subi	r30, 0x3C	; 60
    30e6:	f8 4f       	sbci	r31, 0xF8	; 248
    30e8:	8f ef       	ldi	r24, 0xFF	; 255
    30ea:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    30ec:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    30ee:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    30f0:	80 91 da 07 	lds	r24, 0x07DA
    30f4:	81 50       	subi	r24, 0x01	; 1
    30f6:	80 93 da 07 	sts	0x07DA, r24
return NRK_OK;
    30fa:	81 e0       	ldi	r24, 0x01	; 1
}
    30fc:	08 95       	ret

000030fe <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    30fe:	e0 91 d0 07 	lds	r30, 0x07D0
    3102:	f0 91 d1 07 	lds	r31, 0x07D1
}
    3106:	80 81       	ld	r24, Z
    3108:	08 95       	ret

0000310a <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    310a:	e0 91 d0 07 	lds	r30, 0x07D0
    310e:	f0 91 d1 07 	lds	r31, 0x07D1
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    3112:	30 97       	sbiw	r30, 0x00	; 0
    3114:	21 f0       	breq	.+8      	; 0x311e <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    3116:	03 80       	ldd	r0, Z+3	; 0x03
    3118:	f4 81       	ldd	r31, Z+4	; 0x04
    311a:	e0 2d       	mov	r30, r0
    311c:	fa cf       	rjmp	.-12     	; 0x3112 <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    311e:	08 95       	ret

00003120 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    3120:	af 92       	push	r10
    3122:	bf 92       	push	r11
    3124:	cf 92       	push	r12
    3126:	df 92       	push	r13
    3128:	ef 92       	push	r14
    312a:	ff 92       	push	r15
    312c:	0f 93       	push	r16
    312e:	1f 93       	push	r17
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    3134:	e0 91 6a 07 	lds	r30, 0x076A
    3138:	f0 91 6b 07 	lds	r31, 0x076B
    313c:	30 97       	sbiw	r30, 0x00	; 0
    313e:	09 f4       	brne	.+2      	; 0x3142 <nrk_add_to_readyQ+0x22>
    3140:	90 c0       	rjmp	.+288    	; 0x3262 <nrk_add_to_readyQ+0x142>
    {
        return;
    }


    NextNode = _head_node;
    3142:	00 91 d0 07 	lds	r16, 0x07D0
    3146:	10 91 d1 07 	lds	r17, 0x07D1
    CurNode = _free_node;

    if (_head_node != NULL)
    314a:	01 15       	cp	r16, r1
    314c:	11 05       	cpc	r17, r1
    314e:	09 f4       	brne	.+2      	; 0x3152 <nrk_add_to_readyQ+0x32>
    3150:	4c c0       	rjmp	.+152    	; 0x31ea <nrk_add_to_readyQ+0xca>
    3152:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    3154:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    3156:	58 2f       	mov	r21, r24
    3158:	54 03       	mulsu	r21, r20
    315a:	90 01       	movw	r18, r0
    315c:	11 24       	eor	r1, r1
    315e:	24 59       	subi	r18, 0x94	; 148
    3160:	38 4f       	sbci	r19, 0xF8	; 248
    3162:	79 01       	movw	r14, r18
    3164:	9a e0       	ldi	r25, 0x0A	; 10
    3166:	e9 0e       	add	r14, r25
    3168:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    316a:	69 01       	movw	r12, r18
    316c:	c4 e0       	ldi	r28, 0x04	; 4
    316e:	cc 0e       	add	r12, r28
    3170:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    3172:	59 01       	movw	r10, r18
    3174:	db e0       	ldi	r29, 0x0B	; 11
    3176:	ad 0e       	add	r10, r29
    3178:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    317a:	2c 91       	ld	r18, X
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	42 9f       	mul	r20, r18
    3180:	b0 01       	movw	r22, r0
    3182:	43 9f       	mul	r20, r19
    3184:	70 0d       	add	r23, r0
    3186:	11 24       	eor	r1, r1
    3188:	64 59       	subi	r22, 0x94	; 148
    318a:	78 4f       	sbci	r23, 0xF8	; 248
    318c:	eb 01       	movw	r28, r22
    318e:	9c 81       	ldd	r25, Y+4	; 0x04
    3190:	99 23       	and	r25, r25
    3192:	29 f0       	breq	.+10     	; 0x319e <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    3194:	5b 85       	ldd	r21, Y+11	; 0x0b
    3196:	e7 01       	movw	r28, r14
    3198:	98 81       	ld	r25, Y
    319a:	59 17       	cp	r21, r25
    319c:	40 f1       	brcs	.+80     	; 0x31ee <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    319e:	e6 01       	movw	r28, r12
    31a0:	98 81       	ld	r25, Y
    31a2:	99 23       	and	r25, r25
    31a4:	69 f0       	breq	.+26     	; 0x31c0 <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    31a6:	42 9f       	mul	r20, r18
    31a8:	b0 01       	movw	r22, r0
    31aa:	43 9f       	mul	r20, r19
    31ac:	70 0d       	add	r23, r0
    31ae:	11 24       	eor	r1, r1
    31b0:	64 59       	subi	r22, 0x94	; 148
    31b2:	78 4f       	sbci	r23, 0xF8	; 248
    31b4:	eb 01       	movw	r28, r22
    31b6:	5a 85       	ldd	r21, Y+10	; 0x0a
    31b8:	e5 01       	movw	r28, r10
    31ba:	98 81       	ld	r25, Y
    31bc:	59 17       	cp	r21, r25
    31be:	b8 f0       	brcs	.+46     	; 0x31ee <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    31c0:	42 9f       	mul	r20, r18
    31c2:	b0 01       	movw	r22, r0
    31c4:	43 9f       	mul	r20, r19
    31c6:	70 0d       	add	r23, r0
    31c8:	11 24       	eor	r1, r1
    31ca:	9b 01       	movw	r18, r22
    31cc:	24 59       	subi	r18, 0x94	; 148
    31ce:	38 4f       	sbci	r19, 0xF8	; 248
    31d0:	e9 01       	movw	r28, r18
    31d2:	2a 85       	ldd	r18, Y+10	; 0x0a
    31d4:	e7 01       	movw	r28, r14
    31d6:	98 81       	ld	r25, Y
    31d8:	29 17       	cp	r18, r25
    31da:	48 f0       	brcs	.+18     	; 0x31ee <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    31dc:	13 96       	adiw	r26, 0x03	; 3
    31de:	0d 90       	ld	r0, X+
    31e0:	bc 91       	ld	r27, X
    31e2:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    31e4:	10 97       	sbiw	r26, 0x00	; 0
    31e6:	49 f6       	brne	.-110    	; 0x317a <nrk_add_to_readyQ+0x5a>
    31e8:	02 c0       	rjmp	.+4      	; 0x31ee <nrk_add_to_readyQ+0xce>
    31ea:	a0 e0       	ldi	r26, 0x00	; 0
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    31ee:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    31f0:	c3 81       	ldd	r28, Z+3	; 0x03
    31f2:	d4 81       	ldd	r29, Z+4	; 0x04
    31f4:	d0 93 6b 07 	sts	0x076B, r29
    31f8:	c0 93 6a 07 	sts	0x076A, r28

    if (NextNode == _head_node)
    31fc:	a0 17       	cp	r26, r16
    31fe:	b1 07       	cpc	r27, r17
    3200:	b1 f4       	brne	.+44     	; 0x322e <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    3202:	10 97       	sbiw	r26, 0x00	; 0
    3204:	49 f0       	breq	.+18     	; 0x3218 <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    3206:	b4 83       	std	Z+4, r27	; 0x04
    3208:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    320a:	12 82       	std	Z+2, r1	; 0x02
    320c:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    320e:	12 96       	adiw	r26, 0x02	; 2
    3210:	fc 93       	st	X, r31
    3212:	ee 93       	st	-X, r30
    3214:	11 97       	sbiw	r26, 0x01	; 1
    3216:	06 c0       	rjmp	.+12     	; 0x3224 <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    3218:	14 82       	std	Z+4, r1	; 0x04
    321a:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    321c:	12 82       	std	Z+2, r1	; 0x02
    321e:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    3220:	fa 83       	std	Y+2, r31	; 0x02
    3222:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    3224:	f0 93 d1 07 	sts	0x07D1, r31
    3228:	e0 93 d0 07 	sts	0x07D0, r30
    322c:	1a c0       	rjmp	.+52     	; 0x3262 <nrk_add_to_readyQ+0x142>
    322e:	11 96       	adiw	r26, 0x01	; 1
    3230:	8d 91       	ld	r24, X+
    3232:	9c 91       	ld	r25, X
    3234:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    3236:	ac 17       	cp	r26, r28
    3238:	bd 07       	cpc	r27, r29
    323a:	59 f0       	breq	.+22     	; 0x3252 <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    323c:	92 83       	std	Z+2, r25	; 0x02
    323e:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    3240:	b4 83       	std	Z+4, r27	; 0x04
    3242:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    3244:	11 96       	adiw	r26, 0x01	; 1
    3246:	cd 91       	ld	r28, X+
    3248:	dc 91       	ld	r29, X
    324a:	12 97       	sbiw	r26, 0x02	; 2
    324c:	fc 83       	std	Y+4, r31	; 0x04
    324e:	eb 83       	std	Y+3, r30	; 0x03
    3250:	04 c0       	rjmp	.+8      	; 0x325a <nrk_add_to_readyQ+0x13a>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    3252:	14 82       	std	Z+4, r1	; 0x04
    3254:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    3256:	92 83       	std	Z+2, r25	; 0x02
    3258:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    325a:	12 96       	adiw	r26, 0x02	; 2
    325c:	fc 93       	st	X, r31
    325e:	ee 93       	st	-X, r30
    3260:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    3262:	df 91       	pop	r29
    3264:	cf 91       	pop	r28
    3266:	1f 91       	pop	r17
    3268:	0f 91       	pop	r16
    326a:	ff 90       	pop	r15
    326c:	ef 90       	pop	r14
    326e:	df 90       	pop	r13
    3270:	cf 90       	pop	r12
    3272:	bf 90       	pop	r11
    3274:	af 90       	pop	r10
    3276:	08 95       	ret

00003278 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    3278:	cf 93       	push	r28
    327a:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    327c:	e0 91 d0 07 	lds	r30, 0x07D0
    3280:	f0 91 d1 07 	lds	r31, 0x07D1
    3284:	30 97       	sbiw	r30, 0x00	; 0
    3286:	09 f4       	brne	.+2      	; 0x328a <nrk_rem_from_readyQ+0x12>
    3288:	44 c0       	rjmp	.+136    	; 0x3312 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    328a:	99 27       	eor	r25, r25
    328c:	87 fd       	sbrc	r24, 7
    328e:	90 95       	com	r25
    3290:	20 81       	ld	r18, Z
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	28 17       	cp	r18, r24
    3296:	39 07       	cpc	r19, r25
    3298:	81 f4       	brne	.+32     	; 0x32ba <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    329a:	a3 81       	ldd	r26, Z+3	; 0x03
    329c:	b4 81       	ldd	r27, Z+4	; 0x04
    329e:	b0 93 d1 07 	sts	0x07D1, r27
    32a2:	a0 93 d0 07 	sts	0x07D0, r26
        _head_node->Prev = NULL;
    32a6:	12 96       	adiw	r26, 0x02	; 2
    32a8:	1c 92       	st	X, r1
    32aa:	1e 92       	st	-X, r1
    32ac:	11 97       	sbiw	r26, 0x01	; 1
    32ae:	18 c0       	rjmp	.+48     	; 0x32e0 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    32b0:	03 80       	ldd	r0, Z+3	; 0x03
    32b2:	f4 81       	ldd	r31, Z+4	; 0x04
    32b4:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    32b6:	30 97       	sbiw	r30, 0x00	; 0
    32b8:	61 f1       	breq	.+88     	; 0x3312 <nrk_rem_from_readyQ+0x9a>
    32ba:	20 81       	ld	r18, Z
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	28 17       	cp	r18, r24
    32c0:	39 07       	cpc	r19, r25
    32c2:	b1 f7       	brne	.-20     	; 0x32b0 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    32c4:	c1 81       	ldd	r28, Z+1	; 0x01
    32c6:	d2 81       	ldd	r29, Z+2	; 0x02
    32c8:	83 81       	ldd	r24, Z+3	; 0x03
    32ca:	94 81       	ldd	r25, Z+4	; 0x04
    32cc:	9c 83       	std	Y+4, r25	; 0x04
    32ce:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    32d0:	a3 81       	ldd	r26, Z+3	; 0x03
    32d2:	b4 81       	ldd	r27, Z+4	; 0x04
    32d4:	10 97       	sbiw	r26, 0x00	; 0
    32d6:	21 f0       	breq	.+8      	; 0x32e0 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    32d8:	12 96       	adiw	r26, 0x02	; 2
    32da:	dc 93       	st	X, r29
    32dc:	ce 93       	st	-X, r28
    32de:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    32e0:	a0 91 6a 07 	lds	r26, 0x076A
    32e4:	b0 91 6b 07 	lds	r27, 0x076B
    32e8:	10 97       	sbiw	r26, 0x00	; 0
    32ea:	39 f4       	brne	.+14     	; 0x32fa <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    32ec:	f0 93 6b 07 	sts	0x076B, r31
    32f0:	e0 93 6a 07 	sts	0x076A, r30
        _free_node->Next = NULL;
    32f4:	14 82       	std	Z+4, r1	; 0x04
    32f6:	13 82       	std	Z+3, r1	; 0x03
    32f8:	0a c0       	rjmp	.+20     	; 0x330e <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    32fa:	b4 83       	std	Z+4, r27	; 0x04
    32fc:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    32fe:	12 96       	adiw	r26, 0x02	; 2
    3300:	fc 93       	st	X, r31
    3302:	ee 93       	st	-X, r30
    3304:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    3306:	f0 93 6b 07 	sts	0x076B, r31
    330a:	e0 93 6a 07 	sts	0x076A, r30
    }
    _free_node->Prev = NULL;
    330e:	12 82       	std	Z+2, r1	; 0x02
    3310:	11 82       	std	Z+1, r1	; 0x01
}
    3312:	df 91       	pop	r29
    3314:	cf 91       	pop	r28
    3316:	08 95       	ret

00003318 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    3318:	ef 92       	push	r14
    331a:	ff 92       	push	r15
    331c:	0f 93       	push	r16
    331e:	1f 93       	push	r17
    3320:	cf 93       	push	r28
    3322:	df 93       	push	r29
    3324:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    3326:	4b 81       	ldd	r20, Y+3	; 0x03
    3328:	5c 81       	ldd	r21, Y+4	; 0x04
    332a:	69 81       	ldd	r22, Y+1	; 0x01
    332c:	7a 81       	ldd	r23, Y+2	; 0x02
    332e:	8d 81       	ldd	r24, Y+5	; 0x05
    3330:	9e 81       	ldd	r25, Y+6	; 0x06
    3332:	0e 94 28 27 	call	0x4e50	; 0x4e50 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    3336:	2f 81       	ldd	r18, Y+7	; 0x07
    3338:	22 23       	and	r18, r18
    333a:	71 f0       	breq	.+28     	; 0x3358 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    333c:	4b 81       	ldd	r20, Y+3	; 0x03
    333e:	5c 81       	ldd	r21, Y+4	; 0x04
    3340:	e1 2c       	mov	r14, r1
    3342:	f1 2c       	mov	r15, r1
    3344:	00 e0       	ldi	r16, 0x00	; 0
    3346:	10 e0       	ldi	r17, 0x00	; 0
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	bc 01       	movw	r22, r24
    334e:	ce 01       	movw	r24, r28
    3350:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    3354:	1f 82       	std	Y+7, r1	; 0x07
    3356:	0c c0       	rjmp	.+24     	; 0x3370 <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    3358:	e8 81       	ld	r30, Y
    335a:	2b e2       	ldi	r18, 0x2B	; 43
    335c:	e2 02       	muls	r30, r18
    335e:	f0 01       	movw	r30, r0
    3360:	11 24       	eor	r1, r1
    3362:	e4 59       	subi	r30, 0x94	; 148
    3364:	f8 4f       	sbci	r31, 0xF8	; 248
    3366:	21 85       	ldd	r18, Z+9	; 0x09
    3368:	23 30       	cpi	r18, 0x03	; 3
    336a:	b9 f4       	brne	.+46     	; 0x339a <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    336c:	91 83       	std	Z+1, r25	; 0x01
    336e:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    3370:	e8 81       	ld	r30, Y
    3372:	8b e2       	ldi	r24, 0x2B	; 43
    3374:	e8 02       	muls	r30, r24
    3376:	f0 01       	movw	r30, r0
    3378:	11 24       	eor	r1, r1
    337a:	e4 59       	subi	r30, 0x94	; 148
    337c:	f8 4f       	sbci	r31, 0xF8	; 248
    337e:	85 89       	ldd	r24, Z+21	; 0x15
    3380:	96 89       	ldd	r25, Z+22	; 0x16
    3382:	a7 89       	ldd	r26, Z+23	; 0x17
    3384:	b0 8d       	ldd	r27, Z+24	; 0x18
    3386:	89 2b       	or	r24, r25
    3388:	8a 2b       	or	r24, r26
    338a:	8b 2b       	or	r24, r27
    338c:	41 f4       	brne	.+16     	; 0x339e <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    338e:	82 e0       	ldi	r24, 0x02	; 2
    3390:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    3392:	88 81       	ld	r24, Y
    3394:	0e 94 90 18 	call	0x3120	; 0x3120 <nrk_add_to_readyQ>
    3398:	02 c0       	rjmp	.+4      	; 0x339e <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    339a:	8f ef       	ldi	r24, 0xFF	; 255
    339c:	01 c0       	rjmp	.+2      	; 0x33a0 <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    339e:	81 e0       	ldi	r24, 0x01	; 1
}
    33a0:	df 91       	pop	r29
    33a2:	cf 91       	pop	r28
    33a4:	1f 91       	pop	r17
    33a6:	0f 91       	pop	r16
    33a8:	ff 90       	pop	r15
    33aa:	ef 90       	pop	r14
    33ac:	08 95       	ret

000033ae <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    33ae:	1f 93       	push	r17
    33b0:	cf 93       	push	r28
    33b2:	df 93       	push	r29
    33b4:	cd b7       	in	r28, 0x3d	; 61
    33b6:	de b7       	in	r29, 0x3e	; 62
    33b8:	28 97       	sbiw	r28, 0x08	; 8
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	f8 94       	cli
    33be:	de bf       	out	0x3e, r29	; 62
    33c0:	0f be       	out	0x3f, r0	; 63
    33c2:	cd bf       	out	0x3d, r28	; 61
    33c4:	29 83       	std	Y+1, r18	; 0x01
    33c6:	3a 83       	std	Y+2, r19	; 0x02
    33c8:	4b 83       	std	Y+3, r20	; 0x03
    33ca:	5c 83       	std	Y+4, r21	; 0x04
    33cc:	6d 83       	std	Y+5, r22	; 0x05
    33ce:	7e 83       	std	Y+6, r23	; 0x06
    33d0:	8f 83       	std	Y+7, r24	; 0x07
    33d2:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    33d4:	0e 94 02 11 	call	0x2204	; 0x2204 <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    33d8:	0e 94 52 24 	call	0x48a4	; 0x48a4 <_nrk_os_timer_get>
    33dc:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    33de:	ce 01       	movw	r24, r28
    33e0:	01 96       	adiw	r24, 0x01	; 1
    33e2:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    33e6:	63 30       	cpi	r22, 0x03	; 3
    33e8:	71 05       	cpc	r23, r1
    33ea:	98 f0       	brcs	.+38     	; 0x3412 <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    33ec:	e0 91 db 07 	lds	r30, 0x07DB
    33f0:	f0 91 dc 07 	lds	r31, 0x07DC
    33f4:	21 2f       	mov	r18, r17
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	62 0f       	add	r22, r18
    33fa:	73 1f       	adc	r23, r19
    33fc:	cb 01       	movw	r24, r22
    33fe:	a0 e0       	ldi	r26, 0x00	; 0
    3400:	b0 e0       	ldi	r27, 0x00	; 0
    3402:	85 8b       	std	Z+21, r24	; 0x15
    3404:	96 8b       	std	Z+22, r25	; 0x16
    3406:	a7 8b       	std	Z+23, r26	; 0x17
    3408:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    340a:	0e 94 04 11 	call	0x2208	; 0x2208 <nrk_int_enable>

    return NRK_OK;
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	01 c0       	rjmp	.+2      	; 0x3414 <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    3412:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    3414:	28 96       	adiw	r28, 0x08	; 8
    3416:	0f b6       	in	r0, 0x3f	; 63
    3418:	f8 94       	cli
    341a:	de bf       	out	0x3e, r29	; 62
    341c:	0f be       	out	0x3f, r0	; 63
    341e:	cd bf       	out	0x3d, r28	; 61
    3420:	df 91       	pop	r29
    3422:	cf 91       	pop	r28
    3424:	1f 91       	pop	r17
    3426:	08 95       	ret

00003428 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    3428:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    342c:	e0 91 db 07 	lds	r30, 0x07DB
    3430:	f0 91 dc 07 	lds	r31, 0x07DC
    3434:	85 81       	ldd	r24, Z+5	; 0x05
    3436:	81 11       	cpse	r24, r1
    3438:	f7 cf       	rjmp	.-18     	; 0x3428 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    343a:	08 95       	ret

0000343c <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    343c:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    343e:	0e 94 f6 14 	call	0x29ec	; 0x29ec <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    3442:	0e 94 02 11 	call	0x2204	; 0x2204 <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    3446:	e0 91 db 07 	lds	r30, 0x07DB
    344a:	f0 91 dc 07 	lds	r31, 0x07DC
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	92 a7       	std	Z+42, r25	; 0x2a
    3454:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    3456:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    3458:	0e 94 52 24 	call	0x48a4	; 0x48a4 <_nrk_os_timer_get>
    345c:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    345e:	88 3f       	cpi	r24, 0xF8	; 248
    3460:	80 f4       	brcc	.+32     	; 0x3482 <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3462:	0e 94 ed 23 	call	0x47da	; 0x47da <_nrk_get_next_wakeup>
    3466:	2c 2f       	mov	r18, r28
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	2f 5f       	subi	r18, 0xFF	; 255
    346c:	3f 4f       	sbci	r19, 0xFF	; 255
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	28 17       	cp	r18, r24
    3472:	39 07       	cpc	r19, r25
    3474:	34 f4       	brge	.+12     	; 0x3482 <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    3476:	82 e0       	ldi	r24, 0x02	; 2
    3478:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    347a:	80 93 7c 06 	sts	0x067C, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    347e:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3482:	0e 94 04 11 	call	0x2208	; 0x2208 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3486:	0e 94 14 1a 	call	0x3428	; 0x3428 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	cf 91       	pop	r28
    348e:	08 95       	ret

00003490 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    3490:	e0 91 db 07 	lds	r30, 0x07DB
    3494:	f0 91 dc 07 	lds	r31, 0x07DC
    3498:	80 85       	ldd	r24, Z+8	; 0x08
    349a:	0e 94 3c 19 	call	0x3278	; 0x3278 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    349e:	e0 91 db 07 	lds	r30, 0x07DB
    34a2:	f0 91 dc 07 	lds	r31, 0x07DC
    34a6:	84 e0       	ldi	r24, 0x04	; 4
    34a8:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    34aa:	0e 94 1e 1a 	call	0x343c	; 0x343c <nrk_wait_until_next_period>
    return NRK_OK;
}
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	08 95       	ret

000034b2 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    34b2:	cf 93       	push	r28
    34b4:	df 93       	push	r29
    34b6:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    34b8:	0e 94 f6 14 	call	0x29ec	; 0x29ec <nrk_stack_check>

    if (p == 0)
    34bc:	20 97       	sbiw	r28, 0x00	; 0
    34be:	11 f4       	brne	.+4      	; 0x34c4 <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    34c0:	c1 e0       	ldi	r28, 0x01	; 1
    34c2:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    34c4:	0e 94 02 11 	call	0x2204	; 0x2204 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    34c8:	e0 91 db 07 	lds	r30, 0x07DB
    34cc:	f0 91 dc 07 	lds	r31, 0x07DC
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    34d4:	d2 a7       	std	Z+42, r29	; 0x2a
    34d6:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    34d8:	0e 94 52 24 	call	0x48a4	; 0x48a4 <_nrk_os_timer_get>
    34dc:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    34de:	88 3f       	cpi	r24, 0xF8	; 248
    34e0:	80 f4       	brcc	.+32     	; 0x3502 <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    34e2:	0e 94 ed 23 	call	0x47da	; 0x47da <_nrk_get_next_wakeup>
    34e6:	2c 2f       	mov	r18, r28
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	2f 5f       	subi	r18, 0xFF	; 255
    34ec:	3f 4f       	sbci	r19, 0xFF	; 255
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	28 17       	cp	r18, r24
    34f2:	39 07       	cpc	r19, r25
    34f4:	34 f4       	brge	.+12     	; 0x3502 <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    34f6:	82 e0       	ldi	r24, 0x02	; 2
    34f8:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    34fa:	80 93 7c 06 	sts	0x067C, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    34fe:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3502:	0e 94 04 11 	call	0x2208	; 0x2208 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3506:	0e 94 14 1a 	call	0x3428	; 0x3428 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	df 91       	pop	r29
    350e:	cf 91       	pop	r28
    3510:	08 95       	ret

00003512 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    3512:	ef 92       	push	r14
    3514:	ff 92       	push	r15
    3516:	0f 93       	push	r16
    3518:	1f 93       	push	r17
    351a:	cf 93       	push	r28
    351c:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    351e:	0e 94 02 11 	call	0x2204	; 0x2204 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3522:	e0 91 db 07 	lds	r30, 0x07DB
    3526:	f0 91 dc 07 	lds	r31, 0x07DC
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    352e:	0e 94 52 24 	call	0x48a4	; 0x48a4 <_nrk_os_timer_get>
    3532:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    3534:	e0 91 db 07 	lds	r30, 0x07DB
    3538:	f0 91 dc 07 	lds	r31, 0x07DC
    353c:	e8 2e       	mov	r14, r24
    353e:	f1 2c       	mov	r15, r1
    3540:	c7 01       	movw	r24, r14
    3542:	80 0f       	add	r24, r16
    3544:	91 1f       	adc	r25, r17
    3546:	a0 e0       	ldi	r26, 0x00	; 0
    3548:	b0 e0       	ldi	r27, 0x00	; 0
    354a:	85 8b       	std	Z+21, r24	; 0x15
    354c:	96 8b       	std	Z+22, r25	; 0x16
    354e:	a7 8b       	std	Z+23, r26	; 0x17
    3550:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3552:	c8 3f       	cpi	r28, 0xF8	; 248
    3554:	78 f4       	brcc	.+30     	; 0x3574 <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3556:	0e 94 ed 23 	call	0x47da	; 0x47da <_nrk_get_next_wakeup>
    355a:	9f ef       	ldi	r25, 0xFF	; 255
    355c:	e9 1a       	sub	r14, r25
    355e:	f9 0a       	sbc	r15, r25
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	e8 16       	cp	r14, r24
    3564:	f9 06       	cpc	r15, r25
    3566:	34 f4       	brge	.+12     	; 0x3574 <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    3568:	82 e0       	ldi	r24, 0x02	; 2
    356a:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    356c:	80 93 7c 06 	sts	0x067C, r24
            _nrk_set_next_wakeup (timer);
    3570:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3574:	0e 94 04 11 	call	0x2208	; 0x2208 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3578:	0e 94 14 1a 	call	0x3428	; 0x3428 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	cf 91       	pop	r28
    3580:	1f 91       	pop	r17
    3582:	0f 91       	pop	r16
    3584:	ff 90       	pop	r15
    3586:	ef 90       	pop	r14
    3588:	08 95       	ret

0000358a <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    358a:	cf 93       	push	r28
    358c:	df 93       	push	r29
    358e:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    3590:	0e 94 02 11 	call	0x2204	; 0x2204 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3594:	e0 91 db 07 	lds	r30, 0x07DB
    3598:	f0 91 dc 07 	lds	r31, 0x07DC
    359c:	21 e0       	ldi	r18, 0x01	; 1
    359e:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    35a0:	ce 01       	movw	r24, r28
    35a2:	a0 e0       	ldi	r26, 0x00	; 0
    35a4:	b0 e0       	ldi	r27, 0x00	; 0
    35a6:	85 8b       	std	Z+21, r24	; 0x15
    35a8:	96 8b       	std	Z+22, r25	; 0x16
    35aa:	a7 8b       	std	Z+23, r26	; 0x17
    35ac:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    35ae:	0e 94 52 24 	call	0x48a4	; 0x48a4 <_nrk_os_timer_get>
    35b2:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    35b4:	88 3f       	cpi	r24, 0xF8	; 248
    35b6:	80 f4       	brcc	.+32     	; 0x35d8 <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    35b8:	0e 94 ed 23 	call	0x47da	; 0x47da <_nrk_get_next_wakeup>
    35bc:	2c 2f       	mov	r18, r28
    35be:	30 e0       	ldi	r19, 0x00	; 0
    35c0:	2f 5f       	subi	r18, 0xFF	; 255
    35c2:	3f 4f       	sbci	r19, 0xFF	; 255
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	28 17       	cp	r18, r24
    35c8:	39 07       	cpc	r19, r25
    35ca:	34 f4       	brge	.+12     	; 0x35d8 <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    35cc:	82 e0       	ldi	r24, 0x02	; 2
    35ce:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    35d0:	80 93 7c 06 	sts	0x067C, r24
            _nrk_set_next_wakeup (timer);
    35d4:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    35d8:	0e 94 04 11 	call	0x2208	; 0x2208 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    35dc:	0e 94 14 1a 	call	0x3428	; 0x3428 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	df 91       	pop	r29
    35e4:	cf 91       	pop	r28
    35e6:	08 95       	ret

000035e8 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    35e8:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    35ea:	0e 94 02 11 	call	0x2204	; 0x2204 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    35ee:	e0 91 db 07 	lds	r30, 0x07DB
    35f2:	f0 91 dc 07 	lds	r31, 0x07DC
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    35fa:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    35fc:	0e 94 52 24 	call	0x48a4	; 0x48a4 <_nrk_os_timer_get>
    3600:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3602:	88 3f       	cpi	r24, 0xF8	; 248
    3604:	80 f4       	brcc	.+32     	; 0x3626 <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3606:	0e 94 ed 23 	call	0x47da	; 0x47da <_nrk_get_next_wakeup>
    360a:	2c 2f       	mov	r18, r28
    360c:	30 e0       	ldi	r19, 0x00	; 0
    360e:	2f 5f       	subi	r18, 0xFF	; 255
    3610:	3f 4f       	sbci	r19, 0xFF	; 255
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	28 17       	cp	r18, r24
    3616:	39 07       	cpc	r19, r25
    3618:	34 f4       	brge	.+12     	; 0x3626 <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    361a:	82 e0       	ldi	r24, 0x02	; 2
    361c:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    361e:	80 93 7c 06 	sts	0x067C, r24
            _nrk_set_next_wakeup (timer);
    3622:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3626:	0e 94 04 11 	call	0x2208	; 0x2208 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    362a:	0e 94 14 1a 	call	0x3428	; 0x3428 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	cf 91       	pop	r28
    3632:	08 95       	ret

00003634 <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    3634:	1f 93       	push	r17
    3636:	cf 93       	push	r28
    3638:	df 93       	push	r29
    363a:	cd b7       	in	r28, 0x3d	; 61
    363c:	de b7       	in	r29, 0x3e	; 62
    363e:	28 97       	sbiw	r28, 0x08	; 8
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	de bf       	out	0x3e, r29	; 62
    3646:	0f be       	out	0x3f, r0	; 63
    3648:	cd bf       	out	0x3d, r28	; 61
    364a:	29 83       	std	Y+1, r18	; 0x01
    364c:	3a 83       	std	Y+2, r19	; 0x02
    364e:	4b 83       	std	Y+3, r20	; 0x03
    3650:	5c 83       	std	Y+4, r21	; 0x04
    3652:	6d 83       	std	Y+5, r22	; 0x05
    3654:	7e 83       	std	Y+6, r23	; 0x06
    3656:	8f 83       	std	Y+7, r24	; 0x07
    3658:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    365a:	0e 94 f6 14 	call	0x29ec	; 0x29ec <nrk_stack_check>

    nrk_int_disable ();
    365e:	0e 94 02 11 	call	0x2204	; 0x2204 <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3662:	e0 91 db 07 	lds	r30, 0x07DB
    3666:	f0 91 dc 07 	lds	r31, 0x07DC
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	92 a7       	std	Z+42, r25	; 0x2a
    3674:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    3676:	0e 94 52 24 	call	0x48a4	; 0x48a4 <_nrk_os_timer_get>
    367a:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    367c:	ce 01       	movw	r24, r28
    367e:	01 96       	adiw	r24, 0x01	; 1
    3680:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    3684:	e0 91 db 07 	lds	r30, 0x07DB
    3688:	f0 91 dc 07 	lds	r31, 0x07DC
    368c:	dc 01       	movw	r26, r24
    368e:	cb 01       	movw	r24, r22
    3690:	81 0f       	add	r24, r17
    3692:	91 1d       	adc	r25, r1
    3694:	a1 1d       	adc	r26, r1
    3696:	b1 1d       	adc	r27, r1
    3698:	85 8b       	std	Z+21, r24	; 0x15
    369a:	96 8b       	std	Z+22, r25	; 0x16
    369c:	a7 8b       	std	Z+23, r26	; 0x17
    369e:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    36a0:	18 3f       	cpi	r17, 0xF8	; 248
    36a2:	80 f4       	brcc	.+32     	; 0x36c4 <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    36a4:	0e 94 ed 23 	call	0x47da	; 0x47da <_nrk_get_next_wakeup>
    36a8:	21 2f       	mov	r18, r17
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	2f 5f       	subi	r18, 0xFF	; 255
    36ae:	3f 4f       	sbci	r19, 0xFF	; 255
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	28 17       	cp	r18, r24
    36b4:	39 07       	cpc	r19, r25
    36b6:	34 f4       	brge	.+12     	; 0x36c4 <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    36b8:	82 e0       	ldi	r24, 0x02	; 2
    36ba:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    36bc:	80 93 7c 06 	sts	0x067C, r24
            _nrk_set_next_wakeup (timer);
    36c0:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    36c4:	0e 94 04 11 	call	0x2208	; 0x2208 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    36c8:	0e 94 14 1a 	call	0x3428	; 0x3428 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	28 96       	adiw	r28, 0x08	; 8
    36d0:	0f b6       	in	r0, 0x3f	; 63
    36d2:	f8 94       	cli
    36d4:	de bf       	out	0x3e, r29	; 62
    36d6:	0f be       	out	0x3f, r0	; 63
    36d8:	cd bf       	out	0x3d, r28	; 61
    36da:	df 91       	pop	r29
    36dc:	cf 91       	pop	r28
    36de:	1f 91       	pop	r17
    36e0:	08 95       	ret

000036e2 <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    36e2:	8f 92       	push	r8
    36e4:	9f 92       	push	r9
    36e6:	af 92       	push	r10
    36e8:	bf 92       	push	r11
    36ea:	cf 92       	push	r12
    36ec:	df 92       	push	r13
    36ee:	ef 92       	push	r14
    36f0:	ff 92       	push	r15
    36f2:	0f 93       	push	r16
    36f4:	1f 93       	push	r17
    36f6:	cf 93       	push	r28
    36f8:	df 93       	push	r29
    36fa:	cd b7       	in	r28, 0x3d	; 61
    36fc:	de b7       	in	r29, 0x3e	; 62
    36fe:	60 97       	sbiw	r28, 0x10	; 16
    3700:	0f b6       	in	r0, 0x3f	; 63
    3702:	f8 94       	cli
    3704:	de bf       	out	0x3e, r29	; 62
    3706:	0f be       	out	0x3f, r0	; 63
    3708:	cd bf       	out	0x3d, r28	; 61
    370a:	29 87       	std	Y+9, r18	; 0x09
    370c:	3a 87       	std	Y+10, r19	; 0x0a
    370e:	4b 87       	std	Y+11, r20	; 0x0b
    3710:	5c 87       	std	Y+12, r21	; 0x0c
    3712:	6d 87       	std	Y+13, r22	; 0x0d
    3714:	7e 87       	std	Y+14, r23	; 0x0e
    3716:	8f 87       	std	Y+15, r24	; 0x0f
    3718:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    371a:	ce 01       	movw	r24, r28
    371c:	01 96       	adiw	r24, 0x01	; 1
    371e:	0e 94 bb 1c 	call	0x3976	; 0x3976 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    3722:	89 80       	ldd	r8, Y+1	; 0x01
    3724:	9a 80       	ldd	r9, Y+2	; 0x02
    3726:	ab 80       	ldd	r10, Y+3	; 0x03
    3728:	bc 80       	ldd	r11, Y+4	; 0x04
    372a:	cd 80       	ldd	r12, Y+5	; 0x05
    372c:	de 80       	ldd	r13, Y+6	; 0x06
    372e:	ef 80       	ldd	r14, Y+7	; 0x07
    3730:	f8 84       	ldd	r15, Y+8	; 0x08
    3732:	09 85       	ldd	r16, Y+9	; 0x09
    3734:	1a 85       	ldd	r17, Y+10	; 0x0a
    3736:	2b 85       	ldd	r18, Y+11	; 0x0b
    3738:	3c 85       	ldd	r19, Y+12	; 0x0c
    373a:	4d 85       	ldd	r20, Y+13	; 0x0d
    373c:	5e 85       	ldd	r21, Y+14	; 0x0e
    373e:	6f 85       	ldd	r22, Y+15	; 0x0f
    3740:	78 89       	ldd	r23, Y+16	; 0x10
    3742:	ce 01       	movw	r24, r28
    3744:	09 96       	adiw	r24, 0x09	; 9
    3746:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    374a:	8f 3f       	cpi	r24, 0xFF	; 255
    374c:	61 f0       	breq	.+24     	; 0x3766 <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    374e:	29 85       	ldd	r18, Y+9	; 0x09
    3750:	3a 85       	ldd	r19, Y+10	; 0x0a
    3752:	4b 85       	ldd	r20, Y+11	; 0x0b
    3754:	5c 85       	ldd	r21, Y+12	; 0x0c
    3756:	6d 85       	ldd	r22, Y+13	; 0x0d
    3758:	7e 85       	ldd	r23, Y+14	; 0x0e
    375a:	8f 85       	ldd	r24, Y+15	; 0x0f
    375c:	98 89       	ldd	r25, Y+16	; 0x10
    375e:	0e 94 1a 1b 	call	0x3634	; 0x3634 <nrk_wait>

    return NRK_OK;
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	01 c0       	rjmp	.+2      	; 0x3768 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    3766:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    3768:	60 96       	adiw	r28, 0x10	; 16
    376a:	0f b6       	in	r0, 0x3f	; 63
    376c:	f8 94       	cli
    376e:	de bf       	out	0x3e, r29	; 62
    3770:	0f be       	out	0x3f, r0	; 63
    3772:	cd bf       	out	0x3d, r28	; 61
    3774:	df 91       	pop	r29
    3776:	cf 91       	pop	r28
    3778:	1f 91       	pop	r17
    377a:	0f 91       	pop	r16
    377c:	ff 90       	pop	r15
    377e:	ef 90       	pop	r14
    3780:	df 90       	pop	r13
    3782:	cf 90       	pop	r12
    3784:	bf 90       	pop	r11
    3786:	af 90       	pop	r10
    3788:	9f 90       	pop	r9
    378a:	8f 90       	pop	r8
    378c:	08 95       	ret

0000378e <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    378e:	e0 91 db 07 	lds	r30, 0x07DB
    3792:	f0 91 dc 07 	lds	r31, 0x07DC
}
    3796:	80 85       	ldd	r24, Z+8	; 0x08
    3798:	08 95       	ret

0000379a <nrk_full_time_get>:
*******************************************************************************/
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

uint64_t nrk_full_time_get() {
    379a:	2f 92       	push	r2
    379c:	3f 92       	push	r3
    379e:	4f 92       	push	r4
    37a0:	5f 92       	push	r5
    37a2:	6f 92       	push	r6
    37a4:	7f 92       	push	r7
    37a6:	8f 92       	push	r8
    37a8:	9f 92       	push	r9
    37aa:	af 92       	push	r10
    37ac:	bf 92       	push	r11
    37ae:	cf 92       	push	r12
    37b0:	df 92       	push	r13
    37b2:	ef 92       	push	r14
    37b4:	ff 92       	push	r15
    37b6:	0f 93       	push	r16
    37b8:	1f 93       	push	r17
    37ba:	cf 93       	push	r28
    37bc:	df 93       	push	r29
    37be:	cd b7       	in	r28, 0x3d	; 61
    37c0:	de b7       	in	r29, 0x3e	; 62
    37c2:	2f 97       	sbiw	r28, 0x0f	; 15
    37c4:	0f b6       	in	r0, 0x3f	; 63
    37c6:	f8 94       	cli
    37c8:	de bf       	out	0x3e, r29	; 62
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	cd bf       	out	0x3d, r28	; 61
    uint64_t prec_ticks = (uint64_t)TCNT5/*_nrk_precision_os_timer_get()*/;
    37ce:	e0 91 24 01 	lds	r30, 0x0124
    37d2:	f0 91 25 01 	lds	r31, 0x0125
    37d6:	fa 87       	std	Y+10, r31	; 0x0a
    37d8:	e9 87       	std	Y+9, r30	; 0x09
    uint64_t ticks = (uint64_t)TCNT2/*_nrk_os_timer_get()*/;
    37da:	e0 91 b2 00 	lds	r30, 0x00B2
    nrk_time_t sys_time = nrk_system_time;
    uint64_t time = 1000000000L * sys_time.secs + sys_time.nano_secs;
    time += prec_ticks * (uint64_t)NANOS_PER_PRECISION_TICK - (prec_ticks >> 1)/* actually 62.5 not 63 */;
    return time + ticks * (uint64_t)NANOS_PER_TICK; 
    37de:	2e 2f       	mov	r18, r30
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	40 e0       	ldi	r20, 0x00	; 0
    37e4:	50 e0       	ldi	r21, 0x00	; 0
    37e6:	60 e0       	ldi	r22, 0x00	; 0
    37e8:	70 e0       	ldi	r23, 0x00	; 0
    37ea:	80 e0       	ldi	r24, 0x00	; 0
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	06 e0       	ldi	r16, 0x06	; 6
    37f0:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__ashldi3>
    37f4:	ae 2e       	mov	r10, r30
    37f6:	b1 2c       	mov	r11, r1
    37f8:	c1 2c       	mov	r12, r1
    37fa:	d1 2c       	mov	r13, r1
    37fc:	e1 2c       	mov	r14, r1
    37fe:	f1 2c       	mov	r15, r1
    3800:	00 e0       	ldi	r16, 0x00	; 0
    3802:	10 e0       	ldi	r17, 0x00	; 0
    3804:	0e 94 9d 2a 	call	0x553a	; 0x553a <__subdi3>
    3808:	01 e0       	ldi	r16, 0x01	; 1
    380a:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__ashldi3>
    380e:	00 e0       	ldi	r16, 0x00	; 0
    3810:	0e 94 9d 2a 	call	0x553a	; 0x553a <__subdi3>
    3814:	59 01       	movw	r10, r18
    3816:	6a 01       	movw	r12, r20
    3818:	7b 01       	movw	r14, r22
    381a:	f8 2f       	mov	r31, r24
    381c:	19 2f       	mov	r17, r25
    381e:	05 e0       	ldi	r16, 0x05	; 5
    3820:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__ashldi3>
    3824:	0f 2f       	mov	r16, r31
    3826:	0e 94 9d 2a 	call	0x553a	; 0x553a <__subdi3>
    382a:	02 e0       	ldi	r16, 0x02	; 2
    382c:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__ashldi3>
    3830:	ae 2e       	mov	r10, r30
    3832:	b1 2c       	mov	r11, r1
    3834:	c1 2c       	mov	r12, r1
    3836:	d1 2c       	mov	r13, r1
    3838:	e1 2c       	mov	r14, r1
    383a:	f1 2c       	mov	r15, r1
    383c:	00 e0       	ldi	r16, 0x00	; 0
    383e:	10 e0       	ldi	r17, 0x00	; 0
    3840:	0e 94 88 2a 	call	0x5510	; 0x5510 <__adddi3>
    3844:	59 01       	movw	r10, r18
    3846:	6a 01       	movw	r12, r20
    3848:	7b 01       	movw	r14, r22
    384a:	e8 2f       	mov	r30, r24
    384c:	19 2f       	mov	r17, r25
    384e:	06 e0       	ldi	r16, 0x06	; 6
    3850:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__ashldi3>
    3854:	0e 2f       	mov	r16, r30
    3856:	0e 94 9d 2a 	call	0x553a	; 0x553a <__subdi3>
    385a:	f9 01       	movw	r30, r18
    385c:	4f 87       	std	Y+15, r20	; 0x0f
    385e:	5c 87       	std	Y+12, r21	; 0x0c
    3860:	b6 2f       	mov	r27, r22
    3862:	a7 2f       	mov	r26, r23
    3864:	8d 87       	std	Y+13, r24	; 0x0d
    3866:	9e 87       	std	Y+14, r25	; 0x0e
uint64_t nrk_full_time_get() {
    uint64_t prec_ticks = (uint64_t)TCNT5/*_nrk_precision_os_timer_get()*/;
    uint64_t ticks = (uint64_t)TCNT2/*_nrk_os_timer_get()*/;
    nrk_time_t sys_time = nrk_system_time;
    uint64_t time = 1000000000L * sys_time.secs + sys_time.nano_secs;
    time += prec_ticks * (uint64_t)NANOS_PER_PRECISION_TICK - (prec_ticks >> 1)/* actually 62.5 not 63 */;
    3868:	29 85       	ldd	r18, Y+9	; 0x09
    386a:	3a 85       	ldd	r19, Y+10	; 0x0a
    386c:	19 01       	movw	r2, r18
    386e:	41 2c       	mov	r4, r1
    3870:	51 2c       	mov	r5, r1
    3872:	a2 01       	movw	r20, r4
    3874:	60 e0       	ldi	r22, 0x00	; 0
    3876:	70 e0       	ldi	r23, 0x00	; 0
    3878:	80 e0       	ldi	r24, 0x00	; 0
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	06 e0       	ldi	r16, 0x06	; 6
    387e:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <__ashldi3>
    3882:	51 01       	movw	r10, r2
    3884:	62 01       	movw	r12, r4
    3886:	e1 2c       	mov	r14, r1
    3888:	f1 2c       	mov	r15, r1
    388a:	00 e0       	ldi	r16, 0x00	; 0
    388c:	10 e0       	ldi	r17, 0x00	; 0
    388e:	0e 94 9d 2a 	call	0x553a	; 0x553a <__subdi3>
    3892:	59 01       	movw	r10, r18
    3894:	6a 01       	movw	r12, r20
    3896:	7b 01       	movw	r14, r22
    3898:	8c 01       	movw	r16, r24
    389a:	9f 01       	movw	r18, r30
    389c:	4f 85       	ldd	r20, Y+15	; 0x0f
    389e:	5c 85       	ldd	r21, Y+12	; 0x0c
    38a0:	6b 2f       	mov	r22, r27
    38a2:	7a 2f       	mov	r23, r26
    38a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    38a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    38a8:	0e 94 88 2a 	call	0x5510	; 0x5510 <__adddi3>
    38ac:	79 01       	movw	r14, r18
    38ae:	8a 01       	movw	r16, r20
    38b0:	4b 01       	movw	r8, r22
    38b2:	6c 01       	movw	r12, r24
#include <nrk_error.h>

uint64_t nrk_full_time_get() {
    uint64_t prec_ticks = (uint64_t)TCNT5/*_nrk_precision_os_timer_get()*/;
    uint64_t ticks = (uint64_t)TCNT2/*_nrk_os_timer_get()*/;
    nrk_time_t sys_time = nrk_system_time;
    38b4:	e2 ed       	ldi	r30, 0xD2	; 210
    38b6:	f7 e0       	ldi	r31, 0x07	; 7
    uint64_t time = 1000000000L * sys_time.secs + sys_time.nano_secs;
    38b8:	20 81       	ld	r18, Z
    38ba:	31 81       	ldd	r19, Z+1	; 0x01
    38bc:	42 81       	ldd	r20, Z+2	; 0x02
    38be:	53 81       	ldd	r21, Z+3	; 0x03
    38c0:	60 e0       	ldi	r22, 0x00	; 0
    38c2:	7a ec       	ldi	r23, 0xCA	; 202
    38c4:	8a e9       	ldi	r24, 0x9A	; 154
    38c6:	9b e3       	ldi	r25, 0x3B	; 59
    38c8:	0e 94 98 29 	call	0x5330	; 0x5330 <__mulsi3>
    38cc:	44 80       	ldd	r4, Z+4	; 0x04
    38ce:	55 80       	ldd	r5, Z+5	; 0x05
    38d0:	66 80       	ldd	r6, Z+6	; 0x06
    38d2:	77 80       	ldd	r7, Z+7	; 0x07
    38d4:	46 0e       	add	r4, r22
    38d6:	57 1e       	adc	r5, r23
    38d8:	68 1e       	adc	r6, r24
    38da:	79 1e       	adc	r7, r25
    38dc:	a3 01       	movw	r20, r6
    38de:	92 01       	movw	r18, r4
    38e0:	49 82       	std	Y+1, r4	; 0x01
    38e2:	3a 83       	std	Y+2, r19	; 0x02
    38e4:	4b 83       	std	Y+3, r20	; 0x03
    38e6:	5c 83       	std	Y+4, r21	; 0x04
    38e8:	97 01       	movw	r18, r14
    38ea:	a8 01       	movw	r20, r16
    38ec:	b4 01       	movw	r22, r8
    38ee:	c6 01       	movw	r24, r12
    38f0:	a9 80       	ldd	r10, Y+1	; 0x01
    38f2:	ba 80       	ldd	r11, Y+2	; 0x02
    38f4:	cb 80       	ldd	r12, Y+3	; 0x03
    38f6:	dc 80       	ldd	r13, Y+4	; 0x04
    38f8:	e1 2c       	mov	r14, r1
    38fa:	f1 2c       	mov	r15, r1
    38fc:	00 e0       	ldi	r16, 0x00	; 0
    38fe:	10 e0       	ldi	r17, 0x00	; 0
    3900:	0e 94 88 2a 	call	0x5510	; 0x5510 <__adddi3>
    3904:	29 01       	movw	r4, r18
    3906:	e4 2f       	mov	r30, r20
    3908:	75 2e       	mov	r7, r21
    390a:	b6 2f       	mov	r27, r22
    390c:	a7 2f       	mov	r26, r23
    390e:	68 2e       	mov	r6, r24
    3910:	39 2e       	mov	r3, r25
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

uint64_t nrk_full_time_get() {
    uint64_t prec_ticks = (uint64_t)TCNT5/*_nrk_precision_os_timer_get()*/;
    3912:	49 85       	ldd	r20, Y+9	; 0x09
    3914:	5a 85       	ldd	r21, Y+10	; 0x0a
    uint64_t ticks = (uint64_t)TCNT2/*_nrk_os_timer_get()*/;
    nrk_time_t sys_time = nrk_system_time;
    uint64_t time = 1000000000L * sys_time.secs + sys_time.nano_secs;
    time += prec_ticks * (uint64_t)NANOS_PER_PRECISION_TICK - (prec_ticks >> 1)/* actually 62.5 not 63 */;
    3916:	9a 01       	movw	r18, r20
    3918:	40 e0       	ldi	r20, 0x00	; 0
    391a:	50 e0       	ldi	r21, 0x00	; 0
    391c:	60 e0       	ldi	r22, 0x00	; 0
    391e:	70 e0       	ldi	r23, 0x00	; 0
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	01 e0       	ldi	r16, 0x01	; 1
    3926:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <__lshrdi3>
    392a:	59 01       	movw	r10, r18
    392c:	6a 01       	movw	r12, r20
    392e:	7b 01       	movw	r14, r22
    3930:	8c 01       	movw	r16, r24
    return time + ticks * (uint64_t)NANOS_PER_TICK; 
    3932:	92 01       	movw	r18, r4
    3934:	4e 2f       	mov	r20, r30
    3936:	57 2d       	mov	r21, r7
    3938:	6b 2f       	mov	r22, r27
    393a:	7a 2f       	mov	r23, r26
    393c:	86 2d       	mov	r24, r6
    393e:	93 2d       	mov	r25, r3
    3940:	0e 94 9d 2a 	call	0x553a	; 0x553a <__subdi3>
}
    3944:	2f 96       	adiw	r28, 0x0f	; 15
    3946:	0f b6       	in	r0, 0x3f	; 63
    3948:	f8 94       	cli
    394a:	de bf       	out	0x3e, r29	; 62
    394c:	0f be       	out	0x3f, r0	; 63
    394e:	cd bf       	out	0x3d, r28	; 61
    3950:	df 91       	pop	r29
    3952:	cf 91       	pop	r28
    3954:	1f 91       	pop	r17
    3956:	0f 91       	pop	r16
    3958:	ff 90       	pop	r15
    395a:	ef 90       	pop	r14
    395c:	df 90       	pop	r13
    395e:	cf 90       	pop	r12
    3960:	bf 90       	pop	r11
    3962:	af 90       	pop	r10
    3964:	9f 90       	pop	r9
    3966:	8f 90       	pop	r8
    3968:	7f 90       	pop	r7
    396a:	6f 90       	pop	r6
    396c:	5f 90       	pop	r5
    396e:	4f 90       	pop	r4
    3970:	3f 90       	pop	r3
    3972:	2f 90       	pop	r2
    3974:	08 95       	ret

00003976 <nrk_time_get>:

void nrk_time_get(nrk_time_t *t)
{
    3976:	0f 93       	push	r16
    3978:	1f 93       	push	r17
    397a:	cf 93       	push	r28
    397c:	df 93       	push	r29
    397e:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    3980:	1c 82       	std	Y+4, r1	; 0x04
    3982:	1d 82       	std	Y+5, r1	; 0x05
    3984:	1e 82       	std	Y+6, r1	; 0x06
    3986:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    3988:	80 91 d2 07 	lds	r24, 0x07D2
    398c:	90 91 d3 07 	lds	r25, 0x07D3
    3990:	a0 91 d4 07 	lds	r26, 0x07D4
    3994:	b0 91 d5 07 	lds	r27, 0x07D5
    3998:	88 83       	st	Y, r24
    399a:	99 83       	std	Y+1, r25	; 0x01
    399c:	aa 83       	std	Y+2, r26	; 0x02
    399e:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    39a0:	80 91 d6 07 	lds	r24, 0x07D6
    39a4:	90 91 d7 07 	lds	r25, 0x07D7
    39a8:	a0 91 d8 07 	lds	r26, 0x07D8
    39ac:	b0 91 d9 07 	lds	r27, 0x07D9
    39b0:	8c 83       	std	Y+4, r24	; 0x04
    39b2:	9d 83       	std	Y+5, r25	; 0x05
    39b4:	ae 83       	std	Y+6, r26	; 0x06
    39b6:	bf 83       	std	Y+7, r27	; 0x07
 
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    39b8:	0e 94 52 24 	call	0x48a4	; 0x48a4 <_nrk_os_timer_get>
    39bc:	a8 2f       	mov	r26, r24
    39be:	b0 e0       	ldi	r27, 0x00	; 0
    39c0:	23 eb       	ldi	r18, 0xB3	; 179
    39c2:	36 ee       	ldi	r19, 0xE6	; 230
    39c4:	4e e0       	ldi	r20, 0x0E	; 14
    39c6:	50 e0       	ldi	r21, 0x00	; 0
    39c8:	0e 94 8d 29 	call	0x531a	; 0x531a <__muluhisi3>
    39cc:	0c 81       	ldd	r16, Y+4	; 0x04
    39ce:	1d 81       	ldd	r17, Y+5	; 0x05
    39d0:	2e 81       	ldd	r18, Y+6	; 0x06
    39d2:	3f 81       	ldd	r19, Y+7	; 0x07
    39d4:	dc 01       	movw	r26, r24
    39d6:	cb 01       	movw	r24, r22
    39d8:	80 0f       	add	r24, r16
    39da:	91 1f       	adc	r25, r17
    39dc:	a2 1f       	adc	r26, r18
    39de:	b3 1f       	adc	r27, r19
    39e0:	8c 83       	std	Y+4, r24	; 0x04
    39e2:	9d 83       	std	Y+5, r25	; 0x05
    39e4:	ae 83       	std	Y+6, r26	; 0x06
    39e6:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    39e8:	8c 81       	ldd	r24, Y+4	; 0x04
    39ea:	9d 81       	ldd	r25, Y+5	; 0x05
    39ec:	ae 81       	ldd	r26, Y+6	; 0x06
    39ee:	bf 81       	ldd	r27, Y+7	; 0x07
    39f0:	81 15       	cp	r24, r1
    39f2:	2a ec       	ldi	r18, 0xCA	; 202
    39f4:	92 07       	cpc	r25, r18
    39f6:	2a e9       	ldi	r18, 0x9A	; 154
    39f8:	a2 07       	cpc	r26, r18
    39fa:	2b e3       	ldi	r18, 0x3B	; 59
    39fc:	b2 07       	cpc	r27, r18
    39fe:	98 f0       	brcs	.+38     	; 0x3a26 <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    3a00:	9a 5c       	subi	r25, 0xCA	; 202
    3a02:	aa 49       	sbci	r26, 0x9A	; 154
    3a04:	bb 43       	sbci	r27, 0x3B	; 59
    3a06:	8c 83       	std	Y+4, r24	; 0x04
    3a08:	9d 83       	std	Y+5, r25	; 0x05
    3a0a:	ae 83       	std	Y+6, r26	; 0x06
    3a0c:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    3a0e:	88 81       	ld	r24, Y
    3a10:	99 81       	ldd	r25, Y+1	; 0x01
    3a12:	aa 81       	ldd	r26, Y+2	; 0x02
    3a14:	bb 81       	ldd	r27, Y+3	; 0x03
    3a16:	01 96       	adiw	r24, 0x01	; 1
    3a18:	a1 1d       	adc	r26, r1
    3a1a:	b1 1d       	adc	r27, r1
    3a1c:	88 83       	st	Y, r24
    3a1e:	99 83       	std	Y+1, r25	; 0x01
    3a20:	aa 83       	std	Y+2, r26	; 0x02
    3a22:	bb 83       	std	Y+3, r27	; 0x03
    3a24:	e1 cf       	rjmp	.-62     	; 0x39e8 <nrk_time_get+0x72>
    }

}
    3a26:	df 91       	pop	r29
    3a28:	cf 91       	pop	r28
    3a2a:	1f 91       	pop	r17
    3a2c:	0f 91       	pop	r16
    3a2e:	08 95       	ret

00003a30 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    3a30:	8f 92       	push	r8
    3a32:	9f 92       	push	r9
    3a34:	af 92       	push	r10
    3a36:	bf 92       	push	r11
    3a38:	cf 92       	push	r12
    3a3a:	df 92       	push	r13
    3a3c:	ef 92       	push	r14
    3a3e:	ff 92       	push	r15
    3a40:	0f 93       	push	r16
    3a42:	1f 93       	push	r17
    3a44:	cf 93       	push	r28
    3a46:	df 93       	push	r29
    3a48:	cd b7       	in	r28, 0x3d	; 61
    3a4a:	de b7       	in	r29, 0x3e	; 62
    3a4c:	60 97       	sbiw	r28, 0x10	; 16
    3a4e:	0f b6       	in	r0, 0x3f	; 63
    3a50:	f8 94       	cli
    3a52:	de bf       	out	0x3e, r29	; 62
    3a54:	0f be       	out	0x3f, r0	; 63
    3a56:	cd bf       	out	0x3d, r28	; 61
    3a58:	fc 01       	movw	r30, r24
    3a5a:	09 83       	std	Y+1, r16	; 0x01
    3a5c:	1a 83       	std	Y+2, r17	; 0x02
    3a5e:	2b 83       	std	Y+3, r18	; 0x03
    3a60:	3c 83       	std	Y+4, r19	; 0x04
    3a62:	4d 83       	std	Y+5, r20	; 0x05
    3a64:	5e 83       	std	Y+6, r21	; 0x06
    3a66:	6f 83       	std	Y+7, r22	; 0x07
    3a68:	78 87       	std	Y+8, r23	; 0x08
    3a6a:	89 86       	std	Y+9, r8	; 0x09
    3a6c:	9a 86       	std	Y+10, r9	; 0x0a
    3a6e:	ab 86       	std	Y+11, r10	; 0x0b
    3a70:	bc 86       	std	Y+12, r11	; 0x0c
    3a72:	cd 86       	std	Y+13, r12	; 0x0d
    3a74:	de 86       	std	Y+14, r13	; 0x0e
    3a76:	ef 86       	std	Y+15, r14	; 0x0f
    3a78:	f8 8a       	std	Y+16, r15	; 0x10
    3a7a:	09 81       	ldd	r16, Y+1	; 0x01
    3a7c:	1a 81       	ldd	r17, Y+2	; 0x02
    3a7e:	2b 81       	ldd	r18, Y+3	; 0x03
    3a80:	3c 81       	ldd	r19, Y+4	; 0x04
    3a82:	4d 81       	ldd	r20, Y+5	; 0x05
    3a84:	5e 81       	ldd	r21, Y+6	; 0x06
    3a86:	6f 81       	ldd	r22, Y+7	; 0x07
    3a88:	78 85       	ldd	r23, Y+8	; 0x08
    3a8a:	c9 84       	ldd	r12, Y+9	; 0x09
    3a8c:	da 84       	ldd	r13, Y+10	; 0x0a
    3a8e:	eb 84       	ldd	r14, Y+11	; 0x0b
    3a90:	fc 84       	ldd	r15, Y+12	; 0x0c
    3a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a96:	af 85       	ldd	r26, Y+15	; 0x0f
    3a98:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    3a9a:	0c 15       	cp	r16, r12
    3a9c:	1d 05       	cpc	r17, r13
    3a9e:	2e 05       	cpc	r18, r14
    3aa0:	3f 05       	cpc	r19, r15
    3aa2:	f0 f1       	brcs	.+124    	; 0x3b20 <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    3aa4:	c0 16       	cp	r12, r16
    3aa6:	d1 06       	cpc	r13, r17
    3aa8:	e2 06       	cpc	r14, r18
    3aaa:	f3 06       	cpc	r15, r19
    3aac:	91 f4       	brne	.+36     	; 0x3ad2 <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    3aae:	48 17       	cp	r20, r24
    3ab0:	59 07       	cpc	r21, r25
    3ab2:	6a 07       	cpc	r22, r26
    3ab4:	7b 07       	cpc	r23, r27
    3ab6:	a0 f1       	brcs	.+104    	; 0x3b20 <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    3ab8:	48 1b       	sub	r20, r24
    3aba:	59 0b       	sbc	r21, r25
    3abc:	6a 0b       	sbc	r22, r26
    3abe:	7b 0b       	sbc	r23, r27
    3ac0:	44 83       	std	Z+4, r20	; 0x04
    3ac2:	55 83       	std	Z+5, r21	; 0x05
    3ac4:	66 83       	std	Z+6, r22	; 0x06
    3ac6:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    3ac8:	10 82       	st	Z, r1
    3aca:	11 82       	std	Z+1, r1	; 0x01
    3acc:	12 82       	std	Z+2, r1	; 0x02
    3ace:	13 82       	std	Z+3, r1	; 0x03
    3ad0:	25 c0       	rjmp	.+74     	; 0x3b1c <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    3ad2:	48 17       	cp	r20, r24
    3ad4:	59 07       	cpc	r21, r25
    3ad6:	6a 07       	cpc	r22, r26
    3ad8:	7b 07       	cpc	r23, r27
    3ada:	80 f4       	brcc	.+32     	; 0x3afc <nrk_time_sub+0xcc>
{
	high.secs--;
    3adc:	01 50       	subi	r16, 0x01	; 1
    3ade:	11 09       	sbc	r17, r1
    3ae0:	21 09       	sbc	r18, r1
    3ae2:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    3ae4:	0c 19       	sub	r16, r12
    3ae6:	1d 09       	sbc	r17, r13
    3ae8:	2e 09       	sbc	r18, r14
    3aea:	3f 09       	sbc	r19, r15
    3aec:	00 83       	st	Z, r16
    3aee:	11 83       	std	Z+1, r17	; 0x01
    3af0:	22 83       	std	Z+2, r18	; 0x02
    3af2:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    3af4:	56 53       	subi	r21, 0x36	; 54
    3af6:	65 46       	sbci	r22, 0x65	; 101
    3af8:	74 4c       	sbci	r23, 0xC4	; 196
    3afa:	08 c0       	rjmp	.+16     	; 0x3b0c <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    3afc:	0c 19       	sub	r16, r12
    3afe:	1d 09       	sbc	r17, r13
    3b00:	2e 09       	sbc	r18, r14
    3b02:	3f 09       	sbc	r19, r15
    3b04:	00 83       	st	Z, r16
    3b06:	11 83       	std	Z+1, r17	; 0x01
    3b08:	22 83       	std	Z+2, r18	; 0x02
    3b0a:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    3b0c:	48 1b       	sub	r20, r24
    3b0e:	59 0b       	sbc	r21, r25
    3b10:	6a 0b       	sbc	r22, r26
    3b12:	7b 0b       	sbc	r23, r27
    3b14:	44 83       	std	Z+4, r20	; 0x04
    3b16:	55 83       	std	Z+5, r21	; 0x05
    3b18:	66 83       	std	Z+6, r22	; 0x06
    3b1a:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    3b1c:	81 e0       	ldi	r24, 0x01	; 1
    3b1e:	01 c0       	rjmp	.+2      	; 0x3b22 <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    3b20:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    3b22:	60 96       	adiw	r28, 0x10	; 16
    3b24:	0f b6       	in	r0, 0x3f	; 63
    3b26:	f8 94       	cli
    3b28:	de bf       	out	0x3e, r29	; 62
    3b2a:	0f be       	out	0x3f, r0	; 63
    3b2c:	cd bf       	out	0x3d, r28	; 61
    3b2e:	df 91       	pop	r29
    3b30:	cf 91       	pop	r28
    3b32:	1f 91       	pop	r17
    3b34:	0f 91       	pop	r16
    3b36:	ff 90       	pop	r15
    3b38:	ef 90       	pop	r14
    3b3a:	df 90       	pop	r13
    3b3c:	cf 90       	pop	r12
    3b3e:	bf 90       	pop	r11
    3b40:	af 90       	pop	r10
    3b42:	9f 90       	pop	r9
    3b44:	8f 90       	pop	r8
    3b46:	08 95       	ret

00003b48 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    3b48:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    3b4a:	44 81       	ldd	r20, Z+4	; 0x04
    3b4c:	55 81       	ldd	r21, Z+5	; 0x05
    3b4e:	66 81       	ldd	r22, Z+6	; 0x06
    3b50:	77 81       	ldd	r23, Z+7	; 0x07
    3b52:	41 15       	cp	r20, r1
    3b54:	8a ec       	ldi	r24, 0xCA	; 202
    3b56:	58 07       	cpc	r21, r24
    3b58:	8a e9       	ldi	r24, 0x9A	; 154
    3b5a:	68 07       	cpc	r22, r24
    3b5c:	8b e3       	ldi	r24, 0x3B	; 59
    3b5e:	78 07       	cpc	r23, r24
    3b60:	98 f0       	brcs	.+38     	; 0x3b88 <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    3b62:	5a 5c       	subi	r21, 0xCA	; 202
    3b64:	6a 49       	sbci	r22, 0x9A	; 154
    3b66:	7b 43       	sbci	r23, 0x3B	; 59
    3b68:	44 83       	std	Z+4, r20	; 0x04
    3b6a:	55 83       	std	Z+5, r21	; 0x05
    3b6c:	66 83       	std	Z+6, r22	; 0x06
    3b6e:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    3b70:	80 81       	ld	r24, Z
    3b72:	91 81       	ldd	r25, Z+1	; 0x01
    3b74:	a2 81       	ldd	r26, Z+2	; 0x02
    3b76:	b3 81       	ldd	r27, Z+3	; 0x03
    3b78:	01 96       	adiw	r24, 0x01	; 1
    3b7a:	a1 1d       	adc	r26, r1
    3b7c:	b1 1d       	adc	r27, r1
    3b7e:	80 83       	st	Z, r24
    3b80:	91 83       	std	Z+1, r25	; 0x01
    3b82:	a2 83       	std	Z+2, r26	; 0x02
    3b84:	b3 83       	std	Z+3, r27	; 0x03
    3b86:	e1 cf       	rjmp	.-62     	; 0x3b4a <nrk_time_compact_nanos+0x2>
    }
}
    3b88:	08 95       	ret

00003b8a <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    3b8a:	8f 92       	push	r8
    3b8c:	9f 92       	push	r9
    3b8e:	af 92       	push	r10
    3b90:	bf 92       	push	r11
    3b92:	cf 92       	push	r12
    3b94:	df 92       	push	r13
    3b96:	ef 92       	push	r14
    3b98:	ff 92       	push	r15
    3b9a:	0f 93       	push	r16
    3b9c:	1f 93       	push	r17
    3b9e:	cf 93       	push	r28
    3ba0:	df 93       	push	r29
    3ba2:	cd b7       	in	r28, 0x3d	; 61
    3ba4:	de b7       	in	r29, 0x3e	; 62
    3ba6:	60 97       	sbiw	r28, 0x10	; 16
    3ba8:	0f b6       	in	r0, 0x3f	; 63
    3baa:	f8 94       	cli
    3bac:	de bf       	out	0x3e, r29	; 62
    3bae:	0f be       	out	0x3f, r0	; 63
    3bb0:	cd bf       	out	0x3d, r28	; 61
    3bb2:	09 83       	std	Y+1, r16	; 0x01
    3bb4:	1a 83       	std	Y+2, r17	; 0x02
    3bb6:	2b 83       	std	Y+3, r18	; 0x03
    3bb8:	3c 83       	std	Y+4, r19	; 0x04
    3bba:	4d 83       	std	Y+5, r20	; 0x05
    3bbc:	5e 83       	std	Y+6, r21	; 0x06
    3bbe:	6f 83       	std	Y+7, r22	; 0x07
    3bc0:	78 87       	std	Y+8, r23	; 0x08
    3bc2:	89 86       	std	Y+9, r8	; 0x09
    3bc4:	9a 86       	std	Y+10, r9	; 0x0a
    3bc6:	ab 86       	std	Y+11, r10	; 0x0b
    3bc8:	bc 86       	std	Y+12, r11	; 0x0c
    3bca:	cd 86       	std	Y+13, r12	; 0x0d
    3bcc:	de 86       	std	Y+14, r13	; 0x0e
    3bce:	ef 86       	std	Y+15, r14	; 0x0f
    3bd0:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    3bd2:	09 85       	ldd	r16, Y+9	; 0x09
    3bd4:	1a 85       	ldd	r17, Y+10	; 0x0a
    3bd6:	2b 85       	ldd	r18, Y+11	; 0x0b
    3bd8:	3c 85       	ldd	r19, Y+12	; 0x0c
    3bda:	49 81       	ldd	r20, Y+1	; 0x01
    3bdc:	5a 81       	ldd	r21, Y+2	; 0x02
    3bde:	6b 81       	ldd	r22, Y+3	; 0x03
    3be0:	7c 81       	ldd	r23, Y+4	; 0x04
    3be2:	40 0f       	add	r20, r16
    3be4:	51 1f       	adc	r21, r17
    3be6:	62 1f       	adc	r22, r18
    3be8:	73 1f       	adc	r23, r19
    3bea:	fc 01       	movw	r30, r24
    3bec:	40 83       	st	Z, r20
    3bee:	51 83       	std	Z+1, r21	; 0x01
    3bf0:	62 83       	std	Z+2, r22	; 0x02
    3bf2:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    3bf4:	0d 85       	ldd	r16, Y+13	; 0x0d
    3bf6:	1e 85       	ldd	r17, Y+14	; 0x0e
    3bf8:	2f 85       	ldd	r18, Y+15	; 0x0f
    3bfa:	38 89       	ldd	r19, Y+16	; 0x10
    3bfc:	4d 81       	ldd	r20, Y+5	; 0x05
    3bfe:	5e 81       	ldd	r21, Y+6	; 0x06
    3c00:	6f 81       	ldd	r22, Y+7	; 0x07
    3c02:	78 85       	ldd	r23, Y+8	; 0x08
    3c04:	40 0f       	add	r20, r16
    3c06:	51 1f       	adc	r21, r17
    3c08:	62 1f       	adc	r22, r18
    3c0a:	73 1f       	adc	r23, r19
    3c0c:	44 83       	std	Z+4, r20	; 0x04
    3c0e:	55 83       	std	Z+5, r21	; 0x05
    3c10:	66 83       	std	Z+6, r22	; 0x06
    3c12:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    3c14:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <nrk_time_compact_nanos>
return NRK_OK;
}
    3c18:	81 e0       	ldi	r24, 0x01	; 1
    3c1a:	60 96       	adiw	r28, 0x10	; 16
    3c1c:	0f b6       	in	r0, 0x3f	; 63
    3c1e:	f8 94       	cli
    3c20:	de bf       	out	0x3e, r29	; 62
    3c22:	0f be       	out	0x3f, r0	; 63
    3c24:	cd bf       	out	0x3d, r28	; 61
    3c26:	df 91       	pop	r29
    3c28:	cf 91       	pop	r28
    3c2a:	1f 91       	pop	r17
    3c2c:	0f 91       	pop	r16
    3c2e:	ff 90       	pop	r15
    3c30:	ef 90       	pop	r14
    3c32:	df 90       	pop	r13
    3c34:	cf 90       	pop	r12
    3c36:	bf 90       	pop	r11
    3c38:	af 90       	pop	r10
    3c3a:	9f 90       	pop	r9
    3c3c:	8f 90       	pop	r8
    3c3e:	08 95       	ret

00003c40 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    3c40:	e2 ed       	ldi	r30, 0xD2	; 210
    3c42:	f7 e0       	ldi	r31, 0x07	; 7
    3c44:	60 83       	st	Z, r22
    3c46:	71 83       	std	Z+1, r23	; 0x01
    3c48:	82 83       	std	Z+2, r24	; 0x02
    3c4a:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    3c4c:	24 83       	std	Z+4, r18	; 0x04
    3c4e:	35 83       	std	Z+5, r19	; 0x05
    3c50:	46 83       	std	Z+6, r20	; 0x06
    3c52:	57 83       	std	Z+7, r21	; 0x07
    3c54:	08 95       	ret

00003c56 <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    3c56:	2f 92       	push	r2
    3c58:	3f 92       	push	r3
    3c5a:	4f 92       	push	r4
    3c5c:	5f 92       	push	r5
    3c5e:	6f 92       	push	r6
    3c60:	7f 92       	push	r7
    3c62:	8f 92       	push	r8
    3c64:	9f 92       	push	r9
    3c66:	af 92       	push	r10
    3c68:	bf 92       	push	r11
    3c6a:	cf 92       	push	r12
    3c6c:	df 92       	push	r13
    3c6e:	ef 92       	push	r14
    3c70:	ff 92       	push	r15
    3c72:	0f 93       	push	r16
    3c74:	1f 93       	push	r17
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3c76:	fc 01       	movw	r30, r24
    3c78:	c0 80       	ld	r12, Z
    3c7a:	d1 80       	ldd	r13, Z+1	; 0x01
    3c7c:	e2 80       	ldd	r14, Z+2	; 0x02
    3c7e:	f3 80       	ldd	r15, Z+3	; 0x03
    3c80:	64 81       	ldd	r22, Z+4	; 0x04
    3c82:	75 81       	ldd	r23, Z+5	; 0x05
    3c84:	86 81       	ldd	r24, Z+6	; 0x06
    3c86:	97 81       	ldd	r25, Z+7	; 0x07
    3c88:	c1 14       	cp	r12, r1
    3c8a:	d1 04       	cpc	r13, r1
    3c8c:	e1 04       	cpc	r14, r1
    3c8e:	f1 04       	cpc	r15, r1
    3c90:	c1 f1       	breq	.+112    	; 0x3d02 <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3c92:	f2 e4       	ldi	r31, 0x42	; 66
    3c94:	cf 16       	cp	r12, r31
    3c96:	d1 04       	cpc	r13, r1
    3c98:	e1 04       	cpc	r14, r1
    3c9a:	f1 04       	cpc	r15, r1
    3c9c:	d0 f5       	brcc	.+116    	; 0x3d12 <_nrk_time_to_ticks+0xbc>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    3c9e:	1b 01       	movw	r2, r22
    3ca0:	2c 01       	movw	r4, r24
    3ca2:	61 2c       	mov	r6, r1
    3ca4:	71 2c       	mov	r7, r1
    3ca6:	43 01       	movw	r8, r6
    3ca8:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3caa:	8e 2f       	mov	r24, r30
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	a0 e0       	ldi	r26, 0x00	; 0
    3cb0:	b0 e0       	ldi	r27, 0x00	; 0
    3cb2:	8c 15       	cp	r24, r12
    3cb4:	9d 05       	cpc	r25, r13
    3cb6:	ae 05       	cpc	r26, r14
    3cb8:	bf 05       	cpc	r27, r15
    3cba:	88 f4       	brcc	.+34     	; 0x3cde <_nrk_time_to_ticks+0x88>
    3cbc:	91 01       	movw	r18, r2
    3cbe:	a2 01       	movw	r20, r4
    3cc0:	b3 01       	movw	r22, r6
    3cc2:	c4 01       	movw	r24, r8
    3cc4:	36 53       	subi	r19, 0x36	; 54
    3cc6:	45 46       	sbci	r20, 0x65	; 101
    3cc8:	54 4c       	sbci	r21, 0xC4	; 196
    3cca:	6f 4f       	sbci	r22, 0xFF	; 255
    3ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    3cce:	8f 4f       	sbci	r24, 0xFF	; 255
    3cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd2:	19 01       	movw	r2, r18
    3cd4:	2a 01       	movw	r4, r20
    3cd6:	3b 01       	movw	r6, r22
    3cd8:	4c 01       	movw	r8, r24
    3cda:	ef 5f       	subi	r30, 0xFF	; 255
    3cdc:	e6 cf       	rjmp	.-52     	; 0x3caa <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3cde:	83 eb       	ldi	r24, 0xB3	; 179
    3ce0:	a8 2e       	mov	r10, r24
    3ce2:	96 ee       	ldi	r25, 0xE6	; 230
    3ce4:	b9 2e       	mov	r11, r25
    3ce6:	2e e0       	ldi	r18, 0x0E	; 14
    3ce8:	c2 2e       	mov	r12, r18
    3cea:	d1 2c       	mov	r13, r1
    3cec:	e1 2c       	mov	r14, r1
    3cee:	f1 2c       	mov	r15, r1
    3cf0:	00 e0       	ldi	r16, 0x00	; 0
    3cf2:	10 e0       	ldi	r17, 0x00	; 0
    3cf4:	91 01       	movw	r18, r2
    3cf6:	a2 01       	movw	r20, r4
    3cf8:	b3 01       	movw	r22, r6
    3cfa:	c4 01       	movw	r24, r8
    3cfc:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <__udivdi3>
    3d00:	06 c0       	rjmp	.+12     	; 0x3d0e <_nrk_time_to_ticks+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    3d02:	23 eb       	ldi	r18, 0xB3	; 179
    3d04:	36 ee       	ldi	r19, 0xE6	; 230
    3d06:	4e e0       	ldi	r20, 0x0E	; 14
    3d08:	50 e0       	ldi	r21, 0x00	; 0
    3d0a:	0e 94 a8 29 	call	0x5350	; 0x5350 <__udivmodsi4>
    3d0e:	c9 01       	movw	r24, r18
    3d10:	02 c0       	rjmp	.+4      	; 0x3d16 <_nrk_time_to_ticks+0xc0>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3d12:	80 e0       	ldi	r24, 0x00	; 0
    3d14:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    3d16:	1f 91       	pop	r17
    3d18:	0f 91       	pop	r16
    3d1a:	ff 90       	pop	r15
    3d1c:	ef 90       	pop	r14
    3d1e:	df 90       	pop	r13
    3d20:	cf 90       	pop	r12
    3d22:	bf 90       	pop	r11
    3d24:	af 90       	pop	r10
    3d26:	9f 90       	pop	r9
    3d28:	8f 90       	pop	r8
    3d2a:	7f 90       	pop	r7
    3d2c:	6f 90       	pop	r6
    3d2e:	5f 90       	pop	r5
    3d30:	4f 90       	pop	r4
    3d32:	3f 90       	pop	r3
    3d34:	2f 90       	pop	r2
    3d36:	08 95       	ret

00003d38 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    3d38:	cf 92       	push	r12
    3d3a:	df 92       	push	r13
    3d3c:	ef 92       	push	r14
    3d3e:	ff 92       	push	r15
    3d40:	cf 93       	push	r28
    3d42:	df 93       	push	r29
    3d44:	cd b7       	in	r28, 0x3d	; 61
    3d46:	de b7       	in	r29, 0x3e	; 62
    3d48:	28 97       	sbiw	r28, 0x08	; 8
    3d4a:	0f b6       	in	r0, 0x3f	; 63
    3d4c:	f8 94       	cli
    3d4e:	de bf       	out	0x3e, r29	; 62
    3d50:	0f be       	out	0x3f, r0	; 63
    3d52:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    3d54:	6b 01       	movw	r12, r22
    3d56:	7c 01       	movw	r14, r24
    3d58:	2a e0       	ldi	r18, 0x0A	; 10
    3d5a:	f6 94       	lsr	r15
    3d5c:	e7 94       	ror	r14
    3d5e:	d7 94       	ror	r13
    3d60:	c7 94       	ror	r12
    3d62:	2a 95       	dec	r18
    3d64:	d1 f7       	brne	.-12     	; 0x3d5a <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    3d66:	c9 82       	std	Y+1, r12	; 0x01
    3d68:	da 82       	std	Y+2, r13	; 0x02
    3d6a:	eb 82       	std	Y+3, r14	; 0x03
    3d6c:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    3d6e:	9b 01       	movw	r18, r22
    3d70:	ac 01       	movw	r20, r24
    3d72:	33 70       	andi	r19, 0x03	; 3
    3d74:	44 27       	eor	r20, r20
    3d76:	55 27       	eor	r21, r21
    3d78:	63 eb       	ldi	r22, 0xB3	; 179
    3d7a:	76 ee       	ldi	r23, 0xE6	; 230
    3d7c:	8e e0       	ldi	r24, 0x0E	; 14
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	0e 94 98 29 	call	0x5330	; 0x5330 <__mulsi3>

return t;
    3d84:	2c 2d       	mov	r18, r12
    3d86:	3a 81       	ldd	r19, Y+2	; 0x02
    3d88:	4b 81       	ldd	r20, Y+3	; 0x03
    3d8a:	5c 81       	ldd	r21, Y+4	; 0x04
}
    3d8c:	28 96       	adiw	r28, 0x08	; 8
    3d8e:	0f b6       	in	r0, 0x3f	; 63
    3d90:	f8 94       	cli
    3d92:	de bf       	out	0x3e, r29	; 62
    3d94:	0f be       	out	0x3f, r0	; 63
    3d96:	cd bf       	out	0x3d, r28	; 61
    3d98:	df 91       	pop	r29
    3d9a:	cf 91       	pop	r28
    3d9c:	ff 90       	pop	r15
    3d9e:	ef 90       	pop	r14
    3da0:	df 90       	pop	r13
    3da2:	cf 90       	pop	r12
    3da4:	08 95       	ret

00003da6 <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    3da6:	2f 92       	push	r2
    3da8:	3f 92       	push	r3
    3daa:	4f 92       	push	r4
    3dac:	5f 92       	push	r5
    3dae:	6f 92       	push	r6
    3db0:	7f 92       	push	r7
    3db2:	8f 92       	push	r8
    3db4:	9f 92       	push	r9
    3db6:	af 92       	push	r10
    3db8:	bf 92       	push	r11
    3dba:	cf 92       	push	r12
    3dbc:	df 92       	push	r13
    3dbe:	ef 92       	push	r14
    3dc0:	ff 92       	push	r15
    3dc2:	0f 93       	push	r16
    3dc4:	1f 93       	push	r17
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3dc6:	fc 01       	movw	r30, r24
    3dc8:	c0 80       	ld	r12, Z
    3dca:	d1 80       	ldd	r13, Z+1	; 0x01
    3dcc:	e2 80       	ldd	r14, Z+2	; 0x02
    3dce:	f3 80       	ldd	r15, Z+3	; 0x03
    3dd0:	64 81       	ldd	r22, Z+4	; 0x04
    3dd2:	75 81       	ldd	r23, Z+5	; 0x05
    3dd4:	86 81       	ldd	r24, Z+6	; 0x06
    3dd6:	97 81       	ldd	r25, Z+7	; 0x07
    3dd8:	c1 14       	cp	r12, r1
    3dda:	d1 04       	cpc	r13, r1
    3ddc:	e1 04       	cpc	r14, r1
    3dde:	f1 04       	cpc	r15, r1
    3de0:	99 f1       	breq	.+102    	; 0x3e48 <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    3de2:	1b 01       	movw	r2, r22
    3de4:	2c 01       	movw	r4, r24
    3de6:	61 2c       	mov	r6, r1
    3de8:	71 2c       	mov	r7, r1
    3dea:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3dec:	e0 e0       	ldi	r30, 0x00	; 0
    3dee:	8e 2f       	mov	r24, r30
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	a0 e0       	ldi	r26, 0x00	; 0
    3df4:	b0 e0       	ldi	r27, 0x00	; 0
    3df6:	8c 15       	cp	r24, r12
    3df8:	9d 05       	cpc	r25, r13
    3dfa:	ae 05       	cpc	r26, r14
    3dfc:	bf 05       	cpc	r27, r15
    3dfe:	88 f4       	brcc	.+34     	; 0x3e22 <_nrk_time_to_ticks_long+0x7c>
    3e00:	91 01       	movw	r18, r2
    3e02:	a2 01       	movw	r20, r4
    3e04:	b3 01       	movw	r22, r6
    3e06:	c4 01       	movw	r24, r8
    3e08:	36 53       	subi	r19, 0x36	; 54
    3e0a:	45 46       	sbci	r20, 0x65	; 101
    3e0c:	54 4c       	sbci	r21, 0xC4	; 196
    3e0e:	6f 4f       	sbci	r22, 0xFF	; 255
    3e10:	7f 4f       	sbci	r23, 0xFF	; 255
    3e12:	8f 4f       	sbci	r24, 0xFF	; 255
    3e14:	9f 4f       	sbci	r25, 0xFF	; 255
    3e16:	19 01       	movw	r2, r18
    3e18:	2a 01       	movw	r4, r20
    3e1a:	3b 01       	movw	r6, r22
    3e1c:	4c 01       	movw	r8, r24
    3e1e:	ef 5f       	subi	r30, 0xFF	; 255
    3e20:	e6 cf       	rjmp	.-52     	; 0x3dee <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3e22:	83 eb       	ldi	r24, 0xB3	; 179
    3e24:	a8 2e       	mov	r10, r24
    3e26:	96 ee       	ldi	r25, 0xE6	; 230
    3e28:	b9 2e       	mov	r11, r25
    3e2a:	2e e0       	ldi	r18, 0x0E	; 14
    3e2c:	c2 2e       	mov	r12, r18
    3e2e:	d1 2c       	mov	r13, r1
    3e30:	e1 2c       	mov	r14, r1
    3e32:	f1 2c       	mov	r15, r1
    3e34:	00 e0       	ldi	r16, 0x00	; 0
    3e36:	10 e0       	ldi	r17, 0x00	; 0
    3e38:	91 01       	movw	r18, r2
    3e3a:	a2 01       	movw	r20, r4
    3e3c:	b3 01       	movw	r22, r6
    3e3e:	c4 01       	movw	r24, r8
    3e40:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <__udivdi3>
    3e44:	ca 01       	movw	r24, r20
    3e46:	07 c0       	rjmp	.+14     	; 0x3e56 <_nrk_time_to_ticks_long+0xb0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    3e48:	23 eb       	ldi	r18, 0xB3	; 179
    3e4a:	36 ee       	ldi	r19, 0xE6	; 230
    3e4c:	4e e0       	ldi	r20, 0x0E	; 14
    3e4e:	50 e0       	ldi	r21, 0x00	; 0
    3e50:	0e 94 a8 29 	call	0x5350	; 0x5350 <__udivmodsi4>
    3e54:	ca 01       	movw	r24, r20
}
return ticks;
}
    3e56:	b9 01       	movw	r22, r18
    3e58:	1f 91       	pop	r17
    3e5a:	0f 91       	pop	r16
    3e5c:	ff 90       	pop	r15
    3e5e:	ef 90       	pop	r14
    3e60:	df 90       	pop	r13
    3e62:	cf 90       	pop	r12
    3e64:	bf 90       	pop	r11
    3e66:	af 90       	pop	r10
    3e68:	9f 90       	pop	r9
    3e6a:	8f 90       	pop	r8
    3e6c:	7f 90       	pop	r7
    3e6e:	6f 90       	pop	r6
    3e70:	5f 90       	pop	r5
    3e72:	4f 90       	pop	r4
    3e74:	3f 90       	pop	r3
    3e76:	2f 90       	pop	r2
    3e78:	08 95       	ret

00003e7a <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    3e7a:	c2 e0       	ldi	r28, 0x02	; 2
{
  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    3e7c:	d1 e0       	ldi	r29, 0x01	; 1
{
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{
  nrk_stack_check(); 
    3e7e:	0e 94 f6 14 	call	0x29ec	; 0x29ec <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    3e82:	0e 94 ed 23 	call	0x47da	; 0x47da <_nrk_get_next_wakeup>
    3e86:	84 30       	cpi	r24, 0x04	; 4
    3e88:	28 f4       	brcc	.+10     	; 0x3e94 <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    3e8a:	d0 93 cf 07 	sts	0x07CF, r29
	    nrk_idle();
    3e8e:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <nrk_idle>
    3e92:	08 c0       	rjmp	.+16     	; 0x3ea4 <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    3e94:	8a e0       	ldi	r24, 0x0A	; 10
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	0e 94 05 23 	call	0x460a	; 0x460a <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    3e9c:	c0 93 cf 07 	sts	0x07CF, r28
	    nrk_sleep();
    3ea0:	0e 94 ef 26 	call	0x4dde	; 0x4dde <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3ea4:	80 91 7e 06 	lds	r24, 0x067E
    3ea8:	85 35       	cpi	r24, 0x55	; 85
    3eaa:	19 f0       	breq	.+6      	; 0x3eb2 <nrk_idle_task+0x38>
    3eac:	88 e0       	ldi	r24, 0x08	; 8
    3eae:	0e 94 40 13 	call	0x2680	; 0x2680 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    3eb2:	80 91 7e 41 	lds	r24, 0x417E
    3eb6:	85 35       	cpi	r24, 0x55	; 85
    3eb8:	11 f3       	breq	.-60     	; 0x3e7e <nrk_idle_task+0x4>
    3eba:	88 e0       	ldi	r24, 0x08	; 8
    3ebc:	0e 94 40 13 	call	0x2680	; 0x2680 <nrk_error_add>
    3ec0:	de cf       	rjmp	.-68     	; 0x3e7e <nrk_idle_task+0x4>

00003ec2 <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    3ec2:	2f 92       	push	r2
    3ec4:	3f 92       	push	r3
    3ec6:	4f 92       	push	r4
    3ec8:	5f 92       	push	r5
    3eca:	6f 92       	push	r6
    3ecc:	7f 92       	push	r7
    3ece:	8f 92       	push	r8
    3ed0:	9f 92       	push	r9
    3ed2:	af 92       	push	r10
    3ed4:	bf 92       	push	r11
    3ed6:	cf 92       	push	r12
    3ed8:	df 92       	push	r13
    3eda:	ef 92       	push	r14
    3edc:	ff 92       	push	r15
    3ede:	0f 93       	push	r16
    3ee0:	1f 93       	push	r17
    3ee2:	cf 93       	push	r28
    3ee4:	df 93       	push	r29
    3ee6:	00 d0       	rcall	.+0      	; 0x3ee8 <_nrk_scheduler+0x26>
    3ee8:	00 d0       	rcall	.+0      	; 0x3eea <_nrk_scheduler+0x28>
    3eea:	cd b7       	in	r28, 0x3d	; 61
    3eec:	de b7       	in	r29, 0x3e	; 62

    //nrk_int_enable();   // this should be removed...  Not needed


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_precision_os_timer_reset();
    3eee:	0e 94 21 23 	call	0x4642	; 0x4642 <_nrk_precision_os_timer_reset>
    _nrk_high_speed_timer_reset();
    3ef2:	0e 94 3f 23 	call	0x467e	; 0x467e <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    3ef6:	0e 94 47 23 	call	0x468e	; 0x468e <_nrk_high_speed_timer_get>
    3efa:	1c 01       	movw	r2, r24
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    3efc:	8a ef       	ldi	r24, 0xFA	; 250
    3efe:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    3f02:	a0 91 7c 06 	lds	r26, 0x067C
    3f06:	b0 e0       	ldi	r27, 0x00	; 0
    3f08:	23 eb       	ldi	r18, 0xB3	; 179
    3f0a:	36 ee       	ldi	r19, 0xE6	; 230
    3f0c:	4e e0       	ldi	r20, 0x0E	; 14
    3f0e:	50 e0       	ldi	r21, 0x00	; 0
    3f10:	0e 94 8d 29 	call	0x531a	; 0x531a <__muluhisi3>
    3f14:	00 91 d6 07 	lds	r16, 0x07D6
    3f18:	10 91 d7 07 	lds	r17, 0x07D7
    3f1c:	20 91 d8 07 	lds	r18, 0x07D8
    3f20:	30 91 d9 07 	lds	r19, 0x07D9
    3f24:	6b 01       	movw	r12, r22
    3f26:	7c 01       	movw	r14, r24
    3f28:	c0 0e       	add	r12, r16
    3f2a:	d1 1e       	adc	r13, r17
    3f2c:	e2 1e       	adc	r14, r18
    3f2e:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3f30:	c7 01       	movw	r24, r14
    3f32:	b6 01       	movw	r22, r12
    3f34:	23 eb       	ldi	r18, 0xB3	; 179
    3f36:	36 ee       	ldi	r19, 0xE6	; 230
    3f38:	4e e0       	ldi	r20, 0x0E	; 14
    3f3a:	50 e0       	ldi	r21, 0x00	; 0
    3f3c:	0e 94 a8 29 	call	0x5350	; 0x5350 <__udivmodsi4>
    3f40:	26 01       	movw	r4, r12
    3f42:	37 01       	movw	r6, r14
    3f44:	46 1a       	sub	r4, r22
    3f46:	57 0a       	sbc	r5, r23
    3f48:	68 0a       	sbc	r6, r24
    3f4a:	79 0a       	sbc	r7, r25
    3f4c:	d3 01       	movw	r26, r6
    3f4e:	c2 01       	movw	r24, r4
    3f50:	00 91 d2 07 	lds	r16, 0x07D2
    3f54:	10 91 d3 07 	lds	r17, 0x07D3
    3f58:	20 91 d4 07 	lds	r18, 0x07D4
    3f5c:	30 91 d5 07 	lds	r19, 0x07D5

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3f60:	43 eb       	ldi	r20, 0xB3	; 179
    3f62:	84 2e       	mov	r8, r20
    3f64:	46 ee       	ldi	r20, 0xE6	; 230
    3f66:	94 2e       	mov	r9, r20
    3f68:	4e e0       	ldi	r20, 0x0E	; 14
    3f6a:	a4 2e       	mov	r10, r20
    3f6c:	b1 2c       	mov	r11, r1
    3f6e:	68 01       	movw	r12, r16
    3f70:	79 01       	movw	r14, r18
    3f72:	4f ef       	ldi	r20, 0xFF	; 255
    3f74:	c4 1a       	sub	r12, r20
    3f76:	d4 0a       	sbc	r13, r20
    3f78:	e4 0a       	sbc	r14, r20
    3f7a:	f4 0a       	sbc	r15, r20
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    3f7c:	81 15       	cp	r24, r1
    3f7e:	5a ec       	ldi	r21, 0xCA	; 202
    3f80:	95 07       	cpc	r25, r21
    3f82:	5a e9       	ldi	r21, 0x9A	; 154
    3f84:	a5 07       	cpc	r26, r21
    3f86:	5b e3       	ldi	r21, 0x3B	; 59
    3f88:	b5 07       	cpc	r27, r21
    3f8a:	c8 f0       	brcs	.+50     	; 0x3fbe <_nrk_scheduler+0xfc>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    3f8c:	2c 01       	movw	r4, r24
    3f8e:	3d 01       	movw	r6, r26
    3f90:	2a ec       	ldi	r18, 0xCA	; 202
    3f92:	52 1a       	sub	r5, r18
    3f94:	2a e9       	ldi	r18, 0x9A	; 154
    3f96:	62 0a       	sbc	r6, r18
    3f98:	2b e3       	ldi	r18, 0x3B	; 59
    3f9a:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    3f9c:	c3 01       	movw	r24, r6
    3f9e:	b2 01       	movw	r22, r4
    3fa0:	a5 01       	movw	r20, r10
    3fa2:	94 01       	movw	r18, r8
    3fa4:	0e 94 a8 29 	call	0x5350	; 0x5350 <__udivmodsi4>
    3fa8:	a3 01       	movw	r20, r6
    3faa:	92 01       	movw	r18, r4
    3fac:	26 1b       	sub	r18, r22
    3fae:	37 0b       	sbc	r19, r23
    3fb0:	48 0b       	sbc	r20, r24
    3fb2:	59 0b       	sbc	r21, r25
    3fb4:	da 01       	movw	r26, r20
    3fb6:	c9 01       	movw	r24, r18
    3fb8:	97 01       	movw	r18, r14
    3fba:	86 01       	movw	r16, r12
    3fbc:	d8 cf       	rjmp	.-80     	; 0x3f6e <_nrk_scheduler+0xac>
    3fbe:	80 93 d6 07 	sts	0x07D6, r24
    3fc2:	90 93 d7 07 	sts	0x07D7, r25
    3fc6:	a0 93 d8 07 	sts	0x07D8, r26
    3fca:	b0 93 d9 07 	sts	0x07D9, r27
    3fce:	00 93 d2 07 	sts	0x07D2, r16
    3fd2:	10 93 d3 07 	sts	0x07D3, r17
    3fd6:	20 93 d4 07 	sts	0x07D4, r18
    3fda:	30 93 d5 07 	sts	0x07D5, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    3fde:	e0 91 db 07 	lds	r30, 0x07DB
    3fe2:	f0 91 dc 07 	lds	r31, 0x07DC
    3fe6:	85 81       	ldd	r24, Z+5	; 0x05
    3fe8:	88 23       	and	r24, r24
    3fea:	39 f1       	breq	.+78     	; 0x403a <_nrk_scheduler+0x178>
    3fec:	81 85       	ldd	r24, Z+9	; 0x09
    3fee:	84 30       	cpi	r24, 0x04	; 4
    3ff0:	21 f1       	breq	.+72     	; 0x403a <_nrk_scheduler+0x178>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    3ff2:	87 81       	ldd	r24, Z+7	; 0x07
    3ff4:	82 30       	cpi	r24, 0x02	; 2
    3ff6:	29 f0       	breq	.+10     	; 0x4002 <_nrk_scheduler+0x140>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    3ff8:	88 23       	and	r24, r24
    3ffa:	41 f0       	breq	.+16     	; 0x400c <_nrk_scheduler+0x14a>
    3ffc:	86 81       	ldd	r24, Z+6	; 0x06
    3ffe:	81 11       	cpse	r24, r1
    4000:	02 c0       	rjmp	.+4      	; 0x4006 <_nrk_scheduler+0x144>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    4002:	85 e0       	ldi	r24, 0x05	; 5
    4004:	01 c0       	rjmp	.+2      	; 0x4008 <_nrk_scheduler+0x146>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4006:	83 e0       	ldi	r24, 0x03	; 3
    4008:	81 87       	std	Z+9, r24	; 0x09
    400a:	14 c0       	rjmp	.+40     	; 0x4034 <_nrk_scheduler+0x172>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    400c:	83 e0       	ldi	r24, 0x03	; 3
    400e:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    4010:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    4012:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    4014:	85 89       	ldd	r24, Z+21	; 0x15
    4016:	96 89       	ldd	r25, Z+22	; 0x16
    4018:	a7 89       	ldd	r26, Z+23	; 0x17
    401a:	b0 8d       	ldd	r27, Z+24	; 0x18
    401c:	89 2b       	or	r24, r25
    401e:	8a 2b       	or	r24, r26
    4020:	8b 2b       	or	r24, r27
    4022:	41 f4       	brne	.+16     	; 0x4034 <_nrk_scheduler+0x172>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    4024:	81 8d       	ldd	r24, Z+25	; 0x19
    4026:	92 8d       	ldd	r25, Z+26	; 0x1a
    4028:	a3 8d       	ldd	r26, Z+27	; 0x1b
    402a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    402c:	85 8b       	std	Z+21, r24	; 0x15
    402e:	96 8b       	std	Z+22, r25	; 0x16
    4030:	a7 8b       	std	Z+23, r26	; 0x17
    4032:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    4034:	80 85       	ldd	r24, Z+8	; 0x08
    4036:	0e 94 3c 19 	call	0x3278	; 0x3278 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    403a:	e0 91 db 07 	lds	r30, 0x07DB
    403e:	f0 91 dc 07 	lds	r31, 0x07DC
    4042:	85 a1       	ldd	r24, Z+37	; 0x25
    4044:	96 a1       	ldd	r25, Z+38	; 0x26
    4046:	a7 a1       	ldd	r26, Z+39	; 0x27
    4048:	b0 a5       	ldd	r27, Z+40	; 0x28
    404a:	89 2b       	or	r24, r25
    404c:	8a 2b       	or	r24, r26
    404e:	8b 2b       	or	r24, r27
    4050:	09 f4       	brne	.+2      	; 0x4054 <_nrk_scheduler+0x192>
    4052:	44 c0       	rjmp	.+136    	; 0x40dc <_nrk_scheduler+0x21a>
    4054:	20 85       	ldd	r18, Z+8	; 0x08
    4056:	22 23       	and	r18, r18
    4058:	09 f4       	brne	.+2      	; 0x405c <_nrk_scheduler+0x19a>
    405a:	40 c0       	rjmp	.+128    	; 0x40dc <_nrk_scheduler+0x21a>
    405c:	81 85       	ldd	r24, Z+9	; 0x09
    405e:	84 30       	cpi	r24, 0x04	; 4
    4060:	e9 f1       	breq	.+122    	; 0x40dc <_nrk_scheduler+0x21a>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    4062:	85 8d       	ldd	r24, Z+29	; 0x1d
    4064:	96 8d       	ldd	r25, Z+30	; 0x1e
    4066:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4068:	b0 a1       	ldd	r27, Z+32	; 0x20
    406a:	40 91 7c 06 	lds	r20, 0x067C
    406e:	50 e0       	ldi	r21, 0x00	; 0
    4070:	60 e0       	ldi	r22, 0x00	; 0
    4072:	70 e0       	ldi	r23, 0x00	; 0
    4074:	84 17       	cp	r24, r20
    4076:	95 07       	cpc	r25, r21
    4078:	a6 07       	cpc	r26, r22
    407a:	b7 07       	cpc	r27, r23
    407c:	68 f4       	brcc	.+26     	; 0x4098 <_nrk_scheduler+0x1d6>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    407e:	62 2f       	mov	r22, r18
    4080:	82 e0       	ldi	r24, 0x02	; 2
    4082:	0e 94 4e 13 	call	0x269c	; 0x269c <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    4086:	e0 91 db 07 	lds	r30, 0x07DB
    408a:	f0 91 dc 07 	lds	r31, 0x07DC
    408e:	15 8e       	std	Z+29, r1	; 0x1d
    4090:	16 8e       	std	Z+30, r1	; 0x1e
    4092:	17 8e       	std	Z+31, r1	; 0x1f
    4094:	10 a2       	std	Z+32, r1	; 0x20
    4096:	08 c0       	rjmp	.+16     	; 0x40a8 <_nrk_scheduler+0x1e6>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    4098:	84 1b       	sub	r24, r20
    409a:	95 0b       	sbc	r25, r21
    409c:	a6 0b       	sbc	r26, r22
    409e:	b7 0b       	sbc	r27, r23
    40a0:	85 8f       	std	Z+29, r24	; 0x1d
    40a2:	96 8f       	std	Z+30, r25	; 0x1e
    40a4:	a7 8f       	std	Z+31, r26	; 0x1f
    40a6:	b0 a3       	std	Z+32, r27	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    40a8:	e0 91 db 07 	lds	r30, 0x07DB
    40ac:	f0 91 dc 07 	lds	r31, 0x07DC
    40b0:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    40b2:	85 8d       	ldd	r24, Z+29	; 0x1d
    40b4:	96 8d       	ldd	r25, Z+30	; 0x1e
    40b6:	a7 8d       	ldd	r26, Z+31	; 0x1f
    40b8:	b0 a1       	ldd	r27, Z+32	; 0x20
    40ba:	89 2b       	or	r24, r25
    40bc:	8a 2b       	or	r24, r26
    40be:	8b 2b       	or	r24, r27
    40c0:	69 f4       	brne	.+26     	; 0x40dc <_nrk_scheduler+0x21a>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    40c2:	61 2f       	mov	r22, r17
    40c4:	83 e0       	ldi	r24, 0x03	; 3
    40c6:	0e 94 4e 13 	call	0x269c	; 0x269c <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    40ca:	e0 91 db 07 	lds	r30, 0x07DB
    40ce:	f0 91 dc 07 	lds	r31, 0x07DC
    40d2:	83 e0       	ldi	r24, 0x03	; 3
    40d4:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    40d6:	81 2f       	mov	r24, r17
    40d8:	0e 94 3c 19 	call	0x3278	; 0x3278 <nrk_rem_from_readyQ>
    40dc:	85 e7       	ldi	r24, 0x75	; 117
    40de:	97 e0       	ldi	r25, 0x07	; 7
    40e0:	9c 83       	std	Y+4, r25	; 0x04
    40e2:	8b 83       	std	Y+3, r24	; 0x03
    40e4:	00 e6       	ldi	r16, 0x60	; 96
    40e6:	1a ee       	ldi	r17, 0xEA	; 234
    40e8:	19 82       	std	Y+1, r1	; 0x01
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    40ea:	9a ef       	ldi	r25, 0xFA	; 250
    40ec:	c9 2e       	mov	r12, r25
    40ee:	d1 2c       	mov	r13, r1
    40f0:	e1 2c       	mov	r14, r1
    40f2:	f1 2c       	mov	r15, r1
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    40f4:	81 2c       	mov	r8, r1
    40f6:	91 2c       	mov	r9, r1
    40f8:	54 01       	movw	r10, r8
    40fa:	83 94       	inc	r8
    40fc:	eb 81       	ldd	r30, Y+3	; 0x03
    40fe:	fc 81       	ldd	r31, Y+4	; 0x04
    4100:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    4102:	80 81       	ld	r24, Z
    4104:	8f 3f       	cpi	r24, 0xFF	; 255
    4106:	09 f4       	brne	.+2      	; 0x410a <_nrk_scheduler+0x248>
    4108:	00 c1       	rjmp	.+512    	; 0x430a <__stack+0x10b>
    410a:	eb 81       	ldd	r30, Y+3	; 0x03
    410c:	fc 81       	ldd	r31, Y+4	; 0x04
    410e:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    4110:	10 82       	st	Z, r1
    4112:	eb 81       	ldd	r30, Y+3	; 0x03
    4114:	fc 81       	ldd	r31, Y+4	; 0x04
    4116:	f0 81       	ld	r31, Z
    4118:	fa 83       	std	Y+2, r31	; 0x02
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    411a:	88 23       	and	r24, r24
    411c:	09 f4       	brne	.+2      	; 0x4120 <_nrk_scheduler+0x25e>
    411e:	68 c0       	rjmp	.+208    	; 0x41f0 <_nrk_scheduler+0x32e>
    4120:	f4 30       	cpi	r31, 0x04	; 4
    4122:	09 f4       	brne	.+2      	; 0x4126 <_nrk_scheduler+0x264>
    4124:	f2 c0       	rjmp	.+484    	; 0x430a <__stack+0x10b>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    4126:	eb 81       	ldd	r30, Y+3	; 0x03
    4128:	fc 81       	ldd	r31, Y+4	; 0x04
    412a:	44 84       	ldd	r4, Z+12	; 0x0c
    412c:	55 84       	ldd	r5, Z+13	; 0x0d
    412e:	66 84       	ldd	r6, Z+14	; 0x0e
    4130:	77 84       	ldd	r7, Z+15	; 0x0f
    4132:	60 91 7c 06 	lds	r22, 0x067C
    4136:	70 e0       	ldi	r23, 0x00	; 0
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	46 16       	cp	r4, r22
    413e:	57 06       	cpc	r5, r23
    4140:	68 06       	cpc	r6, r24
    4142:	79 06       	cpc	r7, r25
    4144:	48 f0       	brcs	.+18     	; 0x4158 <_nrk_scheduler+0x296>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    4146:	46 1a       	sub	r4, r22
    4148:	57 0a       	sbc	r5, r23
    414a:	68 0a       	sbc	r6, r24
    414c:	79 0a       	sbc	r7, r25
    414e:	44 86       	std	Z+12, r4	; 0x0c
    4150:	55 86       	std	Z+13, r5	; 0x0d
    4152:	66 86       	std	Z+14, r6	; 0x0e
    4154:	77 86       	std	Z+15, r7	; 0x0f
    4156:	06 c0       	rjmp	.+12     	; 0x4164 <_nrk_scheduler+0x2a2>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    4158:	eb 81       	ldd	r30, Y+3	; 0x03
    415a:	fc 81       	ldd	r31, Y+4	; 0x04
    415c:	14 86       	std	Z+12, r1	; 0x0c
    415e:	15 86       	std	Z+13, r1	; 0x0d
    4160:	16 86       	std	Z+14, r1	; 0x0e
    4162:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    4164:	eb 81       	ldd	r30, Y+3	; 0x03
    4166:	fc 81       	ldd	r31, Y+4	; 0x04
    4168:	40 88       	ldd	r4, Z+16	; 0x10
    416a:	51 88       	ldd	r5, Z+17	; 0x11
    416c:	62 88       	ldd	r6, Z+18	; 0x12
    416e:	73 88       	ldd	r7, Z+19	; 0x13
    4170:	46 16       	cp	r4, r22
    4172:	57 06       	cpc	r5, r23
    4174:	68 06       	cpc	r6, r24
    4176:	79 06       	cpc	r7, r25
    4178:	48 f0       	brcs	.+18     	; 0x418c <_nrk_scheduler+0x2ca>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    417a:	a3 01       	movw	r20, r6
    417c:	92 01       	movw	r18, r4
    417e:	26 1b       	sub	r18, r22
    4180:	37 0b       	sbc	r19, r23
    4182:	48 0b       	sbc	r20, r24
    4184:	59 0b       	sbc	r21, r25
    4186:	da 01       	movw	r26, r20
    4188:	c9 01       	movw	r24, r18
    418a:	13 c0       	rjmp	.+38     	; 0x41b2 <_nrk_scheduler+0x2f0>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    418c:	eb 81       	ldd	r30, Y+3	; 0x03
    418e:	fc 81       	ldd	r31, Y+4	; 0x04
    4190:	20 8d       	ldd	r18, Z+24	; 0x18
    4192:	31 8d       	ldd	r19, Z+25	; 0x19
    4194:	42 8d       	ldd	r20, Z+26	; 0x1a
    4196:	53 8d       	ldd	r21, Z+27	; 0x1b
    4198:	62 17       	cp	r22, r18
    419a:	73 07       	cpc	r23, r19
    419c:	84 07       	cpc	r24, r20
    419e:	95 07       	cpc	r25, r21
    41a0:	68 f4       	brcc	.+26     	; 0x41bc <_nrk_scheduler+0x2fa>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    41a2:	29 01       	movw	r4, r18
    41a4:	3a 01       	movw	r6, r20
    41a6:	46 1a       	sub	r4, r22
    41a8:	57 0a       	sbc	r5, r23
    41aa:	68 0a       	sbc	r6, r24
    41ac:	79 0a       	sbc	r7, r25
    41ae:	d3 01       	movw	r26, r6
    41b0:	c2 01       	movw	r24, r4
    41b2:	80 8b       	std	Z+16, r24	; 0x10
    41b4:	91 8b       	std	Z+17, r25	; 0x11
    41b6:	a2 8b       	std	Z+18, r26	; 0x12
    41b8:	b3 8b       	std	Z+19, r27	; 0x13
    41ba:	08 c0       	rjmp	.+16     	; 0x41cc <_nrk_scheduler+0x30a>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    41bc:	0e 94 a8 29 	call	0x5350	; 0x5350 <__udivmodsi4>
    41c0:	eb 81       	ldd	r30, Y+3	; 0x03
    41c2:	fc 81       	ldd	r31, Y+4	; 0x04
    41c4:	60 8b       	std	Z+16, r22	; 0x10
    41c6:	71 8b       	std	Z+17, r23	; 0x11
    41c8:	82 8b       	std	Z+18, r24	; 0x12
    41ca:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    41cc:	eb 81       	ldd	r30, Y+3	; 0x03
    41ce:	fc 81       	ldd	r31, Y+4	; 0x04
    41d0:	80 89       	ldd	r24, Z+16	; 0x10
    41d2:	91 89       	ldd	r25, Z+17	; 0x11
    41d4:	a2 89       	ldd	r26, Z+18	; 0x12
    41d6:	b3 89       	ldd	r27, Z+19	; 0x13
    41d8:	89 2b       	or	r24, r25
    41da:	8a 2b       	or	r24, r26
    41dc:	8b 2b       	or	r24, r27
    41de:	41 f4       	brne	.+16     	; 0x41f0 <_nrk_scheduler+0x32e>
    41e0:	80 8d       	ldd	r24, Z+24	; 0x18
    41e2:	91 8d       	ldd	r25, Z+25	; 0x19
    41e4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    41e6:	b3 8d       	ldd	r27, Z+27	; 0x1b
    41e8:	80 8b       	std	Z+16, r24	; 0x10
    41ea:	91 8b       	std	Z+17, r25	; 0x11
    41ec:	a2 8b       	std	Z+18, r26	; 0x12
    41ee:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    41f0:	fa 81       	ldd	r31, Y+2	; 0x02
    41f2:	f3 30       	cpi	r31, 0x03	; 3
    41f4:	09 f0       	breq	.+2      	; 0x41f8 <_nrk_scheduler+0x336>
    41f6:	89 c0       	rjmp	.+274    	; 0x430a <__stack+0x10b>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    41f8:	eb 81       	ldd	r30, Y+3	; 0x03
    41fa:	fc 81       	ldd	r31, Y+4	; 0x04
    41fc:	84 85       	ldd	r24, Z+12	; 0x0c
    41fe:	95 85       	ldd	r25, Z+13	; 0x0d
    4200:	a6 85       	ldd	r26, Z+14	; 0x0e
    4202:	b7 85       	ldd	r27, Z+15	; 0x0f
    4204:	89 2b       	or	r24, r25
    4206:	8a 2b       	or	r24, r26
    4208:	8b 2b       	or	r24, r27
    420a:	09 f0       	breq	.+2      	; 0x420e <__stack+0xf>
    420c:	6b c0       	rjmp	.+214    	; 0x42e4 <__stack+0xe5>
    420e:	df 01       	movw	r26, r30
    4210:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4212:	8c 91       	ld	r24, X
    4214:	9f 01       	movw	r18, r30
    4216:	23 50       	subi	r18, 0x03	; 3
    4218:	31 09       	sbc	r19, r1
    421a:	88 23       	and	r24, r24
    421c:	a9 f0       	breq	.+42     	; 0x4248 <__stack+0x49>
    421e:	f9 01       	movw	r30, r18
    4220:	80 81       	ld	r24, Z
    4222:	88 23       	and	r24, r24
    4224:	89 f0       	breq	.+34     	; 0x4248 <__stack+0x49>
    4226:	b5 01       	movw	r22, r10
    4228:	a4 01       	movw	r20, r8
    422a:	00 90 cb 07 	lds	r0, 0x07CB
    422e:	04 c0       	rjmp	.+8      	; 0x4238 <__stack+0x39>
    4230:	44 0f       	add	r20, r20
    4232:	55 1f       	adc	r21, r21
    4234:	66 1f       	adc	r22, r22
    4236:	77 1f       	adc	r23, r23
    4238:	0a 94       	dec	r0
    423a:	d2 f7       	brpl	.-12     	; 0x4230 <__stack+0x31>
    423c:	eb 81       	ldd	r30, Y+3	; 0x03
    423e:	fc 81       	ldd	r31, Y+4	; 0x04
    4240:	40 87       	std	Z+8, r20	; 0x08
    4242:	51 87       	std	Z+9, r21	; 0x09
    4244:	62 87       	std	Z+10, r22	; 0x0a
    4246:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    4248:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    424a:	f9 01       	movw	r30, r18
    424c:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    424e:	eb 81       	ldd	r30, Y+3	; 0x03
    4250:	fc 81       	ldd	r31, Y+4	; 0x04
    4252:	a0 a1       	ldd	r26, Z+32	; 0x20
    4254:	b1 a1       	ldd	r27, Z+33	; 0x21
    4256:	40 8c       	ldd	r4, Z+24	; 0x18
    4258:	51 8c       	ldd	r5, Z+25	; 0x19
    425a:	62 8c       	ldd	r6, Z+26	; 0x1a
    425c:	73 8c       	ldd	r7, Z+27	; 0x1b
    425e:	44 8d       	ldd	r20, Z+28	; 0x1c
    4260:	55 8d       	ldd	r21, Z+29	; 0x1d
    4262:	66 8d       	ldd	r22, Z+30	; 0x1e
    4264:	77 8d       	ldd	r23, Z+31	; 0x1f
    4266:	a1 30       	cpi	r26, 0x01	; 1
    4268:	b1 05       	cpc	r27, r1
    426a:	d1 f4       	brne	.+52     	; 0x42a0 <__stack+0xa1>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    426c:	44 8b       	std	Z+20, r20	; 0x14
    426e:	55 8b       	std	Z+21, r21	; 0x15
    4270:	66 8b       	std	Z+22, r22	; 0x16
    4272:	77 8b       	std	Z+23, r23	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    4274:	22 e0       	ldi	r18, 0x02	; 2
    4276:	20 83       	st	Z, r18
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    4278:	80 89       	ldd	r24, Z+16	; 0x10
    427a:	91 89       	ldd	r25, Z+17	; 0x11
    427c:	a2 89       	ldd	r26, Z+18	; 0x12
    427e:	b3 89       	ldd	r27, Z+19	; 0x13
    4280:	84 87       	std	Z+12, r24	; 0x0c
    4282:	95 87       	std	Z+13, r25	; 0x0d
    4284:	a6 87       	std	Z+14, r26	; 0x0e
    4286:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4288:	45 28       	or	r4, r5
    428a:	46 28       	or	r4, r6
    428c:	47 28       	or	r4, r7
    428e:	21 f4       	brne	.+8      	; 0x4298 <__stack+0x99>
    4290:	c4 86       	std	Z+12, r12	; 0x0c
    4292:	d5 86       	std	Z+13, r13	; 0x0d
    4294:	e6 86       	std	Z+14, r14	; 0x0e
    4296:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    4298:	89 81       	ldd	r24, Y+1	; 0x01
    429a:	0e 94 90 18 	call	0x3120	; 0x3120 <nrk_add_to_readyQ>
    429e:	22 c0       	rjmp	.+68     	; 0x42e4 <__stack+0xe5>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    42a0:	eb 81       	ldd	r30, Y+3	; 0x03
    42a2:	fc 81       	ldd	r31, Y+4	; 0x04
    42a4:	44 8b       	std	Z+20, r20	; 0x14
    42a6:	55 8b       	std	Z+21, r21	; 0x15
    42a8:	66 8b       	std	Z+22, r22	; 0x16
    42aa:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    42ac:	11 97       	sbiw	r26, 0x01	; 1
    42ae:	a3 01       	movw	r20, r6
    42b0:	92 01       	movw	r18, r4
    42b2:	0e 94 8d 29 	call	0x531a	; 0x531a <__muluhisi3>
    42b6:	64 87       	std	Z+12, r22	; 0x0c
    42b8:	75 87       	std	Z+13, r23	; 0x0d
    42ba:	86 87       	std	Z+14, r24	; 0x0e
    42bc:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    42be:	60 8b       	std	Z+16, r22	; 0x10
    42c0:	71 8b       	std	Z+17, r23	; 0x11
    42c2:	82 8b       	std	Z+18, r24	; 0x12
    42c4:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    42c6:	45 28       	or	r4, r5
    42c8:	46 28       	or	r4, r6
    42ca:	47 28       	or	r4, r7
    42cc:	21 f4       	brne	.+8      	; 0x42d6 <__stack+0xd7>
    42ce:	c4 86       	std	Z+12, r12	; 0x0c
    42d0:	d5 86       	std	Z+13, r13	; 0x0d
    42d2:	e6 86       	std	Z+14, r14	; 0x0e
    42d4:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    42d6:	44 24       	eor	r4, r4
    42d8:	43 94       	inc	r4
    42da:	51 2c       	mov	r5, r1
    42dc:	eb 81       	ldd	r30, Y+3	; 0x03
    42de:	fc 81       	ldd	r31, Y+4	; 0x04
    42e0:	51 a2       	std	Z+33, r5	; 0x21
    42e2:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    42e4:	eb 81       	ldd	r30, Y+3	; 0x03
    42e6:	fc 81       	ldd	r31, Y+4	; 0x04
    42e8:	84 85       	ldd	r24, Z+12	; 0x0c
    42ea:	95 85       	ldd	r25, Z+13	; 0x0d
    42ec:	a6 85       	ldd	r26, Z+14	; 0x0e
    42ee:	b7 85       	ldd	r27, Z+15	; 0x0f
    42f0:	00 97       	sbiw	r24, 0x00	; 0
    42f2:	a1 05       	cpc	r26, r1
    42f4:	b1 05       	cpc	r27, r1
    42f6:	49 f0       	breq	.+18     	; 0x430a <__stack+0x10b>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    42f8:	a8 01       	movw	r20, r16
    42fa:	60 e0       	ldi	r22, 0x00	; 0
    42fc:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    42fe:	84 17       	cp	r24, r20
    4300:	95 07       	cpc	r25, r21
    4302:	a6 07       	cpc	r26, r22
    4304:	b7 07       	cpc	r27, r23
    4306:	08 f4       	brcc	.+2      	; 0x430a <__stack+0x10b>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    4308:	8c 01       	movw	r16, r24
    430a:	2b 81       	ldd	r18, Y+3	; 0x03
    430c:	3c 81       	ldd	r19, Y+4	; 0x04
    430e:	25 5d       	subi	r18, 0xD5	; 213
    4310:	3f 4f       	sbci	r19, 0xFF	; 255
    4312:	3c 83       	std	Y+4, r19	; 0x04
    4314:	2b 83       	std	Y+3, r18	; 0x03

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    4316:	39 81       	ldd	r19, Y+1	; 0x01
    4318:	31 30       	cpi	r19, 0x01	; 1
    431a:	19 f0       	breq	.+6      	; 0x4322 <__stack+0x123>
    431c:	91 e0       	ldi	r25, 0x01	; 1
    431e:	99 83       	std	Y+1, r25	; 0x01
    4320:	ed ce       	rjmp	.-550    	; 0x40fc <_nrk_scheduler+0x23a>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    4322:	0e 94 7f 18 	call	0x30fe	; 0x30fe <nrk_get_high_ready_task_ID>
    4326:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    4328:	4b e2       	ldi	r20, 0x2B	; 43
    432a:	84 02       	muls	r24, r20
    432c:	f0 01       	movw	r30, r0
    432e:	11 24       	eor	r1, r1
    4330:	e4 59       	subi	r30, 0x94	; 148
    4332:	f8 4f       	sbci	r31, 0xF8	; 248
    4334:	22 85       	ldd	r18, Z+10	; 0x0a
    4336:	20 93 dd 07 	sts	0x07DD, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    433a:	f0 93 cd 07 	sts	0x07CD, r31
    433e:	e0 93 cc 07 	sts	0x07CC, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    4342:	88 23       	and	r24, r24
    4344:	f9 f0       	breq	.+62     	; 0x4384 <__stack+0x185>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    4346:	85 a1       	ldd	r24, Z+37	; 0x25
    4348:	96 a1       	ldd	r25, Z+38	; 0x26
    434a:	a7 a1       	ldd	r26, Z+39	; 0x27
    434c:	b0 a5       	ldd	r27, Z+40	; 0x28
    434e:	89 2b       	or	r24, r25
    4350:	8a 2b       	or	r24, r26
    4352:	8b 2b       	or	r24, r27
    4354:	99 f0       	breq	.+38     	; 0x437c <__stack+0x17d>
    4356:	85 8d       	ldd	r24, Z+29	; 0x1d
    4358:	96 8d       	ldd	r25, Z+30	; 0x1e
    435a:	a7 8d       	ldd	r26, Z+31	; 0x1f
    435c:	b0 a1       	ldd	r27, Z+32	; 0x20
    435e:	8a 3f       	cpi	r24, 0xFA	; 250
    4360:	91 05       	cpc	r25, r1
    4362:	a1 05       	cpc	r26, r1
    4364:	b1 05       	cpc	r27, r1
    4366:	50 f4       	brcc	.+20     	; 0x437c <__stack+0x17d>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    4368:	a8 01       	movw	r20, r16
    436a:	60 e0       	ldi	r22, 0x00	; 0
    436c:	70 e0       	ldi	r23, 0x00	; 0
    436e:	84 17       	cp	r24, r20
    4370:	95 07       	cpc	r25, r21
    4372:	a6 07       	cpc	r26, r22
    4374:	b7 07       	cpc	r27, r23
    4376:	e8 f4       	brcc	.+58     	; 0x43b2 <__stack+0x1b3>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    4378:	8c 01       	movw	r16, r24
    437a:	1b c0       	rjmp	.+54     	; 0x43b2 <__stack+0x1b3>
    437c:	0b 3f       	cpi	r16, 0xFB	; 251
    437e:	11 05       	cpc	r17, r1
    4380:	c0 f0       	brcs	.+48     	; 0x43b2 <__stack+0x1b3>
    4382:	12 c0       	rjmp	.+36     	; 0x43a8 <__stack+0x1a9>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    4384:	04 30       	cpi	r16, 0x04	; 4
    4386:	11 05       	cpc	r17, r1
    4388:	a0 f0       	brcs	.+40     	; 0x43b2 <__stack+0x1b3>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    438a:	c8 01       	movw	r24, r16
    438c:	03 97       	sbiw	r24, 0x03	; 3
    438e:	8a 3f       	cpi	r24, 0xFA	; 250
    4390:	91 05       	cpc	r25, r1
    4392:	38 f4       	brcc	.+14     	; 0x43a2 <__stack+0x1a3>
    4394:	8c 01       	movw	r16, r24
    4396:	82 30       	cpi	r24, 0x02	; 2
    4398:	91 05       	cpc	r25, r1
    439a:	58 f4       	brcc	.+22     	; 0x43b2 <__stack+0x1b3>
    439c:	02 e0       	ldi	r16, 0x02	; 2
    439e:	10 e0       	ldi	r17, 0x00	; 0
    43a0:	08 c0       	rjmp	.+16     	; 0x43b2 <__stack+0x1b3>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    43a2:	0d 3f       	cpi	r16, 0xFD	; 253
    43a4:	11 05       	cpc	r17, r1
    43a6:	19 f0       	breq	.+6      	; 0x43ae <__stack+0x1af>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    43a8:	0a ef       	ldi	r16, 0xFA	; 250
    43aa:	10 e0       	ldi	r17, 0x00	; 0
    43ac:	02 c0       	rjmp	.+4      	; 0x43b2 <__stack+0x1b3>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    43ae:	07 ef       	ldi	r16, 0xF7	; 247
    43b0:	10 e0       	ldi	r17, 0x00	; 0
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    43b2:	20 93 ce 07 	sts	0x07CE, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    43b6:	f0 93 dc 07 	sts	0x07DC, r31
    43ba:	e0 93 db 07 	sts	0x07DB, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    43be:	00 93 7c 06 	sts	0x067C, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    43c2:	0e 94 52 24 	call	0x48a4	; 0x48a4 <_nrk_os_timer_get>
    43c6:	28 2f       	mov	r18, r24
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	2f 5f       	subi	r18, 0xFF	; 255
    43cc:	3f 4f       	sbci	r19, 0xFF	; 255
    43ce:	20 17       	cp	r18, r16
    43d0:	31 07       	cpc	r19, r17
    43d2:	40 f0       	brcs	.+16     	; 0x43e4 <__stack+0x1e5>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    43d4:	0e 94 52 24 	call	0x48a4	; 0x48a4 <_nrk_os_timer_get>
    43d8:	08 2f       	mov	r16, r24
    43da:	10 e0       	ldi	r17, 0x00	; 0
    43dc:	0e 5f       	subi	r16, 0xFE	; 254
    43de:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    43e0:	00 93 7c 06 	sts	0x067C, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    43e4:	f1 10       	cpse	r15, r1
    43e6:	10 92 cf 07 	sts	0x07CF, r1

    _nrk_set_next_wakeup(next_wake);
    43ea:	80 2f       	mov	r24, r16
    43ec:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    43f0:	6c ed       	ldi	r22, 0xDC	; 220
    43f2:	75 e0       	ldi	r23, 0x05	; 5
    43f4:	c1 01       	movw	r24, r2
    43f6:	0e 94 59 23 	call	0x46b2	; 0x46b2 <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    43fa:	0e 94 75 27 	call	0x4eea	; 0x4eea <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    43fe:	0f 90       	pop	r0
    4400:	0f 90       	pop	r0
    4402:	0f 90       	pop	r0
    4404:	0f 90       	pop	r0
    4406:	df 91       	pop	r29
    4408:	cf 91       	pop	r28
    440a:	1f 91       	pop	r17
    440c:	0f 91       	pop	r16
    440e:	ff 90       	pop	r15
    4410:	ef 90       	pop	r14
    4412:	df 90       	pop	r13
    4414:	cf 90       	pop	r12
    4416:	bf 90       	pop	r11
    4418:	af 90       	pop	r10
    441a:	9f 90       	pop	r9
    441c:	8f 90       	pop	r8
    441e:	7f 90       	pop	r7
    4420:	6f 90       	pop	r6
    4422:	5f 90       	pop	r5
    4424:	4f 90       	pop	r4
    4426:	3f 90       	pop	r3
    4428:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    442a:	0c 94 80 27 	jmp	0x4f00	; 0x4f00 <nrk_start_high_ready_task>

0000442e <nrk_register_driver>:
 *
 *
 */

int8_t nrk_register_driver(void *devicemanager,uint8_t dev_index)
{
    442e:	9c 01       	movw	r18, r24
    if(_nrk_driver_count<NRK_MAX_DRIVER_CNT)
    4430:	90 91 ee 07 	lds	r25, 0x07EE
    4434:	19 16       	cp	r1, r25
    4436:	74 f0       	brlt	.+28     	; 0x4454 <nrk_register_driver+0x26>
    {
        nrk_drivers[_nrk_driver_count].dev_id=dev_index;
    4438:	84 e0       	ldi	r24, 0x04	; 4
    443a:	98 02       	muls	r25, r24
    443c:	f0 01       	movw	r30, r0
    443e:	11 24       	eor	r1, r1
    4440:	e1 51       	subi	r30, 0x11	; 17
    4442:	f8 4f       	sbci	r31, 0xF8	; 248
    4444:	60 83       	st	Z, r22
        nrk_drivers[_nrk_driver_count].devicemanager=(void*)devicemanager;
    4446:	33 83       	std	Z+3, r19	; 0x03
    4448:	22 83       	std	Z+2, r18	; 0x02
        _nrk_driver_count++;
    444a:	9f 5f       	subi	r25, 0xFF	; 255
    444c:	90 93 ee 07 	sts	0x07EE, r25
        return NRK_OK;
    4450:	81 e0       	ldi	r24, 0x01	; 1
    4452:	08 95       	ret
    }
    else
        return NRK_ERROR;
    4454:	8f ef       	ldi	r24, 0xFF	; 255
}
    4456:	08 95       	ret

00004458 <nrk_open>:


int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    4458:	0f 93       	push	r16
    445a:	1f 93       	push	r17
    445c:	cf 93       	push	r28
    445e:	df 93       	push	r29
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    4460:	40 91 ee 07 	lds	r20, 0x07EE
    4464:	55 27       	eor	r21, r21
    4466:	47 fd       	sbrc	r20, 7
    4468:	50 95       	com	r21
    446a:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    446c:	90 e0       	ldi	r25, 0x00	; 0

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    446e:	2c 2f       	mov	r18, r28
    4470:	30 e0       	ldi	r19, 0x00	; 0
    4472:	24 17       	cp	r18, r20
    4474:	35 07       	cpc	r19, r21
    4476:	8c f5       	brge	.+98     	; 0x44da <nrk_open+0x82>
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    4478:	89 01       	movw	r16, r18
    447a:	00 0f       	add	r16, r16
    447c:	11 1f       	adc	r17, r17
    447e:	00 0f       	add	r16, r16
    4480:	11 1f       	adc	r17, r17
    4482:	d8 01       	movw	r26, r16
    4484:	a1 51       	subi	r26, 0x11	; 17
    4486:	b8 4f       	sbci	r27, 0xF8	; 248
    4488:	ec 91       	ld	r30, X
    448a:	ff 27       	eor	r31, r31
    448c:	e7 fd       	sbrc	r30, 7
    448e:	f0 95       	com	r31
    4490:	e8 17       	cp	r30, r24
    4492:	f9 07       	cpc	r31, r25
    4494:	01 f5       	brne	.+64     	; 0x44d6 <nrk_open+0x7e>
    4496:	d6 2f       	mov	r29, r22
        {
            if(nrk_driver_init[cnt]==WAS_NOT_OPEN)
    4498:	f9 01       	movw	r30, r18
    449a:	ed 50       	subi	r30, 0x0D	; 13
    449c:	f8 4f       	sbci	r31, 0xF8	; 248
    449e:	80 81       	ld	r24, Z
    44a0:	81 11       	cpse	r24, r1
    44a2:	0b c0       	rjmp	.+22     	; 0x44ba <nrk_open+0x62>
            {
                // Only call init the first time driver is opened
                nrk_driver_init[cnt]=WAS_OPEN;
    44a4:	81 e0       	ldi	r24, 0x01	; 1
    44a6:	80 83       	st	Z, r24
                nrk_drivers[cnt].devicemanager(INIT,opt,NULL,0);
    44a8:	12 96       	adiw	r26, 0x02	; 2
    44aa:	ed 91       	ld	r30, X+
    44ac:	fc 91       	ld	r31, X
    44ae:	13 97       	sbiw	r26, 0x03	; 3
    44b0:	20 e0       	ldi	r18, 0x00	; 0
    44b2:	40 e0       	ldi	r20, 0x00	; 0
    44b4:	50 e0       	ldi	r21, 0x00	; 0
    44b6:	80 e0       	ldi	r24, 0x00	; 0
    44b8:	09 95       	icall
            }
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
    44ba:	f8 01       	movw	r30, r16
    44bc:	e1 51       	subi	r30, 0x11	; 17
    44be:	f8 4f       	sbci	r31, 0xF8	; 248
    44c0:	02 80       	ldd	r0, Z+2	; 0x02
    44c2:	f3 81       	ldd	r31, Z+3	; 0x03
    44c4:	e0 2d       	mov	r30, r0
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	40 e0       	ldi	r20, 0x00	; 0
    44ca:	50 e0       	ldi	r21, 0x00	; 0
    44cc:	6d 2f       	mov	r22, r29
    44ce:	81 e0       	ldi	r24, 0x01	; 1
    44d0:	09 95       	icall
            return cnt;
    44d2:	8c 2f       	mov	r24, r28
    44d4:	03 c0       	rjmp	.+6      	; 0x44dc <nrk_open+0x84>

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    44d6:	cf 5f       	subi	r28, 0xFF	; 255
    44d8:	ca cf       	rjmp	.-108    	; 0x446e <nrk_open+0x16>
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
            return cnt;
        }
    }

    return NRK_ERROR;
    44da:	8f ef       	ldi	r24, 0xFF	; 255
}
    44dc:	df 91       	pop	r29
    44de:	cf 91       	pop	r28
    44e0:	1f 91       	pop	r17
    44e2:	0f 91       	pop	r16
    44e4:	08 95       	ret

000044e6 <nrk_close>:

int8_t nrk_close(uint8_t dev_fd)
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	20 91 ee 07 	lds	r18, 0x07EE
    44ec:	33 27       	eor	r19, r19
    44ee:	27 fd       	sbrc	r18, 7
    44f0:	30 95       	com	r19
    44f2:	28 17       	cp	r18, r24
    44f4:	39 07       	cpc	r19, r25
    44f6:	84 f0       	brlt	.+32     	; 0x4518 <nrk_close+0x32>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    error=nrk_drivers[dev_fd].devicemanager(CLOSE,0,NULL,0);
    44f8:	88 0f       	add	r24, r24
    44fa:	99 1f       	adc	r25, r25
    44fc:	88 0f       	add	r24, r24
    44fe:	99 1f       	adc	r25, r25
    4500:	fc 01       	movw	r30, r24
    4502:	e1 51       	subi	r30, 0x11	; 17
    4504:	f8 4f       	sbci	r31, 0xF8	; 248
    4506:	02 80       	ldd	r0, Z+2	; 0x02
    4508:	f3 81       	ldd	r31, Z+3	; 0x03
    450a:	e0 2d       	mov	r30, r0
    450c:	20 e0       	ldi	r18, 0x00	; 0
    450e:	40 e0       	ldi	r20, 0x00	; 0
    4510:	50 e0       	ldi	r21, 0x00	; 0
    4512:	60 e0       	ldi	r22, 0x00	; 0
    4514:	82 e0       	ldi	r24, 0x02	; 2
    4516:	09 94       	ijmp
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    4518:	81 e0       	ldi	r24, 0x01	; 1
    451a:	0e 94 9b 12 	call	0x2536	; 0x2536 <_nrk_errno_set>
// Do we need to do init on a second reopen?
//if(!error)
//	driver_record_init[dev_fd]=0;

    return error;
}
    451e:	8f ef       	ldi	r24, 0xFF	; 255
    4520:	08 95       	ret

00004522 <nrk_write>:


int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    4522:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	e0 91 ee 07 	lds	r30, 0x07EE
    452a:	ff 27       	eor	r31, r31
    452c:	e7 fd       	sbrc	r30, 7
    452e:	f0 95       	com	r31
    4530:	e8 17       	cp	r30, r24
    4532:	f9 07       	cpc	r31, r25
    4534:	74 f0       	brlt	.+28     	; 0x4552 <nrk_write+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);
    4536:	88 0f       	add	r24, r24
    4538:	99 1f       	adc	r25, r25
    453a:	88 0f       	add	r24, r24
    453c:	99 1f       	adc	r25, r25
    453e:	fc 01       	movw	r30, r24
    4540:	e1 51       	subi	r30, 0x11	; 17
    4542:	f8 4f       	sbci	r31, 0xF8	; 248
    4544:	02 80       	ldd	r0, Z+2	; 0x02
    4546:	f3 81       	ldd	r31, Z+3	; 0x03
    4548:	e0 2d       	mov	r30, r0
    454a:	ab 01       	movw	r20, r22
    454c:	60 e0       	ldi	r22, 0x00	; 0
    454e:	86 e0       	ldi	r24, 0x06	; 6
    4550:	09 94       	ijmp

int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	0e 94 9b 12 	call	0x2536	; 0x2536 <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);

}
    4558:	8f ef       	ldi	r24, 0xFF	; 255
    455a:	08 95       	ret

0000455c <nrk_read>:

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    455c:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	e0 91 ee 07 	lds	r30, 0x07EE
    4564:	ff 27       	eor	r31, r31
    4566:	e7 fd       	sbrc	r30, 7
    4568:	f0 95       	com	r31
    456a:	e8 17       	cp	r30, r24
    456c:	f9 07       	cpc	r31, r25
    456e:	74 f0       	brlt	.+28     	; 0x458c <nrk_read+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);
    4570:	88 0f       	add	r24, r24
    4572:	99 1f       	adc	r25, r25
    4574:	88 0f       	add	r24, r24
    4576:	99 1f       	adc	r25, r25
    4578:	fc 01       	movw	r30, r24
    457a:	e1 51       	subi	r30, 0x11	; 17
    457c:	f8 4f       	sbci	r31, 0xF8	; 248
    457e:	02 80       	ldd	r0, Z+2	; 0x02
    4580:	f3 81       	ldd	r31, Z+3	; 0x03
    4582:	e0 2d       	mov	r30, r0
    4584:	ab 01       	movw	r20, r22
    4586:	60 e0       	ldi	r22, 0x00	; 0
    4588:	85 e0       	ldi	r24, 0x05	; 5
    458a:	09 94       	ijmp

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    458c:	81 e0       	ldi	r24, 0x01	; 1
    458e:	0e 94 9b 12 	call	0x2536	; 0x2536 <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);

}
    4592:	8f ef       	ldi	r24, 0xFF	; 255
    4594:	08 95       	ret

00004596 <nrk_set_status>:
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    4596:	24 2f       	mov	r18, r20
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	e0 91 ee 07 	lds	r30, 0x07EE
    459e:	ff 27       	eor	r31, r31
    45a0:	e7 fd       	sbrc	r30, 7
    45a2:	f0 95       	com	r31
    45a4:	e8 17       	cp	r30, r24
    45a6:	f9 07       	cpc	r31, r25
    45a8:	74 f0       	brlt	.+28     	; 0x45c6 <nrk_set_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
    45aa:	88 0f       	add	r24, r24
    45ac:	99 1f       	adc	r25, r25
    45ae:	88 0f       	add	r24, r24
    45b0:	99 1f       	adc	r25, r25
    45b2:	fc 01       	movw	r30, r24
    45b4:	e1 51       	subi	r30, 0x11	; 17
    45b6:	f8 4f       	sbci	r31, 0xF8	; 248
    45b8:	02 80       	ldd	r0, Z+2	; 0x02
    45ba:	f3 81       	ldd	r31, Z+3	; 0x03
    45bc:	e0 2d       	mov	r30, r0
    45be:	40 e0       	ldi	r20, 0x00	; 0
    45c0:	50 e0       	ldi	r21, 0x00	; 0
    45c2:	84 e0       	ldi	r24, 0x04	; 4
    45c4:	09 94       	ijmp
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    45c6:	81 e0       	ldi	r24, 0x01	; 1
    45c8:	0e 94 9b 12 	call	0x2536	; 0x2536 <_nrk_errno_set>
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
}
    45cc:	8f ef       	ldi	r24, 0xFF	; 255
    45ce:	08 95       	ret

000045d0 <nrk_get_status>:

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	20 91 ee 07 	lds	r18, 0x07EE
    45d6:	33 27       	eor	r19, r19
    45d8:	27 fd       	sbrc	r18, 7
    45da:	30 95       	com	r19
    45dc:	28 17       	cp	r18, r24
    45de:	39 07       	cpc	r19, r25
    45e0:	7c f0       	brlt	.+30     	; 0x4600 <nrk_get_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
    45e2:	88 0f       	add	r24, r24
    45e4:	99 1f       	adc	r25, r25
    45e6:	88 0f       	add	r24, r24
    45e8:	99 1f       	adc	r25, r25
    45ea:	fc 01       	movw	r30, r24
    45ec:	e1 51       	subi	r30, 0x11	; 17
    45ee:	f8 4f       	sbci	r31, 0xF8	; 248
    45f0:	02 80       	ldd	r0, Z+2	; 0x02
    45f2:	f3 81       	ldd	r31, Z+3	; 0x03
    45f4:	e0 2d       	mov	r30, r0
    45f6:	20 e0       	ldi	r18, 0x00	; 0
    45f8:	40 e0       	ldi	r20, 0x00	; 0
    45fa:	50 e0       	ldi	r21, 0x00	; 0
    45fc:	83 e0       	ldi	r24, 0x03	; 3
    45fe:	09 94       	ijmp

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    4600:	81 e0       	ldi	r24, 0x01	; 1
    4602:	0e 94 9b 12 	call	0x2536	; 0x2536 <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
}
    4606:	8f ef       	ldi	r24, 0xFF	; 255
    4608:	08 95       	ret

0000460a <nrk_spin_wait_us>:
	...
    4622:	01 97       	sbiw	r24, 0x01	; 1
    4624:	91 f7       	brne	.-28     	; 0x460a <nrk_spin_wait_us>
    4626:	08 95       	ret

00004628 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    4628:	10 92 21 01 	sts	0x0121, r1
    462c:	08 95       	ret

0000462e <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    462e:	89 e0       	ldi	r24, 0x09	; 9
    4630:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    4634:	8d e8       	ldi	r24, 0x8D	; 141
    4636:	9c e3       	ldi	r25, 0x3C	; 60
    4638:	90 93 29 01 	sts	0x0129, r25
    463c:	80 93 28 01 	sts	0x0128, r24
    4640:	08 95       	ret

00004642 <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    4642:	10 92 25 01 	sts	0x0125, r1
    4646:	10 92 24 01 	sts	0x0124, r1
    464a:	08 95       	ret

0000464c <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    464c:	cf 93       	push	r28
    464e:	df 93       	push	r29
    4650:	00 d0       	rcall	.+0      	; 0x4652 <_nrk_precision_os_timer_get+0x6>
    4652:	cd b7       	in	r28, 0x3d	; 61
    4654:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    4656:	80 91 24 01 	lds	r24, 0x0124
    465a:	90 91 25 01 	lds	r25, 0x0125
    465e:	9a 83       	std	Y+2, r25	; 0x02
    4660:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    4662:	89 81       	ldd	r24, Y+1	; 0x01
    4664:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4666:	0f 90       	pop	r0
    4668:	0f 90       	pop	r0
    466a:	df 91       	pop	r29
    466c:	cf 91       	pop	r28
    466e:	08 95       	ret

00004670 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    4670:	10 92 81 00 	sts	0x0081, r1
    4674:	08 95       	ret

00004676 <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    4676:	81 e0       	ldi	r24, 0x01	; 1
    4678:	80 93 81 00 	sts	0x0081, r24
    467c:	08 95       	ret

0000467e <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    467e:	83 b5       	in	r24, 0x23	; 35
    4680:	81 60       	ori	r24, 0x01	; 1
    4682:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    4684:	10 92 85 00 	sts	0x0085, r1
    4688:	10 92 84 00 	sts	0x0084, r1
    468c:	08 95       	ret

0000468e <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    468e:	cf 93       	push	r28
    4690:	df 93       	push	r29
    4692:	00 d0       	rcall	.+0      	; 0x4694 <_nrk_high_speed_timer_get+0x6>
    4694:	cd b7       	in	r28, 0x3d	; 61
    4696:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    4698:	80 91 84 00 	lds	r24, 0x0084
    469c:	90 91 85 00 	lds	r25, 0x0085
    46a0:	9a 83       	std	Y+2, r25	; 0x02
    46a2:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    46a4:	89 81       	ldd	r24, Y+1	; 0x01
    46a6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    46a8:	0f 90       	pop	r0
    46aa:	0f 90       	pop	r0
    46ac:	df 91       	pop	r29
    46ae:	cf 91       	pop	r28
    46b0:	08 95       	ret

000046b2 <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    46b2:	cf 92       	push	r12
    46b4:	df 92       	push	r13
    46b6:	ef 92       	push	r14
    46b8:	ff 92       	push	r15
    46ba:	cf 93       	push	r28
    46bc:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    46be:	ec 01       	movw	r28, r24
    46c0:	cc 0f       	add	r28, r28
    46c2:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    46c4:	c9 37       	cpi	r28, 0x79	; 121
    46c6:	8f ef       	ldi	r24, 0xFF	; 255
    46c8:	d8 07       	cpc	r29, r24
    46ca:	10 f0       	brcs	.+4      	; 0x46d0 <nrk_high_speed_timer_wait+0x1e>
    46cc:	c0 e0       	ldi	r28, 0x00	; 0
    46ce:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    46d0:	6b 01       	movw	r12, r22
    46d2:	e1 2c       	mov	r14, r1
    46d4:	f1 2c       	mov	r15, r1
    46d6:	cc 0e       	add	r12, r28
    46d8:	dd 1e       	adc	r13, r29
    46da:	e1 1c       	adc	r14, r1
    46dc:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    46de:	81 e0       	ldi	r24, 0x01	; 1
    46e0:	c8 16       	cp	r12, r24
    46e2:	d1 04       	cpc	r13, r1
    46e4:	e8 06       	cpc	r14, r24
    46e6:	f1 04       	cpc	r15, r1
    46e8:	40 f0       	brcs	.+16     	; 0x46fa <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    46ea:	81 e0       	ldi	r24, 0x01	; 1
    46ec:	e8 1a       	sub	r14, r24
    46ee:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    46f0:	0e 94 47 23 	call	0x468e	; 0x468e <_nrk_high_speed_timer_get>
    46f4:	c8 17       	cp	r28, r24
    46f6:	d9 07       	cpc	r29, r25
    46f8:	d8 f3       	brcs	.-10     	; 0x46f0 <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    46fa:	0e 94 47 23 	call	0x468e	; 0x468e <_nrk_high_speed_timer_get>
    46fe:	8c 15       	cp	r24, r12
    4700:	9d 05       	cpc	r25, r13
    4702:	d8 f3       	brcs	.-10     	; 0x46fa <nrk_high_speed_timer_wait+0x48>
}
    4704:	df 91       	pop	r29
    4706:	cf 91       	pop	r28
    4708:	ff 90       	pop	r15
    470a:	ef 90       	pop	r14
    470c:	df 90       	pop	r13
    470e:	cf 90       	pop	r12
    4710:	08 95       	ret

00004712 <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    4712:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    4716:	e0 e7       	ldi	r30, 0x70	; 112
    4718:	f0 e0       	ldi	r31, 0x00	; 0
    471a:	80 81       	ld	r24, Z
    471c:	8d 7f       	andi	r24, 0xFD	; 253
    471e:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    4720:	80 81       	ld	r24, Z
    4722:	8e 7f       	andi	r24, 0xFE	; 254
    4724:	80 83       	st	Z, r24
    4726:	08 95       	ret

00004728 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    4728:	80 93 b2 00 	sts	0x00B2, r24
    472c:	08 95       	ret

0000472e <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    472e:	e0 e7       	ldi	r30, 0x70	; 112
    4730:	f0 e0       	ldi	r31, 0x00	; 0
    4732:	80 81       	ld	r24, Z
    4734:	83 60       	ori	r24, 0x03	; 3
    4736:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    4738:	83 e0       	ldi	r24, 0x03	; 3
    473a:	80 93 b1 00 	sts	0x00B1, r24
    473e:	08 95       	ret

00004740 <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    4740:	83 b5       	in	r24, 0x23	; 35
    4742:	82 60       	ori	r24, 0x02	; 2
    4744:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    4746:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    474a:	10 92 c7 05 	sts	0x05C7, r1
    _nrk_prev_timer_val=0;
    474e:	10 92 7c 06 	sts	0x067C, r1
    4752:	08 95       	ret

00004754 <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    4754:	cf 93       	push	r28
    4756:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    4758:	8e ef       	ldi	r24, 0xFE	; 254
    475a:	80 93 7c 06 	sts	0x067C, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    475e:	80 e2       	ldi	r24, 0x20	; 32
    4760:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    4764:	80 91 7c 06 	lds	r24, 0x067C
    4768:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    476c:	83 e0       	ldi	r24, 0x03	; 3
    476e:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    4770:	92 e0       	ldi	r25, 0x02	; 2
    4772:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    4776:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    477a:	93 b5       	in	r25, 0x23	; 35
    477c:	92 60       	ori	r25, 0x02	; 2
    477e:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    4780:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    4782:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    4784:	83 b5       	in	r24, 0x23	; 35
    4786:	82 60       	ori	r24, 0x02	; 2
    4788:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    478a:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    478e:	81 e0       	ldi	r24, 0x01	; 1
    4790:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    4794:	10 92 85 00 	sts	0x0085, r1
    4798:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    479c:	83 b5       	in	r24, 0x23	; 35
    479e:	82 60       	ori	r24, 0x02	; 2
    47a0:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    47a2:	83 b5       	in	r24, 0x23	; 35
    47a4:	81 60       	ori	r24, 0x01	; 1
    47a6:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    47a8:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    47ac:	c4 e2       	ldi	r28, 0x24	; 36
    47ae:	d1 e0       	ldi	r29, 0x01	; 1
    47b0:	19 82       	std	Y+1, r1	; 0x01
    47b2:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    47b4:	83 b5       	in	r24, 0x23	; 35
    47b6:	82 60       	ori	r24, 0x02	; 2
    47b8:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    47ba:	83 b5       	in	r24, 0x23	; 35
    47bc:	81 60       	ori	r24, 0x01	; 1
    47be:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    47c0:	0e 94 a0 23 	call	0x4740	; 0x4740 <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    47c4:	19 82       	std	Y+1, r1	; 0x01
    47c6:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    47c8:	0e 94 97 23 	call	0x472e	; 0x472e <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    47cc:	0e 94 17 23 	call	0x462e	; 0x462e <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    47d0:	10 92 c7 05 	sts	0x05C7, r1
}
    47d4:	df 91       	pop	r29
    47d6:	cf 91       	pop	r28
    47d8:	08 95       	ret

000047da <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    47da:	80 91 b3 00 	lds	r24, 0x00B3
}
    47de:	8f 5f       	subi	r24, 0xFF	; 255
    47e0:	08 95       	ret

000047e2 <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    47e2:	81 50       	subi	r24, 0x01	; 1
    47e4:	80 93 b3 00 	sts	0x00B3, r24
    47e8:	08 95       	ret

000047ea <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    47ea:	81 11       	cpse	r24, r1
    47ec:	02 c0       	rjmp	.+4      	; 0x47f2 <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    47ee:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    47f2:	8f ef       	ldi	r24, 0xFF	; 255
    47f4:	08 95       	ret

000047f6 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    47f6:	81 11       	cpse	r24, r1
    47f8:	06 c0       	rjmp	.+12     	; 0x4806 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    47fa:	10 92 95 00 	sts	0x0095, r1
    47fe:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    4802:	81 e0       	ldi	r24, 0x01	; 1
    4804:	08 95       	ret
	}
return NRK_ERROR;
    4806:	8f ef       	ldi	r24, 0xFF	; 255
}
    4808:	08 95       	ret

0000480a <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    480a:	81 11       	cpse	r24, r1
    480c:	05 c0       	rjmp	.+10     	; 0x4818 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    480e:	80 91 94 00 	lds	r24, 0x0094
    4812:	90 91 95 00 	lds	r25, 0x0095
    4816:	08 95       	ret
	}
return 0;
    4818:	80 e0       	ldi	r24, 0x00	; 0
    481a:	90 e0       	ldi	r25, 0x00	; 0

}
    481c:	08 95       	ret

0000481e <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    481e:	81 11       	cpse	r24, r1
    4820:	05 c0       	rjmp	.+10     	; 0x482c <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    4822:	82 e0       	ldi	r24, 0x02	; 2
    4824:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    4828:	81 e0       	ldi	r24, 0x01	; 1
    482a:	08 95       	ret
	}
return NRK_ERROR;
    482c:	8f ef       	ldi	r24, 0xFF	; 255
}
    482e:	08 95       	ret

00004830 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    4830:	81 11       	cpse	r24, r1
    4832:	34 c0       	rjmp	.+104    	; 0x489c <nrk_timer_int_configure+0x6c>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    4834:	cb 01       	movw	r24, r22
    4836:	01 97       	sbiw	r24, 0x01	; 1
    4838:	05 97       	sbiw	r24, 0x05	; 5
    483a:	10 f4       	brcc	.+4      	; 0x4840 <nrk_timer_int_configure+0x10>
    483c:	60 93 7b 06 	sts	0x067B, r22
	TCCR3A = 0;  
    4840:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;//BM(WGM32);  // Automatic restart on compare, count up
    4844:	10 92 91 00 	sts	0x0091, r1
	
	OCR3AH = (compare_value >> 8) & 0xFF;	
    4848:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    484c:	40 93 98 00 	sts	0x0098, r20
	
	app_timer0_callback=callback_func;
    4850:	30 93 c4 04 	sts	0x04C4, r19
    4854:	20 93 c3 04 	sts	0x04C3, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    4858:	80 91 7b 06 	lds	r24, 0x067B
    485c:	81 30       	cpi	r24, 0x01	; 1
    485e:	21 f4       	brne	.+8      	; 0x4868 <nrk_timer_int_configure+0x38>
    4860:	80 91 91 00 	lds	r24, 0x0091
    4864:	81 60       	ori	r24, 0x01	; 1
    4866:	11 c0       	rjmp	.+34     	; 0x488a <nrk_timer_int_configure+0x5a>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    4868:	82 30       	cpi	r24, 0x02	; 2
    486a:	21 f4       	brne	.+8      	; 0x4874 <nrk_timer_int_configure+0x44>
    486c:	80 91 91 00 	lds	r24, 0x0091
    4870:	82 60       	ori	r24, 0x02	; 2
    4872:	0b c0       	rjmp	.+22     	; 0x488a <nrk_timer_int_configure+0x5a>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    4874:	83 30       	cpi	r24, 0x03	; 3
    4876:	21 f4       	brne	.+8      	; 0x4880 <nrk_timer_int_configure+0x50>
    4878:	80 91 91 00 	lds	r24, 0x0091
    487c:	83 60       	ori	r24, 0x03	; 3
    487e:	05 c0       	rjmp	.+10     	; 0x488a <nrk_timer_int_configure+0x5a>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    4880:	84 30       	cpi	r24, 0x04	; 4
    4882:	31 f4       	brne	.+12     	; 0x4890 <nrk_timer_int_configure+0x60>
    4884:	80 91 91 00 	lds	r24, 0x0091
    4888:	84 60       	ori	r24, 0x04	; 4
    488a:	80 93 91 00 	sts	0x0091, r24
    488e:	08 c0       	rjmp	.+16     	; 0x48a0 <nrk_timer_int_configure+0x70>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    4890:	85 30       	cpi	r24, 0x05	; 5
    4892:	31 f4       	brne	.+12     	; 0x48a0 <nrk_timer_int_configure+0x70>
    4894:	80 91 91 00 	lds	r24, 0x0091
    4898:	85 60       	ori	r24, 0x05	; 5
    489a:	f7 cf       	rjmp	.-18     	; 0x488a <nrk_timer_int_configure+0x5a>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    489c:	8f ef       	ldi	r24, 0xFF	; 255
    489e:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    48a0:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    48a2:	08 95       	ret

000048a4 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    48a4:	80 91 b2 00 	lds	r24, 0x00B2
}
    48a8:	08 95       	ret

000048aa <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    48aa:	1f 92       	push	r1
    48ac:	0f 92       	push	r0
    48ae:	0f b6       	in	r0, 0x3f	; 63
    48b0:	0f 92       	push	r0
    48b2:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    48b4:	60 e0       	ldi	r22, 0x00	; 0
    48b6:	8a e0       	ldi	r24, 0x0A	; 10
    48b8:	0e 94 4e 13 	call	0x269c	; 0x269c <nrk_kernel_error_add>
	while(1);
    48bc:	ff cf       	rjmp	.-2      	; 0x48bc <__vector_default+0x12>

000048be <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    48be:	0f 92       	push	r0
    48c0:	0f b6       	in	r0, 0x3f	; 63
    48c2:	0f 92       	push	r0
    48c4:	1f 92       	push	r1
    48c6:	2f 92       	push	r2
    48c8:	3f 92       	push	r3
    48ca:	4f 92       	push	r4
    48cc:	5f 92       	push	r5
    48ce:	6f 92       	push	r6
    48d0:	7f 92       	push	r7
    48d2:	8f 92       	push	r8
    48d4:	9f 92       	push	r9
    48d6:	af 92       	push	r10
    48d8:	bf 92       	push	r11
    48da:	cf 92       	push	r12
    48dc:	df 92       	push	r13
    48de:	ef 92       	push	r14
    48e0:	ff 92       	push	r15
    48e2:	0f 93       	push	r16
    48e4:	1f 93       	push	r17
    48e6:	2f 93       	push	r18
    48e8:	3f 93       	push	r19
    48ea:	4f 93       	push	r20
    48ec:	5f 93       	push	r21
    48ee:	6f 93       	push	r22
    48f0:	7f 93       	push	r23
    48f2:	8f 93       	push	r24
    48f4:	9f 93       	push	r25
    48f6:	af 93       	push	r26
    48f8:	bf 93       	push	r27
    48fa:	cf 93       	push	r28
    48fc:	df 93       	push	r29
    48fe:	ef 93       	push	r30
    4900:	ff 93       	push	r31
    4902:	a0 91 db 07 	lds	r26, 0x07DB
    4906:	b0 91 dc 07 	lds	r27, 0x07DC
    490a:	0d b6       	in	r0, 0x3d	; 61
    490c:	0d 92       	st	X+, r0
    490e:	0e b6       	in	r0, 0x3e	; 62
    4910:	0d 92       	st	X+, r0
    4912:	1f 92       	push	r1
    4914:	a0 91 79 06 	lds	r26, 0x0679
    4918:	b0 91 7a 06 	lds	r27, 0x067A
    491c:	1e 90       	ld	r1, -X
    491e:	be bf       	out	0x3e, r27	; 62
    4920:	ad bf       	out	0x3d, r26	; 61
    4922:	08 95       	ret

00004924 <__vector_32>:
   "ret\n\t" \
);

}

SIGNAL(TIMER3_COMPA_vect) {
    4924:	1f 92       	push	r1
    4926:	0f 92       	push	r0
    4928:	0f b6       	in	r0, 0x3f	; 63
    492a:	0f 92       	push	r0
    492c:	11 24       	eor	r1, r1
    492e:	0b b6       	in	r0, 0x3b	; 59
    4930:	0f 92       	push	r0
    4932:	2f 93       	push	r18
    4934:	3f 93       	push	r19
    4936:	4f 93       	push	r20
    4938:	5f 93       	push	r21
    493a:	6f 93       	push	r22
    493c:	7f 93       	push	r23
    493e:	8f 93       	push	r24
    4940:	9f 93       	push	r25
    4942:	af 93       	push	r26
    4944:	bf 93       	push	r27
    4946:	ef 93       	push	r30
    4948:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    494a:	e0 91 c3 04 	lds	r30, 0x04C3
    494e:	f0 91 c4 04 	lds	r31, 0x04C4
    4952:	30 97       	sbiw	r30, 0x00	; 0
    4954:	11 f0       	breq	.+4      	; 0x495a <__vector_32+0x36>
    4956:	09 95       	icall
    4958:	04 c0       	rjmp	.+8      	; 0x4962 <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    495a:	60 e0       	ldi	r22, 0x00	; 0
    495c:	8a e0       	ldi	r24, 0x0A	; 10
    495e:	0e 94 4e 13 	call	0x269c	; 0x269c <nrk_kernel_error_add>
	return;  	
}
    4962:	ff 91       	pop	r31
    4964:	ef 91       	pop	r30
    4966:	bf 91       	pop	r27
    4968:	af 91       	pop	r26
    496a:	9f 91       	pop	r25
    496c:	8f 91       	pop	r24
    496e:	7f 91       	pop	r23
    4970:	6f 91       	pop	r22
    4972:	5f 91       	pop	r21
    4974:	4f 91       	pop	r20
    4976:	3f 91       	pop	r19
    4978:	2f 91       	pop	r18
    497a:	0f 90       	pop	r0
    497c:	0b be       	out	0x3b, r0	; 59
    497e:	0f 90       	pop	r0
    4980:	0f be       	out	0x3f, r0	; 63
    4982:	0f 90       	pop	r0
    4984:	1f 90       	pop	r1
    4986:	18 95       	reti

00004988 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    4988:	1f 92       	push	r1
    498a:	0f 92       	push	r0
    498c:	0f b6       	in	r0, 0x3f	; 63
    498e:	0f 92       	push	r0
    4990:	11 24       	eor	r1, r1

	return;  	
} 
    4992:	0f 90       	pop	r0
    4994:	0f be       	out	0x3f, r0	; 63
    4996:	0f 90       	pop	r0
    4998:	1f 90       	pop	r1
    499a:	18 95       	reti

0000499c <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    499c:	04 b6       	in	r0, 0x34	; 52
    499e:	03 fe       	sbrs	r0, 3
    49a0:	02 c0       	rjmp	.+4      	; 0x49a6 <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    49a2:	80 e1       	ldi	r24, 0x10	; 16
    49a4:	01 c0       	rjmp	.+2      	; 0x49a8 <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    49a6:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    49a8:	04 b6       	in	r0, 0x34	; 52
    49aa:	02 fe       	sbrs	r0, 2
    49ac:	06 c0       	rjmp	.+12     	; 0x49ba <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    49ae:	94 b7       	in	r25, 0x34	; 52
    49b0:	9b 7f       	andi	r25, 0xFB	; 251
    49b2:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    49b4:	04 b6       	in	r0, 0x34	; 52
    49b6:	00 fe       	sbrs	r0, 0
		error|=0x04;
    49b8:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    49ba:	04 b6       	in	r0, 0x34	; 52
    49bc:	01 fe       	sbrs	r0, 1
    49be:	05 c0       	rjmp	.+10     	; 0x49ca <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    49c0:	94 b7       	in	r25, 0x34	; 52
    49c2:	9d 7f       	andi	r25, 0xFD	; 253
    49c4:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    49c6:	82 60       	ori	r24, 0x02	; 2
    49c8:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    49ca:	81 11       	cpse	r24, r1
    49cc:	0c c0       	rjmp	.+24     	; 0x49e6 <_nrk_startup_error+0x4a>


// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    49ce:	04 b6       	in	r0, 0x34	; 52
    49d0:	00 fe       	sbrs	r0, 0
    49d2:	04 c0       	rjmp	.+8      	; 0x49dc <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    49d4:	94 b7       	in	r25, 0x34	; 52
    49d6:	9e 7f       	andi	r25, 0xFE	; 254
    49d8:	94 bf       	out	0x34, r25	; 52
    49da:	01 c0       	rjmp	.+2      	; 0x49de <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    49dc:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    49de:	90 91 b0 00 	lds	r25, 0x00B0
    49e2:	91 11       	cpse	r25, r1
    49e4:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    49e6:	08 95       	ret

000049e8 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    49e8:	81 11       	cpse	r24, r1
    49ea:	02 c0       	rjmp	.+4      	; 0x49f0 <nrk_ext_int_enable+0x8>
    49ec:	e8 9a       	sbi	0x1d, 0	; 29
    49ee:	39 c0       	rjmp	.+114    	; 0x4a62 <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    49f0:	81 30       	cpi	r24, 0x01	; 1
    49f2:	11 f4       	brne	.+4      	; 0x49f8 <nrk_ext_int_enable+0x10>
    49f4:	e9 9a       	sbi	0x1d, 1	; 29
    49f6:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    49f8:	82 30       	cpi	r24, 0x02	; 2
    49fa:	11 f4       	brne	.+4      	; 0x4a00 <nrk_ext_int_enable+0x18>
    49fc:	ea 9a       	sbi	0x1d, 2	; 29
    49fe:	31 c0       	rjmp	.+98     	; 0x4a62 <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    4a00:	83 30       	cpi	r24, 0x03	; 3
    4a02:	21 f4       	brne	.+8      	; 0x4a0c <nrk_ext_int_enable+0x24>
    4a04:	80 91 6b 00 	lds	r24, 0x006B
    4a08:	81 60       	ori	r24, 0x01	; 1
    4a0a:	29 c0       	rjmp	.+82     	; 0x4a5e <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    4a0c:	84 30       	cpi	r24, 0x04	; 4
    4a0e:	21 f4       	brne	.+8      	; 0x4a18 <nrk_ext_int_enable+0x30>
    4a10:	80 91 6b 00 	lds	r24, 0x006B
    4a14:	82 60       	ori	r24, 0x02	; 2
    4a16:	23 c0       	rjmp	.+70     	; 0x4a5e <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    4a18:	85 30       	cpi	r24, 0x05	; 5
    4a1a:	21 f4       	brne	.+8      	; 0x4a24 <nrk_ext_int_enable+0x3c>
    4a1c:	80 91 6b 00 	lds	r24, 0x006B
    4a20:	84 60       	ori	r24, 0x04	; 4
    4a22:	1d c0       	rjmp	.+58     	; 0x4a5e <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    4a24:	86 30       	cpi	r24, 0x06	; 6
    4a26:	21 f4       	brne	.+8      	; 0x4a30 <nrk_ext_int_enable+0x48>
    4a28:	80 91 6b 00 	lds	r24, 0x006B
    4a2c:	88 60       	ori	r24, 0x08	; 8
    4a2e:	17 c0       	rjmp	.+46     	; 0x4a5e <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    4a30:	87 30       	cpi	r24, 0x07	; 7
    4a32:	21 f4       	brne	.+8      	; 0x4a3c <nrk_ext_int_enable+0x54>
    4a34:	80 91 6b 00 	lds	r24, 0x006B
    4a38:	80 61       	ori	r24, 0x10	; 16
    4a3a:	11 c0       	rjmp	.+34     	; 0x4a5e <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    4a3c:	88 30       	cpi	r24, 0x08	; 8
    4a3e:	21 f4       	brne	.+8      	; 0x4a48 <nrk_ext_int_enable+0x60>
    4a40:	80 91 6b 00 	lds	r24, 0x006B
    4a44:	80 62       	ori	r24, 0x20	; 32
    4a46:	0b c0       	rjmp	.+22     	; 0x4a5e <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    4a48:	89 30       	cpi	r24, 0x09	; 9
    4a4a:	21 f4       	brne	.+8      	; 0x4a54 <nrk_ext_int_enable+0x6c>
    4a4c:	80 91 6b 00 	lds	r24, 0x006B
    4a50:	80 64       	ori	r24, 0x40	; 64
    4a52:	05 c0       	rjmp	.+10     	; 0x4a5e <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    4a54:	8a 30       	cpi	r24, 0x0A	; 10
    4a56:	39 f4       	brne	.+14     	; 0x4a66 <nrk_ext_int_enable+0x7e>
    4a58:	80 91 6b 00 	lds	r24, 0x006B
    4a5c:	80 68       	ori	r24, 0x80	; 128
    4a5e:	80 93 6b 00 	sts	0x006B, r24
    4a62:	81 e0       	ldi	r24, 0x01	; 1
    4a64:	08 95       	ret
return NRK_ERROR;
    4a66:	8f ef       	ldi	r24, 0xFF	; 255
}
    4a68:	08 95       	ret

00004a6a <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    4a6a:	81 11       	cpse	r24, r1
    4a6c:	02 c0       	rjmp	.+4      	; 0x4a72 <nrk_ext_int_disable+0x8>
    4a6e:	e8 98       	cbi	0x1d, 0	; 29
    4a70:	39 c0       	rjmp	.+114    	; 0x4ae4 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4a72:	81 30       	cpi	r24, 0x01	; 1
    4a74:	11 f4       	brne	.+4      	; 0x4a7a <nrk_ext_int_disable+0x10>
    4a76:	e9 98       	cbi	0x1d, 1	; 29
    4a78:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4a7a:	82 30       	cpi	r24, 0x02	; 2
    4a7c:	11 f4       	brne	.+4      	; 0x4a82 <nrk_ext_int_disable+0x18>
    4a7e:	e9 98       	cbi	0x1d, 1	; 29
    4a80:	31 c0       	rjmp	.+98     	; 0x4ae4 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    4a82:	83 30       	cpi	r24, 0x03	; 3
    4a84:	21 f4       	brne	.+8      	; 0x4a8e <nrk_ext_int_disable+0x24>
    4a86:	80 91 6b 00 	lds	r24, 0x006B
    4a8a:	8e 7f       	andi	r24, 0xFE	; 254
    4a8c:	29 c0       	rjmp	.+82     	; 0x4ae0 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    4a8e:	84 30       	cpi	r24, 0x04	; 4
    4a90:	21 f4       	brne	.+8      	; 0x4a9a <nrk_ext_int_disable+0x30>
    4a92:	80 91 6b 00 	lds	r24, 0x006B
    4a96:	8d 7f       	andi	r24, 0xFD	; 253
    4a98:	23 c0       	rjmp	.+70     	; 0x4ae0 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    4a9a:	85 30       	cpi	r24, 0x05	; 5
    4a9c:	21 f4       	brne	.+8      	; 0x4aa6 <nrk_ext_int_disable+0x3c>
    4a9e:	80 91 6b 00 	lds	r24, 0x006B
    4aa2:	8b 7f       	andi	r24, 0xFB	; 251
    4aa4:	1d c0       	rjmp	.+58     	; 0x4ae0 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    4aa6:	86 30       	cpi	r24, 0x06	; 6
    4aa8:	21 f4       	brne	.+8      	; 0x4ab2 <nrk_ext_int_disable+0x48>
    4aaa:	80 91 6b 00 	lds	r24, 0x006B
    4aae:	87 7f       	andi	r24, 0xF7	; 247
    4ab0:	17 c0       	rjmp	.+46     	; 0x4ae0 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    4ab2:	87 30       	cpi	r24, 0x07	; 7
    4ab4:	21 f4       	brne	.+8      	; 0x4abe <nrk_ext_int_disable+0x54>
    4ab6:	80 91 6b 00 	lds	r24, 0x006B
    4aba:	8f 7e       	andi	r24, 0xEF	; 239
    4abc:	11 c0       	rjmp	.+34     	; 0x4ae0 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    4abe:	88 30       	cpi	r24, 0x08	; 8
    4ac0:	21 f4       	brne	.+8      	; 0x4aca <nrk_ext_int_disable+0x60>
    4ac2:	80 91 6b 00 	lds	r24, 0x006B
    4ac6:	8f 7d       	andi	r24, 0xDF	; 223
    4ac8:	0b c0       	rjmp	.+22     	; 0x4ae0 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    4aca:	89 30       	cpi	r24, 0x09	; 9
    4acc:	21 f4       	brne	.+8      	; 0x4ad6 <nrk_ext_int_disable+0x6c>
    4ace:	80 91 6b 00 	lds	r24, 0x006B
    4ad2:	8f 7b       	andi	r24, 0xBF	; 191
    4ad4:	05 c0       	rjmp	.+10     	; 0x4ae0 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    4ad6:	8a 30       	cpi	r24, 0x0A	; 10
    4ad8:	39 f4       	brne	.+14     	; 0x4ae8 <nrk_ext_int_disable+0x7e>
    4ada:	80 91 6b 00 	lds	r24, 0x006B
    4ade:	8f 77       	andi	r24, 0x7F	; 127
    4ae0:	80 93 6b 00 	sts	0x006B, r24
    4ae4:	81 e0       	ldi	r24, 0x01	; 1
    4ae6:	08 95       	ret
return NRK_ERROR;
    4ae8:	8f ef       	ldi	r24, 0xFF	; 255
}
    4aea:	08 95       	ret

00004aec <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    4aec:	81 11       	cpse	r24, r1
    4aee:	26 c0       	rjmp	.+76     	; 0x4b3c <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    4af0:	50 93 f7 07 	sts	0x07F7, r21
    4af4:	40 93 f6 07 	sts	0x07F6, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    4af8:	61 11       	cpse	r22, r1
    4afa:	04 c0       	rjmp	.+8      	; 0x4b04 <nrk_ext_int_configure+0x18>
    4afc:	80 91 69 00 	lds	r24, 0x0069
    4b00:	8c 7f       	andi	r24, 0xFC	; 252
    4b02:	3d c0       	rjmp	.+122    	; 0x4b7e <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4b04:	61 30       	cpi	r22, 0x01	; 1
    4b06:	49 f4       	brne	.+18     	; 0x4b1a <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    4b08:	80 91 69 00 	lds	r24, 0x0069
    4b0c:	8d 7f       	andi	r24, 0xFD	; 253
    4b0e:	80 93 69 00 	sts	0x0069, r24
    4b12:	80 91 69 00 	lds	r24, 0x0069
    4b16:	81 60       	ori	r24, 0x01	; 1
    4b18:	32 c0       	rjmp	.+100    	; 0x4b7e <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4b1a:	62 30       	cpi	r22, 0x02	; 2
    4b1c:	49 f4       	brne	.+18     	; 0x4b30 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    4b1e:	80 91 69 00 	lds	r24, 0x0069
    4b22:	82 60       	ori	r24, 0x02	; 2
    4b24:	80 93 69 00 	sts	0x0069, r24
    4b28:	80 91 69 00 	lds	r24, 0x0069
    4b2c:	8e 7f       	andi	r24, 0xFE	; 254
    4b2e:	27 c0       	rjmp	.+78     	; 0x4b7e <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    4b30:	63 30       	cpi	r22, 0x03	; 3
    4b32:	39 f5       	brne	.+78     	; 0x4b82 <nrk_ext_int_configure+0x96>
    4b34:	80 91 69 00 	lds	r24, 0x0069
    4b38:	83 60       	ori	r24, 0x03	; 3
    4b3a:	21 c0       	rjmp	.+66     	; 0x4b7e <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    4b3c:	81 30       	cpi	r24, 0x01	; 1
    4b3e:	49 f5       	brne	.+82     	; 0x4b92 <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    4b40:	50 93 f5 07 	sts	0x07F5, r21
    4b44:	40 93 f4 07 	sts	0x07F4, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    4b48:	61 11       	cpse	r22, r1
    4b4a:	04 c0       	rjmp	.+8      	; 0x4b54 <nrk_ext_int_configure+0x68>
    4b4c:	80 91 69 00 	lds	r24, 0x0069
    4b50:	83 7f       	andi	r24, 0xF3	; 243
    4b52:	15 c0       	rjmp	.+42     	; 0x4b7e <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4b54:	61 30       	cpi	r22, 0x01	; 1
    4b56:	49 f4       	brne	.+18     	; 0x4b6a <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    4b58:	80 91 69 00 	lds	r24, 0x0069
    4b5c:	87 7f       	andi	r24, 0xF7	; 247
    4b5e:	80 93 69 00 	sts	0x0069, r24
    4b62:	80 91 69 00 	lds	r24, 0x0069
    4b66:	84 60       	ori	r24, 0x04	; 4
    4b68:	0a c0       	rjmp	.+20     	; 0x4b7e <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4b6a:	62 30       	cpi	r22, 0x02	; 2
    4b6c:	61 f4       	brne	.+24     	; 0x4b86 <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    4b6e:	80 91 69 00 	lds	r24, 0x0069
    4b72:	88 60       	ori	r24, 0x08	; 8
    4b74:	80 93 69 00 	sts	0x0069, r24
    4b78:	80 91 69 00 	lds	r24, 0x0069
    4b7c:	8b 7f       	andi	r24, 0xFB	; 251
    4b7e:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    4b82:	81 e0       	ldi	r24, 0x01	; 1
    4b84:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    4b86:	63 30       	cpi	r22, 0x03	; 3
    4b88:	e1 f7       	brne	.-8      	; 0x4b82 <nrk_ext_int_configure+0x96>
    4b8a:	80 91 69 00 	lds	r24, 0x0069
    4b8e:	8c 60       	ori	r24, 0x0C	; 12
    4b90:	f6 cf       	rjmp	.-20     	; 0x4b7e <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    4b92:	82 30       	cpi	r24, 0x02	; 2
    4b94:	31 f5       	brne	.+76     	; 0x4be2 <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    4b96:	50 93 f9 07 	sts	0x07F9, r21
    4b9a:	40 93 f8 07 	sts	0x07F8, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    4b9e:	61 11       	cpse	r22, r1
    4ba0:	04 c0       	rjmp	.+8      	; 0x4baa <nrk_ext_int_configure+0xbe>
    4ba2:	80 91 69 00 	lds	r24, 0x0069
    4ba6:	8f 7c       	andi	r24, 0xCF	; 207
    4ba8:	ea cf       	rjmp	.-44     	; 0x4b7e <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4baa:	61 30       	cpi	r22, 0x01	; 1
    4bac:	49 f4       	brne	.+18     	; 0x4bc0 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    4bae:	80 91 69 00 	lds	r24, 0x0069
    4bb2:	8f 7d       	andi	r24, 0xDF	; 223
    4bb4:	80 93 69 00 	sts	0x0069, r24
    4bb8:	80 91 69 00 	lds	r24, 0x0069
    4bbc:	80 61       	ori	r24, 0x10	; 16
    4bbe:	df cf       	rjmp	.-66     	; 0x4b7e <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4bc0:	62 30       	cpi	r22, 0x02	; 2
    4bc2:	49 f4       	brne	.+18     	; 0x4bd6 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    4bc4:	80 91 69 00 	lds	r24, 0x0069
    4bc8:	80 62       	ori	r24, 0x20	; 32
    4bca:	80 93 69 00 	sts	0x0069, r24
    4bce:	80 91 69 00 	lds	r24, 0x0069
    4bd2:	8f 7e       	andi	r24, 0xEF	; 239
    4bd4:	d4 cf       	rjmp	.-88     	; 0x4b7e <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    4bd6:	63 30       	cpi	r22, 0x03	; 3
    4bd8:	a1 f6       	brne	.-88     	; 0x4b82 <nrk_ext_int_configure+0x96>
    4bda:	80 91 69 00 	lds	r24, 0x0069
    4bde:	80 63       	ori	r24, 0x30	; 48
    4be0:	ce cf       	rjmp	.-100    	; 0x4b7e <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    4be2:	83 50       	subi	r24, 0x03	; 3
    4be4:	88 30       	cpi	r24, 0x08	; 8
    4be6:	50 f4       	brcc	.+20     	; 0x4bfc <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    4be8:	80 91 68 00 	lds	r24, 0x0068
    4bec:	81 60       	ori	r24, 0x01	; 1
    4bee:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    4bf2:	50 93 fb 07 	sts	0x07FB, r21
    4bf6:	40 93 fa 07 	sts	0x07FA, r20
    4bfa:	c3 cf       	rjmp	.-122    	; 0x4b82 <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    4bfc:	8f ef       	ldi	r24, 0xFF	; 255
}
    4bfe:	08 95       	ret

00004c00 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    4c00:	1f 92       	push	r1
    4c02:	0f 92       	push	r0
    4c04:	0f b6       	in	r0, 0x3f	; 63
    4c06:	0f 92       	push	r0
    4c08:	11 24       	eor	r1, r1
    4c0a:	0b b6       	in	r0, 0x3b	; 59
    4c0c:	0f 92       	push	r0
    4c0e:	2f 93       	push	r18
    4c10:	3f 93       	push	r19
    4c12:	4f 93       	push	r20
    4c14:	5f 93       	push	r21
    4c16:	6f 93       	push	r22
    4c18:	7f 93       	push	r23
    4c1a:	8f 93       	push	r24
    4c1c:	9f 93       	push	r25
    4c1e:	af 93       	push	r26
    4c20:	bf 93       	push	r27
    4c22:	ef 93       	push	r30
    4c24:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    4c26:	e0 91 fa 07 	lds	r30, 0x07FA
    4c2a:	f0 91 fb 07 	lds	r31, 0x07FB
    4c2e:	30 97       	sbiw	r30, 0x00	; 0
    4c30:	11 f0       	breq	.+4      	; 0x4c36 <__vector_9+0x36>
    4c32:	09 95       	icall
    4c34:	04 c0       	rjmp	.+8      	; 0x4c3e <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4c36:	60 e0       	ldi	r22, 0x00	; 0
    4c38:	8a e0       	ldi	r24, 0x0A	; 10
    4c3a:	0e 94 4e 13 	call	0x269c	; 0x269c <nrk_kernel_error_add>
	return;  	
}
    4c3e:	ff 91       	pop	r31
    4c40:	ef 91       	pop	r30
    4c42:	bf 91       	pop	r27
    4c44:	af 91       	pop	r26
    4c46:	9f 91       	pop	r25
    4c48:	8f 91       	pop	r24
    4c4a:	7f 91       	pop	r23
    4c4c:	6f 91       	pop	r22
    4c4e:	5f 91       	pop	r21
    4c50:	4f 91       	pop	r20
    4c52:	3f 91       	pop	r19
    4c54:	2f 91       	pop	r18
    4c56:	0f 90       	pop	r0
    4c58:	0b be       	out	0x3b, r0	; 59
    4c5a:	0f 90       	pop	r0
    4c5c:	0f be       	out	0x3f, r0	; 63
    4c5e:	0f 90       	pop	r0
    4c60:	1f 90       	pop	r1
    4c62:	18 95       	reti

00004c64 <__vector_1>:


SIGNAL(INT0_vect) {
    4c64:	1f 92       	push	r1
    4c66:	0f 92       	push	r0
    4c68:	0f b6       	in	r0, 0x3f	; 63
    4c6a:	0f 92       	push	r0
    4c6c:	11 24       	eor	r1, r1
    4c6e:	0b b6       	in	r0, 0x3b	; 59
    4c70:	0f 92       	push	r0
    4c72:	2f 93       	push	r18
    4c74:	3f 93       	push	r19
    4c76:	4f 93       	push	r20
    4c78:	5f 93       	push	r21
    4c7a:	6f 93       	push	r22
    4c7c:	7f 93       	push	r23
    4c7e:	8f 93       	push	r24
    4c80:	9f 93       	push	r25
    4c82:	af 93       	push	r26
    4c84:	bf 93       	push	r27
    4c86:	ef 93       	push	r30
    4c88:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    4c8a:	e0 91 f6 07 	lds	r30, 0x07F6
    4c8e:	f0 91 f7 07 	lds	r31, 0x07F7
    4c92:	30 97       	sbiw	r30, 0x00	; 0
    4c94:	11 f0       	breq	.+4      	; 0x4c9a <__vector_1+0x36>
    4c96:	09 95       	icall
    4c98:	04 c0       	rjmp	.+8      	; 0x4ca2 <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4c9a:	60 e0       	ldi	r22, 0x00	; 0
    4c9c:	8a e0       	ldi	r24, 0x0A	; 10
    4c9e:	0e 94 4e 13 	call	0x269c	; 0x269c <nrk_kernel_error_add>
	return;  	
}
    4ca2:	ff 91       	pop	r31
    4ca4:	ef 91       	pop	r30
    4ca6:	bf 91       	pop	r27
    4ca8:	af 91       	pop	r26
    4caa:	9f 91       	pop	r25
    4cac:	8f 91       	pop	r24
    4cae:	7f 91       	pop	r23
    4cb0:	6f 91       	pop	r22
    4cb2:	5f 91       	pop	r21
    4cb4:	4f 91       	pop	r20
    4cb6:	3f 91       	pop	r19
    4cb8:	2f 91       	pop	r18
    4cba:	0f 90       	pop	r0
    4cbc:	0b be       	out	0x3b, r0	; 59
    4cbe:	0f 90       	pop	r0
    4cc0:	0f be       	out	0x3f, r0	; 63
    4cc2:	0f 90       	pop	r0
    4cc4:	1f 90       	pop	r1
    4cc6:	18 95       	reti

00004cc8 <__vector_2>:

SIGNAL(INT1_vect) {
    4cc8:	1f 92       	push	r1
    4cca:	0f 92       	push	r0
    4ccc:	0f b6       	in	r0, 0x3f	; 63
    4cce:	0f 92       	push	r0
    4cd0:	11 24       	eor	r1, r1
    4cd2:	0b b6       	in	r0, 0x3b	; 59
    4cd4:	0f 92       	push	r0
    4cd6:	2f 93       	push	r18
    4cd8:	3f 93       	push	r19
    4cda:	4f 93       	push	r20
    4cdc:	5f 93       	push	r21
    4cde:	6f 93       	push	r22
    4ce0:	7f 93       	push	r23
    4ce2:	8f 93       	push	r24
    4ce4:	9f 93       	push	r25
    4ce6:	af 93       	push	r26
    4ce8:	bf 93       	push	r27
    4cea:	ef 93       	push	r30
    4cec:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    4cee:	e0 91 f4 07 	lds	r30, 0x07F4
    4cf2:	f0 91 f5 07 	lds	r31, 0x07F5
    4cf6:	30 97       	sbiw	r30, 0x00	; 0
    4cf8:	11 f0       	breq	.+4      	; 0x4cfe <__vector_2+0x36>
    4cfa:	09 95       	icall
    4cfc:	04 c0       	rjmp	.+8      	; 0x4d06 <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4cfe:	60 e0       	ldi	r22, 0x00	; 0
    4d00:	8a e0       	ldi	r24, 0x0A	; 10
    4d02:	0e 94 4e 13 	call	0x269c	; 0x269c <nrk_kernel_error_add>
	return;  	
}
    4d06:	ff 91       	pop	r31
    4d08:	ef 91       	pop	r30
    4d0a:	bf 91       	pop	r27
    4d0c:	af 91       	pop	r26
    4d0e:	9f 91       	pop	r25
    4d10:	8f 91       	pop	r24
    4d12:	7f 91       	pop	r23
    4d14:	6f 91       	pop	r22
    4d16:	5f 91       	pop	r21
    4d18:	4f 91       	pop	r20
    4d1a:	3f 91       	pop	r19
    4d1c:	2f 91       	pop	r18
    4d1e:	0f 90       	pop	r0
    4d20:	0b be       	out	0x3b, r0	; 59
    4d22:	0f 90       	pop	r0
    4d24:	0f be       	out	0x3f, r0	; 63
    4d26:	0f 90       	pop	r0
    4d28:	1f 90       	pop	r1
    4d2a:	18 95       	reti

00004d2c <__vector_3>:

SIGNAL(INT2_vect) {
    4d2c:	1f 92       	push	r1
    4d2e:	0f 92       	push	r0
    4d30:	0f b6       	in	r0, 0x3f	; 63
    4d32:	0f 92       	push	r0
    4d34:	11 24       	eor	r1, r1
    4d36:	0b b6       	in	r0, 0x3b	; 59
    4d38:	0f 92       	push	r0
    4d3a:	2f 93       	push	r18
    4d3c:	3f 93       	push	r19
    4d3e:	4f 93       	push	r20
    4d40:	5f 93       	push	r21
    4d42:	6f 93       	push	r22
    4d44:	7f 93       	push	r23
    4d46:	8f 93       	push	r24
    4d48:	9f 93       	push	r25
    4d4a:	af 93       	push	r26
    4d4c:	bf 93       	push	r27
    4d4e:	ef 93       	push	r30
    4d50:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    4d52:	e0 91 f8 07 	lds	r30, 0x07F8
    4d56:	f0 91 f9 07 	lds	r31, 0x07F9
    4d5a:	30 97       	sbiw	r30, 0x00	; 0
    4d5c:	11 f0       	breq	.+4      	; 0x4d62 <__vector_3+0x36>
    4d5e:	09 95       	icall
    4d60:	04 c0       	rjmp	.+8      	; 0x4d6a <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4d62:	60 e0       	ldi	r22, 0x00	; 0
    4d64:	8a e0       	ldi	r24, 0x0A	; 10
    4d66:	0e 94 4e 13 	call	0x269c	; 0x269c <nrk_kernel_error_add>
	return;  	
}
    4d6a:	ff 91       	pop	r31
    4d6c:	ef 91       	pop	r30
    4d6e:	bf 91       	pop	r27
    4d70:	af 91       	pop	r26
    4d72:	9f 91       	pop	r25
    4d74:	8f 91       	pop	r24
    4d76:	7f 91       	pop	r23
    4d78:	6f 91       	pop	r22
    4d7a:	5f 91       	pop	r21
    4d7c:	4f 91       	pop	r20
    4d7e:	3f 91       	pop	r19
    4d80:	2f 91       	pop	r18
    4d82:	0f 90       	pop	r0
    4d84:	0b be       	out	0x3b, r0	; 59
    4d86:	0f 90       	pop	r0
    4d88:	0f be       	out	0x3f, r0	; 63
    4d8a:	0f 90       	pop	r0
    4d8c:	1f 90       	pop	r1
    4d8e:	18 95       	reti

00004d90 <nrk_watchdog_disable>:
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4d90:	a8 95       	wdr
#include <util/atomic.h>

void nrk_watchdog_disable()
{
nrk_watchdog_reset();
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4d92:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4d94:	f8 94       	cli
{
	MCUSR &= ~(1<<WDRF);
    4d96:	84 b7       	in	r24, 0x34	; 52
    4d98:	87 7f       	andi	r24, 0xF7	; 247
    4d9a:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE) | (1<<WDE);
    4d9c:	e0 e6       	ldi	r30, 0x60	; 96
    4d9e:	f0 e0       	ldi	r31, 0x00	; 0
    4da0:	80 81       	ld	r24, Z
    4da2:	88 61       	ori	r24, 0x18	; 24
    4da4:	80 83       	st	Z, r24
	WDTCSR = 0;
    4da6:	10 82       	st	Z, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4da8:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    4daa:	08 95       	ret

00004dac <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4dac:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4dae:	f8 94       	cli
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    4db0:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
{
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    4db2:	84 b7       	in	r24, 0x34	; 52
    4db4:	87 7f       	andi	r24, 0xF7	; 247
    4db6:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    4db8:	e0 e6       	ldi	r30, 0x60	; 96
    4dba:	f0 e0       	ldi	r31, 0x00	; 0
    4dbc:	80 81       	ld	r24, Z
    4dbe:	88 61       	ori	r24, 0x18	; 24
    4dc0:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    4dc2:	8d e0       	ldi	r24, 0x0D	; 13
    4dc4:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4dc6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    4dc8:	08 95       	ret

00004dca <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4dca:	04 b6       	in	r0, 0x34	; 52
    4dcc:	03 fe       	sbrs	r0, 3
    4dce:	02 c0       	rjmp	.+4      	; 0x4dd4 <nrk_watchdog_check+0xa>
return NRK_ERROR;
    4dd0:	8f ef       	ldi	r24, 0xFF	; 255
    4dd2:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    4dd4:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    4dd6:	08 95       	ret

00004dd8 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    4dd8:	a8 95       	wdr
    4dda:	08 95       	ret

00004ddc <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    4ddc:	08 95       	ret

00004dde <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    4dde:	83 b7       	in	r24, 0x33	; 51
    4de0:	81 7f       	andi	r24, 0xF1	; 241
    4de2:	86 60       	ori	r24, 0x06	; 6
    4de4:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4de6:	83 b7       	in	r24, 0x33	; 51
    4de8:	81 60       	ori	r24, 0x01	; 1
    4dea:	83 bf       	out	0x33, r24	; 51
    4dec:	88 95       	sleep
    4dee:	83 b7       	in	r24, 0x33	; 51
    4df0:	8e 7f       	andi	r24, 0xFE	; 254
    4df2:	83 bf       	out	0x33, r24	; 51
    4df4:	08 95       	ret

00004df6 <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    4df6:	83 b7       	in	r24, 0x33	; 51
    4df8:	81 7f       	andi	r24, 0xF1	; 241
    4dfa:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    4dfc:	83 b7       	in	r24, 0x33	; 51
    4dfe:	81 60       	ori	r24, 0x01	; 1
    4e00:	83 bf       	out	0x33, r24	; 51
    4e02:	88 95       	sleep
    4e04:	83 b7       	in	r24, 0x33	; 51
    4e06:	8e 7f       	andi	r24, 0xFE	; 254
    4e08:	83 bf       	out	0x33, r24	; 51
    4e0a:	08 95       	ret

00004e0c <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    4e0c:	fc 01       	movw	r30, r24
    4e0e:	76 83       	std	Z+6, r23	; 0x06
    4e10:	65 83       	std	Z+5, r22	; 0x05
    4e12:	08 95       	ret

00004e14 <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    4e14:	ef 92       	push	r14
    4e16:	ff 92       	push	r15
    4e18:	0f 93       	push	r16
    4e1a:	1f 93       	push	r17
    4e1c:	cf 93       	push	r28
    4e1e:	df 93       	push	r29
    4e20:	8c 01       	movw	r16, r24
    4e22:	7b 01       	movw	r14, r22
    4e24:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    4e26:	40 32       	cpi	r20, 0x20	; 32
    4e28:	51 05       	cpc	r21, r1
    4e2a:	18 f4       	brcc	.+6      	; 0x4e32 <nrk_task_set_stk+0x1e>
    4e2c:	81 e1       	ldi	r24, 0x11	; 17
    4e2e:	0e 94 40 13 	call	0x2680	; 0x2680 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    4e32:	21 97       	sbiw	r28, 0x01	; 1
    4e34:	ce 0d       	add	r28, r14
    4e36:	df 1d       	adc	r29, r15
    4e38:	f8 01       	movw	r30, r16
    4e3a:	d2 83       	std	Z+2, r29	; 0x02
    4e3c:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    4e3e:	f4 82       	std	Z+4, r15	; 0x04
    4e40:	e3 82       	std	Z+3, r14	; 0x03

}
    4e42:	df 91       	pop	r29
    4e44:	cf 91       	pop	r28
    4e46:	1f 91       	pop	r17
    4e48:	0f 91       	pop	r16
    4e4a:	ff 90       	pop	r15
    4e4c:	ef 90       	pop	r14
    4e4e:	08 95       	ret

00004e50 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    4e50:	25 e5       	ldi	r18, 0x55	; 85
    4e52:	fa 01       	movw	r30, r20
    4e54:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    4e56:	fb 01       	movw	r30, r22
    4e58:	32 97       	sbiw	r30, 0x02	; 2
    4e5a:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    4e5c:	31 96       	adiw	r30, 0x01	; 1
    4e5e:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    4e60:	33 97       	sbiw	r30, 0x03	; 3
    4e62:	11 82       	std	Z+1, r1	; 0x01
    4e64:	10 82       	st	Z, r1
    *(--stk) = 0;       
    4e66:	32 97       	sbiw	r30, 0x02	; 2
    4e68:	11 82       	std	Z+1, r1	; 0x01
    4e6a:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    4e6c:	32 97       	sbiw	r30, 0x02	; 2
    4e6e:	11 82       	std	Z+1, r1	; 0x01
    4e70:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    4e72:	32 97       	sbiw	r30, 0x02	; 2
    4e74:	11 82       	std	Z+1, r1	; 0x01
    4e76:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    4e78:	32 97       	sbiw	r30, 0x02	; 2
    4e7a:	11 82       	std	Z+1, r1	; 0x01
    4e7c:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    4e7e:	32 97       	sbiw	r30, 0x02	; 2
    4e80:	11 82       	std	Z+1, r1	; 0x01
    4e82:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    4e84:	32 97       	sbiw	r30, 0x02	; 2
    4e86:	11 82       	std	Z+1, r1	; 0x01
    4e88:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4e8a:	32 97       	sbiw	r30, 0x02	; 2
    4e8c:	11 82       	std	Z+1, r1	; 0x01
    4e8e:	10 82       	st	Z, r1

    *(--stk) = 0; 
    4e90:	32 97       	sbiw	r30, 0x02	; 2
    4e92:	11 82       	std	Z+1, r1	; 0x01
    4e94:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4e96:	32 97       	sbiw	r30, 0x02	; 2
    4e98:	11 82       	std	Z+1, r1	; 0x01
    4e9a:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4e9c:	32 97       	sbiw	r30, 0x02	; 2
    4e9e:	11 82       	std	Z+1, r1	; 0x01
    4ea0:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4ea2:	32 97       	sbiw	r30, 0x02	; 2
    4ea4:	11 82       	std	Z+1, r1	; 0x01
    4ea6:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4ea8:	32 97       	sbiw	r30, 0x02	; 2
    4eaa:	11 82       	std	Z+1, r1	; 0x01
    4eac:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4eae:	32 97       	sbiw	r30, 0x02	; 2
    4eb0:	11 82       	std	Z+1, r1	; 0x01
    4eb2:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4eb4:	32 97       	sbiw	r30, 0x02	; 2
    4eb6:	11 82       	std	Z+1, r1	; 0x01
    4eb8:	10 82       	st	Z, r1
    *(--stk) = 0; 
    4eba:	32 97       	sbiw	r30, 0x02	; 2
    4ebc:	11 82       	std	Z+1, r1	; 0x01
    4ebe:	10 82       	st	Z, r1
    *(--stk) = 0;
    4ec0:	cb 01       	movw	r24, r22
    4ec2:	84 97       	sbiw	r24, 0x24	; 36
    4ec4:	fc 01       	movw	r30, r24
    4ec6:	11 82       	std	Z+1, r1	; 0x01
    4ec8:	10 82       	st	Z, r1


    return ((void *)stk);
}
    4eca:	08 95       	ret

00004ecc <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    4ecc:	85 e5       	ldi	r24, 0x55	; 85
    4ece:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    4ed2:	ee ef       	ldi	r30, 0xFE	; 254
    4ed4:	f1 e4       	ldi	r31, 0x41	; 65
    4ed6:	f0 93 7a 06 	sts	0x067A, r31
    4eda:	e0 93 79 06 	sts	0x0679, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4ede:	86 e9       	ldi	r24, 0x96	; 150
    4ee0:	92 e1       	ldi	r25, 0x12	; 18
    4ee2:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4ee4:	80 93 ff 41 	sts	0x41FF, r24
    4ee8:	08 95       	ret

00004eea <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    4eea:	86 e9       	ldi	r24, 0x96	; 150
    4eec:	92 e1       	ldi	r25, 0x12	; 18
    4eee:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    4ef2:	80 93 ff 41 	sts	0x41FF, r24
    4ef6:	08 95       	ret

00004ef8 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    4ef8:	0e 94 aa 23 	call	0x4754	; 0x4754 <_nrk_setup_timer>
  nrk_int_enable();  
    4efc:	0c 94 04 11 	jmp	0x2208	; 0x2208 <nrk_int_enable>

00004f00 <nrk_start_high_ready_task>:
    4f00:	a0 91 cc 07 	lds	r26, 0x07CC
    4f04:	b0 91 cd 07 	lds	r27, 0x07CD
    4f08:	cd 91       	ld	r28, X+
    4f0a:	cd bf       	out	0x3d, r28	; 61
    4f0c:	dd 91       	ld	r29, X+
    4f0e:	de bf       	out	0x3e, r29	; 62
    4f10:	ff 91       	pop	r31
    4f12:	ef 91       	pop	r30
    4f14:	df 91       	pop	r29
    4f16:	cf 91       	pop	r28
    4f18:	bf 91       	pop	r27
    4f1a:	af 91       	pop	r26
    4f1c:	9f 91       	pop	r25
    4f1e:	8f 91       	pop	r24
    4f20:	7f 91       	pop	r23
    4f22:	6f 91       	pop	r22
    4f24:	5f 91       	pop	r21
    4f26:	4f 91       	pop	r20
    4f28:	3f 91       	pop	r19
    4f2a:	2f 91       	pop	r18
    4f2c:	1f 91       	pop	r17
    4f2e:	0f 91       	pop	r16
    4f30:	ff 90       	pop	r15
    4f32:	ef 90       	pop	r14
    4f34:	df 90       	pop	r13
    4f36:	cf 90       	pop	r12
    4f38:	bf 90       	pop	r11
    4f3a:	af 90       	pop	r10
    4f3c:	9f 90       	pop	r9
    4f3e:	8f 90       	pop	r8
    4f40:	7f 90       	pop	r7
    4f42:	6f 90       	pop	r6
    4f44:	5f 90       	pop	r5
    4f46:	4f 90       	pop	r4
    4f48:	3f 90       	pop	r3
    4f4a:	2f 90       	pop	r2
    4f4c:	1f 90       	pop	r1
    4f4e:	0f 90       	pop	r0
    4f50:	0f be       	out	0x3f, r0	; 63
    4f52:	0f 90       	pop	r0
    4f54:	18 95       	reti

00004f56 <main>:

uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];


void main ()
{
    4f56:	cf 93       	push	r28
    4f58:	df 93       	push	r29
    4f5a:	cd b7       	in	r28, 0x3d	; 61
    4f5c:	de b7       	in	r29, 0x3e	; 62
    4f5e:	6a 97       	sbiw	r28, 0x1a	; 26
    4f60:	0f b6       	in	r0, 0x3f	; 63
    4f62:	f8 94       	cli
    4f64:	de bf       	out	0x3e, r29	; 62
    4f66:	0f be       	out	0x3f, r0	; 63
    4f68:	cd bf       	out	0x3d, r28	; 61
	nrk_setup_ports();
    4f6a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <nrk_setup_ports>
	nrk_setup_uart(UART_BAUDRATE_9K6);
    4f6e:	8f ec       	ldi	r24, 0xCF	; 207
    4f70:	90 e0       	ldi	r25, 0x00	; 0
    4f72:	0e 94 37 10 	call	0x206e	; 0x206e <nrk_setup_uart>
	
	nrk_init();
    4f76:	0e 94 09 11 	call	0x2212	; 0x2212 <nrk_init>
	
	printf("nrk starting...\r\n");
    4f7a:	8a e9       	ldi	r24, 0x9A	; 154
    4f7c:	92 e0       	ldi	r25, 0x02	; 2
    4f7e:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <puts>
	
	nrk_led_clr(0);
    4f82:	80 e0       	ldi	r24, 0x00	; 0
    4f84:	90 e0       	ldi	r25, 0x00	; 0
    4f86:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <nrk_led_clr>
	nrk_led_clr(1);
    4f8a:	81 e0       	ldi	r24, 0x01	; 1
    4f8c:	90 e0       	ldi	r25, 0x00	; 0
    4f8e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <nrk_led_clr>
	nrk_led_clr(2);
    4f92:	82 e0       	ldi	r24, 0x02	; 2
    4f94:	90 e0       	ldi	r25, 0x00	; 0
    4f96:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <nrk_led_clr>
	nrk_led_clr(3);
    4f9a:	83 e0       	ldi	r24, 0x03	; 3
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <nrk_led_clr>
	
	nrk_time_set(0, 0);
    4fa2:	20 e0       	ldi	r18, 0x00	; 0
    4fa4:	30 e0       	ldi	r19, 0x00	; 0
    4fa6:	a9 01       	movw	r20, r18
    4fa8:	60 e0       	ldi	r22, 0x00	; 0
    4faa:	70 e0       	ldi	r23, 0x00	; 0
    4fac:	cb 01       	movw	r24, r22
    4fae:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <nrk_time_set>
	flash_init(14);
    4fb2:	8e e0       	ldi	r24, 0x0E	; 14
    4fb4:	0e 94 a0 04 	call	0x940	; 0x940 <flash_init>
	flash_timer_setup();
    4fb8:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <flash_timer_setup>

	//nrk_create_taskset();
	//nrk_start();
	uint8_t sync_buf[16];
	sync_buf[0] = nodeID;
    4fbc:	80 91 32 04 	lds	r24, 0x0432
    4fc0:	89 83       	std	Y+1, r24	; 0x01
	printf("sending synchronization buffer\r\n");
    4fc2:	8b ea       	ldi	r24, 0xAB	; 171
    4fc4:	92 e0       	ldi	r25, 0x02	; 2
    4fc6:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <puts>
	uint32_t timestamp = (uint32_t)flash_get_current_time();
    4fca:	0e 94 02 05 	call	0xa04	; 0xa04 <flash_get_current_time>
    4fce:	c9 01       	movw	r24, r18
    4fd0:	ba 01       	movw	r22, r20
	*(uint32_t *)(sync_buf + 1) = timestamp;
    4fd2:	2a 83       	std	Y+2, r18	; 0x02
    4fd4:	9b 83       	std	Y+3, r25	; 0x03
    4fd6:	4c 83       	std	Y+4, r20	; 0x04
    4fd8:	7d 83       	std	Y+5, r23	; 0x05
		
	printf("transmitting packet [%d,%lu]\r\n", sync_buf[0], *(uint32_t *)(sync_buf + 1));
    4fda:	7f 93       	push	r23
    4fdc:	4f 93       	push	r20
    4fde:	9f 93       	push	r25
    4fe0:	2f 93       	push	r18
    4fe2:	89 81       	ldd	r24, Y+1	; 0x01
    4fe4:	1f 92       	push	r1
    4fe6:	8f 93       	push	r24
    4fe8:	8b ec       	ldi	r24, 0xCB	; 203
    4fea:	92 e0       	ldi	r25, 0x02	; 2
    4fec:	9f 93       	push	r25
    4fee:	8f 93       	push	r24
    4ff0:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <printf>
	printf("waiting to propagate flood\r\n");
    4ff4:	8a ee       	ldi	r24, 0xEA	; 234
    4ff6:	92 e0       	ldi	r25, 0x02	; 2
    4ff8:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <puts>
	
	flash_tx_pkt(sync_buf, 5);
    4ffc:	65 e0       	ldi	r22, 0x05	; 5
    4ffe:	ce 01       	movw	r24, r28
    5000:	01 96       	adiw	r24, 0x01	; 1
    5002:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <flash_tx_pkt>
	flash_set_retransmit(0);
    5006:	80 e0       	ldi	r24, 0x00	; 0
    5008:	0e 94 df 04 	call	0x9be	; 0x9be <flash_set_retransmit>

	uint64_t timeout = TDMA_SLOT_LEN;
    500c:	80 ed       	ldi	r24, 0xD0	; 208
    500e:	89 8b       	std	Y+17, r24	; 0x11
    5010:	87 e0       	ldi	r24, 0x07	; 7
    5012:	8a 8b       	std	Y+18, r24	; 0x12
    5014:	1b 8a       	std	Y+19, r1	; 0x13
    5016:	1c 8a       	std	Y+20, r1	; 0x14
    5018:	1d 8a       	std	Y+21, r1	; 0x15
    501a:	1e 8a       	std	Y+22, r1	; 0x16
    501c:	1f 8a       	std	Y+23, r1	; 0x17
    501e:	18 8e       	std	Y+24, r1	; 0x18
    5020:	0f b6       	in	r0, 0x3f	; 63
    5022:	f8 94       	cli
    5024:	de bf       	out	0x3e, r29	; 62
    5026:	0f be       	out	0x3f, r0	; 63
    5028:	cd bf       	out	0x3d, r28	; 61

	uint32_t num_sync_sent = 0;
	while(1){
		volatile int slot = ((flash_get_current_time()) / TDMA_SLOT_LEN) % NUM_NODES;
    502a:	0e 94 02 05 	call	0xa04	; 0xa04 <flash_get_current_time>
    502e:	e0 ed       	ldi	r30, 0xD0	; 208
    5030:	ae 2e       	mov	r10, r30
    5032:	f7 e0       	ldi	r31, 0x07	; 7
    5034:	bf 2e       	mov	r11, r31
    5036:	c1 2c       	mov	r12, r1
    5038:	d1 2c       	mov	r13, r1
    503a:	e1 2c       	mov	r14, r1
    503c:	f1 2c       	mov	r15, r1
    503e:	00 e0       	ldi	r16, 0x00	; 0
    5040:	10 e0       	ldi	r17, 0x00	; 0
    5042:	0e 94 e3 29 	call	0x53c6	; 0x53c6 <__udivdi3>
    5046:	aa e0       	ldi	r26, 0x0A	; 10
    5048:	aa 2e       	mov	r10, r26
    504a:	b1 2c       	mov	r11, r1
    504c:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <__umoddi3>
    5050:	3a 8f       	std	Y+26, r19	; 0x1a
    5052:	29 8f       	std	Y+25, r18	; 0x19
		//printf("slot = %d\r\n", slot);
		if (slot == 0){ //perform time sync
    5054:	89 8d       	ldd	r24, Y+25	; 0x19
    5056:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5058:	89 2b       	or	r24, r25
    505a:	59 f4       	brne	.+22     	; 0x5072 <main+0x11c>
			num_sync_sent ++;
			timestamp = (uint32_t)flash_get_current_time();
    505c:	0e 94 02 05 	call	0xa04	; 0xa04 <flash_get_current_time>
    5060:	2a 83       	std	Y+2, r18	; 0x02
    5062:	3b 83       	std	Y+3, r19	; 0x03
    5064:	4c 83       	std	Y+4, r20	; 0x04
    5066:	5d 83       	std	Y+5, r21	; 0x05
			*(uint32_t *)(sync_buf + 1) = timestamp;
			flash_tx_pkt(sync_buf, 5);
    5068:	65 e0       	ldi	r22, 0x05	; 5
    506a:	ce 01       	movw	r24, r28
    506c:	01 96       	adiw	r24, 0x01	; 1
    506e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <flash_tx_pkt>
		}
		//else*/
		if (slot != 0){
    5072:	89 8d       	ldd	r24, Y+25	; 0x19
    5074:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5076:	89 2b       	or	r24, r25
    5078:	c1 f2       	breq	.-80     	; 0x502a <main+0xd4>
			if (num_sync_sent > 0){
				//printf("sent %lu sync messages\r\n",num_sync_sent);
				num_sync_sent = 0;
			}
			flash_enable(10, &timeout, node_data_callback);
    507a:	4e e3       	ldi	r20, 0x3E	; 62
    507c:	52 e0       	ldi	r21, 0x02	; 2
    507e:	be 01       	movw	r22, r28
    5080:	6f 5e       	subi	r22, 0xEF	; 239
    5082:	7f 4f       	sbci	r23, 0xFF	; 255
    5084:	8a e0       	ldi	r24, 0x0A	; 10
    5086:	0e 94 c5 05 	call	0xb8a	; 0xb8a <flash_enable>
    508a:	cf cf       	rjmp	.-98     	; 0x502a <main+0xd4>

0000508c <vfprintf>:
    508c:	6f 92       	push	r6
    508e:	7f 92       	push	r7
    5090:	8f 92       	push	r8
    5092:	9f 92       	push	r9
    5094:	af 92       	push	r10
    5096:	bf 92       	push	r11
    5098:	cf 92       	push	r12
    509a:	df 92       	push	r13
    509c:	ef 92       	push	r14
    509e:	ff 92       	push	r15
    50a0:	0f 93       	push	r16
    50a2:	1f 93       	push	r17
    50a4:	cf 93       	push	r28
    50a6:	df 93       	push	r29
    50a8:	cd b7       	in	r28, 0x3d	; 61
    50aa:	de b7       	in	r29, 0x3e	; 62
    50ac:	2c 97       	sbiw	r28, 0x0c	; 12
    50ae:	0f b6       	in	r0, 0x3f	; 63
    50b0:	f8 94       	cli
    50b2:	de bf       	out	0x3e, r29	; 62
    50b4:	0f be       	out	0x3f, r0	; 63
    50b6:	cd bf       	out	0x3d, r28	; 61
    50b8:	6c 01       	movw	r12, r24
    50ba:	5b 01       	movw	r10, r22
    50bc:	7a 01       	movw	r14, r20
    50be:	fc 01       	movw	r30, r24
    50c0:	17 82       	std	Z+7, r1	; 0x07
    50c2:	16 82       	std	Z+6, r1	; 0x06
    50c4:	83 81       	ldd	r24, Z+3	; 0x03
    50c6:	81 ff       	sbrs	r24, 1
    50c8:	0e c1       	rjmp	.+540    	; 0x52e6 <vfprintf+0x25a>
    50ca:	ce 01       	movw	r24, r28
    50cc:	01 96       	adiw	r24, 0x01	; 1
    50ce:	4c 01       	movw	r8, r24
    50d0:	f6 01       	movw	r30, r12
    50d2:	03 81       	ldd	r16, Z+3	; 0x03
    50d4:	f5 01       	movw	r30, r10
    50d6:	03 fd       	sbrc	r16, 3
    50d8:	15 91       	lpm	r17, Z+
    50da:	03 ff       	sbrs	r16, 3
    50dc:	11 91       	ld	r17, Z+
    50de:	5f 01       	movw	r10, r30
    50e0:	11 23       	and	r17, r17
    50e2:	09 f4       	brne	.+2      	; 0x50e6 <vfprintf+0x5a>
    50e4:	fc c0       	rjmp	.+504    	; 0x52de <vfprintf+0x252>
    50e6:	15 32       	cpi	r17, 0x25	; 37
    50e8:	49 f4       	brne	.+18     	; 0x50fc <vfprintf+0x70>
    50ea:	03 fd       	sbrc	r16, 3
    50ec:	15 91       	lpm	r17, Z+
    50ee:	03 ff       	sbrs	r16, 3
    50f0:	11 91       	ld	r17, Z+
    50f2:	5f 01       	movw	r10, r30
    50f4:	15 32       	cpi	r17, 0x25	; 37
    50f6:	11 f0       	breq	.+4      	; 0x50fc <vfprintf+0x70>
    50f8:	20 e0       	ldi	r18, 0x00	; 0
    50fa:	1b c0       	rjmp	.+54     	; 0x5132 <vfprintf+0xa6>
    50fc:	b6 01       	movw	r22, r12
    50fe:	81 2f       	mov	r24, r17
    5100:	90 e0       	ldi	r25, 0x00	; 0
    5102:	0e 94 2b 2b 	call	0x5656	; 0x5656 <fputc>
    5106:	37 01       	movw	r6, r14
    5108:	73 01       	movw	r14, r6
    510a:	e2 cf       	rjmp	.-60     	; 0x50d0 <vfprintf+0x44>
    510c:	11 23       	and	r17, r17
    510e:	09 f4       	brne	.+2      	; 0x5112 <vfprintf+0x86>
    5110:	e6 c0       	rjmp	.+460    	; 0x52de <vfprintf+0x252>
    5112:	61 2f       	mov	r22, r17
    5114:	70 e0       	ldi	r23, 0x00	; 0
    5116:	8a e2       	ldi	r24, 0x2A	; 42
    5118:	94 e0       	ldi	r25, 0x04	; 4
    511a:	2c 87       	std	Y+12, r18	; 0x0c
    511c:	0e 94 be 2a 	call	0x557c	; 0x557c <strchr_P>
    5120:	2c 85       	ldd	r18, Y+12	; 0x0c
    5122:	89 2b       	or	r24, r25
    5124:	49 f0       	breq	.+18     	; 0x5138 <vfprintf+0xac>
    5126:	f5 01       	movw	r30, r10
    5128:	03 fd       	sbrc	r16, 3
    512a:	15 91       	lpm	r17, Z+
    512c:	03 ff       	sbrs	r16, 3
    512e:	11 91       	ld	r17, Z+
    5130:	5f 01       	movw	r10, r30
    5132:	27 ff       	sbrs	r18, 7
    5134:	eb cf       	rjmp	.-42     	; 0x510c <vfprintf+0x80>
    5136:	09 c0       	rjmp	.+18     	; 0x514a <vfprintf+0xbe>
    5138:	13 32       	cpi	r17, 0x23	; 35
    513a:	29 f0       	breq	.+10     	; 0x5146 <vfprintf+0xba>
    513c:	1c 36       	cpi	r17, 0x6C	; 108
    513e:	09 f0       	breq	.+2      	; 0x5142 <vfprintf+0xb6>
    5140:	d5 c0       	rjmp	.+426    	; 0x52ec <vfprintf+0x260>
    5142:	20 68       	ori	r18, 0x80	; 128
    5144:	f0 cf       	rjmp	.-32     	; 0x5126 <vfprintf+0x9a>
    5146:	20 e1       	ldi	r18, 0x10	; 16
    5148:	ee cf       	rjmp	.-36     	; 0x5126 <vfprintf+0x9a>
    514a:	02 2f       	mov	r16, r18
    514c:	11 23       	and	r17, r17
    514e:	09 f4       	brne	.+2      	; 0x5152 <vfprintf+0xc6>
    5150:	c6 c0       	rjmp	.+396    	; 0x52de <vfprintf+0x252>
    5152:	61 2f       	mov	r22, r17
    5154:	70 e0       	ldi	r23, 0x00	; 0
    5156:	83 e2       	ldi	r24, 0x23	; 35
    5158:	94 e0       	ldi	r25, 0x04	; 4
    515a:	2c 87       	std	Y+12, r18	; 0x0c
    515c:	0e 94 be 2a 	call	0x557c	; 0x557c <strchr_P>
    5160:	2c 85       	ldd	r18, Y+12	; 0x0c
    5162:	89 2b       	or	r24, r25
    5164:	41 f0       	breq	.+16     	; 0x5176 <vfprintf+0xea>
    5166:	37 01       	movw	r6, r14
    5168:	f4 e0       	ldi	r31, 0x04	; 4
    516a:	6f 0e       	add	r6, r31
    516c:	71 1c       	adc	r7, r1
    516e:	b6 01       	movw	r22, r12
    5170:	8f e3       	ldi	r24, 0x3F	; 63
    5172:	90 e0       	ldi	r25, 0x00	; 0
    5174:	11 c0       	rjmp	.+34     	; 0x5198 <vfprintf+0x10c>
    5176:	13 36       	cpi	r17, 0x63	; 99
    5178:	39 f0       	breq	.+14     	; 0x5188 <vfprintf+0xfc>
    517a:	13 37       	cpi	r17, 0x73	; 115
    517c:	81 f0       	breq	.+32     	; 0x519e <vfprintf+0x112>
    517e:	13 35       	cpi	r17, 0x53	; 83
    5180:	19 f5       	brne	.+70     	; 0x51c8 <vfprintf+0x13c>
    5182:	02 2f       	mov	r16, r18
    5184:	01 60       	ori	r16, 0x01	; 1
    5186:	0b c0       	rjmp	.+22     	; 0x519e <vfprintf+0x112>
    5188:	37 01       	movw	r6, r14
    518a:	82 e0       	ldi	r24, 0x02	; 2
    518c:	68 0e       	add	r6, r24
    518e:	71 1c       	adc	r7, r1
    5190:	b6 01       	movw	r22, r12
    5192:	f7 01       	movw	r30, r14
    5194:	80 81       	ld	r24, Z
    5196:	91 81       	ldd	r25, Z+1	; 0x01
    5198:	0e 94 2b 2b 	call	0x5656	; 0x5656 <fputc>
    519c:	b5 cf       	rjmp	.-150    	; 0x5108 <vfprintf+0x7c>
    519e:	37 01       	movw	r6, r14
    51a0:	f2 e0       	ldi	r31, 0x02	; 2
    51a2:	6f 0e       	add	r6, r31
    51a4:	71 1c       	adc	r7, r1
    51a6:	f7 01       	movw	r30, r14
    51a8:	e0 80       	ld	r14, Z
    51aa:	f1 80       	ldd	r15, Z+1	; 0x01
    51ac:	f7 01       	movw	r30, r14
    51ae:	00 fd       	sbrc	r16, 0
    51b0:	85 91       	lpm	r24, Z+
    51b2:	00 ff       	sbrs	r16, 0
    51b4:	81 91       	ld	r24, Z+
    51b6:	7f 01       	movw	r14, r30
    51b8:	88 23       	and	r24, r24
    51ba:	09 f4       	brne	.+2      	; 0x51be <vfprintf+0x132>
    51bc:	a5 cf       	rjmp	.-182    	; 0x5108 <vfprintf+0x7c>
    51be:	b6 01       	movw	r22, r12
    51c0:	90 e0       	ldi	r25, 0x00	; 0
    51c2:	0e 94 2b 2b 	call	0x5656	; 0x5656 <fputc>
    51c6:	f2 cf       	rjmp	.-28     	; 0x51ac <vfprintf+0x120>
    51c8:	14 36       	cpi	r17, 0x64	; 100
    51ca:	11 f0       	breq	.+4      	; 0x51d0 <vfprintf+0x144>
    51cc:	19 36       	cpi	r17, 0x69	; 105
    51ce:	29 f5       	brne	.+74     	; 0x521a <vfprintf+0x18e>
    51d0:	37 01       	movw	r6, r14
    51d2:	27 ff       	sbrs	r18, 7
    51d4:	09 c0       	rjmp	.+18     	; 0x51e8 <vfprintf+0x15c>
    51d6:	f4 e0       	ldi	r31, 0x04	; 4
    51d8:	6f 0e       	add	r6, r31
    51da:	71 1c       	adc	r7, r1
    51dc:	f7 01       	movw	r30, r14
    51de:	60 81       	ld	r22, Z
    51e0:	71 81       	ldd	r23, Z+1	; 0x01
    51e2:	82 81       	ldd	r24, Z+2	; 0x02
    51e4:	93 81       	ldd	r25, Z+3	; 0x03
    51e6:	0a c0       	rjmp	.+20     	; 0x51fc <vfprintf+0x170>
    51e8:	f2 e0       	ldi	r31, 0x02	; 2
    51ea:	6f 0e       	add	r6, r31
    51ec:	71 1c       	adc	r7, r1
    51ee:	f7 01       	movw	r30, r14
    51f0:	60 81       	ld	r22, Z
    51f2:	71 81       	ldd	r23, Z+1	; 0x01
    51f4:	88 27       	eor	r24, r24
    51f6:	77 fd       	sbrc	r23, 7
    51f8:	80 95       	com	r24
    51fa:	98 2f       	mov	r25, r24
    51fc:	02 2f       	mov	r16, r18
    51fe:	0f 7e       	andi	r16, 0xEF	; 239
    5200:	97 ff       	sbrs	r25, 7
    5202:	08 c0       	rjmp	.+16     	; 0x5214 <vfprintf+0x188>
    5204:	90 95       	com	r25
    5206:	80 95       	com	r24
    5208:	70 95       	com	r23
    520a:	61 95       	neg	r22
    520c:	7f 4f       	sbci	r23, 0xFF	; 255
    520e:	8f 4f       	sbci	r24, 0xFF	; 255
    5210:	9f 4f       	sbci	r25, 0xFF	; 255
    5212:	00 64       	ori	r16, 0x40	; 64
    5214:	2a e0       	ldi	r18, 0x0A	; 10
    5216:	30 e0       	ldi	r19, 0x00	; 0
    5218:	33 c0       	rjmp	.+102    	; 0x5280 <vfprintf+0x1f4>
    521a:	10 37       	cpi	r17, 0x70	; 112
    521c:	99 f0       	breq	.+38     	; 0x5244 <vfprintf+0x1b8>
    521e:	40 f4       	brcc	.+16     	; 0x5230 <vfprintf+0x1a4>
    5220:	18 35       	cpi	r17, 0x58	; 88
    5222:	b1 f0       	breq	.+44     	; 0x5250 <vfprintf+0x1c4>
    5224:	1f 36       	cpi	r17, 0x6F	; 111
    5226:	09 f0       	breq	.+2      	; 0x522a <vfprintf+0x19e>
    5228:	5a c0       	rjmp	.+180    	; 0x52de <vfprintf+0x252>
    522a:	28 e0       	ldi	r18, 0x08	; 8
    522c:	30 e0       	ldi	r19, 0x00	; 0
    522e:	14 c0       	rjmp	.+40     	; 0x5258 <vfprintf+0x1cc>
    5230:	15 37       	cpi	r17, 0x75	; 117
    5232:	19 f0       	breq	.+6      	; 0x523a <vfprintf+0x1ae>
    5234:	18 37       	cpi	r17, 0x78	; 120
    5236:	41 f0       	breq	.+16     	; 0x5248 <vfprintf+0x1bc>
    5238:	52 c0       	rjmp	.+164    	; 0x52de <vfprintf+0x252>
    523a:	02 2f       	mov	r16, r18
    523c:	0f 7e       	andi	r16, 0xEF	; 239
    523e:	2a e0       	ldi	r18, 0x0A	; 10
    5240:	30 e0       	ldi	r19, 0x00	; 0
    5242:	0a c0       	rjmp	.+20     	; 0x5258 <vfprintf+0x1cc>
    5244:	02 2f       	mov	r16, r18
    5246:	00 61       	ori	r16, 0x10	; 16
    5248:	04 62       	ori	r16, 0x24	; 36
    524a:	20 e1       	ldi	r18, 0x10	; 16
    524c:	30 e0       	ldi	r19, 0x00	; 0
    524e:	04 c0       	rjmp	.+8      	; 0x5258 <vfprintf+0x1cc>
    5250:	02 2f       	mov	r16, r18
    5252:	04 60       	ori	r16, 0x04	; 4
    5254:	20 e1       	ldi	r18, 0x10	; 16
    5256:	32 e0       	ldi	r19, 0x02	; 2
    5258:	37 01       	movw	r6, r14
    525a:	07 ff       	sbrs	r16, 7
    525c:	09 c0       	rjmp	.+18     	; 0x5270 <vfprintf+0x1e4>
    525e:	f4 e0       	ldi	r31, 0x04	; 4
    5260:	6f 0e       	add	r6, r31
    5262:	71 1c       	adc	r7, r1
    5264:	f7 01       	movw	r30, r14
    5266:	60 81       	ld	r22, Z
    5268:	71 81       	ldd	r23, Z+1	; 0x01
    526a:	82 81       	ldd	r24, Z+2	; 0x02
    526c:	93 81       	ldd	r25, Z+3	; 0x03
    526e:	08 c0       	rjmp	.+16     	; 0x5280 <vfprintf+0x1f4>
    5270:	f2 e0       	ldi	r31, 0x02	; 2
    5272:	6f 0e       	add	r6, r31
    5274:	71 1c       	adc	r7, r1
    5276:	f7 01       	movw	r30, r14
    5278:	60 81       	ld	r22, Z
    527a:	71 81       	ldd	r23, Z+1	; 0x01
    527c:	80 e0       	ldi	r24, 0x00	; 0
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	a4 01       	movw	r20, r8
    5282:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <__ultoa_invert>
    5286:	18 2f       	mov	r17, r24
    5288:	18 19       	sub	r17, r8
    528a:	06 ff       	sbrs	r16, 6
    528c:	05 c0       	rjmp	.+10     	; 0x5298 <vfprintf+0x20c>
    528e:	b6 01       	movw	r22, r12
    5290:	8d e2       	ldi	r24, 0x2D	; 45
    5292:	90 e0       	ldi	r25, 0x00	; 0
    5294:	0e 94 2b 2b 	call	0x5656	; 0x5656 <fputc>
    5298:	04 ff       	sbrs	r16, 4
    529a:	15 c0       	rjmp	.+42     	; 0x52c6 <vfprintf+0x23a>
    529c:	fe 01       	movw	r30, r28
    529e:	e1 0f       	add	r30, r17
    52a0:	f1 1d       	adc	r31, r1
    52a2:	80 81       	ld	r24, Z
    52a4:	80 33       	cpi	r24, 0x30	; 48
    52a6:	79 f0       	breq	.+30     	; 0x52c6 <vfprintf+0x23a>
    52a8:	b6 01       	movw	r22, r12
    52aa:	80 e3       	ldi	r24, 0x30	; 48
    52ac:	90 e0       	ldi	r25, 0x00	; 0
    52ae:	0e 94 2b 2b 	call	0x5656	; 0x5656 <fputc>
    52b2:	02 ff       	sbrs	r16, 2
    52b4:	08 c0       	rjmp	.+16     	; 0x52c6 <vfprintf+0x23a>
    52b6:	00 72       	andi	r16, 0x20	; 32
    52b8:	80 2f       	mov	r24, r16
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	b6 01       	movw	r22, r12
    52be:	88 5a       	subi	r24, 0xA8	; 168
    52c0:	9f 4f       	sbci	r25, 0xFF	; 255
    52c2:	0e 94 2b 2b 	call	0x5656	; 0x5656 <fputc>
    52c6:	11 50       	subi	r17, 0x01	; 1
    52c8:	f4 01       	movw	r30, r8
    52ca:	e1 0f       	add	r30, r17
    52cc:	f1 1d       	adc	r31, r1
    52ce:	80 81       	ld	r24, Z
    52d0:	b6 01       	movw	r22, r12
    52d2:	90 e0       	ldi	r25, 0x00	; 0
    52d4:	0e 94 2b 2b 	call	0x5656	; 0x5656 <fputc>
    52d8:	11 11       	cpse	r17, r1
    52da:	f5 cf       	rjmp	.-22     	; 0x52c6 <vfprintf+0x23a>
    52dc:	15 cf       	rjmp	.-470    	; 0x5108 <vfprintf+0x7c>
    52de:	f6 01       	movw	r30, r12
    52e0:	86 81       	ldd	r24, Z+6	; 0x06
    52e2:	97 81       	ldd	r25, Z+7	; 0x07
    52e4:	05 c0       	rjmp	.+10     	; 0x52f0 <vfprintf+0x264>
    52e6:	8f ef       	ldi	r24, 0xFF	; 255
    52e8:	9f ef       	ldi	r25, 0xFF	; 255
    52ea:	02 c0       	rjmp	.+4      	; 0x52f0 <vfprintf+0x264>
    52ec:	02 2f       	mov	r16, r18
    52ee:	31 cf       	rjmp	.-414    	; 0x5152 <vfprintf+0xc6>
    52f0:	2c 96       	adiw	r28, 0x0c	; 12
    52f2:	0f b6       	in	r0, 0x3f	; 63
    52f4:	f8 94       	cli
    52f6:	de bf       	out	0x3e, r29	; 62
    52f8:	0f be       	out	0x3f, r0	; 63
    52fa:	cd bf       	out	0x3d, r28	; 61
    52fc:	df 91       	pop	r29
    52fe:	cf 91       	pop	r28
    5300:	1f 91       	pop	r17
    5302:	0f 91       	pop	r16
    5304:	ff 90       	pop	r15
    5306:	ef 90       	pop	r14
    5308:	df 90       	pop	r13
    530a:	cf 90       	pop	r12
    530c:	bf 90       	pop	r11
    530e:	af 90       	pop	r10
    5310:	9f 90       	pop	r9
    5312:	8f 90       	pop	r8
    5314:	7f 90       	pop	r7
    5316:	6f 90       	pop	r6
    5318:	08 95       	ret

0000531a <__muluhisi3>:
    531a:	0e 94 af 2a 	call	0x555e	; 0x555e <__umulhisi3>
    531e:	a5 9f       	mul	r26, r21
    5320:	90 0d       	add	r25, r0
    5322:	b4 9f       	mul	r27, r20
    5324:	90 0d       	add	r25, r0
    5326:	a4 9f       	mul	r26, r20
    5328:	80 0d       	add	r24, r0
    532a:	91 1d       	adc	r25, r1
    532c:	11 24       	eor	r1, r1
    532e:	08 95       	ret

00005330 <__mulsi3>:
    5330:	db 01       	movw	r26, r22
    5332:	8f 93       	push	r24
    5334:	9f 93       	push	r25
    5336:	0e 94 8d 29 	call	0x531a	; 0x531a <__muluhisi3>
    533a:	bf 91       	pop	r27
    533c:	af 91       	pop	r26
    533e:	a2 9f       	mul	r26, r18
    5340:	80 0d       	add	r24, r0
    5342:	91 1d       	adc	r25, r1
    5344:	a3 9f       	mul	r26, r19
    5346:	90 0d       	add	r25, r0
    5348:	b2 9f       	mul	r27, r18
    534a:	90 0d       	add	r25, r0
    534c:	11 24       	eor	r1, r1
    534e:	08 95       	ret

00005350 <__udivmodsi4>:
    5350:	a1 e2       	ldi	r26, 0x21	; 33
    5352:	1a 2e       	mov	r1, r26
    5354:	aa 1b       	sub	r26, r26
    5356:	bb 1b       	sub	r27, r27
    5358:	fd 01       	movw	r30, r26
    535a:	0d c0       	rjmp	.+26     	; 0x5376 <__udivmodsi4_ep>

0000535c <__udivmodsi4_loop>:
    535c:	aa 1f       	adc	r26, r26
    535e:	bb 1f       	adc	r27, r27
    5360:	ee 1f       	adc	r30, r30
    5362:	ff 1f       	adc	r31, r31
    5364:	a2 17       	cp	r26, r18
    5366:	b3 07       	cpc	r27, r19
    5368:	e4 07       	cpc	r30, r20
    536a:	f5 07       	cpc	r31, r21
    536c:	20 f0       	brcs	.+8      	; 0x5376 <__udivmodsi4_ep>
    536e:	a2 1b       	sub	r26, r18
    5370:	b3 0b       	sbc	r27, r19
    5372:	e4 0b       	sbc	r30, r20
    5374:	f5 0b       	sbc	r31, r21

00005376 <__udivmodsi4_ep>:
    5376:	66 1f       	adc	r22, r22
    5378:	77 1f       	adc	r23, r23
    537a:	88 1f       	adc	r24, r24
    537c:	99 1f       	adc	r25, r25
    537e:	1a 94       	dec	r1
    5380:	69 f7       	brne	.-38     	; 0x535c <__udivmodsi4_loop>
    5382:	60 95       	com	r22
    5384:	70 95       	com	r23
    5386:	80 95       	com	r24
    5388:	90 95       	com	r25
    538a:	9b 01       	movw	r18, r22
    538c:	ac 01       	movw	r20, r24
    538e:	bd 01       	movw	r22, r26
    5390:	cf 01       	movw	r24, r30
    5392:	08 95       	ret

00005394 <__divmodsi4>:
    5394:	05 2e       	mov	r0, r21
    5396:	97 fb       	bst	r25, 7
    5398:	1e f4       	brtc	.+6      	; 0x53a0 <__divmodsi4+0xc>
    539a:	00 94       	com	r0
    539c:	0e 94 40 2a 	call	0x5480	; 0x5480 <__negsi2>
    53a0:	57 fd       	sbrc	r21, 7
    53a2:	07 d0       	rcall	.+14     	; 0x53b2 <__divmodsi4_neg2>
    53a4:	0e 94 a8 29 	call	0x5350	; 0x5350 <__udivmodsi4>
    53a8:	07 fc       	sbrc	r0, 7
    53aa:	03 d0       	rcall	.+6      	; 0x53b2 <__divmodsi4_neg2>
    53ac:	4e f4       	brtc	.+18     	; 0x53c0 <__divmodsi4_exit>
    53ae:	0c 94 40 2a 	jmp	0x5480	; 0x5480 <__negsi2>

000053b2 <__divmodsi4_neg2>:
    53b2:	50 95       	com	r21
    53b4:	40 95       	com	r20
    53b6:	30 95       	com	r19
    53b8:	21 95       	neg	r18
    53ba:	3f 4f       	sbci	r19, 0xFF	; 255
    53bc:	4f 4f       	sbci	r20, 0xFF	; 255
    53be:	5f 4f       	sbci	r21, 0xFF	; 255

000053c0 <__divmodsi4_exit>:
    53c0:	08 95       	ret

000053c2 <__umoddi3>:
    53c2:	68 94       	set
    53c4:	01 c0       	rjmp	.+2      	; 0x53c8 <__udivdi3_umoddi3>

000053c6 <__udivdi3>:
    53c6:	e8 94       	clt

000053c8 <__udivdi3_umoddi3>:
    53c8:	8f 92       	push	r8
    53ca:	9f 92       	push	r9
    53cc:	cf 93       	push	r28
    53ce:	df 93       	push	r29
    53d0:	0e 94 ef 29 	call	0x53de	; 0x53de <__udivmod64>
    53d4:	df 91       	pop	r29
    53d6:	cf 91       	pop	r28
    53d8:	9f 90       	pop	r9
    53da:	8f 90       	pop	r8
    53dc:	08 95       	ret

000053de <__udivmod64>:
    53de:	88 24       	eor	r8, r8
    53e0:	99 24       	eor	r9, r9
    53e2:	f4 01       	movw	r30, r8
    53e4:	e4 01       	movw	r28, r8
    53e6:	b0 e4       	ldi	r27, 0x40	; 64
    53e8:	9f 93       	push	r25
    53ea:	aa 27       	eor	r26, r26
    53ec:	9a 15       	cp	r25, r10
    53ee:	8b 04       	cpc	r8, r11
    53f0:	9c 04       	cpc	r9, r12
    53f2:	ed 05       	cpc	r30, r13
    53f4:	fe 05       	cpc	r31, r14
    53f6:	cf 05       	cpc	r28, r15
    53f8:	d0 07       	cpc	r29, r16
    53fa:	a1 07       	cpc	r26, r17
    53fc:	98 f4       	brcc	.+38     	; 0x5424 <__udivmod64+0x46>
    53fe:	ad 2f       	mov	r26, r29
    5400:	dc 2f       	mov	r29, r28
    5402:	cf 2f       	mov	r28, r31
    5404:	fe 2f       	mov	r31, r30
    5406:	e9 2d       	mov	r30, r9
    5408:	98 2c       	mov	r9, r8
    540a:	89 2e       	mov	r8, r25
    540c:	98 2f       	mov	r25, r24
    540e:	87 2f       	mov	r24, r23
    5410:	76 2f       	mov	r23, r22
    5412:	65 2f       	mov	r22, r21
    5414:	54 2f       	mov	r21, r20
    5416:	43 2f       	mov	r20, r19
    5418:	32 2f       	mov	r19, r18
    541a:	22 27       	eor	r18, r18
    541c:	b8 50       	subi	r27, 0x08	; 8
    541e:	31 f7       	brne	.-52     	; 0x53ec <__udivmod64+0xe>
    5420:	bf 91       	pop	r27
    5422:	27 c0       	rjmp	.+78     	; 0x5472 <__udivmod64+0x94>
    5424:	1b 2e       	mov	r1, r27
    5426:	bf 91       	pop	r27
    5428:	bb 27       	eor	r27, r27
    542a:	22 0f       	add	r18, r18
    542c:	33 1f       	adc	r19, r19
    542e:	44 1f       	adc	r20, r20
    5430:	55 1f       	adc	r21, r21
    5432:	66 1f       	adc	r22, r22
    5434:	77 1f       	adc	r23, r23
    5436:	88 1f       	adc	r24, r24
    5438:	99 1f       	adc	r25, r25
    543a:	88 1c       	adc	r8, r8
    543c:	99 1c       	adc	r9, r9
    543e:	ee 1f       	adc	r30, r30
    5440:	ff 1f       	adc	r31, r31
    5442:	cc 1f       	adc	r28, r28
    5444:	dd 1f       	adc	r29, r29
    5446:	aa 1f       	adc	r26, r26
    5448:	bb 1f       	adc	r27, r27
    544a:	8a 14       	cp	r8, r10
    544c:	9b 04       	cpc	r9, r11
    544e:	ec 05       	cpc	r30, r12
    5450:	fd 05       	cpc	r31, r13
    5452:	ce 05       	cpc	r28, r14
    5454:	df 05       	cpc	r29, r15
    5456:	a0 07       	cpc	r26, r16
    5458:	b1 07       	cpc	r27, r17
    545a:	48 f0       	brcs	.+18     	; 0x546e <__udivmod64+0x90>
    545c:	8a 18       	sub	r8, r10
    545e:	9b 08       	sbc	r9, r11
    5460:	ec 09       	sbc	r30, r12
    5462:	fd 09       	sbc	r31, r13
    5464:	ce 09       	sbc	r28, r14
    5466:	df 09       	sbc	r29, r15
    5468:	a0 0b       	sbc	r26, r16
    546a:	b1 0b       	sbc	r27, r17
    546c:	21 60       	ori	r18, 0x01	; 1
    546e:	1a 94       	dec	r1
    5470:	e1 f6       	brne	.-72     	; 0x542a <__udivmod64+0x4c>
    5472:	2e f4       	brtc	.+10     	; 0x547e <__udivmod64+0xa0>
    5474:	94 01       	movw	r18, r8
    5476:	af 01       	movw	r20, r30
    5478:	be 01       	movw	r22, r28
    547a:	cd 01       	movw	r24, r26
    547c:	00 0c       	add	r0, r0
    547e:	08 95       	ret

00005480 <__negsi2>:
    5480:	90 95       	com	r25
    5482:	80 95       	com	r24
    5484:	70 95       	com	r23
    5486:	61 95       	neg	r22
    5488:	7f 4f       	sbci	r23, 0xFF	; 255
    548a:	8f 4f       	sbci	r24, 0xFF	; 255
    548c:	9f 4f       	sbci	r25, 0xFF	; 255
    548e:	08 95       	ret

00005490 <__tablejump2__>:
    5490:	ee 0f       	add	r30, r30
    5492:	ff 1f       	adc	r31, r31
    5494:	00 24       	eor	r0, r0
    5496:	00 1c       	adc	r0, r0
    5498:	0b be       	out	0x3b, r0	; 59
    549a:	07 90       	elpm	r0, Z+
    549c:	f6 91       	elpm	r31, Z
    549e:	e0 2d       	mov	r30, r0
    54a0:	09 94       	ijmp

000054a2 <__ashldi3>:
    54a2:	0f 93       	push	r16
    54a4:	08 30       	cpi	r16, 0x08	; 8
    54a6:	90 f0       	brcs	.+36     	; 0x54cc <__ashldi3+0x2a>
    54a8:	98 2f       	mov	r25, r24
    54aa:	87 2f       	mov	r24, r23
    54ac:	76 2f       	mov	r23, r22
    54ae:	65 2f       	mov	r22, r21
    54b0:	54 2f       	mov	r21, r20
    54b2:	43 2f       	mov	r20, r19
    54b4:	32 2f       	mov	r19, r18
    54b6:	22 27       	eor	r18, r18
    54b8:	08 50       	subi	r16, 0x08	; 8
    54ba:	f4 cf       	rjmp	.-24     	; 0x54a4 <__ashldi3+0x2>
    54bc:	22 0f       	add	r18, r18
    54be:	33 1f       	adc	r19, r19
    54c0:	44 1f       	adc	r20, r20
    54c2:	55 1f       	adc	r21, r21
    54c4:	66 1f       	adc	r22, r22
    54c6:	77 1f       	adc	r23, r23
    54c8:	88 1f       	adc	r24, r24
    54ca:	99 1f       	adc	r25, r25
    54cc:	0a 95       	dec	r16
    54ce:	b2 f7       	brpl	.-20     	; 0x54bc <__ashldi3+0x1a>
    54d0:	0f 91       	pop	r16
    54d2:	08 95       	ret

000054d4 <__ashrdi3>:
    54d4:	97 fb       	bst	r25, 7
    54d6:	10 f8       	bld	r1, 0

000054d8 <__lshrdi3>:
    54d8:	16 94       	lsr	r1
    54da:	00 08       	sbc	r0, r0
    54dc:	0f 93       	push	r16
    54de:	08 30       	cpi	r16, 0x08	; 8
    54e0:	98 f0       	brcs	.+38     	; 0x5508 <__lshrdi3+0x30>
    54e2:	08 50       	subi	r16, 0x08	; 8
    54e4:	23 2f       	mov	r18, r19
    54e6:	34 2f       	mov	r19, r20
    54e8:	45 2f       	mov	r20, r21
    54ea:	56 2f       	mov	r21, r22
    54ec:	67 2f       	mov	r22, r23
    54ee:	78 2f       	mov	r23, r24
    54f0:	89 2f       	mov	r24, r25
    54f2:	90 2d       	mov	r25, r0
    54f4:	f4 cf       	rjmp	.-24     	; 0x54de <__lshrdi3+0x6>
    54f6:	05 94       	asr	r0
    54f8:	97 95       	ror	r25
    54fa:	87 95       	ror	r24
    54fc:	77 95       	ror	r23
    54fe:	67 95       	ror	r22
    5500:	57 95       	ror	r21
    5502:	47 95       	ror	r20
    5504:	37 95       	ror	r19
    5506:	27 95       	ror	r18
    5508:	0a 95       	dec	r16
    550a:	aa f7       	brpl	.-22     	; 0x54f6 <__lshrdi3+0x1e>
    550c:	0f 91       	pop	r16
    550e:	08 95       	ret

00005510 <__adddi3>:
    5510:	2a 0d       	add	r18, r10
    5512:	3b 1d       	adc	r19, r11
    5514:	4c 1d       	adc	r20, r12
    5516:	5d 1d       	adc	r21, r13
    5518:	6e 1d       	adc	r22, r14
    551a:	7f 1d       	adc	r23, r15
    551c:	80 1f       	adc	r24, r16
    551e:	91 1f       	adc	r25, r17
    5520:	08 95       	ret

00005522 <__adddi3_s8>:
    5522:	00 24       	eor	r0, r0
    5524:	a7 fd       	sbrc	r26, 7
    5526:	00 94       	com	r0
    5528:	2a 0f       	add	r18, r26
    552a:	30 1d       	adc	r19, r0
    552c:	40 1d       	adc	r20, r0
    552e:	50 1d       	adc	r21, r0
    5530:	60 1d       	adc	r22, r0
    5532:	70 1d       	adc	r23, r0
    5534:	80 1d       	adc	r24, r0
    5536:	90 1d       	adc	r25, r0
    5538:	08 95       	ret

0000553a <__subdi3>:
    553a:	2a 19       	sub	r18, r10
    553c:	3b 09       	sbc	r19, r11
    553e:	4c 09       	sbc	r20, r12
    5540:	5d 09       	sbc	r21, r13
    5542:	6e 09       	sbc	r22, r14
    5544:	7f 09       	sbc	r23, r15
    5546:	80 0b       	sbc	r24, r16
    5548:	91 0b       	sbc	r25, r17
    554a:	08 95       	ret

0000554c <__cmpdi2>:
    554c:	2a 15       	cp	r18, r10
    554e:	3b 05       	cpc	r19, r11
    5550:	4c 05       	cpc	r20, r12
    5552:	5d 05       	cpc	r21, r13
    5554:	6e 05       	cpc	r22, r14
    5556:	7f 05       	cpc	r23, r15
    5558:	80 07       	cpc	r24, r16
    555a:	91 07       	cpc	r25, r17
    555c:	08 95       	ret

0000555e <__umulhisi3>:
    555e:	a2 9f       	mul	r26, r18
    5560:	b0 01       	movw	r22, r0
    5562:	b3 9f       	mul	r27, r19
    5564:	c0 01       	movw	r24, r0
    5566:	a3 9f       	mul	r26, r19
    5568:	70 0d       	add	r23, r0
    556a:	81 1d       	adc	r24, r1
    556c:	11 24       	eor	r1, r1
    556e:	91 1d       	adc	r25, r1
    5570:	b2 9f       	mul	r27, r18
    5572:	70 0d       	add	r23, r0
    5574:	81 1d       	adc	r24, r1
    5576:	11 24       	eor	r1, r1
    5578:	91 1d       	adc	r25, r1
    557a:	08 95       	ret

0000557c <strchr_P>:
    557c:	fc 01       	movw	r30, r24
    557e:	05 90       	lpm	r0, Z+
    5580:	06 16       	cp	r0, r22
    5582:	21 f0       	breq	.+8      	; 0x558c <strchr_P+0x10>
    5584:	00 20       	and	r0, r0
    5586:	d9 f7       	brne	.-10     	; 0x557e <strchr_P+0x2>
    5588:	c0 01       	movw	r24, r0
    558a:	08 95       	ret
    558c:	31 97       	sbiw	r30, 0x01	; 1
    558e:	cf 01       	movw	r24, r30
    5590:	08 95       	ret

00005592 <memcpy>:
    5592:	fb 01       	movw	r30, r22
    5594:	dc 01       	movw	r26, r24
    5596:	02 c0       	rjmp	.+4      	; 0x559c <memcpy+0xa>
    5598:	01 90       	ld	r0, Z+
    559a:	0d 92       	st	X+, r0
    559c:	41 50       	subi	r20, 0x01	; 1
    559e:	50 40       	sbci	r21, 0x00	; 0
    55a0:	d8 f7       	brcc	.-10     	; 0x5598 <memcpy+0x6>
    55a2:	08 95       	ret

000055a4 <strncmp>:
    55a4:	fb 01       	movw	r30, r22
    55a6:	dc 01       	movw	r26, r24
    55a8:	41 50       	subi	r20, 0x01	; 1
    55aa:	50 40       	sbci	r21, 0x00	; 0
    55ac:	30 f0       	brcs	.+12     	; 0x55ba <strncmp+0x16>
    55ae:	8d 91       	ld	r24, X+
    55b0:	01 90       	ld	r0, Z+
    55b2:	80 19       	sub	r24, r0
    55b4:	19 f4       	brne	.+6      	; 0x55bc <strncmp+0x18>
    55b6:	00 20       	and	r0, r0
    55b8:	b9 f7       	brne	.-18     	; 0x55a8 <strncmp+0x4>
    55ba:	88 1b       	sub	r24, r24
    55bc:	99 0b       	sbc	r25, r25
    55be:	08 95       	ret

000055c0 <fdevopen>:
    55c0:	0f 93       	push	r16
    55c2:	1f 93       	push	r17
    55c4:	cf 93       	push	r28
    55c6:	df 93       	push	r29
    55c8:	00 97       	sbiw	r24, 0x00	; 0
    55ca:	31 f4       	brne	.+12     	; 0x55d8 <fdevopen+0x18>
    55cc:	61 15       	cp	r22, r1
    55ce:	71 05       	cpc	r23, r1
    55d0:	19 f4       	brne	.+6      	; 0x55d8 <fdevopen+0x18>
    55d2:	80 e0       	ldi	r24, 0x00	; 0
    55d4:	90 e0       	ldi	r25, 0x00	; 0
    55d6:	3a c0       	rjmp	.+116    	; 0x564c <fdevopen+0x8c>
    55d8:	8b 01       	movw	r16, r22
    55da:	ec 01       	movw	r28, r24
    55dc:	6e e0       	ldi	r22, 0x0E	; 14
    55de:	70 e0       	ldi	r23, 0x00	; 0
    55e0:	81 e0       	ldi	r24, 0x01	; 1
    55e2:	90 e0       	ldi	r25, 0x00	; 0
    55e4:	0e 94 51 2c 	call	0x58a2	; 0x58a2 <calloc>
    55e8:	fc 01       	movw	r30, r24
    55ea:	00 97       	sbiw	r24, 0x00	; 0
    55ec:	91 f3       	breq	.-28     	; 0x55d2 <fdevopen+0x12>
    55ee:	80 e8       	ldi	r24, 0x80	; 128
    55f0:	83 83       	std	Z+3, r24	; 0x03
    55f2:	01 15       	cp	r16, r1
    55f4:	11 05       	cpc	r17, r1
    55f6:	71 f0       	breq	.+28     	; 0x5614 <fdevopen+0x54>
    55f8:	13 87       	std	Z+11, r17	; 0x0b
    55fa:	02 87       	std	Z+10, r16	; 0x0a
    55fc:	81 e8       	ldi	r24, 0x81	; 129
    55fe:	83 83       	std	Z+3, r24	; 0x03
    5600:	80 91 fc 07 	lds	r24, 0x07FC
    5604:	90 91 fd 07 	lds	r25, 0x07FD
    5608:	89 2b       	or	r24, r25
    560a:	21 f4       	brne	.+8      	; 0x5614 <fdevopen+0x54>
    560c:	f0 93 fd 07 	sts	0x07FD, r31
    5610:	e0 93 fc 07 	sts	0x07FC, r30
    5614:	20 97       	sbiw	r28, 0x00	; 0
    5616:	c9 f0       	breq	.+50     	; 0x564a <fdevopen+0x8a>
    5618:	d1 87       	std	Z+9, r29	; 0x09
    561a:	c0 87       	std	Z+8, r28	; 0x08
    561c:	83 81       	ldd	r24, Z+3	; 0x03
    561e:	82 60       	ori	r24, 0x02	; 2
    5620:	83 83       	std	Z+3, r24	; 0x03
    5622:	80 91 fe 07 	lds	r24, 0x07FE
    5626:	90 91 ff 07 	lds	r25, 0x07FF
    562a:	89 2b       	or	r24, r25
    562c:	71 f4       	brne	.+28     	; 0x564a <fdevopen+0x8a>
    562e:	f0 93 ff 07 	sts	0x07FF, r31
    5632:	e0 93 fe 07 	sts	0x07FE, r30
    5636:	80 91 00 08 	lds	r24, 0x0800
    563a:	90 91 01 08 	lds	r25, 0x0801
    563e:	89 2b       	or	r24, r25
    5640:	21 f4       	brne	.+8      	; 0x564a <fdevopen+0x8a>
    5642:	f0 93 01 08 	sts	0x0801, r31
    5646:	e0 93 00 08 	sts	0x0800, r30
    564a:	cf 01       	movw	r24, r30
    564c:	df 91       	pop	r29
    564e:	cf 91       	pop	r28
    5650:	1f 91       	pop	r17
    5652:	0f 91       	pop	r16
    5654:	08 95       	ret

00005656 <fputc>:
    5656:	0f 93       	push	r16
    5658:	1f 93       	push	r17
    565a:	cf 93       	push	r28
    565c:	df 93       	push	r29
    565e:	fb 01       	movw	r30, r22
    5660:	23 81       	ldd	r18, Z+3	; 0x03
    5662:	21 fd       	sbrc	r18, 1
    5664:	03 c0       	rjmp	.+6      	; 0x566c <fputc+0x16>
    5666:	8f ef       	ldi	r24, 0xFF	; 255
    5668:	9f ef       	ldi	r25, 0xFF	; 255
    566a:	28 c0       	rjmp	.+80     	; 0x56bc <fputc+0x66>
    566c:	22 ff       	sbrs	r18, 2
    566e:	16 c0       	rjmp	.+44     	; 0x569c <fputc+0x46>
    5670:	46 81       	ldd	r20, Z+6	; 0x06
    5672:	57 81       	ldd	r21, Z+7	; 0x07
    5674:	24 81       	ldd	r18, Z+4	; 0x04
    5676:	35 81       	ldd	r19, Z+5	; 0x05
    5678:	42 17       	cp	r20, r18
    567a:	53 07       	cpc	r21, r19
    567c:	44 f4       	brge	.+16     	; 0x568e <fputc+0x38>
    567e:	a0 81       	ld	r26, Z
    5680:	b1 81       	ldd	r27, Z+1	; 0x01
    5682:	9d 01       	movw	r18, r26
    5684:	2f 5f       	subi	r18, 0xFF	; 255
    5686:	3f 4f       	sbci	r19, 0xFF	; 255
    5688:	31 83       	std	Z+1, r19	; 0x01
    568a:	20 83       	st	Z, r18
    568c:	8c 93       	st	X, r24
    568e:	26 81       	ldd	r18, Z+6	; 0x06
    5690:	37 81       	ldd	r19, Z+7	; 0x07
    5692:	2f 5f       	subi	r18, 0xFF	; 255
    5694:	3f 4f       	sbci	r19, 0xFF	; 255
    5696:	37 83       	std	Z+7, r19	; 0x07
    5698:	26 83       	std	Z+6, r18	; 0x06
    569a:	10 c0       	rjmp	.+32     	; 0x56bc <fputc+0x66>
    569c:	eb 01       	movw	r28, r22
    569e:	09 2f       	mov	r16, r25
    56a0:	18 2f       	mov	r17, r24
    56a2:	00 84       	ldd	r0, Z+8	; 0x08
    56a4:	f1 85       	ldd	r31, Z+9	; 0x09
    56a6:	e0 2d       	mov	r30, r0
    56a8:	09 95       	icall
    56aa:	89 2b       	or	r24, r25
    56ac:	e1 f6       	brne	.-72     	; 0x5666 <fputc+0x10>
    56ae:	8e 81       	ldd	r24, Y+6	; 0x06
    56b0:	9f 81       	ldd	r25, Y+7	; 0x07
    56b2:	01 96       	adiw	r24, 0x01	; 1
    56b4:	9f 83       	std	Y+7, r25	; 0x07
    56b6:	8e 83       	std	Y+6, r24	; 0x06
    56b8:	81 2f       	mov	r24, r17
    56ba:	90 2f       	mov	r25, r16
    56bc:	df 91       	pop	r29
    56be:	cf 91       	pop	r28
    56c0:	1f 91       	pop	r17
    56c2:	0f 91       	pop	r16
    56c4:	08 95       	ret

000056c6 <printf>:
    56c6:	cf 93       	push	r28
    56c8:	df 93       	push	r29
    56ca:	cd b7       	in	r28, 0x3d	; 61
    56cc:	de b7       	in	r29, 0x3e	; 62
    56ce:	ae 01       	movw	r20, r28
    56d0:	4b 5f       	subi	r20, 0xFB	; 251
    56d2:	5f 4f       	sbci	r21, 0xFF	; 255
    56d4:	fa 01       	movw	r30, r20
    56d6:	61 91       	ld	r22, Z+
    56d8:	71 91       	ld	r23, Z+
    56da:	af 01       	movw	r20, r30
    56dc:	80 91 fe 07 	lds	r24, 0x07FE
    56e0:	90 91 ff 07 	lds	r25, 0x07FF
    56e4:	0e 94 46 28 	call	0x508c	; 0x508c <vfprintf>
    56e8:	df 91       	pop	r29
    56ea:	cf 91       	pop	r28
    56ec:	08 95       	ret

000056ee <putchar>:
    56ee:	60 91 fe 07 	lds	r22, 0x07FE
    56f2:	70 91 ff 07 	lds	r23, 0x07FF
    56f6:	0c 94 2b 2b 	jmp	0x5656	; 0x5656 <fputc>

000056fa <puts>:
    56fa:	0f 93       	push	r16
    56fc:	1f 93       	push	r17
    56fe:	cf 93       	push	r28
    5700:	df 93       	push	r29
    5702:	e0 91 fe 07 	lds	r30, 0x07FE
    5706:	f0 91 ff 07 	lds	r31, 0x07FF
    570a:	23 81       	ldd	r18, Z+3	; 0x03
    570c:	21 ff       	sbrs	r18, 1
    570e:	1b c0       	rjmp	.+54     	; 0x5746 <puts+0x4c>
    5710:	8c 01       	movw	r16, r24
    5712:	d0 e0       	ldi	r29, 0x00	; 0
    5714:	c0 e0       	ldi	r28, 0x00	; 0
    5716:	f8 01       	movw	r30, r16
    5718:	81 91       	ld	r24, Z+
    571a:	8f 01       	movw	r16, r30
    571c:	60 91 fe 07 	lds	r22, 0x07FE
    5720:	70 91 ff 07 	lds	r23, 0x07FF
    5724:	db 01       	movw	r26, r22
    5726:	18 96       	adiw	r26, 0x08	; 8
    5728:	ed 91       	ld	r30, X+
    572a:	fc 91       	ld	r31, X
    572c:	19 97       	sbiw	r26, 0x09	; 9
    572e:	88 23       	and	r24, r24
    5730:	31 f0       	breq	.+12     	; 0x573e <puts+0x44>
    5732:	09 95       	icall
    5734:	89 2b       	or	r24, r25
    5736:	79 f3       	breq	.-34     	; 0x5716 <puts+0x1c>
    5738:	df ef       	ldi	r29, 0xFF	; 255
    573a:	cf ef       	ldi	r28, 0xFF	; 255
    573c:	ec cf       	rjmp	.-40     	; 0x5716 <puts+0x1c>
    573e:	8a e0       	ldi	r24, 0x0A	; 10
    5740:	09 95       	icall
    5742:	89 2b       	or	r24, r25
    5744:	19 f0       	breq	.+6      	; 0x574c <puts+0x52>
    5746:	8f ef       	ldi	r24, 0xFF	; 255
    5748:	9f ef       	ldi	r25, 0xFF	; 255
    574a:	02 c0       	rjmp	.+4      	; 0x5750 <puts+0x56>
    574c:	8d 2f       	mov	r24, r29
    574e:	9c 2f       	mov	r25, r28
    5750:	df 91       	pop	r29
    5752:	cf 91       	pop	r28
    5754:	1f 91       	pop	r17
    5756:	0f 91       	pop	r16
    5758:	08 95       	ret

0000575a <sprintf>:
    575a:	0f 93       	push	r16
    575c:	1f 93       	push	r17
    575e:	cf 93       	push	r28
    5760:	df 93       	push	r29
    5762:	cd b7       	in	r28, 0x3d	; 61
    5764:	de b7       	in	r29, 0x3e	; 62
    5766:	2e 97       	sbiw	r28, 0x0e	; 14
    5768:	0f b6       	in	r0, 0x3f	; 63
    576a:	f8 94       	cli
    576c:	de bf       	out	0x3e, r29	; 62
    576e:	0f be       	out	0x3f, r0	; 63
    5770:	cd bf       	out	0x3d, r28	; 61
    5772:	0d 89       	ldd	r16, Y+21	; 0x15
    5774:	1e 89       	ldd	r17, Y+22	; 0x16
    5776:	86 e0       	ldi	r24, 0x06	; 6
    5778:	8c 83       	std	Y+4, r24	; 0x04
    577a:	1a 83       	std	Y+2, r17	; 0x02
    577c:	09 83       	std	Y+1, r16	; 0x01
    577e:	8f ef       	ldi	r24, 0xFF	; 255
    5780:	9f e7       	ldi	r25, 0x7F	; 127
    5782:	9e 83       	std	Y+6, r25	; 0x06
    5784:	8d 83       	std	Y+5, r24	; 0x05
    5786:	ae 01       	movw	r20, r28
    5788:	47 5e       	subi	r20, 0xE7	; 231
    578a:	5f 4f       	sbci	r21, 0xFF	; 255
    578c:	6f 89       	ldd	r22, Y+23	; 0x17
    578e:	78 8d       	ldd	r23, Y+24	; 0x18
    5790:	ce 01       	movw	r24, r28
    5792:	01 96       	adiw	r24, 0x01	; 1
    5794:	0e 94 46 28 	call	0x508c	; 0x508c <vfprintf>
    5798:	2f 81       	ldd	r18, Y+7	; 0x07
    579a:	38 85       	ldd	r19, Y+8	; 0x08
    579c:	f8 01       	movw	r30, r16
    579e:	e2 0f       	add	r30, r18
    57a0:	f3 1f       	adc	r31, r19
    57a2:	10 82       	st	Z, r1
    57a4:	2e 96       	adiw	r28, 0x0e	; 14
    57a6:	0f b6       	in	r0, 0x3f	; 63
    57a8:	f8 94       	cli
    57aa:	de bf       	out	0x3e, r29	; 62
    57ac:	0f be       	out	0x3f, r0	; 63
    57ae:	cd bf       	out	0x3d, r28	; 61
    57b0:	df 91       	pop	r29
    57b2:	cf 91       	pop	r28
    57b4:	1f 91       	pop	r17
    57b6:	0f 91       	pop	r16
    57b8:	08 95       	ret

000057ba <__ultoa_invert>:
    57ba:	fa 01       	movw	r30, r20
    57bc:	aa 27       	eor	r26, r26
    57be:	28 30       	cpi	r18, 0x08	; 8
    57c0:	51 f1       	breq	.+84     	; 0x5816 <__ultoa_invert+0x5c>
    57c2:	20 31       	cpi	r18, 0x10	; 16
    57c4:	81 f1       	breq	.+96     	; 0x5826 <__ultoa_invert+0x6c>
    57c6:	e8 94       	clt
    57c8:	6f 93       	push	r22
    57ca:	6e 7f       	andi	r22, 0xFE	; 254
    57cc:	6e 5f       	subi	r22, 0xFE	; 254
    57ce:	7f 4f       	sbci	r23, 0xFF	; 255
    57d0:	8f 4f       	sbci	r24, 0xFF	; 255
    57d2:	9f 4f       	sbci	r25, 0xFF	; 255
    57d4:	af 4f       	sbci	r26, 0xFF	; 255
    57d6:	b1 e0       	ldi	r27, 0x01	; 1
    57d8:	3e d0       	rcall	.+124    	; 0x5856 <__ultoa_invert+0x9c>
    57da:	b4 e0       	ldi	r27, 0x04	; 4
    57dc:	3c d0       	rcall	.+120    	; 0x5856 <__ultoa_invert+0x9c>
    57de:	67 0f       	add	r22, r23
    57e0:	78 1f       	adc	r23, r24
    57e2:	89 1f       	adc	r24, r25
    57e4:	9a 1f       	adc	r25, r26
    57e6:	a1 1d       	adc	r26, r1
    57e8:	68 0f       	add	r22, r24
    57ea:	79 1f       	adc	r23, r25
    57ec:	8a 1f       	adc	r24, r26
    57ee:	91 1d       	adc	r25, r1
    57f0:	a1 1d       	adc	r26, r1
    57f2:	6a 0f       	add	r22, r26
    57f4:	71 1d       	adc	r23, r1
    57f6:	81 1d       	adc	r24, r1
    57f8:	91 1d       	adc	r25, r1
    57fa:	a1 1d       	adc	r26, r1
    57fc:	20 d0       	rcall	.+64     	; 0x583e <__ultoa_invert+0x84>
    57fe:	09 f4       	brne	.+2      	; 0x5802 <__ultoa_invert+0x48>
    5800:	68 94       	set
    5802:	3f 91       	pop	r19
    5804:	2a e0       	ldi	r18, 0x0A	; 10
    5806:	26 9f       	mul	r18, r22
    5808:	11 24       	eor	r1, r1
    580a:	30 19       	sub	r19, r0
    580c:	30 5d       	subi	r19, 0xD0	; 208
    580e:	31 93       	st	Z+, r19
    5810:	de f6       	brtc	.-74     	; 0x57c8 <__ultoa_invert+0xe>
    5812:	cf 01       	movw	r24, r30
    5814:	08 95       	ret
    5816:	46 2f       	mov	r20, r22
    5818:	47 70       	andi	r20, 0x07	; 7
    581a:	40 5d       	subi	r20, 0xD0	; 208
    581c:	41 93       	st	Z+, r20
    581e:	b3 e0       	ldi	r27, 0x03	; 3
    5820:	0f d0       	rcall	.+30     	; 0x5840 <__ultoa_invert+0x86>
    5822:	c9 f7       	brne	.-14     	; 0x5816 <__ultoa_invert+0x5c>
    5824:	f6 cf       	rjmp	.-20     	; 0x5812 <__ultoa_invert+0x58>
    5826:	46 2f       	mov	r20, r22
    5828:	4f 70       	andi	r20, 0x0F	; 15
    582a:	40 5d       	subi	r20, 0xD0	; 208
    582c:	4a 33       	cpi	r20, 0x3A	; 58
    582e:	18 f0       	brcs	.+6      	; 0x5836 <__ultoa_invert+0x7c>
    5830:	49 5d       	subi	r20, 0xD9	; 217
    5832:	31 fd       	sbrc	r19, 1
    5834:	40 52       	subi	r20, 0x20	; 32
    5836:	41 93       	st	Z+, r20
    5838:	02 d0       	rcall	.+4      	; 0x583e <__ultoa_invert+0x84>
    583a:	a9 f7       	brne	.-22     	; 0x5826 <__ultoa_invert+0x6c>
    583c:	ea cf       	rjmp	.-44     	; 0x5812 <__ultoa_invert+0x58>
    583e:	b4 e0       	ldi	r27, 0x04	; 4
    5840:	a6 95       	lsr	r26
    5842:	97 95       	ror	r25
    5844:	87 95       	ror	r24
    5846:	77 95       	ror	r23
    5848:	67 95       	ror	r22
    584a:	ba 95       	dec	r27
    584c:	c9 f7       	brne	.-14     	; 0x5840 <__ultoa_invert+0x86>
    584e:	00 97       	sbiw	r24, 0x00	; 0
    5850:	61 05       	cpc	r22, r1
    5852:	71 05       	cpc	r23, r1
    5854:	08 95       	ret
    5856:	9b 01       	movw	r18, r22
    5858:	ac 01       	movw	r20, r24
    585a:	0a 2e       	mov	r0, r26
    585c:	06 94       	lsr	r0
    585e:	57 95       	ror	r21
    5860:	47 95       	ror	r20
    5862:	37 95       	ror	r19
    5864:	27 95       	ror	r18
    5866:	ba 95       	dec	r27
    5868:	c9 f7       	brne	.-14     	; 0x585c <__ultoa_invert+0xa2>
    586a:	62 0f       	add	r22, r18
    586c:	73 1f       	adc	r23, r19
    586e:	84 1f       	adc	r24, r20
    5870:	95 1f       	adc	r25, r21
    5872:	a0 1d       	adc	r26, r0
    5874:	08 95       	ret

00005876 <__eerd_byte_m128rfa1>:
    5876:	f9 99       	sbic	0x1f, 1	; 31
    5878:	fe cf       	rjmp	.-4      	; 0x5876 <__eerd_byte_m128rfa1>
    587a:	92 bd       	out	0x22, r25	; 34
    587c:	81 bd       	out	0x21, r24	; 33
    587e:	f8 9a       	sbi	0x1f, 0	; 31
    5880:	99 27       	eor	r25, r25
    5882:	80 b5       	in	r24, 0x20	; 32
    5884:	08 95       	ret

00005886 <__eewr_byte_m128rfa1>:
    5886:	26 2f       	mov	r18, r22

00005888 <__eewr_r18_m128rfa1>:
    5888:	f9 99       	sbic	0x1f, 1	; 31
    588a:	fe cf       	rjmp	.-4      	; 0x5888 <__eewr_r18_m128rfa1>
    588c:	1f ba       	out	0x1f, r1	; 31
    588e:	92 bd       	out	0x22, r25	; 34
    5890:	81 bd       	out	0x21, r24	; 33
    5892:	20 bd       	out	0x20, r18	; 32
    5894:	0f b6       	in	r0, 0x3f	; 63
    5896:	f8 94       	cli
    5898:	fa 9a       	sbi	0x1f, 2	; 31
    589a:	f9 9a       	sbi	0x1f, 1	; 31
    589c:	0f be       	out	0x3f, r0	; 63
    589e:	01 96       	adiw	r24, 0x01	; 1
    58a0:	08 95       	ret

000058a2 <calloc>:
    58a2:	0f 93       	push	r16
    58a4:	1f 93       	push	r17
    58a6:	cf 93       	push	r28
    58a8:	df 93       	push	r29
    58aa:	86 9f       	mul	r24, r22
    58ac:	80 01       	movw	r16, r0
    58ae:	87 9f       	mul	r24, r23
    58b0:	10 0d       	add	r17, r0
    58b2:	96 9f       	mul	r25, r22
    58b4:	10 0d       	add	r17, r0
    58b6:	11 24       	eor	r1, r1
    58b8:	c8 01       	movw	r24, r16
    58ba:	0e 94 6d 2c 	call	0x58da	; 0x58da <malloc>
    58be:	ec 01       	movw	r28, r24
    58c0:	00 97       	sbiw	r24, 0x00	; 0
    58c2:	29 f0       	breq	.+10     	; 0x58ce <calloc+0x2c>
    58c4:	a8 01       	movw	r20, r16
    58c6:	60 e0       	ldi	r22, 0x00	; 0
    58c8:	70 e0       	ldi	r23, 0x00	; 0
    58ca:	0e 94 9a 2d 	call	0x5b34	; 0x5b34 <memset>
    58ce:	ce 01       	movw	r24, r28
    58d0:	df 91       	pop	r29
    58d2:	cf 91       	pop	r28
    58d4:	1f 91       	pop	r17
    58d6:	0f 91       	pop	r16
    58d8:	08 95       	ret

000058da <malloc>:
    58da:	cf 93       	push	r28
    58dc:	df 93       	push	r29
    58de:	82 30       	cpi	r24, 0x02	; 2
    58e0:	91 05       	cpc	r25, r1
    58e2:	10 f4       	brcc	.+4      	; 0x58e8 <malloc+0xe>
    58e4:	82 e0       	ldi	r24, 0x02	; 2
    58e6:	90 e0       	ldi	r25, 0x00	; 0
    58e8:	e0 91 04 08 	lds	r30, 0x0804
    58ec:	f0 91 05 08 	lds	r31, 0x0805
    58f0:	20 e0       	ldi	r18, 0x00	; 0
    58f2:	30 e0       	ldi	r19, 0x00	; 0
    58f4:	c0 e0       	ldi	r28, 0x00	; 0
    58f6:	d0 e0       	ldi	r29, 0x00	; 0
    58f8:	30 97       	sbiw	r30, 0x00	; 0
    58fa:	11 f1       	breq	.+68     	; 0x5940 <malloc+0x66>
    58fc:	40 81       	ld	r20, Z
    58fe:	51 81       	ldd	r21, Z+1	; 0x01
    5900:	48 17       	cp	r20, r24
    5902:	59 07       	cpc	r21, r25
    5904:	c0 f0       	brcs	.+48     	; 0x5936 <malloc+0x5c>
    5906:	48 17       	cp	r20, r24
    5908:	59 07       	cpc	r21, r25
    590a:	61 f4       	brne	.+24     	; 0x5924 <malloc+0x4a>
    590c:	82 81       	ldd	r24, Z+2	; 0x02
    590e:	93 81       	ldd	r25, Z+3	; 0x03
    5910:	20 97       	sbiw	r28, 0x00	; 0
    5912:	19 f0       	breq	.+6      	; 0x591a <malloc+0x40>
    5914:	9b 83       	std	Y+3, r25	; 0x03
    5916:	8a 83       	std	Y+2, r24	; 0x02
    5918:	2b c0       	rjmp	.+86     	; 0x5970 <malloc+0x96>
    591a:	90 93 05 08 	sts	0x0805, r25
    591e:	80 93 04 08 	sts	0x0804, r24
    5922:	26 c0       	rjmp	.+76     	; 0x5970 <malloc+0x96>
    5924:	21 15       	cp	r18, r1
    5926:	31 05       	cpc	r19, r1
    5928:	19 f0       	breq	.+6      	; 0x5930 <malloc+0x56>
    592a:	42 17       	cp	r20, r18
    592c:	53 07       	cpc	r21, r19
    592e:	18 f4       	brcc	.+6      	; 0x5936 <malloc+0x5c>
    5930:	9a 01       	movw	r18, r20
    5932:	be 01       	movw	r22, r28
    5934:	df 01       	movw	r26, r30
    5936:	ef 01       	movw	r28, r30
    5938:	02 80       	ldd	r0, Z+2	; 0x02
    593a:	f3 81       	ldd	r31, Z+3	; 0x03
    593c:	e0 2d       	mov	r30, r0
    593e:	dc cf       	rjmp	.-72     	; 0x58f8 <malloc+0x1e>
    5940:	21 15       	cp	r18, r1
    5942:	31 05       	cpc	r19, r1
    5944:	09 f1       	breq	.+66     	; 0x5988 <malloc+0xae>
    5946:	28 1b       	sub	r18, r24
    5948:	39 0b       	sbc	r19, r25
    594a:	24 30       	cpi	r18, 0x04	; 4
    594c:	31 05       	cpc	r19, r1
    594e:	90 f4       	brcc	.+36     	; 0x5974 <malloc+0x9a>
    5950:	12 96       	adiw	r26, 0x02	; 2
    5952:	8d 91       	ld	r24, X+
    5954:	9c 91       	ld	r25, X
    5956:	13 97       	sbiw	r26, 0x03	; 3
    5958:	61 15       	cp	r22, r1
    595a:	71 05       	cpc	r23, r1
    595c:	21 f0       	breq	.+8      	; 0x5966 <malloc+0x8c>
    595e:	fb 01       	movw	r30, r22
    5960:	93 83       	std	Z+3, r25	; 0x03
    5962:	82 83       	std	Z+2, r24	; 0x02
    5964:	04 c0       	rjmp	.+8      	; 0x596e <malloc+0x94>
    5966:	90 93 05 08 	sts	0x0805, r25
    596a:	80 93 04 08 	sts	0x0804, r24
    596e:	fd 01       	movw	r30, r26
    5970:	32 96       	adiw	r30, 0x02	; 2
    5972:	44 c0       	rjmp	.+136    	; 0x59fc <malloc+0x122>
    5974:	fd 01       	movw	r30, r26
    5976:	e2 0f       	add	r30, r18
    5978:	f3 1f       	adc	r31, r19
    597a:	81 93       	st	Z+, r24
    597c:	91 93       	st	Z+, r25
    597e:	22 50       	subi	r18, 0x02	; 2
    5980:	31 09       	sbc	r19, r1
    5982:	2d 93       	st	X+, r18
    5984:	3c 93       	st	X, r19
    5986:	3a c0       	rjmp	.+116    	; 0x59fc <malloc+0x122>
    5988:	20 91 02 08 	lds	r18, 0x0802
    598c:	30 91 03 08 	lds	r19, 0x0803
    5990:	23 2b       	or	r18, r19
    5992:	41 f4       	brne	.+16     	; 0x59a4 <malloc+0xca>
    5994:	20 91 12 02 	lds	r18, 0x0212
    5998:	30 91 13 02 	lds	r19, 0x0213
    599c:	30 93 03 08 	sts	0x0803, r19
    59a0:	20 93 02 08 	sts	0x0802, r18
    59a4:	20 91 10 02 	lds	r18, 0x0210
    59a8:	30 91 11 02 	lds	r19, 0x0211
    59ac:	21 15       	cp	r18, r1
    59ae:	31 05       	cpc	r19, r1
    59b0:	41 f4       	brne	.+16     	; 0x59c2 <malloc+0xe8>
    59b2:	2d b7       	in	r18, 0x3d	; 61
    59b4:	3e b7       	in	r19, 0x3e	; 62
    59b6:	40 91 14 02 	lds	r20, 0x0214
    59ba:	50 91 15 02 	lds	r21, 0x0215
    59be:	24 1b       	sub	r18, r20
    59c0:	35 0b       	sbc	r19, r21
    59c2:	e0 91 02 08 	lds	r30, 0x0802
    59c6:	f0 91 03 08 	lds	r31, 0x0803
    59ca:	e2 17       	cp	r30, r18
    59cc:	f3 07       	cpc	r31, r19
    59ce:	a0 f4       	brcc	.+40     	; 0x59f8 <malloc+0x11e>
    59d0:	2e 1b       	sub	r18, r30
    59d2:	3f 0b       	sbc	r19, r31
    59d4:	28 17       	cp	r18, r24
    59d6:	39 07       	cpc	r19, r25
    59d8:	78 f0       	brcs	.+30     	; 0x59f8 <malloc+0x11e>
    59da:	ac 01       	movw	r20, r24
    59dc:	4e 5f       	subi	r20, 0xFE	; 254
    59de:	5f 4f       	sbci	r21, 0xFF	; 255
    59e0:	24 17       	cp	r18, r20
    59e2:	35 07       	cpc	r19, r21
    59e4:	48 f0       	brcs	.+18     	; 0x59f8 <malloc+0x11e>
    59e6:	4e 0f       	add	r20, r30
    59e8:	5f 1f       	adc	r21, r31
    59ea:	50 93 03 08 	sts	0x0803, r21
    59ee:	40 93 02 08 	sts	0x0802, r20
    59f2:	81 93       	st	Z+, r24
    59f4:	91 93       	st	Z+, r25
    59f6:	02 c0       	rjmp	.+4      	; 0x59fc <malloc+0x122>
    59f8:	e0 e0       	ldi	r30, 0x00	; 0
    59fa:	f0 e0       	ldi	r31, 0x00	; 0
    59fc:	cf 01       	movw	r24, r30
    59fe:	df 91       	pop	r29
    5a00:	cf 91       	pop	r28
    5a02:	08 95       	ret

00005a04 <free>:
    5a04:	0f 93       	push	r16
    5a06:	1f 93       	push	r17
    5a08:	cf 93       	push	r28
    5a0a:	df 93       	push	r29
    5a0c:	00 97       	sbiw	r24, 0x00	; 0
    5a0e:	09 f4       	brne	.+2      	; 0x5a12 <free+0xe>
    5a10:	8c c0       	rjmp	.+280    	; 0x5b2a <free+0x126>
    5a12:	fc 01       	movw	r30, r24
    5a14:	32 97       	sbiw	r30, 0x02	; 2
    5a16:	13 82       	std	Z+3, r1	; 0x03
    5a18:	12 82       	std	Z+2, r1	; 0x02
    5a1a:	00 91 04 08 	lds	r16, 0x0804
    5a1e:	10 91 05 08 	lds	r17, 0x0805
    5a22:	01 15       	cp	r16, r1
    5a24:	11 05       	cpc	r17, r1
    5a26:	81 f4       	brne	.+32     	; 0x5a48 <free+0x44>
    5a28:	20 81       	ld	r18, Z
    5a2a:	31 81       	ldd	r19, Z+1	; 0x01
    5a2c:	82 0f       	add	r24, r18
    5a2e:	93 1f       	adc	r25, r19
    5a30:	20 91 02 08 	lds	r18, 0x0802
    5a34:	30 91 03 08 	lds	r19, 0x0803
    5a38:	28 17       	cp	r18, r24
    5a3a:	39 07       	cpc	r19, r25
    5a3c:	79 f5       	brne	.+94     	; 0x5a9c <free+0x98>
    5a3e:	f0 93 03 08 	sts	0x0803, r31
    5a42:	e0 93 02 08 	sts	0x0802, r30
    5a46:	71 c0       	rjmp	.+226    	; 0x5b2a <free+0x126>
    5a48:	d8 01       	movw	r26, r16
    5a4a:	40 e0       	ldi	r20, 0x00	; 0
    5a4c:	50 e0       	ldi	r21, 0x00	; 0
    5a4e:	ae 17       	cp	r26, r30
    5a50:	bf 07       	cpc	r27, r31
    5a52:	50 f4       	brcc	.+20     	; 0x5a68 <free+0x64>
    5a54:	12 96       	adiw	r26, 0x02	; 2
    5a56:	2d 91       	ld	r18, X+
    5a58:	3c 91       	ld	r19, X
    5a5a:	13 97       	sbiw	r26, 0x03	; 3
    5a5c:	ad 01       	movw	r20, r26
    5a5e:	21 15       	cp	r18, r1
    5a60:	31 05       	cpc	r19, r1
    5a62:	09 f1       	breq	.+66     	; 0x5aa6 <free+0xa2>
    5a64:	d9 01       	movw	r26, r18
    5a66:	f3 cf       	rjmp	.-26     	; 0x5a4e <free+0x4a>
    5a68:	9d 01       	movw	r18, r26
    5a6a:	da 01       	movw	r26, r20
    5a6c:	33 83       	std	Z+3, r19	; 0x03
    5a6e:	22 83       	std	Z+2, r18	; 0x02
    5a70:	60 81       	ld	r22, Z
    5a72:	71 81       	ldd	r23, Z+1	; 0x01
    5a74:	86 0f       	add	r24, r22
    5a76:	97 1f       	adc	r25, r23
    5a78:	82 17       	cp	r24, r18
    5a7a:	93 07       	cpc	r25, r19
    5a7c:	69 f4       	brne	.+26     	; 0x5a98 <free+0x94>
    5a7e:	ec 01       	movw	r28, r24
    5a80:	28 81       	ld	r18, Y
    5a82:	39 81       	ldd	r19, Y+1	; 0x01
    5a84:	26 0f       	add	r18, r22
    5a86:	37 1f       	adc	r19, r23
    5a88:	2e 5f       	subi	r18, 0xFE	; 254
    5a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    5a8c:	31 83       	std	Z+1, r19	; 0x01
    5a8e:	20 83       	st	Z, r18
    5a90:	8a 81       	ldd	r24, Y+2	; 0x02
    5a92:	9b 81       	ldd	r25, Y+3	; 0x03
    5a94:	93 83       	std	Z+3, r25	; 0x03
    5a96:	82 83       	std	Z+2, r24	; 0x02
    5a98:	45 2b       	or	r20, r21
    5a9a:	29 f4       	brne	.+10     	; 0x5aa6 <free+0xa2>
    5a9c:	f0 93 05 08 	sts	0x0805, r31
    5aa0:	e0 93 04 08 	sts	0x0804, r30
    5aa4:	42 c0       	rjmp	.+132    	; 0x5b2a <free+0x126>
    5aa6:	13 96       	adiw	r26, 0x03	; 3
    5aa8:	fc 93       	st	X, r31
    5aaa:	ee 93       	st	-X, r30
    5aac:	12 97       	sbiw	r26, 0x02	; 2
    5aae:	ed 01       	movw	r28, r26
    5ab0:	49 91       	ld	r20, Y+
    5ab2:	59 91       	ld	r21, Y+
    5ab4:	9e 01       	movw	r18, r28
    5ab6:	24 0f       	add	r18, r20
    5ab8:	35 1f       	adc	r19, r21
    5aba:	e2 17       	cp	r30, r18
    5abc:	f3 07       	cpc	r31, r19
    5abe:	71 f4       	brne	.+28     	; 0x5adc <free+0xd8>
    5ac0:	80 81       	ld	r24, Z
    5ac2:	91 81       	ldd	r25, Z+1	; 0x01
    5ac4:	84 0f       	add	r24, r20
    5ac6:	95 1f       	adc	r25, r21
    5ac8:	02 96       	adiw	r24, 0x02	; 2
    5aca:	11 96       	adiw	r26, 0x01	; 1
    5acc:	9c 93       	st	X, r25
    5ace:	8e 93       	st	-X, r24
    5ad0:	82 81       	ldd	r24, Z+2	; 0x02
    5ad2:	93 81       	ldd	r25, Z+3	; 0x03
    5ad4:	13 96       	adiw	r26, 0x03	; 3
    5ad6:	9c 93       	st	X, r25
    5ad8:	8e 93       	st	-X, r24
    5ada:	12 97       	sbiw	r26, 0x02	; 2
    5adc:	e0 e0       	ldi	r30, 0x00	; 0
    5ade:	f0 e0       	ldi	r31, 0x00	; 0
    5ae0:	d8 01       	movw	r26, r16
    5ae2:	12 96       	adiw	r26, 0x02	; 2
    5ae4:	8d 91       	ld	r24, X+
    5ae6:	9c 91       	ld	r25, X
    5ae8:	13 97       	sbiw	r26, 0x03	; 3
    5aea:	00 97       	sbiw	r24, 0x00	; 0
    5aec:	19 f0       	breq	.+6      	; 0x5af4 <free+0xf0>
    5aee:	f8 01       	movw	r30, r16
    5af0:	8c 01       	movw	r16, r24
    5af2:	f6 cf       	rjmp	.-20     	; 0x5ae0 <free+0xdc>
    5af4:	8d 91       	ld	r24, X+
    5af6:	9c 91       	ld	r25, X
    5af8:	98 01       	movw	r18, r16
    5afa:	2e 5f       	subi	r18, 0xFE	; 254
    5afc:	3f 4f       	sbci	r19, 0xFF	; 255
    5afe:	82 0f       	add	r24, r18
    5b00:	93 1f       	adc	r25, r19
    5b02:	20 91 02 08 	lds	r18, 0x0802
    5b06:	30 91 03 08 	lds	r19, 0x0803
    5b0a:	28 17       	cp	r18, r24
    5b0c:	39 07       	cpc	r19, r25
    5b0e:	69 f4       	brne	.+26     	; 0x5b2a <free+0x126>
    5b10:	30 97       	sbiw	r30, 0x00	; 0
    5b12:	29 f4       	brne	.+10     	; 0x5b1e <free+0x11a>
    5b14:	10 92 05 08 	sts	0x0805, r1
    5b18:	10 92 04 08 	sts	0x0804, r1
    5b1c:	02 c0       	rjmp	.+4      	; 0x5b22 <free+0x11e>
    5b1e:	13 82       	std	Z+3, r1	; 0x03
    5b20:	12 82       	std	Z+2, r1	; 0x02
    5b22:	10 93 03 08 	sts	0x0803, r17
    5b26:	00 93 02 08 	sts	0x0802, r16
    5b2a:	df 91       	pop	r29
    5b2c:	cf 91       	pop	r28
    5b2e:	1f 91       	pop	r17
    5b30:	0f 91       	pop	r16
    5b32:	08 95       	ret

00005b34 <memset>:
    5b34:	dc 01       	movw	r26, r24
    5b36:	01 c0       	rjmp	.+2      	; 0x5b3a <memset+0x6>
    5b38:	6d 93       	st	X+, r22
    5b3a:	41 50       	subi	r20, 0x01	; 1
    5b3c:	50 40       	sbci	r21, 0x00	; 0
    5b3e:	e0 f7       	brcc	.-8      	; 0x5b38 <memset+0x4>
    5b40:	08 95       	ret

00005b42 <_exit>:
    5b42:	f8 94       	cli

00005b44 <__stop_program>:
    5b44:	ff cf       	rjmp	.-2      	; 0x5b44 <__stop_program>
