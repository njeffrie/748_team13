
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ca  00800200  000066f6  0000678a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000066f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a4  008003ca  008003ca  00006954  2**0
                  ALLOC
  3 .stab         00013854  00000000  00000000  00006954  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000acd7  00000000  00000000  0001a1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00024e7f  2**0
                  CONTENTS, READONLY
  6 .debug_info   00001160  00000000  00000000  00024e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001072  00000000  00000000  00025ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00027062  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006de  00000000  00000000  0002707f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__ctors_end>
       4:	0c 94 ae 2b 	jmp	0x575c	; 0x575c <__vector_1>
       8:	0c 94 e0 2b 	jmp	0x57c0	; 0x57c0 <__vector_2>
       c:	0c 94 12 2c 	jmp	0x5824	; 0x5824 <__vector_3>
      10:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      14:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      18:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      1c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      20:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      24:	0c 94 7c 2b 	jmp	0x56f8	; 0x56f8 <__vector_9>
      28:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      2c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      30:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      34:	0c 94 db 29 	jmp	0x53b6	; 0x53b6 <__vector_13>
      38:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      3c:	0c 94 db 29 	jmp	0x53b6	; 0x53b6 <__vector_13>
      40:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      44:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      48:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      4c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      50:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      54:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      58:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      5c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      60:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      64:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      68:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      6c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      70:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      74:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      78:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      7c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      80:	0c 94 0e 2a 	jmp	0x541c	; 0x541c <__vector_32>
      84:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      88:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      8c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      90:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      94:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      98:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      9c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      a0:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      a4:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      a8:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      ac:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      b0:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      b4:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      b8:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      bc:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      c0:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      c4:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      c8:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      cc:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      d0:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      d4:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      d8:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      dc:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      e0:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
      e4:	0c 94 13 10 	jmp	0x2026	; 0x2026 <__vector_57>
      e8:	0c 94 04 10 	jmp	0x2008	; 0x2008 <__vector_58>
      ec:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__vector_59>
      f0:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__vector_60>
      f4:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <__vector_61>
      f8:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__vector_62>
      fc:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__vector_63>
     100:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <__vector_64>
     104:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
     108:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
     10c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
     110:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
     114:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
     118:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
     11c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__bad_interrupt>
     120:	44 12       	cpse	r4, r20
     122:	51 12       	cpse	r5, r17
     124:	5e 12       	cpse	r5, r30
     126:	6b 12       	cpse	r6, r27
     128:	78 12       	cpse	r7, r24
     12a:	85 12       	cpse	r8, r21
     12c:	92 12       	cpse	r9, r18
     12e:	b5 12       	cpse	r11, r21
     130:	c3 12       	cpse	r12, r19
     132:	d1 12       	cpse	r13, r17
     134:	df 12       	cpse	r13, r31
     136:	ed 12       	cpse	r14, r29
     138:	fb 12       	cpse	r15, r27
     13a:	09 13       	cpse	r16, r25
     13c:	2c 13       	cpse	r18, r28
     13e:	2e 13       	cpse	r18, r30
     140:	30 13       	cpse	r19, r16
     142:	32 13       	cpse	r19, r18
     144:	34 13       	cpse	r19, r20
     146:	36 13       	cpse	r19, r22
     148:	38 13       	cpse	r19, r24
     14a:	57 13       	cpse	r21, r23
     14c:	7a 13       	cpse	r23, r26
     14e:	9e 13       	cpse	r25, r30
     150:	c1 13       	cpse	r28, r17
     152:	e4 13       	cpse	r30, r20
     154:	07 14       	cp	r0, r7
     156:	2a 14       	cp	r2, r10
     158:	64 14       	cp	r6, r4
     15a:	71 14       	cp	r7, r1
     15c:	7e 14       	cp	r7, r14
     15e:	8b 14       	cp	r8, r11
     160:	98 14       	cp	r9, r8
     162:	a5 14       	cp	r10, r5
     164:	b2 14       	cp	r11, r2
     166:	cb 14       	cp	r12, r11
     168:	d8 14       	cp	r13, r8
     16a:	e5 14       	cp	r14, r5
     16c:	f2 14       	cp	r15, r2
     16e:	ff 14       	cp	r15, r15
     170:	0c 15       	cp	r16, r12
     172:	19 15       	cp	r17, r9
     174:	67 18       	sub	r6, r7
     176:	6d 18       	sub	r6, r13
     178:	70 18       	sub	r7, r0
     17a:	73 18       	sub	r7, r3
     17c:	76 18       	sub	r7, r6
     17e:	79 18       	sub	r7, r9
     180:	7f 18       	sub	r7, r15
     182:	7c 18       	sub	r7, r12
     184:	82 18       	sub	r8, r2
     186:	85 18       	sub	r8, r5
     188:	88 18       	sub	r8, r8
     18a:	91 18       	sub	r9, r1
     18c:	94 18       	sub	r9, r4
     18e:	97 18       	sub	r9, r7
     190:	9a 18       	sub	r9, r10
     192:	8e 18       	sub	r8, r14
     194:	64 18       	sub	r6, r4
     196:	6a 18       	sub	r6, r10
     198:	9d 18       	sub	r9, r13
     19a:	a0 18       	sub	r10, r0
     19c:	8b 18       	sub	r8, r11
     19e:	61 18       	sub	r6, r1
     1a0:	6e 19       	sub	r22, r14
     1a2:	71 19       	sub	r23, r1
     1a4:	7c 19       	sub	r23, r12
     1a6:	81 19       	sub	r24, r1
     1a8:	88 19       	sub	r24, r8
     1aa:	91 19       	sub	r25, r1
     1ac:	94 19       	sub	r25, r4
     1ae:	99 19       	sub	r25, r9
     1b0:	a0 19       	sub	r26, r0
     1b2:	a9 19       	sub	r26, r9

000001b4 <__trampolines_end>:
     1b4:	74 78       	andi	r23, 0x84	; 132
     1b6:	20 66       	ori	r18, 0x60	; 96
     1b8:	61 69       	ori	r22, 0x91	; 145
     1ba:	6c 65       	ori	r22, 0x5C	; 92
     1bc:	64 20       	and	r6, r4
     1be:	64 75       	andi	r22, 0x54	; 84
     1c0:	65 20       	and	r6, r5
     1c2:	74 6f       	ori	r23, 0xF4	; 244
     1c4:	20 69       	ori	r18, 0x90	; 144
     1c6:	6e 63       	ori	r22, 0x3E	; 62
     1c8:	6f 72       	andi	r22, 0x2F	; 47
     1ca:	72 65       	ori	r23, 0x52	; 82
     1cc:	63 74       	andi	r22, 0x43	; 67
     1ce:	20 74       	andi	r18, 0x40	; 64
     1d0:	72 78       	andi	r23, 0x82	; 130
     1d2:	20 73       	andi	r18, 0x30	; 48
     1d4:	74 61       	ori	r23, 0x14	; 20
     1d6:	74 75       	andi	r23, 0x54	; 84
     1d8:	73 0d       	add	r23, r3
     1da:	0a 00       	.word	0x000a	; ????

000001dc <__c.3389>:
     1dc:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000001e3 <__c.3386>:
     1e3:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

000001f2 <__c.3383>:
     1f2:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

00000203 <__c.3380>:
     203:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     213:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

0000021e <__c.3377>:
     21e:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     22e:	20 53 69 67 6e 61 6c 00                              Signal.

00000236 <__c.3374>:
     236:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     246:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000256 <__c.3371>:
     256:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     266:	72 6f 72 00                                         ror.

0000026a <__c.3368>:
     26a:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

0000027b <__c.3365>:
     27b:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     28b:	61 72 74 00                                         art.

0000028f <__c.3362>:
     28f:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

0000029e <__c.3359>:
     29e:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     2ae:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

000002b9 <__c.3356>:
     2b9:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

000002c5 <__c.3353>:
     2c5:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     2d5:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     2e5:	20 6f 6b 3f 00                                       ok?.

000002ea <__c.3350>:
     2ea:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2fa:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

00000308 <__c.3347>:
     308:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     318:	72 74 00                                            rt.

0000031b <__c.3344>:
     31b:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     32b:	49 44 00                                            ID.

0000032e <__c.3341>:
     32e:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     33e:	20 57 61 6b 65 75 70 00                              Wakeup.

00000346 <__c.3338>:
     346:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     356:	6c 61 74 65 64 00                                   lated.

0000035c <__c.3335>:
     35c:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     36c:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000377 <__c.3332>:
     377:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     387:	69 6e 74 65 72 00                                   inter.

0000038d <__c.3329>:
     38d:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     39d:	6c 6f 77 00                                         low.

000003a1 <__c.3326>:
     3a1:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     3b1:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     3c1:	6e 6f 75 67 68 21 00                                nough!.

000003c8 <__c.3322>:
     3c8:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     3d8:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     3e8:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     3f8:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

00000404 <__c.3319>:
     404:	29 3a 20 00                                         ): .

00000408 <__c.3317>:
     408:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

00000414 <__c.3247>:
     414:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000423 <__c.2228>:
     423:	45 46 47 65 66 67 00                                EFGefg.

0000042a <__c.2222>:
     42a:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

0000043a <__ctors_end>:
     43a:	11 24       	eor	r1, r1
     43c:	1f be       	out	0x3f, r1	; 63
     43e:	cf ef       	ldi	r28, 0xFF	; 255
     440:	d1 e4       	ldi	r29, 0x41	; 65
     442:	de bf       	out	0x3e, r29	; 62
     444:	cd bf       	out	0x3d, r28	; 61

00000446 <__do_copy_data>:
     446:	13 e0       	ldi	r17, 0x03	; 3
     448:	a0 e0       	ldi	r26, 0x00	; 0
     44a:	b2 e0       	ldi	r27, 0x02	; 2
     44c:	e6 ef       	ldi	r30, 0xF6	; 246
     44e:	f6 e6       	ldi	r31, 0x66	; 102
     450:	00 e0       	ldi	r16, 0x00	; 0
     452:	0b bf       	out	0x3b, r16	; 59
     454:	02 c0       	rjmp	.+4      	; 0x45a <__do_copy_data+0x14>
     456:	07 90       	elpm	r0, Z+
     458:	0d 92       	st	X+, r0
     45a:	aa 3c       	cpi	r26, 0xCA	; 202
     45c:	b1 07       	cpc	r27, r17
     45e:	d9 f7       	brne	.-10     	; 0x456 <__do_copy_data+0x10>

00000460 <__do_clear_bss>:
     460:	17 e0       	ldi	r17, 0x07	; 7
     462:	aa ec       	ldi	r26, 0xCA	; 202
     464:	b3 e0       	ldi	r27, 0x03	; 3
     466:	01 c0       	rjmp	.+2      	; 0x46a <.do_clear_bss_start>

00000468 <.do_clear_bss_loop>:
     468:	1d 92       	st	X+, r1

0000046a <.do_clear_bss_start>:
     46a:	ae 36       	cpi	r26, 0x6E	; 110
     46c:	b1 07       	cpc	r27, r17
     46e:	e1 f7       	brne	.-8      	; 0x468 <.do_clear_bss_loop>
     470:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <main>
     474:	0c 94 79 33 	jmp	0x66f2	; 0x66f2 <_exit>

00000478 <__bad_interrupt>:
     478:	0c 94 d1 29 	jmp	0x53a2	; 0x53a2 <__vector_default>

0000047c <time_sync_callback>:
	nrk_start();
	
	return 0;
}

void time_sync_callback(uint8_t *buf, uint64_t recv_time){
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
	uint32_t prev_local_time = (uint32_t)recv_time;//(uint32_t)flash_get_current_time();
	uint32_t global_time = *(uint32_t *)(buf + 1);
	flash_set_time(global_time + 673); 
     480:	fc 01       	movw	r30, r24
     482:	81 81       	ldd	r24, Z+1	; 0x01
     484:	92 81       	ldd	r25, Z+2	; 0x02
     486:	a3 81       	ldd	r26, Z+3	; 0x03
     488:	b4 81       	ldd	r27, Z+4	; 0x04
     48a:	8f 55       	subi	r24, 0x5F	; 95
     48c:	9d 4f       	sbci	r25, 0xFD	; 253
     48e:	af 4f       	sbci	r26, 0xFF	; 255
     490:	bf 4f       	sbci	r27, 0xFF	; 255
     492:	9c 01       	movw	r18, r24
     494:	ad 01       	movw	r20, r26
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	90 e0       	ldi	r25, 0x00	; 0

	//printf("global time is %ld us ahead of local time\r\n", (int32_t)prev_local_time - (int32_t)global_time);
	//printf("prev time :%lu global time :%lu\r\n", prev_local_time, global_time);
}	
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
}

void time_sync_callback(uint8_t *buf, uint64_t recv_time){
	uint32_t prev_local_time = (uint32_t)recv_time;//(uint32_t)flash_get_current_time();
	uint32_t global_time = *(uint32_t *)(buf + 1);
	flash_set_time(global_time + 673); 
     4a2:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <flash_set_time>

000004a6 <main_disabled>:
void nrk_register_drivers();

uint8_t val;

int main_disabled() {
	nrk_setup_ports();
     4a6:	0e 94 2f 12 	call	0x245e	; 0x245e <nrk_setup_ports>
	nrk_setup_uart(UART_BAUDRATE_9K6);
     4aa:	8f ec       	ldi	r24, 0xCF	; 207
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <nrk_setup_uart>
	
	nrk_init();
     4b2:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <nrk_init>
	
	nrk_led_clr(0);
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <nrk_led_clr>
	nrk_led_clr(1);
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <nrk_led_clr>
	nrk_led_clr(2);
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <nrk_led_clr>
	nrk_led_clr(3);
     4ce:	83 e0       	ldi	r24, 0x03	; 3
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <nrk_led_clr>
	
	nrk_time_set(0, 0);
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	a9 01       	movw	r20, r18
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	cb 01       	movw	r24, r22
     4e2:	0e 94 9c 23 	call	0x4738	; 0x4738 <nrk_time_set>

	flash_init(14);
     4e6:	8e e0       	ldi	r24, 0x0E	; 14
     4e8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <flash_init>
	flash_timer_setup();
     4ec:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <flash_timer_setup>

	val = nrk_register_driver(&dev_manager_ff3_sensors, FIREFLY_3_SENSOR_BASIC);
     4f0:	63 e0       	ldi	r22, 0x03	; 3
     4f2:	8d e0       	ldi	r24, 0x0D	; 13
     4f4:	97 e0       	ldi	r25, 0x07	; 7
     4f6:	0e 94 93 27 	call	0x4f26	; 0x4f26 <nrk_register_driver>
     4fa:	80 93 64 05 	sts	0x0564, r24
	if (val == NRK_ERROR) printf("failed to register drivers\r\n");

	//nrk_create_taskset();
	nrk_start();
     4fe:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <nrk_start>
	
	return 0;
}
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	08 95       	ret

00000508 <open>:
}

int8_t open(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
    // Note that here nothing needs to be done for the I2C. This is the original
    // code for the firefly 2.2 board driver
	if (is_open == 1) return NRK_ERROR;
     508:	80 91 45 06 	lds	r24, 0x0645
     50c:	81 30       	cpi	r24, 0x01	; 1
     50e:	11 f4       	brne	.+4      	; 0x514 <open+0xc>
     510:	8f ef       	ldi	r24, 0xFF	; 255
     512:	08 95       	ret
    is_open = 1;
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	80 93 45 06 	sts	0x0645, r24
    if (opt & READ_FLAG) {
     51a:	60 ff       	sbrs	r22, 0
     51c:	18 c0       	rjmp	.+48     	; 0x54e <open+0x46>
        // Turn on Sensor Node Power
        //PORTE &= ~(PWR_CTRL_MASK);
        //PORTE |= PWR_CTRL_MASK;
        nrk_gpio_set(PWR_CTRL_PIN);
     51e:	80 91 35 02 	lds	r24, 0x0235
     522:	0e 94 31 12 	call	0x2462	; 0x2462 <nrk_gpio_set>
        channel = 0;
     526:	10 92 4a 06 	sts	0x064A, r1
        ADC_SET_CHANNEL(0);
     52a:	80 91 7c 00 	lds	r24, 0x007C
     52e:	80 7e       	andi	r24, 0xE0	; 224
     530:	80 93 7c 00 	sts	0x007C, r24
     534:	80 91 7c 00 	lds	r24, 0x007C
     538:	90 91 7c 00 	lds	r25, 0x007C
     53c:	80 7e       	andi	r24, 0xE0	; 224
     53e:	89 2b       	or	r24, r25
     540:	80 93 7c 00 	sts	0x007C, r24
        nrk_spin_wait_us(ADC_STARTUP_DELAY);
     544:	88 ee       	ldi	r24, 0xE8	; 232
     546:	93 e0       	ldi	r25, 0x03	; 3
     548:	0e 94 81 28 	call	0x5102	; 0x5102 <nrk_spin_wait_us>
     54c:	05 c0       	rjmp	.+10     	; 0x558 <open+0x50>
     54e:	86 2f       	mov	r24, r22
     550:	86 70       	andi	r24, 0x06	; 6
        return NRK_OK;
    }
    if (opt & WRITE_FLAG) {
        return NRK_ERROR;
    }
    if (opt & APPEND_FLAG) {
     552:	f1 f6       	brne	.-68     	; 0x510 <open+0x8>
        return NRK_ERROR;
    }
    if (((opt)&(READ_FLAG | WRITE_FLAG | APPEND_FLAG)) == 0)
     554:	67 70       	andi	r22, 0x07	; 7
     556:	e1 f2       	breq	.-72     	; 0x510 <open+0x8>
        return NRK_ERROR;
    else return NRK_OK;
     558:	81 e0       	ldi	r24, 0x01	; 1

}
     55a:	08 95       	ret

0000055c <close>:

int8_t close(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {

    // Turn off sensor power
    //PORTE |= PWR_CTRL_MASK;
    nrk_gpio_clr(PWR_CTRL_PIN);
     55c:	80 91 35 02 	lds	r24, 0x0235
     560:	0e 94 a2 12 	call	0x2544	; 0x2544 <nrk_gpio_clr>
    //PORTE &= ~(PWR_CTRL_MASK);
    	is_open = 0;
     564:	10 92 45 06 	sts	0x0645, r1
    close_i2c(); // Shut down the I2C
     568:	0e 94 48 07 	call	0xe90	; 0xe90 <close_i2c>
    ADC_DISABLE();
     56c:	ea e7       	ldi	r30, 0x7A	; 122
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	80 81       	ld	r24, Z
     572:	8f 77       	andi	r24, 0x7F	; 127
     574:	80 83       	st	Z, r24
    return NRK_OK;
}
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	08 95       	ret

0000057a <get_status>:

    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
     57a:	61 30       	cpi	r22, 0x01	; 1
     57c:	19 f4       	brne	.+6      	; 0x584 <get_status+0xa>
     57e:	80 91 4a 06 	lds	r24, 0x064A
     582:	08 95       	ret
    return NRK_ERROR;
     584:	8f ef       	ldi	r24, 0xFF	; 255
}
     586:	08 95       	ret

00000588 <set_status>:
    // key and value get passed as opt and size
    uint8_t key = opt;
    uint8_t value = size;

    // use "key" and "value" here
    if (key == SENSOR_SELECT) {
     588:	61 30       	cpi	r22, 0x01	; 1
     58a:	91 f5       	brne	.+100    	; 0x5f0 <set_status+0x68>
        // Set to audio channel if it is an average value
        if (value == AUDIO_P2P) {
     58c:	2c 30       	cpi	r18, 0x0C	; 12
     58e:	81 f4       	brne	.+32     	; 0x5b0 <set_status+0x28>
            channel = value;
     590:	20 93 4a 06 	sts	0x064A, r18
            ADC_VREF_VCC();
            ADC_SET_CHANNEL(AUDIO);
     594:	80 91 7c 00 	lds	r24, 0x007C
     598:	80 7e       	andi	r24, 0xE0	; 224
     59a:	80 93 7c 00 	sts	0x007C, r24
     59e:	90 91 7c 00 	lds	r25, 0x007C
     5a2:	20 91 7c 00 	lds	r18, 0x007C
     5a6:	89 2f       	mov	r24, r25
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	80 7e       	andi	r24, 0xE0	; 224
     5ac:	83 60       	ori	r24, 0x03	; 3
     5ae:	17 c0       	rjmp	.+46     	; 0x5de <set_status+0x56>
            nrk_spin_wait_us(ADC_SETUP_DELAY);
            return NRK_OK;

        } else {
            if (value > 13) { // Update for all of the sensors
     5b0:	2e 30       	cpi	r18, 0x0E	; 14
     5b2:	20 f0       	brcs	.+8      	; 0x5bc <set_status+0x34>
                _nrk_errno_set(1);
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	0e 94 17 18 	call	0x302e	; 0x302e <_nrk_errno_set>
     5ba:	1a c0       	rjmp	.+52     	; 0x5f0 <set_status+0x68>
                return NRK_ERROR;
            }
            channel = value;
     5bc:	20 93 4a 06 	sts	0x064A, r18
            ADC_VREF_VCC();
            ADC_SET_CHANNEL(channel);
     5c0:	80 91 7c 00 	lds	r24, 0x007C
     5c4:	80 7e       	andi	r24, 0xE0	; 224
     5c6:	80 93 7c 00 	sts	0x007C, r24
     5ca:	90 91 7c 00 	lds	r25, 0x007C
     5ce:	20 91 7c 00 	lds	r18, 0x007C
     5d2:	89 2f       	mov	r24, r25
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	80 7e       	andi	r24, 0xE0	; 224
     5d8:	30 91 4a 06 	lds	r19, 0x064A
     5dc:	83 2b       	or	r24, r19
     5de:	82 2b       	or	r24, r18
     5e0:	80 93 7c 00 	sts	0x007C, r24
            nrk_spin_wait_us(ADC_SETUP_DELAY);
     5e4:	88 ec       	ldi	r24, 0xC8	; 200
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 81 28 	call	0x5102	; 0x5102 <nrk_spin_wait_us>
            return NRK_OK;
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	08 95       	ret
        }
    }
    return NRK_ERROR;
     5f0:	8f ef       	ldi	r24, 0xFF	; 255
}
     5f2:	08 95       	ret

000005f4 <get_eeprom_values>:

void get_eeprom_values(){
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	66 97       	sbiw	r28, 0x16	; 22
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
   uint8_t raw_eeprom_data[22]; // Buffer for storing the raw values being returned
   int j = 0;
   int rv;

   // Get the values
  rv = ee24xx_read_bytes(0xAA, 22, raw_eeprom_data);
     608:	ae 01       	movw	r20, r28
     60a:	4f 5f       	subi	r20, 0xFF	; 255
     60c:	5f 4f       	sbci	r21, 0xFF	; 255
     60e:	66 e1       	ldi	r22, 0x16	; 22
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	8a ea       	ldi	r24, 0xAA	; 170
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 52 07 	call	0xea4	; 0xea4 <ee24xx_read_bytes>
     61a:	fe 01       	movw	r30, r28
     61c:	31 96       	adiw	r30, 0x01	; 1
     61e:	ab e1       	ldi	r26, 0x1B	; 27
     620:	b6 e0       	ldi	r27, 0x06	; 6
     622:	9e 01       	movw	r18, r28
     624:	29 5e       	subi	r18, 0xE9	; 233
     626:	3f 4f       	sbci	r19, 0xFF	; 255
     // printf("\r\n");
  }

  // Place the data in a formatted buffer
  for(j = 0; j < 11; j++){
      eeprom_values[j] = ((raw_eeprom_data[2*j] | 0x0000) << 8) |
     628:	80 81       	ld	r24, Z
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	98 2f       	mov	r25, r24
     62e:	88 27       	eor	r24, r24
     630:	41 81       	ldd	r20, Z+1	; 0x01
     632:	84 2b       	or	r24, r20
     634:	8d 93       	st	X+, r24
     636:	9d 93       	st	X+, r25
     638:	32 96       	adiw	r30, 0x02	; 2
      //  printf("%02x ", raw_eeprom_data[j]);
     // printf("\r\n");
  }

  // Place the data in a formatted buffer
  for(j = 0; j < 11; j++){
     63a:	e2 17       	cp	r30, r18
     63c:	f3 07       	cpc	r31, r19
     63e:	a1 f7       	brne	.-24     	; 0x628 <get_eeprom_values+0x34>
      printf("MC: %i\r\n", MC);
      printf("MD: %i\r\n", MD);
      printf("-------------------------------------------------\r\n");
  }
  */
}
     640:	66 96       	adiw	r28, 0x16	; 22
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <init_adc>:
    return val;
}
*/
void init_adc() {
    // Initialize values here
    ADC_INIT();
     652:	ea e7       	ldi	r30, 0x7A	; 122
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	83 e0       	ldi	r24, 0x03	; 3
     658:	80 83       	st	Z, r24
    ADC_ENABLE();
     65a:	80 81       	ld	r24, Z
     65c:	80 68       	ori	r24, 0x80	; 128
     65e:	80 83       	st	Z, r24
    channel = 0;
     660:	10 92 4a 06 	sts	0x064A, r1
    ADC_SET_CHANNEL(0);
     664:	ac e7       	ldi	r26, 0x7C	; 124
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	8c 91       	ld	r24, X
     66a:	80 7e       	andi	r24, 0xE0	; 224
     66c:	8c 93       	st	X, r24
     66e:	8c 91       	ld	r24, X
     670:	9c 91       	ld	r25, X
     672:	80 7e       	andi	r24, 0xE0	; 224
     674:	89 2b       	or	r24, r25
     676:	8c 93       	st	X, r24
    ADC_DISABLE();
     678:	80 81       	ld	r24, Z
     67a:	8f 77       	andi	r24, 0x7F	; 127
     67c:	80 83       	st	Z, r24
     67e:	08 95       	ret

00000680 <init>:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
            return 0;
    }
}

int8_t init(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
     680:	cf 93       	push	r28
        // For handling the ADC
        // Set the pwr ctrl pin as output
	//DDRE = 0;
        //DDRE |= PWR_CTRL_MASK;
        //PORTE |= PWR_CTRL_MASK;
        nrk_gpio_direction(PWR_CTRL_PIN, NRK_PIN_OUTPUT);
     682:	c0 91 35 02 	lds	r28, 0x0235
     686:	61 e0       	ldi	r22, 0x01	; 1
     688:	8c 2f       	mov	r24, r28
     68a:	0e 94 4f 14 	call	0x289e	; 0x289e <nrk_gpio_direction>
        //nrk_gpio_clr(PWR_CTRL_PIN);
        nrk_gpio_set(PWR_CTRL_PIN);
     68e:	8c 2f       	mov	r24, r28
     690:	0e 94 31 12 	call	0x2462	; 0x2462 <nrk_gpio_set>
	// Input for motion detector
        nrk_gpio_direction(NRK_PORTF_6, NRK_PIN_INPUT );
     694:	c0 91 20 02 	lds	r28, 0x0220
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	8c 2f       	mov	r24, r28
     69c:	0e 94 4f 14 	call	0x289e	; 0x289e <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTF_6);
     6a0:	8c 2f       	mov	r24, r28
     6a2:	0e 94 a2 12 	call	0x2544	; 0x2544 <nrk_gpio_clr>
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_INPUT);
     6a6:	c0 91 36 02 	lds	r28, 0x0236
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	8c 2f       	mov	r24, r28
     6ae:	0e 94 4f 14 	call	0x289e	; 0x289e <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTE_2);
     6b2:	8c 2f       	mov	r24, r28
     6b4:	0e 94 a2 12 	call	0x2544	; 0x2544 <nrk_gpio_clr>
	nrk_gpio_pullups(0);
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	0e 94 78 15 	call	0x2af0	; 0x2af0 <nrk_gpio_pullups>

        init_adc();
     6be:	0e 94 29 03 	call	0x652	; 0x652 <init_adc>
        
        // For handling the I2C
         init_i2c();
     6c2:	0e 94 38 07 	call	0xe70	; 0xe70 <init_i2c>

	set_i2c_device(BOSCH_EEPROM_ADDRESS);
     6c6:	8e ee       	ldi	r24, 0xEE	; 238
     6c8:	0e 94 35 07 	call	0xe6a	; 0xe6a <set_i2c_device>
        get_eeprom_values();
     6cc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <get_eeprom_values>
        is_open = 0;
     6d0:	10 92 45 06 	sts	0x0645, r1
        return 1;
    
}
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <delay>:
    ADC_GET_SAMPLE_10(adc_val);
    return adc_val;
}

void delay() {
    nrk_spin_wait_us(ADC_SETUP_DELAY);
     6da:	88 ec       	ldi	r24, 0xC8	; 200
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	0c 94 81 28 	jmp	0x5102	; 0x5102 <nrk_spin_wait_us>

000006e2 <get_adc_val>:
    ADC_DISABLE();
}

uint16_t get_adc_val() {
    uint16_t adc_val;
    ADC_SAMPLE_SINGLE();
     6e2:	80 91 7a 00 	lds	r24, 0x007A
     6e6:	80 64       	ori	r24, 0x40	; 64
     6e8:	80 93 7a 00 	sts	0x007A, r24
     6ec:	80 91 7a 00 	lds	r24, 0x007A
     6f0:	84 ff       	sbrs	r24, 4
     6f2:	fc cf       	rjmp	.-8      	; 0x6ec <get_adc_val+0xa>
    delay();
     6f4:	0e 94 6d 03 	call	0x6da	; 0x6da <delay>
    ADC_GET_SAMPLE_10(adc_val);
     6f8:	80 91 78 00 	lds	r24, 0x0078
     6fc:	20 91 79 00 	lds	r18, 0x0079
     700:	90 e0       	ldi	r25, 0x00	; 0
    return adc_val;
}
     702:	92 2b       	or	r25, r18
     704:	08 95       	ret

00000706 <calc_true_press>:

void delay() {
    nrk_spin_wait_us(ADC_SETUP_DELAY);
}

int32_t calc_true_press(uint8_t oss){
     706:	4f 92       	push	r4
     708:	5f 92       	push	r5
     70a:	6f 92       	push	r6
     70c:	7f 92       	push	r7
     70e:	8f 92       	push	r8
     710:	9f 92       	push	r9
     712:	af 92       	push	r10
     714:	bf 92       	push	r11
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	28 97       	sbiw	r28, 0x08	; 8
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
     734:	18 2f       	mov	r17, r24

    B6 = B5 - 4000;                                     if(DEBUG) printf("B6 %li\r\n", B6);
     736:	c0 90 41 06 	lds	r12, 0x0641
     73a:	d0 90 42 06 	lds	r13, 0x0642
     73e:	e0 90 43 06 	lds	r14, 0x0643
     742:	f0 90 44 06 	lds	r15, 0x0644
     746:	20 ea       	ldi	r18, 0xA0	; 160
     748:	c2 1a       	sub	r12, r18
     74a:	2f e0       	ldi	r18, 0x0F	; 15
     74c:	d2 0a       	sbc	r13, r18
     74e:	e1 08       	sbc	r14, r1
     750:	f1 08       	sbc	r15, r1
     752:	c0 92 31 06 	sts	0x0631, r12
     756:	d0 92 32 06 	sts	0x0632, r13
     75a:	e0 92 33 06 	sts	0x0633, r14
     75e:	f0 92 34 06 	sts	0x0634, r15
//    X1 = (B2 * (B6 * B6/ pow(2,12)))/ pow(2,11);        if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (B2 * (B6 * B6/ 4096))/ 2048;        if(DEBUG) printf("X1 %li\r\n", X1);
     762:	a7 01       	movw	r20, r14
     764:	96 01       	movw	r18, r12
     766:	c7 01       	movw	r24, r14
     768:	b6 01       	movw	r22, r12
     76a:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <__mulsi3>
     76e:	4b 01       	movw	r8, r22
     770:	5c 01       	movw	r10, r24
     772:	5c e0       	ldi	r21, 0x0C	; 12
     774:	b5 94       	asr	r11
     776:	a7 94       	ror	r10
     778:	97 94       	ror	r9
     77a:	87 94       	ror	r8
     77c:	5a 95       	dec	r21
     77e:	d1 f7       	brne	.-12     	; 0x774 <calc_true_press+0x6e>
    X2 = (int32_t)AC2 * B6 / 2048;                          if(DEBUG) printf("X2 %li\r\n", X2);
//    X2 = AC2 * B6 / pow(2,11);                          if(DEBUG) printf("X2 %li\r\n", X2);
    X3 = X1 + X2;                                       if(DEBUG) printf("X3 %li\r\n", X3);
    B3 = ((((int32_t)AC1 * 4 + X3) << oss) + 2) / 4;               if(DEBUG) printf("B3 %li\r\n", B3);
     780:	40 91 1b 06 	lds	r20, 0x061B
     784:	50 91 1c 06 	lds	r21, 0x061C
     788:	66 27       	eor	r22, r22
     78a:	57 fd       	sbrc	r21, 7
     78c:	60 95       	com	r22
     78e:	76 2f       	mov	r23, r22
     790:	db 01       	movw	r26, r22
     792:	ca 01       	movw	r24, r20
     794:	62 e0       	ldi	r22, 0x02	; 2
     796:	88 0f       	add	r24, r24
     798:	99 1f       	adc	r25, r25
     79a:	aa 1f       	adc	r26, r26
     79c:	bb 1f       	adc	r27, r27
     79e:	6a 95       	dec	r22
     7a0:	d1 f7       	brne	.-12     	; 0x796 <calc_true_press+0x90>
     7a2:	89 83       	std	Y+1, r24	; 0x01
     7a4:	9a 83       	std	Y+2, r25	; 0x02
     7a6:	ab 83       	std	Y+3, r26	; 0x03
     7a8:	bc 83       	std	Y+4, r27	; 0x04

int32_t calc_true_press(uint8_t oss){

    B6 = B5 - 4000;                                     if(DEBUG) printf("B6 %li\r\n", B6);
//    X1 = (B2 * (B6 * B6/ pow(2,12)))/ pow(2,11);        if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (B2 * (B6 * B6/ 4096))/ 2048;        if(DEBUG) printf("X1 %li\r\n", X1);
     7aa:	a0 91 29 06 	lds	r26, 0x0629
     7ae:	b0 91 2a 06 	lds	r27, 0x062A
     7b2:	a5 01       	movw	r20, r10
     7b4:	94 01       	movw	r18, r8
     7b6:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <__mulshisi3>
     7ba:	41 2c       	mov	r4, r1
     7bc:	e8 e0       	ldi	r30, 0x08	; 8
     7be:	5e 2e       	mov	r5, r30
     7c0:	61 2c       	mov	r6, r1
     7c2:	71 2c       	mov	r7, r1
     7c4:	a3 01       	movw	r20, r6
     7c6:	92 01       	movw	r18, r4
     7c8:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <__divmodsi4>
     7cc:	2d 83       	std	Y+5, r18	; 0x05
     7ce:	3e 83       	std	Y+6, r19	; 0x06
     7d0:	4f 83       	std	Y+7, r20	; 0x07
     7d2:	58 87       	std	Y+8, r21	; 0x08
    X2 = (int32_t)AC2 * B6 / 2048;                          if(DEBUG) printf("X2 %li\r\n", X2);
     7d4:	a0 91 1d 06 	lds	r26, 0x061D
     7d8:	b0 91 1e 06 	lds	r27, 0x061E
     7dc:	a7 01       	movw	r20, r14
     7de:	96 01       	movw	r18, r12
     7e0:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <__mulshisi3>
     7e4:	a3 01       	movw	r20, r6
     7e6:	92 01       	movw	r18, r4
     7e8:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <__divmodsi4>
//    X2 = AC2 * B6 / pow(2,11);                          if(DEBUG) printf("X2 %li\r\n", X2);
    X3 = X1 + X2;                                       if(DEBUG) printf("X3 %li\r\n", X3);
     7ec:	8d 81       	ldd	r24, Y+5	; 0x05
     7ee:	9e 81       	ldd	r25, Y+6	; 0x06
     7f0:	af 81       	ldd	r26, Y+7	; 0x07
     7f2:	b8 85       	ldd	r27, Y+8	; 0x08
     7f4:	82 0f       	add	r24, r18
     7f6:	93 1f       	adc	r25, r19
     7f8:	a4 1f       	adc	r26, r20
     7fa:	b5 1f       	adc	r27, r21
    B3 = ((((int32_t)AC1 * 4 + X3) << oss) + 2) / 4;               if(DEBUG) printf("B3 %li\r\n", B3);
     7fc:	29 81       	ldd	r18, Y+1	; 0x01
     7fe:	3a 81       	ldd	r19, Y+2	; 0x02
     800:	4b 81       	ldd	r20, Y+3	; 0x03
     802:	5c 81       	ldd	r21, Y+4	; 0x04
     804:	82 0f       	add	r24, r18
     806:	93 1f       	adc	r25, r19
     808:	a4 1f       	adc	r26, r20
     80a:	b5 1f       	adc	r27, r21
     80c:	01 2e       	mov	r0, r17
     80e:	04 c0       	rjmp	.+8      	; 0x818 <calc_true_press+0x112>
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	aa 1f       	adc	r26, r26
     816:	bb 1f       	adc	r27, r27
     818:	0a 94       	dec	r0
     81a:	d2 f7       	brpl	.-12     	; 0x810 <calc_true_press+0x10a>
     81c:	bc 01       	movw	r22, r24
     81e:	cd 01       	movw	r24, r26
     820:	6e 5f       	subi	r22, 0xFE	; 254
     822:	7f 4f       	sbci	r23, 0xFF	; 255
     824:	8f 4f       	sbci	r24, 0xFF	; 255
     826:	9f 4f       	sbci	r25, 0xFF	; 255
     828:	f4 e0       	ldi	r31, 0x04	; 4
     82a:	4f 2e       	mov	r4, r31
     82c:	51 2c       	mov	r5, r1
     82e:	61 2c       	mov	r6, r1
     830:	71 2c       	mov	r7, r1
     832:	a3 01       	movw	r20, r6
     834:	92 01       	movw	r18, r4
     836:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <__divmodsi4>
     83a:	29 83       	std	Y+1, r18	; 0x01
     83c:	3a 83       	std	Y+2, r19	; 0x02
     83e:	4b 83       	std	Y+3, r20	; 0x03
     840:	5c 83       	std	Y+4, r21	; 0x04
     842:	20 93 60 06 	sts	0x0660, r18
     846:	30 93 61 06 	sts	0x0661, r19
     84a:	40 93 62 06 	sts	0x0662, r20
     84e:	50 93 63 06 	sts	0x0663, r21
//    X1 = AC3 * B6 / pow(2,13);                          if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = AC3 * B6 / 8192;                          if(DEBUG) printf("X1 %li\r\n", X1);
     852:	a0 91 1f 06 	lds	r26, 0x061F
     856:	b0 91 20 06 	lds	r27, 0x0620
     85a:	a7 01       	movw	r20, r14
     85c:	96 01       	movw	r18, r12
     85e:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <__mulshisi3>
     862:	20 e0       	ldi	r18, 0x00	; 0
     864:	30 e2       	ldi	r19, 0x20	; 32
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <__divmodsi4>
     86e:	69 01       	movw	r12, r18
     870:	7a 01       	movw	r14, r20
//    X2 = (B1 * (B6 * B6 / pow(2,12))) / pow(2,16);      if(DEBUG) printf("X2 %li\r\n", X2);
    X2 = (B1 * (B6 * B6 / 4096)) / 65536;      if(DEBUG) printf("X2 %li\r\n", X2);
     872:	a0 91 27 06 	lds	r26, 0x0627
     876:	b0 91 28 06 	lds	r27, 0x0628
     87a:	a5 01       	movw	r20, r10
     87c:	94 01       	movw	r18, r8
     87e:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <__mulshisi3>
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	41 e0       	ldi	r20, 0x01	; 1
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <__divmodsi4>
//    X3 = ((X1 + X2) + 2) / pow(2,2);                    if(DEBUG) printf("X3 %li\r\n", X3);
    X3 = ((X1 + X2) + 2) / 4;                    if(DEBUG) printf("X3 %li\r\n", X3);
     88e:	d7 01       	movw	r26, r14
     890:	c6 01       	movw	r24, r12
     892:	82 0f       	add	r24, r18
     894:	93 1f       	adc	r25, r19
     896:	a4 1f       	adc	r26, r20
     898:	b5 1f       	adc	r27, r21
     89a:	bc 01       	movw	r22, r24
     89c:	cd 01       	movw	r24, r26
     89e:	6e 5f       	subi	r22, 0xFE	; 254
     8a0:	7f 4f       	sbci	r23, 0xFF	; 255
     8a2:	8f 4f       	sbci	r24, 0xFF	; 255
     8a4:	9f 4f       	sbci	r25, 0xFF	; 255
     8a6:	a3 01       	movw	r20, r6
     8a8:	92 01       	movw	r18, r4
     8aa:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <__divmodsi4>
     8ae:	20 93 4b 06 	sts	0x064B, r18
     8b2:	30 93 4c 06 	sts	0x064C, r19
     8b6:	40 93 4d 06 	sts	0x064D, r20
     8ba:	50 93 4e 06 	sts	0x064E, r21
//    B4 = AC4 * (X3 + 32768) / pow(2,15);                if(DEBUG) printf("B4 %lu\r\n", B4);
    B4 = AC4 * (X3 + 32768) / 32768;                if(DEBUG) printf("B4 %lu\r\n", B4);
     8be:	a0 91 21 06 	lds	r26, 0x0621
     8c2:	b0 91 22 06 	lds	r27, 0x0622
     8c6:	30 58       	subi	r19, 0x80	; 128
     8c8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ca:	5f 4f       	sbci	r21, 0xFF	; 255
     8cc:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__muluhisi3>
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e8       	ldi	r19, 0x80	; 128
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <__divmodsi4>
     8dc:	69 01       	movw	r12, r18
     8de:	7a 01       	movw	r14, r20
     8e0:	20 93 4f 06 	sts	0x064F, r18
     8e4:	30 93 50 06 	sts	0x0650, r19
     8e8:	40 93 51 06 	sts	0x0651, r20
     8ec:	50 93 52 06 	sts	0x0652, r21
    B7 = (UP - B3) * (50000 >> oss);                    if(DEBUG) printf("B7 %lu\r\n", B7);
     8f0:	80 91 58 06 	lds	r24, 0x0658
     8f4:	90 91 59 06 	lds	r25, 0x0659
     8f8:	a0 91 5a 06 	lds	r26, 0x065A
     8fc:	b0 91 5b 06 	lds	r27, 0x065B
     900:	9c 01       	movw	r18, r24
     902:	ad 01       	movw	r20, r26
     904:	89 80       	ldd	r8, Y+1	; 0x01
     906:	9a 80       	ldd	r9, Y+2	; 0x02
     908:	ab 80       	ldd	r10, Y+3	; 0x03
     90a:	bc 80       	ldd	r11, Y+4	; 0x04
     90c:	28 19       	sub	r18, r8
     90e:	39 09       	sbc	r19, r9
     910:	4a 09       	sbc	r20, r10
     912:	5b 09       	sbc	r21, r11
     914:	80 e5       	ldi	r24, 0x50	; 80
     916:	93 ec       	ldi	r25, 0xC3	; 195
     918:	a0 e0       	ldi	r26, 0x00	; 0
     91a:	b0 e0       	ldi	r27, 0x00	; 0
     91c:	bc 01       	movw	r22, r24
     91e:	cd 01       	movw	r24, r26
     920:	04 c0       	rjmp	.+8      	; 0x92a <calc_true_press+0x224>
     922:	95 95       	asr	r25
     924:	87 95       	ror	r24
     926:	77 95       	ror	r23
     928:	67 95       	ror	r22
     92a:	1a 95       	dec	r17
     92c:	d2 f7       	brpl	.-12     	; 0x922 <calc_true_press+0x21c>
     92e:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <__mulsi3>
     932:	60 93 54 06 	sts	0x0654, r22
     936:	70 93 55 06 	sts	0x0655, r23
     93a:	80 93 56 06 	sts	0x0656, r24
     93e:	90 93 57 06 	sts	0x0657, r25

    if(B7 < 0x80000000)
     942:	97 fd       	sbrc	r25, 7
     944:	11 c0       	rjmp	.+34     	; 0x968 <calc_true_press+0x262>
       P = (B7 * 2)/ B4;
     946:	66 0f       	add	r22, r22
     948:	77 1f       	adc	r23, r23
     94a:	88 1f       	adc	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	a7 01       	movw	r20, r14
     950:	96 01       	movw	r18, r12
     952:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__udivmodsi4>
     956:	20 93 5c 06 	sts	0x065C, r18
     95a:	30 93 5d 06 	sts	0x065D, r19
     95e:	40 93 5e 06 	sts	0x065E, r20
     962:	50 93 5f 06 	sts	0x065F, r21
     966:	12 c0       	rjmp	.+36     	; 0x98c <calc_true_press+0x286>
    else
        P = (B7 / B4) * 2;
     968:	a7 01       	movw	r20, r14
     96a:	96 01       	movw	r18, r12
     96c:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__udivmodsi4>
     970:	da 01       	movw	r26, r20
     972:	c9 01       	movw	r24, r18
     974:	88 0f       	add	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	aa 1f       	adc	r26, r26
     97a:	bb 1f       	adc	r27, r27
     97c:	80 93 5c 06 	sts	0x065C, r24
     980:	90 93 5d 06 	sts	0x065D, r25
     984:	a0 93 5e 06 	sts	0x065E, r26
     988:	b0 93 5f 06 	sts	0x065F, r27
                                                        if(DEBUG) printf("P %li\r\n", P);
    X1 = (P / 256) * (P / 256);               if(DEBUG) printf("X1 %li\r\n", X1);
     98c:	c0 90 5c 06 	lds	r12, 0x065C
     990:	d0 90 5d 06 	lds	r13, 0x065D
     994:	e0 90 5e 06 	lds	r14, 0x065E
     998:	f0 90 5f 06 	lds	r15, 0x065F
     99c:	c7 01       	movw	r24, r14
     99e:	b6 01       	movw	r22, r12
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	31 e0       	ldi	r19, 0x01	; 1
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <__divmodsi4>
     9ac:	ca 01       	movw	r24, r20
     9ae:	b9 01       	movw	r22, r18
     9b0:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <__mulsi3>
     9b4:	9b 01       	movw	r18, r22
     9b6:	ac 01       	movw	r20, r24
//    X1 = (P / pow(2,8)) * (P / pow(2,8));               if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (X1 * 3038) / 65536;                       if(DEBUG) printf("X1 %li\r\n", X1);
     9b8:	ae ed       	ldi	r26, 0xDE	; 222
     9ba:	bb e0       	ldi	r27, 0x0B	; 11
     9bc:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__muluhisi3>
     9c0:	4c 01       	movw	r8, r24
     9c2:	bb 24       	eor	r11, r11
     9c4:	97 fc       	sbrc	r9, 7
     9c6:	b0 94       	com	r11
     9c8:	ab 2c       	mov	r10, r11
     9ca:	80 92 46 06 	sts	0x0646, r8
     9ce:	90 92 47 06 	sts	0x0647, r9
     9d2:	a0 92 48 06 	sts	0x0648, r10
     9d6:	b0 92 49 06 	sts	0x0649, r11
//    X1 = (X1 * 3038) / pow(2,16);                       if(DEBUG) printf("X1 %li\r\n", X1);
    X2 = (-7357 * P ) / 65536;                      if(DEBUG) printf("X2 %li\r\n", X2);
     9da:	a3 e4       	ldi	r26, 0x43	; 67
     9dc:	b3 ee       	ldi	r27, 0xE3	; 227
     9de:	a7 01       	movw	r20, r14
     9e0:	96 01       	movw	r18, r12
     9e2:	0e 94 6b 2f 	call	0x5ed6	; 0x5ed6 <__mulohisi3>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	41 e0       	ldi	r20, 0x01	; 1
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <__divmodsi4>
     9f2:	20 93 39 06 	sts	0x0639, r18
     9f6:	30 93 3a 06 	sts	0x063A, r19
     9fa:	40 93 3b 06 	sts	0x063B, r20
     9fe:	50 93 3c 06 	sts	0x063C, r21
//	X2 = (-7357 * P ) / pow(2,16);                      if(DEBUG) printf("X2 %li\r\n", X2);
//    P = P + (X1 + X2 + 3791) / pow(2,4);                if(DEBUG) printf("P %li\r\n", P);
    P = P + (X1 + X2 + 3791) / 16;                if(DEBUG) printf("P %li\r\n", P);
     a02:	d5 01       	movw	r26, r10
     a04:	c4 01       	movw	r24, r8
     a06:	82 0f       	add	r24, r18
     a08:	93 1f       	adc	r25, r19
     a0a:	a4 1f       	adc	r26, r20
     a0c:	b5 1f       	adc	r27, r21
     a0e:	bc 01       	movw	r22, r24
     a10:	cd 01       	movw	r24, r26
     a12:	61 53       	subi	r22, 0x31	; 49
     a14:	71 4f       	sbci	r23, 0xF1	; 241
     a16:	8f 4f       	sbci	r24, 0xFF	; 255
     a18:	9f 4f       	sbci	r25, 0xFF	; 255
     a1a:	20 e1       	ldi	r18, 0x10	; 16
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	40 e0       	ldi	r20, 0x00	; 0
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <__divmodsi4>
     a26:	c7 01       	movw	r24, r14
     a28:	b6 01       	movw	r22, r12
     a2a:	62 0f       	add	r22, r18
     a2c:	73 1f       	adc	r23, r19
     a2e:	84 1f       	adc	r24, r20
     a30:	95 1f       	adc	r25, r21
     a32:	60 93 5c 06 	sts	0x065C, r22
     a36:	70 93 5d 06 	sts	0x065D, r23
     a3a:	80 93 5e 06 	sts	0x065E, r24
     a3e:	90 93 5f 06 	sts	0x065F, r25

    if(DEBUG) printf("Pressure is %li Pascals\r\n", P);

    return P;

}
     a42:	28 96       	adiw	r28, 0x08	; 8
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	f8 94       	cli
     a48:	de bf       	out	0x3e, r29	; 62
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	cd bf       	out	0x3d, r28	; 61
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	ff 90       	pop	r15
     a56:	ef 90       	pop	r14
     a58:	df 90       	pop	r13
     a5a:	cf 90       	pop	r12
     a5c:	bf 90       	pop	r11
     a5e:	af 90       	pop	r10
     a60:	9f 90       	pop	r9
     a62:	8f 90       	pop	r8
     a64:	7f 90       	pop	r7
     a66:	6f 90       	pop	r6
     a68:	5f 90       	pop	r5
     a6a:	4f 90       	pop	r4
     a6c:	08 95       	ret

00000a6e <calc_true_temp>:


inline int32_t calc_true_temp(){
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29

    X1 = ((int32_t)UT - (int32_t)AC6) * (int32_t)AC5 / (int32_t)32768;
     a7e:	cb e1       	ldi	r28, 0x1B	; 27
     a80:	d6 e0       	ldi	r29, 0x06	; 6
     a82:	8a 85       	ldd	r24, Y+10	; 0x0a
     a84:	9b 85       	ldd	r25, Y+11	; 0x0b
     a86:	40 91 35 06 	lds	r20, 0x0635
     a8a:	50 91 36 06 	lds	r21, 0x0636
     a8e:	60 91 37 06 	lds	r22, 0x0637
     a92:	70 91 38 06 	lds	r23, 0x0638
     a96:	9a 01       	movw	r18, r20
     a98:	ab 01       	movw	r20, r22
     a9a:	28 1b       	sub	r18, r24
     a9c:	39 0b       	sbc	r19, r25
     a9e:	41 09       	sbc	r20, r1
     aa0:	51 09       	sbc	r21, r1
     aa2:	a8 85       	ldd	r26, Y+8	; 0x08
     aa4:	b9 85       	ldd	r27, Y+9	; 0x09
     aa6:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__muluhisi3>
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e8       	ldi	r19, 0x80	; 128
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <__divmodsi4>
     ab6:	69 01       	movw	r12, r18
     ab8:	7a 01       	movw	r14, r20
     aba:	20 93 46 06 	sts	0x0646, r18
     abe:	30 93 47 06 	sts	0x0647, r19
     ac2:	40 93 48 06 	sts	0x0648, r20
     ac6:	50 93 49 06 	sts	0x0649, r21
//    X1 = ((int32_t)UT - (int32_t)AC6) * (int32_t)AC5 / (int32_t)pow(2,15);
if(DEBUG) printf("X1 %li\r\n", X1);
//    X2 = (int32_t) MC * pow(2,11) / (X1 + MD);
    X2 = (int32_t) MC * 2048 / (X1 + MD);
     aca:	6a 89       	ldd	r22, Y+18	; 0x12
     acc:	7b 89       	ldd	r23, Y+19	; 0x13
     ace:	cb 01       	movw	r24, r22
     ad0:	aa 27       	eor	r26, r26
     ad2:	97 fd       	sbrc	r25, 7
     ad4:	a0 95       	com	r26
     ad6:	ba 2f       	mov	r27, r26
     ad8:	bc 01       	movw	r22, r24
     ada:	cd 01       	movw	r24, r26
     adc:	2b e0       	ldi	r18, 0x0B	; 11
     ade:	66 0f       	add	r22, r22
     ae0:	77 1f       	adc	r23, r23
     ae2:	88 1f       	adc	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	2a 95       	dec	r18
     ae8:	d1 f7       	brne	.-12     	; 0xade <calc_true_temp+0x70>
     aea:	0c 89       	ldd	r16, Y+20	; 0x14
     aec:	1d 89       	ldd	r17, Y+21	; 0x15
     aee:	22 27       	eor	r18, r18
     af0:	17 fd       	sbrc	r17, 7
     af2:	20 95       	com	r18
     af4:	32 2f       	mov	r19, r18
     af6:	a9 01       	movw	r20, r18
     af8:	98 01       	movw	r18, r16
     afa:	2c 0d       	add	r18, r12
     afc:	3d 1d       	adc	r19, r13
     afe:	4e 1d       	adc	r20, r14
     b00:	5f 1d       	adc	r21, r15
     b02:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <__divmodsi4>
     b06:	20 93 39 06 	sts	0x0639, r18
     b0a:	30 93 3a 06 	sts	0x063A, r19
     b0e:	40 93 3b 06 	sts	0x063B, r20
     b12:	50 93 3c 06 	sts	0x063C, r21
if(DEBUG) printf("X2 %li\r\n", X2);
    B5 = X1 + X2;
     b16:	d7 01       	movw	r26, r14
     b18:	c6 01       	movw	r24, r12
     b1a:	82 0f       	add	r24, r18
     b1c:	93 1f       	adc	r25, r19
     b1e:	a4 1f       	adc	r26, r20
     b20:	b5 1f       	adc	r27, r21
     b22:	80 93 41 06 	sts	0x0641, r24
     b26:	90 93 42 06 	sts	0x0642, r25
     b2a:	a0 93 43 06 	sts	0x0643, r26
     b2e:	b0 93 44 06 	sts	0x0644, r27
if(DEBUG) printf("B5 %li\r\n", B5);
//    T = (B5 + 8) / pow(2,4);
    T = (B5 + 8) / 16;
     b32:	bc 01       	movw	r22, r24
     b34:	cd 01       	movw	r24, r26
     b36:	68 5f       	subi	r22, 0xF8	; 248
     b38:	7f 4f       	sbci	r23, 0xFF	; 255
     b3a:	8f 4f       	sbci	r24, 0xFF	; 255
     b3c:	9f 4f       	sbci	r25, 0xFF	; 255
     b3e:	20 e1       	ldi	r18, 0x10	; 16
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <__divmodsi4>
     b4a:	20 93 3d 06 	sts	0x063D, r18
     b4e:	30 93 3e 06 	sts	0x063E, r19
     b52:	40 93 3f 06 	sts	0x063F, r20
     b56:	50 93 40 06 	sts	0x0640, r21
if(DEBUG) printf("XT %li\r\n", T);

    if(DEBUG) printf("Temperature is %li /10 degrees Celcius.\r\n", T);

    return T;
}
     b5a:	ca 01       	movw	r24, r20
     b5c:	b9 01       	movw	r22, r18
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	df 90       	pop	r13
     b6c:	cf 90       	pop	r12
     b6e:	08 95       	ret

00000b70 <read_uncomp_temp>:

void read_uncomp_temp(){
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	00 d0       	rcall	.+0      	; 0xb76 <read_uncomp_temp+0x6>
     b76:	1f 92       	push	r1
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62

    uint8_t write_buf[1];
    uint8_t rx_buf[2];
    uint8_t i;

    write_buf[0] = 0x2E;
     b7c:	8e e2       	ldi	r24, 0x2E	; 46
     b7e:	8b 83       	std	Y+3, r24	; 0x03

    // Step 1: Write 0x2E into register 0xF4
    ee24xx_write_bytes(0xF4, 1, write_buf);
     b80:	ae 01       	movw	r20, r28
     b82:	4d 5f       	subi	r20, 0xFD	; 253
     b84:	5f 4f       	sbci	r21, 0xFF	; 255
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	84 ef       	ldi	r24, 0xF4	; 244
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <ee24xx_write_bytes>

    // Step 2: Wait 4.5 ms
 //   nrk_wait_ticks(1000); // 1 tick is 1 ms I believe
    nrk_spin_wait_us(4500);
     b92:	84 e9       	ldi	r24, 0x94	; 148
     b94:	91 e1       	ldi	r25, 0x11	; 17
     b96:	0e 94 81 28 	call	0x5102	; 0x5102 <nrk_spin_wait_us>

    // Step 3: Read registers 0xF6, 0xF7
    ee24xx_read_bytes(0xF6, 2, rx_buf);
     b9a:	ae 01       	movw	r20, r28
     b9c:	4f 5f       	subi	r20, 0xFF	; 255
     b9e:	5f 4f       	sbci	r21, 0xFF	; 255
     ba0:	62 e0       	ldi	r22, 0x02	; 2
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	86 ef       	ldi	r24, 0xF6	; 246
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 52 07 	call	0xea4	; 0xea4 <ee24xx_read_bytes>
//    if(DEBUG){
  //      for(i = 0; i < 2; i++)
  //          printf("uncomp_temp[%i] is %u\r\n", i, rx_buf[i]);
  //  }

    UT = (((uint16_t)rx_buf[0] | 0x0000) << 8) | ((uint16_t)rx_buf[1]);
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	98 2f       	mov	r25, r24
     bb2:	88 27       	eor	r24, r24
     bb4:	2a 81       	ldd	r18, Y+2	; 0x02
     bb6:	82 2b       	or	r24, r18
     bb8:	a0 e0       	ldi	r26, 0x00	; 0
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	80 93 35 06 	sts	0x0635, r24
     bc0:	90 93 36 06 	sts	0x0636, r25
     bc4:	a0 93 37 06 	sts	0x0637, r26
     bc8:	b0 93 38 06 	sts	0x0638, r27

//    if(DEBUG)
  //   printf("UT is %i\r\n", UT);

}
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <calc_temp>:


int32_t calc_temp(){
    read_uncomp_temp();
     bd8:	0e 94 b8 05 	call	0xb70	; 0xb70 <read_uncomp_temp>
    return calc_true_temp();
     bdc:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <calc_true_temp>

00000be0 <read_uncomp_press>:
int32_t calc_press(uint8_t oss){
    read_uncomp_press(oss);
    return calc_true_press(oss);
}

void read_uncomp_press(uint8_t oss){
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <read_uncomp_press+0x8>
     be8:	00 d0       	rcall	.+0      	; 0xbea <read_uncomp_press+0xa>
     bea:	cd b7       	in	r28, 0x3d	; 61
     bec:	de b7       	in	r29, 0x3e	; 62
     bee:	18 2f       	mov	r17, r24

    uint8_t write_buf[1]; // Used to send a value to the Bosch sensor
    uint8_t rx_buf[3]; // Used to store the received values from the sensor
    uint8_t i;

    write_buf[0] = 0x34 + (oss << 6);
     bf0:	82 95       	swap	r24
     bf2:	88 0f       	add	r24, r24
     bf4:	88 0f       	add	r24, r24
     bf6:	80 7c       	andi	r24, 0xC0	; 192
     bf8:	8c 5c       	subi	r24, 0xCC	; 204
     bfa:	8c 83       	std	Y+4, r24	; 0x04

    // Step 1: Write 0x2E into register 0xF4
    ee24xx_write_bytes(0xF4, sizeof(write_buf), write_buf);
     bfc:	ae 01       	movw	r20, r28
     bfe:	4c 5f       	subi	r20, 0xFC	; 252
     c00:	5f 4f       	sbci	r21, 0xFF	; 255
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	84 ef       	ldi	r24, 0xF4	; 244
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <ee24xx_write_bytes>

    // Step 2: Wait 4.5 ms
//    nrk_wait_ticks(1000); // 1 tick is 1 ms I believe
    nrk_spin_wait_us(4500);
     c0e:	84 e9       	ldi	r24, 0x94	; 148
     c10:	91 e1       	ldi	r25, 0x11	; 17
     c12:	0e 94 81 28 	call	0x5102	; 0x5102 <nrk_spin_wait_us>

    // Step 3: Read registers 0xF6, 0xF7, 0xF8
    ee24xx_read_bytes(PRESS_BASE_REGISTER, sizeof(rx_buf), rx_buf);
     c16:	ae 01       	movw	r20, r28
     c18:	4f 5f       	subi	r20, 0xFF	; 255
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	63 e0       	ldi	r22, 0x03	; 3
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	86 ef       	ldi	r24, 0xF6	; 246
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 52 07 	call	0xea4	; 0xea4 <ee24xx_read_bytes>
    }
*/
     // Assemble the raw pressure value

     UP = ((uint32_t) rx_buf[0]) << 16;
     UP = UP  | ((uint32_t)(rx_buf[1]) << 8);
     c28:	2a 81       	ldd	r18, Y+2	; 0x02
            printf("uncomp_press[%i] is %u\r\n", i, rx_buf[i]);
    }
*/
     // Assemble the raw pressure value

     UP = ((uint32_t) rx_buf[0]) << 16;
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	a0 e0       	ldi	r26, 0x00	; 0
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	dc 01       	movw	r26, r24
     c34:	99 27       	eor	r25, r25
     c36:	88 27       	eor	r24, r24
     UP = UP  | ((uint32_t)(rx_buf[1]) << 8);
     c38:	92 2b       	or	r25, r18
     UP = UP  + rx_buf[2];
     c3a:	2b 81       	ldd	r18, Y+3	; 0x03
     c3c:	82 0f       	add	r24, r18
     c3e:	91 1d       	adc	r25, r1
     c40:	a1 1d       	adc	r26, r1
     c42:	b1 1d       	adc	r27, r1
     UP = UP >> (8-oss);
     c44:	28 e0       	ldi	r18, 0x08	; 8
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	21 1b       	sub	r18, r17
     c4a:	31 09       	sbc	r19, r1
     c4c:	04 c0       	rjmp	.+8      	; 0xc56 <read_uncomp_press+0x76>
     c4e:	b5 95       	asr	r27
     c50:	a7 95       	ror	r26
     c52:	97 95       	ror	r25
     c54:	87 95       	ror	r24
     c56:	2a 95       	dec	r18
     c58:	d2 f7       	brpl	.-12     	; 0xc4e <read_uncomp_press+0x6e>
     c5a:	80 93 58 06 	sts	0x0658, r24
     c5e:	90 93 59 06 	sts	0x0659, r25
     c62:	a0 93 5a 06 	sts	0x065A, r26
     c66:	b0 93 5b 06 	sts	0x065B, r27

 //    if(DEBUG)
 //    printf("UP is %li\r\n", UP);

}
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	08 95       	ret

00000c7a <calc_press>:
    read_uncomp_temp();
    return calc_true_temp();
}


int32_t calc_press(uint8_t oss){
     c7a:	cf 93       	push	r28
     c7c:	c8 2f       	mov	r28, r24
    read_uncomp_press(oss);
     c7e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <read_uncomp_press>
    return calc_true_press(oss);
     c82:	8c 2f       	mov	r24, r28
}
     c84:	cf 91       	pop	r28
}


int32_t calc_press(uint8_t oss){
    read_uncomp_press(oss);
    return calc_true_press(oss);
     c86:	0c 94 83 03 	jmp	0x706	; 0x706 <calc_true_press>

00000c8a <read>:
        return NRK_ERROR;
    else return NRK_OK;

}

int8_t read(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
     c8a:	af 92       	push	r10
     c8c:	bf 92       	push	r11
     c8e:	cf 92       	push	r12
     c90:	df 92       	push	r13
     c92:	ef 92       	push	r14
     c94:	ff 92       	push	r15
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29

    int32_t value_from_sensor;



    ADC_ENABLE();
     c9c:	80 91 7a 00 	lds	r24, 0x007A
     ca0:	80 68       	ori	r24, 0x80	; 128
     ca2:	80 93 7a 00 	sts	0x007A, r24
    uint8_t count = 0;
    // key and value get passed as opt and size
    uint8_t key = opt;
    uint8_t value = size;

    if (size != 1 && size != 2 && size != 4) return 0;
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	82 0f       	add	r24, r18
     caa:	82 30       	cpi	r24, 0x02	; 2
     cac:	18 f0       	brcs	.+6      	; 0xcb4 <read+0x2a>
     cae:	24 30       	cpi	r18, 0x04	; 4
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <read+0x2a>
     cb2:	a8 c0       	rjmp	.+336    	; 0xe04 <read+0x17a>
     cb4:	12 2f       	mov	r17, r18
     cb6:	ea 01       	movw	r28, r20
    if ((channel != TEMP2) && (channel != PRESS) && channel <= 7) {
     cb8:	80 91 4a 06 	lds	r24, 0x064A
     cbc:	88 30       	cpi	r24, 0x08	; 8
     cbe:	78 f4       	brcc	.+30     	; 0xcde <read+0x54>
        /* Conversion to 8-bit value*/
        uint16_t val = get_adc_val();
     cc0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <get_adc_val>

        if (size == 2) {
     cc4:	12 30       	cpi	r17, 0x02	; 2
     cc6:	19 f4       	brne	.+6      	; 0xcce <read+0x44>
            buffer[count] = val & 0xFF;
     cc8:	88 83       	st	Y, r24
            count++;
            buffer[count] = (val >> 8) & 0xFF;
     cca:	99 83       	std	Y+1, r25	; 0x01
     ccc:	1e c0       	rjmp	.+60     	; 0xd0a <read+0x80>
        }

        if (size == 1) {
     cce:	11 30       	cpi	r17, 0x01	; 1
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <read+0x4a>
     cd2:	7a c0       	rjmp	.+244    	; 0xdc8 <read+0x13e>
            buffer[count] = (val >> 2) & 0xFF;
     cd4:	96 95       	lsr	r25
     cd6:	87 95       	ror	r24
     cd8:	96 95       	lsr	r25
     cda:	87 95       	ror	r24
     cdc:	1e c0       	rjmp	.+60     	; 0xd1a <read+0x90>
        }


    } else if (channel == MOTION ){
     cde:	8d 30       	cpi	r24, 0x0D	; 13
     ce0:	f1 f4       	brne	.+60     	; 0xd1e <read+0x94>

	// Pull the pin low to dissipate charge otherwise it always floats high
	// In the future, we either need a buffer or a tiny pull down 
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_OUTPUT);
     ce2:	f0 90 36 02 	lds	r15, 0x0236
     ce6:	61 e0       	ldi	r22, 0x01	; 1
     ce8:	8f 2d       	mov	r24, r15
     cea:	0e 94 4f 14 	call	0x289e	; 0x289e <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTE_2);
     cee:	8f 2d       	mov	r24, r15
     cf0:	0e 94 a2 12 	call	0x2544	; 0x2544 <nrk_gpio_clr>
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_INPUT);
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	8f 2d       	mov	r24, r15
     cf8:	0e 94 4f 14 	call	0x289e	; 0x289e <nrk_gpio_direction>
	if(size==2) {buffer[count]=nrk_gpio_get(NRK_PORTE_2); count++; buffer[count]=0;  }
     cfc:	12 30       	cpi	r17, 0x02	; 2
     cfe:	39 f4       	brne	.+14     	; 0xd0e <read+0x84>
     d00:	8f 2d       	mov	r24, r15
     d02:	0e 94 1a 13 	call	0x2634	; 0x2634 <nrk_gpio_get>
     d06:	88 83       	st	Y, r24
     d08:	19 82       	std	Y+1, r1	; 0x01
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	74 c0       	rjmp	.+232    	; 0xdf6 <read+0x16c>
	if(size==1) {buffer[count]=nrk_gpio_get(NRK_PORTE_2); }
     d0e:	11 30       	cpi	r17, 0x01	; 1
     d10:	09 f0       	breq	.+2      	; 0xd14 <read+0x8a>
     d12:	5a c0       	rjmp	.+180    	; 0xdc8 <read+0x13e>
     d14:	8f 2d       	mov	r24, r15
     d16:	0e 94 1a 13 	call	0x2634	; 0x2634 <nrk_gpio_get>
     d1a:	88 83       	st	Y, r24
     d1c:	55 c0       	rjmp	.+170    	; 0xdc8 <read+0x13e>
     } 
	else if (channel == AUDIO_P2P) {
     d1e:	8c 30       	cpi	r24, 0x0C	; 12
     d20:	b9 f5       	brne	.+110    	; 0xd90 <read+0x106>
     d22:	a1 2c       	mov	r10, r1
     d24:	bb 24       	eor	r11, r11
     d26:	b3 94       	inc	r11
     d28:	e1 2c       	mov	r14, r1
     d2a:	f1 2c       	mov	r15, r1
     d2c:	cc 24       	eor	r12, r12
     d2e:	c3 94       	inc	r12
     d30:	64 e0       	ldi	r22, 0x04	; 4
     d32:	d6 2e       	mov	r13, r22
        uint16_t i;
        max = 0;
        min = 1025;
        for (i = 0; i < 256; i++) {
            // 10ms snapshot at around 11KHz measured on scope
	    ADC_SAMPLE_SINGLE();
     d34:	80 91 7a 00 	lds	r24, 0x007A
     d38:	80 64       	ori	r24, 0x40	; 64
     d3a:	80 93 7a 00 	sts	0x007A, r24
     d3e:	80 91 7a 00 	lds	r24, 0x007A
     d42:	84 ff       	sbrs	r24, 4
     d44:	fc cf       	rjmp	.-8      	; 0xd3e <read+0xb4>
            nrk_spin_wait_us(32);
     d46:	80 e2       	ldi	r24, 0x20	; 32
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 81 28 	call	0x5102	; 0x5102 <nrk_spin_wait_us>
    	    ADC_GET_SAMPLE_10(val);
     d4e:	80 91 78 00 	lds	r24, 0x0078
     d52:	20 91 79 00 	lds	r18, 0x0079
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	92 2b       	or	r25, r18
     d5a:	8c 15       	cp	r24, r12
     d5c:	9d 05       	cpc	r25, r13
     d5e:	08 f4       	brcc	.+2      	; 0xd62 <read+0xd8>
     d60:	6c 01       	movw	r12, r24
     d62:	e8 16       	cp	r14, r24
     d64:	f9 06       	cpc	r15, r25
     d66:	08 f4       	brcc	.+2      	; 0xd6a <read+0xe0>
     d68:	7c 01       	movw	r14, r24
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	a8 1a       	sub	r10, r24
     d6e:	b1 08       	sbc	r11, r1
        //uint16_t val=get_adc_val();
        uint16_t val, min, max;
        uint16_t i;
        max = 0;
        min = 1025;
        for (i = 0; i < 256; i++) {
     d70:	09 f7       	brne	.-62     	; 0xd34 <read+0xaa>
            nrk_spin_wait_us(32);
    	    ADC_GET_SAMPLE_10(val);
            if (val < min)min = val;
            if (val > max)max = val;
        }
        val = max - min;
     d72:	ec 18       	sub	r14, r12
     d74:	fd 08       	sbc	r15, r13
        if (size == 2) {
     d76:	12 30       	cpi	r17, 0x02	; 2
     d78:	19 f4       	brne	.+6      	; 0xd80 <read+0xf6>
            buffer[count] = val & 0xFF;
     d7a:	e8 82       	st	Y, r14
            count++;
            buffer[count] = (val >> 8) & 0xFF;
     d7c:	f9 82       	std	Y+1, r15	; 0x01
     d7e:	c5 cf       	rjmp	.-118    	; 0xd0a <read+0x80>
        }

        if (size == 1) {
     d80:	11 30       	cpi	r17, 0x01	; 1
     d82:	11 f5       	brne	.+68     	; 0xdc8 <read+0x13e>
            buffer[count] = (val >> 2) & 0xFF;
     d84:	f6 94       	lsr	r15
     d86:	e7 94       	ror	r14
     d88:	f6 94       	lsr	r15
     d8a:	e7 94       	ror	r14
     d8c:	e8 82       	st	Y, r14
     d8e:	1c c0       	rjmp	.+56     	; 0xdc8 <read+0x13e>
        }
    }
    else if(channel == HUMIDITY)
     d90:	8b 30       	cpi	r24, 0x0B	; 11
     d92:	e1 f4       	brne	.+56     	; 0xdcc <read+0x142>
    {
	h_cnt=0;
     d94:	10 92 53 06 	sts	0x0653, r1
	// Port F.2
	// Wait while pin is high
	do{
	}while((PINF & 0x4) == 0x4 );
     d98:	7a 99       	sbic	0x0f, 2	; 15
     d9a:	fe cf       	rjmp	.-4      	; 0xd98 <read+0x10e>
	// Wait while pin is low
	do{
	}while((PINF & 0x4) == 0 );
     d9c:	7a 9b       	sbis	0x0f, 2	; 15
     d9e:	fe cf       	rjmp	.-4      	; 0xd9c <read+0x112>
	//_nrk_high_speed_timer_stop();
	//_nrk_high_speed_timer_reset();
	//_nrk_high_speed_timer_start();
	do{
	// Make h_cnt only 8 bit so it accumulates faster
	h_cnt++;
     da0:	80 91 53 06 	lds	r24, 0x0653
     da4:	8f 5f       	subi	r24, 0xFF	; 255
     da6:	80 93 53 06 	sts	0x0653, r24
	}while((PINF & 0x4) == 0x4 );
     daa:	7a 99       	sbic	0x0f, 2	; 15
     dac:	f9 cf       	rjmp	.-14     	; 0xda0 <read+0x116>
//	h_cnt=_nrk_high_speed_timer_get();
	buffer[0]=h_cnt&0xff;
     dae:	88 83       	st	Y, r24
	buffer[1]=h_cnt >> 8;
     db0:	80 91 53 06 	lds	r24, 0x0653
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	19 82       	std	Y+1, r1	; 0x01
	buffer[2]=h_cnt >> 16;
     db8:	33 0f       	add	r19, r19
     dba:	22 0b       	sbc	r18, r18
     dbc:	32 2f       	mov	r19, r18
     dbe:	2a 83       	std	Y+2, r18	; 0x02
	buffer[3]=h_cnt >> 24;
     dc0:	99 0f       	add	r25, r25
     dc2:	88 0b       	sbc	r24, r24
     dc4:	98 2f       	mov	r25, r24
     dc6:	8b 83       	std	Y+3, r24	; 0x03
    int32_t value_from_sensor;



    ADC_ENABLE();
    uint8_t count = 0;
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	15 c0       	rjmp	.+42     	; 0xdf6 <read+0x16c>
	buffer[3]=h_cnt >> 24;

    }
    // Here the special cases of the I2C sensors (pressure and temperature)
    // are dealt with
    else if(channel == TEMP2 || channel == PRESS){
     dcc:	97 ef       	ldi	r25, 0xF7	; 247
     dce:	98 0f       	add	r25, r24
     dd0:	92 30       	cpi	r25, 0x02	; 2
     dd2:	d0 f7       	brcc	.-12     	; 0xdc8 <read+0x13e>

        // Size must be 2 for these measurements. If the user has specified 1,
        // give them a zero to indicate something is wrong
        if(size != 4)
     dd4:	24 30       	cpi	r18, 0x04	; 4
     dd6:	b1 f4       	brne	.+44     	; 0xe04 <read+0x17a>
            return 0;

        if(channel == TEMP2)
     dd8:	8a 30       	cpi	r24, 0x0A	; 10
     dda:	19 f4       	brne	.+6      	; 0xde2 <read+0x158>
	{
            value_from_sensor = calc_temp();
     ddc:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <calc_temp>
     de0:	05 c0       	rjmp	.+10     	; 0xdec <read+0x162>
	}
	    else{
            calc_temp(); /* Note this is neccessary because the pressure calculations depend upon the
     de2:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <calc_temp>
             raw temperature values*/
            value_from_sensor = calc_press(0); // OSS hard coded to 0 for now, doesn't really matter
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <calc_press>
        }
        // Now break up the value to fit in the buffer
        buffer[count] = value_from_sensor & 0xFF;
     dec:	68 83       	st	Y, r22
        count++;
        buffer[count] = (value_from_sensor >> 8 ) & 0xFF;
     dee:	79 83       	std	Y+1, r23	; 0x01
        count++;
        buffer[count] = (value_from_sensor >> 16 ) & 0xFF;
     df0:	8a 83       	std	Y+2, r24	; 0x02
        count++;
        buffer[count] = (value_from_sensor >> 24 ) & 0xFF;
     df2:	9b 83       	std	Y+3, r25	; 0x03
        buffer[count] = value_from_sensor & 0xFF;
        count++;
        buffer[count] = (value_from_sensor >> 8 ) & 0xFF;
        count++;
        buffer[count] = (value_from_sensor >> 16 ) & 0xFF;
        count++;
     df4:	83 e0       	ldi	r24, 0x03	; 3
        buffer[count] = (value_from_sensor >> 24 ) & 0xFF;

    }

    ADC_DISABLE();
     df6:	90 91 7a 00 	lds	r25, 0x007A
     dfa:	9f 77       	andi	r25, 0x7F	; 127
     dfc:	90 93 7a 00 	sts	0x007A, r25
    count++;
     e00:	8f 5f       	subi	r24, 0xFF	; 255
     e02:	01 c0       	rjmp	.+2      	; 0xe06 <read+0x17c>
    uint8_t count = 0;
    // key and value get passed as opt and size
    uint8_t key = opt;
    uint8_t value = size;

    if (size != 1 && size != 2 && size != 4) return 0;
     e04:	80 e0       	ldi	r24, 0x00	; 0
    ADC_DISABLE();
    count++;
    return count;


}
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	df 90       	pop	r13
     e12:	cf 90       	pop	r12
     e14:	bf 90       	pop	r11
     e16:	af 90       	pop	r10
     e18:	08 95       	ret

00000e1a <dev_manager_ff3_sensors>:



int8_t dev_manager_ff3_sensors(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {

    switch (action) {
     e1a:	82 30       	cpi	r24, 0x02	; 2
     e1c:	99 f0       	breq	.+38     	; 0xe44 <dev_manager_ff3_sensors+0x2a>
     e1e:	38 f4       	brcc	.+14     	; 0xe2e <dev_manager_ff3_sensors+0x14>
     e20:	88 23       	and	r24, r24
     e22:	69 f0       	breq	.+26     	; 0xe3e <dev_manager_ff3_sensors+0x24>
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	c9 f4       	brne	.+50     	; 0xe5a <dev_manager_ff3_sensors+0x40>

        case INIT:
            return init(action, opt, buffer, size);

        case OPEN:
            return open(action, opt, buffer, size);
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	0c 94 84 02 	jmp	0x508	; 0x508 <open>



int8_t dev_manager_ff3_sensors(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {

    switch (action) {
     e2e:	84 30       	cpi	r24, 0x04	; 4
     e30:	89 f0       	breq	.+34     	; 0xe54 <dev_manager_ff3_sensors+0x3a>
     e32:	58 f0       	brcs	.+22     	; 0xe4a <dev_manager_ff3_sensors+0x30>
     e34:	85 30       	cpi	r24, 0x05	; 5
     e36:	89 f4       	brne	.+34     	; 0xe5a <dev_manager_ff3_sensors+0x40>

        case OPEN:
            return open(action, opt, buffer, size);

        case READ:
            return read(action, opt, buffer, size);
     e38:	85 e0       	ldi	r24, 0x05	; 5
     e3a:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <read>
         * well as the I2C methods of getting inputs, even though only one of
         * them will be used at any given time.
         */

        case INIT:
            return init(action, opt, buffer, size);
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	0c 94 40 03 	jmp	0x680	; 0x680 <init>

        case READ:
            return read(action, opt, buffer, size);

        case CLOSE:
            return close(action, opt, buffer, size);
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	0c 94 ae 02 	jmp	0x55c	; 0x55c <close>

    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
     e4a:	61 30       	cpi	r22, 0x01	; 1
     e4c:	61 f4       	brne	.+24     	; 0xe66 <dev_manager_ff3_sensors+0x4c>
     e4e:	80 91 4a 06 	lds	r24, 0x064A
     e52:	08 95       	ret

        case GET_STATUS:
            return get_status(action, opt, buffer, size);

        case SET_STATUS:
            return set_status(action, opt, buffer, size);
     e54:	84 e0       	ldi	r24, 0x04	; 4
     e56:	0c 94 c4 02 	jmp	0x588	; 0x588 <set_status>

        default:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	8c e0       	ldi	r24, 0x0C	; 12
     e5e:	0e 94 ca 18 	call	0x3194	; 0x3194 <nrk_kernel_error_add>
            return 0;
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	08 95       	ret
    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
    return NRK_ERROR;
     e66:	8f ef       	ldi	r24, 0xFF	; 255

        default:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
            return 0;
    }
}
     e68:	08 95       	ret

00000e6a <set_i2c_device>:

uint8_t i2c_address; // The address of the slave node to write to

void set_i2c_device(uint8_t address)
{
    i2c_address = address;
     e6a:	80 93 65 06 	sts	0x0665, r24
     e6e:	08 95       	ret

00000e70 <init_i2c>:
{

  // Set up the SCL frequency
  // To operate at a clock frequency of 1 MHz, set TWBR and TWPS to 0
  // TODO: Generalize later
  TWBR = 0x02; // TWI Bit Rate Register
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	80 93 b8 00 	sts	0x00B8, r24
  TWSR = 0x00; // TWPS is the value of the prescaler in the TWI status register (the 2 LSB)
     e76:	10 92 b9 00 	sts	0x00B9, r1

  // Enable the SCL/SDA
  PRR0 = PRR0 & 0x7F; // Set the MSB in PRRO to 0 (see page 378)
     e7a:	e4 e6       	ldi	r30, 0x64	; 100
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	8f 77       	andi	r24, 0x7F	; 127
     e82:	80 83       	st	Z, r24
  TWCR = TWCR | 0x04; // Set the TWEN bit in the TWCR (see page 196)
     e84:	ec eb       	ldi	r30, 0xBC	; 188
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	84 60       	ori	r24, 0x04	; 4
     e8c:	80 83       	st	Z, r24
     e8e:	08 95       	ret

00000e90 <close_i2c>:

}

void close_i2c(void)
{
   PRR0 = PRR0 & 0xFF; // Set the MSB in PRRO to 1 (see page 378)
     e90:	e4 e6       	ldi	r30, 0x64	; 100
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	80 83       	st	Z, r24
   TWCR = TWCR & 0xFB; // Set the TWEN bit in the TWCR (see page 196)
     e98:	ec eb       	ldi	r30, 0xBC	; 188
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	8b 7f       	andi	r24, 0xFB	; 251
     ea0:	80 83       	st	Z, r24
     ea2:	08 95       	ret

00000ea4 <ee24xx_read_bytes>:

  uint8_t sla, twcr, n = 0;
  int rv = 0;

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);
     ea4:	97 70       	andi	r25, 0x07	; 7
     ea6:	99 0f       	add	r25, r25
     ea8:	20 91 65 06 	lds	r18, 0x0665
     eac:	92 2b       	or	r25, r18
     eae:	35 e6       	ldi	r19, 0x65	; 101
  restart:
  if (n++ >= MAX_ITER)
    return -1;
  begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
     eb0:	f4 ea       	ldi	r31, 0xA4	; 164
     eb2:	a4 ea       	ldi	r26, 0xA4	; 164
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
     eb4:	e4 e8       	ldi	r30, 0x84	; 132
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
     eb6:	b9 2f       	mov	r27, r25
     eb8:	b1 60       	ori	r27, 0x01	; 1
     eba:	31 50       	subi	r19, 0x01	; 1
  /*
   * Note [8]
   * First cycle: master transmitter mode
   */
  restart:
  if (n++ >= MAX_ITER)
     ebc:	09 f4       	brne	.+2      	; 0xec0 <ee24xx_read_bytes+0x1c>
     ebe:	8e c0       	rjmp	.+284    	; 0xfdc <ee24xx_read_bytes+0x138>
    return -1;
  begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
     ec0:	a0 93 bc 00 	sts	0x00BC, r26
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     ec4:	20 91 bc 00 	lds	r18, 0x00BC
     ec8:	27 ff       	sbrs	r18, 7
     eca:	fc cf       	rjmp	.-8      	; 0xec4 <ee24xx_read_bytes+0x20>
  switch ((twst = TW_STATUS))
     ecc:	20 91 b9 00 	lds	r18, 0x00B9
     ed0:	28 7f       	andi	r18, 0xF8	; 248
     ed2:	20 93 64 06 	sts	0x0664, r18
     ed6:	20 31       	cpi	r18, 0x10	; 16
     ed8:	29 f0       	breq	.+10     	; 0xee4 <ee24xx_read_bytes+0x40>
     eda:	28 33       	cpi	r18, 0x38	; 56
     edc:	89 f3       	breq	.-30     	; 0xec0 <ee24xx_read_bytes+0x1c>
     ede:	28 30       	cpi	r18, 0x08	; 8
     ee0:	09 f0       	breq	.+2      	; 0xee4 <ee24xx_read_bytes+0x40>
     ee2:	7c c0       	rjmp	.+248    	; 0xfdc <ee24xx_read_bytes+0x138>
				/* NB: do /not/ send stop condition */
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
     ee4:	90 93 bb 00 	sts	0x00BB, r25
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
     ee8:	e0 93 bc 00 	sts	0x00BC, r30
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     eec:	20 91 bc 00 	lds	r18, 0x00BC
     ef0:	27 ff       	sbrs	r18, 7
     ef2:	fc cf       	rjmp	.-8      	; 0xeec <ee24xx_read_bytes+0x48>
  switch ((twst = TW_STATUS))
     ef4:	20 91 b9 00 	lds	r18, 0x00B9
     ef8:	28 7f       	andi	r18, 0xF8	; 248
     efa:	20 93 64 06 	sts	0x0664, r18
     efe:	20 32       	cpi	r18, 0x20	; 32
     f00:	e1 f2       	breq	.-72     	; 0xeba <ee24xx_read_bytes+0x16>
     f02:	28 33       	cpi	r18, 0x38	; 56
     f04:	e9 f2       	breq	.-70     	; 0xec0 <ee24xx_read_bytes+0x1c>
     f06:	28 31       	cpi	r18, 0x18	; 24
     f08:	09 f0       	breq	.+2      	; 0xf0c <ee24xx_read_bytes+0x68>
     f0a:	61 c0       	rjmp	.+194    	; 0xfce <ee24xx_read_bytes+0x12a>

    default:
      goto error;		/* must send stop condition */
    }

  TWDR = eeaddr;		/* low 8 bits of addr */
     f0c:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
     f10:	e0 93 bc 00 	sts	0x00BC, r30
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     f14:	20 91 bc 00 	lds	r18, 0x00BC
     f18:	27 ff       	sbrs	r18, 7
     f1a:	fc cf       	rjmp	.-8      	; 0xf14 <ee24xx_read_bytes+0x70>
  switch ((twst = TW_STATUS))
     f1c:	20 91 b9 00 	lds	r18, 0x00B9
     f20:	28 7f       	andi	r18, 0xF8	; 248
     f22:	20 93 64 06 	sts	0x0664, r18
     f26:	20 33       	cpi	r18, 0x30	; 48
     f28:	09 f4       	brne	.+2      	; 0xf2c <ee24xx_read_bytes+0x88>
     f2a:	4e c0       	rjmp	.+156    	; 0xfc8 <ee24xx_read_bytes+0x124>
     f2c:	28 33       	cpi	r18, 0x38	; 56
     f2e:	41 f2       	breq	.-112    	; 0xec0 <ee24xx_read_bytes+0x1c>
     f30:	28 32       	cpi	r18, 0x28	; 40
     f32:	09 f0       	breq	.+2      	; 0xf36 <ee24xx_read_bytes+0x92>
     f34:	4c c0       	rjmp	.+152    	; 0xfce <ee24xx_read_bytes+0x12a>

  /*
   * Note [12]
   * Next cycle(s): master receiver mode
   */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send (rep.) start condition */
     f36:	f0 93 bc 00 	sts	0x00BC, r31
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     f3a:	20 91 bc 00 	lds	r18, 0x00BC
     f3e:	27 ff       	sbrs	r18, 7
     f40:	fc cf       	rjmp	.-8      	; 0xf3a <ee24xx_read_bytes+0x96>
  switch ((twst = TW_STATUS))
     f42:	20 91 b9 00 	lds	r18, 0x00B9
     f46:	28 7f       	andi	r18, 0xF8	; 248
     f48:	20 93 64 06 	sts	0x0664, r18
     f4c:	20 31       	cpi	r18, 0x10	; 16
     f4e:	29 f0       	breq	.+10     	; 0xf5a <ee24xx_read_bytes+0xb6>
     f50:	28 33       	cpi	r18, 0x38	; 56
     f52:	09 f4       	brne	.+2      	; 0xf56 <ee24xx_read_bytes+0xb2>
     f54:	b5 cf       	rjmp	.-150    	; 0xec0 <ee24xx_read_bytes+0x1c>
     f56:	28 30       	cpi	r18, 0x08	; 8
     f58:	d1 f5       	brne	.+116    	; 0xfce <ee24xx_read_bytes+0x12a>
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
     f5a:	b0 93 bb 00 	sts	0x00BB, r27
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
     f5e:	e0 93 bc 00 	sts	0x00BC, r30
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     f62:	20 91 bc 00 	lds	r18, 0x00BC
     f66:	27 ff       	sbrs	r18, 7
     f68:	fc cf       	rjmp	.-8      	; 0xf62 <ee24xx_read_bytes+0xbe>
  switch ((twst = TW_STATUS))
     f6a:	20 91 b9 00 	lds	r18, 0x00B9
     f6e:	28 7f       	andi	r18, 0xF8	; 248
     f70:	20 93 64 06 	sts	0x0664, r18
     f74:	20 34       	cpi	r18, 0x40	; 64
     f76:	29 f0       	breq	.+10     	; 0xf82 <ee24xx_read_bytes+0xde>
     f78:	28 34       	cpi	r18, 0x48	; 72
     f7a:	31 f1       	breq	.+76     	; 0xfc8 <ee24xx_read_bytes+0x124>
     f7c:	28 33       	cpi	r18, 0x38	; 56
     f7e:	39 f5       	brne	.+78     	; 0xfce <ee24xx_read_bytes+0x12a>
     f80:	9f cf       	rjmp	.-194    	; 0xec0 <ee24xx_read_bytes+0x1c>
     f82:	fa 01       	movw	r30, r20
     f84:	94 ec       	ldi	r25, 0xC4	; 196
     f86:	9f 01       	movw	r18, r30
     f88:	24 1b       	sub	r18, r20
     f8a:	35 0b       	sbc	r19, r21

    default:
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
     f8c:	16 16       	cp	r1, r22
     f8e:	17 06       	cpc	r1, r23
     f90:	04 f5       	brge	.+64     	; 0xfd2 <ee24xx_read_bytes+0x12e>
       len > 0;
       len--)
    {
      if (len == 1)
     f92:	61 30       	cpi	r22, 0x01	; 1
     f94:	71 05       	cpc	r23, r1
     f96:	09 f4       	brne	.+2      	; 0xf9a <ee24xx_read_bytes+0xf6>
	twcr = _BV(TWINT) | _BV(TWEN); /* send NAK this time */
     f98:	94 e8       	ldi	r25, 0x84	; 132
      TWCR = twcr;		/* clear int to start transmission */
     f9a:	90 93 bc 00 	sts	0x00BC, r25
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
     f9e:	80 91 bc 00 	lds	r24, 0x00BC
     fa2:	87 ff       	sbrs	r24, 7
     fa4:	fc cf       	rjmp	.-8      	; 0xf9e <ee24xx_read_bytes+0xfa>
      switch ((twst = TW_STATUS))
     fa6:	80 91 b9 00 	lds	r24, 0x00B9
     faa:	88 7f       	andi	r24, 0xF8	; 248
     fac:	80 93 64 06 	sts	0x0664, r24
     fb0:	80 35       	cpi	r24, 0x50	; 80
     fb2:	21 f0       	breq	.+8      	; 0xfbc <ee24xx_read_bytes+0x118>
     fb4:	88 35       	cpi	r24, 0x58	; 88
     fb6:	59 f4       	brne	.+22     	; 0xfce <ee24xx_read_bytes+0x12a>
	{
	case TW_MR_DATA_NACK:
	  len = 0;		/* force end of loop */
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	70 e0       	ldi	r23, 0x00	; 0
	  /* FALLTHROUGH */
	case TW_MR_DATA_ACK:
	  *buf++ = TWDR;
     fbc:	80 91 bb 00 	lds	r24, 0x00BB
     fc0:	81 93       	st	Z+, r24
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
       len > 0;
       len--)
     fc2:	61 50       	subi	r22, 0x01	; 1
     fc4:	71 09       	sbc	r23, r1
     fc6:	df cf       	rjmp	.-66     	; 0xf86 <ee24xx_read_bytes+0xe2>
ee24xx_read_bytes(uint16_t eeaddr, int len, uint8_t *buf)
{


  uint8_t sla, twcr, n = 0;
  int rv = 0;
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <ee24xx_read_bytes+0x12e>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

  error:
  rv = -1;
     fce:	2f ef       	ldi	r18, 0xFF	; 255
     fd0:	3f ef       	ldi	r19, 0xFF	; 255
	  goto error;
	}
    }
  quit:
  /* Note [14] */
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
     fd2:	84 e9       	ldi	r24, 0x94	; 148
     fd4:	80 93 bc 00 	sts	0x00BC, r24

  return rv;
     fd8:	c9 01       	movw	r24, r18
     fda:	08 95       	ret

    case TW_MT_ARB_LOST:	/* Note [9] */
      goto begin;

    default:
      return -1;		/* error: not in start condition */
     fdc:	8f ef       	ldi	r24, 0xFF	; 255
     fde:	9f ef       	ldi	r25, 0xFF	; 255
  return rv;

  error:
  rv = -1;
  goto quit;
}
     fe0:	08 95       	ret

00000fe2 <ee24xx_write_page>:
 * actual number of data byte written.  It is up to the caller to
 * re-invoke it in order to write further data.
 */
int
ee24xx_write_page(uint16_t eeaddr, int len, uint8_t *buf)
{
     fe2:	9c 01       	movw	r18, r24
  int rv = 0;
  uint16_t endaddr;



  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
     fe4:	68 0f       	add	r22, r24
     fe6:	79 1f       	adc	r23, r25
     fe8:	87 60       	ori	r24, 0x07	; 7
     fea:	68 17       	cp	r22, r24
     fec:	79 07       	cpc	r23, r25
     fee:	18 f0       	brcs	.+6      	; 0xff6 <ee24xx_write_page+0x14>
    endaddr = eeaddr + len;
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
     ff0:	bc 01       	movw	r22, r24
     ff2:	6f 5f       	subi	r22, 0xFF	; 255
     ff4:	7f 4f       	sbci	r23, 0xFF	; 255
  len = endaddr - eeaddr;

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);
     ff6:	83 2f       	mov	r24, r19
     ff8:	87 70       	andi	r24, 0x07	; 7
     ffa:	88 0f       	add	r24, r24
     ffc:	90 91 65 06 	lds	r25, 0x0665
    1000:	89 2b       	or	r24, r25
    1002:	e5 e6       	ldi	r30, 0x65	; 101
  if (n++ >= MAX_ITER)
    return -1;
  begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    1004:	a4 ea       	ldi	r26, 0xA4	; 164
				/* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1006:	f4 e8       	ldi	r31, 0x84	; 132
    1008:	e1 50       	subi	r30, 0x01	; 1

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);

  restart:
  if (n++ >= MAX_ITER)
    100a:	09 f4       	brne	.+2      	; 0x100e <ee24xx_write_page+0x2c>
    100c:	61 c0       	rjmp	.+194    	; 0x10d0 <ee24xx_write_page+0xee>
    return -1;
  begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    100e:	a0 93 bc 00 	sts	0x00BC, r26
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1012:	90 91 bc 00 	lds	r25, 0x00BC
    1016:	97 ff       	sbrs	r25, 7
    1018:	fc cf       	rjmp	.-8      	; 0x1012 <ee24xx_write_page+0x30>
  switch ((twst = TW_STATUS))
    101a:	90 91 b9 00 	lds	r25, 0x00B9
    101e:	98 7f       	andi	r25, 0xF8	; 248
    1020:	90 93 64 06 	sts	0x0664, r25
    1024:	90 31       	cpi	r25, 0x10	; 16
    1026:	29 f0       	breq	.+10     	; 0x1032 <ee24xx_write_page+0x50>
    1028:	98 33       	cpi	r25, 0x38	; 56
    102a:	89 f3       	breq	.-30     	; 0x100e <ee24xx_write_page+0x2c>
    102c:	98 30       	cpi	r25, 0x08	; 8
    102e:	09 f0       	breq	.+2      	; 0x1032 <ee24xx_write_page+0x50>
    1030:	4f c0       	rjmp	.+158    	; 0x10d0 <ee24xx_write_page+0xee>
        return -1;		/* error: not in start condition */
				/* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
    1032:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1036:	f0 93 bc 00 	sts	0x00BC, r31
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    103a:	90 91 bc 00 	lds	r25, 0x00BC
    103e:	97 ff       	sbrs	r25, 7
    1040:	fc cf       	rjmp	.-8      	; 0x103a <ee24xx_write_page+0x58>
  switch ((twst = TW_STATUS))
    1042:	90 91 b9 00 	lds	r25, 0x00B9
    1046:	98 7f       	andi	r25, 0xF8	; 248
    1048:	90 93 64 06 	sts	0x0664, r25
    104c:	90 32       	cpi	r25, 0x20	; 32
    104e:	e1 f2       	breq	.-72     	; 0x1008 <ee24xx_write_page+0x26>
    1050:	98 33       	cpi	r25, 0x38	; 56
    1052:	e9 f2       	breq	.-70     	; 0x100e <ee24xx_write_page+0x2c>
    1054:	98 31       	cpi	r25, 0x18	; 24
    1056:	a9 f5       	brne	.+106    	; 0x10c2 <ee24xx_write_page+0xe0>

    default:
        goto error;		/* must send stop condition */
    }

  TWDR = eeaddr;		/* low 8 bits of addr */
    1058:	20 93 bb 00 	sts	0x00BB, r18
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    105c:	f0 93 bc 00 	sts	0x00BC, r31
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1060:	90 91 bc 00 	lds	r25, 0x00BC
    1064:	97 ff       	sbrs	r25, 7
    1066:	fc cf       	rjmp	.-8      	; 0x1060 <ee24xx_write_page+0x7e>
  switch ((twst = TW_STATUS))
    1068:	90 91 b9 00 	lds	r25, 0x00B9
    106c:	98 7f       	andi	r25, 0xF8	; 248
    106e:	90 93 64 06 	sts	0x0664, r25
    1072:	90 33       	cpi	r25, 0x30	; 48
    1074:	19 f1       	breq	.+70     	; 0x10bc <ee24xx_write_page+0xda>
    1076:	98 33       	cpi	r25, 0x38	; 56
    1078:	51 f2       	breq	.-108    	; 0x100e <ee24xx_write_page+0x2c>
    107a:	98 32       	cpi	r25, 0x28	; 40
    107c:	11 f5       	brne	.+68     	; 0x10c2 <ee24xx_write_page+0xe0>

  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
    endaddr = eeaddr + len;
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
  len = endaddr - eeaddr;
    107e:	62 1b       	sub	r22, r18
    1080:	73 0b       	sbc	r23, r19
    1082:	fa 01       	movw	r30, r20
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    }

  for (; len > 0; len--)
    {
      TWDR = *buf++;
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
    1088:	44 e8       	ldi	r20, 0x84	; 132
    108a:	cb 01       	movw	r24, r22
    108c:	82 1b       	sub	r24, r18
    108e:	93 0b       	sbc	r25, r19
    default:

        goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
    1090:	18 16       	cp	r1, r24
    1092:	19 06       	cpc	r1, r25
    1094:	c4 f4       	brge	.+48     	; 0x10c6 <ee24xx_write_page+0xe4>
    {
      TWDR = *buf++;
    1096:	81 91       	ld	r24, Z+
    1098:	80 93 bb 00 	sts	0x00BB, r24
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
    109c:	40 93 bc 00 	sts	0x00BC, r20
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    10a0:	80 91 bc 00 	lds	r24, 0x00BC
    10a4:	87 ff       	sbrs	r24, 7
    10a6:	fc cf       	rjmp	.-8      	; 0x10a0 <ee24xx_write_page+0xbe>
      switch ((twst = TW_STATUS))
    10a8:	80 91 b9 00 	lds	r24, 0x00B9
    10ac:	88 7f       	andi	r24, 0xF8	; 248
    10ae:	80 93 64 06 	sts	0x0664, r24
    10b2:	88 32       	cpi	r24, 0x28	; 40
    10b4:	31 f4       	brne	.+12     	; 0x10c2 <ee24xx_write_page+0xe0>
	{
	case TW_MT_DATA_NACK:
	  goto error;		/* device write protected -- Note [16] */

	case TW_MT_DATA_ACK:
	  rv++;
    10b6:	2f 5f       	subi	r18, 0xFF	; 255
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	e7 cf       	rjmp	.-50     	; 0x108a <ee24xx_write_page+0xa8>
 */
int
ee24xx_write_page(uint16_t eeaddr, int len, uint8_t *buf)
{
  uint8_t sla, n = 0;
  int rv = 0;
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <ee24xx_write_page+0xe4>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

  error:
  rv = -1;
    10c2:	2f ef       	ldi	r18, 0xFF	; 255
    10c4:	3f ef       	ldi	r19, 0xFF	; 255
	default:
            goto error;
	}
    }
  quit:
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    10c6:	84 e9       	ldi	r24, 0x94	; 148
    10c8:	80 93 bc 00 	sts	0x00BC, r24

  return rv;
    10cc:	c9 01       	movw	r24, r18
    10ce:	08 95       	ret

    case TW_MT_ARB_LOST:
      goto begin;

    default:
        return -1;		/* error: not in start condition */
    10d0:	8f ef       	ldi	r24, 0xFF	; 255
    10d2:	9f ef       	ldi	r25, 0xFF	; 255
  return rv;

  error:
  rv = -1;
  goto quit;
}
    10d4:	08 95       	ret

000010d6 <ee24xx_write_bytes>:
 * function until either an error has been returned, or all bytes
 * have been written.
 */
int
ee24xx_write_bytes(uint16_t eeaddr, int len, uint8_t *buf)
{
    10d6:	cf 92       	push	r12
    10d8:	df 92       	push	r13
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	6c 01       	movw	r12, r24
    10e8:	8b 01       	movw	r16, r22
    10ea:	7a 01       	movw	r14, r20
  int rv, total;



  total = 0;
    10ec:	c0 e0       	ldi	r28, 0x00	; 0
    10ee:	d0 e0       	ldi	r29, 0x00	; 0
    {
#if DEBUG
      printf("Calling ee24xx_write_page(%d, %d, %p)",
	     eeaddr, len, buf);
#endif
      rv = ee24xx_write_page(eeaddr, len, buf);
    10f0:	a7 01       	movw	r20, r14
    10f2:	b8 01       	movw	r22, r16
    10f4:	c6 01       	movw	r24, r12
    10f6:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <ee24xx_write_page>
#if DEBUG
      printf(" => %d\n", rv);
#endif
      if (rv == -1)
    10fa:	8f 3f       	cpi	r24, 0xFF	; 255
    10fc:	2f ef       	ldi	r18, 0xFF	; 255
    10fe:	92 07       	cpc	r25, r18
    1100:	69 f0       	breq	.+26     	; 0x111c <ee24xx_write_bytes+0x46>
	return -1;
      eeaddr += rv;
    1102:	c8 0e       	add	r12, r24
    1104:	d9 1e       	adc	r13, r25
      len -= rv;
    1106:	08 1b       	sub	r16, r24
    1108:	19 0b       	sbc	r17, r25
      buf += rv;
    110a:	e8 0e       	add	r14, r24
    110c:	f9 1e       	adc	r15, r25
      total += rv;
    110e:	c8 0f       	add	r28, r24
    1110:	d9 1f       	adc	r29, r25
    }
  while (len > 0);
    1112:	10 16       	cp	r1, r16
    1114:	11 06       	cpc	r1, r17
    1116:	64 f3       	brlt	.-40     	; 0x10f0 <ee24xx_write_bytes+0x1a>

  return total;
    1118:	ce 01       	movw	r24, r28
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <ee24xx_write_bytes+0x4a>
      rv = ee24xx_write_page(eeaddr, len, buf);
#if DEBUG
      printf(" => %d\n", rv);
#endif
      if (rv == -1)
	return -1;
    111c:	8f ef       	ldi	r24, 0xFF	; 255
    111e:	9f ef       	ldi	r25, 0xFF	; 255
      total += rv;
    }
  while (len > 0);

  return total;
}
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	ff 90       	pop	r15
    112a:	ef 90       	pop	r14
    112c:	df 90       	pop	r13
    112e:	cf 90       	pop	r12
    1130:	08 95       	ret

00001132 <error>:

void
error(void)
{

  printf("error: TWI status %#x\n", twst);
    1132:	80 91 64 06 	lds	r24, 0x0664
    1136:	1f 92       	push	r1
    1138:	8f 93       	push	r24
    113a:	8e e8       	ldi	r24, 0x8E	; 142
    113c:	92 e0       	ldi	r25, 0x02	; 2
    113e:	9f 93       	push	r25
    1140:	8f 93       	push	r24
    1142:	0e 94 3b 31 	call	0x6276	; 0x6276 <printf>
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	08 95       	ret

00001150 <timer_3_callback>:
	return nrk_timer_int_start(timer);
}


/* this will overflow after 2^32uS (4000 seconds... 1h 6m 40s) */
void timer_3_callback(){
    1150:	cf 92       	push	r12
    1152:	df 92       	push	r13
    1154:	ff 92       	push	r15
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
	DISABLE_GLOBAL_INT();
    115e:	f8 94       	cli
    1160:	f0 90 84 06 	lds	r15, 0x0684
    1164:	00 91 85 06 	lds	r16, 0x0685
    1168:	10 91 86 06 	lds	r17, 0x0686
    116c:	d0 91 87 06 	lds	r29, 0x0687
    1170:	c0 91 88 06 	lds	r28, 0x0688
    1174:	b0 91 89 06 	lds	r27, 0x0689
    1178:	f0 91 8a 06 	lds	r31, 0x068A
    117c:	e0 91 8b 06 	lds	r30, 0x068B
	//current_time_ms += 1;
	while (TCNT3 > TICKS_PER_MS){
    1180:	c0 90 94 00 	lds	r12, 0x0094
    1184:	d0 90 95 00 	lds	r13, 0x0095
    1188:	2f 2d       	mov	r18, r15
    118a:	30 2f       	mov	r19, r16
    118c:	41 2f       	mov	r20, r17
    118e:	5d 2f       	mov	r21, r29
    1190:	6c 2f       	mov	r22, r28
    1192:	7b 2f       	mov	r23, r27
    1194:	8f 2f       	mov	r24, r31
    1196:	9e 2f       	mov	r25, r30
    1198:	a1 e0       	ldi	r26, 0x01	; 1
    119a:	0e 94 69 30 	call	0x60d2	; 0x60d2 <__adddi3_s8>
    119e:	a5 e7       	ldi	r26, 0x75	; 117
    11a0:	ca 16       	cp	r12, r26
    11a2:	af e3       	ldi	r26, 0x3F	; 63
    11a4:	da 06       	cpc	r13, r26
    11a6:	98 f0       	brcs	.+38     	; 0x11ce <timer_3_callback+0x7e>
		TCNT3 -= TICKS_PER_MS;
    11a8:	e0 91 94 00 	lds	r30, 0x0094
    11ac:	f0 91 95 00 	lds	r31, 0x0095
    11b0:	e4 57       	subi	r30, 0x74	; 116
    11b2:	ff 43       	sbci	r31, 0x3F	; 63
    11b4:	f0 93 95 00 	sts	0x0095, r31
    11b8:	e0 93 94 00 	sts	0x0094, r30
    11bc:	f2 2e       	mov	r15, r18
    11be:	03 2f       	mov	r16, r19
    11c0:	14 2f       	mov	r17, r20
    11c2:	d5 2f       	mov	r29, r21
    11c4:	c6 2f       	mov	r28, r22
    11c6:	b7 2f       	mov	r27, r23
    11c8:	f8 2f       	mov	r31, r24
    11ca:	e9 2f       	mov	r30, r25
    11cc:	d9 cf       	rjmp	.-78     	; 0x1180 <timer_3_callback+0x30>
    11ce:	f0 92 84 06 	sts	0x0684, r15
    11d2:	00 93 85 06 	sts	0x0685, r16
    11d6:	10 93 86 06 	sts	0x0686, r17
    11da:	d0 93 87 06 	sts	0x0687, r29
    11de:	c0 93 88 06 	sts	0x0688, r28
    11e2:	b0 93 89 06 	sts	0x0689, r27
    11e6:	f0 93 8a 06 	sts	0x068A, r31
    11ea:	e0 93 8b 06 	sts	0x068B, r30
		current_time_ms += 1;
	}
	ENABLE_GLOBAL_INT();
    11ee:	78 94       	sei
}
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	0f 91       	pop	r16
    11f8:	ff 90       	pop	r15
    11fa:	df 90       	pop	r13
    11fc:	cf 90       	pop	r12
    11fe:	08 95       	ret

00001200 <rx_finished_callback>:

/* this will be called whenver flash listening is on */
void rx_finished_callback()
{
	//receive the packet
	nrk_led_set(ORANGE_LED);
    1200:	82 e0       	ldi	r24, 0x02	; 2
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <nrk_led_set>
	flash_pkt_received = true;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	80 93 72 06 	sts	0x0672, r24
    120e:	08 95       	ret

00001210 <nrk_time_compare>:

// return 1 if a > b
// return 0 if a == b
// return -1 if a < b
int8_t nrk_time_compare(nrk_time_t *a, nrk_time_t *b)
{
    1210:	0f 93       	push	r16
    1212:	1f 93       	push	r17
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	8c 01       	movw	r16, r24
    121a:	eb 01       	movw	r28, r22
	nrk_time_compact_nanos(a);
    121c:	0e 94 20 23 	call	0x4640	; 0x4640 <nrk_time_compact_nanos>
	nrk_time_compact_nanos(b);
    1220:	ce 01       	movw	r24, r28
    1222:	0e 94 20 23 	call	0x4640	; 0x4640 <nrk_time_compact_nanos>
	if (a->secs > b->secs)
    1226:	f8 01       	movw	r30, r16
    1228:	40 81       	ld	r20, Z
    122a:	51 81       	ldd	r21, Z+1	; 0x01
    122c:	62 81       	ldd	r22, Z+2	; 0x02
    122e:	73 81       	ldd	r23, Z+3	; 0x03
    1230:	88 81       	ld	r24, Y
    1232:	99 81       	ldd	r25, Y+1	; 0x01
    1234:	aa 81       	ldd	r26, Y+2	; 0x02
    1236:	bb 81       	ldd	r27, Y+3	; 0x03
    1238:	84 17       	cp	r24, r20
    123a:	95 07       	cpc	r25, r21
    123c:	a6 07       	cpc	r26, r22
    123e:	b7 07       	cpc	r27, r23
    1240:	00 f1       	brcs	.+64     	; 0x1282 <nrk_time_compare+0x72>
		return 1;
	if (a->secs < b->secs)
    1242:	48 17       	cp	r20, r24
    1244:	59 07       	cpc	r21, r25
    1246:	6a 07       	cpc	r22, r26
    1248:	7b 07       	cpc	r23, r27
    124a:	e8 f0       	brcs	.+58     	; 0x1286 <nrk_time_compare+0x76>
		return -1;
	if (a->secs == b->secs)
    124c:	48 17       	cp	r20, r24
    124e:	59 07       	cpc	r21, r25
    1250:	6a 07       	cpc	r22, r26
    1252:	7b 07       	cpc	r23, r27
    1254:	d1 f4       	brne	.+52     	; 0x128a <nrk_time_compare+0x7a>
	{
		if (a->nano_secs > b->nano_secs)
    1256:	04 81       	ldd	r16, Z+4	; 0x04
    1258:	15 81       	ldd	r17, Z+5	; 0x05
    125a:	26 81       	ldd	r18, Z+6	; 0x06
    125c:	37 81       	ldd	r19, Z+7	; 0x07
    125e:	4c 81       	ldd	r20, Y+4	; 0x04
    1260:	5d 81       	ldd	r21, Y+5	; 0x05
    1262:	6e 81       	ldd	r22, Y+6	; 0x06
    1264:	7f 81       	ldd	r23, Y+7	; 0x07
int8_t nrk_time_compare(nrk_time_t *a, nrk_time_t *b)
{
	nrk_time_compact_nanos(a);
	nrk_time_compact_nanos(b);
	if (a->secs > b->secs)
		return 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
	if (a->secs < b->secs)
		return -1;
	if (a->secs == b->secs)
	{
		if (a->nano_secs > b->nano_secs)
    1268:	40 17       	cp	r20, r16
    126a:	51 07       	cpc	r21, r17
    126c:	62 07       	cpc	r22, r18
    126e:	73 07       	cpc	r23, r19
    1270:	68 f0       	brcs	.+26     	; 0x128c <nrk_time_compare+0x7c>
			return 1;
		if (a->nano_secs < b->nano_secs)
    1272:	04 17       	cp	r16, r20
    1274:	15 07       	cpc	r17, r21
    1276:	26 07       	cpc	r18, r22
    1278:	37 07       	cpc	r19, r23
    127a:	08 f0       	brcs	.+2      	; 0x127e <nrk_time_compare+0x6e>
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	81 95       	neg	r24
    1280:	05 c0       	rjmp	.+10     	; 0x128c <nrk_time_compare+0x7c>
int8_t nrk_time_compare(nrk_time_t *a, nrk_time_t *b)
{
	nrk_time_compact_nanos(a);
	nrk_time_compact_nanos(b);
	if (a->secs > b->secs)
		return 1;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	03 c0       	rjmp	.+6      	; 0x128c <nrk_time_compare+0x7c>
	if (a->secs < b->secs)
		return -1;
    1286:	8f ef       	ldi	r24, 0xFF	; 255
    1288:	01 c0       	rjmp	.+2      	; 0x128c <nrk_time_compare+0x7c>
		if (a->nano_secs > b->nano_secs)
			return 1;
		if (a->nano_secs < b->nano_secs)
			return -1;
	}
	return 0;
    128a:	80 e0       	ldi	r24, 0x00	; 0
}
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	08 95       	ret

00001296 <flash_msg_len_set>:

void flash_msg_len_set(uint16_t msg_len)
{
	flash_message_len = msg_len;
    1296:	90 93 52 04 	sts	0x0452, r25
    129a:	80 93 51 04 	sts	0x0451, r24
    129e:	08 95       	ret

000012a0 <flash_msg_len_get>:
}

uint16_t flash_msg_len_get()
{
	return flash_message_len;
}
    12a0:	80 91 51 04 	lds	r24, 0x0451
    12a4:	90 91 52 04 	lds	r25, 0x0452
    12a8:	08 95       	ret

000012aa <flash_rf_power_set>:

int8_t flash_rf_power_set(uint8_t power)
{
	if (power>31) return NRK_ERROR;
    12aa:	80 32       	cpi	r24, 0x20	; 32
    12ac:	20 f4       	brcc	.+8      	; 0x12b6 <flash_rf_power_set+0xc>
	rf_tx_power(power);
    12ae:	0e 94 c4 0c 	call	0x1988	; 0x1988 <rf_tx_power>
	return NRK_OK;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	08 95       	ret
	return flash_message_len;
}

int8_t flash_rf_power_set(uint8_t power)
{
	if (power>31) return NRK_ERROR;
    12b6:	8f ef       	ldi	r24, 0xFF	; 255
	rf_tx_power(power);
	return NRK_OK;
}
    12b8:	08 95       	ret

000012ba <flash_err_count_reset>:

void flash_err_count_reset()
{
	flash_err_count = 0;
    12ba:	10 92 4d 04 	sts	0x044D, r1
    12be:	10 92 4e 04 	sts	0x044E, r1
    12c2:	10 92 4f 04 	sts	0x044F, r1
    12c6:	10 92 50 04 	sts	0x0450, r1
    12ca:	08 95       	ret

000012cc <flash_err_count_get>:
}

uint32_t flash_err_count_get()
{
	return flash_err_count;
    12cc:	60 91 4d 04 	lds	r22, 0x044D
    12d0:	70 91 4e 04 	lds	r23, 0x044E
    12d4:	80 91 4f 04 	lds	r24, 0x044F
    12d8:	90 91 50 04 	lds	r25, 0x0450
}
    12dc:	08 95       	ret

000012de <flash_tx_pkt>:

void flash_tx_pkt(uint8_t *buf, uint8_t len)
{
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	1f 92       	push	r1
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	8c 01       	movw	r16, r24
	nrk_led_set(BLUE_LED);
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	69 83       	std	Y+1, r22	; 0x01
    12f4:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <nrk_led_set>
	flash_rfTxInfo.pPayload = buf;
    12f8:	ec e8       	ldi	r30, 0x8C	; 140
    12fa:	f6 e0       	ldi	r31, 0x06	; 6
    12fc:	14 83       	std	Z+4, r17	; 0x04
    12fe:	03 83       	std	Z+3, r16	; 0x03
	flash_rfTxInfo.length = len;
    1300:	69 81       	ldd	r22, Y+1	; 0x01
    1302:	62 83       	std	Z+2, r22	; 0x02
	if(rf_tx_packet_blocking(&flash_rfTxInfo) == NRK_ERROR){
    1304:	cf 01       	movw	r24, r30
    1306:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <rf_tx_packet_blocking>
	if (rf_tx_packet_blocking(&flash_rfTxInfo) == NRK_ERROR){
		printf("ERROR: TX timed out\r\n");
	}
#endif
	
	nrk_led_clr(BLUE_LED);
    130a:	83 e0       	ldi	r24, 0x03	; 3
    130c:	90 e0       	ldi	r25, 0x00	; 0
}
    130e:	0f 90       	pop	r0
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
	if (rf_tx_packet_blocking(&flash_rfTxInfo) == NRK_ERROR){
		printf("ERROR: TX timed out\r\n");
	}
#endif
	
	nrk_led_clr(BLUE_LED);
    1318:	0c 94 4a 15 	jmp	0x2a94	; 0x2a94 <nrk_led_clr>

0000131c <flash_tx_callback_set>:
}

void flash_tx_callback_set(void(*callback)(uint16_t, uint8_t *))
{
	//flash_tx_callback = callback;
	tx_start_callback(callback);
    131c:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <tx_start_callback>

00001320 <flash_run_tests>:
}

void flash_run_tests()
{
    1320:	0f 93       	push	r16
    1322:	1f 93       	push	r17
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	60 97       	sbiw	r28, 0x10	; 16
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
	bool bad = false;
	nrk_time_t t1, t2;
	t1.secs = 1;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	a0 e0       	ldi	r26, 0x00	; 0
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	89 87       	std	Y+9, r24	; 0x09
    1342:	9a 87       	std	Y+10, r25	; 0x0a
    1344:	ab 87       	std	Y+11, r26	; 0x0b
    1346:	bc 87       	std	Y+12, r27	; 0x0c
	t2.secs = 2;
    1348:	82 e0       	ldi	r24, 0x02	; 2
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a0 e0       	ldi	r26, 0x00	; 0
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	9a 83       	std	Y+2, r25	; 0x02
    1354:	ab 83       	std	Y+3, r26	; 0x03
    1356:	bc 83       	std	Y+4, r27	; 0x04
	if (nrk_time_compare(&t1, &t2) != -1)
    1358:	be 01       	movw	r22, r28
    135a:	6f 5f       	subi	r22, 0xFF	; 255
    135c:	7f 4f       	sbci	r23, 0xFF	; 255
    135e:	ce 01       	movw	r24, r28
    1360:	09 96       	adiw	r24, 0x09	; 9
    1362:	0e 94 08 09 	call	0x1210	; 0x1210 <nrk_time_compare>
    1366:	08 2f       	mov	r16, r24
		bad = true;
	if (nrk_time_compare(&t2, &t1) != 1)
    1368:	be 01       	movw	r22, r28
    136a:	67 5f       	subi	r22, 0xF7	; 247
    136c:	7f 4f       	sbci	r23, 0xFF	; 255
    136e:	ce 01       	movw	r24, r28
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	0e 94 08 09 	call	0x1210	; 0x1210 <nrk_time_compare>
		bad = true;
    1376:	11 e0       	ldi	r17, 0x01	; 1
	nrk_time_t t1, t2;
	t1.secs = 1;
	t2.secs = 2;
	if (nrk_time_compare(&t1, &t2) != -1)
		bad = true;
	if (nrk_time_compare(&t2, &t1) != 1)
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	19 f4       	brne	.+6      	; 0x1382 <flash_run_tests+0x62>
{
	bool bad = false;
	nrk_time_t t1, t2;
	t1.secs = 1;
	t2.secs = 2;
	if (nrk_time_compare(&t1, &t2) != -1)
    137c:	0f 3f       	cpi	r16, 0xFF	; 255
    137e:	09 f4       	brne	.+2      	; 0x1382 <flash_run_tests+0x62>
    1380:	10 e0       	ldi	r17, 0x00	; 0
		bad = true;
	if (nrk_time_compare(&t2, &t1) != 1)
		bad = true;
	t2.secs = 1;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a0 e0       	ldi	r26, 0x00	; 0
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	9a 83       	std	Y+2, r25	; 0x02
    138e:	ab 83       	std	Y+3, r26	; 0x03
    1390:	bc 83       	std	Y+4, r27	; 0x04
	t1.nano_secs = 30;
    1392:	8e e1       	ldi	r24, 0x1E	; 30
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	a0 e0       	ldi	r26, 0x00	; 0
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	8d 87       	std	Y+13, r24	; 0x0d
    139c:	9e 87       	std	Y+14, r25	; 0x0e
    139e:	af 87       	std	Y+15, r26	; 0x0f
    13a0:	b8 8b       	std	Y+16, r27	; 0x10
	t2.nano_secs = 31;
    13a2:	8f e1       	ldi	r24, 0x1F	; 31
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	a0 e0       	ldi	r26, 0x00	; 0
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	8d 83       	std	Y+5, r24	; 0x05
    13ac:	9e 83       	std	Y+6, r25	; 0x06
    13ae:	af 83       	std	Y+7, r26	; 0x07
    13b0:	b8 87       	std	Y+8, r27	; 0x08
	if (nrk_time_compare(&t1, &t2) != -1)
    13b2:	be 01       	movw	r22, r28
    13b4:	6f 5f       	subi	r22, 0xFF	; 255
    13b6:	7f 4f       	sbci	r23, 0xFF	; 255
    13b8:	ce 01       	movw	r24, r28
    13ba:	09 96       	adiw	r24, 0x09	; 9
    13bc:	0e 94 08 09 	call	0x1210	; 0x1210 <nrk_time_compare>
    13c0:	8f 3f       	cpi	r24, 0xFF	; 255
    13c2:	09 f0       	breq	.+2      	; 0x13c6 <flash_run_tests+0xa6>
		bad = true;
    13c4:	11 e0       	ldi	r17, 0x01	; 1
	if (nrk_time_compare(&t2, &t1) != 1)
    13c6:	be 01       	movw	r22, r28
    13c8:	67 5f       	subi	r22, 0xF7	; 247
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	ce 01       	movw	r24, r28
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	0e 94 08 09 	call	0x1210	; 0x1210 <nrk_time_compare>
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	09 f0       	breq	.+2      	; 0x13da <flash_run_tests+0xba>
		bad = true;
    13d8:	11 e0       	ldi	r17, 0x01	; 1
	t2.nano_secs = 30;
    13da:	8e e1       	ldi	r24, 0x1E	; 30
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	a0 e0       	ldi	r26, 0x00	; 0
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	8d 83       	std	Y+5, r24	; 0x05
    13e4:	9e 83       	std	Y+6, r25	; 0x06
    13e6:	af 83       	std	Y+7, r26	; 0x07
    13e8:	b8 87       	std	Y+8, r27	; 0x08
	if (nrk_time_compare(&t1, &t2) != 0)
    13ea:	be 01       	movw	r22, r28
    13ec:	6f 5f       	subi	r22, 0xFF	; 255
    13ee:	7f 4f       	sbci	r23, 0xFF	; 255
    13f0:	ce 01       	movw	r24, r28
    13f2:	09 96       	adiw	r24, 0x09	; 9
    13f4:	0e 94 08 09 	call	0x1210	; 0x1210 <nrk_time_compare>
    13f8:	81 11       	cpse	r24, r1
		bad = true;
    13fa:	11 e0       	ldi	r17, 0x01	; 1
	if (nrk_time_compare(&t2, &t1) != 0)
    13fc:	be 01       	movw	r22, r28
    13fe:	67 5f       	subi	r22, 0xF7	; 247
    1400:	7f 4f       	sbci	r23, 0xFF	; 255
    1402:	ce 01       	movw	r24, r28
    1404:	01 96       	adiw	r24, 0x01	; 1
    1406:	0e 94 08 09 	call	0x1210	; 0x1210 <nrk_time_compare>
    140a:	81 11       	cpse	r24, r1
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <flash_run_tests+0xf2>
		bad = true;
	if (bad){
    140e:	11 23       	and	r17, r17
    1410:	41 f0       	breq	.+16     	; 0x1422 <flash_run_tests+0x102>
		printf("time compare error\r\n");
    1412:	85 ea       	ldi	r24, 0xA5	; 165
    1414:	92 e0       	ldi	r25, 0x02	; 2
    1416:	0e 94 55 31 	call	0x62aa	; 0x62aa <puts>
		exit(1);
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 79 33 	call	0x66f2	; 0x66f2 <_exit>
	}
}
    1422:	60 96       	adiw	r28, 0x10	; 16
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	08 95       	ret

00001438 <flash_init>:

int8_t flash_init (uint8_t chan)
{	
    1438:	cf 93       	push	r28
    143a:	c8 2f       	mov	r28, r24
	// tests to ensure proper performance of sub-modules
#ifdef DEBUG 
	flash_run_tests(); 
    143c:	0e 94 90 09 	call	0x1320	; 0x1320 <flash_run_tests>
#endif
	// 16 byte payload and 1 byte header for flash id and re tx number
	flash_message_len = RF_MAX_PAYLOAD_SIZE;
    1440:	84 e7       	ldi	r24, 0x74	; 116
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	90 93 52 04 	sts	0x0452, r25
    1448:	80 93 51 04 	sts	0x0451, r24
	
	flash_err_count = 0;
    144c:	10 92 4d 04 	sts	0x044D, r1
    1450:	10 92 4e 04 	sts	0x044E, r1
    1454:	10 92 4f 04 	sts	0x044F, r1
    1458:	10 92 50 04 	sts	0x0450, r1
	flash_rfRxInfo.pPayload = flash_buf;
    145c:	e6 e6       	ldi	r30, 0x66	; 102
    145e:	f6 e0       	ldi	r31, 0x06	; 6
    1460:	8a ec       	ldi	r24, 0xCA	; 202
    1462:	93 e0       	ldi	r25, 0x03	; 3
    1464:	96 83       	std	Z+6, r25	; 0x06
    1466:	85 83       	std	Z+5, r24	; 0x05
	flash_rfRxInfo.max_length = RF_MAX_PAYLOAD_SIZE;
    1468:	84 e7       	ldi	r24, 0x74	; 116
    146a:	84 83       	std	Z+4, r24	; 0x04
	flash_rfRxInfo.ackRequest = 0;
    146c:	17 82       	std	Z+7, r1	; 0x07
	
	flash_rfTxInfo.ackRequest = 0;
    146e:	ec e8       	ldi	r30, 0x8C	; 140
    1470:	f6 e0       	ldi	r31, 0x06	; 6
    1472:	16 82       	std	Z+6, r1	; 0x06
	flash_rfTxInfo.destAddr = 0;
    1474:	11 82       	std	Z+1, r1	; 0x01
    1476:	10 82       	st	Z, r1
	flash_rfTxInfo.cca = 0;
    1478:	15 82       	std	Z+5, r1	; 0x05

	//set callback functions for start and end of packet reception
	rx_start_callback(rx_started_callback);
    147a:	8e e2       	ldi	r24, 0x2E	; 46
    147c:	9b e0       	ldi	r25, 0x0B	; 11
    147e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <rx_start_callback>
	rx_end_callback(rx_finished_callback);
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	99 e0       	ldi	r25, 0x09	; 9
    1486:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <rx_end_callback>
    
	rf_power_up();
    148a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <rf_power_up>
	rf_init (&flash_rfRxInfo, chan, 0xffff, 0);
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	4f ef       	ldi	r20, 0xFF	; 255
    1494:	5f ef       	ldi	r21, 0xFF	; 255
    1496:	6c 2f       	mov	r22, r28
    1498:	86 e6       	ldi	r24, 0x66	; 102
    149a:	96 e0       	ldi	r25, 0x06	; 6
    149c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <rf_init>
	nrk_int_enable();
    14a0:	0e 94 80 16 	call	0x2d00	; 0x2d00 <nrk_int_enable>

	// Setup channel number
	flash_chan = chan;
    14a4:	c0 93 4c 04 	sts	0x044C, r28
	flash_started = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	80 93 4a 04 	sts	0x044A, r24
	auto_re_tx = 1;
    14ae:	80 93 73 06 	sts	0x0673, r24
    return NRK_OK;
}
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <flash_set_retransmit>:

void flash_set_retransmit(uint8_t retransmit_flag){
	auto_re_tx = retransmit_flag;
    14b6:	80 93 73 06 	sts	0x0673, r24
    14ba:	08 95       	ret

000014bc <flash_timer_setup>:

/* reset current time in microseconds and initialize the timer interrupt */
uint8_t flash_timer_setup(){
	uint8_t timer = NRK_APP_TIMER_0;

	current_time_ms = 0;
    14bc:	10 92 84 06 	sts	0x0684, r1
    14c0:	10 92 85 06 	sts	0x0685, r1
    14c4:	10 92 86 06 	sts	0x0686, r1
    14c8:	10 92 87 06 	sts	0x0687, r1
    14cc:	10 92 88 06 	sts	0x0688, r1
    14d0:	10 92 89 06 	sts	0x0689, r1
    14d4:	10 92 8a 06 	sts	0x068A, r1
    14d8:	10 92 8b 06 	sts	0x068B, r1
	/* inc counter every ms */
	/* use 0x3E80 for 16MHz */
	/* 0x3F12 experimentally returns correct result when compared to nrk_spin_wait_us()*/
	if (nrk_timer_int_configure(timer, 1, TICKS_PER_MS, timer_3_callback) != NRK_OK)
    14dc:	28 ea       	ldi	r18, 0xA8	; 168
    14de:	38 e0       	ldi	r19, 0x08	; 8
    14e0:	44 e7       	ldi	r20, 0x74	; 116
    14e2:	5f e3       	ldi	r21, 0x3F	; 63
    14e4:	61 e0       	ldi	r22, 0x01	; 1
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	0e 94 94 29 	call	0x5328	; 0x5328 <nrk_timer_int_configure>
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	19 f4       	brne	.+6      	; 0x14f8 <flash_timer_setup+0x3c>
		return NRK_ERROR;
	return nrk_timer_int_start(timer);
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	0c 94 8b 29 	jmp	0x5316	; 0x5316 <nrk_timer_int_start>
}
    14f8:	8f ef       	ldi	r24, 0xFF	; 255
    14fa:	08 95       	ret

000014fc <flash_get_current_time>:
		current_time_ms += 1;
	}
	ENABLE_GLOBAL_INT();
}

uint64_t flash_get_current_time(){
    14fc:	2f 92       	push	r2
    14fe:	3f 92       	push	r3
    1500:	4f 92       	push	r4
    1502:	5f 92       	push	r5
    1504:	6f 92       	push	r6
    1506:	7f 92       	push	r7
    1508:	8f 92       	push	r8
    150a:	9f 92       	push	r9
    150c:	af 92       	push	r10
    150e:	bf 92       	push	r11
    1510:	cf 92       	push	r12
    1512:	df 92       	push	r13
    1514:	ef 92       	push	r14
    1516:	ff 92       	push	r15
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	29 97       	sbiw	r28, 0x09	; 9
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
	DISABLE_GLOBAL_INT();
    1530:	f8 94       	cli
	uint32_t orig_ticks = TCNT3;
    1532:	40 90 94 00 	lds	r4, 0x0094
    1536:	50 90 95 00 	lds	r5, 0x0095
    153a:	61 2c       	mov	r6, r1
    153c:	71 2c       	mov	r7, r1
	uint64_t orig_ms = current_time_ms;
    153e:	80 90 84 06 	lds	r8, 0x0684
    1542:	90 90 85 06 	lds	r9, 0x0685
    1546:	e0 91 86 06 	lds	r30, 0x0686
    154a:	30 90 87 06 	lds	r3, 0x0687
    154e:	b0 91 88 06 	lds	r27, 0x0688
    1552:	a0 91 89 06 	lds	r26, 0x0689
    1556:	20 90 8a 06 	lds	r2, 0x068A
    155a:	f0 91 8b 06 	lds	r31, 0x068B
	uint8_t extra = 0;
    155e:	20 e0       	ldi	r18, 0x00	; 0
	while (TCNT3 > TICKS_PER_MS){
    1560:	80 91 94 00 	lds	r24, 0x0094
    1564:	90 91 95 00 	lds	r25, 0x0095
    1568:	85 37       	cpi	r24, 0x75	; 117
    156a:	9f 43       	sbci	r25, 0x3F	; 63
    156c:	60 f0       	brcs	.+24     	; 0x1586 <flash_get_current_time+0x8a>
		TCNT3 -= TICKS_PER_MS;
    156e:	80 91 94 00 	lds	r24, 0x0094
    1572:	90 91 95 00 	lds	r25, 0x0095
    1576:	84 57       	subi	r24, 0x74	; 116
    1578:	9f 43       	sbci	r25, 0x3F	; 63
    157a:	90 93 95 00 	sts	0x0095, r25
    157e:	80 93 94 00 	sts	0x0094, r24
		//current_time_ms += 1;
		extra++;
    1582:	2f 5f       	subi	r18, 0xFF	; 255
    1584:	ed cf       	rjmp	.-38     	; 0x1560 <flash_get_current_time+0x64>
	}
	current_time_ms += extra;
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	54 01       	movw	r10, r8
    1596:	ce 2e       	mov	r12, r30
    1598:	d3 2c       	mov	r13, r3
    159a:	eb 2e       	mov	r14, r27
    159c:	fa 2e       	mov	r15, r26
    159e:	02 2d       	mov	r16, r2
    15a0:	1f 2f       	mov	r17, r31
    15a2:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__adddi3>
    15a6:	20 93 84 06 	sts	0x0684, r18
    15aa:	30 93 85 06 	sts	0x0685, r19
    15ae:	40 93 86 06 	sts	0x0686, r20
    15b2:	50 93 87 06 	sts	0x0687, r21
    15b6:	60 93 88 06 	sts	0x0688, r22
    15ba:	70 93 89 06 	sts	0x0689, r23
    15be:	80 93 8a 06 	sts	0x068A, r24
    15c2:	90 93 8b 06 	sts	0x068B, r25
	//uint64_t ticks = current_time_ms;
	//uint32_t offset_ticks = TCNT3;
	ENABLE_GLOBAL_INT();
    15c6:	78 94       	sei
	//return (ticks * 1000) + (offset_ticks >> 4);
	return (orig_ms * 1000) + (orig_ticks >> 4);
    15c8:	84 e0       	ldi	r24, 0x04	; 4
    15ca:	76 94       	lsr	r7
    15cc:	67 94       	ror	r6
    15ce:	57 94       	ror	r5
    15d0:	47 94       	ror	r4
    15d2:	8a 95       	dec	r24
    15d4:	d1 f7       	brne	.-12     	; 0x15ca <flash_get_current_time+0xce>
    15d6:	a3 01       	movw	r20, r6
    15d8:	92 01       	movw	r18, r4
    15da:	49 82       	std	Y+1, r4	; 0x01
    15dc:	3a 83       	std	Y+2, r19	; 0x02
    15de:	4b 83       	std	Y+3, r20	; 0x03
    15e0:	5c 83       	std	Y+4, r21	; 0x04
    15e2:	94 01       	movw	r18, r8
    15e4:	4e 2f       	mov	r20, r30
    15e6:	53 2d       	mov	r21, r3
    15e8:	6b 2f       	mov	r22, r27
    15ea:	7a 2f       	mov	r23, r26
    15ec:	82 2d       	mov	r24, r2
    15ee:	9f 2f       	mov	r25, r31
    15f0:	06 e0       	ldi	r16, 0x06	; 6
    15f2:	0e 94 29 30 	call	0x6052	; 0x6052 <__ashldi3>
    15f6:	02 2d       	mov	r16, r2
    15f8:	0e 94 75 30 	call	0x60ea	; 0x60ea <__subdi3>
    15fc:	01 e0       	ldi	r16, 0x01	; 1
    15fe:	0e 94 29 30 	call	0x6052	; 0x6052 <__ashldi3>
    1602:	02 2d       	mov	r16, r2
    1604:	0e 94 75 30 	call	0x60ea	; 0x60ea <__subdi3>
    1608:	03 e0       	ldi	r16, 0x03	; 3
    160a:	0e 94 29 30 	call	0x6052	; 0x6052 <__ashldi3>
    160e:	59 01       	movw	r10, r18
    1610:	6a 01       	movw	r12, r20
    1612:	7b 01       	movw	r14, r22
    1614:	8c 01       	movw	r16, r24
    1616:	29 81       	ldd	r18, Y+1	; 0x01
    1618:	3a 81       	ldd	r19, Y+2	; 0x02
    161a:	4b 81       	ldd	r20, Y+3	; 0x03
    161c:	5c 81       	ldd	r21, Y+4	; 0x04
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__adddi3>
}
    162a:	29 96       	adiw	r28, 0x09	; 9
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	de bf       	out	0x3e, r29	; 62
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	cd bf       	out	0x3d, r28	; 61
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	1f 91       	pop	r17
    163c:	0f 91       	pop	r16
    163e:	ff 90       	pop	r15
    1640:	ef 90       	pop	r14
    1642:	df 90       	pop	r13
    1644:	cf 90       	pop	r12
    1646:	bf 90       	pop	r11
    1648:	af 90       	pop	r10
    164a:	9f 90       	pop	r9
    164c:	8f 90       	pop	r8
    164e:	7f 90       	pop	r7
    1650:	6f 90       	pop	r6
    1652:	5f 90       	pop	r5
    1654:	4f 90       	pop	r4
    1656:	3f 90       	pop	r3
    1658:	2f 90       	pop	r2
    165a:	08 95       	ret

0000165c <rx_started_callback>:
}
*/
void rx_started_callback()
{
	//printf("received packet\r\n");
	last_rx_time = flash_get_current_time();
    165c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <flash_get_current_time>
    1660:	20 93 74 06 	sts	0x0674, r18
    1664:	30 93 75 06 	sts	0x0675, r19
    1668:	40 93 76 06 	sts	0x0676, r20
    166c:	50 93 77 06 	sts	0x0677, r21
    1670:	60 93 78 06 	sts	0x0678, r22
    1674:	70 93 79 06 	sts	0x0679, r23
    1678:	80 93 7a 06 	sts	0x067A, r24
    167c:	90 93 7b 06 	sts	0x067B, r25
    1680:	08 95       	ret

00001682 <flash_enable>:
	auto_re_tx = retransmit_flag;
}

void 
flash_enable(uint8_t msg_len, uint64_t *timeout, void (*edit_buf)(uint8_t *buf, uint64_t rcv_time))
{
    1682:	4f 92       	push	r4
    1684:	5f 92       	push	r5
    1686:	6f 92       	push	r6
    1688:	7f 92       	push	r7
    168a:	8f 92       	push	r8
    168c:	9f 92       	push	r9
    168e:	af 92       	push	r10
    1690:	bf 92       	push	r11
    1692:	cf 92       	push	r12
    1694:	df 92       	push	r13
    1696:	ef 92       	push	r14
    1698:	ff 92       	push	r15
    169a:	0f 93       	push	r16
    169c:	1f 93       	push	r17
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	18 2f       	mov	r17, r24
    16a4:	eb 01       	movw	r28, r22
    16a6:	4a 01       	movw	r8, r20
	//uint8_t flash_rx_buf[FLASH_MAX_PKT_LEN];
	uint64_t timeout_time;//0xFFFFFFFFFFFFFFFF;

	nrk_led_set(ORANGE_LED);
    16a8:	82 e0       	ldi	r24, 0x02	; 2
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <nrk_led_set>
	is_enabled=1;
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	80 93 4b 04 	sts	0x044B, r24
	flash_pkt_received = 0;
    16b6:	10 92 72 06 	sts	0x0672, r1
	flash_message_len = msg_len;
    16ba:	81 2f       	mov	r24, r17
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	90 93 52 04 	sts	0x0452, r25
    16c2:	80 93 51 04 	sts	0x0451, r24


	user_rx_callback = edit_buf;
    16c6:	90 92 7f 06 	sts	0x067F, r9
    16ca:	80 92 7e 06 	sts	0x067E, r8
	nrk_int_enable();
    16ce:	0e 94 80 16 	call	0x2d00	; 0x2d00 <nrk_int_enable>
	rf_rx_on();
    16d2:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <rf_rx_on>
	
	//gets most recently received buffer and puts rx data into falsh_rfRxInfo
	uint8_t resp;
	if (timeout != NULL){
    16d6:	20 97       	sbiw	r28, 0x00	; 0
    16d8:	a9 f1       	breq	.+106    	; 0x1744 <flash_enable+0xc2>
		timeout_time = flash_get_current_time() + *timeout;
    16da:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <flash_get_current_time>
    16de:	a8 80       	ld	r10, Y
    16e0:	b9 80       	ldd	r11, Y+1	; 0x01
    16e2:	ca 80       	ldd	r12, Y+2	; 0x02
    16e4:	db 80       	ldd	r13, Y+3	; 0x03
    16e6:	ec 80       	ldd	r14, Y+4	; 0x04
    16e8:	fd 80       	ldd	r15, Y+5	; 0x05
    16ea:	0e 81       	ldd	r16, Y+6	; 0x06
    16ec:	1f 81       	ldd	r17, Y+7	; 0x07
    16ee:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__adddi3>
    16f2:	e9 01       	movw	r28, r18
    16f4:	94 2e       	mov	r9, r20
    16f6:	85 2e       	mov	r8, r21
    16f8:	76 2e       	mov	r7, r22
    16fa:	67 2e       	mov	r6, r23
    16fc:	58 2e       	mov	r5, r24
    16fe:	49 2e       	mov	r4, r25
		while (!flash_pkt_received){
    1700:	e0 91 72 06 	lds	r30, 0x0672
    1704:	e1 11       	cpse	r30, r1
    1706:	22 c0       	rjmp	.+68     	; 0x174c <flash_enable+0xca>
			if (flash_get_current_time() > timeout_time){
    1708:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <flash_get_current_time>
    170c:	5e 01       	movw	r10, r28
    170e:	c9 2c       	mov	r12, r9
    1710:	d8 2c       	mov	r13, r8
    1712:	e7 2c       	mov	r14, r7
    1714:	f6 2c       	mov	r15, r6
    1716:	05 2d       	mov	r16, r5
    1718:	14 2d       	mov	r17, r4
    171a:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__cmpdi2>
    171e:	81 f3       	breq	.-32     	; 0x1700 <flash_enable+0x7e>
    1720:	78 f3       	brcs	.-34     	; 0x1700 <flash_enable+0x7e>
		*/
		flash_tx_pkt(flash_buf, flash_message_len);
		nrk_led_clr(BLUE_LED);
	}
	nrk_int_enable();
}
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	df 90       	pop	r13
    1730:	cf 90       	pop	r12
    1732:	bf 90       	pop	r11
    1734:	af 90       	pop	r10
    1736:	9f 90       	pop	r9
    1738:	8f 90       	pop	r8
    173a:	7f 90       	pop	r7
    173c:	6f 90       	pop	r6
    173e:	5f 90       	pop	r5
    1740:	4f 90       	pop	r4
    1742:	08 95       	ret
				return;
			}
		}
	}
	else {
		while(!flash_pkt_received);
    1744:	80 91 72 06 	lds	r24, 0x0672
    1748:	88 23       	and	r24, r24
    174a:	e1 f3       	breq	.-8      	; 0x1744 <flash_enable+0xc2>

	/*if (!flash_pkt_received)
	  printf("failed to correctly receive nonblocking packet\r\n");
*/
	//ensure that rf rx if off after message has been received
	resp = rf_rx_packet_nonblock();
    174c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <rf_rx_packet_nonblock>
	/*
	if (resp == 0)
		printf("packet incorrectly received\r\n");
*/
	rf_rx_off();
    1750:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <rf_rx_off>
	nrk_int_disable();
    1754:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <nrk_int_disable>
	
	//get metadata about received packet
	//printf("received buffer of length %d\r\n", flash_rfRxInfo.length);
	//printf("buffer[0] = %d, buffer[1:5] = %u\r\n", flash_rx_buf[0], flash_rx_buf[4]);
	flash_message_len = flash_rfRxInfo.length;
    1758:	80 91 69 06 	lds	r24, 0x0669
    175c:	99 27       	eor	r25, r25
    175e:	87 fd       	sbrc	r24, 7
    1760:	90 95       	com	r25
    1762:	90 93 52 04 	sts	0x0452, r25
    1766:	80 93 51 04 	sts	0x0451, r24
	//memcpy(flash_rx_buf, flash_rfRxInfo.pPayload, flash_rfRxInfo.length);
	//memset(flash_rfRxInfo.pPayload, 0, flash_rfRxInfo.length);
	//flash_buf = flash_rfRxInfo.pPayload;

	//call user callback function on buffer
	if (user_rx_callback != NULL)
    176a:	e0 91 7e 06 	lds	r30, 0x067E
    176e:	f0 91 7f 06 	lds	r31, 0x067F
    1772:	30 97       	sbiw	r30, 0x00	; 0
    1774:	99 f0       	breq	.+38     	; 0x179c <flash_enable+0x11a>
		user_rx_callback(flash_buf, last_rx_time);
    1776:	00 91 74 06 	lds	r16, 0x0674
    177a:	10 91 75 06 	lds	r17, 0x0675
    177e:	20 91 76 06 	lds	r18, 0x0676
    1782:	30 91 77 06 	lds	r19, 0x0677
    1786:	40 91 78 06 	lds	r20, 0x0678
    178a:	50 91 79 06 	lds	r21, 0x0679
    178e:	60 91 7a 06 	lds	r22, 0x067A
    1792:	70 91 7b 06 	lds	r23, 0x067B
    1796:	8a ec       	ldi	r24, 0xCA	; 202
    1798:	93 e0       	ldi	r25, 0x03	; 3
    179a:	09 95       	icall
	nrk_led_clr(ORANGE_LED);
    179c:	82 e0       	ldi	r24, 0x02	; 2
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <nrk_led_clr>

	if (auto_re_tx){
    17a4:	80 91 73 06 	lds	r24, 0x0673
    17a8:	88 23       	and	r24, r24
    17aa:	71 f0       	breq	.+28     	; 0x17c8 <flash_enable+0x146>
		//re transmission of packet
		nrk_led_set(BLUE_LED);
    17ac:	83 e0       	ldi	r24, 0x03	; 3
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <nrk_led_set>
		flash_rfTxInfo.cca = 0;
		//if (flash_tx_callback != NULL)
		//flash_tx_callback(flash_message_len, flash_buf);
		//rf_tx_packet(&flash_rfTxInfo);
		*/
		flash_tx_pkt(flash_buf, flash_message_len);
    17b4:	60 91 51 04 	lds	r22, 0x0451
    17b8:	8a ec       	ldi	r24, 0xCA	; 202
    17ba:	93 e0       	ldi	r25, 0x03	; 3
    17bc:	0e 94 6f 09 	call	0x12de	; 0x12de <flash_tx_pkt>
		nrk_led_clr(BLUE_LED);
    17c0:	83 e0       	ldi	r24, 0x03	; 3
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <nrk_led_clr>
	}
	nrk_int_enable();
}
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	ff 90       	pop	r15
    17d2:	ef 90       	pop	r14
    17d4:	df 90       	pop	r13
    17d6:	cf 90       	pop	r12
    17d8:	bf 90       	pop	r11
    17da:	af 90       	pop	r10
    17dc:	9f 90       	pop	r9
    17de:	8f 90       	pop	r8
    17e0:	7f 90       	pop	r7
    17e2:	6f 90       	pop	r6
    17e4:	5f 90       	pop	r5
    17e6:	4f 90       	pop	r4
		//rf_tx_packet(&flash_rfTxInfo);
		*/
		flash_tx_pkt(flash_buf, flash_message_len);
		nrk_led_clr(BLUE_LED);
	}
	nrk_int_enable();
    17e8:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <nrk_int_enable>

000017ec <flash_set_time>:
	ENABLE_GLOBAL_INT();
	//return (ticks * 1000) + (offset_ticks >> 4);
	return (orig_ms * 1000) + (orig_ticks >> 4);
}

void flash_set_time(uint64_t current_time){
    17ec:	4f 92       	push	r4
    17ee:	5f 92       	push	r5
    17f0:	6f 92       	push	r6
    17f2:	7f 92       	push	r7
    17f4:	8f 92       	push	r8
    17f6:	9f 92       	push	r9
    17f8:	af 92       	push	r10
    17fa:	bf 92       	push	r11
    17fc:	cf 92       	push	r12
    17fe:	df 92       	push	r13
    1800:	ef 92       	push	r14
    1802:	ff 92       	push	r15
    1804:	0f 93       	push	r16
    1806:	1f 93       	push	r17
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	29 01       	movw	r4, r18
    180e:	3a 01       	movw	r6, r20
    1810:	d6 2f       	mov	r29, r22
    1812:	c7 2f       	mov	r28, r23
    1814:	4c 01       	movw	r8, r24
	DISABLE_GLOBAL_INT();
    1816:	f8 94       	cli
	current_time_ms = current_time/1000;
    1818:	88 ee       	ldi	r24, 0xE8	; 232
    181a:	a8 2e       	mov	r10, r24
    181c:	93 e0       	ldi	r25, 0x03	; 3
    181e:	b9 2e       	mov	r11, r25
    1820:	c1 2c       	mov	r12, r1
    1822:	d1 2c       	mov	r13, r1
    1824:	e1 2c       	mov	r14, r1
    1826:	f1 2c       	mov	r15, r1
    1828:	00 e0       	ldi	r16, 0x00	; 0
    182a:	10 e0       	ldi	r17, 0x00	; 0
    182c:	c4 01       	movw	r24, r8
    182e:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <__udivdi3>
    1832:	20 93 84 06 	sts	0x0684, r18
    1836:	30 93 85 06 	sts	0x0685, r19
    183a:	40 93 86 06 	sts	0x0686, r20
    183e:	50 93 87 06 	sts	0x0687, r21
    1842:	60 93 88 06 	sts	0x0688, r22
    1846:	70 93 89 06 	sts	0x0689, r23
    184a:	80 93 8a 06 	sts	0x068A, r24
    184e:	90 93 8b 06 	sts	0x068B, r25
	TCNT3 = (current_time % 1000) * 16;
    1852:	92 01       	movw	r18, r4
    1854:	a3 01       	movw	r20, r6
    1856:	6d 2f       	mov	r22, r29
    1858:	7c 2f       	mov	r23, r28
    185a:	c4 01       	movw	r24, r8
    185c:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <__umoddi3>
    1860:	49 01       	movw	r8, r18
    1862:	24 e0       	ldi	r18, 0x04	; 4
    1864:	88 0c       	add	r8, r8
    1866:	99 1c       	adc	r9, r9
    1868:	2a 95       	dec	r18
    186a:	e1 f7       	brne	.-8      	; 0x1864 <flash_set_time+0x78>
    186c:	90 92 95 00 	sts	0x0095, r9
    1870:	80 92 94 00 	sts	0x0094, r8
	ENABLE_GLOBAL_INT();
    1874:	78 94       	sei
}
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	ff 90       	pop	r15
    1880:	ef 90       	pop	r14
    1882:	df 90       	pop	r13
    1884:	cf 90       	pop	r12
    1886:	bf 90       	pop	r11
    1888:	af 90       	pop	r10
    188a:	9f 90       	pop	r9
    188c:	8f 90       	pop	r8
    188e:	7f 90       	pop	r7
    1890:	6f 90       	pop	r6
    1892:	5f 90       	pop	r5
    1894:	4f 90       	pop	r4
    1896:	08 95       	ret

00001898 <flash_reset_timer>:

void flash_reset_timer(){
	current_time_ms = 0;
    1898:	10 92 84 06 	sts	0x0684, r1
    189c:	10 92 85 06 	sts	0x0685, r1
    18a0:	10 92 86 06 	sts	0x0686, r1
    18a4:	10 92 87 06 	sts	0x0687, r1
    18a8:	10 92 88 06 	sts	0x0688, r1
    18ac:	10 92 89 06 	sts	0x0689, r1
    18b0:	10 92 8a 06 	sts	0x068A, r1
    18b4:	10 92 8b 06 	sts	0x068B, r1
    18b8:	08 95       	ret

000018ba <rf_cmd>:
}


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
    18ba:	cf 93       	push	r28
    18bc:	c8 2f       	mov	r28, r24
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    18be:	90 91 41 01 	lds	r25, 0x0141
    18c2:	9f 71       	andi	r25, 0x1F	; 31
    18c4:	9f 31       	cpi	r25, 0x1F	; 31
    18c6:	d9 f3       	breq	.-10     	; 0x18be <rf_cmd+0x4>
		continue;
	// added for accessing buffer immediately before transmission for Flash implementation
	DISABLE_GLOBAL_INT();
    18c8:	f8 94       	cli
	if ((cmd == 0x2) && tx_start_func)
    18ca:	c2 30       	cpi	r28, 0x02	; 2
    18cc:	79 f4       	brne	.+30     	; 0x18ec <rf_cmd+0x32>
    18ce:	e0 91 54 04 	lds	r30, 0x0454
    18d2:	f0 91 55 04 	lds	r31, 0x0455
    18d6:	30 97       	sbiw	r30, 0x00	; 0
    18d8:	49 f0       	breq	.+18     	; 0x18ec <rf_cmd+0x32>
		tx_start_func(tx_len, tx_buf);
    18da:	60 91 b7 06 	lds	r22, 0x06B7
    18de:	70 91 b8 06 	lds	r23, 0x06B8
    18e2:	80 91 cf 06 	lds	r24, 0x06CF
    18e6:	90 91 d0 06 	lds	r25, 0x06D0
    18ea:	09 95       	icall
	TRX_STATE = cmd;
    18ec:	c0 93 42 01 	sts	0x0142, r28
	ENABLE_GLOBAL_INT();
    18f0:	78 94       	sei
}
    18f2:	cf 91       	pop	r28
    18f4:	08 95       	ret

000018f6 <set_wireless_prog>:
uint8_t reset_val[] = {0x43, 0x15, 0xa6, 0xd9, 0x3d, 0x31, 0x82, 0xf1, 0x8c, 0xa7, 0x4f, 0xc5, 0x99, 0x97, 0x04, 0xac};


void set_wireless_prog(uint8_t val)
{
   wireless_prog = val;
    18f6:	80 93 53 04 	sts	0x0453, r24
    18fa:	08 95       	ret

000018fc <rf_enable_glossy>:
}

void rf_enable_glossy()
{
	use_glossy = 1;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	80 93 99 06 	sts	0x0699, r24
    1902:	08 95       	ret

00001904 <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
    1904:	10 92 99 06 	sts	0x0699, r1
    1908:	08 95       	ret

0000190a <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    190a:	80 91 41 01 	lds	r24, 0x0141
    190e:	8f 71       	andi	r24, 0x1F	; 31
    1910:	8f 31       	cpi	r24, 0x1F	; 31
    1912:	d9 f3       	breq	.-10     	; 0x190a <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    1914:	80 91 41 01 	lds	r24, 0x0141
    1918:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    191a:	e1 f0       	breq	.+56     	; 0x1954 <rf_power_down+0x4a>
    191c:	8f 30       	cpi	r24, 0x0F	; 15
    191e:	d1 f0       	breq	.+52     	; 0x1954 <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    1920:	80 91 41 01 	lds	r24, 0x0141
    1924:	8f 71       	andi	r24, 0x1F	; 31
    1926:	88 30       	cpi	r24, 0x08	; 8
    1928:	31 f4       	brne	.+12     	; 0x1936 <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
    192a:	80 91 39 01 	lds	r24, 0x0139
    192e:	82 60       	ori	r24, 0x02	; 2
    1930:	80 93 39 01 	sts	0x0139, r24
    1934:	0b c0       	rjmp	.+22     	; 0x194c <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
    1936:	88 e0       	ldi	r24, 0x08	; 8
    1938:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    193c:	80 91 41 01 	lds	r24, 0x0141
    1940:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    1942:	88 30       	cpi	r24, 0x08	; 8
    1944:	d9 f7       	brne	.-10     	; 0x193c <rf_power_down+0x32>
    1946:	f1 cf       	rjmp	.-30     	; 0x192a <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
    1948:	8f 30       	cpi	r24, 0x0F	; 15
    194a:	21 f0       	breq	.+8      	; 0x1954 <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
    194c:	80 91 41 01 	lds	r24, 0x0141
    1950:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    1952:	d1 f7       	brne	.-12     	; 0x1948 <rf_power_down+0x3e>
    1954:	08 95       	ret

00001956 <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1956:	80 91 41 01 	lds	r24, 0x0141
    195a:	8f 71       	andi	r24, 0x1F	; 31
    195c:	8f 31       	cpi	r24, 0x1F	; 31
    195e:	d9 f3       	breq	.-10     	; 0x1956 <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    1960:	80 91 41 01 	lds	r24, 0x0141
    1964:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    1966:	11 f0       	breq	.+4      	; 0x196c <rf_power_up+0x16>
    1968:	8f 30       	cpi	r24, 0x0F	; 15
    196a:	51 f4       	brne	.+20     	; 0x1980 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    196c:	80 91 39 01 	lds	r24, 0x0139
    1970:	8d 7f       	andi	r24, 0xFD	; 253
    1972:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    1976:	80 91 41 01 	lds	r24, 0x0141
    197a:	8f 71       	andi	r24, 0x1F	; 31
    197c:	88 30       	cpi	r24, 0x08	; 8
    197e:	d9 f7       	brne	.-10     	; 0x1976 <rf_power_up+0x20>
    1980:	08 95       	ret

00001982 <rf_pll_on>:
	ENABLE_GLOBAL_INT();
}

void rf_pll_on()
{
   rf_cmd(PLL_ON);
    1982:	89 e0       	ldi	r24, 0x09	; 9
    1984:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <rf_cmd>

00001988 <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    1988:	e5 e4       	ldi	r30, 0x45	; 69
    198a:	f1 e0       	ldi	r31, 0x01	; 1
    198c:	90 81       	ld	r25, Z
    198e:	90 7f       	andi	r25, 0xF0	; 240
    1990:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    1992:	90 81       	ld	r25, Z
    1994:	8f 70       	andi	r24, 0x0F	; 15
    1996:	98 2b       	or	r25, r24
    1998:	90 83       	st	Z, r25
    199a:	08 95       	ret

0000199c <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    199c:	e7 e5       	ldi	r30, 0x57	; 87
    199e:	f1 e0       	ldi	r31, 0x01	; 1
    19a0:	80 81       	ld	r24, Z
    19a2:	8d 7f       	andi	r24, 0xFD	; 253
    19a4:	80 83       	st	Z, r24
    19a6:	08 95       	ret

000019a8 <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    19a8:	e7 e5       	ldi	r30, 0x57	; 87
    19aa:	f1 e0       	ldi	r31, 0x01	; 1
    19ac:	80 81       	ld	r24, Z
    19ae:	82 60       	ori	r24, 0x02	; 2
    19b0:	80 83       	st	Z, r24
    19b2:	08 95       	ret

000019b4 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    19b4:	ee e6       	ldi	r30, 0x6E	; 110
    19b6:	f1 e0       	ldi	r31, 0x01	; 1
    19b8:	80 81       	ld	r24, Z
    19ba:	8f 7e       	andi	r24, 0xEF	; 239
    19bc:	80 83       	st	Z, r24
    19be:	08 95       	ret

000019c0 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    19c0:	ee e6       	ldi	r30, 0x6E	; 110
    19c2:	f1 e0       	ldi	r31, 0x01	; 1
    19c4:	80 81       	ld	r24, Z
    19c6:	80 61       	ori	r24, 0x10	; 16
    19c8:	80 83       	st	Z, r24
    19ca:	08 95       	ret

000019cc <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    19cc:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    19d0:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    19d4:	90 93 a3 06 	sts	0x06A3, r25
    19d8:	80 93 a2 06 	sts	0x06A2, r24
    19dc:	08 95       	ret

000019de <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    19de:	90 93 9d 06 	sts	0x069D, r25
    19e2:	80 93 9c 06 	sts	0x069C, r24
	PHY_CC_CCA &= ~(0x1F);
    19e6:	e8 e4       	ldi	r30, 0x48	; 72
    19e8:	f1 e0       	ldi	r31, 0x01	; 1
    19ea:	80 81       	ld	r24, Z
    19ec:	80 7e       	andi	r24, 0xE0	; 224
    19ee:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    19f0:	80 81       	ld	r24, Z
    19f2:	68 2b       	or	r22, r24
    19f4:	60 83       	st	Z, r22
    19f6:	08 95       	ret

000019f8 <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    19f8:	90 93 59 04 	sts	0x0459, r25
    19fc:	80 93 58 04 	sts	0x0458, r24
    1a00:	08 95       	ret

00001a02 <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
    1a02:	90 93 57 04 	sts	0x0457, r25
    1a06:	80 93 56 04 	sts	0x0456, r24
    1a0a:	08 95       	ret

00001a0c <tx_start_callback>:
}

void tx_start_callback(void (*func)(uint16_t, uint8_t*)) {
	tx_start_func = func;
    1a0c:	90 93 55 04 	sts	0x0455, r25
    1a10:	80 93 54 04 	sts	0x0454, r24
    1a14:	08 95       	ret

00001a16 <rf_init>:
}

void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	fc 01       	movw	r30, r24
    1a20:	d9 01       	movw	r26, r18

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    1a22:	80 e2       	ldi	r24, 0x20	; 32
    1a24:	80 93 44 01 	sts	0x0144, r24
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    1a28:	80 ec       	ldi	r24, 0xC0	; 192
    1a2a:	80 93 45 01 	sts	0x0145, r24
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    1a2e:	60 62       	ori	r22, 0x20	; 32
    1a30:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    1a34:	85 ec       	ldi	r24, 0xC5	; 197
    1a36:	80 93 49 01 	sts	0x0149, r24
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    1a3a:	87 ea       	ldi	r24, 0xA7	; 167
    1a3c:	80 93 4b 01 	sts	0x014B, r24
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    1a40:	80 e8       	ldi	r24, 0x80	; 128
    1a42:	80 93 4c 01 	sts	0x014C, r24
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    1a46:	20 93 60 01 	sts	0x0160, r18
    1a4a:	b0 93 61 01 	sts	0x0161, r27
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    1a4e:	40 93 62 01 	sts	0x0162, r20
    1a52:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1a56:	c6 e4       	ldi	r28, 0x46	; 70
    1a58:	d1 e0       	ldi	r29, 0x01	; 1
    1a5a:	08 81       	ld	r16, Y
    1a5c:	88 81       	ld	r24, Y
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    1a5e:	98 81       	ld	r25, Y
    1a60:	28 81       	ld	r18, Y
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1a62:	30 2f       	mov	r19, r16
    1a64:	32 95       	swap	r19
    1a66:	36 95       	lsr	r19
    1a68:	37 70       	andi	r19, 0x07	; 7
    1a6a:	60 e4       	ldi	r22, 0x40	; 64
    1a6c:	36 9f       	mul	r19, r22
    1a6e:	80 01       	movw	r16, r0
    1a70:	11 24       	eor	r1, r1
    1a72:	22 95       	swap	r18
    1a74:	26 95       	lsr	r18
    1a76:	23 70       	andi	r18, 0x03	; 3
    1a78:	62 2f       	mov	r22, r18
    1a7a:	60 2b       	or	r22, r16
    1a7c:	82 95       	swap	r24
    1a7e:	86 95       	lsr	r24
    1a80:	83 70       	andi	r24, 0x03	; 3
    1a82:	70 e1       	ldi	r23, 0x10	; 16
    1a84:	87 9f       	mul	r24, r23
    1a86:	90 01       	movw	r18, r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	26 2b       	or	r18, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    1a8c:	92 95       	swap	r25
    1a8e:	96 95       	lsr	r25
    1a90:	93 70       	andi	r25, 0x03	; 3
    1a92:	84 e0       	ldi	r24, 0x04	; 4
    1a94:	98 9f       	mul	r25, r24
    1a96:	b0 01       	movw	r22, r0
    1a98:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1a9a:	62 2b       	or	r22, r18
    1a9c:	60 93 6d 01 	sts	0x016D, r22
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    1aa0:	88 81       	ld	r24, Y
    1aa2:	98 81       	ld	r25, Y
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    1aa4:	92 95       	swap	r25
    1aa6:	96 95       	lsr	r25
    1aa8:	93 70       	andi	r25, 0x03	; 3
    1aaa:	39 2f       	mov	r19, r25
    1aac:	30 64       	ori	r19, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    1aae:	98 2f       	mov	r25, r24
    1ab0:	92 95       	swap	r25
    1ab2:	96 70       	andi	r25, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    1ab4:	93 2b       	or	r25, r19
    1ab6:	90 93 6e 01 	sts	0x016E, r25
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    1aba:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
   
   /* Enable all radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
    1abe:	8f ef       	ldi	r24, 0xFF	; 255
    1ac0:	80 93 4e 01 	sts	0x014E, r24
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    1ac4:	cc e9       	ldi	r28, 0x9C	; 156
    1ac6:	d6 e0       	ldi	r29, 0x06	; 6
    1ac8:	f9 83       	std	Y+1, r31	; 0x01
    1aca:	e8 83       	st	Y, r30
	rfSettings.txSeqNumber = 0;
    1acc:	1a 82       	std	Y+2, r1	; 0x02
	rfSettings.ackReceived = 0;
    1ace:	1b 82       	std	Y+3, r1	; 0x03
	rfSettings.panId = panId;
    1ad0:	5d 83       	std	Y+5, r21	; 0x05
    1ad2:	4c 83       	std	Y+4, r20	; 0x04
	rfSettings.myAddr = myAddr;
    1ad4:	bf 83       	std	Y+7, r27	; 0x07
    1ad6:	ae 83       	std	Y+6, r26	; 0x06
	rfSettings.receiveOn = 0;
    1ad8:	18 86       	std	Y+8, r1	; 0x08

	rf_ready = 1;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	80 93 b6 06 	sts	0x06B6, r24
   rx_ready = 0;
    1ae0:	10 92 d1 06 	sts	0x06D1, r1
   tx_done = 0;
    1ae4:	10 92 a5 06 	sts	0x06A5, r1

	use_glossy = 0;
    1ae8:	10 92 99 06 	sts	0x0699, r1

} // rf_init() 
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	08 95       	ret

00001af6 <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
    1af6:	86 e1       	ldi	r24, 0x16	; 22
    1af8:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <rf_cmd>

00001afc <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    1afc:	86 e1       	ldi	r24, 0x16	; 22
    1afe:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <rf_cmd>

00001b02 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
   rf_cmd(TRX_OFF);
    1b02:	88 e0       	ldi	r24, 0x08	; 8
    1b04:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rf_cmd>
   rx_ready = 0;
    1b08:	10 92 d1 06 	sts	0x06D1, r1
    1b0c:	08 95       	ret

00001b0e <rf_tx_packet>:
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------


uint8_t rf_tx_packet(RF_TX_INFO *pRTI)
{
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	ec 01       	movw	r28, r24
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready){
    1b16:	80 91 b6 06 	lds	r24, 0x06B6
    1b1a:	88 23       	and	r24, r24
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <rf_tx_packet+0x12>
    1b1e:	68 c0       	rjmp	.+208    	; 0x1bf0 <rf_tx_packet+0xe2>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    1b20:	2e 81       	ldd	r18, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    1b22:	80 91 9e 06 	lds	r24, 0x069E
    1b26:	8f 5f       	subi	r24, 0xFF	; 255
    1b28:	80 93 9e 06 	sts	0x069E, r24
	machead->fcf = fcf;
    1b2c:	90 91 81 01 	lds	r25, 0x0181
    1b30:	90 7e       	andi	r25, 0xE0	; 224
    1b32:	91 60       	ori	r25, 0x01	; 1
    1b34:	20 fb       	bst	r18, 0
    1b36:	95 f9       	bld	r25, 5
    1b38:	9f 73       	andi	r25, 0x3F	; 63
    1b3a:	90 64       	ori	r25, 0x40	; 64
    1b3c:	90 93 81 01 	sts	0x0181, r25
    1b40:	88 e8       	ldi	r24, 0x88	; 136
    1b42:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
    1b46:	80 91 99 06 	lds	r24, 0x0699
    1b4a:	88 23       	and	r24, r24
    1b4c:	61 f0       	breq	.+24     	; 0x1b66 <rf_tx_packet+0x58>
		machead->seq_num = 0xFF;
    1b4e:	8f ef       	ldi	r24, 0xFF	; 255
    1b50:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
    1b54:	8a ea       	ldi	r24, 0xAA	; 170
    1b56:	9a ea       	ldi	r25, 0xAA	; 170
    1b58:	90 93 89 01 	sts	0x0189, r25
    1b5c:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
    1b60:	8f ef       	ldi	r24, 0xFF	; 255
    1b62:	9f ef       	ldi	r25, 0xFF	; 255
    1b64:	10 c0       	rjmp	.+32     	; 0x1b86 <rf_tx_packet+0x78>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    1b66:	80 91 9e 06 	lds	r24, 0x069E
    1b6a:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    1b6e:	20 91 61 01 	lds	r18, 0x0161
    1b72:	80 91 60 01 	lds	r24, 0x0160
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	92 2b       	or	r25, r18
    1b7a:	90 93 89 01 	sts	0x0189, r25
    1b7e:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = pRTI->destAddr;
    1b82:	88 81       	ld	r24, Y
    1b84:	99 81       	ldd	r25, Y+1	; 0x01
    1b86:	90 93 87 01 	sts	0x0187, r25
    1b8a:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    1b8e:	20 91 63 01 	lds	r18, 0x0163
    1b92:	80 91 62 01 	lds	r24, 0x0162
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	92 2b       	or	r25, r18
    1b9a:	90 93 85 01 	sts	0x0185, r25
    1b9e:	80 93 84 01 	sts	0x0184, r24
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    1ba2:	4a 81       	ldd	r20, Y+2	; 0x02
    1ba4:	55 27       	eor	r21, r21
    1ba6:	47 fd       	sbrc	r20, 7
    1ba8:	50 95       	com	r21
    1baa:	6b 81       	ldd	r22, Y+3	; 0x03
    1bac:	7c 81       	ldd	r23, Y+4	; 0x04
    1bae:	8a e8       	ldi	r24, 0x8A	; 138
    1bb0:	91 e0       	ldi	r25, 0x01	; 1
    1bb2:	0e 94 a1 30 	call	0x6142	; 0x6142 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	85 5f       	subi	r24, 0xF5	; 245
    1bba:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    1bbe:	80 91 41 01 	lds	r24, 0x0141
    1bc2:	18 2f       	mov	r17, r24
    1bc4:	1f 71       	andi	r17, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    1bc6:	9f ef       	ldi	r25, 0xFF	; 255
    1bc8:	91 0f       	add	r25, r17
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    1bca:	92 30       	cpi	r25, 0x02	; 2
    1bcc:	c0 f3       	brcs	.-16     	; 0x1bbe <rf_tx_packet+0xb0>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    1bce:	11 31       	cpi	r17, 0x11	; 17
    1bd0:	b1 f3       	breq	.-20     	; 0x1bbe <rf_tx_packet+0xb0>
    1bd2:	12 31       	cpi	r17, 0x12	; 18
    1bd4:	a1 f3       	breq	.-24     	; 0x1bbe <rf_tx_packet+0xb0>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    1bd6:	1f 31       	cpi	r17, 0x1F	; 31
    1bd8:	91 f3       	breq	.-28     	; 0x1bbe <rf_tx_packet+0xb0>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    1bda:	98 ef       	ldi	r25, 0xF8	; 248
    1bdc:	91 0f       	add	r25, r17
    1bde:	92 30       	cpi	r25, 0x02	; 2
    1be0:	48 f0       	brcs	.+18     	; 0x1bf4 <rf_tx_packet+0xe6>
    1be2:	8f 70       	andi	r24, 0x0F	; 15
    1be4:	86 30       	cpi	r24, 0x06	; 6
    1be6:	31 f0       	breq	.+12     	; 0x1bf4 <rf_tx_packet+0xe6>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		nrk_kprintf(PSTR("tx failed due to incorrect trx status\r\n"));
    1be8:	84 eb       	ldi	r24, 0xB4	; 180
    1bea:	91 e0       	ldi	r25, 0x01	; 1
    1bec:	0e 94 10 12 	call	0x2420	; 0x2420 <nrk_kprintf>
		return NRK_ERROR;
    1bf0:	8f ef       	ldi	r24, 0xFF	; 255
    1bf2:	55 c0       	rjmp	.+170    	; 0x1c9e <rf_tx_packet+0x190>
	}

	rf_cmd(RX_AACK_ON);
    1bf4:	86 e1       	ldi	r24, 0x16	; 22
    1bf6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    1bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfc:	81 11       	cpse	r24, r1
    1bfe:	0a c0       	rjmp	.+20     	; 0x1c14 <rf_tx_packet+0x106>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    1c00:	89 e0       	ldi	r24, 0x09	; 9
    1c02:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rf_cmd>
	if(pRTI->ackRequest)
    1c06:	8e 81       	ldd	r24, Y+6	; 0x06
    1c08:	88 23       	and	r24, r24
    1c0a:	91 f0       	breq	.+36     	; 0x1c30 <rf_tx_packet+0x122>
		rf_cmd(TX_ARET_ON);
    1c0c:	89 e1       	ldi	r24, 0x19	; 25
    1c0e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rf_cmd>
    1c12:	0e c0       	rjmp	.+28     	; 0x1c30 <rf_tx_packet+0x122>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    1c14:	80 91 48 01 	lds	r24, 0x0148
    1c18:	80 68       	ori	r24, 0x80	; 128
    1c1a:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    1c1e:	80 91 41 01 	lds	r24, 0x0141
    1c22:	87 ff       	sbrs	r24, 7
    1c24:	fc cf       	rjmp	.-8      	; 0x1c1e <rf_tx_packet+0x110>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    1c26:	80 91 41 01 	lds	r24, 0x0141
    1c2a:	86 ff       	sbrs	r24, 6
    1c2c:	e1 cf       	rjmp	.-62     	; 0x1bf0 <rf_tx_packet+0xe2>
    1c2e:	e8 cf       	rjmp	.-48     	; 0x1c00 <rf_tx_packet+0xf2>
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

	// set arguments for calling tx_start_func
	if (tx_start_func) {
    1c30:	80 91 54 04 	lds	r24, 0x0454
    1c34:	90 91 55 04 	lds	r25, 0x0455
    1c38:	89 2b       	or	r24, r25
    1c3a:	71 f0       	breq	.+28     	; 0x1c58 <rf_tx_packet+0x14a>
		tx_len = pRTI->length;
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	99 27       	eor	r25, r25
    1c40:	87 fd       	sbrc	r24, 7
    1c42:	90 95       	com	r25
    1c44:	90 93 d0 06 	sts	0x06D0, r25
    1c48:	80 93 cf 06 	sts	0x06CF, r24
		tx_buf = data_start;
    1c4c:	8a e8       	ldi	r24, 0x8A	; 138
    1c4e:	91 e0       	ldi	r25, 0x01	; 1
    1c50:	90 93 b8 06 	sts	0x06B8, r25
    1c54:	80 93 b7 06 	sts	0x06B7, r24
	}

   tx_done = 0;
    1c58:	10 92 a5 06 	sts	0x06A5, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
    1c5c:	82 e0       	ldi	r24, 0x02	; 2
    1c5e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rf_cmd>
   for(i=0; (i<65000) && !tx_done; i++){
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	20 91 a5 06 	lds	r18, 0x06A5
    1c6a:	21 11       	cpse	r18, r1
    1c6c:	05 c0       	rjmp	.+10     	; 0x1c78 <rf_tx_packet+0x16a>
    1c6e:	01 96       	adiw	r24, 0x01	; 1
    1c70:	88 3e       	cpi	r24, 0xE8	; 232
    1c72:	2d ef       	ldi	r18, 0xFD	; 253
    1c74:	92 07       	cpc	r25, r18
    1c76:	b9 f7       	brne	.-18     	; 0x1c66 <rf_tx_packet+0x158>
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
    1c78:	2e 81       	ldd	r18, Y+6	; 0x06
    1c7a:	22 23       	and	r18, r18
    1c7c:	31 f0       	breq	.+12     	; 0x1c8a <rf_tx_packet+0x17c>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    1c7e:	20 91 42 01 	lds	r18, 0x0142
    1c82:	22 95       	swap	r18
    1c84:	26 95       	lsr	r18
    1c86:	27 70       	andi	r18, 0x07	; 7
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
    1c88:	29 f4       	brne	.+10     	; 0x1c94 <rf_tx_packet+0x186>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    1c8a:	88 3e       	cpi	r24, 0xE8	; 232
    1c8c:	9d 4f       	sbci	r25, 0xFD	; 253
    1c8e:	11 f0       	breq	.+4      	; 0x1c94 <rf_tx_packet+0x186>
   for(i=0; (i<65000) && !tx_done; i++){
      continue;
   }

   /* note error if ACK requested and not received */
	trx_error = ((pRTI->ackRequest && 
    1c90:	c1 e0       	ldi	r28, 0x01	; 1
    1c92:	01 c0       	rjmp	.+2      	; 0x1c96 <rf_tx_packet+0x188>
    1c94:	cf ef       	ldi	r28, 0xFF	; 255
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    1c96:	81 2f       	mov	r24, r17
    1c98:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    1c9c:	8c 2f       	mov	r24, r28
}
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	1f 91       	pop	r17
    1ca4:	08 95       	ret

00001ca6 <rf_tx_packet_blocking>:

uint8_t rf_tx_packet_blocking(RF_TX_INFO *pRTI)
{
	uint16_t count = 0;
	if (rf_tx_packet(pRTI) == NRK_ERROR)
    1ca6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <rf_tx_packet>
		nrk_kprintf(PSTR("failed to send packet\r\n"));
	while (!tx_done){
    1caa:	89 ee       	ldi	r24, 0xE9	; 233
    1cac:	9d ef       	ldi	r25, 0xFD	; 253
    1cae:	20 91 a5 06 	lds	r18, 0x06A5
    1cb2:	21 11       	cpse	r18, r1
    1cb4:	04 c0       	rjmp	.+8      	; 0x1cbe <rf_tx_packet_blocking+0x18>
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
		count += 1;
		if (count > 65000)//some somewhat arbitrary timeout i am too lazy to calculate
    1cb8:	d1 f7       	brne	.-12     	; 0x1cae <rf_tx_packet_blocking+0x8>
			return NRK_ERROR;
    1cba:	8f ef       	ldi	r24, 0xFF	; 255
	}
	return NRK_OK;
}
    1cbc:	08 95       	ret
	while (!tx_done){
		count += 1;
		if (count > 65000)//some somewhat arbitrary timeout i am too lazy to calculate
			return NRK_ERROR;
	}
	return NRK_OK;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	08 95       	ret

00001cc2 <rf_tx_packet_resend>:
uint8_t rf_tx_packet_resend()
{
   uint8_t trx_error;
   uint16_t i;

   tx_done = 0;
    1cc2:	10 92 a5 06 	sts	0x06A5, r1
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
    1cc6:	82 e0       	ldi	r24, 0x02	; 2
    1cc8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rf_cmd>
    1ccc:	88 ee       	ldi	r24, 0xE8	; 232
    1cce:	9d ef       	ldi	r25, 0xFD	; 253
   for(i=0; (i<65000) && !tx_done; i++)
    1cd0:	20 91 a5 06 	lds	r18, 0x06A5
    1cd4:	21 11       	cpse	r18, r1
    1cd6:	04 c0       	rjmp	.+8      	; 0x1ce0 <rf_tx_packet_resend+0x1e>
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	d1 f7       	brne	.-12     	; 0x1cd0 <rf_tx_packet_resend+0xe>
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
    1cdc:	8f ef       	ldi	r24, 0xFF	; 255

   return trx_error;
}
    1cde:	08 95       	ret
   tx_done = 0;
   // Send packet. 0x2 is equivalent to TX_START
   rf_cmd(0x2);
   for(i=0; (i<65000) && !tx_done; i++)
      continue;
   trx_error = (i == 65000) ? NRK_ERROR : NRK_OK;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	08 95       	ret

00001ce4 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    1ce8:	80 91 b6 06 	lds	r24, 0x06B6
    1cec:	88 23       	and	r24, r24
    1cee:	41 f1       	breq	.+80     	; 0x1d40 <rf_cca_check+0x5c>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    1cf0:	80 91 41 01 	lds	r24, 0x0141
    1cf4:	c8 2f       	mov	r28, r24
    1cf6:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
    1cf8:	9f ef       	ldi	r25, 0xFF	; 255
    1cfa:	9c 0f       	add	r25, r28
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    1cfc:	92 30       	cpi	r25, 0x02	; 2
    1cfe:	c0 f3       	brcs	.-16     	; 0x1cf0 <rf_cca_check+0xc>

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
    1d00:	c1 31       	cpi	r28, 0x11	; 17
    1d02:	b1 f3       	breq	.-20     	; 0x1cf0 <rf_cca_check+0xc>
    1d04:	c2 31       	cpi	r28, 0x12	; 18
    1d06:	a1 f3       	breq	.-24     	; 0x1cf0 <rf_cca_check+0xc>
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    1d08:	cf 31       	cpi	r28, 0x1F	; 31
    1d0a:	91 f3       	breq	.-28     	; 0x1cf0 <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    1d0c:	c8 30       	cpi	r28, 0x08	; 8
    1d0e:	19 f0       	breq	.+6      	; 0x1d16 <rf_cca_check+0x32>
    1d10:	8f 70       	andi	r24, 0x0F	; 15
    1d12:	86 30       	cpi	r24, 0x06	; 6
    1d14:	a9 f4       	brne	.+42     	; 0x1d40 <rf_cca_check+0x5c>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    1d16:	86 e1       	ldi	r24, 0x16	; 22
    1d18:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    1d1c:	80 91 48 01 	lds	r24, 0x0148
    1d20:	80 68       	ori	r24, 0x80	; 128
    1d22:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    1d26:	80 91 41 01 	lds	r24, 0x0141
    1d2a:	87 ff       	sbrs	r24, 7
    1d2c:	fc cf       	rjmp	.-8      	; 0x1d26 <rf_cca_check+0x42>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    1d2e:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
    1d32:	8c 2f       	mov	r24, r28
    1d34:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    1d38:	d6 fb       	bst	r29, 6
    1d3a:	88 27       	eor	r24, r24
    1d3c:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
    1d3e:	01 c0       	rjmp	.+2      	; 0x1d42 <rf_cca_check+0x5e>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
    1d40:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	08 95       	ret

00001d48 <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready){
    1d48:	80 91 b6 06 	lds	r24, 0x06B6
    1d4c:	81 11       	cpse	r24, r1
    1d4e:	03 c0       	rjmp	.+6      	; 0x1d56 <rf_rx_packet_nonblock+0xe>
		printf("rf not ready\r\n");
    1d50:	89 eb       	ldi	r24, 0xB9	; 185
    1d52:	92 e0       	ldi	r25, 0x02	; 2
    1d54:	52 c0       	rjmp	.+164    	; 0x1dfa <rf_rx_packet_nonblock+0xb2>
		return NRK_ERROR;
	}
   if(!rx_ready){
    1d56:	80 91 d1 06 	lds	r24, 0x06D1
    1d5a:	88 23       	and	r24, r24
    1d5c:	09 f4       	brne	.+2      	; 0x1d60 <rf_rx_packet_nonblock+0x18>
    1d5e:	e3 c0       	rjmp	.+454    	; 0x1f26 <rf_rx_packet_nonblock+0x1de>
	   //printf("rx not ready\r\n");
      return 0;
   }
   else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length){
    1d60:	80 91 7b 01 	lds	r24, 0x017B
    1d64:	e0 91 9c 06 	lds	r30, 0x069C
    1d68:	f0 91 9d 06 	lds	r31, 0x069D
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	02 97       	sbiw	r24, 0x02	; 2
    1d70:	24 81       	ldd	r18, Z+4	; 0x04
    1d72:	33 27       	eor	r19, r19
    1d74:	27 fd       	sbrc	r18, 7
    1d76:	30 95       	com	r19
    1d78:	28 17       	cp	r18, r24
    1d7a:	39 07       	cpc	r19, r25
    1d7c:	1c f4       	brge	.+6      	; 0x1d84 <rf_rx_packet_nonblock+0x3c>
	   	printf("length too great\r\n");
    1d7e:	87 ec       	ldi	r24, 0xC7	; 199
    1d80:	92 e0       	ldi	r25, 0x02	; 2
    1d82:	3b c0       	rjmp	.+118    	; 0x1dfa <rf_rx_packet_nonblock+0xb2>
		return NRK_ERROR;
	}

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    1d84:	e0 91 9c 06 	lds	r30, 0x069C
    1d88:	f0 91 9d 06 	lds	r31, 0x069D
    1d8c:	80 91 82 01 	lds	r24, 0x0182
    1d90:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    1d92:	e0 91 9c 06 	lds	r30, 0x069C
    1d96:	f0 91 9d 06 	lds	r31, 0x069D
    1d9a:	80 91 87 01 	lds	r24, 0x0187
    1d9e:	90 91 88 01 	lds	r25, 0x0188
    1da2:	92 83       	std	Z+2, r25	; 0x02
    1da4:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    1da6:	e0 91 9c 06 	lds	r30, 0x069C
    1daa:	f0 91 9d 06 	lds	r31, 0x069D
    1dae:	80 91 7b 01 	lds	r24, 0x017B
    1db2:	8b 50       	subi	r24, 0x0B	; 11
    1db4:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    1db6:	a0 91 9c 06 	lds	r26, 0x069C
    1dba:	b0 91 9d 06 	lds	r27, 0x069D
    1dbe:	e0 91 9c 06 	lds	r30, 0x069C
    1dc2:	f0 91 9d 06 	lds	r31, 0x069D
    1dc6:	13 96       	adiw	r26, 0x03	; 3
    1dc8:	9c 91       	ld	r25, X
    1dca:	84 81       	ldd	r24, Z+4	; 0x04
    1dcc:	89 17       	cp	r24, r25
    1dce:	3c f0       	brlt	.+14     	; 0x1dde <rf_rx_packet_nonblock+0x96>
			|| (rfSettings.pRxInfo->length < 0)){
    1dd0:	e0 91 9c 06 	lds	r30, 0x069C
    1dd4:	f0 91 9d 06 	lds	r31, 0x069D
    1dd8:	83 81       	ldd	r24, Z+3	; 0x03
    1dda:	87 ff       	sbrs	r24, 7
    1ddc:	12 c0       	rjmp	.+36     	; 0x1e02 <rf_rx_packet_nonblock+0xba>
		rx_ready = 0;
    1dde:	10 92 d1 06 	sts	0x06D1, r1
      	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1de2:	80 91 4c 01 	lds	r24, 0x014C
    1de6:	8f 77       	andi	r24, 0x7F	; 127
    1de8:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    1dec:	80 91 4c 01 	lds	r24, 0x014C
    1df0:	80 68       	ori	r24, 0x80	; 128
    1df2:	80 93 4c 01 	sts	0x014C, r24
		printf("incorrect length setting in rf settings\r\n");
    1df6:	89 ed       	ldi	r24, 0xD9	; 217
    1df8:	92 e0       	ldi	r25, 0x02	; 2
    1dfa:	0e 94 55 31 	call	0x62aa	; 0x62aa <puts>
		return NRK_ERROR;
    1dfe:	8f ef       	ldi	r24, 0xFF	; 255
    1e00:	08 95       	ret
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    1e02:	a0 91 9c 06 	lds	r26, 0x069C
    1e06:	b0 91 9d 06 	lds	r27, 0x069D
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		printf("incorrect length setting in rf settings\r\n");
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    1e0a:	e0 91 9c 06 	lds	r30, 0x069C
    1e0e:	f0 91 9d 06 	lds	r31, 0x069D
    1e12:	13 96       	adiw	r26, 0x03	; 3
    1e14:	4c 91       	ld	r20, X
    1e16:	55 27       	eor	r21, r21
    1e18:	47 fd       	sbrc	r20, 7
    1e1a:	50 95       	com	r21
    1e1c:	69 e8       	ldi	r22, 0x89	; 137
    1e1e:	71 e0       	ldi	r23, 0x01	; 1
    1e20:	85 81       	ldd	r24, Z+5	; 0x05
    1e22:	96 81       	ldd	r25, Z+6	; 0x06
    1e24:	0e 94 a1 30 	call	0x6142	; 0x6142 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);

   /* if reset packet received, perform reset */
   if(wireless_prog && (rfSettings.pRxInfo->length == 16)){
    1e28:	80 91 53 04 	lds	r24, 0x0453
    1e2c:	88 23       	and	r24, r24
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <rf_rx_packet_nonblock+0xea>
    1e30:	3e c0       	rjmp	.+124    	; 0x1eae <rf_rx_packet_nonblock+0x166>
    1e32:	e0 91 9c 06 	lds	r30, 0x069C
    1e36:	f0 91 9d 06 	lds	r31, 0x069D
    1e3a:	83 81       	ldd	r24, Z+3	; 0x03
    1e3c:	80 31       	cpi	r24, 0x10	; 16
    1e3e:	b9 f5       	brne	.+110    	; 0x1eae <rf_rx_packet_nonblock+0x166>
      if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 4) == 0){
    1e40:	e0 91 9c 06 	lds	r30, 0x069C
    1e44:	f0 91 9d 06 	lds	r31, 0x069D
    1e48:	65 81       	ldd	r22, Z+5	; 0x05
    1e4a:	76 81       	ldd	r23, Z+6	; 0x06
    1e4c:	44 e0       	ldi	r20, 0x04	; 4
    1e4e:	50 e0       	ldi	r21, 0x00	; 0
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	92 e0       	ldi	r25, 0x02	; 2
    1e54:	0e 94 aa 30 	call	0x6154	; 0x6154 <strncmp>
    1e58:	89 2b       	or	r24, r25
    1e5a:	49 f5       	brne	.+82     	; 0x1eae <rf_rx_packet_nonblock+0x166>
         if(strncmp(reset_val, rfSettings.pRxInfo->pPayload, 16) == 0){
    1e5c:	e0 91 9c 06 	lds	r30, 0x069C
    1e60:	f0 91 9d 06 	lds	r31, 0x069D
    1e64:	65 81       	ldd	r22, Z+5	; 0x05
    1e66:	76 81       	ldd	r23, Z+6	; 0x06
    1e68:	40 e1       	ldi	r20, 0x10	; 16
    1e6a:	50 e0       	ldi	r21, 0x00	; 0
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	92 e0       	ldi	r25, 0x02	; 2
    1e70:	0e 94 aa 30 	call	0x6154	; 0x6154 <strncmp>
    1e74:	89 2b       	or	r24, r25
    1e76:	d9 f4       	brne	.+54     	; 0x1eae <rf_rx_packet_nonblock+0x166>
            wdt_enable(WDTO_500MS);
    1e78:	9d e0       	ldi	r25, 0x0D	; 13
    1e7a:	88 e1       	ldi	r24, 0x18	; 24
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	a8 95       	wdr
    1e82:	80 93 60 00 	sts	0x0060, r24
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	90 93 60 00 	sts	0x0060, r25
            nrk_led_set(0);
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <nrk_led_set>
            nrk_led_set(1);
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <nrk_led_set>
            nrk_led_set(2);
    1e9c:	82 e0       	ldi	r24, 0x02	; 2
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <nrk_led_set>
            nrk_led_set(3);
    1ea4:	83 e0       	ldi	r24, 0x03	; 3
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <nrk_led_set>
    1eac:	ff cf       	rjmp	.-2      	; 0x1eac <rf_rx_packet_nonblock+0x164>
      }
   }

	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    1eae:	e0 91 9c 06 	lds	r30, 0x069C
    1eb2:	f0 91 9d 06 	lds	r31, 0x069D
    1eb6:	80 91 80 01 	lds	r24, 0x0180
    1eba:	85 fb       	bst	r24, 5
    1ebc:	88 27       	eor	r24, r24
    1ebe:	80 f9       	bld	r24, 0
    1ec0:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    1ec2:	e0 91 9c 06 	lds	r30, 0x069C
    1ec6:	f0 91 9d 06 	lds	r31, 0x069D
    1eca:	80 91 47 01 	lds	r24, 0x0147
    1ece:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    1ed0:	e0 91 9c 06 	lds	r30, 0x069C
    1ed4:	f0 91 9d 06 	lds	r31, 0x069D
    1ed8:	80 91 46 01 	lds	r24, 0x0146
    1edc:	86 95       	lsr	r24
    1ede:	86 95       	lsr	r24
    1ee0:	86 95       	lsr	r24
    1ee2:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    1ee4:	e0 91 9c 06 	lds	r30, 0x069C
    1ee8:	f0 91 9d 06 	lds	r31, 0x069D
    1eec:	80 91 47 01 	lds	r24, 0x0147
    1ef0:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    1ef2:	a0 91 9c 06 	lds	r26, 0x069C
    1ef6:	b0 91 9d 06 	lds	r27, 0x069D
    1efa:	e0 91 7b 01 	lds	r30, 0x017B
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	e0 58       	subi	r30, 0x80	; 128
    1f02:	fe 4f       	sbci	r31, 0xFE	; 254
    1f04:	80 81       	ld	r24, Z
    1f06:	1b 96       	adiw	r26, 0x0b	; 11
    1f08:	8c 93       	st	X, r24

	/* Reset frame buffer protection */
	rx_ready = 0;
    1f0a:	10 92 d1 06 	sts	0x06D1, r1
   TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1f0e:	80 91 4c 01 	lds	r24, 0x014C
    1f12:	8f 77       	andi	r24, 0x7F	; 127
    1f14:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    1f18:	80 91 4c 01 	lds	r24, 0x014C
    1f1c:	80 68       	ori	r24, 0x80	; 128
    1f1e:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	08 95       	ret
		printf("rf not ready\r\n");
		return NRK_ERROR;
	}
   if(!rx_ready){
	   //printf("rx not ready\r\n");
      return 0;
    1f26:	80 e0       	ldi	r24, 0x00	; 0
	rx_ready = 0;
   TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    1f28:	08 95       	ret

00001f2a <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    1f2a:	1f 92       	push	r1
    1f2c:	0f 92       	push	r0
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	0f 92       	push	r0
    1f32:	11 24       	eor	r1, r1
    1f34:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    1f36:	80 e8       	ldi	r24, 0x80	; 128
    1f38:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1f3c:	8f 91       	pop	r24
    1f3e:	0f 90       	pop	r0
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	0f 90       	pop	r0
    1f44:	1f 90       	pop	r1
    1f46:	18 95       	reti

00001f48 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    1f48:	1f 92       	push	r1
    1f4a:	0f 92       	push	r0
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	0f 92       	push	r0
    1f50:	11 24       	eor	r1, r1
    1f52:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	80 93 a5 06 	sts	0x06A5, r24
   IRQ_STATUS = (1 << TX_END);
    1f5a:	80 e4       	ldi	r24, 0x40	; 64
    1f5c:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    1f60:	8f 91       	pop	r24
    1f62:	0f 90       	pop	r0
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	0f 90       	pop	r0
    1f68:	1f 90       	pop	r1
    1f6a:	18 95       	reti

00001f6c <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    1f6c:	1f 92       	push	r1
    1f6e:	0f 92       	push	r0
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	0f 92       	push	r0
    1f74:	11 24       	eor	r1, r1
    1f76:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    1f78:	80 e2       	ldi	r24, 0x20	; 32
    1f7a:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1f7e:	8f 91       	pop	r24
    1f80:	0f 90       	pop	r0
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	0f 90       	pop	r0
    1f86:	1f 90       	pop	r1
    1f88:	18 95       	reti

00001f8a <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    1f8a:	1f 92       	push	r1
    1f8c:	0f 92       	push	r0
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	0f 92       	push	r0
    1f92:	11 24       	eor	r1, r1
    1f94:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    1f96:	80 e1       	ldi	r24, 0x10	; 16
    1f98:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1f9c:	8f 91       	pop	r24
    1f9e:	0f 90       	pop	r0
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	0f 90       	pop	r0
    1fa4:	1f 90       	pop	r1
    1fa6:	18 95       	reti

00001fa8 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    1fa8:	1f 92       	push	r1
    1faa:	0f 92       	push	r0
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	0f 92       	push	r0
    1fb0:	11 24       	eor	r1, r1
    1fb2:	0b b6       	in	r0, 0x3b	; 59
    1fb4:	0f 92       	push	r0
    1fb6:	2f 93       	push	r18
    1fb8:	3f 93       	push	r19
    1fba:	4f 93       	push	r20
    1fbc:	5f 93       	push	r21
    1fbe:	6f 93       	push	r22
    1fc0:	7f 93       	push	r23
    1fc2:	8f 93       	push	r24
    1fc4:	9f 93       	push	r25
    1fc6:	af 93       	push	r26
    1fc8:	bf 93       	push	r27
    1fca:	ef 93       	push	r30
    1fcc:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    1fce:	84 e0       	ldi	r24, 0x04	; 4
    1fd0:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    1fd4:	e0 91 58 04 	lds	r30, 0x0458
    1fd8:	f0 91 59 04 	lds	r31, 0x0459
    1fdc:	30 97       	sbiw	r30, 0x00	; 0
    1fde:	09 f0       	breq	.+2      	; 0x1fe2 <__vector_59+0x3a>
		rx_start_func();
    1fe0:	09 95       	icall

	return;
}
    1fe2:	ff 91       	pop	r31
    1fe4:	ef 91       	pop	r30
    1fe6:	bf 91       	pop	r27
    1fe8:	af 91       	pop	r26
    1fea:	9f 91       	pop	r25
    1fec:	8f 91       	pop	r24
    1fee:	7f 91       	pop	r23
    1ff0:	6f 91       	pop	r22
    1ff2:	5f 91       	pop	r21
    1ff4:	4f 91       	pop	r20
    1ff6:	3f 91       	pop	r19
    1ff8:	2f 91       	pop	r18
    1ffa:	0f 90       	pop	r0
    1ffc:	0b be       	out	0x3b, r0	; 59
    1ffe:	0f 90       	pop	r0
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	0f 90       	pop	r0
    2004:	1f 90       	pop	r1
    2006:	18 95       	reti

00002008 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    2008:	1f 92       	push	r1
    200a:	0f 92       	push	r0
    200c:	0f b6       	in	r0, 0x3f	; 63
    200e:	0f 92       	push	r0
    2010:	11 24       	eor	r1, r1
    2012:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    2014:	82 e0       	ldi	r24, 0x02	; 2
    2016:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    201a:	8f 91       	pop	r24
    201c:	0f 90       	pop	r0
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	0f 90       	pop	r0
    2022:	1f 90       	pop	r1
    2024:	18 95       	reti

00002026 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    2026:	1f 92       	push	r1
    2028:	0f 92       	push	r0
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	0f 92       	push	r0
    202e:	11 24       	eor	r1, r1
    2030:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    2038:	8f 91       	pop	r24
    203a:	0f 90       	pop	r0
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	0f 90       	pop	r0
    2040:	1f 90       	pop	r1
    2042:	18 95       	reti

00002044 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    2044:	e9 e4       	ldi	r30, 0x49	; 73
    2046:	f1 e0       	ldi	r31, 0x01	; 1
    2048:	90 81       	ld	r25, Z
    204a:	90 7f       	andi	r25, 0xF0	; 240
    204c:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    204e:	90 81       	ld	r25, Z
    2050:	8f 70       	andi	r24, 0x0F	; 15
    2052:	98 2b       	or	r25, r24
    2054:	90 83       	st	Z, r25
    2056:	08 95       	ret

00002058 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    2058:	8f ef       	ldi	r24, 0xFF	; 255
    205a:	08 95       	ret

0000205c <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    205c:	08 95       	ret

0000205e <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
    205e:	08 95       	ret

00002060 <rf_security_disable>:
}



void rf_security_disable()
{
    2060:	08 95       	ret

00002062 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    2062:	8f ef       	ldi	r24, 0xFF	; 255
    2064:	08 95       	ret

00002066 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    2066:	80 91 97 06 	lds	r24, 0x0697
    206a:	90 91 98 06 	lds	r25, 0x0698
    206e:	08 95       	ret

00002070 <rf_flush_rx_fifo>:



inline void rf_flush_rx_fifo()
{
    2070:	08 95       	ret

00002072 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	08 95       	ret

00002076 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	08 95       	ret

0000207a <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	08 95       	ret

0000207e <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
    207e:	08 95       	ret

00002080 <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
    2080:	08 95       	ret

00002082 <rf_test_mode>:
}



void rf_test_mode()
{
    2082:	08 95       	ret

00002084 <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
    2084:	08 95       	ret

00002086 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    2086:	08 95       	ret

00002088 <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    2088:	08 95       	ret

0000208a <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    208a:	08 95       	ret

0000208c <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
    208c:	08 95       	ret

0000208e <rf_cc2591_tx_on>:
	PORTG	|= 0x1;
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	
	DDRG	&= ~(0x1);  // Set RXTX as input
    208e:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
    2090:	8d b1       	in	r24, 0x0d	; 13
    2092:	80 6e       	ori	r24, 0xE0	; 224
    2094:	8d b9       	out	0x0d, r24	; 13
	// PAEN=1  EN=0  HGM=x RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0xA0;
    2096:	8e b1       	in	r24, 0x0e	; 14
    2098:	80 6a       	ori	r24, 0xA0	; 160
    209a:	8e b9       	out	0x0e, r24	; 14
    209c:	08 95       	ret

0000209e <rf_cc2591_rx_on>:
	DDRG	|= 0x1;
	PORTG	&= ~(0x1);
	DDRE	|= 0xE0;
	PORTE	|= 0xE0;
*/
	DDRG	&= ~(0x1);  // Set RXTX as input
    209e:	98 98       	cbi	0x13, 0	; 19
	DDRE |= 0xE0;
    20a0:	8d b1       	in	r24, 0x0d	; 13
    20a2:	80 6e       	ori	r24, 0xE0	; 224
    20a4:	8d b9       	out	0x0d, r24	; 13
	// PAEN=0  EN=1  HGM=1 RXTX=NC
	// PAEN = PE.7
	// EN = PE.6
	// HGM= PE.5
	PORTE |= 0x60;
    20a6:	8e b1       	in	r24, 0x0e	; 14
    20a8:	80 66       	ori	r24, 0x60	; 96
    20aa:	8e b9       	out	0x0e, r24	; 14
    20ac:	08 95       	ret

000020ae <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    20ae:	cf 92       	push	r12
    20b0:	df 92       	push	r13
    20b2:	ef 92       	push	r14
    20b4:	ff 92       	push	r15
    20b6:	0f 93       	push	r16
    20b8:	1f 93       	push	r17
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	27 97       	sbiw	r28, 0x07	; 7
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    20ce:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    20d2:	e0 91 9c 06 	lds	r30, 0x069C
    20d6:	f0 91 9d 06 	lds	r31, 0x069D
    20da:	c0 80       	ld	r12, Z
    20dc:	d3 80       	ldd	r13, Z+3	; 0x03
    20de:	e5 80       	ldd	r14, Z+5	; 0x05
    20e0:	f6 80       	ldd	r15, Z+6	; 0x06
    20e2:	00 85       	ldd	r16, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    20e4:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <rf_rx_packet_nonblock>
	if (err < 1) {
    20e8:	18 16       	cp	r1, r24
    20ea:	1c f0       	brlt	.+6      	; 0x20f2 <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    20ec:	82 e0       	ldi	r24, 0x02	; 2
    20ee:	93 e0       	ldi	r25, 0x03	; 3
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    20f2:	f7 01       	movw	r30, r14
    20f4:	10 81       	ld	r17, Z
	if (ttl == 0) {
    20f6:	11 11       	cpse	r17, r1
    20f8:	07 c0       	rjmp	.+14     	; 0x2108 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    20fa:	81 e2       	ldi	r24, 0x21	; 33
    20fc:	93 e0       	ldi	r25, 0x03	; 3
    20fe:	0e 94 55 31 	call	0x62aa	; 0x62aa <puts>
#endif
		nrk_int_enable();
    2102:	0e 94 80 16 	call	0x2d00	; 0x2d00 <nrk_int_enable>
		return;
    2106:	31 c0       	rjmp	.+98     	; 0x216a <rf_glossy_interrupt+0xbc>
	} else if (ttl == 5) {
    2108:	15 30       	cpi	r17, 0x05	; 5
    210a:	21 f4       	brne	.+8      	; 0x2114 <rf_glossy_interrupt+0x66>
#ifndef GLOSSY_TESTING
		printf("\n");
    210c:	8a e0       	ldi	r24, 0x0A	; 10
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	0e 94 4f 31 	call	0x629e	; 0x629e <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    2114:	c7 01       	movw	r24, r14
    2116:	01 96       	adiw	r24, 0x01	; 1
    2118:	9f 93       	push	r25
    211a:	8f 93       	push	r24
    211c:	80 2f       	mov	r24, r16
    211e:	99 27       	eor	r25, r25
    2120:	87 fd       	sbrc	r24, 7
    2122:	90 95       	com	r25
    2124:	9f 93       	push	r25
    2126:	0f 93       	push	r16
    2128:	1f 92       	push	r1
    212a:	1f 93       	push	r17
    212c:	1f 92       	push	r1
    212e:	cf 92       	push	r12
    2130:	83 e4       	ldi	r24, 0x43	; 67
    2132:	93 e0       	ldi	r25, 0x03	; 3
    2134:	9f 93       	push	r25
    2136:	8f 93       	push	r24
    2138:	0e 94 3b 31 	call	0x6276	; 0x6276 <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    213c:	fd 82       	std	Y+5, r15	; 0x05
    213e:	ec 82       	std	Y+4, r14	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    2140:	11 50       	subi	r17, 0x01	; 1
    2142:	f7 01       	movw	r30, r14
    2144:	10 83       	st	Z, r17
	rfTxInfo.length = rfRxInfo.length;
    2146:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
    2148:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    214a:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    214c:	8f ef       	ldi	r24, 0xFF	; 255
    214e:	9f ef       	ldi	r25, 0xFF	; 255
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    2154:	0e 94 80 16 	call	0x2d00	; 0x2d00 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    2158:	ce 01       	movw	r24, r28
    215a:	01 96       	adiw	r24, 0x01	; 1
    215c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <rf_tx_packet>
#endif
	return;
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	f8 94       	cli
    2164:	de bf       	out	0x3e, r29	; 62
    2166:	0f be       	out	0x3f, r0	; 63
    2168:	cd bf       	out	0x3d, r28	; 61
}
    216a:	27 96       	adiw	r28, 0x07	; 7
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	1f 91       	pop	r17
    217c:	0f 91       	pop	r16
    217e:	ff 90       	pop	r15
    2180:	ef 90       	pop	r14
    2182:	df 90       	pop	r13
    2184:	cf 90       	pop	r12
    2186:	08 95       	ret

00002188 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    2188:	1f 92       	push	r1
    218a:	0f 92       	push	r0
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	0f 92       	push	r0
    2190:	11 24       	eor	r1, r1
    2192:	0b b6       	in	r0, 0x3b	; 59
    2194:	0f 92       	push	r0
    2196:	2f 93       	push	r18
    2198:	3f 93       	push	r19
    219a:	4f 93       	push	r20
    219c:	5f 93       	push	r21
    219e:	6f 93       	push	r22
    21a0:	7f 93       	push	r23
    21a2:	8f 93       	push	r24
    21a4:	9f 93       	push	r25
    21a6:	af 93       	push	r26
    21a8:	bf 93       	push	r27
    21aa:	ef 93       	push	r30
    21ac:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	90 91 7b 01 	lds	r25, 0x017B
    21b4:	89 17       	cp	r24, r25
    21b6:	10 f4       	brcc	.+4      	; 0x21bc <__vector_60+0x34>
    21b8:	8f 5f       	subi	r24, 0xFF	; 255
    21ba:	fa cf       	rjmp	.-12     	; 0x21b0 <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

   if((PHY_RSSI >> RX_CRC_VALID) & 0x1){
    21bc:	80 91 46 01 	lds	r24, 0x0146
    21c0:	87 ff       	sbrs	r24, 7
    21c2:	04 c0       	rjmp	.+8      	; 0x21cc <__vector_60+0x44>
      rx_ready = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	80 93 d1 06 	sts	0x06D1, r24
    21ca:	04 c0       	rjmp	.+8      	; 0x21d4 <__vector_60+0x4c>
   } else {
      printf("RX end failed checksum!\r\n");
    21cc:	8c e6       	ldi	r24, 0x6C	; 108
    21ce:	93 e0       	ldi	r25, 0x03	; 3
    21d0:	0e 94 55 31 	call	0x62aa	; 0x62aa <puts>
   }
   IRQ_STATUS = (1 << RX_END);
    21d4:	88 e0       	ldi	r24, 0x08	; 8
    21d6:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    21da:	80 91 46 01 	lds	r24, 0x0146
    21de:	87 ff       	sbrs	r24, 7
    21e0:	05 c0       	rjmp	.+10     	; 0x21ec <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
    21e2:	80 91 99 06 	lds	r24, 0x0699
    21e6:	81 11       	cpse	r24, r1
    21e8:	0e 94 57 10 	call	0x20ae	; 0x20ae <rf_glossy_interrupt>
	}

	if(rx_end_func)
    21ec:	e0 91 56 04 	lds	r30, 0x0456
    21f0:	f0 91 57 04 	lds	r31, 0x0457
    21f4:	30 97       	sbiw	r30, 0x00	; 0
    21f6:	09 f0       	breq	.+2      	; 0x21fa <__vector_60+0x72>
		rx_end_func();
    21f8:	09 95       	icall

	return;
}
    21fa:	ff 91       	pop	r31
    21fc:	ef 91       	pop	r30
    21fe:	bf 91       	pop	r27
    2200:	af 91       	pop	r26
    2202:	9f 91       	pop	r25
    2204:	8f 91       	pop	r24
    2206:	7f 91       	pop	r23
    2208:	6f 91       	pop	r22
    220a:	5f 91       	pop	r21
    220c:	4f 91       	pop	r20
    220e:	3f 91       	pop	r19
    2210:	2f 91       	pop	r18
    2212:	0f 90       	pop	r0
    2214:	0b be       	out	0x3b, r0	; 59
    2216:	0f 90       	pop	r0
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	0f 90       	pop	r0
    221c:	1f 90       	pop	r1
    221e:	18 95       	reti

00002220 <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    2220:	a6 ea       	ldi	r26, 0xA6	; 166
    2222:	b6 e0       	ldi	r27, 0x06	; 6
    2224:	fc 01       	movw	r30, r24
    2226:	40 96       	adiw	r24, 0x10	; 16
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    2228:	20 81       	ld	r18, Z
    222a:	2d 93       	st	X+, r18
      AES_KEY = key[i];
    222c:	21 91       	ld	r18, Z+
    222e:	20 93 3f 01 	sts	0x013F, r18

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    2232:	e8 17       	cp	r30, r24
    2234:	f9 07       	cpc	r31, r25
    2236:	c1 f7       	brne	.-16     	; 0x2228 <aes_setkey+0x8>
    2238:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    223a:	10 92 3e 01 	sts	0x013E, r1
    223e:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    2240:	e1 f7       	brne	.-8      	; 0x223a <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    2242:	80 e8       	ldi	r24, 0x80	; 128
    2244:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    2248:	80 91 3d 01 	lds	r24, 0x013D
    224c:	80 ff       	sbrs	r24, 0
    224e:	fc cf       	rjmp	.-8      	; 0x2248 <aes_setkey+0x28>
    2250:	e9 eb       	ldi	r30, 0xB9	; 185
    2252:	f6 e0       	ldi	r31, 0x06	; 6
    2254:	80 e1       	ldi	r24, 0x10	; 16
    2256:	8e 0f       	add	r24, r30
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    2258:	90 91 3f 01 	lds	r25, 0x013F
    225c:	91 93       	st	Z+, r25
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    225e:	8e 13       	cpse	r24, r30
    2260:	fb cf       	rjmp	.-10     	; 0x2258 <aes_setkey+0x38>
      dkey[i] = AES_KEY;
   }
}
    2262:	08 95       	ret

00002264 <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	dc 01       	movw	r26, r24
   uint8_t i, j;

   if(len==0 || len%16!=0)
    226a:	66 23       	and	r22, r22
    226c:	09 f4       	brne	.+2      	; 0x2270 <aes_encrypt+0xc>
    226e:	45 c0       	rjmp	.+138    	; 0x22fa <aes_encrypt+0x96>
    2270:	86 2f       	mov	r24, r22
    2272:	8f 70       	andi	r24, 0x0F	; 15
    2274:	09 f0       	breq	.+2      	; 0x2278 <aes_encrypt+0x14>
    2276:	41 c0       	rjmp	.+130    	; 0x22fa <aes_encrypt+0x96>
    2278:	e6 ea       	ldi	r30, 0xA6	; 166
    227a:	f6 e0       	ldi	r31, 0x06	; 6
    227c:	90 e1       	ldi	r25, 0x10	; 16
    227e:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    2280:	21 91       	ld	r18, Z+
    2282:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    2286:	9e 13       	cpse	r25, r30
    2288:	fb cf       	rjmp	.-10     	; 0x2280 <aes_encrypt+0x1c>
    228a:	90 e0       	ldi	r25, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    228c:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    228e:	e0 e2       	ldi	r30, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    2290:	40 e1       	ldi	r20, 0x10	; 16
    2292:	94 9f       	mul	r25, r20
    2294:	90 01       	movw	r18, r0
    2296:	11 24       	eor	r1, r1
    2298:	26 17       	cp	r18, r22
    229a:	37 07       	cpc	r19, r23
    229c:	7c f5       	brge	.+94     	; 0x22fc <aes_encrypt+0x98>
      if(i==0)
    229e:	91 11       	cpse	r25, r1
    22a0:	03 c0       	rjmp	.+6      	; 0x22a8 <aes_encrypt+0x44>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    22a2:	10 92 3c 01 	sts	0x013C, r1
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <aes_encrypt+0x48>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    22a8:	e0 93 3c 01 	sts	0x013C, r30

uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	50 e0       	ldi	r21, 0x00	; 0
    22b0:	2a 0f       	add	r18, r26
    22b2:	3b 1f       	adc	r19, r27
    22b4:	e9 01       	movw	r28, r18
    22b6:	c4 0f       	add	r28, r20
    22b8:	d5 1f       	adc	r29, r21
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    22ba:	f8 81       	ld	r31, Y
    22bc:	f0 93 3e 01 	sts	0x013E, r31
    22c0:	4f 5f       	subi	r20, 0xFF	; 255
    22c2:	5f 4f       	sbci	r21, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    22c4:	40 31       	cpi	r20, 0x10	; 16
    22c6:	51 05       	cpc	r21, r1
    22c8:	a9 f7       	brne	.-22     	; 0x22b4 <aes_encrypt+0x50>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    22ca:	40 91 3c 01 	lds	r20, 0x013C
    22ce:	40 68       	ori	r20, 0x80	; 128
    22d0:	40 93 3c 01 	sts	0x013C, r20
      while(!(AES_STATUS & (1 << AES_DONE)))
    22d4:	40 91 3d 01 	lds	r20, 0x013D
    22d8:	40 ff       	sbrs	r20, 0
    22da:	fc cf       	rjmp	.-8      	; 0x22d4 <aes_encrypt+0x70>
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	50 e0       	ldi	r21, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    22e0:	f0 91 3e 01 	lds	r31, 0x013E
    22e4:	e9 01       	movw	r28, r18
    22e6:	c4 0f       	add	r28, r20
    22e8:	d5 1f       	adc	r29, r21
    22ea:	f8 83       	st	Y, r31
    22ec:	4f 5f       	subi	r20, 0xFF	; 255
    22ee:	5f 4f       	sbci	r21, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    22f0:	40 31       	cpi	r20, 0x10	; 16
    22f2:	51 05       	cpc	r21, r1
    22f4:	a9 f7       	brne	.-22     	; 0x22e0 <aes_encrypt+0x7c>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    22f6:	9f 5f       	subi	r25, 0xFF	; 255
    22f8:	cb cf       	rjmp	.-106    	; 0x2290 <aes_encrypt+0x2c>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    22fa:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    22fc:	df 91       	pop	r29
    22fe:	cf 91       	pop	r28
    2300:	08 95       	ret

00002302 <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    2302:	0f 93       	push	r16
    2304:	1f 93       	push	r17
    2306:	cf 93       	push	r28
    2308:	df 93       	push	r29
    230a:	dc 01       	movw	r26, r24
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    230c:	61 30       	cpi	r22, 0x01	; 1
    230e:	09 f4       	brne	.+2      	; 0x2312 <aes_decrypt+0x10>
    2310:	58 c0       	rjmp	.+176    	; 0x23c2 <aes_decrypt+0xc0>
    2312:	86 2f       	mov	r24, r22
    2314:	8f 70       	andi	r24, 0x0F	; 15
    2316:	09 f0       	breq	.+2      	; 0x231a <aes_decrypt+0x18>
    2318:	54 c0       	rjmp	.+168    	; 0x23c2 <aes_decrypt+0xc0>
    231a:	e9 eb       	ldi	r30, 0xB9	; 185
    231c:	f6 e0       	ldi	r31, 0x06	; 6
    231e:	90 e1       	ldi	r25, 0x10	; 16
    2320:	9e 0f       	add	r25, r30
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    2322:	21 91       	ld	r18, Z+
    2324:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    2328:	9e 13       	cpse	r25, r30
    232a:	fb cf       	rjmp	.-10     	; 0x2322 <aes_decrypt+0x20>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    232c:	62 95       	swap	r22
    232e:	6f 70       	andi	r22, 0x0F	; 15
    2330:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    2332:	78 e0       	ldi	r23, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    2334:	6f 3f       	cpi	r22, 0xFF	; 255
    2336:	09 f4       	brne	.+2      	; 0x233a <aes_decrypt+0x38>
    2338:	45 c0       	rjmp	.+138    	; 0x23c4 <aes_decrypt+0xc2>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    233a:	70 93 3c 01 	sts	0x013C, r23
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    233e:	46 2f       	mov	r20, r22
    2340:	55 27       	eor	r21, r21
    2342:	47 fd       	sbrc	r20, 7
    2344:	50 95       	com	r21
    2346:	20 e0       	ldi	r18, 0x00	; 0
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	ed 01       	movw	r28, r26
    234c:	90 e1       	ldi	r25, 0x10	; 16
    234e:	69 02       	muls	r22, r25
    2350:	c0 0d       	add	r28, r0
    2352:	d1 1d       	adc	r29, r1
    2354:	11 24       	eor	r1, r1
    2356:	fe 01       	movw	r30, r28
    2358:	e2 0f       	add	r30, r18
    235a:	f3 1f       	adc	r31, r19
    235c:	90 81       	ld	r25, Z
    235e:	90 93 3e 01 	sts	0x013E, r25
    2362:	2f 5f       	subi	r18, 0xFF	; 255
    2364:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    2366:	20 31       	cpi	r18, 0x10	; 16
    2368:	31 05       	cpc	r19, r1
    236a:	a9 f7       	brne	.-22     	; 0x2356 <aes_decrypt+0x54>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    236c:	90 91 3c 01 	lds	r25, 0x013C
    2370:	90 68       	ori	r25, 0x80	; 128
    2372:	90 93 3c 01 	sts	0x013C, r25
      while(!(AES_STATUS & (1 << AES_DONE)))
    2376:	90 91 3d 01 	lds	r25, 0x013D
    237a:	90 ff       	sbrs	r25, 0
    237c:	fc cf       	rjmp	.-8      	; 0x2376 <aes_decrypt+0x74>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    237e:	41 50       	subi	r20, 0x01	; 1
    2380:	51 09       	sbc	r21, r1
    2382:	94 e0       	ldi	r25, 0x04	; 4
    2384:	44 0f       	add	r20, r20
    2386:	55 1f       	adc	r21, r21
    2388:	9a 95       	dec	r25
    238a:	e1 f7       	brne	.-8      	; 0x2384 <aes_decrypt+0x82>
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    2390:	90 91 3e 01 	lds	r25, 0x013E
    2394:	8e 01       	movw	r16, r28
    2396:	02 0f       	add	r16, r18
    2398:	13 1f       	adc	r17, r19
    239a:	f8 01       	movw	r30, r16
    239c:	90 83       	st	Z, r25
         if(i!=0)
    239e:	66 23       	and	r22, r22
    23a0:	49 f0       	breq	.+18     	; 0x23b4 <aes_decrypt+0xb2>
    23a2:	f9 01       	movw	r30, r18
    23a4:	e4 0f       	add	r30, r20
    23a6:	f5 1f       	adc	r31, r21
    23a8:	ea 0f       	add	r30, r26
    23aa:	fb 1f       	adc	r31, r27
            data[16*i+j] ^= data[16*(i-1)+j];
    23ac:	e0 81       	ld	r30, Z
    23ae:	9e 27       	eor	r25, r30
    23b0:	f8 01       	movw	r30, r16
    23b2:	90 83       	st	Z, r25
    23b4:	2f 5f       	subi	r18, 0xFF	; 255
    23b6:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    23b8:	20 31       	cpi	r18, 0x10	; 16
    23ba:	31 05       	cpc	r19, r1
    23bc:	49 f7       	brne	.-46     	; 0x2390 <aes_decrypt+0x8e>
    23be:	61 50       	subi	r22, 0x01	; 1
    23c0:	b9 cf       	rjmp	.-142    	; 0x2334 <aes_decrypt+0x32>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	1f 91       	pop	r17
    23ca:	0f 91       	pop	r16
    23cc:	08 95       	ret

000023ce <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
    23ce:	80 91 c0 00 	lds	r24, 0x00C0
    23d2:	87 ff       	sbrs	r24, 7
    23d4:	fc cf       	rjmp	.-8      	; 0x23ce <getc0>
    23d6:	80 91 c0 00 	lds	r24, 0x00C0
    23da:	8f 77       	andi	r24, 0x7F	; 127
    23dc:	80 93 c0 00 	sts	0x00C0, r24
    23e0:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
    23e4:	08 95       	ret

000023e6 <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    23e6:	90 91 c0 00 	lds	r25, 0x00C0
    23ea:	95 ff       	sbrs	r25, 5
    23ec:	fc cf       	rjmp	.-8      	; 0x23e6 <putc0>
    23ee:	90 91 c0 00 	lds	r25, 0x00C0
    23f2:	9f 7d       	andi	r25, 0xDF	; 223
    23f4:	90 93 c0 00 	sts	0x00C0, r25
    23f8:	80 93 c6 00 	sts	0x00C6, r24
    23fc:	08 95       	ret

000023fe <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    23fe:	8f ef       	ldi	r24, 0xFF	; 255
    2400:	08 95       	ret

00002402 <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
    2402:	81 30       	cpi	r24, 0x01	; 1
    2404:	19 f4       	brne	.+6      	; 0x240c <nrk_uart_data_ready+0xa>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    2406:	80 91 c8 00 	lds	r24, 0x00C8
    240a:	04 c0       	rjmp	.+8      	; 0x2414 <nrk_uart_data_ready+0x12>
        }
if(uart_num==0)
    240c:	81 11       	cpse	r24, r1
    240e:	06 c0       	rjmp	.+12     	; 0x241c <nrk_uart_data_ready+0x1a>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    2410:	80 91 c0 00 	lds	r24, 0x00C0
    2414:	88 1f       	adc	r24, r24
    2416:	88 27       	eor	r24, r24
    2418:	88 1f       	adc	r24, r24
    241a:	08 95       	ret
        }
return 0;
    241c:	80 e0       	ldi	r24, 0x00	; 0
}
    241e:	08 95       	ret

00002420 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    2420:	cf 93       	push	r28
    2422:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    2424:	fc 01       	movw	r30, r24
    2426:	24 91       	lpm	r18, Z
    2428:	ec 01       	movw	r28, r24
    242a:	21 96       	adiw	r28, 0x01	; 1
    242c:	22 23       	and	r18, r18
    242e:	51 f0       	breq	.+20     	; 0x2444 <nrk_kprintf+0x24>
        putchar(c);
    2430:	60 91 66 07 	lds	r22, 0x0766
    2434:	70 91 67 07 	lds	r23, 0x0767
    2438:	82 2f       	mov	r24, r18
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	0e 94 03 31 	call	0x6206	; 0x6206 <fputc>
    2440:	ce 01       	movw	r24, r28
    2442:	f0 cf       	rjmp	.-32     	; 0x2424 <nrk_kprintf+0x4>
}
    2444:	df 91       	pop	r29
    2446:	cf 91       	pop	r28
    2448:	08 95       	ret

0000244a <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    244a:	86 e0       	ldi	r24, 0x06	; 6
    244c:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    244e:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    2450:	88 ef       	ldi	r24, 0xF8	; 248
    2452:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    2454:	80 ef       	ldi	r24, 0xF0	; 240
    2456:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    2458:	82 e0       	ldi	r24, 0x02	; 2
    245a:	8d b9       	out	0x0d, r24	; 13
    245c:	08 95       	ret

0000245e <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    245e:	0c 94 25 12 	jmp	0x244a	; 0x244a <PORT_INIT>

00002462 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2462:	8f 3f       	cpi	r24, 0xFF	; 255
    2464:	09 f4       	brne	.+2      	; 0x2468 <nrk_gpio_set+0x6>
    2466:	6c c0       	rjmp	.+216    	; 0x2540 <nrk_gpio_set+0xde>
        switch (pin & 0x07) {
    2468:	e8 2f       	mov	r30, r24
    246a:	e7 70       	andi	r30, 0x07	; 7
    246c:	4e 2f       	mov	r20, r30
    246e:	50 e0       	ldi	r21, 0x00	; 0
    2470:	47 30       	cpi	r20, 0x07	; 7
    2472:	51 05       	cpc	r21, r1
    2474:	08 f0       	brcs	.+2      	; 0x2478 <nrk_gpio_set+0x16>
    2476:	64 c0       	rjmp	.+200    	; 0x2540 <nrk_gpio_set+0xde>
    2478:	fa 01       	movw	r30, r20
    247a:	e0 57       	subi	r30, 0x70	; 112
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	86 95       	lsr	r24
    2480:	86 95       	lsr	r24
    2482:	86 95       	lsr	r24
    2484:	0c 94 20 30 	jmp	0x6040	; 0x6040 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2488:	42 b1       	in	r20, 0x02	; 2
    248a:	21 e0       	ldi	r18, 0x01	; 1
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	b9 01       	movw	r22, r18
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <nrk_gpio_set+0x34>
    2492:	66 0f       	add	r22, r22
    2494:	77 1f       	adc	r23, r23
    2496:	8a 95       	dec	r24
    2498:	e2 f7       	brpl	.-8      	; 0x2492 <nrk_gpio_set+0x30>
    249a:	cb 01       	movw	r24, r22
    249c:	84 2b       	or	r24, r20
    249e:	82 b9       	out	0x02, r24	; 2
    24a0:	4d c0       	rjmp	.+154    	; 0x253c <nrk_gpio_set+0xda>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    24a2:	45 b1       	in	r20, 0x05	; 5
    24a4:	21 e0       	ldi	r18, 0x01	; 1
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	b9 01       	movw	r22, r18
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <nrk_gpio_set+0x4e>
    24ac:	66 0f       	add	r22, r22
    24ae:	77 1f       	adc	r23, r23
    24b0:	8a 95       	dec	r24
    24b2:	e2 f7       	brpl	.-8      	; 0x24ac <nrk_gpio_set+0x4a>
    24b4:	cb 01       	movw	r24, r22
    24b6:	84 2b       	or	r24, r20
    24b8:	85 b9       	out	0x05, r24	; 5
    24ba:	40 c0       	rjmp	.+128    	; 0x253c <nrk_gpio_set+0xda>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    24bc:	48 b1       	in	r20, 0x08	; 8
    24be:	21 e0       	ldi	r18, 0x01	; 1
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	b9 01       	movw	r22, r18
    24c4:	02 c0       	rjmp	.+4      	; 0x24ca <nrk_gpio_set+0x68>
    24c6:	66 0f       	add	r22, r22
    24c8:	77 1f       	adc	r23, r23
    24ca:	8a 95       	dec	r24
    24cc:	e2 f7       	brpl	.-8      	; 0x24c6 <nrk_gpio_set+0x64>
    24ce:	cb 01       	movw	r24, r22
    24d0:	84 2b       	or	r24, r20
    24d2:	88 b9       	out	0x08, r24	; 8
    24d4:	33 c0       	rjmp	.+102    	; 0x253c <nrk_gpio_set+0xda>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    24d6:	4b b1       	in	r20, 0x0b	; 11
    24d8:	21 e0       	ldi	r18, 0x01	; 1
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	b9 01       	movw	r22, r18
    24de:	02 c0       	rjmp	.+4      	; 0x24e4 <nrk_gpio_set+0x82>
    24e0:	66 0f       	add	r22, r22
    24e2:	77 1f       	adc	r23, r23
    24e4:	8a 95       	dec	r24
    24e6:	e2 f7       	brpl	.-8      	; 0x24e0 <nrk_gpio_set+0x7e>
    24e8:	cb 01       	movw	r24, r22
    24ea:	84 2b       	or	r24, r20
    24ec:	8b b9       	out	0x0b, r24	; 11
    24ee:	26 c0       	rjmp	.+76     	; 0x253c <nrk_gpio_set+0xda>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    24f0:	4e b1       	in	r20, 0x0e	; 14
    24f2:	21 e0       	ldi	r18, 0x01	; 1
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	b9 01       	movw	r22, r18
    24f8:	02 c0       	rjmp	.+4      	; 0x24fe <nrk_gpio_set+0x9c>
    24fa:	66 0f       	add	r22, r22
    24fc:	77 1f       	adc	r23, r23
    24fe:	8a 95       	dec	r24
    2500:	e2 f7       	brpl	.-8      	; 0x24fa <nrk_gpio_set+0x98>
    2502:	cb 01       	movw	r24, r22
    2504:	84 2b       	or	r24, r20
    2506:	8e b9       	out	0x0e, r24	; 14
    2508:	19 c0       	rjmp	.+50     	; 0x253c <nrk_gpio_set+0xda>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    250a:	41 b3       	in	r20, 0x11	; 17
    250c:	21 e0       	ldi	r18, 0x01	; 1
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	b9 01       	movw	r22, r18
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <nrk_gpio_set+0xb6>
    2514:	66 0f       	add	r22, r22
    2516:	77 1f       	adc	r23, r23
    2518:	8a 95       	dec	r24
    251a:	e2 f7       	brpl	.-8      	; 0x2514 <nrk_gpio_set+0xb2>
    251c:	cb 01       	movw	r24, r22
    251e:	84 2b       	or	r24, r20
    2520:	81 bb       	out	0x11, r24	; 17
    2522:	0c c0       	rjmp	.+24     	; 0x253c <nrk_gpio_set+0xda>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    2524:	44 b3       	in	r20, 0x14	; 20
    2526:	21 e0       	ldi	r18, 0x01	; 1
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	b9 01       	movw	r22, r18
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <nrk_gpio_set+0xd0>
    252e:	66 0f       	add	r22, r22
    2530:	77 1f       	adc	r23, r23
    2532:	8a 95       	dec	r24
    2534:	e2 f7       	brpl	.-8      	; 0x252e <nrk_gpio_set+0xcc>
    2536:	cb 01       	movw	r24, r22
    2538:	84 2b       	or	r24, r20
    253a:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    253c:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    253e:	08 95       	ret
                default: return -1;
    2540:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2542:	08 95       	ret

00002544 <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    2544:	8f 3f       	cpi	r24, 0xFF	; 255
    2546:	09 f4       	brne	.+2      	; 0x254a <nrk_gpio_clr+0x6>
    2548:	73 c0       	rjmp	.+230    	; 0x2630 <nrk_gpio_clr+0xec>
        switch (pin & 0x07) {
    254a:	e8 2f       	mov	r30, r24
    254c:	e7 70       	andi	r30, 0x07	; 7
    254e:	4e 2f       	mov	r20, r30
    2550:	50 e0       	ldi	r21, 0x00	; 0
    2552:	47 30       	cpi	r20, 0x07	; 7
    2554:	51 05       	cpc	r21, r1
    2556:	08 f0       	brcs	.+2      	; 0x255a <nrk_gpio_clr+0x16>
    2558:	6b c0       	rjmp	.+214    	; 0x2630 <nrk_gpio_clr+0xec>
    255a:	fa 01       	movw	r30, r20
    255c:	e9 56       	subi	r30, 0x69	; 105
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	86 95       	lsr	r24
    2562:	86 95       	lsr	r24
    2564:	86 95       	lsr	r24
    2566:	0c 94 20 30 	jmp	0x6040	; 0x6040 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    256a:	42 b1       	in	r20, 0x02	; 2
    256c:	21 e0       	ldi	r18, 0x01	; 1
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	b9 01       	movw	r22, r18
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <nrk_gpio_clr+0x34>
    2574:	66 0f       	add	r22, r22
    2576:	77 1f       	adc	r23, r23
    2578:	8a 95       	dec	r24
    257a:	e2 f7       	brpl	.-8      	; 0x2574 <nrk_gpio_clr+0x30>
    257c:	cb 01       	movw	r24, r22
    257e:	80 95       	com	r24
    2580:	84 23       	and	r24, r20
    2582:	82 b9       	out	0x02, r24	; 2
    2584:	53 c0       	rjmp	.+166    	; 0x262c <nrk_gpio_clr+0xe8>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    2586:	45 b1       	in	r20, 0x05	; 5
    2588:	21 e0       	ldi	r18, 0x01	; 1
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	b9 01       	movw	r22, r18
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <nrk_gpio_clr+0x50>
    2590:	66 0f       	add	r22, r22
    2592:	77 1f       	adc	r23, r23
    2594:	8a 95       	dec	r24
    2596:	e2 f7       	brpl	.-8      	; 0x2590 <nrk_gpio_clr+0x4c>
    2598:	cb 01       	movw	r24, r22
    259a:	80 95       	com	r24
    259c:	84 23       	and	r24, r20
    259e:	85 b9       	out	0x05, r24	; 5
    25a0:	45 c0       	rjmp	.+138    	; 0x262c <nrk_gpio_clr+0xe8>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    25a2:	48 b1       	in	r20, 0x08	; 8
    25a4:	21 e0       	ldi	r18, 0x01	; 1
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	b9 01       	movw	r22, r18
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <nrk_gpio_clr+0x6c>
    25ac:	66 0f       	add	r22, r22
    25ae:	77 1f       	adc	r23, r23
    25b0:	8a 95       	dec	r24
    25b2:	e2 f7       	brpl	.-8      	; 0x25ac <nrk_gpio_clr+0x68>
    25b4:	cb 01       	movw	r24, r22
    25b6:	80 95       	com	r24
    25b8:	84 23       	and	r24, r20
    25ba:	88 b9       	out	0x08, r24	; 8
    25bc:	37 c0       	rjmp	.+110    	; 0x262c <nrk_gpio_clr+0xe8>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    25be:	4b b1       	in	r20, 0x0b	; 11
    25c0:	21 e0       	ldi	r18, 0x01	; 1
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	b9 01       	movw	r22, r18
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <nrk_gpio_clr+0x88>
    25c8:	66 0f       	add	r22, r22
    25ca:	77 1f       	adc	r23, r23
    25cc:	8a 95       	dec	r24
    25ce:	e2 f7       	brpl	.-8      	; 0x25c8 <nrk_gpio_clr+0x84>
    25d0:	cb 01       	movw	r24, r22
    25d2:	80 95       	com	r24
    25d4:	84 23       	and	r24, r20
    25d6:	8b b9       	out	0x0b, r24	; 11
    25d8:	29 c0       	rjmp	.+82     	; 0x262c <nrk_gpio_clr+0xe8>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    25da:	4e b1       	in	r20, 0x0e	; 14
    25dc:	21 e0       	ldi	r18, 0x01	; 1
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	b9 01       	movw	r22, r18
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <nrk_gpio_clr+0xa4>
    25e4:	66 0f       	add	r22, r22
    25e6:	77 1f       	adc	r23, r23
    25e8:	8a 95       	dec	r24
    25ea:	e2 f7       	brpl	.-8      	; 0x25e4 <nrk_gpio_clr+0xa0>
    25ec:	cb 01       	movw	r24, r22
    25ee:	80 95       	com	r24
    25f0:	84 23       	and	r24, r20
    25f2:	8e b9       	out	0x0e, r24	; 14
    25f4:	1b c0       	rjmp	.+54     	; 0x262c <nrk_gpio_clr+0xe8>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    25f6:	41 b3       	in	r20, 0x11	; 17
    25f8:	21 e0       	ldi	r18, 0x01	; 1
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	b9 01       	movw	r22, r18
    25fe:	02 c0       	rjmp	.+4      	; 0x2604 <nrk_gpio_clr+0xc0>
    2600:	66 0f       	add	r22, r22
    2602:	77 1f       	adc	r23, r23
    2604:	8a 95       	dec	r24
    2606:	e2 f7       	brpl	.-8      	; 0x2600 <nrk_gpio_clr+0xbc>
    2608:	cb 01       	movw	r24, r22
    260a:	80 95       	com	r24
    260c:	84 23       	and	r24, r20
    260e:	81 bb       	out	0x11, r24	; 17
    2610:	0d c0       	rjmp	.+26     	; 0x262c <nrk_gpio_clr+0xe8>
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2612:	44 b3       	in	r20, 0x14	; 20
    2614:	21 e0       	ldi	r18, 0x01	; 1
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	b9 01       	movw	r22, r18
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <nrk_gpio_clr+0xdc>
    261c:	66 0f       	add	r22, r22
    261e:	77 1f       	adc	r23, r23
    2620:	8a 95       	dec	r24
    2622:	e2 f7       	brpl	.-8      	; 0x261c <nrk_gpio_clr+0xd8>
    2624:	cb 01       	movw	r24, r22
    2626:	80 95       	com	r24
    2628:	84 23       	and	r24, r20
    262a:	84 bb       	out	0x14, r24	; 20
                default: return -1;
        }
        return 1;
    262c:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    262e:	08 95       	ret
                default: return -1;
    2630:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2632:	08 95       	ret

00002634 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2634:	8f 3f       	cpi	r24, 0xFF	; 255
    2636:	31 f1       	breq	.+76     	; 0x2684 <nrk_gpio_get+0x50>
        switch (pin & 0x07) {
    2638:	e8 2f       	mov	r30, r24
    263a:	e7 70       	andi	r30, 0x07	; 7
    263c:	4e 2f       	mov	r20, r30
    263e:	50 e0       	ldi	r21, 0x00	; 0
    2640:	47 30       	cpi	r20, 0x07	; 7
    2642:	51 05       	cpc	r21, r1
    2644:	f8 f4       	brcc	.+62     	; 0x2684 <nrk_gpio_get+0x50>
    2646:	fa 01       	movw	r30, r20
    2648:	e2 56       	subi	r30, 0x62	; 98
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	28 2f       	mov	r18, r24
    264e:	26 95       	lsr	r18
    2650:	26 95       	lsr	r18
    2652:	26 95       	lsr	r18
    2654:	0c 94 20 30 	jmp	0x6040	; 0x6040 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    2658:	90 b1       	in	r25, 0x00	; 0
    265a:	0b c0       	rjmp	.+22     	; 0x2672 <nrk_gpio_get+0x3e>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    265c:	93 b1       	in	r25, 0x03	; 3
    265e:	09 c0       	rjmp	.+18     	; 0x2672 <nrk_gpio_get+0x3e>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    2660:	96 b1       	in	r25, 0x06	; 6
    2662:	07 c0       	rjmp	.+14     	; 0x2672 <nrk_gpio_get+0x3e>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    2664:	99 b1       	in	r25, 0x09	; 9
    2666:	05 c0       	rjmp	.+10     	; 0x2672 <nrk_gpio_get+0x3e>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    2668:	9c b1       	in	r25, 0x0c	; 12
    266a:	03 c0       	rjmp	.+6      	; 0x2672 <nrk_gpio_get+0x3e>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    266c:	9f b1       	in	r25, 0x0f	; 15
    266e:	01 c0       	rjmp	.+2      	; 0x2672 <nrk_gpio_get+0x3e>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    2670:	92 b3       	in	r25, 0x12	; 18
    2672:	89 2f       	mov	r24, r25
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	02 c0       	rjmp	.+4      	; 0x267c <nrk_gpio_get+0x48>
    2678:	95 95       	asr	r25
    267a:	87 95       	ror	r24
    267c:	2a 95       	dec	r18
    267e:	e2 f7       	brpl	.-8      	; 0x2678 <nrk_gpio_get+0x44>
    2680:	81 70       	andi	r24, 0x01	; 1
    2682:	08 95       	ret
                default: return -1;
    2684:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2686:	08 95       	ret

00002688 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2688:	8f 3f       	cpi	r24, 0xFF	; 255
    268a:	09 f4       	brne	.+2      	; 0x268e <nrk_gpio_toggle+0x6>
    268c:	06 c1       	rjmp	.+524    	; 0x289a <nrk_gpio_toggle+0x212>
        switch (pin & 0x07) {
    268e:	e8 2f       	mov	r30, r24
    2690:	e7 70       	andi	r30, 0x07	; 7
    2692:	4e 2f       	mov	r20, r30
    2694:	50 e0       	ldi	r21, 0x00	; 0
    2696:	47 30       	cpi	r20, 0x07	; 7
    2698:	51 05       	cpc	r21, r1
    269a:	08 f0       	brcs	.+2      	; 0x269e <nrk_gpio_toggle+0x16>
    269c:	fe c0       	rjmp	.+508    	; 0x289a <nrk_gpio_toggle+0x212>
    269e:	fa 01       	movw	r30, r20
    26a0:	eb 55       	subi	r30, 0x5B	; 91
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	86 95       	lsr	r24
    26a6:	86 95       	lsr	r24
    26a8:	86 95       	lsr	r24
    26aa:	0c 94 20 30 	jmp	0x6040	; 0x6040 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    26ae:	20 b1       	in	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	08 2e       	mov	r0, r24
    26b4:	02 c0       	rjmp	.+4      	; 0x26ba <nrk_gpio_toggle+0x32>
    26b6:	35 95       	asr	r19
    26b8:	27 95       	ror	r18
    26ba:	0a 94       	dec	r0
    26bc:	e2 f7       	brpl	.-8      	; 0x26b6 <nrk_gpio_toggle+0x2e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    26be:	42 b1       	in	r20, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    26c0:	20 fd       	sbrc	r18, 0
    26c2:	0b c0       	rjmp	.+22     	; 0x26da <nrk_gpio_toggle+0x52>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    26c4:	21 e0       	ldi	r18, 0x01	; 1
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	b9 01       	movw	r22, r18
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <nrk_gpio_toggle+0x48>
    26cc:	66 0f       	add	r22, r22
    26ce:	77 1f       	adc	r23, r23
    26d0:	8a 95       	dec	r24
    26d2:	e2 f7       	brpl	.-8      	; 0x26cc <nrk_gpio_toggle+0x44>
    26d4:	cb 01       	movw	r24, r22
    26d6:	84 2b       	or	r24, r20
    26d8:	0b c0       	rjmp	.+22     	; 0x26f0 <nrk_gpio_toggle+0x68>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    26da:	21 e0       	ldi	r18, 0x01	; 1
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	b9 01       	movw	r22, r18
    26e0:	02 c0       	rjmp	.+4      	; 0x26e6 <nrk_gpio_toggle+0x5e>
    26e2:	66 0f       	add	r22, r22
    26e4:	77 1f       	adc	r23, r23
    26e6:	8a 95       	dec	r24
    26e8:	e2 f7       	brpl	.-8      	; 0x26e2 <nrk_gpio_toggle+0x5a>
    26ea:	cb 01       	movw	r24, r22
    26ec:	80 95       	com	r24
    26ee:	84 23       	and	r24, r20
    26f0:	82 b9       	out	0x02, r24	; 2
    26f2:	16 c0       	rjmp	.+44     	; 0x2720 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    26f4:	23 b1       	in	r18, 0x03	; 3
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	08 2e       	mov	r0, r24
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <nrk_gpio_toggle+0x78>
    26fc:	35 95       	asr	r19
    26fe:	27 95       	ror	r18
    2700:	0a 94       	dec	r0
    2702:	e2 f7       	brpl	.-8      	; 0x26fc <nrk_gpio_toggle+0x74>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    2704:	45 b1       	in	r20, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    2706:	20 fd       	sbrc	r18, 0
    2708:	0d c0       	rjmp	.+26     	; 0x2724 <nrk_gpio_toggle+0x9c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    270a:	21 e0       	ldi	r18, 0x01	; 1
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	b9 01       	movw	r22, r18
    2710:	02 c0       	rjmp	.+4      	; 0x2716 <nrk_gpio_toggle+0x8e>
    2712:	66 0f       	add	r22, r22
    2714:	77 1f       	adc	r23, r23
    2716:	8a 95       	dec	r24
    2718:	e2 f7       	brpl	.-8      	; 0x2712 <nrk_gpio_toggle+0x8a>
    271a:	cb 01       	movw	r24, r22
    271c:	84 2b       	or	r24, r20
    271e:	85 b9       	out	0x05, r24	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    2724:	21 e0       	ldi	r18, 0x01	; 1
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	b9 01       	movw	r22, r18
    272a:	02 c0       	rjmp	.+4      	; 0x2730 <nrk_gpio_toggle+0xa8>
    272c:	66 0f       	add	r22, r22
    272e:	77 1f       	adc	r23, r23
    2730:	8a 95       	dec	r24
    2732:	e2 f7       	brpl	.-8      	; 0x272c <nrk_gpio_toggle+0xa4>
    2734:	cb 01       	movw	r24, r22
    2736:	80 95       	com	r24
    2738:	84 23       	and	r24, r20
    273a:	f1 cf       	rjmp	.-30     	; 0x271e <nrk_gpio_toggle+0x96>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    273c:	26 b1       	in	r18, 0x06	; 6
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	08 2e       	mov	r0, r24
    2742:	02 c0       	rjmp	.+4      	; 0x2748 <nrk_gpio_toggle+0xc0>
    2744:	35 95       	asr	r19
    2746:	27 95       	ror	r18
    2748:	0a 94       	dec	r0
    274a:	e2 f7       	brpl	.-8      	; 0x2744 <nrk_gpio_toggle+0xbc>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    274c:	48 b1       	in	r20, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    274e:	20 fd       	sbrc	r18, 0
    2750:	0b c0       	rjmp	.+22     	; 0x2768 <nrk_gpio_toggle+0xe0>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2752:	21 e0       	ldi	r18, 0x01	; 1
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	b9 01       	movw	r22, r18
    2758:	02 c0       	rjmp	.+4      	; 0x275e <nrk_gpio_toggle+0xd6>
    275a:	66 0f       	add	r22, r22
    275c:	77 1f       	adc	r23, r23
    275e:	8a 95       	dec	r24
    2760:	e2 f7       	brpl	.-8      	; 0x275a <nrk_gpio_toggle+0xd2>
    2762:	cb 01       	movw	r24, r22
    2764:	84 2b       	or	r24, r20
    2766:	0b c0       	rjmp	.+22     	; 0x277e <nrk_gpio_toggle+0xf6>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    2768:	21 e0       	ldi	r18, 0x01	; 1
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	b9 01       	movw	r22, r18
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <nrk_gpio_toggle+0xec>
    2770:	66 0f       	add	r22, r22
    2772:	77 1f       	adc	r23, r23
    2774:	8a 95       	dec	r24
    2776:	e2 f7       	brpl	.-8      	; 0x2770 <nrk_gpio_toggle+0xe8>
    2778:	cb 01       	movw	r24, r22
    277a:	80 95       	com	r24
    277c:	84 23       	and	r24, r20
    277e:	88 b9       	out	0x08, r24	; 8
    2780:	cf cf       	rjmp	.-98     	; 0x2720 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2782:	29 b1       	in	r18, 0x09	; 9
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	08 2e       	mov	r0, r24
    2788:	02 c0       	rjmp	.+4      	; 0x278e <nrk_gpio_toggle+0x106>
    278a:	35 95       	asr	r19
    278c:	27 95       	ror	r18
    278e:	0a 94       	dec	r0
    2790:	e2 f7       	brpl	.-8      	; 0x278a <nrk_gpio_toggle+0x102>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2792:	4b b1       	in	r20, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2794:	20 fd       	sbrc	r18, 0
    2796:	0b c0       	rjmp	.+22     	; 0x27ae <nrk_gpio_toggle+0x126>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2798:	21 e0       	ldi	r18, 0x01	; 1
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	b9 01       	movw	r22, r18
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <nrk_gpio_toggle+0x11c>
    27a0:	66 0f       	add	r22, r22
    27a2:	77 1f       	adc	r23, r23
    27a4:	8a 95       	dec	r24
    27a6:	e2 f7       	brpl	.-8      	; 0x27a0 <nrk_gpio_toggle+0x118>
    27a8:	cb 01       	movw	r24, r22
    27aa:	84 2b       	or	r24, r20
    27ac:	0b c0       	rjmp	.+22     	; 0x27c4 <nrk_gpio_toggle+0x13c>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    27ae:	21 e0       	ldi	r18, 0x01	; 1
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	b9 01       	movw	r22, r18
    27b4:	02 c0       	rjmp	.+4      	; 0x27ba <nrk_gpio_toggle+0x132>
    27b6:	66 0f       	add	r22, r22
    27b8:	77 1f       	adc	r23, r23
    27ba:	8a 95       	dec	r24
    27bc:	e2 f7       	brpl	.-8      	; 0x27b6 <nrk_gpio_toggle+0x12e>
    27be:	cb 01       	movw	r24, r22
    27c0:	80 95       	com	r24
    27c2:	84 23       	and	r24, r20
    27c4:	8b b9       	out	0x0b, r24	; 11
    27c6:	ac cf       	rjmp	.-168    	; 0x2720 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    27c8:	2c b1       	in	r18, 0x0c	; 12
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	08 2e       	mov	r0, r24
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <nrk_gpio_toggle+0x14c>
    27d0:	35 95       	asr	r19
    27d2:	27 95       	ror	r18
    27d4:	0a 94       	dec	r0
    27d6:	e2 f7       	brpl	.-8      	; 0x27d0 <nrk_gpio_toggle+0x148>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    27d8:	4e b1       	in	r20, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    27da:	20 fd       	sbrc	r18, 0
    27dc:	0b c0       	rjmp	.+22     	; 0x27f4 <nrk_gpio_toggle+0x16c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    27de:	21 e0       	ldi	r18, 0x01	; 1
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	b9 01       	movw	r22, r18
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <nrk_gpio_toggle+0x162>
    27e6:	66 0f       	add	r22, r22
    27e8:	77 1f       	adc	r23, r23
    27ea:	8a 95       	dec	r24
    27ec:	e2 f7       	brpl	.-8      	; 0x27e6 <nrk_gpio_toggle+0x15e>
    27ee:	cb 01       	movw	r24, r22
    27f0:	84 2b       	or	r24, r20
    27f2:	0b c0       	rjmp	.+22     	; 0x280a <nrk_gpio_toggle+0x182>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    27f4:	21 e0       	ldi	r18, 0x01	; 1
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	b9 01       	movw	r22, r18
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <nrk_gpio_toggle+0x178>
    27fc:	66 0f       	add	r22, r22
    27fe:	77 1f       	adc	r23, r23
    2800:	8a 95       	dec	r24
    2802:	e2 f7       	brpl	.-8      	; 0x27fc <nrk_gpio_toggle+0x174>
    2804:	cb 01       	movw	r24, r22
    2806:	80 95       	com	r24
    2808:	84 23       	and	r24, r20
    280a:	8e b9       	out	0x0e, r24	; 14
    280c:	89 cf       	rjmp	.-238    	; 0x2720 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    280e:	2f b1       	in	r18, 0x0f	; 15
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	08 2e       	mov	r0, r24
    2814:	02 c0       	rjmp	.+4      	; 0x281a <nrk_gpio_toggle+0x192>
    2816:	35 95       	asr	r19
    2818:	27 95       	ror	r18
    281a:	0a 94       	dec	r0
    281c:	e2 f7       	brpl	.-8      	; 0x2816 <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    281e:	41 b3       	in	r20, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    2820:	20 fd       	sbrc	r18, 0
    2822:	0b c0       	rjmp	.+22     	; 0x283a <nrk_gpio_toggle+0x1b2>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    2824:	21 e0       	ldi	r18, 0x01	; 1
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	b9 01       	movw	r22, r18
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <nrk_gpio_toggle+0x1a8>
    282c:	66 0f       	add	r22, r22
    282e:	77 1f       	adc	r23, r23
    2830:	8a 95       	dec	r24
    2832:	e2 f7       	brpl	.-8      	; 0x282c <nrk_gpio_toggle+0x1a4>
    2834:	cb 01       	movw	r24, r22
    2836:	84 2b       	or	r24, r20
    2838:	0b c0       	rjmp	.+22     	; 0x2850 <nrk_gpio_toggle+0x1c8>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    283a:	21 e0       	ldi	r18, 0x01	; 1
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	b9 01       	movw	r22, r18
    2840:	02 c0       	rjmp	.+4      	; 0x2846 <nrk_gpio_toggle+0x1be>
    2842:	66 0f       	add	r22, r22
    2844:	77 1f       	adc	r23, r23
    2846:	8a 95       	dec	r24
    2848:	e2 f7       	brpl	.-8      	; 0x2842 <nrk_gpio_toggle+0x1ba>
    284a:	cb 01       	movw	r24, r22
    284c:	80 95       	com	r24
    284e:	84 23       	and	r24, r20
    2850:	81 bb       	out	0x11, r24	; 17
    2852:	66 cf       	rjmp	.-308    	; 0x2720 <nrk_gpio_toggle+0x98>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    2854:	22 b3       	in	r18, 0x12	; 18
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	08 2e       	mov	r0, r24
    285a:	02 c0       	rjmp	.+4      	; 0x2860 <nrk_gpio_toggle+0x1d8>
    285c:	35 95       	asr	r19
    285e:	27 95       	ror	r18
    2860:	0a 94       	dec	r0
    2862:	e2 f7       	brpl	.-8      	; 0x285c <nrk_gpio_toggle+0x1d4>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    2864:	44 b3       	in	r20, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    2866:	20 fd       	sbrc	r18, 0
    2868:	0b c0       	rjmp	.+22     	; 0x2880 <nrk_gpio_toggle+0x1f8>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    286a:	21 e0       	ldi	r18, 0x01	; 1
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	b9 01       	movw	r22, r18
    2870:	02 c0       	rjmp	.+4      	; 0x2876 <nrk_gpio_toggle+0x1ee>
    2872:	66 0f       	add	r22, r22
    2874:	77 1f       	adc	r23, r23
    2876:	8a 95       	dec	r24
    2878:	e2 f7       	brpl	.-8      	; 0x2872 <nrk_gpio_toggle+0x1ea>
    287a:	cb 01       	movw	r24, r22
    287c:	84 2b       	or	r24, r20
    287e:	0b c0       	rjmp	.+22     	; 0x2896 <nrk_gpio_toggle+0x20e>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    2880:	21 e0       	ldi	r18, 0x01	; 1
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	b9 01       	movw	r22, r18
    2886:	02 c0       	rjmp	.+4      	; 0x288c <nrk_gpio_toggle+0x204>
    2888:	66 0f       	add	r22, r22
    288a:	77 1f       	adc	r23, r23
    288c:	8a 95       	dec	r24
    288e:	e2 f7       	brpl	.-8      	; 0x2888 <nrk_gpio_toggle+0x200>
    2890:	cb 01       	movw	r24, r22
    2892:	80 95       	com	r24
    2894:	84 23       	and	r24, r20
    2896:	84 bb       	out	0x14, r24	; 20
    2898:	43 cf       	rjmp	.-378    	; 0x2720 <nrk_gpio_toggle+0x98>
                        }
                        break;
                 default: return -1;
    289a:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    289c:	08 95       	ret

0000289e <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    289e:	8f 3f       	cpi	r24, 0xFF	; 255
    28a0:	09 f4       	brne	.+2      	; 0x28a4 <nrk_gpio_direction+0x6>
    28a2:	d5 c0       	rjmp	.+426    	; 0x2a4e <nrk_gpio_direction+0x1b0>
    28a4:	e8 2f       	mov	r30, r24
    28a6:	e7 70       	andi	r30, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    28a8:	4e 2f       	mov	r20, r30
    28aa:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    28ac:	61 11       	cpse	r22, r1
    28ae:	67 c0       	rjmp	.+206    	; 0x297e <nrk_gpio_direction+0xe0>
                switch (pin & 0x07) {
    28b0:	47 30       	cpi	r20, 0x07	; 7
    28b2:	51 05       	cpc	r21, r1
    28b4:	08 f0       	brcs	.+2      	; 0x28b8 <nrk_gpio_direction+0x1a>
    28b6:	cb c0       	rjmp	.+406    	; 0x2a4e <nrk_gpio_direction+0x1b0>
    28b8:	fa 01       	movw	r30, r20
    28ba:	e4 55       	subi	r30, 0x54	; 84
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	86 95       	lsr	r24
    28c0:	86 95       	lsr	r24
    28c2:	86 95       	lsr	r24
    28c4:	0c 94 20 30 	jmp	0x6040	; 0x6040 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    28c8:	41 b1       	in	r20, 0x01	; 1
    28ca:	21 e0       	ldi	r18, 0x01	; 1
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	b9 01       	movw	r22, r18
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <nrk_gpio_direction+0x38>
    28d2:	66 0f       	add	r22, r22
    28d4:	77 1f       	adc	r23, r23
    28d6:	8a 95       	dec	r24
    28d8:	e2 f7       	brpl	.-8      	; 0x28d2 <nrk_gpio_direction+0x34>
    28da:	cb 01       	movw	r24, r22
    28dc:	80 95       	com	r24
    28de:	84 23       	and	r24, r20
    28e0:	65 c0       	rjmp	.+202    	; 0x29ac <nrk_gpio_direction+0x10e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    28e2:	44 b1       	in	r20, 0x04	; 4
    28e4:	21 e0       	ldi	r18, 0x01	; 1
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	b9 01       	movw	r22, r18
    28ea:	02 c0       	rjmp	.+4      	; 0x28f0 <nrk_gpio_direction+0x52>
    28ec:	66 0f       	add	r22, r22
    28ee:	77 1f       	adc	r23, r23
    28f0:	8a 95       	dec	r24
    28f2:	e2 f7       	brpl	.-8      	; 0x28ec <nrk_gpio_direction+0x4e>
    28f4:	cb 01       	movw	r24, r22
    28f6:	80 95       	com	r24
    28f8:	84 23       	and	r24, r20
    28fa:	65 c0       	rjmp	.+202    	; 0x29c6 <nrk_gpio_direction+0x128>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    28fc:	47 b1       	in	r20, 0x07	; 7
    28fe:	21 e0       	ldi	r18, 0x01	; 1
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	b9 01       	movw	r22, r18
    2904:	02 c0       	rjmp	.+4      	; 0x290a <nrk_gpio_direction+0x6c>
    2906:	66 0f       	add	r22, r22
    2908:	77 1f       	adc	r23, r23
    290a:	8a 95       	dec	r24
    290c:	e2 f7       	brpl	.-8      	; 0x2906 <nrk_gpio_direction+0x68>
    290e:	cb 01       	movw	r24, r22
    2910:	80 95       	com	r24
    2912:	84 23       	and	r24, r20
    2914:	65 c0       	rjmp	.+202    	; 0x29e0 <nrk_gpio_direction+0x142>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    2916:	4a b1       	in	r20, 0x0a	; 10
    2918:	21 e0       	ldi	r18, 0x01	; 1
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	b9 01       	movw	r22, r18
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <nrk_gpio_direction+0x86>
    2920:	66 0f       	add	r22, r22
    2922:	77 1f       	adc	r23, r23
    2924:	8a 95       	dec	r24
    2926:	e2 f7       	brpl	.-8      	; 0x2920 <nrk_gpio_direction+0x82>
    2928:	cb 01       	movw	r24, r22
    292a:	80 95       	com	r24
    292c:	84 23       	and	r24, r20
    292e:	65 c0       	rjmp	.+202    	; 0x29fa <nrk_gpio_direction+0x15c>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    2930:	4d b1       	in	r20, 0x0d	; 13
    2932:	21 e0       	ldi	r18, 0x01	; 1
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	b9 01       	movw	r22, r18
    2938:	02 c0       	rjmp	.+4      	; 0x293e <nrk_gpio_direction+0xa0>
    293a:	66 0f       	add	r22, r22
    293c:	77 1f       	adc	r23, r23
    293e:	8a 95       	dec	r24
    2940:	e2 f7       	brpl	.-8      	; 0x293a <nrk_gpio_direction+0x9c>
    2942:	cb 01       	movw	r24, r22
    2944:	80 95       	com	r24
    2946:	84 23       	and	r24, r20
    2948:	65 c0       	rjmp	.+202    	; 0x2a14 <nrk_gpio_direction+0x176>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    294a:	40 b3       	in	r20, 0x10	; 16
    294c:	21 e0       	ldi	r18, 0x01	; 1
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	b9 01       	movw	r22, r18
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <nrk_gpio_direction+0xba>
    2954:	66 0f       	add	r22, r22
    2956:	77 1f       	adc	r23, r23
    2958:	8a 95       	dec	r24
    295a:	e2 f7       	brpl	.-8      	; 0x2954 <nrk_gpio_direction+0xb6>
    295c:	cb 01       	movw	r24, r22
    295e:	80 95       	com	r24
    2960:	84 23       	and	r24, r20
    2962:	65 c0       	rjmp	.+202    	; 0x2a2e <nrk_gpio_direction+0x190>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    2964:	43 b3       	in	r20, 0x13	; 19
    2966:	21 e0       	ldi	r18, 0x01	; 1
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	b9 01       	movw	r22, r18
    296c:	02 c0       	rjmp	.+4      	; 0x2972 <nrk_gpio_direction+0xd4>
    296e:	66 0f       	add	r22, r22
    2970:	77 1f       	adc	r23, r23
    2972:	8a 95       	dec	r24
    2974:	e2 f7       	brpl	.-8      	; 0x296e <nrk_gpio_direction+0xd0>
    2976:	cb 01       	movw	r24, r22
    2978:	80 95       	com	r24
    297a:	84 23       	and	r24, r20
    297c:	65 c0       	rjmp	.+202    	; 0x2a48 <nrk_gpio_direction+0x1aa>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    297e:	47 30       	cpi	r20, 0x07	; 7
    2980:	51 05       	cpc	r21, r1
    2982:	08 f0       	brcs	.+2      	; 0x2986 <nrk_gpio_direction+0xe8>
    2984:	64 c0       	rjmp	.+200    	; 0x2a4e <nrk_gpio_direction+0x1b0>
    2986:	fa 01       	movw	r30, r20
    2988:	ed 54       	subi	r30, 0x4D	; 77
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	86 95       	lsr	r24
    298e:	86 95       	lsr	r24
    2990:	86 95       	lsr	r24
    2992:	0c 94 20 30 	jmp	0x6040	; 0x6040 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    2996:	41 b1       	in	r20, 0x01	; 1
    2998:	21 e0       	ldi	r18, 0x01	; 1
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	b9 01       	movw	r22, r18
    299e:	02 c0       	rjmp	.+4      	; 0x29a4 <nrk_gpio_direction+0x106>
    29a0:	66 0f       	add	r22, r22
    29a2:	77 1f       	adc	r23, r23
    29a4:	8a 95       	dec	r24
    29a6:	e2 f7       	brpl	.-8      	; 0x29a0 <nrk_gpio_direction+0x102>
    29a8:	cb 01       	movw	r24, r22
    29aa:	84 2b       	or	r24, r20
    29ac:	81 b9       	out	0x01, r24	; 1
    29ae:	4d c0       	rjmp	.+154    	; 0x2a4a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    29b0:	44 b1       	in	r20, 0x04	; 4
    29b2:	21 e0       	ldi	r18, 0x01	; 1
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	b9 01       	movw	r22, r18
    29b8:	02 c0       	rjmp	.+4      	; 0x29be <nrk_gpio_direction+0x120>
    29ba:	66 0f       	add	r22, r22
    29bc:	77 1f       	adc	r23, r23
    29be:	8a 95       	dec	r24
    29c0:	e2 f7       	brpl	.-8      	; 0x29ba <nrk_gpio_direction+0x11c>
    29c2:	cb 01       	movw	r24, r22
    29c4:	84 2b       	or	r24, r20
    29c6:	84 b9       	out	0x04, r24	; 4
    29c8:	40 c0       	rjmp	.+128    	; 0x2a4a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    29ca:	47 b1       	in	r20, 0x07	; 7
    29cc:	21 e0       	ldi	r18, 0x01	; 1
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	b9 01       	movw	r22, r18
    29d2:	02 c0       	rjmp	.+4      	; 0x29d8 <nrk_gpio_direction+0x13a>
    29d4:	66 0f       	add	r22, r22
    29d6:	77 1f       	adc	r23, r23
    29d8:	8a 95       	dec	r24
    29da:	e2 f7       	brpl	.-8      	; 0x29d4 <nrk_gpio_direction+0x136>
    29dc:	cb 01       	movw	r24, r22
    29de:	84 2b       	or	r24, r20
    29e0:	87 b9       	out	0x07, r24	; 7
    29e2:	33 c0       	rjmp	.+102    	; 0x2a4a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    29e4:	4a b1       	in	r20, 0x0a	; 10
    29e6:	21 e0       	ldi	r18, 0x01	; 1
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	b9 01       	movw	r22, r18
    29ec:	02 c0       	rjmp	.+4      	; 0x29f2 <nrk_gpio_direction+0x154>
    29ee:	66 0f       	add	r22, r22
    29f0:	77 1f       	adc	r23, r23
    29f2:	8a 95       	dec	r24
    29f4:	e2 f7       	brpl	.-8      	; 0x29ee <nrk_gpio_direction+0x150>
    29f6:	cb 01       	movw	r24, r22
    29f8:	84 2b       	or	r24, r20
    29fa:	8a b9       	out	0x0a, r24	; 10
    29fc:	26 c0       	rjmp	.+76     	; 0x2a4a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    29fe:	4d b1       	in	r20, 0x0d	; 13
    2a00:	21 e0       	ldi	r18, 0x01	; 1
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	b9 01       	movw	r22, r18
    2a06:	02 c0       	rjmp	.+4      	; 0x2a0c <nrk_gpio_direction+0x16e>
    2a08:	66 0f       	add	r22, r22
    2a0a:	77 1f       	adc	r23, r23
    2a0c:	8a 95       	dec	r24
    2a0e:	e2 f7       	brpl	.-8      	; 0x2a08 <nrk_gpio_direction+0x16a>
    2a10:	cb 01       	movw	r24, r22
    2a12:	84 2b       	or	r24, r20
    2a14:	8d b9       	out	0x0d, r24	; 13
    2a16:	19 c0       	rjmp	.+50     	; 0x2a4a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    2a18:	40 b3       	in	r20, 0x10	; 16
    2a1a:	21 e0       	ldi	r18, 0x01	; 1
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	b9 01       	movw	r22, r18
    2a20:	02 c0       	rjmp	.+4      	; 0x2a26 <nrk_gpio_direction+0x188>
    2a22:	66 0f       	add	r22, r22
    2a24:	77 1f       	adc	r23, r23
    2a26:	8a 95       	dec	r24
    2a28:	e2 f7       	brpl	.-8      	; 0x2a22 <nrk_gpio_direction+0x184>
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	84 2b       	or	r24, r20
    2a2e:	80 bb       	out	0x10, r24	; 16
    2a30:	0c c0       	rjmp	.+24     	; 0x2a4a <nrk_gpio_direction+0x1ac>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    2a32:	43 b3       	in	r20, 0x13	; 19
    2a34:	21 e0       	ldi	r18, 0x01	; 1
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	b9 01       	movw	r22, r18
    2a3a:	02 c0       	rjmp	.+4      	; 0x2a40 <nrk_gpio_direction+0x1a2>
    2a3c:	66 0f       	add	r22, r22
    2a3e:	77 1f       	adc	r23, r23
    2a40:	8a 95       	dec	r24
    2a42:	e2 f7       	brpl	.-8      	; 0x2a3c <nrk_gpio_direction+0x19e>
    2a44:	cb 01       	movw	r24, r22
    2a46:	84 2b       	or	r24, r20
    2a48:	83 bb       	out	0x13, r24	; 19
                        default: return -1;
                }
        }
        return 1;
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    2a4c:	08 95       	ret
                        default: return -1;
    2a4e:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    2a50:	08 95       	ret

00002a52 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    2a52:	81 11       	cpse	r24, r1
    2a54:	06 c0       	rjmp	.+12     	; 0x2a62 <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    2a56:	80 b1       	in	r24, 0x00	; 0
    2a58:	86 95       	lsr	r24
    2a5a:	81 70       	andi	r24, 0x01	; 1
    2a5c:	91 e0       	ldi	r25, 0x01	; 1
    2a5e:	89 27       	eor	r24, r25
    2a60:	08 95       	ret
	} 
return -1;
    2a62:	8f ef       	ldi	r24, 0xFF	; 255
}
    2a64:	08 95       	ret

00002a66 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    2a66:	00 97       	sbiw	r24, 0x00	; 0
    2a68:	11 f4       	brne	.+4      	; 0x2a6e <nrk_led_toggle+0x8>
    2a6a:	83 e2       	ldi	r24, 0x23	; 35
    2a6c:	0d c0       	rjmp	.+26     	; 0x2a88 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    2a6e:	81 30       	cpi	r24, 0x01	; 1
    2a70:	91 05       	cpc	r25, r1
    2a72:	11 f4       	brne	.+4      	; 0x2a78 <nrk_led_toggle+0x12>
    2a74:	8b e2       	ldi	r24, 0x2B	; 43
    2a76:	08 c0       	rjmp	.+16     	; 0x2a88 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    2a78:	82 30       	cpi	r24, 0x02	; 2
    2a7a:	91 05       	cpc	r25, r1
    2a7c:	11 f4       	brne	.+4      	; 0x2a82 <nrk_led_toggle+0x1c>
    2a7e:	83 e3       	ldi	r24, 0x33	; 51
    2a80:	03 c0       	rjmp	.+6      	; 0x2a88 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    2a82:	03 97       	sbiw	r24, 0x03	; 3
    2a84:	29 f4       	brne	.+10     	; 0x2a90 <nrk_led_toggle+0x2a>
    2a86:	8b e3       	ldi	r24, 0x3B	; 59
    2a88:	0e 94 44 13 	call	0x2688	; 0x2688 <nrk_gpio_toggle>
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	08 95       	ret
return -1;
    2a90:	8f ef       	ldi	r24, 0xFF	; 255
}
    2a92:	08 95       	ret

00002a94 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    2a94:	00 97       	sbiw	r24, 0x00	; 0
    2a96:	11 f4       	brne	.+4      	; 0x2a9c <nrk_led_clr+0x8>
    2a98:	83 e2       	ldi	r24, 0x23	; 35
    2a9a:	0d c0       	rjmp	.+26     	; 0x2ab6 <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    2a9c:	81 30       	cpi	r24, 0x01	; 1
    2a9e:	91 05       	cpc	r25, r1
    2aa0:	11 f4       	brne	.+4      	; 0x2aa6 <nrk_led_clr+0x12>
    2aa2:	8b e2       	ldi	r24, 0x2B	; 43
    2aa4:	08 c0       	rjmp	.+16     	; 0x2ab6 <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    2aa6:	82 30       	cpi	r24, 0x02	; 2
    2aa8:	91 05       	cpc	r25, r1
    2aaa:	11 f4       	brne	.+4      	; 0x2ab0 <nrk_led_clr+0x1c>
    2aac:	83 e3       	ldi	r24, 0x33	; 51
    2aae:	03 c0       	rjmp	.+6      	; 0x2ab6 <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    2ab0:	03 97       	sbiw	r24, 0x03	; 3
    2ab2:	29 f4       	brne	.+10     	; 0x2abe <nrk_led_clr+0x2a>
    2ab4:	8b e3       	ldi	r24, 0x3B	; 59
    2ab6:	0e 94 31 12 	call	0x2462	; 0x2462 <nrk_gpio_set>
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	08 95       	ret
return -1;
    2abe:	8f ef       	ldi	r24, 0xFF	; 255
}
    2ac0:	08 95       	ret

00002ac2 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	11 f4       	brne	.+4      	; 0x2aca <nrk_led_set+0x8>
    2ac6:	83 e2       	ldi	r24, 0x23	; 35
    2ac8:	0d c0       	rjmp	.+26     	; 0x2ae4 <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    2aca:	81 30       	cpi	r24, 0x01	; 1
    2acc:	91 05       	cpc	r25, r1
    2ace:	11 f4       	brne	.+4      	; 0x2ad4 <nrk_led_set+0x12>
    2ad0:	8b e2       	ldi	r24, 0x2B	; 43
    2ad2:	08 c0       	rjmp	.+16     	; 0x2ae4 <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    2ad4:	82 30       	cpi	r24, 0x02	; 2
    2ad6:	91 05       	cpc	r25, r1
    2ad8:	11 f4       	brne	.+4      	; 0x2ade <nrk_led_set+0x1c>
    2ada:	83 e3       	ldi	r24, 0x33	; 51
    2adc:	03 c0       	rjmp	.+6      	; 0x2ae4 <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    2ade:	03 97       	sbiw	r24, 0x03	; 3
    2ae0:	29 f4       	brne	.+10     	; 0x2aec <nrk_led_set+0x2a>
    2ae2:	8b e3       	ldi	r24, 0x3B	; 59
    2ae4:	0e 94 a2 12 	call	0x2544	; 0x2544 <nrk_gpio_clr>
    2ae8:	81 e0       	ldi	r24, 0x01	; 1
    2aea:	08 95       	ret
return -1;
    2aec:	8f ef       	ldi	r24, 0xFF	; 255
}
    2aee:	08 95       	ret

00002af0 <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    2af0:	88 23       	and	r24, r24
    2af2:	19 f0       	breq	.+6      	; 0x2afa <nrk_gpio_pullups+0xa>
    2af4:	85 b7       	in	r24, 0x35	; 53
    2af6:	8f 7e       	andi	r24, 0xEF	; 239
    2af8:	02 c0       	rjmp	.+4      	; 0x2afe <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    2afa:	85 b7       	in	r24, 0x35	; 53
    2afc:	80 61       	ori	r24, 0x10	; 16
    2afe:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	08 95       	ret

00002b04 <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    2b04:	90 91 c8 00 	lds	r25, 0x00C8
    2b08:	95 ff       	sbrs	r25, 5
    2b0a:	fc cf       	rjmp	.-8      	; 0x2b04 <putc1>
    2b0c:	80 93 ce 00 	sts	0x00CE, r24
    2b10:	08 95       	ret

00002b12 <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2b12:	90 93 c5 00 	sts	0x00C5, r25
    2b16:	80 93 c4 00 	sts	0x00C4, r24
    2b1a:	86 e0       	ldi	r24, 0x06	; 6
    2b1c:	80 93 c2 00 	sts	0x00C2, r24
    2b20:	e1 ec       	ldi	r30, 0xC1	; 193
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	8b 7f       	andi	r24, 0xFB	; 251
    2b28:	80 83       	st	Z, r24
    2b2a:	a0 ec       	ldi	r26, 0xC0	; 192
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	8c 91       	ld	r24, X
    2b30:	82 60       	ori	r24, 0x02	; 2
    2b32:	8c 93       	st	X, r24
ENABLE_UART0();
    2b34:	80 81       	ld	r24, Z
    2b36:	88 61       	ori	r24, 0x18	; 24
    2b38:	80 83       	st	Z, r24
    2b3a:	08 95       	ret

00002b3c <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    2b3c:	90 93 cd 00 	sts	0x00CD, r25
    2b40:	80 93 cc 00 	sts	0x00CC, r24
    2b44:	86 e0       	ldi	r24, 0x06	; 6
    2b46:	80 93 ca 00 	sts	0x00CA, r24
    2b4a:	e9 ec       	ldi	r30, 0xC9	; 201
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	8b 7f       	andi	r24, 0xFB	; 251
    2b52:	80 83       	st	Z, r24
    2b54:	a8 ec       	ldi	r26, 0xC8	; 200
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	8c 91       	ld	r24, X
    2b5a:	82 60       	ori	r24, 0x02	; 2
    2b5c:	8c 93       	st	X, r24
ENABLE_UART1();
    2b5e:	80 81       	ld	r24, Z
    2b60:	88 61       	ori	r24, 0x18	; 24
    2b62:	80 83       	st	Z, r24
    2b64:	08 95       	ret

00002b66 <nrk_setup_uart>:
 *
 * More advanced UART usage will require manually
 * setting parameters.
 */
void nrk_setup_uart(uint16_t baudrate)
{
    2b66:	cf 93       	push	r28
    2b68:	df 93       	push	r29

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    2b6a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    2b6e:	67 ee       	ldi	r22, 0xE7	; 231
    2b70:	71 e1       	ldi	r23, 0x11	; 17
    2b72:	83 ef       	ldi	r24, 0xF3	; 243
    2b74:	91 e1       	ldi	r25, 0x11	; 17
    2b76:	0e 94 b8 30 	call	0x6170	; 0x6170 <fdevopen>
    2b7a:	c4 e6       	ldi	r28, 0x64	; 100
    2b7c:	d7 e0       	ldi	r29, 0x07	; 7
    2b7e:	9b 83       	std	Y+3, r25	; 0x03
    2b80:	8a 83       	std	Y+2, r24	; 0x02
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    2b82:	67 ee       	ldi	r22, 0xE7	; 231
    2b84:	71 e1       	ldi	r23, 0x11	; 17
    2b86:	83 ef       	ldi	r24, 0xF3	; 243
    2b88:	91 e1       	ldi	r25, 0x11	; 17
    2b8a:	0e 94 b8 30 	call	0x6170	; 0x6170 <fdevopen>
    2b8e:	99 83       	std	Y+1, r25	; 0x01
    2b90:	88 83       	st	Y, r24
   uart_rx_buf_start=0;
   uart_rx_buf_end=0;
   ENABLE_UART0_RX_INT();
#endif

}
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	08 95       	ret

00002b98 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    2b98:	80 91 c8 00 	lds	r24, 0x00C8
    2b9c:	87 ff       	sbrs	r24, 7
    2b9e:	fc cf       	rjmp	.-8      	; 0x2b98 <getc1>
    2ba0:	80 91 c8 00 	lds	r24, 0x00C8
    2ba4:	8f 77       	andi	r24, 0x7F	; 127
    2ba6:	80 93 c8 00 	sts	0x00C8, r24
    2baa:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    2bae:	08 95       	ret

00002bb0 <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	d1 f7       	brne	.-12     	; 0x2bb0 <halWait>

} // halWait
    2bbc:	08 95       	ret

00002bbe <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    2bbe:	0c 94 13 32 	jmp	0x6426	; 0x6426 <__eerd_byte_m128rfa1>

00002bc2 <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    2bc2:	0e 94 1b 32 	call	0x6436	; 0x6436 <__eewr_byte_m128rfa1>
}
    2bc6:	08 95       	ret

00002bc8 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    2bc8:	ef 92       	push	r14
    2bca:	ff 92       	push	r15
    2bcc:	0f 93       	push	r16
    2bce:	1f 93       	push	r17
    2bd0:	cf 93       	push	r28
    2bd2:	df 93       	push	r29
    2bd4:	7c 01       	movw	r14, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	0e 94 13 32 	call	0x6426	; 0x6426 <__eerd_byte_m128rfa1>
    2bde:	18 2f       	mov	r17, r24
    2be0:	f7 01       	movw	r30, r14
    2be2:	83 83       	std	Z+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	0e 94 13 32 	call	0x6426	; 0x6426 <__eerd_byte_m128rfa1>
    2bec:	08 2f       	mov	r16, r24
    2bee:	f7 01       	movw	r30, r14
    2bf0:	82 83       	std	Z+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    2bf2:	82 e0       	ldi	r24, 0x02	; 2
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	0e 94 13 32 	call	0x6426	; 0x6426 <__eerd_byte_m128rfa1>
    2bfa:	d8 2f       	mov	r29, r24
    2bfc:	f7 01       	movw	r30, r14
    2bfe:	81 83       	std	Z+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    2c00:	83 e0       	ldi	r24, 0x03	; 3
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	0e 94 13 32 	call	0x6426	; 0x6426 <__eerd_byte_m128rfa1>
    2c08:	c8 2f       	mov	r28, r24
    2c0a:	f7 01       	movw	r30, r14
    2c0c:	80 83       	st	Z, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    2c0e:	84 e0       	ldi	r24, 0x04	; 4
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	0e 94 13 32 	call	0x6426	; 0x6426 <__eerd_byte_m128rfa1>
    2c16:	10 0f       	add	r17, r16
    2c18:	d1 0f       	add	r29, r17
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
    2c1a:	cd 0f       	add	r28, r29
if(checksum==ct) return NRK_OK;
    2c1c:	8c 17       	cp	r24, r28
    2c1e:	11 f0       	breq	.+4      	; 0x2c24 <read_eeprom_mac_address+0x5c>

return NRK_ERROR;
    2c20:	8f ef       	ldi	r24, 0xFF	; 255
    2c22:	01 c0       	rjmp	.+2      	; 0x2c26 <read_eeprom_mac_address+0x5e>
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
ct=buf[0];
ct+=buf[1];
ct+=buf[2];
ct+=buf[3];
if(checksum==ct) return NRK_OK;
    2c24:	81 e0       	ldi	r24, 0x01	; 1

return NRK_ERROR;
}
    2c26:	df 91       	pop	r29
    2c28:	cf 91       	pop	r28
    2c2a:	1f 91       	pop	r17
    2c2c:	0f 91       	pop	r16
    2c2e:	ff 90       	pop	r15
    2c30:	ef 90       	pop	r14
    2c32:	08 95       	ret

00002c34 <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    2c3a:	85 e0       	ldi	r24, 0x05	; 5
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	0e 94 13 32 	call	0x6426	; 0x6426 <__eerd_byte_m128rfa1>
    2c42:	88 83       	st	Y, r24
return NRK_OK;
}
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	df 91       	pop	r29
    2c48:	cf 91       	pop	r28
    2c4a:	08 95       	ret

00002c4c <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	60 81       	ld	r22, Z
    2c50:	86 e0       	ldi	r24, 0x06	; 6
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	0e 94 1b 32 	call	0x6436	; 0x6436 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	08 95       	ret

00002c5c <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    2c5c:	cf 93       	push	r28
    2c5e:	df 93       	push	r29
    2c60:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    2c62:	86 e0       	ldi	r24, 0x06	; 6
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	0e 94 13 32 	call	0x6426	; 0x6426 <__eerd_byte_m128rfa1>
    2c6a:	88 83       	st	Y, r24
  return NRK_OK;
}
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	df 91       	pop	r29
    2c70:	cf 91       	pop	r28
    2c72:	08 95       	ret

00002c74 <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    2c74:	0f 93       	push	r16
    2c76:	1f 93       	push	r17
    2c78:	cf 93       	push	r28
    2c7a:	df 93       	push	r29
    2c7c:	8c 01       	movw	r16, r24
    2c7e:	c0 e0       	ldi	r28, 0x00	; 0
    2c80:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    2c82:	ce 01       	movw	r24, r28
    2c84:	08 96       	adiw	r24, 0x08	; 8
    2c86:	0e 94 13 32 	call	0x6426	; 0x6426 <__eerd_byte_m128rfa1>
    2c8a:	f8 01       	movw	r30, r16
    2c8c:	81 93       	st	Z+, r24
    2c8e:	8f 01       	movw	r16, r30
    2c90:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2c92:	c0 31       	cpi	r28, 0x10	; 16
    2c94:	d1 05       	cpc	r29, r1
    2c96:	a9 f7       	brne	.-22     	; 0x2c82 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	1f 91       	pop	r17
    2ca0:	0f 91       	pop	r16
    2ca2:	08 95       	ret

00002ca4 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    2ca4:	0f 93       	push	r16
    2ca6:	1f 93       	push	r17
    2ca8:	cf 93       	push	r28
    2caa:	df 93       	push	r29
    2cac:	8c 01       	movw	r16, r24
    2cae:	c0 e0       	ldi	r28, 0x00	; 0
    2cb0:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    2cb2:	f8 01       	movw	r30, r16
    2cb4:	61 91       	ld	r22, Z+
    2cb6:	8f 01       	movw	r16, r30
    2cb8:	ce 01       	movw	r24, r28
    2cba:	08 96       	adiw	r24, 0x08	; 8
    2cbc:	0e 94 1b 32 	call	0x6436	; 0x6436 <__eewr_byte_m128rfa1>
    2cc0:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2cc2:	c0 31       	cpi	r28, 0x10	; 16
    2cc4:	d1 05       	cpc	r29, r1
    2cc6:	a9 f7       	brne	.-22     	; 0x2cb2 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	08 95       	ret

00002cd4 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    2cd4:	cf 93       	push	r28
    2cd6:	df 93       	push	r29
    2cd8:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    2cda:	87 e0       	ldi	r24, 0x07	; 7
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	0e 94 13 32 	call	0x6426	; 0x6426 <__eerd_byte_m128rfa1>
    2ce2:	88 83       	st	Y, r24
  return NRK_OK;
}
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	df 91       	pop	r29
    2ce8:	cf 91       	pop	r28
    2cea:	08 95       	ret

00002cec <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    2cec:	fc 01       	movw	r30, r24
    2cee:	60 81       	ld	r22, Z
    2cf0:	87 e0       	ldi	r24, 0x07	; 7
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	0e 94 1b 32 	call	0x6436	; 0x6436 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	08 95       	ret

00002cfc <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    2cfc:	f8 94       	cli
    2cfe:	08 95       	ret

00002d00 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    2d00:	78 94       	sei
    2d02:	08 95       	ret

00002d04 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    2d04:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <nrk_int_disable>
while(1);
    2d08:	ff cf       	rjmp	.-2      	; 0x2d08 <nrk_halt+0x4>

00002d0a <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    2d0a:	cf 93       	push	r28
    2d0c:	df 93       	push	r29
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
    2d12:	a3 97       	sbiw	r28, 0x23	; 35
    2d14:	0f b6       	in	r0, 0x3f	; 63
    2d16:	f8 94       	cli
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	0f be       	out	0x3f, r0	; 63
    2d1c:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    2d1e:	0e 94 b2 1a 	call	0x3564	; 0x3564 <nrk_signal_create>
    2d22:	80 93 33 07 	sts	0x0733, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    2d26:	8f 3f       	cpi	r24, 0xFF	; 255
    2d28:	21 f4       	brne	.+8      	; 0x2d32 <nrk_init+0x28>
    2d2a:	60 e0       	ldi	r22, 0x00	; 0
    2d2c:	8e e0       	ldi	r24, 0x0E	; 14
    2d2e:	0e 94 ca 18 	call	0x3194	; 0x3194 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    2d32:	0e 94 4a 2a 	call	0x5494	; 0x5494 <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    2d36:	80 ff       	sbrs	r24, 0
    2d38:	04 c0       	rjmp	.+8      	; 0x2d42 <nrk_init+0x38>
    2d3a:	60 e0       	ldi	r22, 0x00	; 0
    2d3c:	86 e0       	ldi	r24, 0x06	; 6
    2d3e:	0e 94 ca 18 	call	0x3194	; 0x3194 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    2d42:	10 92 36 07 	sts	0x0736, r1
    nrk_cur_task_TCB = NULL;
    2d46:	10 92 44 07 	sts	0x0744, r1
    2d4a:	10 92 43 07 	sts	0x0743, r1
    
    nrk_high_ready_TCB = NULL;
    2d4e:	10 92 35 07 	sts	0x0735, r1
    2d52:	10 92 34 07 	sts	0x0734, r1
    nrk_high_ready_prio = 0; 
    2d56:	10 92 45 07 	sts	0x0745, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    2d5a:	10 92 42 07 	sts	0x0742, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    2d5e:	8f ef       	ldi	r24, 0xFF	; 255
    2d60:	80 93 2c 07 	sts	0x072C, r24
    nrk_sem_list[i].value=-1;
    2d64:	80 93 2e 07 	sts	0x072E, r24
    nrk_sem_list[i].resource_ceiling=-1;
    2d68:	80 93 2d 07 	sts	0x072D, r24

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    2d6c:	80 93 2f 07 	sts	0x072F, r24
    nrk_sem_list[i].value=-1;
    2d70:	80 93 31 07 	sts	0x0731, r24
    nrk_sem_list[i].resource_ceiling=-1;
    2d74:	80 93 30 07 	sts	0x0730, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2d78:	93 e6       	ldi	r25, 0x63	; 99
    2d7a:	90 93 de 06 	sts	0x06DE, r25
        nrk_task_TCB[i].task_ID = -1; 
    2d7e:	80 93 dc 06 	sts	0x06DC, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2d82:	90 93 09 07 	sts	0x0709, r25
        nrk_task_TCB[i].task_ID = -1; 
    2d86:	80 93 07 07 	sts	0x0707, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2d8a:	86 e4       	ldi	r24, 0x46	; 70
    2d8c:	97 e0       	ldi	r25, 0x07	; 7
    2d8e:	2b e4       	ldi	r18, 0x4B	; 75
    2d90:	37 e0       	ldi	r19, 0x07	; 7
    2d92:	30 93 4a 07 	sts	0x074A, r19
    2d96:	20 93 49 07 	sts	0x0749, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2d9a:	90 93 4d 07 	sts	0x074D, r25
    2d9e:	80 93 4c 07 	sts	0x074C, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2da2:	40 e5       	ldi	r20, 0x50	; 80
    2da4:	57 e0       	ldi	r21, 0x07	; 7
    2da6:	50 93 4f 07 	sts	0x074F, r21
    2daa:	40 93 4e 07 	sts	0x074E, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2dae:	30 93 52 07 	sts	0x0752, r19
    2db2:	20 93 51 07 	sts	0x0751, r18
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    2db6:	10 92 48 07 	sts	0x0748, r1
    2dba:	10 92 47 07 	sts	0x0747, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    2dbe:	10 92 54 07 	sts	0x0754, r1
    2dc2:	10 92 53 07 	sts	0x0753, r1
	_head_node = NULL;
    2dc6:	10 92 39 07 	sts	0x0739, r1
    2dca:	10 92 38 07 	sts	0x0738, r1
	_free_node = &_nrk_readyQ[0];
    2dce:	90 93 d3 06 	sts	0x06D3, r25
    2dd2:	80 93 d2 06 	sts	0x06D2, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    2dd6:	69 eb       	ldi	r22, 0xB9	; 185
    2dd8:	74 e2       	ldi	r23, 0x24	; 36
    2dda:	ce 01       	movw	r24, r28
    2ddc:	01 96       	adiw	r24, 0x01	; 1
    2dde:	0e 94 82 2c 	call	0x5904	; 0x5904 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    2de2:	40 e8       	ldi	r20, 0x80	; 128
    2de4:	50 e0       	ldi	r21, 0x00	; 0
    2de6:	6b e9       	ldi	r22, 0x9B	; 155
    2de8:	75 e0       	ldi	r23, 0x05	; 5
    2dea:	ce 01       	movw	r24, r28
    2dec:	01 96       	adiw	r24, 0x01	; 1
    2dee:	0e 94 86 2c 	call	0x590c	; 0x590c <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    2df2:	85 e5       	ldi	r24, 0x55	; 85
    2df4:	80 93 9b 05 	sts	0x059B, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    2df8:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    2dfa:	1c 86       	std	Y+12, r1	; 0x0c
    2dfc:	1d 86       	std	Y+13, r1	; 0x0d
    2dfe:	1e 86       	std	Y+14, r1	; 0x0e
    2e00:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    2e02:	18 8a       	std	Y+16, r1	; 0x10
    2e04:	19 8a       	std	Y+17, r1	; 0x11
    2e06:	1a 8a       	std	Y+18, r1	; 0x12
    2e08:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    2e0a:	1c 8a       	std	Y+20, r1	; 0x14
    2e0c:	1d 8a       	std	Y+21, r1	; 0x15
    2e0e:	1e 8a       	std	Y+22, r1	; 0x16
    2e10:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    2e12:	18 8e       	std	Y+24, r1	; 0x18
    2e14:	19 8e       	std	Y+25, r1	; 0x19
    2e16:	1a 8e       	std	Y+26, r1	; 0x1a
    2e18:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    2e1a:	1c 8e       	std	Y+28, r1	; 0x1c
    2e1c:	1d 8e       	std	Y+29, r1	; 0x1d
    2e1e:	1e 8e       	std	Y+30, r1	; 0x1e
    2e20:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    2e22:	18 a2       	std	Y+32, r1	; 0x20
    2e24:	19 a2       	std	Y+33, r1	; 0x21
    2e26:	1a a2       	std	Y+34, r1	; 0x22
    2e28:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    2e2e:	92 e0       	ldi	r25, 0x02	; 2
    2e30:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    2e32:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    2e34:	ce 01       	movw	r24, r28
    2e36:	01 96       	adiw	r24, 0x01	; 1
    2e38:	0e 94 08 1f 	call	0x3e10	; 0x3e10 <nrk_activate_task>
	
}
    2e3c:	a3 96       	adiw	r28, 0x23	; 35
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	f8 94       	cli
    2e42:	de bf       	out	0x3e, r29	; 62
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	cd bf       	out	0x3d, r28	; 61
    2e48:	df 91       	pop	r29
    2e4a:	cf 91       	pop	r28
    2e4c:	08 95       	ret

00002e4e <nrk_start>:
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    2e4e:	60 91 dc 06 	lds	r22, 0x06DC
	// only check activated tasks
	if(task_ID!=-1)
    2e52:	6f 3f       	cpi	r22, 0xFF	; 255
    2e54:	39 f0       	breq	.+14     	; 0x2e64 <nrk_start+0x16>
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    2e56:	80 91 07 07 	lds	r24, 0x0707
    2e5a:	68 13       	cpse	r22, r24
    2e5c:	03 c0       	rjmp	.+6      	; 0x2e64 <nrk_start+0x16>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    2e5e:	85 e0       	ldi	r24, 0x05	; 5
    2e60:	0e 94 ca 18 	call	0x3194	; 0x3194 <nrk_kernel_error_add>
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    2e64:	60 91 07 07 	lds	r22, 0x0707
	// only check activated tasks
	if(task_ID!=-1)
    2e68:	6f 3f       	cpi	r22, 0xFF	; 255
    2e6a:	e9 f4       	brne	.+58     	; 0x2ea6 <nrk_start+0x58>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    2e6c:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    2e70:	2b e2       	ldi	r18, 0x2B	; 43
    2e72:	82 02       	muls	r24, r18
    2e74:	c0 01       	movw	r24, r0
    2e76:	11 24       	eor	r1, r1
    2e78:	fc 01       	movw	r30, r24
    2e7a:	ec 52       	subi	r30, 0x2C	; 44
    2e7c:	f9 4f       	sbci	r31, 0xF9	; 249
    2e7e:	82 85       	ldd	r24, Z+10	; 0x0a
    2e80:	80 93 45 07 	sts	0x0745, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    2e84:	f0 93 44 07 	sts	0x0744, r31
    2e88:	e0 93 43 07 	sts	0x0743, r30
    2e8c:	f0 93 35 07 	sts	0x0735, r31
    2e90:	e0 93 34 07 	sts	0x0734, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    2e94:	80 93 36 07 	sts	0x0736, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    2e98:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <nrk_target_start>
    nrk_stack_pointer_init(); 
    2e9c:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    2ea0:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <nrk_start_high_ready_task>
    2ea4:	08 c0       	rjmp	.+16     	; 0x2eb6 <nrk_start+0x68>
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    2ea6:	80 91 dc 06 	lds	r24, 0x06DC
    2eaa:	68 13       	cpse	r22, r24
    2eac:	df cf       	rjmp	.-66     	; 0x2e6c <nrk_start+0x1e>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    2eae:	85 e0       	ldi	r24, 0x05	; 5
    2eb0:	0e 94 ca 18 	call	0x3194	; 0x3194 <nrk_kernel_error_add>
    2eb4:	db cf       	rjmp	.-74     	; 0x2e6c <nrk_start+0x1e>
    nrk_target_start();
    nrk_stack_pointer_init(); 
    nrk_start_high_ready_task();	

    // you should never get here    
    while(1);
    2eb6:	ff cf       	rjmp	.-2      	; 0x2eb6 <nrk_start+0x68>

00002eb8 <nrk_TCB_init>:
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    2eb8:	cf 92       	push	r12
    2eba:	df 92       	push	r13
    2ebc:	ef 92       	push	r14
    2ebe:	ff 92       	push	r15
    2ec0:	0f 93       	push	r16
    2ec2:	1f 93       	push	r17
    2ec4:	cf 93       	push	r28
    2ec6:	df 93       	push	r29
    2ec8:	ec 01       	movw	r28, r24
    2eca:	8b 01       	movw	r16, r22
    2ecc:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    2ece:	89 85       	ldd	r24, Y+9	; 0x09
    2ed0:	82 30       	cpi	r24, 0x02	; 2
    2ed2:	21 f0       	breq	.+8      	; 0x2edc <nrk_TCB_init+0x24>
    	Task->task_ID=nrk_task_init_cnt;
    2ed4:	80 91 32 07 	lds	r24, 0x0732
    2ed8:	88 83       	st	Y, r24
    2eda:	01 c0       	rjmp	.+2      	; 0x2ede <nrk_TCB_init+0x26>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    2edc:	18 82       	st	Y, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    2ede:	80 91 32 07 	lds	r24, 0x0732
    2ee2:	82 30       	cpi	r24, 0x02	; 2
    2ee4:	20 f0       	brcs	.+8      	; 0x2eee <nrk_TCB_init+0x36>
    2ee6:	60 e0       	ldi	r22, 0x00	; 0
    2ee8:	87 e0       	ldi	r24, 0x07	; 7
    2eea:	0e 94 ca 18 	call	0x3194	; 0x3194 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    2eee:	89 85       	ldd	r24, Y+9	; 0x09
    2ef0:	82 30       	cpi	r24, 0x02	; 2
    2ef2:	29 f0       	breq	.+10     	; 0x2efe <nrk_TCB_init+0x46>
    2ef4:	80 91 32 07 	lds	r24, 0x0732
    2ef8:	8f 5f       	subi	r24, 0xFF	; 255
    2efa:	80 93 32 07 	sts	0x0732, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    2efe:	80 91 32 07 	lds	r24, 0x0732
    2f02:	81 11       	cpse	r24, r1
    2f04:	03 c0       	rjmp	.+6      	; 0x2f0c <nrk_TCB_init+0x54>
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	80 93 32 07 	sts	0x0732, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    2f0c:	38 81       	ld	r19, Y
    2f0e:	2b e2       	ldi	r18, 0x2B	; 43
    2f10:	32 03       	mulsu	r19, r18
    2f12:	f0 01       	movw	r30, r0
    2f14:	11 24       	eor	r1, r1
    2f16:	ec 52       	subi	r30, 0x2C	; 44
    2f18:	f9 4f       	sbci	r31, 0xF9	; 249
    2f1a:	11 83       	std	Z+1, r17	; 0x01
    2f1c:	00 83       	st	Z, r16
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    2f1e:	88 85       	ldd	r24, Y+8	; 0x08
    2f20:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    2f22:	38 81       	ld	r19, Y
    2f24:	32 03       	mulsu	r19, r18
    2f26:	f0 01       	movw	r30, r0
    2f28:	11 24       	eor	r1, r1
    2f2a:	ec 52       	subi	r30, 0x2C	; 44
    2f2c:	f9 4f       	sbci	r31, 0xF9	; 249
    2f2e:	83 e0       	ldi	r24, 0x03	; 3
    2f30:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    2f32:	38 81       	ld	r19, Y
    2f34:	32 03       	mulsu	r19, r18
    2f36:	f0 01       	movw	r30, r0
    2f38:	11 24       	eor	r1, r1
    2f3a:	ec 52       	subi	r30, 0x2C	; 44
    2f3c:	f9 4f       	sbci	r31, 0xF9	; 249
    2f3e:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    2f40:	08 81       	ld	r16, Y
    2f42:	02 03       	mulsu	r16, r18
    2f44:	80 01       	movw	r16, r0
    2f46:	11 24       	eor	r1, r1
    2f48:	0c 52       	subi	r16, 0x2C	; 44
    2f4a:	19 4f       	sbci	r17, 0xF9	; 249
    2f4c:	f8 01       	movw	r30, r16
    2f4e:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    2f50:	ce 01       	movw	r24, r28
    2f52:	0b 96       	adiw	r24, 0x0b	; 11
    2f54:	0e 94 4f 24 	call	0x489e	; 0x489e <_nrk_time_to_ticks_long>
    2f58:	f8 01       	movw	r30, r16
    2f5a:	61 a3       	std	Z+33, r22	; 0x21
    2f5c:	72 a3       	std	Z+34, r23	; 0x22
    2f5e:	83 a3       	std	Z+35, r24	; 0x23
    2f60:	94 a3       	std	Z+36, r25	; 0x24
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    2f62:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f64:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f66:	ad 85       	ldd	r26, Y+13	; 0x0d
    2f68:	be 85       	ldd	r27, Y+14	; 0x0e
    2f6a:	88 33       	cpi	r24, 0x38	; 56
    2f6c:	99 48       	sbci	r25, 0x89	; 137
    2f6e:	a1 44       	sbci	r26, 0x41	; 65
    2f70:	b1 05       	cpc	r27, r1
    2f72:	20 f0       	brcs	.+8      	; 0x2f7c <nrk_TCB_init+0xc4>
    2f74:	68 81       	ld	r22, Y
    2f76:	86 e1       	ldi	r24, 0x16	; 22
    2f78:	0e 94 ca 18 	call	0x3194	; 0x3194 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    2f7c:	c8 80       	ld	r12, Y
    2f7e:	dd 24       	eor	r13, r13
    2f80:	c7 fc       	sbrc	r12, 7
    2f82:	d0 94       	com	r13
    2f84:	ce 01       	movw	r24, r28
    2f86:	4b 96       	adiw	r24, 0x1b	; 27
    2f88:	0e 94 4f 24 	call	0x489e	; 0x489e <_nrk_time_to_ticks_long>
    2f8c:	1b e2       	ldi	r17, 0x2B	; 43
    2f8e:	1c 9d       	mul	r17, r12
    2f90:	f0 01       	movw	r30, r0
    2f92:	1d 9d       	mul	r17, r13
    2f94:	f0 0d       	add	r31, r0
    2f96:	11 24       	eor	r1, r1
    2f98:	ec 52       	subi	r30, 0x2C	; 44
    2f9a:	f9 4f       	sbci	r31, 0xF9	; 249
    2f9c:	65 8b       	std	Z+21, r22	; 0x15
    2f9e:	76 8b       	std	Z+22, r23	; 0x16
    2fa0:	87 8b       	std	Z+23, r24	; 0x17
    2fa2:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    2fa4:	28 81       	ld	r18, Y
    2fa6:	21 03       	mulsu	r18, r17
    2fa8:	c0 01       	movw	r24, r0
    2faa:	11 24       	eor	r1, r1
    2fac:	9c 01       	movw	r18, r24
    2fae:	2c 52       	subi	r18, 0x2C	; 44
    2fb0:	39 4f       	sbci	r19, 0xF9	; 249
    2fb2:	69 01       	movw	r12, r18
    2fb4:	f9 01       	movw	r30, r18
    2fb6:	45 89       	ldd	r20, Z+21	; 0x15
    2fb8:	56 89       	ldd	r21, Z+22	; 0x16
    2fba:	67 89       	ldd	r22, Z+23	; 0x17
    2fbc:	70 8d       	ldd	r23, Z+24	; 0x18
    2fbe:	81 a1       	ldd	r24, Z+33	; 0x21
    2fc0:	92 a1       	ldd	r25, Z+34	; 0x22
    2fc2:	a3 a1       	ldd	r26, Z+35	; 0x23
    2fc4:	b4 a1       	ldd	r27, Z+36	; 0x24
    2fc6:	84 0f       	add	r24, r20
    2fc8:	95 1f       	adc	r25, r21
    2fca:	a6 1f       	adc	r26, r22
    2fcc:	b7 1f       	adc	r27, r23
    2fce:	81 8f       	std	Z+25, r24	; 0x19
    2fd0:	92 8f       	std	Z+26, r25	; 0x1a
    2fd2:	a3 8f       	std	Z+27, r26	; 0x1b
    2fd4:	b4 8f       	std	Z+28, r27	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    2fd6:	ce 01       	movw	r24, r28
    2fd8:	43 96       	adiw	r24, 0x13	; 19
    2fda:	0e 94 4f 24 	call	0x489e	; 0x489e <_nrk_time_to_ticks_long>
    2fde:	f6 01       	movw	r30, r12
    2fe0:	65 a3       	std	Z+37, r22	; 0x25
    2fe2:	76 a3       	std	Z+38, r23	; 0x26
    2fe4:	87 a3       	std	Z+39, r24	; 0x27
    2fe6:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    2fe8:	28 81       	ld	r18, Y
    2fea:	21 03       	mulsu	r18, r17
    2fec:	f0 01       	movw	r30, r0
    2fee:	11 24       	eor	r1, r1
    2ff0:	ec 52       	subi	r30, 0x2C	; 44
    2ff2:	f9 4f       	sbci	r31, 0xF9	; 249
    2ff4:	85 a1       	ldd	r24, Z+37	; 0x25
    2ff6:	96 a1       	ldd	r25, Z+38	; 0x26
    2ff8:	a7 a1       	ldd	r26, Z+39	; 0x27
    2ffa:	b0 a5       	ldd	r27, Z+40	; 0x28
    2ffc:	85 8f       	std	Z+29, r24	; 0x1d
    2ffe:	96 8f       	std	Z+30, r25	; 0x1e
    3000:	a7 8f       	std	Z+31, r26	; 0x1f
    3002:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	92 a7       	std	Z+42, r25	; 0x2a
    300a:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    300c:	f3 82       	std	Z+3, r15	; 0x03
    300e:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    3010:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    3012:	df 91       	pop	r29
    3014:	cf 91       	pop	r28
    3016:	1f 91       	pop	r17
    3018:	0f 91       	pop	r16
    301a:	ff 90       	pop	r15
    301c:	ef 90       	pop	r14
    301e:	df 90       	pop	r13
    3020:	cf 90       	pop	r12
    3022:	08 95       	ret

00003024 <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    3024:	0c 94 dd 24 	jmp	0x49ba	; 0x49ba <_nrk_scheduler>

00003028 <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    3028:	85 e6       	ldi	r24, 0x65	; 101
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	08 95       	ret

0000302e <_nrk_errno_set>:
    302e:	e0 91 43 07 	lds	r30, 0x0743
    3032:	f0 91 44 07 	lds	r31, 0x0744
    3036:	84 87       	std	Z+12, r24	; 0x0c
    3038:	08 95       	ret

0000303a <nrk_errno_get>:
    nrk_cur_task_TCB->errno = error_code;
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    303a:	e0 91 43 07 	lds	r30, 0x0743
    303e:	f0 91 44 07 	lds	r31, 0x0744
}
    3042:	84 85       	ldd	r24, Z+12	; 0x0c
    3044:	08 95       	ret

00003046 <nrk_error_get>:

}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    3046:	fc 01       	movw	r30, r24
    if (error_num == 0)
    3048:	80 91 9a 05 	lds	r24, 0x059A
    304c:	88 23       	and	r24, r24
    304e:	31 f0       	breq	.+12     	; 0x305c <nrk_error_get+0x16>
        return 0;
    *code = error_num;
    3050:	db 01       	movw	r26, r22
    3052:	8c 93       	st	X, r24
    *task_id = error_task;
    3054:	80 91 5d 04 	lds	r24, 0x045D
    3058:	80 83       	st	Z, r24
    return 1;
    305a:	81 e0       	ldi	r24, 0x01	; 1
}
    305c:	08 95       	ret

0000305e <nrk_error_handle>:
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    305e:	10 92 9a 05 	sts	0x059A, r1
    3062:	08 95       	ret

00003064 <nrk_error_print>:
uint8_t i,t;




    if (error_num == 0)
    3064:	80 91 9a 05 	lds	r24, 0x059A
    3068:	88 23       	and	r24, r24
    306a:	09 f4       	brne	.+2      	; 0x306e <nrk_error_print+0xa>
    306c:	83 c0       	rjmp	.+262    	; 0x3174 <nrk_error_print+0x110>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    306e:	88 e0       	ldi	r24, 0x08	; 8
    3070:	94 e0       	ldi	r25, 0x04	; 4
    3072:	0e 94 10 12 	call	0x2420	; 0x2420 <nrk_kprintf>
        printf ("%d", error_task);
    3076:	80 91 5d 04 	lds	r24, 0x045D
    307a:	1f 92       	push	r1
    307c:	8f 93       	push	r24
    307e:	85 e8       	ldi	r24, 0x85	; 133
    3080:	93 e0       	ldi	r25, 0x03	; 3
    3082:	9f 93       	push	r25
    3084:	8f 93       	push	r24
    3086:	0e 94 3b 31 	call	0x6276	; 0x6276 <printf>
        nrk_kprintf (PSTR ("): "));
    308a:	84 e0       	ldi	r24, 0x04	; 4
    308c:	94 e0       	ldi	r25, 0x04	; 4
    308e:	0e 94 10 12 	call	0x2420	; 0x2420 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    3092:	0f 90       	pop	r0
    3094:	0f 90       	pop	r0
    3096:	0f 90       	pop	r0
    3098:	0f 90       	pop	r0
    309a:	80 91 9a 05 	lds	r24, 0x059A
    309e:	88 31       	cpi	r24, 0x18	; 24
    30a0:	10 f0       	brcs	.+4      	; 0x30a6 <nrk_error_print+0x42>
            error_num = NRK_UNKOWN;
    30a2:	10 92 9a 05 	sts	0x059A, r1
        switch (error_num)
    30a6:	e0 91 9a 05 	lds	r30, 0x059A
    30aa:	8e 2f       	mov	r24, r30
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	fc 01       	movw	r30, r24
    30b0:	31 97       	sbiw	r30, 0x01	; 1
    30b2:	e6 31       	cpi	r30, 0x16	; 22
    30b4:	f1 05       	cpc	r31, r1
    30b6:	08 f0       	brcs	.+2      	; 0x30ba <nrk_error_print+0x56>
    30b8:	46 c0       	rjmp	.+140    	; 0x3146 <nrk_error_print+0xe2>
    30ba:	e6 54       	subi	r30, 0x46	; 70
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	0c 94 20 30 	jmp	0x6040	; 0x6040 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    30c2:	88 ec       	ldi	r24, 0xC8	; 200
    30c4:	93 e0       	ldi	r25, 0x03	; 3
    30c6:	41 c0       	rjmp	.+130    	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    30c8:	81 ea       	ldi	r24, 0xA1	; 161
    30ca:	93 e0       	ldi	r25, 0x03	; 3
    30cc:	3e c0       	rjmp	.+124    	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    30ce:	8d e8       	ldi	r24, 0x8D	; 141
    30d0:	93 e0       	ldi	r25, 0x03	; 3
    30d2:	3b c0       	rjmp	.+118    	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    30d4:	87 e7       	ldi	r24, 0x77	; 119
    30d6:	93 e0       	ldi	r25, 0x03	; 3
    30d8:	38 c0       	rjmp	.+112    	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    30da:	8c e5       	ldi	r24, 0x5C	; 92
    30dc:	93 e0       	ldi	r25, 0x03	; 3
    30de:	35 c0       	rjmp	.+106    	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    30e0:	86 e4       	ldi	r24, 0x46	; 70
    30e2:	93 e0       	ldi	r25, 0x03	; 3
    30e4:	32 c0       	rjmp	.+100    	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    30e6:	8e e2       	ldi	r24, 0x2E	; 46
    30e8:	93 e0       	ldi	r25, 0x03	; 3
    30ea:	2f c0       	rjmp	.+94     	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    30ec:	8b e1       	ldi	r24, 0x1B	; 27
    30ee:	93 e0       	ldi	r25, 0x03	; 3
    30f0:	2c c0       	rjmp	.+88     	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    30f2:	88 e0       	ldi	r24, 0x08	; 8
    30f4:	93 e0       	ldi	r25, 0x03	; 3
    30f6:	29 c0       	rjmp	.+82     	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    30f8:	8a ee       	ldi	r24, 0xEA	; 234
    30fa:	92 e0       	ldi	r25, 0x02	; 2
    30fc:	26 c0       	rjmp	.+76     	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    30fe:	85 ec       	ldi	r24, 0xC5	; 197
    3100:	92 e0       	ldi	r25, 0x02	; 2
    3102:	23 c0       	rjmp	.+70     	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    3104:	89 eb       	ldi	r24, 0xB9	; 185
    3106:	92 e0       	ldi	r25, 0x02	; 2
    3108:	20 c0       	rjmp	.+64     	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    310a:	8e e9       	ldi	r24, 0x9E	; 158
    310c:	92 e0       	ldi	r25, 0x02	; 2
    310e:	1d c0       	rjmp	.+58     	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    3110:	8f e8       	ldi	r24, 0x8F	; 143
    3112:	92 e0       	ldi	r25, 0x02	; 2
    3114:	1a c0       	rjmp	.+52     	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    3116:	8b e7       	ldi	r24, 0x7B	; 123
    3118:	92 e0       	ldi	r25, 0x02	; 2
    311a:	17 c0       	rjmp	.+46     	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    311c:	8a e6       	ldi	r24, 0x6A	; 106
    311e:	92 e0       	ldi	r25, 0x02	; 2
    3120:	14 c0       	rjmp	.+40     	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    3122:	86 e5       	ldi	r24, 0x56	; 86
    3124:	92 e0       	ldi	r25, 0x02	; 2
    3126:	11 c0       	rjmp	.+34     	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    3128:	86 e3       	ldi	r24, 0x36	; 54
    312a:	92 e0       	ldi	r25, 0x02	; 2
    312c:	0e c0       	rjmp	.+28     	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    312e:	8e e1       	ldi	r24, 0x1E	; 30
    3130:	92 e0       	ldi	r25, 0x02	; 2
    3132:	0b c0       	rjmp	.+22     	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    3134:	83 e0       	ldi	r24, 0x03	; 3
    3136:	92 e0       	ldi	r25, 0x02	; 2
    3138:	08 c0       	rjmp	.+16     	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    313a:	82 ef       	ldi	r24, 0xF2	; 242
    313c:	91 e0       	ldi	r25, 0x01	; 1
    313e:	05 c0       	rjmp	.+10     	; 0x314a <nrk_error_print+0xe6>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    3140:	83 ee       	ldi	r24, 0xE3	; 227
    3142:	91 e0       	ldi	r25, 0x01	; 1
    3144:	02 c0       	rjmp	.+4      	; 0x314a <nrk_error_print+0xe6>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    3146:	8c ed       	ldi	r24, 0xDC	; 220
    3148:	91 e0       	ldi	r25, 0x01	; 1
    314a:	0e 94 10 12 	call	0x2420	; 0x2420 <nrk_kprintf>
        }
        putchar ('\r');
    314e:	60 91 66 07 	lds	r22, 0x0766
    3152:	70 91 67 07 	lds	r23, 0x0767
    3156:	8d e0       	ldi	r24, 0x0D	; 13
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	0e 94 03 31 	call	0x6206	; 0x6206 <fputc>
        putchar ('\n');
    315e:	60 91 66 07 	lds	r22, 0x0766
    3162:	70 91 67 07 	lds	r23, 0x0767
    3166:	8a e0       	ldi	r24, 0x0A	; 10
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	0e 94 03 31 	call	0x6206	; 0x6206 <fputc>
}


#endif

    return error_num;
    316e:	80 91 9a 05 	lds	r24, 0x059A
    3172:	08 95       	ret




    if (error_num == 0)
        return 0;
    3174:	80 e0       	ldi	r24, 0x00	; 0


#endif

    return error_num;
}
    3176:	08 95       	ret

00003178 <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    3178:	80 93 9a 05 	sts	0x059A, r24
    error_task = nrk_cur_task_TCB->task_ID;
    317c:	e0 91 43 07 	lds	r30, 0x0743
    3180:	f0 91 44 07 	lds	r31, 0x0744
    3184:	80 85       	ldd	r24, Z+8	; 0x08
    3186:	80 93 5d 04 	sts	0x045D, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    318a:	0e 94 32 18 	call	0x3064	; 0x3064 <nrk_error_print>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    318e:	10 92 9a 05 	sts	0x059A, r1
    3192:	08 95       	ret

00003194 <nrk_kernel_error_add>:

}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    3194:	80 93 9a 05 	sts	0x059A, r24
    error_task = task;
    3198:	60 93 5d 04 	sts	0x045D, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    319c:	0e 94 32 18 	call	0x3064	; 0x3064 <nrk_error_print>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    31a0:	10 92 9a 05 	sts	0x059A, r1
    31a4:	08 95       	ret

000031a6 <clear_regs>:
}

inline void clear_regs()
{

        GTCCR=0;
    31a6:	13 bc       	out	0x23, r1	; 35
        ASSR=0;
    31a8:	10 92 b6 00 	sts	0x00B6, r1

        OCR0B=0;
    31ac:	18 bc       	out	0x28, r1	; 40
        OCR0A=0;
    31ae:	17 bc       	out	0x27, r1	; 39
        TCNT0=0;
    31b0:	16 bc       	out	0x26, r1	; 38
        TCCR0B=0;
    31b2:	15 bc       	out	0x25, r1	; 37
        TCCR0A=0;
    31b4:	14 bc       	out	0x24, r1	; 36

        EIMSK=0;
    31b6:	1d ba       	out	0x1d, r1	; 29
        EIFR=0;
    31b8:	1c ba       	out	0x1c, r1	; 28
        PCIFR=0;
    31ba:	1b ba       	out	0x1b, r1	; 27


        OCR3B =0;
    31bc:	10 92 9b 00 	sts	0x009B, r1
    31c0:	10 92 9a 00 	sts	0x009A, r1
        OCR3A =0;
    31c4:	10 92 99 00 	sts	0x0099, r1
    31c8:	10 92 98 00 	sts	0x0098, r1
        TCNT3 =0;
    31cc:	10 92 95 00 	sts	0x0095, r1
    31d0:	10 92 94 00 	sts	0x0094, r1
        TCCR3B=0;
    31d4:	10 92 91 00 	sts	0x0091, r1
        TCCR3A=0;
    31d8:	10 92 90 00 	sts	0x0090, r1
        TIFR3=0;
    31dc:	18 ba       	out	0x18, r1	; 24
        TIMSK3=0;
    31de:	10 92 71 00 	sts	0x0071, r1


        OCR2B =0;
    31e2:	10 92 b4 00 	sts	0x00B4, r1
        OCR2A =0;
    31e6:	10 92 b3 00 	sts	0x00B3, r1
        TCNT2 =0;
    31ea:	10 92 b2 00 	sts	0x00B2, r1
        TCCR2B=0;
    31ee:	10 92 b1 00 	sts	0x00B1, r1
        TCCR2A=0;
    31f2:	e0 eb       	ldi	r30, 0xB0	; 176
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	10 82       	st	Z, r1
        TCCR2A=0;
    31f8:	10 82       	st	Z, r1
        TIFR2=0;
    31fa:	17 ba       	out	0x17, r1	; 23
        TIMSK2=0;
    31fc:	10 92 70 00 	sts	0x0070, r1


	// set all bits to 1 in order to clear
	MCUSR=0xff;
    3200:	8f ef       	ldi	r24, 0xFF	; 255
    3202:	84 bf       	out	0x34, r24	; 52
    3204:	08 95       	ret

00003206 <pause>:
    }

}

void pause()
{
    3206:	cf 93       	push	r28
    3208:	df 93       	push	r29
    320a:	1f 92       	push	r1
    320c:	cd b7       	in	r28, 0x3d	; 61
    320e:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    3210:	19 82       	std	Y+1, r1	; 0x01
    3212:	89 81       	ldd	r24, Y+1	; 0x01
    3214:	84 36       	cpi	r24, 0x64	; 100
    3216:	40 f4       	brcc	.+16     	; 0x3228 <pause+0x22>
        nrk_spin_wait_us (2000);
    3218:	80 ed       	ldi	r24, 0xD0	; 208
    321a:	97 e0       	ldi	r25, 0x07	; 7
    321c:	0e 94 81 28 	call	0x5102	; 0x5102 <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	8f 5f       	subi	r24, 0xFF	; 255
    3224:	89 83       	std	Y+1, r24	; 0x01
    3226:	f5 cf       	rjmp	.-22     	; 0x3212 <pause+0xc>
        nrk_spin_wait_us (2000);
}
    3228:	0f 90       	pop	r0
    322a:	df 91       	pop	r29
    322c:	cf 91       	pop	r28
    322e:	08 95       	ret

00003230 <blink_dash>:

}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <nrk_led_set>
    pause();
    3238:	0e 94 03 19 	call	0x3206	; 0x3206 <pause>
    pause();
    323c:	0e 94 03 19 	call	0x3206	; 0x3206 <pause>
    pause();
    3240:	0e 94 03 19 	call	0x3206	; 0x3206 <pause>
    nrk_led_clr(GREEN_LED);
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <nrk_led_clr>
    pause();
    324c:	0c 94 03 19 	jmp	0x3206	; 0x3206 <pause>

00003250 <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <nrk_led_set>
    pause();
    3258:	0e 94 03 19 	call	0x3206	; 0x3206 <pause>
    nrk_led_clr(GREEN_LED);
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <nrk_led_clr>
    pause();
    3264:	0c 94 03 19 	jmp	0x3206	; 0x3206 <pause>

00003268 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    3268:	ff 92       	push	r15
    326a:	0f 93       	push	r16
    326c:	1f 93       	push	r17
    326e:	cf 93       	push	r28
    3270:	df 93       	push	r29
    3272:	00 d0       	rcall	.+0      	; 0x3274 <blink_morse_code_error+0xc>
    3274:	1f 92       	push	r1
    3276:	cd b7       	in	r28, 0x3d	; 61
    3278:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    327a:	1f 92       	push	r1
    327c:	8f 93       	push	r24
    327e:	85 e8       	ldi	r24, 0x85	; 133
    3280:	93 e0       	ldi	r25, 0x03	; 3
    3282:	9f 93       	push	r25
    3284:	8f 93       	push	r24
    3286:	8e 01       	movw	r16, r28
    3288:	0f 5f       	subi	r16, 0xFF	; 255
    328a:	1f 4f       	sbci	r17, 0xFF	; 255
    328c:	1f 93       	push	r17
    328e:	0f 93       	push	r16
    3290:	0e 94 85 31 	call	0x630a	; 0x630a <sprintf>

    for(i=0; i<strlen(str); i++ )
    3294:	0f 90       	pop	r0
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	0f 90       	pop	r0
    329c:	0f 90       	pop	r0
    329e:	0f 90       	pop	r0
    32a0:	f1 2c       	mov	r15, r1
    32a2:	f8 01       	movw	r30, r16
    32a4:	01 90       	ld	r0, Z+
    32a6:	00 20       	and	r0, r0
    32a8:	e9 f7       	brne	.-6      	; 0x32a4 <blink_morse_code_error+0x3c>
    32aa:	31 97       	sbiw	r30, 0x01	; 1
    32ac:	e0 1b       	sub	r30, r16
    32ae:	f1 0b       	sbc	r31, r17
    32b0:	8f 2d       	mov	r24, r15
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	8e 17       	cp	r24, r30
    32b6:	9f 07       	cpc	r25, r31
    32b8:	08 f0       	brcs	.+2      	; 0x32bc <blink_morse_code_error+0x54>
    32ba:	5d c0       	rjmp	.+186    	; 0x3376 <blink_morse_code_error+0x10e>
    {
        switch( str[i])
    32bc:	f8 01       	movw	r30, r16
    32be:	e8 0f       	add	r30, r24
    32c0:	f9 1f       	adc	r31, r25
    32c2:	e0 81       	ld	r30, Z
    32c4:	8e 2f       	mov	r24, r30
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	fc 01       	movw	r30, r24
    32ca:	f0 97       	sbiw	r30, 0x30	; 48
    32cc:	ea 30       	cpi	r30, 0x0A	; 10
    32ce:	f1 05       	cpc	r31, r1
    32d0:	08 f0       	brcs	.+2      	; 0x32d4 <blink_morse_code_error+0x6c>
    32d2:	49 c0       	rjmp	.+146    	; 0x3366 <blink_morse_code_error+0xfe>
    32d4:	e0 53       	subi	r30, 0x30	; 48
    32d6:	ff 4f       	sbci	r31, 0xFF	; 255
    32d8:	0c 94 20 30 	jmp	0x6040	; 0x6040 <__tablejump2__>
        {
        case '0':
            blink_dash();
    32dc:	0e 94 18 19 	call	0x3230	; 0x3230 <blink_dash>
    32e0:	02 c0       	rjmp	.+4      	; 0x32e6 <blink_morse_code_error+0x7e>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    32e2:	0e 94 28 19 	call	0x3250	; 0x3250 <blink_dot>
            blink_dash();
    32e6:	0e 94 18 19 	call	0x3230	; 0x3230 <blink_dash>
            blink_dash();
    32ea:	0e 94 18 19 	call	0x3230	; 0x3230 <blink_dash>
            blink_dash();
    32ee:	0e 94 18 19 	call	0x3230	; 0x3230 <blink_dash>
            blink_dash();
    32f2:	0e 94 18 19 	call	0x3230	; 0x3230 <blink_dash>
            break;
    32f6:	37 c0       	rjmp	.+110    	; 0x3366 <blink_morse_code_error+0xfe>
        case '2':
            blink_dot();
    32f8:	0e 94 28 19 	call	0x3250	; 0x3250 <blink_dot>
            blink_dot();
    32fc:	0e 94 28 19 	call	0x3250	; 0x3250 <blink_dot>
    3300:	f4 cf       	rjmp	.-24     	; 0x32ea <blink_morse_code_error+0x82>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    3302:	0e 94 28 19 	call	0x3250	; 0x3250 <blink_dot>
            blink_dot();
    3306:	0e 94 28 19 	call	0x3250	; 0x3250 <blink_dot>
            blink_dot();
    330a:	0e 94 28 19 	call	0x3250	; 0x3250 <blink_dot>
    330e:	ef cf       	rjmp	.-34     	; 0x32ee <blink_morse_code_error+0x86>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    3310:	0e 94 28 19 	call	0x3250	; 0x3250 <blink_dot>
            blink_dot();
    3314:	0e 94 28 19 	call	0x3250	; 0x3250 <blink_dot>
            blink_dot();
    3318:	0e 94 28 19 	call	0x3250	; 0x3250 <blink_dot>
            blink_dot();
    331c:	0e 94 28 19 	call	0x3250	; 0x3250 <blink_dot>
    3320:	e8 cf       	rjmp	.-48     	; 0x32f2 <blink_morse_code_error+0x8a>
            blink_dash();
            break;
        case '5':
            blink_dot();
    3322:	0e 94 28 19 	call	0x3250	; 0x3250 <blink_dot>
    3326:	02 c0       	rjmp	.+4      	; 0x332c <blink_morse_code_error+0xc4>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    3328:	0e 94 18 19 	call	0x3230	; 0x3230 <blink_dash>
            blink_dot();
    332c:	0e 94 28 19 	call	0x3250	; 0x3250 <blink_dot>
    3330:	04 c0       	rjmp	.+8      	; 0x333a <blink_morse_code_error+0xd2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    3332:	0e 94 18 19 	call	0x3230	; 0x3230 <blink_dash>
            blink_dash();
    3336:	0e 94 18 19 	call	0x3230	; 0x3230 <blink_dash>
            blink_dot();
    333a:	0e 94 28 19 	call	0x3250	; 0x3250 <blink_dot>
    333e:	06 c0       	rjmp	.+12     	; 0x334c <blink_morse_code_error+0xe4>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    3340:	0e 94 18 19 	call	0x3230	; 0x3230 <blink_dash>
            blink_dash();
    3344:	0e 94 18 19 	call	0x3230	; 0x3230 <blink_dash>
            blink_dash();
    3348:	0e 94 18 19 	call	0x3230	; 0x3230 <blink_dash>
            blink_dot();
    334c:	0e 94 28 19 	call	0x3250	; 0x3250 <blink_dot>
    3350:	08 c0       	rjmp	.+16     	; 0x3362 <blink_morse_code_error+0xfa>
            blink_dot();
            break;
        case '9':
            blink_dash();
    3352:	0e 94 18 19 	call	0x3230	; 0x3230 <blink_dash>
            blink_dash();
    3356:	0e 94 18 19 	call	0x3230	; 0x3230 <blink_dash>
            blink_dash();
    335a:	0e 94 18 19 	call	0x3230	; 0x3230 <blink_dash>
            blink_dash();
    335e:	0e 94 18 19 	call	0x3230	; 0x3230 <blink_dash>
            blink_dot();
    3362:	0e 94 28 19 	call	0x3250	; 0x3250 <blink_dot>
            break;
        }
        pause();
    3366:	0e 94 03 19 	call	0x3206	; 0x3206 <pause>
        pause();
    336a:	0e 94 03 19 	call	0x3206	; 0x3206 <pause>
        pause();
    336e:	0e 94 03 19 	call	0x3206	; 0x3206 <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    3372:	f3 94       	inc	r15
    3374:	96 cf       	rjmp	.-212    	; 0x32a2 <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
    337a:	0f 90       	pop	r0
    337c:	df 91       	pop	r29
    337e:	cf 91       	pop	r28
    3380:	1f 91       	pop	r17
    3382:	0f 91       	pop	r16
    3384:	ff 90       	pop	r15
    3386:	08 95       	ret

00003388 <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    3388:	6f 92       	push	r6
    338a:	7f 92       	push	r7
    338c:	8f 92       	push	r8
    338e:	9f 92       	push	r9
    3390:	af 92       	push	r10
    3392:	bf 92       	push	r11
    3394:	cf 92       	push	r12
    3396:	df 92       	push	r13
    3398:	ef 92       	push	r14
    339a:	ff 92       	push	r15
    339c:	0f 93       	push	r16
    339e:	1f 93       	push	r17
    33a0:	cf 93       	push	r28
    33a2:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    33a4:	84 e1       	ldi	r24, 0x14	; 20
    33a6:	94 e0       	ldi	r25, 0x04	; 4
    33a8:	0e 94 10 12 	call	0x2420	; 0x2420 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    33ac:	e0 91 43 07 	lds	r30, 0x0743
    33b0:	f0 91 44 07 	lds	r31, 0x0744
    33b4:	80 85       	ldd	r24, Z+8	; 0x08
    33b6:	28 2f       	mov	r18, r24
    33b8:	33 27       	eor	r19, r19
    33ba:	27 fd       	sbrc	r18, 7
    33bc:	30 95       	com	r19
    33be:	3f 93       	push	r19
    33c0:	8f 93       	push	r24
    33c2:	88 e8       	ldi	r24, 0x88	; 136
    33c4:	93 e0       	ldi	r25, 0x03	; 3
    33c6:	9f 93       	push	r25
    33c8:	8f 93       	push	r24
    33ca:	0e 94 3b 31 	call	0x6276	; 0x6276 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    33ce:	e0 91 43 07 	lds	r30, 0x0743
    33d2:	f0 91 44 07 	lds	r31, 0x0744
    33d6:	c2 81       	ldd	r28, Z+2	; 0x02
    33d8:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    33da:	df 93       	push	r29
    33dc:	cf 93       	push	r28
    33de:	8c eb       	ldi	r24, 0xBC	; 188
    33e0:	93 e0       	ldi	r25, 0x03	; 3
    33e2:	9f 93       	push	r25
    33e4:	8f 93       	push	r24
    33e6:	0e 94 3b 31 	call	0x6276	; 0x6276 <printf>
    printf( "canary = %x ",*stkc );
    33ea:	88 81       	ld	r24, Y
    33ec:	1f 92       	push	r1
    33ee:	8f 93       	push	r24
    33f0:	81 e9       	ldi	r24, 0x91	; 145
    33f2:	93 e0       	ldi	r25, 0x03	; 3
    33f4:	9f 93       	push	r25
    33f6:	8f 93       	push	r24
    33f8:	0e 94 3b 31 	call	0x6276	; 0x6276 <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    33fc:	e0 91 43 07 	lds	r30, 0x0743
    3400:	f0 91 44 07 	lds	r31, 0x0744
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    3404:	81 81       	ldd	r24, Z+1	; 0x01
    3406:	8f 93       	push	r24
    3408:	80 81       	ld	r24, Z
    340a:	8f 93       	push	r24
    340c:	8e e9       	ldi	r24, 0x9E	; 158
    340e:	93 e0       	ldi	r25, 0x03	; 3
    3410:	9f 93       	push	r25
    3412:	8f 93       	push	r24
    3414:	0e 94 3b 31 	call	0x6276	; 0x6276 <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    3418:	80 91 44 07 	lds	r24, 0x0744
    341c:	8f 93       	push	r24
    341e:	80 91 43 07 	lds	r24, 0x0743
    3422:	8f 93       	push	r24
    3424:	88 ea       	ldi	r24, 0xA8	; 168
    3426:	93 e0       	ldi	r25, 0x03	; 3
    3428:	9f 93       	push	r25
    342a:	8f 93       	push	r24
    342c:	0e 94 3b 31 	call	0x6276	; 0x6276 <printf>
    3430:	c4 ed       	ldi	r28, 0xD4	; 212
    3432:	d6 e0       	ldi	r29, 0x06	; 6
    3434:	ed b7       	in	r30, 0x3d	; 61
    3436:	fe b7       	in	r31, 0x3e	; 62
    3438:	74 96       	adiw	r30, 0x14	; 20
    343a:	0f b6       	in	r0, 0x3f	; 63
    343c:	f8 94       	cli
    343e:	fe bf       	out	0x3e, r31	; 62
    3440:	0f be       	out	0x3f, r0	; 63
    3442:	ed bf       	out	0x3d, r30	; 61
    3444:	00 e0       	ldi	r16, 0x00	; 0
    3446:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    3448:	88 eb       	ldi	r24, 0xB8	; 184
    344a:	68 2e       	mov	r6, r24
    344c:	83 e0       	ldi	r24, 0x03	; 3
    344e:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    3450:	91 e9       	ldi	r25, 0x91	; 145
    3452:	89 2e       	mov	r8, r25
    3454:	93 e0       	ldi	r25, 0x03	; 3
    3456:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    3458:	2e e9       	ldi	r18, 0x9E	; 158
    345a:	a2 2e       	mov	r10, r18
    345c:	23 e0       	ldi	r18, 0x03	; 3
    345e:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    3460:	38 ea       	ldi	r19, 0xA8	; 168
    3462:	c3 2e       	mov	r12, r19
    3464:	33 e0       	ldi	r19, 0x03	; 3
    3466:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    3468:	ea 80       	ldd	r14, Y+2	; 0x02
    346a:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    346c:	ff 92       	push	r15
    346e:	ef 92       	push	r14
    3470:	1f 93       	push	r17
    3472:	0f 93       	push	r16
    3474:	7f 92       	push	r7
    3476:	6f 92       	push	r6
    3478:	0e 94 3b 31 	call	0x6276	; 0x6276 <printf>
        printf( "canary = %x ",*stkc );
    347c:	f7 01       	movw	r30, r14
    347e:	80 81       	ld	r24, Z
    3480:	1f 92       	push	r1
    3482:	8f 93       	push	r24
    3484:	9f 92       	push	r9
    3486:	8f 92       	push	r8
    3488:	0e 94 3b 31 	call	0x6276	; 0x6276 <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    348c:	89 81       	ldd	r24, Y+1	; 0x01
    348e:	8f 93       	push	r24
    3490:	88 81       	ld	r24, Y
    3492:	8f 93       	push	r24
    3494:	bf 92       	push	r11
    3496:	af 92       	push	r10
    3498:	0e 94 3b 31 	call	0x6276	; 0x6276 <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	df 92       	push	r13
    34a2:	cf 92       	push	r12
    34a4:	0e 94 3b 31 	call	0x6276	; 0x6276 <printf>
    34a8:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    34aa:	ed b7       	in	r30, 0x3d	; 61
    34ac:	fe b7       	in	r31, 0x3e	; 62
    34ae:	72 96       	adiw	r30, 0x12	; 18
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	f8 94       	cli
    34b4:	fe bf       	out	0x3e, r31	; 62
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	ed bf       	out	0x3d, r30	; 61
    34ba:	01 30       	cpi	r16, 0x01	; 1
    34bc:	11 05       	cpc	r17, r1
    34be:	19 f0       	breq	.+6      	; 0x34c6 <dump_stack_info+0x13e>
    34c0:	01 e0       	ldi	r16, 0x01	; 1
    34c2:	10 e0       	ldi	r17, 0x00	; 0
    34c4:	d1 cf       	rjmp	.-94     	; 0x3468 <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    34c6:	df 91       	pop	r29
    34c8:	cf 91       	pop	r28
    34ca:	1f 91       	pop	r17
    34cc:	0f 91       	pop	r16
    34ce:	ff 90       	pop	r15
    34d0:	ef 90       	pop	r14
    34d2:	df 90       	pop	r13
    34d4:	cf 90       	pop	r12
    34d6:	bf 90       	pop	r11
    34d8:	af 90       	pop	r10
    34da:	9f 90       	pop	r9
    34dc:	8f 90       	pop	r8
    34de:	7f 90       	pop	r7
    34e0:	6f 90       	pop	r6
    34e2:	08 95       	ret

000034e4 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    34e4:	cf 93       	push	r28
    34e6:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    34e8:	e0 91 43 07 	lds	r30, 0x0743
    34ec:	f0 91 44 07 	lds	r31, 0x0744
    34f0:	c2 81       	ldd	r28, Z+2	; 0x02
    34f2:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    34f4:	88 81       	ld	r24, Y
    34f6:	85 35       	cpi	r24, 0x55	; 85
    34f8:	39 f0       	breq	.+14     	; 0x3508 <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    34fa:	0e 94 c4 19 	call	0x3388	; 0x3388 <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	0e 94 bc 18 	call	0x3178	; 0x3178 <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    3504:	85 e5       	ldi	r24, 0x55	; 85
    3506:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    3508:	e0 91 43 07 	lds	r30, 0x0743
    350c:	f0 91 44 07 	lds	r31, 0x0744
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    3510:	80 81       	ld	r24, Z
    3512:	91 81       	ldd	r25, Z+1	; 0x01
    3514:	81 15       	cp	r24, r1
    3516:	92 44       	sbci	r25, 0x42	; 66
    3518:	38 f0       	brcs	.+14     	; 0x3528 <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    351a:	0e 94 c4 19 	call	0x3388	; 0x3388 <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    351e:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    3520:	df 91       	pop	r29
    3522:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3524:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <nrk_error_add>




#endif
}
    3528:	df 91       	pop	r29
    352a:	cf 91       	pop	r28
    352c:	08 95       	ret

0000352e <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    352e:	2b e2       	ldi	r18, 0x2B	; 43
    3530:	82 02       	muls	r24, r18
    3532:	c0 01       	movw	r24, r0
    3534:	11 24       	eor	r1, r1
    3536:	fc 01       	movw	r30, r24
    3538:	ec 52       	subi	r30, 0x2C	; 44
    353a:	f9 4f       	sbci	r31, 0xF9	; 249
    353c:	a2 81       	ldd	r26, Z+2	; 0x02
    353e:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    3540:	8c 91       	ld	r24, X
    3542:	85 35       	cpi	r24, 0x55	; 85
    3544:	19 f0       	breq	.+6      	; 0x354c <nrk_stack_check_pid+0x1e>
    {
        *stkc=STK_CANARY_VAL;
    3546:	85 e5       	ldi	r24, 0x55	; 85
    3548:	8c 93       	st	X, r24
    354a:	08 c0       	rjmp	.+16     	; 0x355c <nrk_stack_check_pid+0x2e>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    354c:	80 81       	ld	r24, Z
    354e:	91 81       	ldd	r25, Z+1	; 0x01
    3550:	81 15       	cp	r24, r1
    3552:	92 44       	sbci	r25, 0x42	; 66
    3554:	28 f0       	brcs	.+10     	; 0x3560 <nrk_stack_check_pid+0x32>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    3556:	82 e1       	ldi	r24, 0x12	; 18
    3558:	0e 94 bc 18 	call	0x3178	; 0x3178 <nrk_error_add>
        return NRK_ERROR;
    355c:	8f ef       	ldi	r24, 0xFF	; 255
    355e:	08 95       	ret
    }
#endif
    return NRK_OK;
    3560:	81 e0       	ldi	r24, 0x01	; 1
}
    3562:	08 95       	ret

00003564 <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    3564:	0f 93       	push	r16
    3566:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    3568:	40 91 65 05 	lds	r20, 0x0565
    356c:	50 91 66 05 	lds	r21, 0x0566
    3570:	60 91 67 05 	lds	r22, 0x0567
    3574:	70 91 68 05 	lds	r23, 0x0568
    3578:	80 e0       	ldi	r24, 0x00	; 0
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	8a 01       	movw	r16, r20
    357e:	9b 01       	movw	r18, r22
    3580:	08 2e       	mov	r0, r24
    3582:	04 c0       	rjmp	.+8      	; 0x358c <nrk_signal_create+0x28>
    3584:	36 95       	lsr	r19
    3586:	27 95       	ror	r18
    3588:	17 95       	ror	r17
    358a:	07 95       	ror	r16
    358c:	0a 94       	dec	r0
    358e:	d2 f7       	brpl	.-12     	; 0x3584 <nrk_signal_create+0x20>
    3590:	00 fd       	sbrc	r16, 0
    3592:	19 c0       	rjmp	.+50     	; 0x35c6 <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    3594:	01 e0       	ldi	r16, 0x01	; 1
    3596:	10 e0       	ldi	r17, 0x00	; 0
    3598:	20 e0       	ldi	r18, 0x00	; 0
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	08 2e       	mov	r0, r24
    359e:	04 c0       	rjmp	.+8      	; 0x35a8 <nrk_signal_create+0x44>
    35a0:	00 0f       	add	r16, r16
    35a2:	11 1f       	adc	r17, r17
    35a4:	22 1f       	adc	r18, r18
    35a6:	33 1f       	adc	r19, r19
    35a8:	0a 94       	dec	r0
    35aa:	d2 f7       	brpl	.-12     	; 0x35a0 <nrk_signal_create+0x3c>
    35ac:	40 2b       	or	r20, r16
    35ae:	51 2b       	or	r21, r17
    35b0:	62 2b       	or	r22, r18
    35b2:	73 2b       	or	r23, r19
    35b4:	40 93 65 05 	sts	0x0565, r20
    35b8:	50 93 66 05 	sts	0x0566, r21
    35bc:	60 93 67 05 	sts	0x0567, r22
    35c0:	70 93 68 05 	sts	0x0568, r23
			return i;
    35c4:	05 c0       	rjmp	.+10     	; 0x35d0 <nrk_signal_create+0x6c>
    35c6:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    35c8:	80 32       	cpi	r24, 0x20	; 32
    35ca:	91 05       	cpc	r25, r1
    35cc:	b9 f6       	brne	.-82     	; 0x357c <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    35ce:	8f ef       	ldi	r24, 0xFF	; 255


}
    35d0:	1f 91       	pop	r17
    35d2:	0f 91       	pop	r16
    35d4:	08 95       	ret

000035d6 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    35d6:	e0 91 43 07 	lds	r30, 0x0743
    35da:	f0 91 44 07 	lds	r31, 0x0744
    35de:	65 85       	ldd	r22, Z+13	; 0x0d
    35e0:	76 85       	ldd	r23, Z+14	; 0x0e
    35e2:	87 85       	ldd	r24, Z+15	; 0x0f
    35e4:	90 89       	ldd	r25, Z+16	; 0x10
}
    35e6:	08 95       	ret

000035e8 <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    35e8:	cf 92       	push	r12
    35ea:	df 92       	push	r13
    35ec:	ef 92       	push	r14
    35ee:	ff 92       	push	r15
    35f0:	0f 93       	push	r16
    35f2:	1f 93       	push	r17
    35f4:	cf 93       	push	r28
    35f6:	df 93       	push	r29
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    35f8:	c1 2c       	mov	r12, r1
    35fa:	d1 2c       	mov	r13, r1
    35fc:	76 01       	movw	r14, r12
    35fe:	c3 94       	inc	r12
    3600:	08 2e       	mov	r0, r24
    3602:	04 c0       	rjmp	.+8      	; 0x360c <nrk_signal_delete+0x24>
    3604:	cc 0c       	add	r12, r12
    3606:	dd 1c       	adc	r13, r13
    3608:	ee 1c       	adc	r14, r14
    360a:	ff 1c       	adc	r15, r15
    360c:	0a 94       	dec	r0
    360e:	d2 f7       	brpl	.-12     	; 0x3604 <nrk_signal_delete+0x1c>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3610:	40 91 65 05 	lds	r20, 0x0565
    3614:	50 91 66 05 	lds	r21, 0x0566
    3618:	60 91 67 05 	lds	r22, 0x0567
    361c:	70 91 68 05 	lds	r23, 0x0568
    3620:	4c 21       	and	r20, r12
    3622:	5d 21       	and	r21, r13
    3624:	6e 21       	and	r22, r14
    3626:	7f 21       	and	r23, r15
    3628:	45 2b       	or	r20, r21
    362a:	46 2b       	or	r20, r22
    362c:	47 2b       	or	r20, r23
    362e:	09 f4       	brne	.+2      	; 0x3632 <nrk_signal_delete+0x4a>
    3630:	60 c0       	rjmp	.+192    	; 0x36f2 <nrk_signal_delete+0x10a>
    3632:	08 2f       	mov	r16, r24

	nrk_int_disable();
    3634:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <nrk_int_disable>
    3638:	ed ed       	ldi	r30, 0xDD	; 221
    363a:	f6 e0       	ldi	r31, 0x06	; 6
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    363c:	b7 01       	movw	r22, r14
    363e:	a6 01       	movw	r20, r12
    3640:	40 95       	com	r20
    3642:	50 95       	com	r21
    3644:	60 95       	com	r22
    3646:	70 95       	com	r23
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3648:	13 e0       	ldi	r17, 0x03	; 3
    364a:	df 01       	movw	r26, r30
    364c:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    364e:	8c 91       	ld	r24, X
    3650:	8f 3f       	cpi	r24, 0xFF	; 255
    3652:	39 f1       	breq	.+78     	; 0x36a2 <nrk_signal_delete+0xba>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    3654:	84 81       	ldd	r24, Z+4	; 0x04
    3656:	95 81       	ldd	r25, Z+5	; 0x05
    3658:	a6 81       	ldd	r26, Z+6	; 0x06
    365a:	b7 81       	ldd	r27, Z+7	; 0x07
    365c:	8c 15       	cp	r24, r12
    365e:	9d 05       	cpc	r25, r13
    3660:	ae 05       	cpc	r26, r14
    3662:	bf 05       	cpc	r27, r15
    3664:	51 f4       	brne	.+20     	; 0x367a <nrk_signal_delete+0x92>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    3666:	10 86       	std	Z+8, r1	; 0x08
    3668:	11 86       	std	Z+9, r1	; 0x09
    366a:	12 86       	std	Z+10, r1	; 0x0a
    366c:	13 86       	std	Z+11, r1	; 0x0b
    366e:	9f 01       	movw	r18, r30
    3670:	22 50       	subi	r18, 0x02	; 2
    3672:	31 09       	sbc	r19, r1
			nrk_task_TCB[task_ID].event_suspend=0;
    3674:	e9 01       	movw	r28, r18
    3676:	18 82       	st	Y, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3678:	10 83       	st	Z, r17
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    367a:	84 23       	and	r24, r20
    367c:	95 23       	and	r25, r21
    367e:	a6 23       	and	r26, r22
    3680:	b7 23       	and	r27, r23
    3682:	84 83       	std	Z+4, r24	; 0x04
    3684:	95 83       	std	Z+5, r25	; 0x05
    3686:	a6 83       	std	Z+6, r26	; 0x06
    3688:	b7 83       	std	Z+7, r27	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    368a:	80 85       	ldd	r24, Z+8	; 0x08
    368c:	91 85       	ldd	r25, Z+9	; 0x09
    368e:	a2 85       	ldd	r26, Z+10	; 0x0a
    3690:	b3 85       	ldd	r27, Z+11	; 0x0b
    3692:	84 23       	and	r24, r20
    3694:	95 23       	and	r25, r21
    3696:	a6 23       	and	r26, r22
    3698:	b7 23       	and	r27, r23
    369a:	80 87       	std	Z+8, r24	; 0x08
    369c:	91 87       	std	Z+9, r25	; 0x09
    369e:	a2 87       	std	Z+10, r26	; 0x0a
    36a0:	b3 87       	std	Z+11, r27	; 0x0b
    36a2:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    36a4:	d7 e0       	ldi	r29, 0x07	; 7
    36a6:	e3 33       	cpi	r30, 0x33	; 51
    36a8:	fd 07       	cpc	r31, r29
    36aa:	79 f6       	brne	.-98     	; 0x364a <nrk_signal_delete+0x62>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    36ac:	8e ef       	ldi	r24, 0xFE	; 254
    36ae:	9f ef       	ldi	r25, 0xFF	; 255
    36b0:	af ef       	ldi	r26, 0xFF	; 255
    36b2:	bf ef       	ldi	r27, 0xFF	; 255
    36b4:	04 c0       	rjmp	.+8      	; 0x36be <nrk_signal_delete+0xd6>
    36b6:	88 0f       	add	r24, r24
    36b8:	99 1f       	adc	r25, r25
    36ba:	aa 1f       	adc	r26, r26
    36bc:	bb 1f       	adc	r27, r27
    36be:	0a 95       	dec	r16
    36c0:	d2 f7       	brpl	.-12     	; 0x36b6 <nrk_signal_delete+0xce>
    36c2:	40 91 65 05 	lds	r20, 0x0565
    36c6:	50 91 66 05 	lds	r21, 0x0566
    36ca:	60 91 67 05 	lds	r22, 0x0567
    36ce:	70 91 68 05 	lds	r23, 0x0568
    36d2:	84 23       	and	r24, r20
    36d4:	95 23       	and	r25, r21
    36d6:	a6 23       	and	r26, r22
    36d8:	b7 23       	and	r27, r23
    36da:	80 93 65 05 	sts	0x0565, r24
    36de:	90 93 66 05 	sts	0x0566, r25
    36e2:	a0 93 67 05 	sts	0x0567, r26
    36e6:	b0 93 68 05 	sts	0x0568, r27
	nrk_int_enable();
    36ea:	0e 94 80 16 	call	0x2d00	; 0x2d00 <nrk_int_enable>

	return NRK_OK;
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	01 c0       	rjmp	.+2      	; 0x36f4 <nrk_signal_delete+0x10c>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    36f2:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    36f4:	df 91       	pop	r29
    36f6:	cf 91       	pop	r28
    36f8:	1f 91       	pop	r17
    36fa:	0f 91       	pop	r16
    36fc:	ff 90       	pop	r15
    36fe:	ef 90       	pop	r14
    3700:	df 90       	pop	r13
    3702:	cf 90       	pop	r12
    3704:	08 95       	ret

00003706 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    3706:	0f 93       	push	r16
    3708:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    370a:	41 e0       	ldi	r20, 0x01	; 1
    370c:	50 e0       	ldi	r21, 0x00	; 0
    370e:	60 e0       	ldi	r22, 0x00	; 0
    3710:	70 e0       	ldi	r23, 0x00	; 0
    3712:	8a 01       	movw	r16, r20
    3714:	9b 01       	movw	r18, r22
    3716:	04 c0       	rjmp	.+8      	; 0x3720 <nrk_signal_unregister+0x1a>
    3718:	00 0f       	add	r16, r16
    371a:	11 1f       	adc	r17, r17
    371c:	22 1f       	adc	r18, r18
    371e:	33 1f       	adc	r19, r19
    3720:	8a 95       	dec	r24
    3722:	d2 f7       	brpl	.-12     	; 0x3718 <nrk_signal_unregister+0x12>
    3724:	d9 01       	movw	r26, r18
    3726:	c8 01       	movw	r24, r16

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    3728:	e0 91 43 07 	lds	r30, 0x0743
    372c:	f0 91 44 07 	lds	r31, 0x0744
    3730:	45 85       	ldd	r20, Z+13	; 0x0d
    3732:	56 85       	ldd	r21, Z+14	; 0x0e
    3734:	67 85       	ldd	r22, Z+15	; 0x0f
    3736:	70 89       	ldd	r23, Z+16	; 0x10
    3738:	04 23       	and	r16, r20
    373a:	15 23       	and	r17, r21
    373c:	26 23       	and	r18, r22
    373e:	37 23       	and	r19, r23
    3740:	01 2b       	or	r16, r17
    3742:	02 2b       	or	r16, r18
    3744:	03 2b       	or	r16, r19
    3746:	d1 f0       	breq	.+52     	; 0x377c <nrk_signal_unregister+0x76>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    3748:	80 95       	com	r24
    374a:	90 95       	com	r25
    374c:	a0 95       	com	r26
    374e:	b0 95       	com	r27
    3750:	48 23       	and	r20, r24
    3752:	59 23       	and	r21, r25
    3754:	6a 23       	and	r22, r26
    3756:	7b 23       	and	r23, r27
    3758:	45 87       	std	Z+13, r20	; 0x0d
    375a:	56 87       	std	Z+14, r21	; 0x0e
    375c:	67 87       	std	Z+15, r22	; 0x0f
    375e:	70 8b       	std	Z+16, r23	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    3760:	41 89       	ldd	r20, Z+17	; 0x11
    3762:	52 89       	ldd	r21, Z+18	; 0x12
    3764:	63 89       	ldd	r22, Z+19	; 0x13
    3766:	74 89       	ldd	r23, Z+20	; 0x14
    3768:	84 23       	and	r24, r20
    376a:	95 23       	and	r25, r21
    376c:	a6 23       	and	r26, r22
    376e:	b7 23       	and	r27, r23
    3770:	81 8b       	std	Z+17, r24	; 0x11
    3772:	92 8b       	std	Z+18, r25	; 0x12
    3774:	a3 8b       	std	Z+19, r26	; 0x13
    3776:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    3778:	81 e0       	ldi	r24, 0x01	; 1
    377a:	01 c0       	rjmp	.+2      	; 0x377e <nrk_signal_unregister+0x78>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    377c:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    377e:	1f 91       	pop	r17
    3780:	0f 91       	pop	r16
    3782:	08 95       	ret

00003784 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{
    3784:	28 2f       	mov	r18, r24

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    3786:	40 91 65 05 	lds	r20, 0x0565
    378a:	50 91 66 05 	lds	r21, 0x0566
    378e:	60 91 67 05 	lds	r22, 0x0567
    3792:	70 91 68 05 	lds	r23, 0x0568
    3796:	08 2e       	mov	r0, r24
    3798:	04 c0       	rjmp	.+8      	; 0x37a2 <nrk_signal_register+0x1e>
    379a:	76 95       	lsr	r23
    379c:	67 95       	ror	r22
    379e:	57 95       	ror	r21
    37a0:	47 95       	ror	r20
    37a2:	0a 94       	dec	r0
    37a4:	d2 f7       	brpl	.-12     	; 0x379a <nrk_signal_register+0x16>
    37a6:	40 ff       	sbrs	r20, 0
    37a8:	1d c0       	rjmp	.+58     	; 0x37e4 <nrk_signal_register+0x60>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    37aa:	e0 91 43 07 	lds	r30, 0x0743
    37ae:	f0 91 44 07 	lds	r31, 0x0744
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	a0 e0       	ldi	r26, 0x00	; 0
    37b8:	b0 e0       	ldi	r27, 0x00	; 0
    37ba:	04 c0       	rjmp	.+8      	; 0x37c4 <nrk_signal_register+0x40>
    37bc:	88 0f       	add	r24, r24
    37be:	99 1f       	adc	r25, r25
    37c0:	aa 1f       	adc	r26, r26
    37c2:	bb 1f       	adc	r27, r27
    37c4:	2a 95       	dec	r18
    37c6:	d2 f7       	brpl	.-12     	; 0x37bc <nrk_signal_register+0x38>
    37c8:	45 85       	ldd	r20, Z+13	; 0x0d
    37ca:	56 85       	ldd	r21, Z+14	; 0x0e
    37cc:	67 85       	ldd	r22, Z+15	; 0x0f
    37ce:	70 89       	ldd	r23, Z+16	; 0x10
    37d0:	84 2b       	or	r24, r20
    37d2:	95 2b       	or	r25, r21
    37d4:	a6 2b       	or	r26, r22
    37d6:	b7 2b       	or	r27, r23
    37d8:	85 87       	std	Z+13, r24	; 0x0d
    37da:	96 87       	std	Z+14, r25	; 0x0e
    37dc:	a7 87       	std	Z+15, r26	; 0x0f
    37de:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	08 95       	ret
	}
            
	return NRK_ERROR;
    37e4:	8f ef       	ldi	r24, 0xFF	; 255
}
    37e6:	08 95       	ret

000037e8 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    37e8:	cf 92       	push	r12
    37ea:	df 92       	push	r13
    37ec:	ef 92       	push	r14
    37ee:	ff 92       	push	r15
    37f0:	cf 93       	push	r28
	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;
    uint8_t timer;

	sig_mask=SIG(sig_id);
    37f2:	c1 2c       	mov	r12, r1
    37f4:	d1 2c       	mov	r13, r1
    37f6:	76 01       	movw	r14, r12
    37f8:	c3 94       	inc	r12
    37fa:	04 c0       	rjmp	.+8      	; 0x3804 <nrk_event_signal+0x1c>
    37fc:	cc 0c       	add	r12, r12
    37fe:	dd 1c       	adc	r13, r13
    3800:	ee 1c       	adc	r14, r14
    3802:	ff 1c       	adc	r15, r15
    3804:	8a 95       	dec	r24
    3806:	d2 f7       	brpl	.-12     	; 0x37fc <nrk_event_signal+0x14>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    3808:	80 91 65 05 	lds	r24, 0x0565
    380c:	90 91 66 05 	lds	r25, 0x0566
    3810:	a0 91 67 05 	lds	r26, 0x0567
    3814:	b0 91 68 05 	lds	r27, 0x0568
    3818:	8c 21       	and	r24, r12
    381a:	9d 21       	and	r25, r13
    381c:	ae 21       	and	r26, r14
    381e:	bf 21       	and	r27, r15
    3820:	89 2b       	or	r24, r25
    3822:	8a 2b       	or	r24, r26
    3824:	8b 2b       	or	r24, r27
    3826:	11 f4       	brne	.+4      	; 0x382c <nrk_event_signal+0x44>
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	44 c0       	rjmp	.+136    	; 0x38b4 <nrk_event_signal+0xcc>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    382c:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <nrk_int_disable>
    3830:	eb ed       	ldi	r30, 0xDB	; 219
    3832:	f6 e0       	ldi	r31, 0x06	; 6
    3834:	ad ed       	ldi	r26, 0xDD	; 221
    3836:	b6 e0       	ldi	r27, 0x06	; 6

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    3838:	c0 e0       	ldi	r28, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    383a:	83 e0       	ldi	r24, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    383c:	90 81       	ld	r25, Z
    383e:	91 30       	cpi	r25, 0x01	; 1
    3840:	b9 f4       	brne	.+46     	; 0x3870 <nrk_event_signal+0x88>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    3842:	42 85       	ldd	r20, Z+10	; 0x0a
    3844:	53 85       	ldd	r21, Z+11	; 0x0b
    3846:	64 85       	ldd	r22, Z+12	; 0x0c
    3848:	75 85       	ldd	r23, Z+13	; 0x0d
    384a:	4c 21       	and	r20, r12
    384c:	5d 21       	and	r21, r13
    384e:	6e 21       	and	r22, r14
    3850:	7f 21       	and	r23, r15
    3852:	45 2b       	or	r20, r21
    3854:	46 2b       	or	r20, r22
    3856:	47 2b       	or	r20, r23
    3858:	59 f0       	breq	.+22     	; 0x3870 <nrk_event_signal+0x88>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    385a:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    385c:	16 86       	std	Z+14, r1	; 0x0e
    385e:	17 86       	std	Z+15, r1	; 0x0f
    3860:	10 8a       	std	Z+16, r1	; 0x10
    3862:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3864:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    3866:	c2 86       	std	Z+10, r12	; 0x0a
    3868:	d3 86       	std	Z+11, r13	; 0x0b
    386a:	e4 86       	std	Z+12, r14	; 0x0c
    386c:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    386e:	c1 e0       	ldi	r28, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3870:	90 81       	ld	r25, Z
    3872:	92 30       	cpi	r25, 0x02	; 2
    3874:	a1 f4       	brne	.+40     	; 0x389e <nrk_event_signal+0xb6>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    3876:	42 85       	ldd	r20, Z+10	; 0x0a
    3878:	53 85       	ldd	r21, Z+11	; 0x0b
    387a:	64 85       	ldd	r22, Z+12	; 0x0c
    387c:	75 85       	ldd	r23, Z+13	; 0x0d
    387e:	4c 15       	cp	r20, r12
    3880:	5d 05       	cpc	r21, r13
    3882:	6e 05       	cpc	r22, r14
    3884:	7f 05       	cpc	r23, r15
    3886:	59 f4       	brne	.+22     	; 0x389e <nrk_event_signal+0xb6>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3888:	8c 93       	st	X, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    388a:	16 86       	std	Z+14, r1	; 0x0e
    388c:	17 86       	std	Z+15, r1	; 0x0f
    388e:	10 8a       	std	Z+16, r1	; 0x10
    3890:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    3892:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3894:	12 86       	std	Z+10, r1	; 0x0a
    3896:	13 86       	std	Z+11, r1	; 0x0b
    3898:	14 86       	std	Z+12, r1	; 0x0c
    389a:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    389c:	c1 e0       	ldi	r28, 0x01	; 1
    389e:	bb 96       	adiw	r30, 0x2b	; 43
    38a0:	9b 96       	adiw	r26, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    38a2:	97 e0       	ldi	r25, 0x07	; 7
    38a4:	e1 33       	cpi	r30, 0x31	; 49
    38a6:	f9 07       	cpc	r31, r25
    38a8:	49 f6       	brne	.-110    	; 0x383c <nrk_event_signal+0x54>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    38aa:	0e 94 80 16 	call	0x2d00	; 0x2d00 <nrk_int_enable>
	if(event_occured)
    38ae:	c1 11       	cpse	r28, r1
    38b0:	05 c0       	rjmp	.+10     	; 0x38bc <nrk_event_signal+0xd4>
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    38b2:	82 e0       	ldi	r24, 0x02	; 2
    38b4:	0e 94 17 18 	call	0x302e	; 0x302e <_nrk_errno_set>
	return NRK_ERROR;
    38b8:	8f ef       	ldi	r24, 0xFF	; 255
    38ba:	01 c0       	rjmp	.+2      	; 0x38be <nrk_event_signal+0xd6>
            			_nrk_set_next_wakeup (timer);
			}	
		else
			nrk_wait_until_ticks (0);
		*/
		return NRK_OK;
    38bc:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    38be:	cf 91       	pop	r28
    38c0:	ff 90       	pop	r15
    38c2:	ef 90       	pop	r14
    38c4:	df 90       	pop	r13
    38c6:	cf 90       	pop	r12
    38c8:	08 95       	ret

000038ca <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    38ca:	0f 93       	push	r16
    38cc:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    38ce:	e0 91 43 07 	lds	r30, 0x0743
    38d2:	f0 91 44 07 	lds	r31, 0x0744
    38d6:	05 85       	ldd	r16, Z+13	; 0x0d
    38d8:	16 85       	ldd	r17, Z+14	; 0x0e
    38da:	27 85       	ldd	r18, Z+15	; 0x0f
    38dc:	30 89       	ldd	r19, Z+16	; 0x10
    38de:	06 23       	and	r16, r22
    38e0:	17 23       	and	r17, r23
    38e2:	28 23       	and	r18, r24
    38e4:	39 23       	and	r19, r25
    38e6:	01 15       	cp	r16, r1
    38e8:	11 05       	cpc	r17, r1
    38ea:	21 05       	cpc	r18, r1
    38ec:	31 05       	cpc	r19, r1
    38ee:	11 f1       	breq	.+68     	; 0x3934 <nrk_event_wait+0x6a>
    38f0:	dc 01       	movw	r26, r24
    38f2:	cb 01       	movw	r24, r22
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    38f4:	81 8b       	std	Z+17, r24	; 0x11
    38f6:	92 8b       	std	Z+18, r25	; 0x12
    38f8:	a3 8b       	std	Z+19, r26	; 0x13
    38fa:	b4 8b       	std	Z+20, r27	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    38fc:	21 e0       	ldi	r18, 0x01	; 1
    38fe:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    3900:	00 90 33 07 	lds	r0, 0x0733
    3904:	04 c0       	rjmp	.+8      	; 0x390e <nrk_event_wait+0x44>
    3906:	b6 95       	lsr	r27
    3908:	a7 95       	ror	r26
    390a:	97 95       	ror	r25
    390c:	87 95       	ror	r24
    390e:	0a 94       	dec	r0
    3910:	d2 f7       	brpl	.-12     	; 0x3906 <nrk_event_wait+0x3c>
    3912:	80 ff       	sbrs	r24, 0
    3914:	03 c0       	rjmp	.+6      	; 0x391c <nrk_event_wait+0x52>
		nrk_wait_until_nw();
    3916:	0e 94 70 20 	call	0x40e0	; 0x40e0 <nrk_wait_until_nw>
    391a:	04 c0       	rjmp	.+8      	; 0x3924 <nrk_event_wait+0x5a>
	else
		nrk_wait_until_ticks(0);
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	0e 94 41 20 	call	0x4082	; 0x4082 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    3924:	e0 91 43 07 	lds	r30, 0x0743
    3928:	f0 91 44 07 	lds	r31, 0x0744
    392c:	01 89       	ldd	r16, Z+17	; 0x11
    392e:	12 89       	ldd	r17, Z+18	; 0x12
    3930:	23 89       	ldd	r18, Z+19	; 0x13
    3932:	34 89       	ldd	r19, Z+20	; 0x14
}
    3934:	c9 01       	movw	r24, r18
    3936:	b8 01       	movw	r22, r16
    3938:	1f 91       	pop	r17
    393a:	0f 91       	pop	r16
    393c:	08 95       	ret

0000393e <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    393e:	90 91 42 07 	lds	r25, 0x0742
    3942:	91 11       	cpse	r25, r1
    3944:	1d c0       	rjmp	.+58     	; 0x3980 <nrk_sem_create+0x42>
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    3946:	90 91 2c 07 	lds	r25, 0x072C
    394a:	9f 3f       	cpi	r25, 0xFF	; 255
    394c:	31 f0       	breq	.+12     	; 0x395a <nrk_sem_create+0x1c>
    394e:	90 91 2f 07 	lds	r25, 0x072F
    3952:	9f 3f       	cpi	r25, 0xFF	; 255
    3954:	21 f0       	breq	.+8      	; 0x395e <nrk_sem_create+0x20>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    3956:	e2 e0       	ldi	r30, 0x02	; 2
    3958:	03 c0       	rjmp	.+6      	; 0x3960 <nrk_sem_create+0x22>
		{
		   if(nrk_sem_list[i].count==-1) break;
    395a:	e0 e0       	ldi	r30, 0x00	; 0
    395c:	01 c0       	rjmp	.+2      	; 0x3960 <nrk_sem_create+0x22>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    395e:	e1 e0       	ldi	r30, 0x01	; 1
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    3960:	f0 e0       	ldi	r31, 0x00	; 0
    3962:	9f 01       	movw	r18, r30
    3964:	22 0f       	add	r18, r18
    3966:	33 1f       	adc	r19, r19
    3968:	e2 0f       	add	r30, r18
    396a:	f3 1f       	adc	r31, r19
    396c:	e4 5d       	subi	r30, 0xD4	; 212
    396e:	f8 4f       	sbci	r31, 0xF8	; 248
    3970:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    3972:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    3974:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	80 93 42 07 	sts	0x0742, r24
	return	&nrk_sem_list[i];
    397c:	cf 01       	movw	r24, r30
    397e:	08 95       	ret

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    3980:	80 e0       	ldi	r24, 0x00	; 0
    3982:	90 e0       	ldi	r25, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    3984:	08 95       	ret

00003986 <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    3986:	27 e0       	ldi	r18, 0x07	; 7
    3988:	8c 32       	cpi	r24, 0x2C	; 44
    398a:	92 07       	cpc	r25, r18
    398c:	29 f0       	breq	.+10     	; 0x3998 <nrk_get_resource_index+0x12>
    398e:	8f 52       	subi	r24, 0x2F	; 47
    3990:	97 40       	sbci	r25, 0x07	; 7
    3992:	21 f4       	brne	.+8      	; 0x399c <nrk_get_resource_index+0x16>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	08 95       	ret
    3998:	80 e0       	ldi	r24, 0x00	; 0
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
    399a:	08 95       	ret
	return NRK_ERROR;
    399c:	8f ef       	ldi	r24, 0xFF	; 255
}
    399e:	08 95       	ret

000039a0 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    39a0:	0e 94 c3 1c 	call	0x3986	; 0x3986 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    39a4:	8f 3f       	cpi	r24, 0xFF	; 255
    39a6:	11 f4       	brne	.+4      	; 0x39ac <nrk_sem_query+0xc>
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	02 c0       	rjmp	.+4      	; 0x39b0 <nrk_sem_query+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    39ac:	82 30       	cpi	r24, 0x02	; 2
    39ae:	21 f4       	brne	.+8      	; 0x39b8 <nrk_sem_query+0x18>
    39b0:	0e 94 17 18 	call	0x302e	; 0x302e <_nrk_errno_set>
    39b4:	8f ef       	ldi	r24, 0xFF	; 255
    39b6:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    39b8:	99 27       	eor	r25, r25
    39ba:	87 fd       	sbrc	r24, 7
    39bc:	90 95       	com	r25
    39be:	fc 01       	movw	r30, r24
    39c0:	ee 0f       	add	r30, r30
    39c2:	ff 1f       	adc	r31, r31
    39c4:	8e 0f       	add	r24, r30
    39c6:	9f 1f       	adc	r25, r31
    39c8:	fc 01       	movw	r30, r24
    39ca:	e4 5d       	subi	r30, 0xD4	; 212
    39cc:	f8 4f       	sbci	r31, 0xF8	; 248
    39ce:	82 81       	ldd	r24, Z+2	; 0x02
}
    39d0:	08 95       	ret

000039d2 <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    39d2:	ef 92       	push	r14
    39d4:	ff 92       	push	r15
    39d6:	0f 93       	push	r16
    39d8:	1f 93       	push	r17
    39da:	cf 93       	push	r28
    39dc:	df 93       	push	r29
    39de:	1f 92       	push	r1
    39e0:	cd b7       	in	r28, 0x3d	; 61
    39e2:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    39e4:	0e 94 c3 1c 	call	0x3986	; 0x3986 <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    39e8:	8f 3f       	cpi	r24, 0xFF	; 255
    39ea:	11 f4       	brne	.+4      	; 0x39f0 <nrk_sem_pend+0x1e>
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	02 c0       	rjmp	.+4      	; 0x39f4 <nrk_sem_pend+0x22>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    39f0:	82 30       	cpi	r24, 0x02	; 2
    39f2:	21 f4       	brne	.+8      	; 0x39fc <nrk_sem_pend+0x2a>
    39f4:	0e 94 17 18 	call	0x302e	; 0x302e <_nrk_errno_set>
    39f8:	8f ef       	ldi	r24, 0xFF	; 255
    39fa:	41 c0       	rjmp	.+130    	; 0x3a7e <nrk_sem_pend+0xac>
	
	nrk_int_disable();
    39fc:	89 83       	std	Y+1, r24	; 0x01
    39fe:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    3a02:	89 81       	ldd	r24, Y+1	; 0x01
    3a04:	e8 2e       	mov	r14, r24
    3a06:	ff 24       	eor	r15, r15
    3a08:	e7 fc       	sbrc	r14, 7
    3a0a:	f0 94       	com	r15
    3a0c:	87 01       	movw	r16, r14
    3a0e:	00 0f       	add	r16, r16
    3a10:	11 1f       	adc	r17, r17
    3a12:	f8 01       	movw	r30, r16
    3a14:	ee 0d       	add	r30, r14
    3a16:	ff 1d       	adc	r31, r15
    3a18:	e4 5d       	subi	r30, 0xD4	; 212
    3a1a:	f8 4f       	sbci	r31, 0xF8	; 248
    3a1c:	92 81       	ldd	r25, Z+2	; 0x02
    3a1e:	91 11       	cpse	r25, r1
    3a20:	16 c0       	rjmp	.+44     	; 0x3a4e <nrk_sem_pend+0x7c>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    3a22:	e0 91 43 07 	lds	r30, 0x0743
    3a26:	f0 91 44 07 	lds	r31, 0x0744
    3a2a:	97 81       	ldd	r25, Z+7	; 0x07
    3a2c:	92 60       	ori	r25, 0x02	; 2
    3a2e:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    3a30:	99 27       	eor	r25, r25
    3a32:	87 fd       	sbrc	r24, 7
    3a34:	90 95       	com	r25
    3a36:	a9 2f       	mov	r26, r25
    3a38:	b9 2f       	mov	r27, r25
    3a3a:	81 8b       	std	Z+17, r24	; 0x11
    3a3c:	92 8b       	std	Z+18, r25	; 0x12
    3a3e:	a3 8b       	std	Z+19, r26	; 0x13
    3a40:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    3a42:	0e 94 80 16 	call	0x2d00	; 0x2d00 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	0e 94 41 20 	call	0x4082	; 0x4082 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    3a4e:	0e 0d       	add	r16, r14
    3a50:	1f 1d       	adc	r17, r15
    3a52:	d8 01       	movw	r26, r16
    3a54:	a4 5d       	subi	r26, 0xD4	; 212
    3a56:	b8 4f       	sbci	r27, 0xF8	; 248
    3a58:	12 96       	adiw	r26, 0x02	; 2
    3a5a:	8c 91       	ld	r24, X
    3a5c:	12 97       	sbiw	r26, 0x02	; 2
    3a5e:	81 50       	subi	r24, 0x01	; 1
    3a60:	12 96       	adiw	r26, 0x02	; 2
    3a62:	8c 93       	st	X, r24
    3a64:	12 97       	sbiw	r26, 0x02	; 2
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    3a66:	e0 91 43 07 	lds	r30, 0x0743
    3a6a:	f0 91 44 07 	lds	r31, 0x0744
    3a6e:	11 96       	adiw	r26, 0x01	; 1
    3a70:	8c 91       	ld	r24, X
    3a72:	83 87       	std	Z+11, r24	; 0x0b
	nrk_cur_task_TCB->elevated_prio_flag=1;
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	84 83       	std	Z+4, r24	; 0x04
	nrk_int_enable();
    3a78:	0e 94 80 16 	call	0x2d00	; 0x2d00 <nrk_int_enable>

	return NRK_OK;
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
}
    3a7e:	0f 90       	pop	r0
    3a80:	df 91       	pop	r29
    3a82:	cf 91       	pop	r28
    3a84:	1f 91       	pop	r17
    3a86:	0f 91       	pop	r16
    3a88:	ff 90       	pop	r15
    3a8a:	ef 90       	pop	r14
    3a8c:	08 95       	ret

00003a8e <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    3a8e:	0f 93       	push	r16
    3a90:	1f 93       	push	r17
    3a92:	cf 93       	push	r28
    3a94:	df 93       	push	r29
    3a96:	1f 92       	push	r1
    3a98:	cd b7       	in	r28, 0x3d	; 61
    3a9a:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    3a9c:	0e 94 c3 1c 	call	0x3986	; 0x3986 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3aa0:	8f 3f       	cpi	r24, 0xFF	; 255
    3aa2:	11 f4       	brne	.+4      	; 0x3aa8 <nrk_sem_post+0x1a>
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	02 c0       	rjmp	.+4      	; 0x3aac <nrk_sem_post+0x1e>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3aa8:	82 30       	cpi	r24, 0x02	; 2
    3aaa:	21 f4       	brne	.+8      	; 0x3ab4 <nrk_sem_post+0x26>
    3aac:	0e 94 17 18 	call	0x302e	; 0x302e <_nrk_errno_set>
    3ab0:	8f ef       	ldi	r24, 0xFF	; 255
    3ab2:	79 c0       	rjmp	.+242    	; 0x3ba6 <nrk_sem_post+0x118>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    3ab4:	48 2f       	mov	r20, r24
    3ab6:	55 27       	eor	r21, r21
    3ab8:	47 fd       	sbrc	r20, 7
    3aba:	50 95       	com	r21
    3abc:	9a 01       	movw	r18, r20
    3abe:	22 0f       	add	r18, r18
    3ac0:	33 1f       	adc	r19, r19
    3ac2:	24 0f       	add	r18, r20
    3ac4:	35 1f       	adc	r19, r21
    3ac6:	89 01       	movw	r16, r18
    3ac8:	04 5d       	subi	r16, 0xD4	; 212
    3aca:	18 4f       	sbci	r17, 0xF8	; 248
    3acc:	f8 01       	movw	r30, r16
    3ace:	22 81       	ldd	r18, Z+2	; 0x02
    3ad0:	90 81       	ld	r25, Z
    3ad2:	29 17       	cp	r18, r25
    3ad4:	0c f0       	brlt	.+2      	; 0x3ad8 <nrk_sem_post+0x4a>
    3ad6:	66 c0       	rjmp	.+204    	; 0x3ba4 <nrk_sem_post+0x116>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    3ad8:	89 83       	std	Y+1, r24	; 0x01
    3ada:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <nrk_int_disable>

		nrk_sem_list[id].value++;
    3ade:	f8 01       	movw	r30, r16
    3ae0:	92 81       	ldd	r25, Z+2	; 0x02
    3ae2:	9f 5f       	subi	r25, 0xFF	; 255
    3ae4:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    3ae6:	e0 91 43 07 	lds	r30, 0x0743
    3aea:	f0 91 44 07 	lds	r31, 0x0744
    3aee:	14 82       	std	Z+4, r1	; 0x04

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3af0:	90 91 db 06 	lds	r25, 0x06DB
    3af4:	89 81       	ldd	r24, Y+1	; 0x01
    3af6:	92 30       	cpi	r25, 0x02	; 2
    3af8:	41 f5       	brne	.+80     	; 0x3b4a <nrk_sem_post+0xbc>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3afa:	00 91 e5 06 	lds	r16, 0x06E5
    3afe:	10 91 e6 06 	lds	r17, 0x06E6
    3b02:	20 91 e7 06 	lds	r18, 0x06E7
    3b06:	30 91 e8 06 	lds	r19, 0x06E8
    3b0a:	48 2f       	mov	r20, r24
    3b0c:	55 27       	eor	r21, r21
    3b0e:	47 fd       	sbrc	r20, 7
    3b10:	50 95       	com	r21
    3b12:	65 2f       	mov	r22, r21
    3b14:	75 2f       	mov	r23, r21
    3b16:	04 17       	cp	r16, r20
    3b18:	15 07       	cpc	r17, r21
    3b1a:	26 07       	cpc	r18, r22
    3b1c:	37 07       	cpc	r19, r23
    3b1e:	a9 f4       	brne	.+42     	; 0x3b4a <nrk_sem_post+0xbc>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3b20:	93 e0       	ldi	r25, 0x03	; 3
    3b22:	90 93 dd 06 	sts	0x06DD, r25
					nrk_task_TCB[task_ID].next_wakeup=0;
    3b26:	10 92 e9 06 	sts	0x06E9, r1
    3b2a:	10 92 ea 06 	sts	0x06EA, r1
    3b2e:	10 92 eb 06 	sts	0x06EB, r1
    3b32:	10 92 ec 06 	sts	0x06EC, r1
					nrk_task_TCB[task_ID].event_suspend=0;
    3b36:	10 92 db 06 	sts	0x06DB, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3b3a:	10 92 e5 06 	sts	0x06E5, r1
    3b3e:	10 92 e6 06 	sts	0x06E6, r1
    3b42:	10 92 e7 06 	sts	0x06E7, r1
    3b46:	10 92 e8 06 	sts	0x06E8, r1

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    3b4a:	90 91 06 07 	lds	r25, 0x0706
    3b4e:	92 30       	cpi	r25, 0x02	; 2
    3b50:	39 f5       	brne	.+78     	; 0x3ba0 <nrk_sem_post+0x112>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3b52:	99 27       	eor	r25, r25
    3b54:	87 fd       	sbrc	r24, 7
    3b56:	90 95       	com	r25
    3b58:	a9 2f       	mov	r26, r25
    3b5a:	b9 2f       	mov	r27, r25
    3b5c:	40 91 10 07 	lds	r20, 0x0710
    3b60:	50 91 11 07 	lds	r21, 0x0711
    3b64:	60 91 12 07 	lds	r22, 0x0712
    3b68:	70 91 13 07 	lds	r23, 0x0713
    3b6c:	48 17       	cp	r20, r24
    3b6e:	59 07       	cpc	r21, r25
    3b70:	6a 07       	cpc	r22, r26
    3b72:	7b 07       	cpc	r23, r27
    3b74:	a9 f4       	brne	.+42     	; 0x3ba0 <nrk_sem_post+0x112>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3b76:	83 e0       	ldi	r24, 0x03	; 3
    3b78:	80 93 08 07 	sts	0x0708, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    3b7c:	10 92 14 07 	sts	0x0714, r1
    3b80:	10 92 15 07 	sts	0x0715, r1
    3b84:	10 92 16 07 	sts	0x0716, r1
    3b88:	10 92 17 07 	sts	0x0717, r1
					nrk_task_TCB[task_ID].event_suspend=0;
    3b8c:	10 92 06 07 	sts	0x0706, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3b90:	10 92 10 07 	sts	0x0710, r1
    3b94:	10 92 11 07 	sts	0x0711, r1
    3b98:	10 92 12 07 	sts	0x0712, r1
    3b9c:	10 92 13 07 	sts	0x0713, r1
				}   

		}
		nrk_int_enable();
    3ba0:	0e 94 80 16 	call	0x2d00	; 0x2d00 <nrk_int_enable>
	}
		
return NRK_OK;
    3ba4:	81 e0       	ldi	r24, 0x01	; 1
}
    3ba6:	0f 90       	pop	r0
    3ba8:	df 91       	pop	r29
    3baa:	cf 91       	pop	r28
    3bac:	1f 91       	pop	r17
    3bae:	0f 91       	pop	r16
    3bb0:	08 95       	ret

00003bb2 <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    3bb2:	0e 94 c3 1c 	call	0x3986	; 0x3986 <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3bb6:	8f 3f       	cpi	r24, 0xFF	; 255
    3bb8:	11 f4       	brne	.+4      	; 0x3bbe <nrk_sem_delete+0xc>
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	02 c0       	rjmp	.+4      	; 0x3bc2 <nrk_sem_delete+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3bbe:	82 30       	cpi	r24, 0x02	; 2
    3bc0:	21 f4       	brne	.+8      	; 0x3bca <nrk_sem_delete+0x18>
    3bc2:	0e 94 17 18 	call	0x302e	; 0x302e <_nrk_errno_set>
    3bc6:	8f ef       	ldi	r24, 0xFF	; 255
    3bc8:	08 95       	ret

	nrk_sem_list[id].count=-1;
    3bca:	99 27       	eor	r25, r25
    3bcc:	87 fd       	sbrc	r24, 7
    3bce:	90 95       	com	r25
    3bd0:	fc 01       	movw	r30, r24
    3bd2:	ee 0f       	add	r30, r30
    3bd4:	ff 1f       	adc	r31, r31
    3bd6:	8e 0f       	add	r24, r30
    3bd8:	9f 1f       	adc	r25, r31
    3bda:	fc 01       	movw	r30, r24
    3bdc:	e4 5d       	subi	r30, 0xD4	; 212
    3bde:	f8 4f       	sbci	r31, 0xF8	; 248
    3be0:	8f ef       	ldi	r24, 0xFF	; 255
    3be2:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    3be4:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    3be6:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    3be8:	80 91 42 07 	lds	r24, 0x0742
    3bec:	81 50       	subi	r24, 0x01	; 1
    3bee:	80 93 42 07 	sts	0x0742, r24
return NRK_OK;
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
}
    3bf4:	08 95       	ret

00003bf6 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    3bf6:	e0 91 38 07 	lds	r30, 0x0738
    3bfa:	f0 91 39 07 	lds	r31, 0x0739
}
    3bfe:	80 81       	ld	r24, Z
    3c00:	08 95       	ret

00003c02 <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    3c02:	e0 91 38 07 	lds	r30, 0x0738
    3c06:	f0 91 39 07 	lds	r31, 0x0739
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    3c0a:	30 97       	sbiw	r30, 0x00	; 0
    3c0c:	21 f0       	breq	.+8      	; 0x3c16 <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    3c0e:	03 80       	ldd	r0, Z+3	; 0x03
    3c10:	f4 81       	ldd	r31, Z+4	; 0x04
    3c12:	e0 2d       	mov	r30, r0
    3c14:	fa cf       	rjmp	.-12     	; 0x3c0a <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    3c16:	08 95       	ret

00003c18 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    3c18:	af 92       	push	r10
    3c1a:	bf 92       	push	r11
    3c1c:	cf 92       	push	r12
    3c1e:	df 92       	push	r13
    3c20:	ef 92       	push	r14
    3c22:	ff 92       	push	r15
    3c24:	0f 93       	push	r16
    3c26:	1f 93       	push	r17
    3c28:	cf 93       	push	r28
    3c2a:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    3c2c:	e0 91 d2 06 	lds	r30, 0x06D2
    3c30:	f0 91 d3 06 	lds	r31, 0x06D3
    3c34:	30 97       	sbiw	r30, 0x00	; 0
    3c36:	09 f4       	brne	.+2      	; 0x3c3a <nrk_add_to_readyQ+0x22>
    3c38:	90 c0       	rjmp	.+288    	; 0x3d5a <nrk_add_to_readyQ+0x142>
    {
        return;
    }


    NextNode = _head_node;
    3c3a:	00 91 38 07 	lds	r16, 0x0738
    3c3e:	10 91 39 07 	lds	r17, 0x0739
    CurNode = _free_node;

    if (_head_node != NULL)
    3c42:	01 15       	cp	r16, r1
    3c44:	11 05       	cpc	r17, r1
    3c46:	09 f4       	brne	.+2      	; 0x3c4a <nrk_add_to_readyQ+0x32>
    3c48:	4c c0       	rjmp	.+152    	; 0x3ce2 <nrk_add_to_readyQ+0xca>
    3c4a:	d8 01       	movw	r26, r16
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    3c4c:	4b e2       	ldi	r20, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    3c4e:	58 2f       	mov	r21, r24
    3c50:	54 03       	mulsu	r21, r20
    3c52:	90 01       	movw	r18, r0
    3c54:	11 24       	eor	r1, r1
    3c56:	2c 52       	subi	r18, 0x2C	; 44
    3c58:	39 4f       	sbci	r19, 0xF9	; 249
    3c5a:	79 01       	movw	r14, r18
    3c5c:	9a e0       	ldi	r25, 0x0A	; 10
    3c5e:	e9 0e       	add	r14, r25
    3c60:	f1 1c       	adc	r15, r1
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3c62:	69 01       	movw	r12, r18
    3c64:	c4 e0       	ldi	r28, 0x04	; 4
    3c66:	cc 0e       	add	r12, r28
    3c68:	d1 1c       	adc	r13, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    3c6a:	59 01       	movw	r10, r18
    3c6c:	db e0       	ldi	r29, 0x0B	; 11
    3c6e:	ad 0e       	add	r10, r29
    3c70:	b1 1c       	adc	r11, r1
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    3c72:	2c 91       	ld	r18, X
    3c74:	30 e0       	ldi	r19, 0x00	; 0
    3c76:	42 9f       	mul	r20, r18
    3c78:	b0 01       	movw	r22, r0
    3c7a:	43 9f       	mul	r20, r19
    3c7c:	70 0d       	add	r23, r0
    3c7e:	11 24       	eor	r1, r1
    3c80:	6c 52       	subi	r22, 0x2C	; 44
    3c82:	79 4f       	sbci	r23, 0xF9	; 249
    3c84:	eb 01       	movw	r28, r22
    3c86:	9c 81       	ldd	r25, Y+4	; 0x04
    3c88:	99 23       	and	r25, r25
    3c8a:	29 f0       	breq	.+10     	; 0x3c96 <nrk_add_to_readyQ+0x7e>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    3c8c:	5b 85       	ldd	r21, Y+11	; 0x0b
    3c8e:	e7 01       	movw	r28, r14
    3c90:	98 81       	ld	r25, Y
    3c92:	59 17       	cp	r21, r25
    3c94:	40 f1       	brcs	.+80     	; 0x3ce6 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    3c96:	e6 01       	movw	r28, r12
    3c98:	98 81       	ld	r25, Y
    3c9a:	99 23       	and	r25, r25
    3c9c:	69 f0       	breq	.+26     	; 0x3cb8 <nrk_add_to_readyQ+0xa0>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3c9e:	42 9f       	mul	r20, r18
    3ca0:	b0 01       	movw	r22, r0
    3ca2:	43 9f       	mul	r20, r19
    3ca4:	70 0d       	add	r23, r0
    3ca6:	11 24       	eor	r1, r1
    3ca8:	6c 52       	subi	r22, 0x2C	; 44
    3caa:	79 4f       	sbci	r23, 0xF9	; 249
    3cac:	eb 01       	movw	r28, r22
    3cae:	5a 85       	ldd	r21, Y+10	; 0x0a
    3cb0:	e5 01       	movw	r28, r10
    3cb2:	98 81       	ld	r25, Y
    3cb4:	59 17       	cp	r21, r25
    3cb6:	b8 f0       	brcs	.+46     	; 0x3ce6 <nrk_add_to_readyQ+0xce>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3cb8:	42 9f       	mul	r20, r18
    3cba:	b0 01       	movw	r22, r0
    3cbc:	43 9f       	mul	r20, r19
    3cbe:	70 0d       	add	r23, r0
    3cc0:	11 24       	eor	r1, r1
    3cc2:	9b 01       	movw	r18, r22
    3cc4:	2c 52       	subi	r18, 0x2C	; 44
    3cc6:	39 4f       	sbci	r19, 0xF9	; 249
    3cc8:	e9 01       	movw	r28, r18
    3cca:	2a 85       	ldd	r18, Y+10	; 0x0a
    3ccc:	e7 01       	movw	r28, r14
    3cce:	98 81       	ld	r25, Y
    3cd0:	29 17       	cp	r18, r25
    3cd2:	48 f0       	brcs	.+18     	; 0x3ce6 <nrk_add_to_readyQ+0xce>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    3cd4:	13 96       	adiw	r26, 0x03	; 3
    3cd6:	0d 90       	ld	r0, X+
    3cd8:	bc 91       	ld	r27, X
    3cda:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    3cdc:	10 97       	sbiw	r26, 0x00	; 0
    3cde:	49 f6       	brne	.-110    	; 0x3c72 <nrk_add_to_readyQ+0x5a>
    3ce0:	02 c0       	rjmp	.+4      	; 0x3ce6 <nrk_add_to_readyQ+0xce>
    3ce2:	a0 e0       	ldi	r26, 0x00	; 0
    3ce4:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    3ce6:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    3ce8:	c3 81       	ldd	r28, Z+3	; 0x03
    3cea:	d4 81       	ldd	r29, Z+4	; 0x04
    3cec:	d0 93 d3 06 	sts	0x06D3, r29
    3cf0:	c0 93 d2 06 	sts	0x06D2, r28

    if (NextNode == _head_node)
    3cf4:	a0 17       	cp	r26, r16
    3cf6:	b1 07       	cpc	r27, r17
    3cf8:	b1 f4       	brne	.+44     	; 0x3d26 <nrk_add_to_readyQ+0x10e>
    {
        //at start
        if (_head_node != NULL)
    3cfa:	10 97       	sbiw	r26, 0x00	; 0
    3cfc:	49 f0       	breq	.+18     	; 0x3d10 <nrk_add_to_readyQ+0xf8>
        {
            CurNode->Next = _head_node;
    3cfe:	b4 83       	std	Z+4, r27	; 0x04
    3d00:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    3d02:	12 82       	std	Z+2, r1	; 0x02
    3d04:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    3d06:	12 96       	adiw	r26, 0x02	; 2
    3d08:	fc 93       	st	X, r31
    3d0a:	ee 93       	st	-X, r30
    3d0c:	11 97       	sbiw	r26, 0x01	; 1
    3d0e:	06 c0       	rjmp	.+12     	; 0x3d1c <nrk_add_to_readyQ+0x104>
        }
        else
        {
            CurNode->Next = NULL;
    3d10:	14 82       	std	Z+4, r1	; 0x04
    3d12:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    3d14:	12 82       	std	Z+2, r1	; 0x02
    3d16:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    3d18:	fa 83       	std	Y+2, r31	; 0x02
    3d1a:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    3d1c:	f0 93 39 07 	sts	0x0739, r31
    3d20:	e0 93 38 07 	sts	0x0738, r30
    3d24:	1a c0       	rjmp	.+52     	; 0x3d5a <nrk_add_to_readyQ+0x142>
    3d26:	11 96       	adiw	r26, 0x01	; 1
    3d28:	8d 91       	ld	r24, X+
    3d2a:	9c 91       	ld	r25, X
    3d2c:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    3d2e:	ac 17       	cp	r26, r28
    3d30:	bd 07       	cpc	r27, r29
    3d32:	59 f0       	breq	.+22     	; 0x3d4a <nrk_add_to_readyQ+0x132>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    3d34:	92 83       	std	Z+2, r25	; 0x02
    3d36:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    3d38:	b4 83       	std	Z+4, r27	; 0x04
    3d3a:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    3d3c:	11 96       	adiw	r26, 0x01	; 1
    3d3e:	cd 91       	ld	r28, X+
    3d40:	dc 91       	ld	r29, X
    3d42:	12 97       	sbiw	r26, 0x02	; 2
    3d44:	fc 83       	std	Y+4, r31	; 0x04
    3d46:	eb 83       	std	Y+3, r30	; 0x03
    3d48:	04 c0       	rjmp	.+8      	; 0x3d52 <nrk_add_to_readyQ+0x13a>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    3d4a:	14 82       	std	Z+4, r1	; 0x04
    3d4c:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    3d4e:	92 83       	std	Z+2, r25	; 0x02
    3d50:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    3d52:	12 96       	adiw	r26, 0x02	; 2
    3d54:	fc 93       	st	X, r31
    3d56:	ee 93       	st	-X, r30
    3d58:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    3d5a:	df 91       	pop	r29
    3d5c:	cf 91       	pop	r28
    3d5e:	1f 91       	pop	r17
    3d60:	0f 91       	pop	r16
    3d62:	ff 90       	pop	r15
    3d64:	ef 90       	pop	r14
    3d66:	df 90       	pop	r13
    3d68:	cf 90       	pop	r12
    3d6a:	bf 90       	pop	r11
    3d6c:	af 90       	pop	r10
    3d6e:	08 95       	ret

00003d70 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    3d70:	cf 93       	push	r28
    3d72:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    3d74:	e0 91 38 07 	lds	r30, 0x0738
    3d78:	f0 91 39 07 	lds	r31, 0x0739
    3d7c:	30 97       	sbiw	r30, 0x00	; 0
    3d7e:	09 f4       	brne	.+2      	; 0x3d82 <nrk_rem_from_readyQ+0x12>
    3d80:	44 c0       	rjmp	.+136    	; 0x3e0a <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    3d82:	99 27       	eor	r25, r25
    3d84:	87 fd       	sbrc	r24, 7
    3d86:	90 95       	com	r25
    3d88:	20 81       	ld	r18, Z
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	28 17       	cp	r18, r24
    3d8e:	39 07       	cpc	r19, r25
    3d90:	81 f4       	brne	.+32     	; 0x3db2 <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    3d92:	a3 81       	ldd	r26, Z+3	; 0x03
    3d94:	b4 81       	ldd	r27, Z+4	; 0x04
    3d96:	b0 93 39 07 	sts	0x0739, r27
    3d9a:	a0 93 38 07 	sts	0x0738, r26
        _head_node->Prev = NULL;
    3d9e:	12 96       	adiw	r26, 0x02	; 2
    3da0:	1c 92       	st	X, r1
    3da2:	1e 92       	st	-X, r1
    3da4:	11 97       	sbiw	r26, 0x01	; 1
    3da6:	18 c0       	rjmp	.+48     	; 0x3dd8 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    3da8:	03 80       	ldd	r0, Z+3	; 0x03
    3daa:	f4 81       	ldd	r31, Z+4	; 0x04
    3dac:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    3dae:	30 97       	sbiw	r30, 0x00	; 0
    3db0:	61 f1       	breq	.+88     	; 0x3e0a <nrk_rem_from_readyQ+0x9a>
    3db2:	20 81       	ld	r18, Z
    3db4:	30 e0       	ldi	r19, 0x00	; 0
    3db6:	28 17       	cp	r18, r24
    3db8:	39 07       	cpc	r19, r25
    3dba:	b1 f7       	brne	.-20     	; 0x3da8 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    3dbc:	c1 81       	ldd	r28, Z+1	; 0x01
    3dbe:	d2 81       	ldd	r29, Z+2	; 0x02
    3dc0:	83 81       	ldd	r24, Z+3	; 0x03
    3dc2:	94 81       	ldd	r25, Z+4	; 0x04
    3dc4:	9c 83       	std	Y+4, r25	; 0x04
    3dc6:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    3dc8:	a3 81       	ldd	r26, Z+3	; 0x03
    3dca:	b4 81       	ldd	r27, Z+4	; 0x04
    3dcc:	10 97       	sbiw	r26, 0x00	; 0
    3dce:	21 f0       	breq	.+8      	; 0x3dd8 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    3dd0:	12 96       	adiw	r26, 0x02	; 2
    3dd2:	dc 93       	st	X, r29
    3dd4:	ce 93       	st	-X, r28
    3dd6:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    3dd8:	a0 91 d2 06 	lds	r26, 0x06D2
    3ddc:	b0 91 d3 06 	lds	r27, 0x06D3
    3de0:	10 97       	sbiw	r26, 0x00	; 0
    3de2:	39 f4       	brne	.+14     	; 0x3df2 <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    3de4:	f0 93 d3 06 	sts	0x06D3, r31
    3de8:	e0 93 d2 06 	sts	0x06D2, r30
        _free_node->Next = NULL;
    3dec:	14 82       	std	Z+4, r1	; 0x04
    3dee:	13 82       	std	Z+3, r1	; 0x03
    3df0:	0a c0       	rjmp	.+20     	; 0x3e06 <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    3df2:	b4 83       	std	Z+4, r27	; 0x04
    3df4:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    3df6:	12 96       	adiw	r26, 0x02	; 2
    3df8:	fc 93       	st	X, r31
    3dfa:	ee 93       	st	-X, r30
    3dfc:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    3dfe:	f0 93 d3 06 	sts	0x06D3, r31
    3e02:	e0 93 d2 06 	sts	0x06D2, r30
    }
    _free_node->Prev = NULL;
    3e06:	12 82       	std	Z+2, r1	; 0x02
    3e08:	11 82       	std	Z+1, r1	; 0x01
}
    3e0a:	df 91       	pop	r29
    3e0c:	cf 91       	pop	r28
    3e0e:	08 95       	ret

00003e10 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    3e10:	ef 92       	push	r14
    3e12:	ff 92       	push	r15
    3e14:	0f 93       	push	r16
    3e16:	1f 93       	push	r17
    3e18:	cf 93       	push	r28
    3e1a:	df 93       	push	r29
    3e1c:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    3e1e:	4b 81       	ldd	r20, Y+3	; 0x03
    3e20:	5c 81       	ldd	r21, Y+4	; 0x04
    3e22:	69 81       	ldd	r22, Y+1	; 0x01
    3e24:	7a 81       	ldd	r23, Y+2	; 0x02
    3e26:	8d 81       	ldd	r24, Y+5	; 0x05
    3e28:	9e 81       	ldd	r25, Y+6	; 0x06
    3e2a:	0e 94 a4 2c 	call	0x5948	; 0x5948 <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    3e2e:	2f 81       	ldd	r18, Y+7	; 0x07
    3e30:	22 23       	and	r18, r18
    3e32:	71 f0       	breq	.+28     	; 0x3e50 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    3e34:	4b 81       	ldd	r20, Y+3	; 0x03
    3e36:	5c 81       	ldd	r21, Y+4	; 0x04
    3e38:	e1 2c       	mov	r14, r1
    3e3a:	f1 2c       	mov	r15, r1
    3e3c:	00 e0       	ldi	r16, 0x00	; 0
    3e3e:	10 e0       	ldi	r17, 0x00	; 0
    3e40:	20 e0       	ldi	r18, 0x00	; 0
    3e42:	30 e0       	ldi	r19, 0x00	; 0
    3e44:	bc 01       	movw	r22, r24
    3e46:	ce 01       	movw	r24, r28
    3e48:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    3e4c:	1f 82       	std	Y+7, r1	; 0x07
    3e4e:	0c c0       	rjmp	.+24     	; 0x3e68 <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    3e50:	e8 81       	ld	r30, Y
    3e52:	2b e2       	ldi	r18, 0x2B	; 43
    3e54:	e2 02       	muls	r30, r18
    3e56:	f0 01       	movw	r30, r0
    3e58:	11 24       	eor	r1, r1
    3e5a:	ec 52       	subi	r30, 0x2C	; 44
    3e5c:	f9 4f       	sbci	r31, 0xF9	; 249
    3e5e:	21 85       	ldd	r18, Z+9	; 0x09
    3e60:	23 30       	cpi	r18, 0x03	; 3
    3e62:	b9 f4       	brne	.+46     	; 0x3e92 <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    3e64:	91 83       	std	Z+1, r25	; 0x01
    3e66:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    3e68:	e8 81       	ld	r30, Y
    3e6a:	8b e2       	ldi	r24, 0x2B	; 43
    3e6c:	e8 02       	muls	r30, r24
    3e6e:	f0 01       	movw	r30, r0
    3e70:	11 24       	eor	r1, r1
    3e72:	ec 52       	subi	r30, 0x2C	; 44
    3e74:	f9 4f       	sbci	r31, 0xF9	; 249
    3e76:	85 89       	ldd	r24, Z+21	; 0x15
    3e78:	96 89       	ldd	r25, Z+22	; 0x16
    3e7a:	a7 89       	ldd	r26, Z+23	; 0x17
    3e7c:	b0 8d       	ldd	r27, Z+24	; 0x18
    3e7e:	89 2b       	or	r24, r25
    3e80:	8a 2b       	or	r24, r26
    3e82:	8b 2b       	or	r24, r27
    3e84:	41 f4       	brne	.+16     	; 0x3e96 <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    3e86:	82 e0       	ldi	r24, 0x02	; 2
    3e88:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    3e8a:	88 81       	ld	r24, Y
    3e8c:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <nrk_add_to_readyQ>
    3e90:	02 c0       	rjmp	.+4      	; 0x3e96 <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    3e92:	8f ef       	ldi	r24, 0xFF	; 255
    3e94:	01 c0       	rjmp	.+2      	; 0x3e98 <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    3e96:	81 e0       	ldi	r24, 0x01	; 1
}
    3e98:	df 91       	pop	r29
    3e9a:	cf 91       	pop	r28
    3e9c:	1f 91       	pop	r17
    3e9e:	0f 91       	pop	r16
    3ea0:	ff 90       	pop	r15
    3ea2:	ef 90       	pop	r14
    3ea4:	08 95       	ret

00003ea6 <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    3ea6:	1f 93       	push	r17
    3ea8:	cf 93       	push	r28
    3eaa:	df 93       	push	r29
    3eac:	cd b7       	in	r28, 0x3d	; 61
    3eae:	de b7       	in	r29, 0x3e	; 62
    3eb0:	28 97       	sbiw	r28, 0x08	; 8
    3eb2:	0f b6       	in	r0, 0x3f	; 63
    3eb4:	f8 94       	cli
    3eb6:	de bf       	out	0x3e, r29	; 62
    3eb8:	0f be       	out	0x3f, r0	; 63
    3eba:	cd bf       	out	0x3d, r28	; 61
    3ebc:	29 83       	std	Y+1, r18	; 0x01
    3ebe:	3a 83       	std	Y+2, r19	; 0x02
    3ec0:	4b 83       	std	Y+3, r20	; 0x03
    3ec2:	5c 83       	std	Y+4, r21	; 0x04
    3ec4:	6d 83       	std	Y+5, r22	; 0x05
    3ec6:	7e 83       	std	Y+6, r23	; 0x06
    3ec8:	8f 83       	std	Y+7, r24	; 0x07
    3eca:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    3ecc:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    3ed0:	0e 94 ce 29 	call	0x539c	; 0x539c <_nrk_os_timer_get>
    3ed4:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    3ed6:	ce 01       	movw	r24, r28
    3ed8:	01 96       	adiw	r24, 0x01	; 1
    3eda:	0e 94 4f 24 	call	0x489e	; 0x489e <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    3ede:	63 30       	cpi	r22, 0x03	; 3
    3ee0:	71 05       	cpc	r23, r1
    3ee2:	98 f0       	brcs	.+38     	; 0x3f0a <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    3ee4:	e0 91 43 07 	lds	r30, 0x0743
    3ee8:	f0 91 44 07 	lds	r31, 0x0744
    3eec:	21 2f       	mov	r18, r17
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	62 0f       	add	r22, r18
    3ef2:	73 1f       	adc	r23, r19
    3ef4:	cb 01       	movw	r24, r22
    3ef6:	a0 e0       	ldi	r26, 0x00	; 0
    3ef8:	b0 e0       	ldi	r27, 0x00	; 0
    3efa:	85 8b       	std	Z+21, r24	; 0x15
    3efc:	96 8b       	std	Z+22, r25	; 0x16
    3efe:	a7 8b       	std	Z+23, r26	; 0x17
    3f00:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    3f02:	0e 94 80 16 	call	0x2d00	; 0x2d00 <nrk_int_enable>

    return NRK_OK;
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	01 c0       	rjmp	.+2      	; 0x3f0c <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    3f0a:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    3f0c:	28 96       	adiw	r28, 0x08	; 8
    3f0e:	0f b6       	in	r0, 0x3f	; 63
    3f10:	f8 94       	cli
    3f12:	de bf       	out	0x3e, r29	; 62
    3f14:	0f be       	out	0x3f, r0	; 63
    3f16:	cd bf       	out	0x3d, r28	; 61
    3f18:	df 91       	pop	r29
    3f1a:	cf 91       	pop	r28
    3f1c:	1f 91       	pop	r17
    3f1e:	08 95       	ret

00003f20 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    3f20:	0e 94 77 2c 	call	0x58ee	; 0x58ee <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    3f24:	e0 91 43 07 	lds	r30, 0x0743
    3f28:	f0 91 44 07 	lds	r31, 0x0744
    3f2c:	85 81       	ldd	r24, Z+5	; 0x05
    3f2e:	81 11       	cpse	r24, r1
    3f30:	f7 cf       	rjmp	.-18     	; 0x3f20 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    3f32:	08 95       	ret

00003f34 <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    3f34:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    3f36:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    3f3a:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    3f3e:	e0 91 43 07 	lds	r30, 0x0743
    3f42:	f0 91 44 07 	lds	r31, 0x0744
    3f46:	81 e0       	ldi	r24, 0x01	; 1
    3f48:	90 e0       	ldi	r25, 0x00	; 0
    3f4a:	92 a7       	std	Z+42, r25	; 0x2a
    3f4c:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    3f4e:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    3f50:	0e 94 ce 29 	call	0x539c	; 0x539c <_nrk_os_timer_get>
    3f54:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3f56:	88 3f       	cpi	r24, 0xF8	; 248
    3f58:	80 f4       	brcc	.+32     	; 0x3f7a <nrk_wait_until_next_period+0x46>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3f5a:	0e 94 69 29 	call	0x52d2	; 0x52d2 <_nrk_get_next_wakeup>
    3f5e:	2c 2f       	mov	r18, r28
    3f60:	30 e0       	ldi	r19, 0x00	; 0
    3f62:	2f 5f       	subi	r18, 0xFF	; 255
    3f64:	3f 4f       	sbci	r19, 0xFF	; 255
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	28 17       	cp	r18, r24
    3f6a:	39 07       	cpc	r19, r25
    3f6c:	34 f4       	brge	.+12     	; 0x3f7a <nrk_wait_until_next_period+0x46>
        {
            timer += TIME_PAD;
    3f6e:	82 e0       	ldi	r24, 0x02	; 2
    3f70:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    3f72:	80 93 99 05 	sts	0x0599, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    3f76:	0e 94 6d 29 	call	0x52da	; 0x52da <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3f7a:	0e 94 80 16 	call	0x2d00	; 0x2d00 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3f7e:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3f82:	81 e0       	ldi	r24, 0x01	; 1
    3f84:	cf 91       	pop	r28
    3f86:	08 95       	ret

00003f88 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    3f88:	e0 91 43 07 	lds	r30, 0x0743
    3f8c:	f0 91 44 07 	lds	r31, 0x0744
    3f90:	80 85       	ldd	r24, Z+8	; 0x08
    3f92:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    3f96:	e0 91 43 07 	lds	r30, 0x0743
    3f9a:	f0 91 44 07 	lds	r31, 0x0744
    3f9e:	84 e0       	ldi	r24, 0x04	; 4
    3fa0:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    3fa2:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <nrk_wait_until_next_period>
    return NRK_OK;
}
    3fa6:	81 e0       	ldi	r24, 0x01	; 1
    3fa8:	08 95       	ret

00003faa <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    3faa:	cf 93       	push	r28
    3fac:	df 93       	push	r29
    3fae:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    3fb0:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <nrk_stack_check>

    if (p == 0)
    3fb4:	20 97       	sbiw	r28, 0x00	; 0
    3fb6:	11 f4       	brne	.+4      	; 0x3fbc <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    3fb8:	c1 e0       	ldi	r28, 0x01	; 1
    3fba:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    3fbc:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3fc0:	e0 91 43 07 	lds	r30, 0x0743
    3fc4:	f0 91 44 07 	lds	r31, 0x0744
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    3fcc:	d2 a7       	std	Z+42, r29	; 0x2a
    3fce:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    3fd0:	0e 94 ce 29 	call	0x539c	; 0x539c <_nrk_os_timer_get>
    3fd4:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    3fd6:	88 3f       	cpi	r24, 0xF8	; 248
    3fd8:	80 f4       	brcc	.+32     	; 0x3ffa <nrk_wait_until_next_n_periods+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3fda:	0e 94 69 29 	call	0x52d2	; 0x52d2 <_nrk_get_next_wakeup>
    3fde:	2c 2f       	mov	r18, r28
    3fe0:	30 e0       	ldi	r19, 0x00	; 0
    3fe2:	2f 5f       	subi	r18, 0xFF	; 255
    3fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	28 17       	cp	r18, r24
    3fea:	39 07       	cpc	r19, r25
    3fec:	34 f4       	brge	.+12     	; 0x3ffa <nrk_wait_until_next_n_periods+0x50>
        {
            timer += TIME_PAD;
    3fee:	82 e0       	ldi	r24, 0x02	; 2
    3ff0:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    3ff2:	80 93 99 05 	sts	0x0599, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    3ff6:	0e 94 6d 29 	call	0x52da	; 0x52da <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3ffa:	0e 94 80 16 	call	0x2d00	; 0x2d00 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    3ffe:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4002:	81 e0       	ldi	r24, 0x01	; 1
    4004:	df 91       	pop	r29
    4006:	cf 91       	pop	r28
    4008:	08 95       	ret

0000400a <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    400a:	ef 92       	push	r14
    400c:	ff 92       	push	r15
    400e:	0f 93       	push	r16
    4010:	1f 93       	push	r17
    4012:	cf 93       	push	r28
    4014:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    4016:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    401a:	e0 91 43 07 	lds	r30, 0x0743
    401e:	f0 91 44 07 	lds	r31, 0x0744
    4022:	81 e0       	ldi	r24, 0x01	; 1
    4024:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    4026:	0e 94 ce 29 	call	0x539c	; 0x539c <_nrk_os_timer_get>
    402a:	c8 2f       	mov	r28, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    402c:	e0 91 43 07 	lds	r30, 0x0743
    4030:	f0 91 44 07 	lds	r31, 0x0744
    4034:	e8 2e       	mov	r14, r24
    4036:	f1 2c       	mov	r15, r1
    4038:	c7 01       	movw	r24, r14
    403a:	80 0f       	add	r24, r16
    403c:	91 1f       	adc	r25, r17
    403e:	a0 e0       	ldi	r26, 0x00	; 0
    4040:	b0 e0       	ldi	r27, 0x00	; 0
    4042:	85 8b       	std	Z+21, r24	; 0x15
    4044:	96 8b       	std	Z+22, r25	; 0x16
    4046:	a7 8b       	std	Z+23, r26	; 0x17
    4048:	b0 8f       	std	Z+24, r27	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    404a:	c8 3f       	cpi	r28, 0xF8	; 248
    404c:	78 f4       	brcc	.+30     	; 0x406c <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    404e:	0e 94 69 29 	call	0x52d2	; 0x52d2 <_nrk_get_next_wakeup>
    4052:	9f ef       	ldi	r25, 0xFF	; 255
    4054:	e9 1a       	sub	r14, r25
    4056:	f9 0a       	sbc	r15, r25
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	e8 16       	cp	r14, r24
    405c:	f9 06       	cpc	r15, r25
    405e:	34 f4       	brge	.+12     	; 0x406c <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    4060:	82 e0       	ldi	r24, 0x02	; 2
    4062:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4064:	80 93 99 05 	sts	0x0599, r24
            _nrk_set_next_wakeup (timer);
    4068:	0e 94 6d 29 	call	0x52da	; 0x52da <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    406c:	0e 94 80 16 	call	0x2d00	; 0x2d00 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    4070:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4074:	81 e0       	ldi	r24, 0x01	; 1
    4076:	cf 91       	pop	r28
    4078:	1f 91       	pop	r17
    407a:	0f 91       	pop	r16
    407c:	ff 90       	pop	r15
    407e:	ef 90       	pop	r14
    4080:	08 95       	ret

00004082 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    4082:	cf 93       	push	r28
    4084:	df 93       	push	r29
    4086:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    4088:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    408c:	e0 91 43 07 	lds	r30, 0x0743
    4090:	f0 91 44 07 	lds	r31, 0x0744
    4094:	21 e0       	ldi	r18, 0x01	; 1
    4096:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    4098:	ce 01       	movw	r24, r28
    409a:	a0 e0       	ldi	r26, 0x00	; 0
    409c:	b0 e0       	ldi	r27, 0x00	; 0
    409e:	85 8b       	std	Z+21, r24	; 0x15
    40a0:	96 8b       	std	Z+22, r25	; 0x16
    40a2:	a7 8b       	std	Z+23, r26	; 0x17
    40a4:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    40a6:	0e 94 ce 29 	call	0x539c	; 0x539c <_nrk_os_timer_get>
    40aa:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    40ac:	88 3f       	cpi	r24, 0xF8	; 248
    40ae:	80 f4       	brcc	.+32     	; 0x40d0 <nrk_wait_until_ticks+0x4e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    40b0:	0e 94 69 29 	call	0x52d2	; 0x52d2 <_nrk_get_next_wakeup>
    40b4:	2c 2f       	mov	r18, r28
    40b6:	30 e0       	ldi	r19, 0x00	; 0
    40b8:	2f 5f       	subi	r18, 0xFF	; 255
    40ba:	3f 4f       	sbci	r19, 0xFF	; 255
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	28 17       	cp	r18, r24
    40c0:	39 07       	cpc	r19, r25
    40c2:	34 f4       	brge	.+12     	; 0x40d0 <nrk_wait_until_ticks+0x4e>
        {
            timer += TIME_PAD;
    40c4:	82 e0       	ldi	r24, 0x02	; 2
    40c6:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    40c8:	80 93 99 05 	sts	0x0599, r24
            _nrk_set_next_wakeup (timer);
    40cc:	0e 94 6d 29 	call	0x52da	; 0x52da <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    40d0:	0e 94 80 16 	call	0x2d00	; 0x2d00 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    40d4:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    40d8:	81 e0       	ldi	r24, 0x01	; 1
    40da:	df 91       	pop	r29
    40dc:	cf 91       	pop	r28
    40de:	08 95       	ret

000040e0 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    40e0:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    40e2:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    40e6:	e0 91 43 07 	lds	r30, 0x0743
    40ea:	f0 91 44 07 	lds	r31, 0x0744
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    40f2:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    40f4:	0e 94 ce 29 	call	0x539c	; 0x539c <_nrk_os_timer_get>
    40f8:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    40fa:	88 3f       	cpi	r24, 0xF8	; 248
    40fc:	80 f4       	brcc	.+32     	; 0x411e <nrk_wait_until_nw+0x3e>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    40fe:	0e 94 69 29 	call	0x52d2	; 0x52d2 <_nrk_get_next_wakeup>
    4102:	2c 2f       	mov	r18, r28
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	2f 5f       	subi	r18, 0xFF	; 255
    4108:	3f 4f       	sbci	r19, 0xFF	; 255
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	28 17       	cp	r18, r24
    410e:	39 07       	cpc	r19, r25
    4110:	34 f4       	brge	.+12     	; 0x411e <nrk_wait_until_nw+0x3e>
        {
            timer += TIME_PAD;
    4112:	82 e0       	ldi	r24, 0x02	; 2
    4114:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    4116:	80 93 99 05 	sts	0x0599, r24
            _nrk_set_next_wakeup (timer);
    411a:	0e 94 6d 29 	call	0x52da	; 0x52da <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    411e:	0e 94 80 16 	call	0x2d00	; 0x2d00 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    4122:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    4126:	81 e0       	ldi	r24, 0x01	; 1
    4128:	cf 91       	pop	r28
    412a:	08 95       	ret

0000412c <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    412c:	1f 93       	push	r17
    412e:	cf 93       	push	r28
    4130:	df 93       	push	r29
    4132:	cd b7       	in	r28, 0x3d	; 61
    4134:	de b7       	in	r29, 0x3e	; 62
    4136:	28 97       	sbiw	r28, 0x08	; 8
    4138:	0f b6       	in	r0, 0x3f	; 63
    413a:	f8 94       	cli
    413c:	de bf       	out	0x3e, r29	; 62
    413e:	0f be       	out	0x3f, r0	; 63
    4140:	cd bf       	out	0x3d, r28	; 61
    4142:	29 83       	std	Y+1, r18	; 0x01
    4144:	3a 83       	std	Y+2, r19	; 0x02
    4146:	4b 83       	std	Y+3, r20	; 0x03
    4148:	5c 83       	std	Y+4, r21	; 0x04
    414a:	6d 83       	std	Y+5, r22	; 0x05
    414c:	7e 83       	std	Y+6, r23	; 0x06
    414e:	8f 83       	std	Y+7, r24	; 0x07
    4150:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    4152:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <nrk_stack_check>

    nrk_int_disable ();
    4156:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    415a:	e0 91 43 07 	lds	r30, 0x0743
    415e:	f0 91 44 07 	lds	r31, 0x0744
    4162:	81 e0       	ldi	r24, 0x01	; 1
    4164:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    4166:	81 e0       	ldi	r24, 0x01	; 1
    4168:	90 e0       	ldi	r25, 0x00	; 0
    416a:	92 a7       	std	Z+42, r25	; 0x2a
    416c:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    416e:	0e 94 ce 29 	call	0x539c	; 0x539c <_nrk_os_timer_get>
    4172:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    4174:	ce 01       	movw	r24, r28
    4176:	01 96       	adiw	r24, 0x01	; 1
    4178:	0e 94 4f 24 	call	0x489e	; 0x489e <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    417c:	e0 91 43 07 	lds	r30, 0x0743
    4180:	f0 91 44 07 	lds	r31, 0x0744
    4184:	dc 01       	movw	r26, r24
    4186:	cb 01       	movw	r24, r22
    4188:	81 0f       	add	r24, r17
    418a:	91 1d       	adc	r25, r1
    418c:	a1 1d       	adc	r26, r1
    418e:	b1 1d       	adc	r27, r1
    4190:	85 8b       	std	Z+21, r24	; 0x15
    4192:	96 8b       	std	Z+22, r25	; 0x16
    4194:	a7 8b       	std	Z+23, r26	; 0x17
    4196:	b0 8f       	std	Z+24, r27	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    4198:	18 3f       	cpi	r17, 0xF8	; 248
    419a:	80 f4       	brcc	.+32     	; 0x41bc <nrk_wait+0x90>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    419c:	0e 94 69 29 	call	0x52d2	; 0x52d2 <_nrk_get_next_wakeup>
    41a0:	21 2f       	mov	r18, r17
    41a2:	30 e0       	ldi	r19, 0x00	; 0
    41a4:	2f 5f       	subi	r18, 0xFF	; 255
    41a6:	3f 4f       	sbci	r19, 0xFF	; 255
    41a8:	90 e0       	ldi	r25, 0x00	; 0
    41aa:	28 17       	cp	r18, r24
    41ac:	39 07       	cpc	r19, r25
    41ae:	34 f4       	brge	.+12     	; 0x41bc <nrk_wait+0x90>
        {
            timer += TIME_PAD;
    41b0:	82 e0       	ldi	r24, 0x02	; 2
    41b2:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    41b4:	80 93 99 05 	sts	0x0599, r24
            _nrk_set_next_wakeup (timer);
    41b8:	0e 94 6d 29 	call	0x52da	; 0x52da <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    41bc:	0e 94 80 16 	call	0x2d00	; 0x2d00 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    41c0:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	28 96       	adiw	r28, 0x08	; 8
    41c8:	0f b6       	in	r0, 0x3f	; 63
    41ca:	f8 94       	cli
    41cc:	de bf       	out	0x3e, r29	; 62
    41ce:	0f be       	out	0x3f, r0	; 63
    41d0:	cd bf       	out	0x3d, r28	; 61
    41d2:	df 91       	pop	r29
    41d4:	cf 91       	pop	r28
    41d6:	1f 91       	pop	r17
    41d8:	08 95       	ret

000041da <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    41da:	8f 92       	push	r8
    41dc:	9f 92       	push	r9
    41de:	af 92       	push	r10
    41e0:	bf 92       	push	r11
    41e2:	cf 92       	push	r12
    41e4:	df 92       	push	r13
    41e6:	ef 92       	push	r14
    41e8:	ff 92       	push	r15
    41ea:	0f 93       	push	r16
    41ec:	1f 93       	push	r17
    41ee:	cf 93       	push	r28
    41f0:	df 93       	push	r29
    41f2:	cd b7       	in	r28, 0x3d	; 61
    41f4:	de b7       	in	r29, 0x3e	; 62
    41f6:	60 97       	sbiw	r28, 0x10	; 16
    41f8:	0f b6       	in	r0, 0x3f	; 63
    41fa:	f8 94       	cli
    41fc:	de bf       	out	0x3e, r29	; 62
    41fe:	0f be       	out	0x3f, r0	; 63
    4200:	cd bf       	out	0x3d, r28	; 61
    4202:	29 87       	std	Y+9, r18	; 0x09
    4204:	3a 87       	std	Y+10, r19	; 0x0a
    4206:	4b 87       	std	Y+11, r20	; 0x0b
    4208:	5c 87       	std	Y+12, r21	; 0x0c
    420a:	6d 87       	std	Y+13, r22	; 0x0d
    420c:	7e 87       	std	Y+14, r23	; 0x0e
    420e:	8f 87       	std	Y+15, r24	; 0x0f
    4210:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    4212:	ce 01       	movw	r24, r28
    4214:	01 96       	adiw	r24, 0x01	; 1
    4216:	0e 94 37 22 	call	0x446e	; 0x446e <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    421a:	89 80       	ldd	r8, Y+1	; 0x01
    421c:	9a 80       	ldd	r9, Y+2	; 0x02
    421e:	ab 80       	ldd	r10, Y+3	; 0x03
    4220:	bc 80       	ldd	r11, Y+4	; 0x04
    4222:	cd 80       	ldd	r12, Y+5	; 0x05
    4224:	de 80       	ldd	r13, Y+6	; 0x06
    4226:	ef 80       	ldd	r14, Y+7	; 0x07
    4228:	f8 84       	ldd	r15, Y+8	; 0x08
    422a:	09 85       	ldd	r16, Y+9	; 0x09
    422c:	1a 85       	ldd	r17, Y+10	; 0x0a
    422e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4230:	3c 85       	ldd	r19, Y+12	; 0x0c
    4232:	4d 85       	ldd	r20, Y+13	; 0x0d
    4234:	5e 85       	ldd	r21, Y+14	; 0x0e
    4236:	6f 85       	ldd	r22, Y+15	; 0x0f
    4238:	78 89       	ldd	r23, Y+16	; 0x10
    423a:	ce 01       	movw	r24, r28
    423c:	09 96       	adiw	r24, 0x09	; 9
    423e:	0e 94 94 22 	call	0x4528	; 0x4528 <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    4242:	8f 3f       	cpi	r24, 0xFF	; 255
    4244:	61 f0       	breq	.+24     	; 0x425e <__stack+0x5f>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    4246:	29 85       	ldd	r18, Y+9	; 0x09
    4248:	3a 85       	ldd	r19, Y+10	; 0x0a
    424a:	4b 85       	ldd	r20, Y+11	; 0x0b
    424c:	5c 85       	ldd	r21, Y+12	; 0x0c
    424e:	6d 85       	ldd	r22, Y+13	; 0x0d
    4250:	7e 85       	ldd	r23, Y+14	; 0x0e
    4252:	8f 85       	ldd	r24, Y+15	; 0x0f
    4254:	98 89       	ldd	r25, Y+16	; 0x10
    4256:	0e 94 96 20 	call	0x412c	; 0x412c <nrk_wait>

    return NRK_OK;
    425a:	81 e0       	ldi	r24, 0x01	; 1
    425c:	01 c0       	rjmp	.+2      	; 0x4260 <__stack+0x61>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    425e:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    4260:	60 96       	adiw	r28, 0x10	; 16
    4262:	0f b6       	in	r0, 0x3f	; 63
    4264:	f8 94       	cli
    4266:	de bf       	out	0x3e, r29	; 62
    4268:	0f be       	out	0x3f, r0	; 63
    426a:	cd bf       	out	0x3d, r28	; 61
    426c:	df 91       	pop	r29
    426e:	cf 91       	pop	r28
    4270:	1f 91       	pop	r17
    4272:	0f 91       	pop	r16
    4274:	ff 90       	pop	r15
    4276:	ef 90       	pop	r14
    4278:	df 90       	pop	r13
    427a:	cf 90       	pop	r12
    427c:	bf 90       	pop	r11
    427e:	af 90       	pop	r10
    4280:	9f 90       	pop	r9
    4282:	8f 90       	pop	r8
    4284:	08 95       	ret

00004286 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    4286:	e0 91 43 07 	lds	r30, 0x0743
    428a:	f0 91 44 07 	lds	r31, 0x0744
}
    428e:	80 85       	ldd	r24, Z+8	; 0x08
    4290:	08 95       	ret

00004292 <nrk_full_time_get>:
*******************************************************************************/
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

uint64_t nrk_full_time_get() {
    4292:	2f 92       	push	r2
    4294:	3f 92       	push	r3
    4296:	4f 92       	push	r4
    4298:	5f 92       	push	r5
    429a:	6f 92       	push	r6
    429c:	7f 92       	push	r7
    429e:	8f 92       	push	r8
    42a0:	9f 92       	push	r9
    42a2:	af 92       	push	r10
    42a4:	bf 92       	push	r11
    42a6:	cf 92       	push	r12
    42a8:	df 92       	push	r13
    42aa:	ef 92       	push	r14
    42ac:	ff 92       	push	r15
    42ae:	0f 93       	push	r16
    42b0:	1f 93       	push	r17
    42b2:	cf 93       	push	r28
    42b4:	df 93       	push	r29
    42b6:	cd b7       	in	r28, 0x3d	; 61
    42b8:	de b7       	in	r29, 0x3e	; 62
    42ba:	2f 97       	sbiw	r28, 0x0f	; 15
    42bc:	0f b6       	in	r0, 0x3f	; 63
    42be:	f8 94       	cli
    42c0:	de bf       	out	0x3e, r29	; 62
    42c2:	0f be       	out	0x3f, r0	; 63
    42c4:	cd bf       	out	0x3d, r28	; 61
    uint64_t prec_ticks = (uint64_t)TCNT5/*_nrk_precision_os_timer_get()*/;
    42c6:	e0 91 24 01 	lds	r30, 0x0124
    42ca:	f0 91 25 01 	lds	r31, 0x0125
    42ce:	fa 87       	std	Y+10, r31	; 0x0a
    42d0:	e9 87       	std	Y+9, r30	; 0x09
    uint64_t ticks = (uint64_t)TCNT2/*_nrk_os_timer_get()*/;
    42d2:	e0 91 b2 00 	lds	r30, 0x00B2
    nrk_time_t sys_time = nrk_system_time;
    uint64_t time = 1000000000L * sys_time.secs + sys_time.nano_secs;
    time += prec_ticks * (uint64_t)NANOS_PER_PRECISION_TICK - (prec_ticks >> 1)/* actually 62.5 not 63 */;
    return time + ticks * (uint64_t)NANOS_PER_TICK; 
    42d6:	2e 2f       	mov	r18, r30
    42d8:	30 e0       	ldi	r19, 0x00	; 0
    42da:	40 e0       	ldi	r20, 0x00	; 0
    42dc:	50 e0       	ldi	r21, 0x00	; 0
    42de:	60 e0       	ldi	r22, 0x00	; 0
    42e0:	70 e0       	ldi	r23, 0x00	; 0
    42e2:	80 e0       	ldi	r24, 0x00	; 0
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	06 e0       	ldi	r16, 0x06	; 6
    42e8:	0e 94 29 30 	call	0x6052	; 0x6052 <__ashldi3>
    42ec:	ae 2e       	mov	r10, r30
    42ee:	b1 2c       	mov	r11, r1
    42f0:	c1 2c       	mov	r12, r1
    42f2:	d1 2c       	mov	r13, r1
    42f4:	e1 2c       	mov	r14, r1
    42f6:	f1 2c       	mov	r15, r1
    42f8:	00 e0       	ldi	r16, 0x00	; 0
    42fa:	10 e0       	ldi	r17, 0x00	; 0
    42fc:	0e 94 75 30 	call	0x60ea	; 0x60ea <__subdi3>
    4300:	01 e0       	ldi	r16, 0x01	; 1
    4302:	0e 94 29 30 	call	0x6052	; 0x6052 <__ashldi3>
    4306:	00 e0       	ldi	r16, 0x00	; 0
    4308:	0e 94 75 30 	call	0x60ea	; 0x60ea <__subdi3>
    430c:	59 01       	movw	r10, r18
    430e:	6a 01       	movw	r12, r20
    4310:	7b 01       	movw	r14, r22
    4312:	f8 2f       	mov	r31, r24
    4314:	19 2f       	mov	r17, r25
    4316:	05 e0       	ldi	r16, 0x05	; 5
    4318:	0e 94 29 30 	call	0x6052	; 0x6052 <__ashldi3>
    431c:	0f 2f       	mov	r16, r31
    431e:	0e 94 75 30 	call	0x60ea	; 0x60ea <__subdi3>
    4322:	02 e0       	ldi	r16, 0x02	; 2
    4324:	0e 94 29 30 	call	0x6052	; 0x6052 <__ashldi3>
    4328:	ae 2e       	mov	r10, r30
    432a:	b1 2c       	mov	r11, r1
    432c:	c1 2c       	mov	r12, r1
    432e:	d1 2c       	mov	r13, r1
    4330:	e1 2c       	mov	r14, r1
    4332:	f1 2c       	mov	r15, r1
    4334:	00 e0       	ldi	r16, 0x00	; 0
    4336:	10 e0       	ldi	r17, 0x00	; 0
    4338:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__adddi3>
    433c:	59 01       	movw	r10, r18
    433e:	6a 01       	movw	r12, r20
    4340:	7b 01       	movw	r14, r22
    4342:	e8 2f       	mov	r30, r24
    4344:	19 2f       	mov	r17, r25
    4346:	06 e0       	ldi	r16, 0x06	; 6
    4348:	0e 94 29 30 	call	0x6052	; 0x6052 <__ashldi3>
    434c:	0e 2f       	mov	r16, r30
    434e:	0e 94 75 30 	call	0x60ea	; 0x60ea <__subdi3>
    4352:	f9 01       	movw	r30, r18
    4354:	4f 87       	std	Y+15, r20	; 0x0f
    4356:	5c 87       	std	Y+12, r21	; 0x0c
    4358:	b6 2f       	mov	r27, r22
    435a:	a7 2f       	mov	r26, r23
    435c:	8d 87       	std	Y+13, r24	; 0x0d
    435e:	9e 87       	std	Y+14, r25	; 0x0e
uint64_t nrk_full_time_get() {
    uint64_t prec_ticks = (uint64_t)TCNT5/*_nrk_precision_os_timer_get()*/;
    uint64_t ticks = (uint64_t)TCNT2/*_nrk_os_timer_get()*/;
    nrk_time_t sys_time = nrk_system_time;
    uint64_t time = 1000000000L * sys_time.secs + sys_time.nano_secs;
    time += prec_ticks * (uint64_t)NANOS_PER_PRECISION_TICK - (prec_ticks >> 1)/* actually 62.5 not 63 */;
    4360:	29 85       	ldd	r18, Y+9	; 0x09
    4362:	3a 85       	ldd	r19, Y+10	; 0x0a
    4364:	19 01       	movw	r2, r18
    4366:	41 2c       	mov	r4, r1
    4368:	51 2c       	mov	r5, r1
    436a:	a2 01       	movw	r20, r4
    436c:	60 e0       	ldi	r22, 0x00	; 0
    436e:	70 e0       	ldi	r23, 0x00	; 0
    4370:	80 e0       	ldi	r24, 0x00	; 0
    4372:	90 e0       	ldi	r25, 0x00	; 0
    4374:	06 e0       	ldi	r16, 0x06	; 6
    4376:	0e 94 29 30 	call	0x6052	; 0x6052 <__ashldi3>
    437a:	51 01       	movw	r10, r2
    437c:	62 01       	movw	r12, r4
    437e:	e1 2c       	mov	r14, r1
    4380:	f1 2c       	mov	r15, r1
    4382:	00 e0       	ldi	r16, 0x00	; 0
    4384:	10 e0       	ldi	r17, 0x00	; 0
    4386:	0e 94 75 30 	call	0x60ea	; 0x60ea <__subdi3>
    438a:	59 01       	movw	r10, r18
    438c:	6a 01       	movw	r12, r20
    438e:	7b 01       	movw	r14, r22
    4390:	8c 01       	movw	r16, r24
    4392:	9f 01       	movw	r18, r30
    4394:	4f 85       	ldd	r20, Y+15	; 0x0f
    4396:	5c 85       	ldd	r21, Y+12	; 0x0c
    4398:	6b 2f       	mov	r22, r27
    439a:	7a 2f       	mov	r23, r26
    439c:	8d 85       	ldd	r24, Y+13	; 0x0d
    439e:	9e 85       	ldd	r25, Y+14	; 0x0e
    43a0:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__adddi3>
    43a4:	79 01       	movw	r14, r18
    43a6:	8a 01       	movw	r16, r20
    43a8:	4b 01       	movw	r8, r22
    43aa:	6c 01       	movw	r12, r24
#include <nrk_error.h>

uint64_t nrk_full_time_get() {
    uint64_t prec_ticks = (uint64_t)TCNT5/*_nrk_precision_os_timer_get()*/;
    uint64_t ticks = (uint64_t)TCNT2/*_nrk_os_timer_get()*/;
    nrk_time_t sys_time = nrk_system_time;
    43ac:	ea e3       	ldi	r30, 0x3A	; 58
    43ae:	f7 e0       	ldi	r31, 0x07	; 7
    uint64_t time = 1000000000L * sys_time.secs + sys_time.nano_secs;
    43b0:	20 81       	ld	r18, Z
    43b2:	31 81       	ldd	r19, Z+1	; 0x01
    43b4:	42 81       	ldd	r20, Z+2	; 0x02
    43b6:	53 81       	ldd	r21, Z+3	; 0x03
    43b8:	60 e0       	ldi	r22, 0x00	; 0
    43ba:	7a ec       	ldi	r23, 0xCA	; 202
    43bc:	8a e9       	ldi	r24, 0x9A	; 154
    43be:	9b e3       	ldi	r25, 0x3B	; 59
    43c0:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <__mulsi3>
    43c4:	44 80       	ldd	r4, Z+4	; 0x04
    43c6:	55 80       	ldd	r5, Z+5	; 0x05
    43c8:	66 80       	ldd	r6, Z+6	; 0x06
    43ca:	77 80       	ldd	r7, Z+7	; 0x07
    43cc:	46 0e       	add	r4, r22
    43ce:	57 1e       	adc	r5, r23
    43d0:	68 1e       	adc	r6, r24
    43d2:	79 1e       	adc	r7, r25
    43d4:	a3 01       	movw	r20, r6
    43d6:	92 01       	movw	r18, r4
    43d8:	49 82       	std	Y+1, r4	; 0x01
    43da:	3a 83       	std	Y+2, r19	; 0x02
    43dc:	4b 83       	std	Y+3, r20	; 0x03
    43de:	5c 83       	std	Y+4, r21	; 0x04
    43e0:	97 01       	movw	r18, r14
    43e2:	a8 01       	movw	r20, r16
    43e4:	b4 01       	movw	r22, r8
    43e6:	c6 01       	movw	r24, r12
    43e8:	a9 80       	ldd	r10, Y+1	; 0x01
    43ea:	ba 80       	ldd	r11, Y+2	; 0x02
    43ec:	cb 80       	ldd	r12, Y+3	; 0x03
    43ee:	dc 80       	ldd	r13, Y+4	; 0x04
    43f0:	e1 2c       	mov	r14, r1
    43f2:	f1 2c       	mov	r15, r1
    43f4:	00 e0       	ldi	r16, 0x00	; 0
    43f6:	10 e0       	ldi	r17, 0x00	; 0
    43f8:	0e 94 60 30 	call	0x60c0	; 0x60c0 <__adddi3>
    43fc:	29 01       	movw	r4, r18
    43fe:	e4 2f       	mov	r30, r20
    4400:	75 2e       	mov	r7, r21
    4402:	b6 2f       	mov	r27, r22
    4404:	a7 2f       	mov	r26, r23
    4406:	68 2e       	mov	r6, r24
    4408:	39 2e       	mov	r3, r25
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

uint64_t nrk_full_time_get() {
    uint64_t prec_ticks = (uint64_t)TCNT5/*_nrk_precision_os_timer_get()*/;
    440a:	49 85       	ldd	r20, Y+9	; 0x09
    440c:	5a 85       	ldd	r21, Y+10	; 0x0a
    uint64_t ticks = (uint64_t)TCNT2/*_nrk_os_timer_get()*/;
    nrk_time_t sys_time = nrk_system_time;
    uint64_t time = 1000000000L * sys_time.secs + sys_time.nano_secs;
    time += prec_ticks * (uint64_t)NANOS_PER_PRECISION_TICK - (prec_ticks >> 1)/* actually 62.5 not 63 */;
    440e:	9a 01       	movw	r18, r20
    4410:	40 e0       	ldi	r20, 0x00	; 0
    4412:	50 e0       	ldi	r21, 0x00	; 0
    4414:	60 e0       	ldi	r22, 0x00	; 0
    4416:	70 e0       	ldi	r23, 0x00	; 0
    4418:	80 e0       	ldi	r24, 0x00	; 0
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	01 e0       	ldi	r16, 0x01	; 1
    441e:	0e 94 44 30 	call	0x6088	; 0x6088 <__lshrdi3>
    4422:	59 01       	movw	r10, r18
    4424:	6a 01       	movw	r12, r20
    4426:	7b 01       	movw	r14, r22
    4428:	8c 01       	movw	r16, r24
    return time + ticks * (uint64_t)NANOS_PER_TICK; 
    442a:	92 01       	movw	r18, r4
    442c:	4e 2f       	mov	r20, r30
    442e:	57 2d       	mov	r21, r7
    4430:	6b 2f       	mov	r22, r27
    4432:	7a 2f       	mov	r23, r26
    4434:	86 2d       	mov	r24, r6
    4436:	93 2d       	mov	r25, r3
    4438:	0e 94 75 30 	call	0x60ea	; 0x60ea <__subdi3>
}
    443c:	2f 96       	adiw	r28, 0x0f	; 15
    443e:	0f b6       	in	r0, 0x3f	; 63
    4440:	f8 94       	cli
    4442:	de bf       	out	0x3e, r29	; 62
    4444:	0f be       	out	0x3f, r0	; 63
    4446:	cd bf       	out	0x3d, r28	; 61
    4448:	df 91       	pop	r29
    444a:	cf 91       	pop	r28
    444c:	1f 91       	pop	r17
    444e:	0f 91       	pop	r16
    4450:	ff 90       	pop	r15
    4452:	ef 90       	pop	r14
    4454:	df 90       	pop	r13
    4456:	cf 90       	pop	r12
    4458:	bf 90       	pop	r11
    445a:	af 90       	pop	r10
    445c:	9f 90       	pop	r9
    445e:	8f 90       	pop	r8
    4460:	7f 90       	pop	r7
    4462:	6f 90       	pop	r6
    4464:	5f 90       	pop	r5
    4466:	4f 90       	pop	r4
    4468:	3f 90       	pop	r3
    446a:	2f 90       	pop	r2
    446c:	08 95       	ret

0000446e <nrk_time_get>:

void nrk_time_get(nrk_time_t *t)
{
    446e:	0f 93       	push	r16
    4470:	1f 93       	push	r17
    4472:	cf 93       	push	r28
    4474:	df 93       	push	r29
    4476:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    4478:	1c 82       	std	Y+4, r1	; 0x04
    447a:	1d 82       	std	Y+5, r1	; 0x05
    447c:	1e 82       	std	Y+6, r1	; 0x06
    447e:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    4480:	80 91 3a 07 	lds	r24, 0x073A
    4484:	90 91 3b 07 	lds	r25, 0x073B
    4488:	a0 91 3c 07 	lds	r26, 0x073C
    448c:	b0 91 3d 07 	lds	r27, 0x073D
    4490:	88 83       	st	Y, r24
    4492:	99 83       	std	Y+1, r25	; 0x01
    4494:	aa 83       	std	Y+2, r26	; 0x02
    4496:	bb 83       	std	Y+3, r27	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    4498:	80 91 3e 07 	lds	r24, 0x073E
    449c:	90 91 3f 07 	lds	r25, 0x073F
    44a0:	a0 91 40 07 	lds	r26, 0x0740
    44a4:	b0 91 41 07 	lds	r27, 0x0741
    44a8:	8c 83       	std	Y+4, r24	; 0x04
    44aa:	9d 83       	std	Y+5, r25	; 0x05
    44ac:	ae 83       	std	Y+6, r26	; 0x06
    44ae:	bf 83       	std	Y+7, r27	; 0x07
 
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    44b0:	0e 94 ce 29 	call	0x539c	; 0x539c <_nrk_os_timer_get>
    44b4:	a8 2f       	mov	r26, r24
    44b6:	b0 e0       	ldi	r27, 0x00	; 0
    44b8:	23 eb       	ldi	r18, 0xB3	; 179
    44ba:	36 ee       	ldi	r19, 0xE6	; 230
    44bc:	4e e0       	ldi	r20, 0x0E	; 14
    44be:	50 e0       	ldi	r21, 0x00	; 0
    44c0:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__muluhisi3>
    44c4:	0c 81       	ldd	r16, Y+4	; 0x04
    44c6:	1d 81       	ldd	r17, Y+5	; 0x05
    44c8:	2e 81       	ldd	r18, Y+6	; 0x06
    44ca:	3f 81       	ldd	r19, Y+7	; 0x07
    44cc:	dc 01       	movw	r26, r24
    44ce:	cb 01       	movw	r24, r22
    44d0:	80 0f       	add	r24, r16
    44d2:	91 1f       	adc	r25, r17
    44d4:	a2 1f       	adc	r26, r18
    44d6:	b3 1f       	adc	r27, r19
    44d8:	8c 83       	std	Y+4, r24	; 0x04
    44da:	9d 83       	std	Y+5, r25	; 0x05
    44dc:	ae 83       	std	Y+6, r26	; 0x06
    44de:	bf 83       	std	Y+7, r27	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    44e0:	8c 81       	ldd	r24, Y+4	; 0x04
    44e2:	9d 81       	ldd	r25, Y+5	; 0x05
    44e4:	ae 81       	ldd	r26, Y+6	; 0x06
    44e6:	bf 81       	ldd	r27, Y+7	; 0x07
    44e8:	81 15       	cp	r24, r1
    44ea:	2a ec       	ldi	r18, 0xCA	; 202
    44ec:	92 07       	cpc	r25, r18
    44ee:	2a e9       	ldi	r18, 0x9A	; 154
    44f0:	a2 07       	cpc	r26, r18
    44f2:	2b e3       	ldi	r18, 0x3B	; 59
    44f4:	b2 07       	cpc	r27, r18
    44f6:	98 f0       	brcs	.+38     	; 0x451e <nrk_time_get+0xb0>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    44f8:	9a 5c       	subi	r25, 0xCA	; 202
    44fa:	aa 49       	sbci	r26, 0x9A	; 154
    44fc:	bb 43       	sbci	r27, 0x3B	; 59
    44fe:	8c 83       	std	Y+4, r24	; 0x04
    4500:	9d 83       	std	Y+5, r25	; 0x05
    4502:	ae 83       	std	Y+6, r26	; 0x06
    4504:	bf 83       	std	Y+7, r27	; 0x07
    t->secs++;
    4506:	88 81       	ld	r24, Y
    4508:	99 81       	ldd	r25, Y+1	; 0x01
    450a:	aa 81       	ldd	r26, Y+2	; 0x02
    450c:	bb 81       	ldd	r27, Y+3	; 0x03
    450e:	01 96       	adiw	r24, 0x01	; 1
    4510:	a1 1d       	adc	r26, r1
    4512:	b1 1d       	adc	r27, r1
    4514:	88 83       	st	Y, r24
    4516:	99 83       	std	Y+1, r25	; 0x01
    4518:	aa 83       	std	Y+2, r26	; 0x02
    451a:	bb 83       	std	Y+3, r27	; 0x03
    451c:	e1 cf       	rjmp	.-62     	; 0x44e0 <nrk_time_get+0x72>
    }

}
    451e:	df 91       	pop	r29
    4520:	cf 91       	pop	r28
    4522:	1f 91       	pop	r17
    4524:	0f 91       	pop	r16
    4526:	08 95       	ret

00004528 <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    4528:	8f 92       	push	r8
    452a:	9f 92       	push	r9
    452c:	af 92       	push	r10
    452e:	bf 92       	push	r11
    4530:	cf 92       	push	r12
    4532:	df 92       	push	r13
    4534:	ef 92       	push	r14
    4536:	ff 92       	push	r15
    4538:	0f 93       	push	r16
    453a:	1f 93       	push	r17
    453c:	cf 93       	push	r28
    453e:	df 93       	push	r29
    4540:	cd b7       	in	r28, 0x3d	; 61
    4542:	de b7       	in	r29, 0x3e	; 62
    4544:	60 97       	sbiw	r28, 0x10	; 16
    4546:	0f b6       	in	r0, 0x3f	; 63
    4548:	f8 94       	cli
    454a:	de bf       	out	0x3e, r29	; 62
    454c:	0f be       	out	0x3f, r0	; 63
    454e:	cd bf       	out	0x3d, r28	; 61
    4550:	fc 01       	movw	r30, r24
    4552:	09 83       	std	Y+1, r16	; 0x01
    4554:	1a 83       	std	Y+2, r17	; 0x02
    4556:	2b 83       	std	Y+3, r18	; 0x03
    4558:	3c 83       	std	Y+4, r19	; 0x04
    455a:	4d 83       	std	Y+5, r20	; 0x05
    455c:	5e 83       	std	Y+6, r21	; 0x06
    455e:	6f 83       	std	Y+7, r22	; 0x07
    4560:	78 87       	std	Y+8, r23	; 0x08
    4562:	89 86       	std	Y+9, r8	; 0x09
    4564:	9a 86       	std	Y+10, r9	; 0x0a
    4566:	ab 86       	std	Y+11, r10	; 0x0b
    4568:	bc 86       	std	Y+12, r11	; 0x0c
    456a:	cd 86       	std	Y+13, r12	; 0x0d
    456c:	de 86       	std	Y+14, r13	; 0x0e
    456e:	ef 86       	std	Y+15, r14	; 0x0f
    4570:	f8 8a       	std	Y+16, r15	; 0x10
    4572:	09 81       	ldd	r16, Y+1	; 0x01
    4574:	1a 81       	ldd	r17, Y+2	; 0x02
    4576:	2b 81       	ldd	r18, Y+3	; 0x03
    4578:	3c 81       	ldd	r19, Y+4	; 0x04
    457a:	4d 81       	ldd	r20, Y+5	; 0x05
    457c:	5e 81       	ldd	r21, Y+6	; 0x06
    457e:	6f 81       	ldd	r22, Y+7	; 0x07
    4580:	78 85       	ldd	r23, Y+8	; 0x08
    4582:	c9 84       	ldd	r12, Y+9	; 0x09
    4584:	da 84       	ldd	r13, Y+10	; 0x0a
    4586:	eb 84       	ldd	r14, Y+11	; 0x0b
    4588:	fc 84       	ldd	r15, Y+12	; 0x0c
    458a:	8d 85       	ldd	r24, Y+13	; 0x0d
    458c:	9e 85       	ldd	r25, Y+14	; 0x0e
    458e:	af 85       	ldd	r26, Y+15	; 0x0f
    4590:	b8 89       	ldd	r27, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    4592:	0c 15       	cp	r16, r12
    4594:	1d 05       	cpc	r17, r13
    4596:	2e 05       	cpc	r18, r14
    4598:	3f 05       	cpc	r19, r15
    459a:	f0 f1       	brcs	.+124    	; 0x4618 <nrk_time_sub+0xf0>
if(low.secs==high.secs)
    459c:	c0 16       	cp	r12, r16
    459e:	d1 06       	cpc	r13, r17
    45a0:	e2 06       	cpc	r14, r18
    45a2:	f3 06       	cpc	r15, r19
    45a4:	91 f4       	brne	.+36     	; 0x45ca <nrk_time_sub+0xa2>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    45a6:	48 17       	cp	r20, r24
    45a8:	59 07       	cpc	r21, r25
    45aa:	6a 07       	cpc	r22, r26
    45ac:	7b 07       	cpc	r23, r27
    45ae:	a0 f1       	brcs	.+104    	; 0x4618 <nrk_time_sub+0xf0>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    45b0:	48 1b       	sub	r20, r24
    45b2:	59 0b       	sbc	r21, r25
    45b4:	6a 0b       	sbc	r22, r26
    45b6:	7b 0b       	sbc	r23, r27
    45b8:	44 83       	std	Z+4, r20	; 0x04
    45ba:	55 83       	std	Z+5, r21	; 0x05
    45bc:	66 83       	std	Z+6, r22	; 0x06
    45be:	77 83       	std	Z+7, r23	; 0x07
	result->secs=0;
    45c0:	10 82       	st	Z, r1
    45c2:	11 82       	std	Z+1, r1	; 0x01
    45c4:	12 82       	std	Z+2, r1	; 0x02
    45c6:	13 82       	std	Z+3, r1	; 0x03
    45c8:	25 c0       	rjmp	.+74     	; 0x4614 <nrk_time_sub+0xec>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    45ca:	48 17       	cp	r20, r24
    45cc:	59 07       	cpc	r21, r25
    45ce:	6a 07       	cpc	r22, r26
    45d0:	7b 07       	cpc	r23, r27
    45d2:	80 f4       	brcc	.+32     	; 0x45f4 <nrk_time_sub+0xcc>
{
	high.secs--;
    45d4:	01 50       	subi	r16, 0x01	; 1
    45d6:	11 09       	sbc	r17, r1
    45d8:	21 09       	sbc	r18, r1
    45da:	31 09       	sbc	r19, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    45dc:	0c 19       	sub	r16, r12
    45de:	1d 09       	sbc	r17, r13
    45e0:	2e 09       	sbc	r18, r14
    45e2:	3f 09       	sbc	r19, r15
    45e4:	00 83       	st	Z, r16
    45e6:	11 83       	std	Z+1, r17	; 0x01
    45e8:	22 83       	std	Z+2, r18	; 0x02
    45ea:	33 83       	std	Z+3, r19	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    45ec:	56 53       	subi	r21, 0x36	; 54
    45ee:	65 46       	sbci	r22, 0x65	; 101
    45f0:	74 4c       	sbci	r23, 0xC4	; 196
    45f2:	08 c0       	rjmp	.+16     	; 0x4604 <nrk_time_sub+0xdc>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    45f4:	0c 19       	sub	r16, r12
    45f6:	1d 09       	sbc	r17, r13
    45f8:	2e 09       	sbc	r18, r14
    45fa:	3f 09       	sbc	r19, r15
    45fc:	00 83       	st	Z, r16
    45fe:	11 83       	std	Z+1, r17	; 0x01
    4600:	22 83       	std	Z+2, r18	; 0x02
    4602:	33 83       	std	Z+3, r19	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    4604:	48 1b       	sub	r20, r24
    4606:	59 0b       	sbc	r21, r25
    4608:	6a 0b       	sbc	r22, r26
    460a:	7b 0b       	sbc	r23, r27
    460c:	44 83       	std	Z+4, r20	; 0x04
    460e:	55 83       	std	Z+5, r21	; 0x05
    4610:	66 83       	std	Z+6, r22	; 0x06
    4612:	77 83       	std	Z+7, r23	; 0x07
return NRK_OK;
    4614:	81 e0       	ldi	r24, 0x01	; 1
    4616:	01 c0       	rjmp	.+2      	; 0x461a <nrk_time_sub+0xf2>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    4618:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    461a:	60 96       	adiw	r28, 0x10	; 16
    461c:	0f b6       	in	r0, 0x3f	; 63
    461e:	f8 94       	cli
    4620:	de bf       	out	0x3e, r29	; 62
    4622:	0f be       	out	0x3f, r0	; 63
    4624:	cd bf       	out	0x3d, r28	; 61
    4626:	df 91       	pop	r29
    4628:	cf 91       	pop	r28
    462a:	1f 91       	pop	r17
    462c:	0f 91       	pop	r16
    462e:	ff 90       	pop	r15
    4630:	ef 90       	pop	r14
    4632:	df 90       	pop	r13
    4634:	cf 90       	pop	r12
    4636:	bf 90       	pop	r11
    4638:	af 90       	pop	r10
    463a:	9f 90       	pop	r9
    463c:	8f 90       	pop	r8
    463e:	08 95       	ret

00004640 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    4640:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    4642:	44 81       	ldd	r20, Z+4	; 0x04
    4644:	55 81       	ldd	r21, Z+5	; 0x05
    4646:	66 81       	ldd	r22, Z+6	; 0x06
    4648:	77 81       	ldd	r23, Z+7	; 0x07
    464a:	41 15       	cp	r20, r1
    464c:	8a ec       	ldi	r24, 0xCA	; 202
    464e:	58 07       	cpc	r21, r24
    4650:	8a e9       	ldi	r24, 0x9A	; 154
    4652:	68 07       	cpc	r22, r24
    4654:	8b e3       	ldi	r24, 0x3B	; 59
    4656:	78 07       	cpc	r23, r24
    4658:	98 f0       	brcs	.+38     	; 0x4680 <nrk_time_compact_nanos+0x40>
    {
    t->nano_secs-=NANOS_PER_SEC;
    465a:	5a 5c       	subi	r21, 0xCA	; 202
    465c:	6a 49       	sbci	r22, 0x9A	; 154
    465e:	7b 43       	sbci	r23, 0x3B	; 59
    4660:	44 83       	std	Z+4, r20	; 0x04
    4662:	55 83       	std	Z+5, r21	; 0x05
    4664:	66 83       	std	Z+6, r22	; 0x06
    4666:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    4668:	80 81       	ld	r24, Z
    466a:	91 81       	ldd	r25, Z+1	; 0x01
    466c:	a2 81       	ldd	r26, Z+2	; 0x02
    466e:	b3 81       	ldd	r27, Z+3	; 0x03
    4670:	01 96       	adiw	r24, 0x01	; 1
    4672:	a1 1d       	adc	r26, r1
    4674:	b1 1d       	adc	r27, r1
    4676:	80 83       	st	Z, r24
    4678:	91 83       	std	Z+1, r25	; 0x01
    467a:	a2 83       	std	Z+2, r26	; 0x02
    467c:	b3 83       	std	Z+3, r27	; 0x03
    467e:	e1 cf       	rjmp	.-62     	; 0x4642 <nrk_time_compact_nanos+0x2>
    }
}
    4680:	08 95       	ret

00004682 <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    4682:	8f 92       	push	r8
    4684:	9f 92       	push	r9
    4686:	af 92       	push	r10
    4688:	bf 92       	push	r11
    468a:	cf 92       	push	r12
    468c:	df 92       	push	r13
    468e:	ef 92       	push	r14
    4690:	ff 92       	push	r15
    4692:	0f 93       	push	r16
    4694:	1f 93       	push	r17
    4696:	cf 93       	push	r28
    4698:	df 93       	push	r29
    469a:	cd b7       	in	r28, 0x3d	; 61
    469c:	de b7       	in	r29, 0x3e	; 62
    469e:	60 97       	sbiw	r28, 0x10	; 16
    46a0:	0f b6       	in	r0, 0x3f	; 63
    46a2:	f8 94       	cli
    46a4:	de bf       	out	0x3e, r29	; 62
    46a6:	0f be       	out	0x3f, r0	; 63
    46a8:	cd bf       	out	0x3d, r28	; 61
    46aa:	09 83       	std	Y+1, r16	; 0x01
    46ac:	1a 83       	std	Y+2, r17	; 0x02
    46ae:	2b 83       	std	Y+3, r18	; 0x03
    46b0:	3c 83       	std	Y+4, r19	; 0x04
    46b2:	4d 83       	std	Y+5, r20	; 0x05
    46b4:	5e 83       	std	Y+6, r21	; 0x06
    46b6:	6f 83       	std	Y+7, r22	; 0x07
    46b8:	78 87       	std	Y+8, r23	; 0x08
    46ba:	89 86       	std	Y+9, r8	; 0x09
    46bc:	9a 86       	std	Y+10, r9	; 0x0a
    46be:	ab 86       	std	Y+11, r10	; 0x0b
    46c0:	bc 86       	std	Y+12, r11	; 0x0c
    46c2:	cd 86       	std	Y+13, r12	; 0x0d
    46c4:	de 86       	std	Y+14, r13	; 0x0e
    46c6:	ef 86       	std	Y+15, r14	; 0x0f
    46c8:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    46ca:	09 85       	ldd	r16, Y+9	; 0x09
    46cc:	1a 85       	ldd	r17, Y+10	; 0x0a
    46ce:	2b 85       	ldd	r18, Y+11	; 0x0b
    46d0:	3c 85       	ldd	r19, Y+12	; 0x0c
    46d2:	49 81       	ldd	r20, Y+1	; 0x01
    46d4:	5a 81       	ldd	r21, Y+2	; 0x02
    46d6:	6b 81       	ldd	r22, Y+3	; 0x03
    46d8:	7c 81       	ldd	r23, Y+4	; 0x04
    46da:	40 0f       	add	r20, r16
    46dc:	51 1f       	adc	r21, r17
    46de:	62 1f       	adc	r22, r18
    46e0:	73 1f       	adc	r23, r19
    46e2:	fc 01       	movw	r30, r24
    46e4:	40 83       	st	Z, r20
    46e6:	51 83       	std	Z+1, r21	; 0x01
    46e8:	62 83       	std	Z+2, r22	; 0x02
    46ea:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    46ec:	0d 85       	ldd	r16, Y+13	; 0x0d
    46ee:	1e 85       	ldd	r17, Y+14	; 0x0e
    46f0:	2f 85       	ldd	r18, Y+15	; 0x0f
    46f2:	38 89       	ldd	r19, Y+16	; 0x10
    46f4:	4d 81       	ldd	r20, Y+5	; 0x05
    46f6:	5e 81       	ldd	r21, Y+6	; 0x06
    46f8:	6f 81       	ldd	r22, Y+7	; 0x07
    46fa:	78 85       	ldd	r23, Y+8	; 0x08
    46fc:	40 0f       	add	r20, r16
    46fe:	51 1f       	adc	r21, r17
    4700:	62 1f       	adc	r22, r18
    4702:	73 1f       	adc	r23, r19
    4704:	44 83       	std	Z+4, r20	; 0x04
    4706:	55 83       	std	Z+5, r21	; 0x05
    4708:	66 83       	std	Z+6, r22	; 0x06
    470a:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    470c:	0e 94 20 23 	call	0x4640	; 0x4640 <nrk_time_compact_nanos>
return NRK_OK;
}
    4710:	81 e0       	ldi	r24, 0x01	; 1
    4712:	60 96       	adiw	r28, 0x10	; 16
    4714:	0f b6       	in	r0, 0x3f	; 63
    4716:	f8 94       	cli
    4718:	de bf       	out	0x3e, r29	; 62
    471a:	0f be       	out	0x3f, r0	; 63
    471c:	cd bf       	out	0x3d, r28	; 61
    471e:	df 91       	pop	r29
    4720:	cf 91       	pop	r28
    4722:	1f 91       	pop	r17
    4724:	0f 91       	pop	r16
    4726:	ff 90       	pop	r15
    4728:	ef 90       	pop	r14
    472a:	df 90       	pop	r13
    472c:	cf 90       	pop	r12
    472e:	bf 90       	pop	r11
    4730:	af 90       	pop	r10
    4732:	9f 90       	pop	r9
    4734:	8f 90       	pop	r8
    4736:	08 95       	ret

00004738 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    4738:	ea e3       	ldi	r30, 0x3A	; 58
    473a:	f7 e0       	ldi	r31, 0x07	; 7
    473c:	60 83       	st	Z, r22
    473e:	71 83       	std	Z+1, r23	; 0x01
    4740:	82 83       	std	Z+2, r24	; 0x02
    4742:	93 83       	std	Z+3, r25	; 0x03
  nrk_system_time.nano_secs=nano_secs;
    4744:	24 83       	std	Z+4, r18	; 0x04
    4746:	35 83       	std	Z+5, r19	; 0x05
    4748:	46 83       	std	Z+6, r20	; 0x06
    474a:	57 83       	std	Z+7, r21	; 0x07
    474c:	08 95       	ret

0000474e <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    474e:	2f 92       	push	r2
    4750:	3f 92       	push	r3
    4752:	4f 92       	push	r4
    4754:	5f 92       	push	r5
    4756:	6f 92       	push	r6
    4758:	7f 92       	push	r7
    475a:	8f 92       	push	r8
    475c:	9f 92       	push	r9
    475e:	af 92       	push	r10
    4760:	bf 92       	push	r11
    4762:	cf 92       	push	r12
    4764:	df 92       	push	r13
    4766:	ef 92       	push	r14
    4768:	ff 92       	push	r15
    476a:	0f 93       	push	r16
    476c:	1f 93       	push	r17
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    476e:	fc 01       	movw	r30, r24
    4770:	c0 80       	ld	r12, Z
    4772:	d1 80       	ldd	r13, Z+1	; 0x01
    4774:	e2 80       	ldd	r14, Z+2	; 0x02
    4776:	f3 80       	ldd	r15, Z+3	; 0x03
    4778:	64 81       	ldd	r22, Z+4	; 0x04
    477a:	75 81       	ldd	r23, Z+5	; 0x05
    477c:	86 81       	ldd	r24, Z+6	; 0x06
    477e:	97 81       	ldd	r25, Z+7	; 0x07
    4780:	c1 14       	cp	r12, r1
    4782:	d1 04       	cpc	r13, r1
    4784:	e1 04       	cpc	r14, r1
    4786:	f1 04       	cpc	r15, r1
    4788:	c1 f1       	breq	.+112    	; 0x47fa <_nrk_time_to_ticks+0xac>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    478a:	f2 e4       	ldi	r31, 0x42	; 66
    478c:	cf 16       	cp	r12, r31
    478e:	d1 04       	cpc	r13, r1
    4790:	e1 04       	cpc	r14, r1
    4792:	f1 04       	cpc	r15, r1
    4794:	d0 f5       	brcc	.+116    	; 0x480a <_nrk_time_to_ticks+0xbc>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    4796:	1b 01       	movw	r2, r22
    4798:	2c 01       	movw	r4, r24
    479a:	61 2c       	mov	r6, r1
    479c:	71 2c       	mov	r7, r1
    479e:	43 01       	movw	r8, r6
    47a0:	e0 e0       	ldi	r30, 0x00	; 0
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    47a2:	8e 2f       	mov	r24, r30
    47a4:	90 e0       	ldi	r25, 0x00	; 0
    47a6:	a0 e0       	ldi	r26, 0x00	; 0
    47a8:	b0 e0       	ldi	r27, 0x00	; 0
    47aa:	8c 15       	cp	r24, r12
    47ac:	9d 05       	cpc	r25, r13
    47ae:	ae 05       	cpc	r26, r14
    47b0:	bf 05       	cpc	r27, r15
    47b2:	88 f4       	brcc	.+34     	; 0x47d6 <_nrk_time_to_ticks+0x88>
    47b4:	91 01       	movw	r18, r2
    47b6:	a2 01       	movw	r20, r4
    47b8:	b3 01       	movw	r22, r6
    47ba:	c4 01       	movw	r24, r8
    47bc:	36 53       	subi	r19, 0x36	; 54
    47be:	45 46       	sbci	r20, 0x65	; 101
    47c0:	54 4c       	sbci	r21, 0xC4	; 196
    47c2:	6f 4f       	sbci	r22, 0xFF	; 255
    47c4:	7f 4f       	sbci	r23, 0xFF	; 255
    47c6:	8f 4f       	sbci	r24, 0xFF	; 255
    47c8:	9f 4f       	sbci	r25, 0xFF	; 255
    47ca:	19 01       	movw	r2, r18
    47cc:	2a 01       	movw	r4, r20
    47ce:	3b 01       	movw	r6, r22
    47d0:	4c 01       	movw	r8, r24
    47d2:	ef 5f       	subi	r30, 0xFF	; 255
    47d4:	e6 cf       	rjmp	.-52     	; 0x47a2 <_nrk_time_to_ticks+0x54>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    47d6:	83 eb       	ldi	r24, 0xB3	; 179
    47d8:	a8 2e       	mov	r10, r24
    47da:	96 ee       	ldi	r25, 0xE6	; 230
    47dc:	b9 2e       	mov	r11, r25
    47de:	2e e0       	ldi	r18, 0x0E	; 14
    47e0:	c2 2e       	mov	r12, r18
    47e2:	d1 2c       	mov	r13, r1
    47e4:	e1 2c       	mov	r14, r1
    47e6:	f1 2c       	mov	r15, r1
    47e8:	00 e0       	ldi	r16, 0x00	; 0
    47ea:	10 e0       	ldi	r17, 0x00	; 0
    47ec:	91 01       	movw	r18, r2
    47ee:	a2 01       	movw	r20, r4
    47f0:	b3 01       	movw	r22, r6
    47f2:	c4 01       	movw	r24, r8
    47f4:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <__udivdi3>
    47f8:	06 c0       	rjmp	.+12     	; 0x4806 <_nrk_time_to_ticks+0xb8>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    47fa:	23 eb       	ldi	r18, 0xB3	; 179
    47fc:	36 ee       	ldi	r19, 0xE6	; 230
    47fe:	4e e0       	ldi	r20, 0x0E	; 14
    4800:	50 e0       	ldi	r21, 0x00	; 0
    4802:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__udivmodsi4>
    4806:	c9 01       	movw	r24, r18
    4808:	02 c0       	rjmp	.+4      	; 0x480e <_nrk_time_to_ticks+0xc0>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    480a:	80 e0       	ldi	r24, 0x00	; 0
    480c:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    480e:	1f 91       	pop	r17
    4810:	0f 91       	pop	r16
    4812:	ff 90       	pop	r15
    4814:	ef 90       	pop	r14
    4816:	df 90       	pop	r13
    4818:	cf 90       	pop	r12
    481a:	bf 90       	pop	r11
    481c:	af 90       	pop	r10
    481e:	9f 90       	pop	r9
    4820:	8f 90       	pop	r8
    4822:	7f 90       	pop	r7
    4824:	6f 90       	pop	r6
    4826:	5f 90       	pop	r5
    4828:	4f 90       	pop	r4
    482a:	3f 90       	pop	r3
    482c:	2f 90       	pop	r2
    482e:	08 95       	ret

00004830 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    4830:	cf 92       	push	r12
    4832:	df 92       	push	r13
    4834:	ef 92       	push	r14
    4836:	ff 92       	push	r15
    4838:	cf 93       	push	r28
    483a:	df 93       	push	r29
    483c:	cd b7       	in	r28, 0x3d	; 61
    483e:	de b7       	in	r29, 0x3e	; 62
    4840:	28 97       	sbiw	r28, 0x08	; 8
    4842:	0f b6       	in	r0, 0x3f	; 63
    4844:	f8 94       	cli
    4846:	de bf       	out	0x3e, r29	; 62
    4848:	0f be       	out	0x3f, r0	; 63
    484a:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    484c:	6b 01       	movw	r12, r22
    484e:	7c 01       	movw	r14, r24
    4850:	2a e0       	ldi	r18, 0x0A	; 10
    4852:	f6 94       	lsr	r15
    4854:	e7 94       	ror	r14
    4856:	d7 94       	ror	r13
    4858:	c7 94       	ror	r12
    485a:	2a 95       	dec	r18
    485c:	d1 f7       	brne	.-12     	; 0x4852 <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    485e:	c9 82       	std	Y+1, r12	; 0x01
    4860:	da 82       	std	Y+2, r13	; 0x02
    4862:	eb 82       	std	Y+3, r14	; 0x03
    4864:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    4866:	9b 01       	movw	r18, r22
    4868:	ac 01       	movw	r20, r24
    486a:	33 70       	andi	r19, 0x03	; 3
    486c:	44 27       	eor	r20, r20
    486e:	55 27       	eor	r21, r21
    4870:	63 eb       	ldi	r22, 0xB3	; 179
    4872:	76 ee       	ldi	r23, 0xE6	; 230
    4874:	8e e0       	ldi	r24, 0x0E	; 14
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <__mulsi3>

return t;
    487c:	2c 2d       	mov	r18, r12
    487e:	3a 81       	ldd	r19, Y+2	; 0x02
    4880:	4b 81       	ldd	r20, Y+3	; 0x03
    4882:	5c 81       	ldd	r21, Y+4	; 0x04
}
    4884:	28 96       	adiw	r28, 0x08	; 8
    4886:	0f b6       	in	r0, 0x3f	; 63
    4888:	f8 94       	cli
    488a:	de bf       	out	0x3e, r29	; 62
    488c:	0f be       	out	0x3f, r0	; 63
    488e:	cd bf       	out	0x3d, r28	; 61
    4890:	df 91       	pop	r29
    4892:	cf 91       	pop	r28
    4894:	ff 90       	pop	r15
    4896:	ef 90       	pop	r14
    4898:	df 90       	pop	r13
    489a:	cf 90       	pop	r12
    489c:	08 95       	ret

0000489e <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    489e:	2f 92       	push	r2
    48a0:	3f 92       	push	r3
    48a2:	4f 92       	push	r4
    48a4:	5f 92       	push	r5
    48a6:	6f 92       	push	r6
    48a8:	7f 92       	push	r7
    48aa:	8f 92       	push	r8
    48ac:	9f 92       	push	r9
    48ae:	af 92       	push	r10
    48b0:	bf 92       	push	r11
    48b2:	cf 92       	push	r12
    48b4:	df 92       	push	r13
    48b6:	ef 92       	push	r14
    48b8:	ff 92       	push	r15
    48ba:	0f 93       	push	r16
    48bc:	1f 93       	push	r17
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    48be:	fc 01       	movw	r30, r24
    48c0:	c0 80       	ld	r12, Z
    48c2:	d1 80       	ldd	r13, Z+1	; 0x01
    48c4:	e2 80       	ldd	r14, Z+2	; 0x02
    48c6:	f3 80       	ldd	r15, Z+3	; 0x03
    48c8:	64 81       	ldd	r22, Z+4	; 0x04
    48ca:	75 81       	ldd	r23, Z+5	; 0x05
    48cc:	86 81       	ldd	r24, Z+6	; 0x06
    48ce:	97 81       	ldd	r25, Z+7	; 0x07
    48d0:	c1 14       	cp	r12, r1
    48d2:	d1 04       	cpc	r13, r1
    48d4:	e1 04       	cpc	r14, r1
    48d6:	f1 04       	cpc	r15, r1
    48d8:	99 f1       	breq	.+102    	; 0x4940 <_nrk_time_to_ticks_long+0xa2>
{
   tmp=t->nano_secs;
    48da:	1b 01       	movw	r2, r22
    48dc:	2c 01       	movw	r4, r24
    48de:	61 2c       	mov	r6, r1
    48e0:	71 2c       	mov	r7, r1
    48e2:	43 01       	movw	r8, r6
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    48e4:	e0 e0       	ldi	r30, 0x00	; 0
    48e6:	8e 2f       	mov	r24, r30
    48e8:	90 e0       	ldi	r25, 0x00	; 0
    48ea:	a0 e0       	ldi	r26, 0x00	; 0
    48ec:	b0 e0       	ldi	r27, 0x00	; 0
    48ee:	8c 15       	cp	r24, r12
    48f0:	9d 05       	cpc	r25, r13
    48f2:	ae 05       	cpc	r26, r14
    48f4:	bf 05       	cpc	r27, r15
    48f6:	88 f4       	brcc	.+34     	; 0x491a <_nrk_time_to_ticks_long+0x7c>
    48f8:	91 01       	movw	r18, r2
    48fa:	a2 01       	movw	r20, r4
    48fc:	b3 01       	movw	r22, r6
    48fe:	c4 01       	movw	r24, r8
    4900:	36 53       	subi	r19, 0x36	; 54
    4902:	45 46       	sbci	r20, 0x65	; 101
    4904:	54 4c       	sbci	r21, 0xC4	; 196
    4906:	6f 4f       	sbci	r22, 0xFF	; 255
    4908:	7f 4f       	sbci	r23, 0xFF	; 255
    490a:	8f 4f       	sbci	r24, 0xFF	; 255
    490c:	9f 4f       	sbci	r25, 0xFF	; 255
    490e:	19 01       	movw	r2, r18
    4910:	2a 01       	movw	r4, r20
    4912:	3b 01       	movw	r6, r22
    4914:	4c 01       	movw	r8, r24
    4916:	ef 5f       	subi	r30, 0xFF	; 255
    4918:	e6 cf       	rjmp	.-52     	; 0x48e6 <_nrk_time_to_ticks_long+0x48>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    491a:	83 eb       	ldi	r24, 0xB3	; 179
    491c:	a8 2e       	mov	r10, r24
    491e:	96 ee       	ldi	r25, 0xE6	; 230
    4920:	b9 2e       	mov	r11, r25
    4922:	2e e0       	ldi	r18, 0x0E	; 14
    4924:	c2 2e       	mov	r12, r18
    4926:	d1 2c       	mov	r13, r1
    4928:	e1 2c       	mov	r14, r1
    492a:	f1 2c       	mov	r15, r1
    492c:	00 e0       	ldi	r16, 0x00	; 0
    492e:	10 e0       	ldi	r17, 0x00	; 0
    4930:	91 01       	movw	r18, r2
    4932:	a2 01       	movw	r20, r4
    4934:	b3 01       	movw	r22, r6
    4936:	c4 01       	movw	r24, r8
    4938:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <__udivdi3>
    493c:	ca 01       	movw	r24, r20
    493e:	07 c0       	rjmp	.+14     	; 0x494e <_nrk_time_to_ticks_long+0xb0>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4940:	23 eb       	ldi	r18, 0xB3	; 179
    4942:	36 ee       	ldi	r19, 0xE6	; 230
    4944:	4e e0       	ldi	r20, 0x0E	; 14
    4946:	50 e0       	ldi	r21, 0x00	; 0
    4948:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__udivmodsi4>
    494c:	ca 01       	movw	r24, r20
}
return ticks;
}
    494e:	b9 01       	movw	r22, r18
    4950:	1f 91       	pop	r17
    4952:	0f 91       	pop	r16
    4954:	ff 90       	pop	r15
    4956:	ef 90       	pop	r14
    4958:	df 90       	pop	r13
    495a:	cf 90       	pop	r12
    495c:	bf 90       	pop	r11
    495e:	af 90       	pop	r10
    4960:	9f 90       	pop	r9
    4962:	8f 90       	pop	r8
    4964:	7f 90       	pop	r7
    4966:	6f 90       	pop	r6
    4968:	5f 90       	pop	r5
    496a:	4f 90       	pop	r4
    496c:	3f 90       	pop	r3
    496e:	2f 90       	pop	r2
    4970:	08 95       	ret

00004972 <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    4972:	c2 e0       	ldi	r28, 0x02	; 2
{
  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    4974:	d1 e0       	ldi	r29, 0x01	; 1
{
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{
  nrk_stack_check(); 
    4976:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    497a:	0e 94 69 29 	call	0x52d2	; 0x52d2 <_nrk_get_next_wakeup>
    497e:	84 30       	cpi	r24, 0x04	; 4
    4980:	28 f4       	brcc	.+10     	; 0x498c <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    4982:	d0 93 37 07 	sts	0x0737, r29
	    nrk_idle();
    4986:	0e 94 77 2c 	call	0x58ee	; 0x58ee <nrk_idle>
    498a:	08 c0       	rjmp	.+16     	; 0x499c <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    498c:	8a e0       	ldi	r24, 0x0A	; 10
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	0e 94 81 28 	call	0x5102	; 0x5102 <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    4994:	c0 93 37 07 	sts	0x0737, r28
	    nrk_sleep();
    4998:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    499c:	80 91 9b 05 	lds	r24, 0x059B
    49a0:	85 35       	cpi	r24, 0x55	; 85
    49a2:	19 f0       	breq	.+6      	; 0x49aa <nrk_idle_task+0x38>
    49a4:	88 e0       	ldi	r24, 0x08	; 8
    49a6:	0e 94 bc 18 	call	0x3178	; 0x3178 <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    49aa:	80 91 7e 41 	lds	r24, 0x417E
    49ae:	85 35       	cpi	r24, 0x55	; 85
    49b0:	11 f3       	breq	.-60     	; 0x4976 <nrk_idle_task+0x4>
    49b2:	88 e0       	ldi	r24, 0x08	; 8
    49b4:	0e 94 bc 18 	call	0x3178	; 0x3178 <nrk_error_add>
    49b8:	de cf       	rjmp	.-68     	; 0x4976 <nrk_idle_task+0x4>

000049ba <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    49ba:	2f 92       	push	r2
    49bc:	3f 92       	push	r3
    49be:	4f 92       	push	r4
    49c0:	5f 92       	push	r5
    49c2:	6f 92       	push	r6
    49c4:	7f 92       	push	r7
    49c6:	8f 92       	push	r8
    49c8:	9f 92       	push	r9
    49ca:	af 92       	push	r10
    49cc:	bf 92       	push	r11
    49ce:	cf 92       	push	r12
    49d0:	df 92       	push	r13
    49d2:	ef 92       	push	r14
    49d4:	ff 92       	push	r15
    49d6:	0f 93       	push	r16
    49d8:	1f 93       	push	r17
    49da:	cf 93       	push	r28
    49dc:	df 93       	push	r29
    49de:	00 d0       	rcall	.+0      	; 0x49e0 <_nrk_scheduler+0x26>
    49e0:	00 d0       	rcall	.+0      	; 0x49e2 <_nrk_scheduler+0x28>
    49e2:	cd b7       	in	r28, 0x3d	; 61
    49e4:	de b7       	in	r29, 0x3e	; 62

    //nrk_int_enable();   // this should be removed...  Not needed


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_precision_os_timer_reset();
    49e6:	0e 94 9d 28 	call	0x513a	; 0x513a <_nrk_precision_os_timer_reset>
    _nrk_high_speed_timer_reset();
    49ea:	0e 94 bb 28 	call	0x5176	; 0x5176 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    49ee:	0e 94 c3 28 	call	0x5186	; 0x5186 <_nrk_high_speed_timer_get>
    49f2:	1c 01       	movw	r2, r24
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    49f4:	8a ef       	ldi	r24, 0xFA	; 250
    49f6:	0e 94 6d 29 	call	0x52da	; 0x52da <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    49fa:	a0 91 99 05 	lds	r26, 0x0599
    49fe:	b0 e0       	ldi	r27, 0x00	; 0
    4a00:	23 eb       	ldi	r18, 0xB3	; 179
    4a02:	36 ee       	ldi	r19, 0xE6	; 230
    4a04:	4e e0       	ldi	r20, 0x0E	; 14
    4a06:	50 e0       	ldi	r21, 0x00	; 0
    4a08:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__muluhisi3>
    4a0c:	00 91 3e 07 	lds	r16, 0x073E
    4a10:	10 91 3f 07 	lds	r17, 0x073F
    4a14:	20 91 40 07 	lds	r18, 0x0740
    4a18:	30 91 41 07 	lds	r19, 0x0741
    4a1c:	6b 01       	movw	r12, r22
    4a1e:	7c 01       	movw	r14, r24
    4a20:	c0 0e       	add	r12, r16
    4a22:	d1 1e       	adc	r13, r17
    4a24:	e2 1e       	adc	r14, r18
    4a26:	f3 1e       	adc	r15, r19
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4a28:	c7 01       	movw	r24, r14
    4a2a:	b6 01       	movw	r22, r12
    4a2c:	23 eb       	ldi	r18, 0xB3	; 179
    4a2e:	36 ee       	ldi	r19, 0xE6	; 230
    4a30:	4e e0       	ldi	r20, 0x0E	; 14
    4a32:	50 e0       	ldi	r21, 0x00	; 0
    4a34:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__udivmodsi4>
    4a38:	26 01       	movw	r4, r12
    4a3a:	37 01       	movw	r6, r14
    4a3c:	46 1a       	sub	r4, r22
    4a3e:	57 0a       	sbc	r5, r23
    4a40:	68 0a       	sbc	r6, r24
    4a42:	79 0a       	sbc	r7, r25
    4a44:	d3 01       	movw	r26, r6
    4a46:	c2 01       	movw	r24, r4
    4a48:	00 91 3a 07 	lds	r16, 0x073A
    4a4c:	10 91 3b 07 	lds	r17, 0x073B
    4a50:	20 91 3c 07 	lds	r18, 0x073C
    4a54:	30 91 3d 07 	lds	r19, 0x073D

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4a58:	43 eb       	ldi	r20, 0xB3	; 179
    4a5a:	84 2e       	mov	r8, r20
    4a5c:	46 ee       	ldi	r20, 0xE6	; 230
    4a5e:	94 2e       	mov	r9, r20
    4a60:	4e e0       	ldi	r20, 0x0E	; 14
    4a62:	a4 2e       	mov	r10, r20
    4a64:	b1 2c       	mov	r11, r1
    4a66:	68 01       	movw	r12, r16
    4a68:	79 01       	movw	r14, r18
    4a6a:	4f ef       	ldi	r20, 0xFF	; 255
    4a6c:	c4 1a       	sub	r12, r20
    4a6e:	d4 0a       	sbc	r13, r20
    4a70:	e4 0a       	sbc	r14, r20
    4a72:	f4 0a       	sbc	r15, r20
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    4a74:	81 15       	cp	r24, r1
    4a76:	5a ec       	ldi	r21, 0xCA	; 202
    4a78:	95 07       	cpc	r25, r21
    4a7a:	5a e9       	ldi	r21, 0x9A	; 154
    4a7c:	a5 07       	cpc	r26, r21
    4a7e:	5b e3       	ldi	r21, 0x3B	; 59
    4a80:	b5 07       	cpc	r27, r21
    4a82:	c8 f0       	brcs	.+50     	; 0x4ab6 <_nrk_scheduler+0xfc>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    4a84:	2c 01       	movw	r4, r24
    4a86:	3d 01       	movw	r6, r26
    4a88:	2a ec       	ldi	r18, 0xCA	; 202
    4a8a:	52 1a       	sub	r5, r18
    4a8c:	2a e9       	ldi	r18, 0x9A	; 154
    4a8e:	62 0a       	sbc	r6, r18
    4a90:	2b e3       	ldi	r18, 0x3B	; 59
    4a92:	72 0a       	sbc	r7, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4a94:	c3 01       	movw	r24, r6
    4a96:	b2 01       	movw	r22, r4
    4a98:	a5 01       	movw	r20, r10
    4a9a:	94 01       	movw	r18, r8
    4a9c:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__udivmodsi4>
    4aa0:	a3 01       	movw	r20, r6
    4aa2:	92 01       	movw	r18, r4
    4aa4:	26 1b       	sub	r18, r22
    4aa6:	37 0b       	sbc	r19, r23
    4aa8:	48 0b       	sbc	r20, r24
    4aaa:	59 0b       	sbc	r21, r25
    4aac:	da 01       	movw	r26, r20
    4aae:	c9 01       	movw	r24, r18
    4ab0:	97 01       	movw	r18, r14
    4ab2:	86 01       	movw	r16, r12
    4ab4:	d8 cf       	rjmp	.-80     	; 0x4a66 <_nrk_scheduler+0xac>
    4ab6:	80 93 3e 07 	sts	0x073E, r24
    4aba:	90 93 3f 07 	sts	0x073F, r25
    4abe:	a0 93 40 07 	sts	0x0740, r26
    4ac2:	b0 93 41 07 	sts	0x0741, r27
    4ac6:	00 93 3a 07 	sts	0x073A, r16
    4aca:	10 93 3b 07 	sts	0x073B, r17
    4ace:	20 93 3c 07 	sts	0x073C, r18
    4ad2:	30 93 3d 07 	sts	0x073D, r19
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    4ad6:	e0 91 43 07 	lds	r30, 0x0743
    4ada:	f0 91 44 07 	lds	r31, 0x0744
    4ade:	85 81       	ldd	r24, Z+5	; 0x05
    4ae0:	88 23       	and	r24, r24
    4ae2:	39 f1       	breq	.+78     	; 0x4b32 <_nrk_scheduler+0x178>
    4ae4:	81 85       	ldd	r24, Z+9	; 0x09
    4ae6:	84 30       	cpi	r24, 0x04	; 4
    4ae8:	21 f1       	breq	.+72     	; 0x4b32 <_nrk_scheduler+0x178>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    4aea:	87 81       	ldd	r24, Z+7	; 0x07
    4aec:	82 30       	cpi	r24, 0x02	; 2
    4aee:	29 f0       	breq	.+10     	; 0x4afa <_nrk_scheduler+0x140>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    4af0:	88 23       	and	r24, r24
    4af2:	41 f0       	breq	.+16     	; 0x4b04 <_nrk_scheduler+0x14a>
    4af4:	86 81       	ldd	r24, Z+6	; 0x06
    4af6:	81 11       	cpse	r24, r1
    4af8:	02 c0       	rjmp	.+4      	; 0x4afe <_nrk_scheduler+0x144>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    4afa:	85 e0       	ldi	r24, 0x05	; 5
    4afc:	01 c0       	rjmp	.+2      	; 0x4b00 <_nrk_scheduler+0x146>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4afe:	83 e0       	ldi	r24, 0x03	; 3
    4b00:	81 87       	std	Z+9, r24	; 0x09
    4b02:	14 c0       	rjmp	.+40     	; 0x4b2c <_nrk_scheduler+0x172>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4b04:	83 e0       	ldi	r24, 0x03	; 3
    4b06:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    4b08:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    4b0a:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    4b0c:	85 89       	ldd	r24, Z+21	; 0x15
    4b0e:	96 89       	ldd	r25, Z+22	; 0x16
    4b10:	a7 89       	ldd	r26, Z+23	; 0x17
    4b12:	b0 8d       	ldd	r27, Z+24	; 0x18
    4b14:	89 2b       	or	r24, r25
    4b16:	8a 2b       	or	r24, r26
    4b18:	8b 2b       	or	r24, r27
    4b1a:	41 f4       	brne	.+16     	; 0x4b2c <_nrk_scheduler+0x172>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    4b1c:	81 8d       	ldd	r24, Z+25	; 0x19
    4b1e:	92 8d       	ldd	r25, Z+26	; 0x1a
    4b20:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4b22:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4b24:	85 8b       	std	Z+21, r24	; 0x15
    4b26:	96 8b       	std	Z+22, r25	; 0x16
    4b28:	a7 8b       	std	Z+23, r26	; 0x17
    4b2a:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    4b2c:	80 85       	ldd	r24, Z+8	; 0x08
    4b2e:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    4b32:	e0 91 43 07 	lds	r30, 0x0743
    4b36:	f0 91 44 07 	lds	r31, 0x0744
    4b3a:	85 a1       	ldd	r24, Z+37	; 0x25
    4b3c:	96 a1       	ldd	r25, Z+38	; 0x26
    4b3e:	a7 a1       	ldd	r26, Z+39	; 0x27
    4b40:	b0 a5       	ldd	r27, Z+40	; 0x28
    4b42:	89 2b       	or	r24, r25
    4b44:	8a 2b       	or	r24, r26
    4b46:	8b 2b       	or	r24, r27
    4b48:	09 f4       	brne	.+2      	; 0x4b4c <_nrk_scheduler+0x192>
    4b4a:	44 c0       	rjmp	.+136    	; 0x4bd4 <_nrk_scheduler+0x21a>
    4b4c:	20 85       	ldd	r18, Z+8	; 0x08
    4b4e:	22 23       	and	r18, r18
    4b50:	09 f4       	brne	.+2      	; 0x4b54 <_nrk_scheduler+0x19a>
    4b52:	40 c0       	rjmp	.+128    	; 0x4bd4 <_nrk_scheduler+0x21a>
    4b54:	81 85       	ldd	r24, Z+9	; 0x09
    4b56:	84 30       	cpi	r24, 0x04	; 4
    4b58:	e9 f1       	breq	.+122    	; 0x4bd4 <_nrk_scheduler+0x21a>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    4b5a:	85 8d       	ldd	r24, Z+29	; 0x1d
    4b5c:	96 8d       	ldd	r25, Z+30	; 0x1e
    4b5e:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4b60:	b0 a1       	ldd	r27, Z+32	; 0x20
    4b62:	40 91 99 05 	lds	r20, 0x0599
    4b66:	50 e0       	ldi	r21, 0x00	; 0
    4b68:	60 e0       	ldi	r22, 0x00	; 0
    4b6a:	70 e0       	ldi	r23, 0x00	; 0
    4b6c:	84 17       	cp	r24, r20
    4b6e:	95 07       	cpc	r25, r21
    4b70:	a6 07       	cpc	r26, r22
    4b72:	b7 07       	cpc	r27, r23
    4b74:	68 f4       	brcc	.+26     	; 0x4b90 <_nrk_scheduler+0x1d6>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    4b76:	62 2f       	mov	r22, r18
    4b78:	82 e0       	ldi	r24, 0x02	; 2
    4b7a:	0e 94 ca 18 	call	0x3194	; 0x3194 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    4b7e:	e0 91 43 07 	lds	r30, 0x0743
    4b82:	f0 91 44 07 	lds	r31, 0x0744
    4b86:	15 8e       	std	Z+29, r1	; 0x1d
    4b88:	16 8e       	std	Z+30, r1	; 0x1e
    4b8a:	17 8e       	std	Z+31, r1	; 0x1f
    4b8c:	10 a2       	std	Z+32, r1	; 0x20
    4b8e:	08 c0       	rjmp	.+16     	; 0x4ba0 <_nrk_scheduler+0x1e6>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    4b90:	84 1b       	sub	r24, r20
    4b92:	95 0b       	sbc	r25, r21
    4b94:	a6 0b       	sbc	r26, r22
    4b96:	b7 0b       	sbc	r27, r23
    4b98:	85 8f       	std	Z+29, r24	; 0x1d
    4b9a:	96 8f       	std	Z+30, r25	; 0x1e
    4b9c:	a7 8f       	std	Z+31, r26	; 0x1f
    4b9e:	b0 a3       	std	Z+32, r27	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    4ba0:	e0 91 43 07 	lds	r30, 0x0743
    4ba4:	f0 91 44 07 	lds	r31, 0x0744
    4ba8:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    4baa:	85 8d       	ldd	r24, Z+29	; 0x1d
    4bac:	96 8d       	ldd	r25, Z+30	; 0x1e
    4bae:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4bb0:	b0 a1       	ldd	r27, Z+32	; 0x20
    4bb2:	89 2b       	or	r24, r25
    4bb4:	8a 2b       	or	r24, r26
    4bb6:	8b 2b       	or	r24, r27
    4bb8:	69 f4       	brne	.+26     	; 0x4bd4 <_nrk_scheduler+0x21a>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    4bba:	61 2f       	mov	r22, r17
    4bbc:	83 e0       	ldi	r24, 0x03	; 3
    4bbe:	0e 94 ca 18 	call	0x3194	; 0x3194 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4bc2:	e0 91 43 07 	lds	r30, 0x0743
    4bc6:	f0 91 44 07 	lds	r31, 0x0744
    4bca:	83 e0       	ldi	r24, 0x03	; 3
    4bcc:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    4bce:	81 2f       	mov	r24, r17
    4bd0:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <nrk_rem_from_readyQ>
    4bd4:	8d ed       	ldi	r24, 0xDD	; 221
    4bd6:	96 e0       	ldi	r25, 0x06	; 6
    4bd8:	9c 83       	std	Y+4, r25	; 0x04
    4bda:	8b 83       	std	Y+3, r24	; 0x03
    4bdc:	00 e6       	ldi	r16, 0x60	; 96
    4bde:	1a ee       	ldi	r17, 0xEA	; 234
    4be0:	19 82       	std	Y+1, r1	; 0x01
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4be2:	9a ef       	ldi	r25, 0xFA	; 250
    4be4:	c9 2e       	mov	r12, r25
    4be6:	d1 2c       	mov	r13, r1
    4be8:	e1 2c       	mov	r14, r1
    4bea:	f1 2c       	mov	r15, r1
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4bec:	81 2c       	mov	r8, r1
    4bee:	91 2c       	mov	r9, r1
    4bf0:	54 01       	movw	r10, r8
    4bf2:	83 94       	inc	r8
    4bf4:	eb 81       	ldd	r30, Y+3	; 0x03
    4bf6:	fc 81       	ldd	r31, Y+4	; 0x04
    4bf8:	31 97       	sbiw	r30, 0x01	; 1

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    4bfa:	80 81       	ld	r24, Z
    4bfc:	8f 3f       	cpi	r24, 0xFF	; 255
    4bfe:	09 f4       	brne	.+2      	; 0x4c02 <_nrk_scheduler+0x248>
    4c00:	00 c1       	rjmp	.+512    	; 0x4e02 <_nrk_scheduler+0x448>
    4c02:	eb 81       	ldd	r30, Y+3	; 0x03
    4c04:	fc 81       	ldd	r31, Y+4	; 0x04
    4c06:	34 97       	sbiw	r30, 0x04	; 4
        nrk_task_TCB[task_ID].suspend_flag=0;
    4c08:	10 82       	st	Z, r1
    4c0a:	eb 81       	ldd	r30, Y+3	; 0x03
    4c0c:	fc 81       	ldd	r31, Y+4	; 0x04
    4c0e:	f0 81       	ld	r31, Z
    4c10:	fa 83       	std	Y+2, r31	; 0x02
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    4c12:	88 23       	and	r24, r24
    4c14:	09 f4       	brne	.+2      	; 0x4c18 <_nrk_scheduler+0x25e>
    4c16:	68 c0       	rjmp	.+208    	; 0x4ce8 <_nrk_scheduler+0x32e>
    4c18:	f4 30       	cpi	r31, 0x04	; 4
    4c1a:	09 f4       	brne	.+2      	; 0x4c1e <_nrk_scheduler+0x264>
    4c1c:	f2 c0       	rjmp	.+484    	; 0x4e02 <_nrk_scheduler+0x448>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    4c1e:	eb 81       	ldd	r30, Y+3	; 0x03
    4c20:	fc 81       	ldd	r31, Y+4	; 0x04
    4c22:	44 84       	ldd	r4, Z+12	; 0x0c
    4c24:	55 84       	ldd	r5, Z+13	; 0x0d
    4c26:	66 84       	ldd	r6, Z+14	; 0x0e
    4c28:	77 84       	ldd	r7, Z+15	; 0x0f
    4c2a:	60 91 99 05 	lds	r22, 0x0599
    4c2e:	70 e0       	ldi	r23, 0x00	; 0
    4c30:	80 e0       	ldi	r24, 0x00	; 0
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	46 16       	cp	r4, r22
    4c36:	57 06       	cpc	r5, r23
    4c38:	68 06       	cpc	r6, r24
    4c3a:	79 06       	cpc	r7, r25
    4c3c:	48 f0       	brcs	.+18     	; 0x4c50 <_nrk_scheduler+0x296>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    4c3e:	46 1a       	sub	r4, r22
    4c40:	57 0a       	sbc	r5, r23
    4c42:	68 0a       	sbc	r6, r24
    4c44:	79 0a       	sbc	r7, r25
    4c46:	44 86       	std	Z+12, r4	; 0x0c
    4c48:	55 86       	std	Z+13, r5	; 0x0d
    4c4a:	66 86       	std	Z+14, r6	; 0x0e
    4c4c:	77 86       	std	Z+15, r7	; 0x0f
    4c4e:	06 c0       	rjmp	.+12     	; 0x4c5c <_nrk_scheduler+0x2a2>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    4c50:	eb 81       	ldd	r30, Y+3	; 0x03
    4c52:	fc 81       	ldd	r31, Y+4	; 0x04
    4c54:	14 86       	std	Z+12, r1	; 0x0c
    4c56:	15 86       	std	Z+13, r1	; 0x0d
    4c58:	16 86       	std	Z+14, r1	; 0x0e
    4c5a:	17 86       	std	Z+15, r1	; 0x0f
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    4c5c:	eb 81       	ldd	r30, Y+3	; 0x03
    4c5e:	fc 81       	ldd	r31, Y+4	; 0x04
    4c60:	40 88       	ldd	r4, Z+16	; 0x10
    4c62:	51 88       	ldd	r5, Z+17	; 0x11
    4c64:	62 88       	ldd	r6, Z+18	; 0x12
    4c66:	73 88       	ldd	r7, Z+19	; 0x13
    4c68:	46 16       	cp	r4, r22
    4c6a:	57 06       	cpc	r5, r23
    4c6c:	68 06       	cpc	r6, r24
    4c6e:	79 06       	cpc	r7, r25
    4c70:	48 f0       	brcs	.+18     	; 0x4c84 <_nrk_scheduler+0x2ca>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    4c72:	a3 01       	movw	r20, r6
    4c74:	92 01       	movw	r18, r4
    4c76:	26 1b       	sub	r18, r22
    4c78:	37 0b       	sbc	r19, r23
    4c7a:	48 0b       	sbc	r20, r24
    4c7c:	59 0b       	sbc	r21, r25
    4c7e:	da 01       	movw	r26, r20
    4c80:	c9 01       	movw	r24, r18
    4c82:	13 c0       	rjmp	.+38     	; 0x4caa <_nrk_scheduler+0x2f0>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    4c84:	eb 81       	ldd	r30, Y+3	; 0x03
    4c86:	fc 81       	ldd	r31, Y+4	; 0x04
    4c88:	20 8d       	ldd	r18, Z+24	; 0x18
    4c8a:	31 8d       	ldd	r19, Z+25	; 0x19
    4c8c:	42 8d       	ldd	r20, Z+26	; 0x1a
    4c8e:	53 8d       	ldd	r21, Z+27	; 0x1b
    4c90:	62 17       	cp	r22, r18
    4c92:	73 07       	cpc	r23, r19
    4c94:	84 07       	cpc	r24, r20
    4c96:	95 07       	cpc	r25, r21
    4c98:	68 f4       	brcc	.+26     	; 0x4cb4 <_nrk_scheduler+0x2fa>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    4c9a:	29 01       	movw	r4, r18
    4c9c:	3a 01       	movw	r6, r20
    4c9e:	46 1a       	sub	r4, r22
    4ca0:	57 0a       	sbc	r5, r23
    4ca2:	68 0a       	sbc	r6, r24
    4ca4:	79 0a       	sbc	r7, r25
    4ca6:	d3 01       	movw	r26, r6
    4ca8:	c2 01       	movw	r24, r4
    4caa:	80 8b       	std	Z+16, r24	; 0x10
    4cac:	91 8b       	std	Z+17, r25	; 0x11
    4cae:	a2 8b       	std	Z+18, r26	; 0x12
    4cb0:	b3 8b       	std	Z+19, r27	; 0x13
    4cb2:	08 c0       	rjmp	.+16     	; 0x4cc4 <_nrk_scheduler+0x30a>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    4cb4:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__udivmodsi4>
    4cb8:	eb 81       	ldd	r30, Y+3	; 0x03
    4cba:	fc 81       	ldd	r31, Y+4	; 0x04
    4cbc:	60 8b       	std	Z+16, r22	; 0x10
    4cbe:	71 8b       	std	Z+17, r23	; 0x11
    4cc0:	82 8b       	std	Z+18, r24	; 0x12
    4cc2:	93 8b       	std	Z+19, r25	; 0x13
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    4cc4:	eb 81       	ldd	r30, Y+3	; 0x03
    4cc6:	fc 81       	ldd	r31, Y+4	; 0x04
    4cc8:	80 89       	ldd	r24, Z+16	; 0x10
    4cca:	91 89       	ldd	r25, Z+17	; 0x11
    4ccc:	a2 89       	ldd	r26, Z+18	; 0x12
    4cce:	b3 89       	ldd	r27, Z+19	; 0x13
    4cd0:	89 2b       	or	r24, r25
    4cd2:	8a 2b       	or	r24, r26
    4cd4:	8b 2b       	or	r24, r27
    4cd6:	41 f4       	brne	.+16     	; 0x4ce8 <_nrk_scheduler+0x32e>
    4cd8:	80 8d       	ldd	r24, Z+24	; 0x18
    4cda:	91 8d       	ldd	r25, Z+25	; 0x19
    4cdc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    4cde:	b3 8d       	ldd	r27, Z+27	; 0x1b
    4ce0:	80 8b       	std	Z+16, r24	; 0x10
    4ce2:	91 8b       	std	Z+17, r25	; 0x11
    4ce4:	a2 8b       	std	Z+18, r26	; 0x12
    4ce6:	b3 8b       	std	Z+19, r27	; 0x13

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    4ce8:	fa 81       	ldd	r31, Y+2	; 0x02
    4cea:	f3 30       	cpi	r31, 0x03	; 3
    4cec:	09 f0       	breq	.+2      	; 0x4cf0 <_nrk_scheduler+0x336>
    4cee:	89 c0       	rjmp	.+274    	; 0x4e02 <_nrk_scheduler+0x448>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    4cf0:	eb 81       	ldd	r30, Y+3	; 0x03
    4cf2:	fc 81       	ldd	r31, Y+4	; 0x04
    4cf4:	84 85       	ldd	r24, Z+12	; 0x0c
    4cf6:	95 85       	ldd	r25, Z+13	; 0x0d
    4cf8:	a6 85       	ldd	r26, Z+14	; 0x0e
    4cfa:	b7 85       	ldd	r27, Z+15	; 0x0f
    4cfc:	89 2b       	or	r24, r25
    4cfe:	8a 2b       	or	r24, r26
    4d00:	8b 2b       	or	r24, r27
    4d02:	09 f0       	breq	.+2      	; 0x4d06 <_nrk_scheduler+0x34c>
    4d04:	6b c0       	rjmp	.+214    	; 0x4ddc <_nrk_scheduler+0x422>
    4d06:	df 01       	movw	r26, r30
    4d08:	12 97       	sbiw	r26, 0x02	; 2
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    4d0a:	8c 91       	ld	r24, X
    4d0c:	9f 01       	movw	r18, r30
    4d0e:	23 50       	subi	r18, 0x03	; 3
    4d10:	31 09       	sbc	r19, r1
    4d12:	88 23       	and	r24, r24
    4d14:	a9 f0       	breq	.+42     	; 0x4d40 <_nrk_scheduler+0x386>
    4d16:	f9 01       	movw	r30, r18
    4d18:	80 81       	ld	r24, Z
    4d1a:	88 23       	and	r24, r24
    4d1c:	89 f0       	breq	.+34     	; 0x4d40 <_nrk_scheduler+0x386>
    4d1e:	b5 01       	movw	r22, r10
    4d20:	a4 01       	movw	r20, r8
    4d22:	00 90 33 07 	lds	r0, 0x0733
    4d26:	04 c0       	rjmp	.+8      	; 0x4d30 <_nrk_scheduler+0x376>
    4d28:	44 0f       	add	r20, r20
    4d2a:	55 1f       	adc	r21, r21
    4d2c:	66 1f       	adc	r22, r22
    4d2e:	77 1f       	adc	r23, r23
    4d30:	0a 94       	dec	r0
    4d32:	d2 f7       	brpl	.-12     	; 0x4d28 <_nrk_scheduler+0x36e>
    4d34:	eb 81       	ldd	r30, Y+3	; 0x03
    4d36:	fc 81       	ldd	r31, Y+4	; 0x04
    4d38:	40 87       	std	Z+8, r20	; 0x08
    4d3a:	51 87       	std	Z+9, r21	; 0x09
    4d3c:	62 87       	std	Z+10, r22	; 0x0a
    4d3e:	73 87       	std	Z+11, r23	; 0x0b
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    4d40:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    4d42:	f9 01       	movw	r30, r18
    4d44:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    4d46:	eb 81       	ldd	r30, Y+3	; 0x03
    4d48:	fc 81       	ldd	r31, Y+4	; 0x04
    4d4a:	a0 a1       	ldd	r26, Z+32	; 0x20
    4d4c:	b1 a1       	ldd	r27, Z+33	; 0x21
    4d4e:	40 8c       	ldd	r4, Z+24	; 0x18
    4d50:	51 8c       	ldd	r5, Z+25	; 0x19
    4d52:	62 8c       	ldd	r6, Z+26	; 0x1a
    4d54:	73 8c       	ldd	r7, Z+27	; 0x1b
    4d56:	44 8d       	ldd	r20, Z+28	; 0x1c
    4d58:	55 8d       	ldd	r21, Z+29	; 0x1d
    4d5a:	66 8d       	ldd	r22, Z+30	; 0x1e
    4d5c:	77 8d       	ldd	r23, Z+31	; 0x1f
    4d5e:	a1 30       	cpi	r26, 0x01	; 1
    4d60:	b1 05       	cpc	r27, r1
    4d62:	d1 f4       	brne	.+52     	; 0x4d98 <_nrk_scheduler+0x3de>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    4d64:	44 8b       	std	Z+20, r20	; 0x14
    4d66:	55 8b       	std	Z+21, r21	; 0x15
    4d68:	66 8b       	std	Z+22, r22	; 0x16
    4d6a:	77 8b       	std	Z+23, r23	; 0x17
                    nrk_task_TCB[task_ID].task_state = READY;
    4d6c:	22 e0       	ldi	r18, 0x02	; 2
    4d6e:	20 83       	st	Z, r18
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    4d70:	80 89       	ldd	r24, Z+16	; 0x10
    4d72:	91 89       	ldd	r25, Z+17	; 0x11
    4d74:	a2 89       	ldd	r26, Z+18	; 0x12
    4d76:	b3 89       	ldd	r27, Z+19	; 0x13
    4d78:	84 87       	std	Z+12, r24	; 0x0c
    4d7a:	95 87       	std	Z+13, r25	; 0x0d
    4d7c:	a6 87       	std	Z+14, r26	; 0x0e
    4d7e:	b7 87       	std	Z+15, r27	; 0x0f
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4d80:	45 28       	or	r4, r5
    4d82:	46 28       	or	r4, r6
    4d84:	47 28       	or	r4, r7
    4d86:	21 f4       	brne	.+8      	; 0x4d90 <_nrk_scheduler+0x3d6>
    4d88:	c4 86       	std	Z+12, r12	; 0x0c
    4d8a:	d5 86       	std	Z+13, r13	; 0x0d
    4d8c:	e6 86       	std	Z+14, r14	; 0x0e
    4d8e:	f7 86       	std	Z+15, r15	; 0x0f
		    nrk_add_to_readyQ(task_ID);
    4d90:	89 81       	ldd	r24, Y+1	; 0x01
    4d92:	0e 94 0c 1e 	call	0x3c18	; 0x3c18 <nrk_add_to_readyQ>
    4d96:	22 c0       	rjmp	.+68     	; 0x4ddc <_nrk_scheduler+0x422>
                }
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    4d98:	eb 81       	ldd	r30, Y+3	; 0x03
    4d9a:	fc 81       	ldd	r31, Y+4	; 0x04
    4d9c:	44 8b       	std	Z+20, r20	; 0x14
    4d9e:	55 8b       	std	Z+21, r21	; 0x15
    4da0:	66 8b       	std	Z+22, r22	; 0x16
    4da2:	77 8b       	std	Z+23, r23	; 0x17
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    4da4:	11 97       	sbiw	r26, 0x01	; 1
    4da6:	a3 01       	movw	r20, r6
    4da8:	92 01       	movw	r18, r4
    4daa:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__muluhisi3>
    4dae:	64 87       	std	Z+12, r22	; 0x0c
    4db0:	75 87       	std	Z+13, r23	; 0x0d
    4db2:	86 87       	std	Z+14, r24	; 0x0e
    4db4:	97 87       	std	Z+15, r25	; 0x0f
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    4db6:	60 8b       	std	Z+16, r22	; 0x10
    4db8:	71 8b       	std	Z+17, r23	; 0x11
    4dba:	82 8b       	std	Z+18, r24	; 0x12
    4dbc:	93 8b       	std	Z+19, r25	; 0x13
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    4dbe:	45 28       	or	r4, r5
    4dc0:	46 28       	or	r4, r6
    4dc2:	47 28       	or	r4, r7
    4dc4:	21 f4       	brne	.+8      	; 0x4dce <_nrk_scheduler+0x414>
    4dc6:	c4 86       	std	Z+12, r12	; 0x0c
    4dc8:	d5 86       	std	Z+13, r13	; 0x0d
    4dca:	e6 86       	std	Z+14, r14	; 0x0e
    4dcc:	f7 86       	std	Z+15, r15	; 0x0f
                    nrk_task_TCB[task_ID].num_periods=1;
    4dce:	44 24       	eor	r4, r4
    4dd0:	43 94       	inc	r4
    4dd2:	51 2c       	mov	r5, r1
    4dd4:	eb 81       	ldd	r30, Y+3	; 0x03
    4dd6:	fc 81       	ldd	r31, Y+4	; 0x04
    4dd8:	51 a2       	std	Z+33, r5	; 0x21
    4dda:	40 a2       	std	Z+32, r4	; 0x20
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    4ddc:	eb 81       	ldd	r30, Y+3	; 0x03
    4dde:	fc 81       	ldd	r31, Y+4	; 0x04
    4de0:	84 85       	ldd	r24, Z+12	; 0x0c
    4de2:	95 85       	ldd	r25, Z+13	; 0x0d
    4de4:	a6 85       	ldd	r26, Z+14	; 0x0e
    4de6:	b7 85       	ldd	r27, Z+15	; 0x0f
    4de8:	00 97       	sbiw	r24, 0x00	; 0
    4dea:	a1 05       	cpc	r26, r1
    4dec:	b1 05       	cpc	r27, r1
    4dee:	49 f0       	breq	.+18     	; 0x4e02 <_nrk_scheduler+0x448>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    4df0:	a8 01       	movw	r20, r16
    4df2:	60 e0       	ldi	r22, 0x00	; 0
    4df4:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    4df6:	84 17       	cp	r24, r20
    4df8:	95 07       	cpc	r25, r21
    4dfa:	a6 07       	cpc	r26, r22
    4dfc:	b7 07       	cpc	r27, r23
    4dfe:	08 f4       	brcc	.+2      	; 0x4e02 <_nrk_scheduler+0x448>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    4e00:	8c 01       	movw	r16, r24
    4e02:	2b 81       	ldd	r18, Y+3	; 0x03
    4e04:	3c 81       	ldd	r19, Y+4	; 0x04
    4e06:	25 5d       	subi	r18, 0xD5	; 213
    4e08:	3f 4f       	sbci	r19, 0xFF	; 255
    4e0a:	3c 83       	std	Y+4, r19	; 0x04
    4e0c:	2b 83       	std	Y+3, r18	; 0x03

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    4e0e:	39 81       	ldd	r19, Y+1	; 0x01
    4e10:	31 30       	cpi	r19, 0x01	; 1
    4e12:	19 f0       	breq	.+6      	; 0x4e1a <_nrk_scheduler+0x460>
    4e14:	91 e0       	ldi	r25, 0x01	; 1
    4e16:	99 83       	std	Y+1, r25	; 0x01
    4e18:	ed ce       	rjmp	.-550    	; 0x4bf4 <_nrk_scheduler+0x23a>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    4e1a:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <nrk_get_high_ready_task_ID>
    4e1e:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    4e20:	4b e2       	ldi	r20, 0x2B	; 43
    4e22:	84 02       	muls	r24, r20
    4e24:	f0 01       	movw	r30, r0
    4e26:	11 24       	eor	r1, r1
    4e28:	ec 52       	subi	r30, 0x2C	; 44
    4e2a:	f9 4f       	sbci	r31, 0xF9	; 249
    4e2c:	22 85       	ldd	r18, Z+10	; 0x0a
    4e2e:	20 93 45 07 	sts	0x0745, r18
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    4e32:	f0 93 35 07 	sts	0x0735, r31
    4e36:	e0 93 34 07 	sts	0x0734, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    4e3a:	88 23       	and	r24, r24
    4e3c:	f9 f0       	breq	.+62     	; 0x4e7c <_nrk_scheduler+0x4c2>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    4e3e:	85 a1       	ldd	r24, Z+37	; 0x25
    4e40:	96 a1       	ldd	r25, Z+38	; 0x26
    4e42:	a7 a1       	ldd	r26, Z+39	; 0x27
    4e44:	b0 a5       	ldd	r27, Z+40	; 0x28
    4e46:	89 2b       	or	r24, r25
    4e48:	8a 2b       	or	r24, r26
    4e4a:	8b 2b       	or	r24, r27
    4e4c:	99 f0       	breq	.+38     	; 0x4e74 <_nrk_scheduler+0x4ba>
    4e4e:	85 8d       	ldd	r24, Z+29	; 0x1d
    4e50:	96 8d       	ldd	r25, Z+30	; 0x1e
    4e52:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4e54:	b0 a1       	ldd	r27, Z+32	; 0x20
    4e56:	8a 3f       	cpi	r24, 0xFA	; 250
    4e58:	91 05       	cpc	r25, r1
    4e5a:	a1 05       	cpc	r26, r1
    4e5c:	b1 05       	cpc	r27, r1
    4e5e:	50 f4       	brcc	.+20     	; 0x4e74 <_nrk_scheduler+0x4ba>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    4e60:	a8 01       	movw	r20, r16
    4e62:	60 e0       	ldi	r22, 0x00	; 0
    4e64:	70 e0       	ldi	r23, 0x00	; 0
    4e66:	84 17       	cp	r24, r20
    4e68:	95 07       	cpc	r25, r21
    4e6a:	a6 07       	cpc	r26, r22
    4e6c:	b7 07       	cpc	r27, r23
    4e6e:	e8 f4       	brcc	.+58     	; 0x4eaa <_nrk_scheduler+0x4f0>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    4e70:	8c 01       	movw	r16, r24
    4e72:	1b c0       	rjmp	.+54     	; 0x4eaa <_nrk_scheduler+0x4f0>
    4e74:	0b 3f       	cpi	r16, 0xFB	; 251
    4e76:	11 05       	cpc	r17, r1
    4e78:	c0 f0       	brcs	.+48     	; 0x4eaa <_nrk_scheduler+0x4f0>
    4e7a:	12 c0       	rjmp	.+36     	; 0x4ea0 <_nrk_scheduler+0x4e6>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    4e7c:	04 30       	cpi	r16, 0x04	; 4
    4e7e:	11 05       	cpc	r17, r1
    4e80:	a0 f0       	brcs	.+40     	; 0x4eaa <_nrk_scheduler+0x4f0>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    4e82:	c8 01       	movw	r24, r16
    4e84:	03 97       	sbiw	r24, 0x03	; 3
    4e86:	8a 3f       	cpi	r24, 0xFA	; 250
    4e88:	91 05       	cpc	r25, r1
    4e8a:	38 f4       	brcc	.+14     	; 0x4e9a <_nrk_scheduler+0x4e0>
    4e8c:	8c 01       	movw	r16, r24
    4e8e:	82 30       	cpi	r24, 0x02	; 2
    4e90:	91 05       	cpc	r25, r1
    4e92:	58 f4       	brcc	.+22     	; 0x4eaa <_nrk_scheduler+0x4f0>
    4e94:	02 e0       	ldi	r16, 0x02	; 2
    4e96:	10 e0       	ldi	r17, 0x00	; 0
    4e98:	08 c0       	rjmp	.+16     	; 0x4eaa <_nrk_scheduler+0x4f0>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    4e9a:	0d 3f       	cpi	r16, 0xFD	; 253
    4e9c:	11 05       	cpc	r17, r1
    4e9e:	19 f0       	breq	.+6      	; 0x4ea6 <_nrk_scheduler+0x4ec>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    4ea0:	0a ef       	ldi	r16, 0xFA	; 250
    4ea2:	10 e0       	ldi	r17, 0x00	; 0
    4ea4:	02 c0       	rjmp	.+4      	; 0x4eaa <_nrk_scheduler+0x4f0>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    4ea6:	07 ef       	ldi	r16, 0xF7	; 247
    4ea8:	10 e0       	ldi	r17, 0x00	; 0
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    4eaa:	20 93 36 07 	sts	0x0736, r18
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    4eae:	f0 93 44 07 	sts	0x0744, r31
    4eb2:	e0 93 43 07 	sts	0x0743, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    4eb6:	00 93 99 05 	sts	0x0599, r16

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    4eba:	0e 94 ce 29 	call	0x539c	; 0x539c <_nrk_os_timer_get>
    4ebe:	28 2f       	mov	r18, r24
    4ec0:	30 e0       	ldi	r19, 0x00	; 0
    4ec2:	2f 5f       	subi	r18, 0xFF	; 255
    4ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ec6:	20 17       	cp	r18, r16
    4ec8:	31 07       	cpc	r19, r17
    4eca:	40 f0       	brcs	.+16     	; 0x4edc <_nrk_scheduler+0x522>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    4ecc:	0e 94 ce 29 	call	0x539c	; 0x539c <_nrk_os_timer_get>
    4ed0:	08 2f       	mov	r16, r24
    4ed2:	10 e0       	ldi	r17, 0x00	; 0
    4ed4:	0e 5f       	subi	r16, 0xFE	; 254
    4ed6:	1f 4f       	sbci	r17, 0xFF	; 255
        _nrk_prev_timer_val=next_wake;
    4ed8:	00 93 99 05 	sts	0x0599, r16
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    4edc:	f1 10       	cpse	r15, r1
    4ede:	10 92 37 07 	sts	0x0737, r1

    _nrk_set_next_wakeup(next_wake);
    4ee2:	80 2f       	mov	r24, r16
    4ee4:	0e 94 6d 29 	call	0x52da	; 0x52da <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    4ee8:	6c ed       	ldi	r22, 0xDC	; 220
    4eea:	75 e0       	ldi	r23, 0x05	; 5
    4eec:	c1 01       	movw	r24, r2
    4eee:	0e 94 d5 28 	call	0x51aa	; 0x51aa <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    4ef2:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    4ef6:	0f 90       	pop	r0
    4ef8:	0f 90       	pop	r0
    4efa:	0f 90       	pop	r0
    4efc:	0f 90       	pop	r0
    4efe:	df 91       	pop	r29
    4f00:	cf 91       	pop	r28
    4f02:	1f 91       	pop	r17
    4f04:	0f 91       	pop	r16
    4f06:	ff 90       	pop	r15
    4f08:	ef 90       	pop	r14
    4f0a:	df 90       	pop	r13
    4f0c:	cf 90       	pop	r12
    4f0e:	bf 90       	pop	r11
    4f10:	af 90       	pop	r10
    4f12:	9f 90       	pop	r9
    4f14:	8f 90       	pop	r8
    4f16:	7f 90       	pop	r7
    4f18:	6f 90       	pop	r6
    4f1a:	5f 90       	pop	r5
    4f1c:	4f 90       	pop	r4
    4f1e:	3f 90       	pop	r3
    4f20:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    4f22:	0c 94 fc 2c 	jmp	0x59f8	; 0x59f8 <nrk_start_high_ready_task>

00004f26 <nrk_register_driver>:
 *
 *
 */

int8_t nrk_register_driver(void *devicemanager,uint8_t dev_index)
{
    4f26:	9c 01       	movw	r18, r24
    if(_nrk_driver_count<NRK_MAX_DRIVER_CNT)
    4f28:	90 91 56 07 	lds	r25, 0x0756
    4f2c:	19 16       	cp	r1, r25
    4f2e:	74 f0       	brlt	.+28     	; 0x4f4c <nrk_register_driver+0x26>
    {
        nrk_drivers[_nrk_driver_count].dev_id=dev_index;
    4f30:	84 e0       	ldi	r24, 0x04	; 4
    4f32:	98 02       	muls	r25, r24
    4f34:	f0 01       	movw	r30, r0
    4f36:	11 24       	eor	r1, r1
    4f38:	e9 5a       	subi	r30, 0xA9	; 169
    4f3a:	f8 4f       	sbci	r31, 0xF8	; 248
    4f3c:	60 83       	st	Z, r22
        nrk_drivers[_nrk_driver_count].devicemanager=(void*)devicemanager;
    4f3e:	33 83       	std	Z+3, r19	; 0x03
    4f40:	22 83       	std	Z+2, r18	; 0x02
        _nrk_driver_count++;
    4f42:	9f 5f       	subi	r25, 0xFF	; 255
    4f44:	90 93 56 07 	sts	0x0756, r25
        return NRK_OK;
    4f48:	81 e0       	ldi	r24, 0x01	; 1
    4f4a:	08 95       	ret
    }
    else
        return NRK_ERROR;
    4f4c:	8f ef       	ldi	r24, 0xFF	; 255
}
    4f4e:	08 95       	ret

00004f50 <nrk_open>:


int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    4f50:	0f 93       	push	r16
    4f52:	1f 93       	push	r17
    4f54:	cf 93       	push	r28
    4f56:	df 93       	push	r29
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    4f58:	40 91 56 07 	lds	r20, 0x0756
    4f5c:	55 27       	eor	r21, r21
    4f5e:	47 fd       	sbrc	r20, 7
    4f60:	50 95       	com	r21
    4f62:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    4f64:	90 e0       	ldi	r25, 0x00	; 0

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    4f66:	2c 2f       	mov	r18, r28
    4f68:	30 e0       	ldi	r19, 0x00	; 0
    4f6a:	24 17       	cp	r18, r20
    4f6c:	35 07       	cpc	r19, r21
    4f6e:	8c f5       	brge	.+98     	; 0x4fd2 <nrk_open+0x82>
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    4f70:	89 01       	movw	r16, r18
    4f72:	00 0f       	add	r16, r16
    4f74:	11 1f       	adc	r17, r17
    4f76:	00 0f       	add	r16, r16
    4f78:	11 1f       	adc	r17, r17
    4f7a:	d8 01       	movw	r26, r16
    4f7c:	a9 5a       	subi	r26, 0xA9	; 169
    4f7e:	b8 4f       	sbci	r27, 0xF8	; 248
    4f80:	ec 91       	ld	r30, X
    4f82:	ff 27       	eor	r31, r31
    4f84:	e7 fd       	sbrc	r30, 7
    4f86:	f0 95       	com	r31
    4f88:	e8 17       	cp	r30, r24
    4f8a:	f9 07       	cpc	r31, r25
    4f8c:	01 f5       	brne	.+64     	; 0x4fce <nrk_open+0x7e>
    4f8e:	d6 2f       	mov	r29, r22
        {
            if(nrk_driver_init[cnt]==WAS_NOT_OPEN)
    4f90:	f9 01       	movw	r30, r18
    4f92:	e5 5a       	subi	r30, 0xA5	; 165
    4f94:	f8 4f       	sbci	r31, 0xF8	; 248
    4f96:	80 81       	ld	r24, Z
    4f98:	81 11       	cpse	r24, r1
    4f9a:	0b c0       	rjmp	.+22     	; 0x4fb2 <nrk_open+0x62>
            {
                // Only call init the first time driver is opened
                nrk_driver_init[cnt]=WAS_OPEN;
    4f9c:	81 e0       	ldi	r24, 0x01	; 1
    4f9e:	80 83       	st	Z, r24
                nrk_drivers[cnt].devicemanager(INIT,opt,NULL,0);
    4fa0:	12 96       	adiw	r26, 0x02	; 2
    4fa2:	ed 91       	ld	r30, X+
    4fa4:	fc 91       	ld	r31, X
    4fa6:	13 97       	sbiw	r26, 0x03	; 3
    4fa8:	20 e0       	ldi	r18, 0x00	; 0
    4faa:	40 e0       	ldi	r20, 0x00	; 0
    4fac:	50 e0       	ldi	r21, 0x00	; 0
    4fae:	80 e0       	ldi	r24, 0x00	; 0
    4fb0:	09 95       	icall
            }
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
    4fb2:	f8 01       	movw	r30, r16
    4fb4:	e9 5a       	subi	r30, 0xA9	; 169
    4fb6:	f8 4f       	sbci	r31, 0xF8	; 248
    4fb8:	02 80       	ldd	r0, Z+2	; 0x02
    4fba:	f3 81       	ldd	r31, Z+3	; 0x03
    4fbc:	e0 2d       	mov	r30, r0
    4fbe:	20 e0       	ldi	r18, 0x00	; 0
    4fc0:	40 e0       	ldi	r20, 0x00	; 0
    4fc2:	50 e0       	ldi	r21, 0x00	; 0
    4fc4:	6d 2f       	mov	r22, r29
    4fc6:	81 e0       	ldi	r24, 0x01	; 1
    4fc8:	09 95       	icall
            return cnt;
    4fca:	8c 2f       	mov	r24, r28
    4fcc:	03 c0       	rjmp	.+6      	; 0x4fd4 <nrk_open+0x84>

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    4fce:	cf 5f       	subi	r28, 0xFF	; 255
    4fd0:	ca cf       	rjmp	.-108    	; 0x4f66 <nrk_open+0x16>
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
            return cnt;
        }
    }

    return NRK_ERROR;
    4fd2:	8f ef       	ldi	r24, 0xFF	; 255
}
    4fd4:	df 91       	pop	r29
    4fd6:	cf 91       	pop	r28
    4fd8:	1f 91       	pop	r17
    4fda:	0f 91       	pop	r16
    4fdc:	08 95       	ret

00004fde <nrk_close>:

int8_t nrk_close(uint8_t dev_fd)
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	20 91 56 07 	lds	r18, 0x0756
    4fe4:	33 27       	eor	r19, r19
    4fe6:	27 fd       	sbrc	r18, 7
    4fe8:	30 95       	com	r19
    4fea:	28 17       	cp	r18, r24
    4fec:	39 07       	cpc	r19, r25
    4fee:	84 f0       	brlt	.+32     	; 0x5010 <nrk_close+0x32>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    error=nrk_drivers[dev_fd].devicemanager(CLOSE,0,NULL,0);
    4ff0:	88 0f       	add	r24, r24
    4ff2:	99 1f       	adc	r25, r25
    4ff4:	88 0f       	add	r24, r24
    4ff6:	99 1f       	adc	r25, r25
    4ff8:	fc 01       	movw	r30, r24
    4ffa:	e9 5a       	subi	r30, 0xA9	; 169
    4ffc:	f8 4f       	sbci	r31, 0xF8	; 248
    4ffe:	02 80       	ldd	r0, Z+2	; 0x02
    5000:	f3 81       	ldd	r31, Z+3	; 0x03
    5002:	e0 2d       	mov	r30, r0
    5004:	20 e0       	ldi	r18, 0x00	; 0
    5006:	40 e0       	ldi	r20, 0x00	; 0
    5008:	50 e0       	ldi	r21, 0x00	; 0
    500a:	60 e0       	ldi	r22, 0x00	; 0
    500c:	82 e0       	ldi	r24, 0x02	; 2
    500e:	09 94       	ijmp
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    5010:	81 e0       	ldi	r24, 0x01	; 1
    5012:	0e 94 17 18 	call	0x302e	; 0x302e <_nrk_errno_set>
// Do we need to do init on a second reopen?
//if(!error)
//	driver_record_init[dev_fd]=0;

    return error;
}
    5016:	8f ef       	ldi	r24, 0xFF	; 255
    5018:	08 95       	ret

0000501a <nrk_write>:


int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    501a:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    501c:	90 e0       	ldi	r25, 0x00	; 0
    501e:	e0 91 56 07 	lds	r30, 0x0756
    5022:	ff 27       	eor	r31, r31
    5024:	e7 fd       	sbrc	r30, 7
    5026:	f0 95       	com	r31
    5028:	e8 17       	cp	r30, r24
    502a:	f9 07       	cpc	r31, r25
    502c:	74 f0       	brlt	.+28     	; 0x504a <nrk_write+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);
    502e:	88 0f       	add	r24, r24
    5030:	99 1f       	adc	r25, r25
    5032:	88 0f       	add	r24, r24
    5034:	99 1f       	adc	r25, r25
    5036:	fc 01       	movw	r30, r24
    5038:	e9 5a       	subi	r30, 0xA9	; 169
    503a:	f8 4f       	sbci	r31, 0xF8	; 248
    503c:	02 80       	ldd	r0, Z+2	; 0x02
    503e:	f3 81       	ldd	r31, Z+3	; 0x03
    5040:	e0 2d       	mov	r30, r0
    5042:	ab 01       	movw	r20, r22
    5044:	60 e0       	ldi	r22, 0x00	; 0
    5046:	86 e0       	ldi	r24, 0x06	; 6
    5048:	09 94       	ijmp

int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    504a:	81 e0       	ldi	r24, 0x01	; 1
    504c:	0e 94 17 18 	call	0x302e	; 0x302e <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);

}
    5050:	8f ef       	ldi	r24, 0xFF	; 255
    5052:	08 95       	ret

00005054 <nrk_read>:

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    5054:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    5056:	90 e0       	ldi	r25, 0x00	; 0
    5058:	e0 91 56 07 	lds	r30, 0x0756
    505c:	ff 27       	eor	r31, r31
    505e:	e7 fd       	sbrc	r30, 7
    5060:	f0 95       	com	r31
    5062:	e8 17       	cp	r30, r24
    5064:	f9 07       	cpc	r31, r25
    5066:	74 f0       	brlt	.+28     	; 0x5084 <nrk_read+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);
    5068:	88 0f       	add	r24, r24
    506a:	99 1f       	adc	r25, r25
    506c:	88 0f       	add	r24, r24
    506e:	99 1f       	adc	r25, r25
    5070:	fc 01       	movw	r30, r24
    5072:	e9 5a       	subi	r30, 0xA9	; 169
    5074:	f8 4f       	sbci	r31, 0xF8	; 248
    5076:	02 80       	ldd	r0, Z+2	; 0x02
    5078:	f3 81       	ldd	r31, Z+3	; 0x03
    507a:	e0 2d       	mov	r30, r0
    507c:	ab 01       	movw	r20, r22
    507e:	60 e0       	ldi	r22, 0x00	; 0
    5080:	85 e0       	ldi	r24, 0x05	; 5
    5082:	09 94       	ijmp

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    5084:	81 e0       	ldi	r24, 0x01	; 1
    5086:	0e 94 17 18 	call	0x302e	; 0x302e <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);

}
    508a:	8f ef       	ldi	r24, 0xFF	; 255
    508c:	08 95       	ret

0000508e <nrk_set_status>:
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    508e:	24 2f       	mov	r18, r20
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	e0 91 56 07 	lds	r30, 0x0756
    5096:	ff 27       	eor	r31, r31
    5098:	e7 fd       	sbrc	r30, 7
    509a:	f0 95       	com	r31
    509c:	e8 17       	cp	r30, r24
    509e:	f9 07       	cpc	r31, r25
    50a0:	74 f0       	brlt	.+28     	; 0x50be <nrk_set_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
    50a2:	88 0f       	add	r24, r24
    50a4:	99 1f       	adc	r25, r25
    50a6:	88 0f       	add	r24, r24
    50a8:	99 1f       	adc	r25, r25
    50aa:	fc 01       	movw	r30, r24
    50ac:	e9 5a       	subi	r30, 0xA9	; 169
    50ae:	f8 4f       	sbci	r31, 0xF8	; 248
    50b0:	02 80       	ldd	r0, Z+2	; 0x02
    50b2:	f3 81       	ldd	r31, Z+3	; 0x03
    50b4:	e0 2d       	mov	r30, r0
    50b6:	40 e0       	ldi	r20, 0x00	; 0
    50b8:	50 e0       	ldi	r21, 0x00	; 0
    50ba:	84 e0       	ldi	r24, 0x04	; 4
    50bc:	09 94       	ijmp
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    50be:	81 e0       	ldi	r24, 0x01	; 1
    50c0:	0e 94 17 18 	call	0x302e	; 0x302e <_nrk_errno_set>
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
}
    50c4:	8f ef       	ldi	r24, 0xFF	; 255
    50c6:	08 95       	ret

000050c8 <nrk_get_status>:

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    50c8:	90 e0       	ldi	r25, 0x00	; 0
    50ca:	20 91 56 07 	lds	r18, 0x0756
    50ce:	33 27       	eor	r19, r19
    50d0:	27 fd       	sbrc	r18, 7
    50d2:	30 95       	com	r19
    50d4:	28 17       	cp	r18, r24
    50d6:	39 07       	cpc	r19, r25
    50d8:	7c f0       	brlt	.+30     	; 0x50f8 <nrk_get_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
    50da:	88 0f       	add	r24, r24
    50dc:	99 1f       	adc	r25, r25
    50de:	88 0f       	add	r24, r24
    50e0:	99 1f       	adc	r25, r25
    50e2:	fc 01       	movw	r30, r24
    50e4:	e9 5a       	subi	r30, 0xA9	; 169
    50e6:	f8 4f       	sbci	r31, 0xF8	; 248
    50e8:	02 80       	ldd	r0, Z+2	; 0x02
    50ea:	f3 81       	ldd	r31, Z+3	; 0x03
    50ec:	e0 2d       	mov	r30, r0
    50ee:	20 e0       	ldi	r18, 0x00	; 0
    50f0:	40 e0       	ldi	r20, 0x00	; 0
    50f2:	50 e0       	ldi	r21, 0x00	; 0
    50f4:	83 e0       	ldi	r24, 0x03	; 3
    50f6:	09 94       	ijmp

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    50f8:	81 e0       	ldi	r24, 0x01	; 1
    50fa:	0e 94 17 18 	call	0x302e	; 0x302e <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
}
    50fe:	8f ef       	ldi	r24, 0xFF	; 255
    5100:	08 95       	ret

00005102 <nrk_spin_wait_us>:
	...
    511a:	01 97       	sbiw	r24, 0x01	; 1
    511c:	91 f7       	brne	.-28     	; 0x5102 <nrk_spin_wait_us>
    511e:	08 95       	ret

00005120 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    5120:	10 92 21 01 	sts	0x0121, r1
    5124:	08 95       	ret

00005126 <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    5126:	89 e0       	ldi	r24, 0x09	; 9
    5128:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    512c:	8d e8       	ldi	r24, 0x8D	; 141
    512e:	9c e3       	ldi	r25, 0x3C	; 60
    5130:	90 93 29 01 	sts	0x0129, r25
    5134:	80 93 28 01 	sts	0x0128, r24
    5138:	08 95       	ret

0000513a <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    513a:	10 92 25 01 	sts	0x0125, r1
    513e:	10 92 24 01 	sts	0x0124, r1
    5142:	08 95       	ret

00005144 <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    5144:	cf 93       	push	r28
    5146:	df 93       	push	r29
    5148:	00 d0       	rcall	.+0      	; 0x514a <_nrk_precision_os_timer_get+0x6>
    514a:	cd b7       	in	r28, 0x3d	; 61
    514c:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    514e:	80 91 24 01 	lds	r24, 0x0124
    5152:	90 91 25 01 	lds	r25, 0x0125
    5156:	9a 83       	std	Y+2, r25	; 0x02
    5158:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    515a:	89 81       	ldd	r24, Y+1	; 0x01
    515c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    515e:	0f 90       	pop	r0
    5160:	0f 90       	pop	r0
    5162:	df 91       	pop	r29
    5164:	cf 91       	pop	r28
    5166:	08 95       	ret

00005168 <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    5168:	10 92 81 00 	sts	0x0081, r1
    516c:	08 95       	ret

0000516e <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    516e:	81 e0       	ldi	r24, 0x01	; 1
    5170:	80 93 81 00 	sts	0x0081, r24
    5174:	08 95       	ret

00005176 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    5176:	83 b5       	in	r24, 0x23	; 35
    5178:	81 60       	ori	r24, 0x01	; 1
    517a:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    517c:	10 92 85 00 	sts	0x0085, r1
    5180:	10 92 84 00 	sts	0x0084, r1
    5184:	08 95       	ret

00005186 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    5186:	cf 93       	push	r28
    5188:	df 93       	push	r29
    518a:	00 d0       	rcall	.+0      	; 0x518c <_nrk_high_speed_timer_get+0x6>
    518c:	cd b7       	in	r28, 0x3d	; 61
    518e:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    5190:	80 91 84 00 	lds	r24, 0x0084
    5194:	90 91 85 00 	lds	r25, 0x0085
    5198:	9a 83       	std	Y+2, r25	; 0x02
    519a:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    519c:	89 81       	ldd	r24, Y+1	; 0x01
    519e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    51a0:	0f 90       	pop	r0
    51a2:	0f 90       	pop	r0
    51a4:	df 91       	pop	r29
    51a6:	cf 91       	pop	r28
    51a8:	08 95       	ret

000051aa <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    51aa:	cf 92       	push	r12
    51ac:	df 92       	push	r13
    51ae:	ef 92       	push	r14
    51b0:	ff 92       	push	r15
    51b2:	cf 93       	push	r28
    51b4:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    51b6:	ec 01       	movw	r28, r24
    51b8:	cc 0f       	add	r28, r28
    51ba:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    51bc:	c9 37       	cpi	r28, 0x79	; 121
    51be:	8f ef       	ldi	r24, 0xFF	; 255
    51c0:	d8 07       	cpc	r29, r24
    51c2:	10 f0       	brcs	.+4      	; 0x51c8 <nrk_high_speed_timer_wait+0x1e>
    51c4:	c0 e0       	ldi	r28, 0x00	; 0
    51c6:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    51c8:	6b 01       	movw	r12, r22
    51ca:	e1 2c       	mov	r14, r1
    51cc:	f1 2c       	mov	r15, r1
    51ce:	cc 0e       	add	r12, r28
    51d0:	dd 1e       	adc	r13, r29
    51d2:	e1 1c       	adc	r14, r1
    51d4:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    51d6:	81 e0       	ldi	r24, 0x01	; 1
    51d8:	c8 16       	cp	r12, r24
    51da:	d1 04       	cpc	r13, r1
    51dc:	e8 06       	cpc	r14, r24
    51de:	f1 04       	cpc	r15, r1
    51e0:	40 f0       	brcs	.+16     	; 0x51f2 <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    51e2:	81 e0       	ldi	r24, 0x01	; 1
    51e4:	e8 1a       	sub	r14, r24
    51e6:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    51e8:	0e 94 c3 28 	call	0x5186	; 0x5186 <_nrk_high_speed_timer_get>
    51ec:	c8 17       	cp	r28, r24
    51ee:	d9 07       	cpc	r29, r25
    51f0:	d8 f3       	brcs	.-10     	; 0x51e8 <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    51f2:	0e 94 c3 28 	call	0x5186	; 0x5186 <_nrk_high_speed_timer_get>
    51f6:	8c 15       	cp	r24, r12
    51f8:	9d 05       	cpc	r25, r13
    51fa:	d8 f3       	brcs	.-10     	; 0x51f2 <nrk_high_speed_timer_wait+0x48>
}
    51fc:	df 91       	pop	r29
    51fe:	cf 91       	pop	r28
    5200:	ff 90       	pop	r15
    5202:	ef 90       	pop	r14
    5204:	df 90       	pop	r13
    5206:	cf 90       	pop	r12
    5208:	08 95       	ret

0000520a <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    520a:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    520e:	e0 e7       	ldi	r30, 0x70	; 112
    5210:	f0 e0       	ldi	r31, 0x00	; 0
    5212:	80 81       	ld	r24, Z
    5214:	8d 7f       	andi	r24, 0xFD	; 253
    5216:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    5218:	80 81       	ld	r24, Z
    521a:	8e 7f       	andi	r24, 0xFE	; 254
    521c:	80 83       	st	Z, r24
    521e:	08 95       	ret

00005220 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    5220:	80 93 b2 00 	sts	0x00B2, r24
    5224:	08 95       	ret

00005226 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    5226:	e0 e7       	ldi	r30, 0x70	; 112
    5228:	f0 e0       	ldi	r31, 0x00	; 0
    522a:	80 81       	ld	r24, Z
    522c:	83 60       	ori	r24, 0x03	; 3
    522e:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    5230:	83 e0       	ldi	r24, 0x03	; 3
    5232:	80 93 b1 00 	sts	0x00B1, r24
    5236:	08 95       	ret

00005238 <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    5238:	83 b5       	in	r24, 0x23	; 35
    523a:	82 60       	ori	r24, 0x02	; 2
    523c:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    523e:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    5242:	10 92 63 05 	sts	0x0563, r1
    _nrk_prev_timer_val=0;
    5246:	10 92 99 05 	sts	0x0599, r1
    524a:	08 95       	ret

0000524c <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    524c:	cf 93       	push	r28
    524e:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    5250:	8e ef       	ldi	r24, 0xFE	; 254
    5252:	80 93 99 05 	sts	0x0599, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    5256:	80 e2       	ldi	r24, 0x20	; 32
    5258:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    525c:	80 91 99 05 	lds	r24, 0x0599
    5260:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    5264:	83 e0       	ldi	r24, 0x03	; 3
    5266:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    5268:	92 e0       	ldi	r25, 0x02	; 2
    526a:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    526e:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    5272:	93 b5       	in	r25, 0x23	; 35
    5274:	92 60       	ori	r25, 0x02	; 2
    5276:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    5278:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    527a:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    527c:	83 b5       	in	r24, 0x23	; 35
    527e:	82 60       	ori	r24, 0x02	; 2
    5280:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    5282:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    5286:	81 e0       	ldi	r24, 0x01	; 1
    5288:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    528c:	10 92 85 00 	sts	0x0085, r1
    5290:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    5294:	83 b5       	in	r24, 0x23	; 35
    5296:	82 60       	ori	r24, 0x02	; 2
    5298:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    529a:	83 b5       	in	r24, 0x23	; 35
    529c:	81 60       	ori	r24, 0x01	; 1
    529e:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    52a0:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    52a4:	c4 e2       	ldi	r28, 0x24	; 36
    52a6:	d1 e0       	ldi	r29, 0x01	; 1
    52a8:	19 82       	std	Y+1, r1	; 0x01
    52aa:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    52ac:	83 b5       	in	r24, 0x23	; 35
    52ae:	82 60       	ori	r24, 0x02	; 2
    52b0:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    52b2:	83 b5       	in	r24, 0x23	; 35
    52b4:	81 60       	ori	r24, 0x01	; 1
    52b6:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    52b8:	0e 94 1c 29 	call	0x5238	; 0x5238 <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    52bc:	19 82       	std	Y+1, r1	; 0x01
    52be:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    52c0:	0e 94 13 29 	call	0x5226	; 0x5226 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    52c4:	0e 94 93 28 	call	0x5126	; 0x5126 <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    52c8:	10 92 63 05 	sts	0x0563, r1
}
    52cc:	df 91       	pop	r29
    52ce:	cf 91       	pop	r28
    52d0:	08 95       	ret

000052d2 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    52d2:	80 91 b3 00 	lds	r24, 0x00B3
}
    52d6:	8f 5f       	subi	r24, 0xFF	; 255
    52d8:	08 95       	ret

000052da <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    52da:	81 50       	subi	r24, 0x01	; 1
    52dc:	80 93 b3 00 	sts	0x00B3, r24
    52e0:	08 95       	ret

000052e2 <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    52e2:	81 11       	cpse	r24, r1
    52e4:	02 c0       	rjmp	.+4      	; 0x52ea <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    52e6:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    52ea:	8f ef       	ldi	r24, 0xFF	; 255
    52ec:	08 95       	ret

000052ee <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    52ee:	81 11       	cpse	r24, r1
    52f0:	06 c0       	rjmp	.+12     	; 0x52fe <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    52f2:	10 92 95 00 	sts	0x0095, r1
    52f6:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    52fa:	81 e0       	ldi	r24, 0x01	; 1
    52fc:	08 95       	ret
	}
return NRK_ERROR;
    52fe:	8f ef       	ldi	r24, 0xFF	; 255
}
    5300:	08 95       	ret

00005302 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    5302:	81 11       	cpse	r24, r1
    5304:	05 c0       	rjmp	.+10     	; 0x5310 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    5306:	80 91 94 00 	lds	r24, 0x0094
    530a:	90 91 95 00 	lds	r25, 0x0095
    530e:	08 95       	ret
	}
return 0;
    5310:	80 e0       	ldi	r24, 0x00	; 0
    5312:	90 e0       	ldi	r25, 0x00	; 0

}
    5314:	08 95       	ret

00005316 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    5316:	81 11       	cpse	r24, r1
    5318:	05 c0       	rjmp	.+10     	; 0x5324 <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    531a:	82 e0       	ldi	r24, 0x02	; 2
    531c:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    5320:	81 e0       	ldi	r24, 0x01	; 1
    5322:	08 95       	ret
	}
return NRK_ERROR;
    5324:	8f ef       	ldi	r24, 0xFF	; 255
}
    5326:	08 95       	ret

00005328 <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    5328:	81 11       	cpse	r24, r1
    532a:	34 c0       	rjmp	.+104    	; 0x5394 <nrk_timer_int_configure+0x6c>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    532c:	cb 01       	movw	r24, r22
    532e:	01 97       	sbiw	r24, 0x01	; 1
    5330:	05 97       	sbiw	r24, 0x05	; 5
    5332:	10 f4       	brcc	.+4      	; 0x5338 <nrk_timer_int_configure+0x10>
    5334:	60 93 98 05 	sts	0x0598, r22
	TCCR3A = 0;  
    5338:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0;//BM(WGM32);  // Automatic restart on compare, count up
    533c:	10 92 91 00 	sts	0x0091, r1
	
	OCR3AH = (compare_value >> 8) & 0xFF;	
    5340:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    5344:	40 93 98 00 	sts	0x0098, r20
	
	app_timer0_callback=callback_func;
    5348:	30 93 5b 04 	sts	0x045B, r19
    534c:	20 93 5a 04 	sts	0x045A, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    5350:	80 91 98 05 	lds	r24, 0x0598
    5354:	81 30       	cpi	r24, 0x01	; 1
    5356:	21 f4       	brne	.+8      	; 0x5360 <nrk_timer_int_configure+0x38>
    5358:	80 91 91 00 	lds	r24, 0x0091
    535c:	81 60       	ori	r24, 0x01	; 1
    535e:	11 c0       	rjmp	.+34     	; 0x5382 <nrk_timer_int_configure+0x5a>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    5360:	82 30       	cpi	r24, 0x02	; 2
    5362:	21 f4       	brne	.+8      	; 0x536c <nrk_timer_int_configure+0x44>
    5364:	80 91 91 00 	lds	r24, 0x0091
    5368:	82 60       	ori	r24, 0x02	; 2
    536a:	0b c0       	rjmp	.+22     	; 0x5382 <nrk_timer_int_configure+0x5a>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    536c:	83 30       	cpi	r24, 0x03	; 3
    536e:	21 f4       	brne	.+8      	; 0x5378 <nrk_timer_int_configure+0x50>
    5370:	80 91 91 00 	lds	r24, 0x0091
    5374:	83 60       	ori	r24, 0x03	; 3
    5376:	05 c0       	rjmp	.+10     	; 0x5382 <nrk_timer_int_configure+0x5a>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    5378:	84 30       	cpi	r24, 0x04	; 4
    537a:	31 f4       	brne	.+12     	; 0x5388 <nrk_timer_int_configure+0x60>
    537c:	80 91 91 00 	lds	r24, 0x0091
    5380:	84 60       	ori	r24, 0x04	; 4
    5382:	80 93 91 00 	sts	0x0091, r24
    5386:	08 c0       	rjmp	.+16     	; 0x5398 <nrk_timer_int_configure+0x70>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    5388:	85 30       	cpi	r24, 0x05	; 5
    538a:	31 f4       	brne	.+12     	; 0x5398 <nrk_timer_int_configure+0x70>
    538c:	80 91 91 00 	lds	r24, 0x0091
    5390:	85 60       	ori	r24, 0x05	; 5
    5392:	f7 cf       	rjmp	.-18     	; 0x5382 <nrk_timer_int_configure+0x5a>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    5394:	8f ef       	ldi	r24, 0xFF	; 255
    5396:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    5398:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    539a:	08 95       	ret

0000539c <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    539c:	80 91 b2 00 	lds	r24, 0x00B2
}
    53a0:	08 95       	ret

000053a2 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    53a2:	1f 92       	push	r1
    53a4:	0f 92       	push	r0
    53a6:	0f b6       	in	r0, 0x3f	; 63
    53a8:	0f 92       	push	r0
    53aa:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    53ac:	60 e0       	ldi	r22, 0x00	; 0
    53ae:	8a e0       	ldi	r24, 0x0A	; 10
    53b0:	0e 94 ca 18 	call	0x3194	; 0x3194 <nrk_kernel_error_add>
	while(1);
    53b4:	ff cf       	rjmp	.-2      	; 0x53b4 <__vector_default+0x12>

000053b6 <__vector_13>:
	#ifdef NRK_KERNEL_TEST
        nrk_kernel_error_add(NRK_TIMER_OVERFLOW,0);
	#endif

	return;  	
} 
    53b6:	0f 92       	push	r0
    53b8:	0f b6       	in	r0, 0x3f	; 63
    53ba:	0f 92       	push	r0
    53bc:	1f 92       	push	r1
    53be:	2f 92       	push	r2
    53c0:	3f 92       	push	r3
    53c2:	4f 92       	push	r4
    53c4:	5f 92       	push	r5
    53c6:	6f 92       	push	r6
    53c8:	7f 92       	push	r7
    53ca:	8f 92       	push	r8
    53cc:	9f 92       	push	r9
    53ce:	af 92       	push	r10
    53d0:	bf 92       	push	r11
    53d2:	cf 92       	push	r12
    53d4:	df 92       	push	r13
    53d6:	ef 92       	push	r14
    53d8:	ff 92       	push	r15
    53da:	0f 93       	push	r16
    53dc:	1f 93       	push	r17
    53de:	2f 93       	push	r18
    53e0:	3f 93       	push	r19
    53e2:	4f 93       	push	r20
    53e4:	5f 93       	push	r21
    53e6:	6f 93       	push	r22
    53e8:	7f 93       	push	r23
    53ea:	8f 93       	push	r24
    53ec:	9f 93       	push	r25
    53ee:	af 93       	push	r26
    53f0:	bf 93       	push	r27
    53f2:	cf 93       	push	r28
    53f4:	df 93       	push	r29
    53f6:	ef 93       	push	r30
    53f8:	ff 93       	push	r31
    53fa:	a0 91 43 07 	lds	r26, 0x0743
    53fe:	b0 91 44 07 	lds	r27, 0x0744
    5402:	0d b6       	in	r0, 0x3d	; 61
    5404:	0d 92       	st	X+, r0
    5406:	0e b6       	in	r0, 0x3e	; 62
    5408:	0d 92       	st	X+, r0
    540a:	1f 92       	push	r1
    540c:	a0 91 96 05 	lds	r26, 0x0596
    5410:	b0 91 97 05 	lds	r27, 0x0597
    5414:	1e 90       	ld	r1, -X
    5416:	be bf       	out	0x3e, r27	; 62
    5418:	ad bf       	out	0x3d, r26	; 61
    541a:	08 95       	ret

0000541c <__vector_32>:
   "ret\n\t" \
);

}

SIGNAL(TIMER3_COMPA_vect) {
    541c:	1f 92       	push	r1
    541e:	0f 92       	push	r0
    5420:	0f b6       	in	r0, 0x3f	; 63
    5422:	0f 92       	push	r0
    5424:	11 24       	eor	r1, r1
    5426:	0b b6       	in	r0, 0x3b	; 59
    5428:	0f 92       	push	r0
    542a:	2f 93       	push	r18
    542c:	3f 93       	push	r19
    542e:	4f 93       	push	r20
    5430:	5f 93       	push	r21
    5432:	6f 93       	push	r22
    5434:	7f 93       	push	r23
    5436:	8f 93       	push	r24
    5438:	9f 93       	push	r25
    543a:	af 93       	push	r26
    543c:	bf 93       	push	r27
    543e:	ef 93       	push	r30
    5440:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    5442:	e0 91 5a 04 	lds	r30, 0x045A
    5446:	f0 91 5b 04 	lds	r31, 0x045B
    544a:	30 97       	sbiw	r30, 0x00	; 0
    544c:	11 f0       	breq	.+4      	; 0x5452 <__vector_32+0x36>
    544e:	09 95       	icall
    5450:	04 c0       	rjmp	.+8      	; 0x545a <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5452:	60 e0       	ldi	r22, 0x00	; 0
    5454:	8a e0       	ldi	r24, 0x0A	; 10
    5456:	0e 94 ca 18 	call	0x3194	; 0x3194 <nrk_kernel_error_add>
	return;  	
}
    545a:	ff 91       	pop	r31
    545c:	ef 91       	pop	r30
    545e:	bf 91       	pop	r27
    5460:	af 91       	pop	r26
    5462:	9f 91       	pop	r25
    5464:	8f 91       	pop	r24
    5466:	7f 91       	pop	r23
    5468:	6f 91       	pop	r22
    546a:	5f 91       	pop	r21
    546c:	4f 91       	pop	r20
    546e:	3f 91       	pop	r19
    5470:	2f 91       	pop	r18
    5472:	0f 90       	pop	r0
    5474:	0b be       	out	0x3b, r0	; 59
    5476:	0f 90       	pop	r0
    5478:	0f be       	out	0x3f, r0	; 63
    547a:	0f 90       	pop	r0
    547c:	1f 90       	pop	r1
    547e:	18 95       	reti

00005480 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    5480:	1f 92       	push	r1
    5482:	0f 92       	push	r0
    5484:	0f b6       	in	r0, 0x3f	; 63
    5486:	0f 92       	push	r0
    5488:	11 24       	eor	r1, r1

	return;  	
} 
    548a:	0f 90       	pop	r0
    548c:	0f be       	out	0x3f, r0	; 63
    548e:	0f 90       	pop	r0
    5490:	1f 90       	pop	r1
    5492:	18 95       	reti

00005494 <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    5494:	04 b6       	in	r0, 0x34	; 52
    5496:	03 fe       	sbrs	r0, 3
    5498:	02 c0       	rjmp	.+4      	; 0x549e <_nrk_startup_error+0xa>
	{
	// don't clear wdt
	error|=0x10;
    549a:	80 e1       	ldi	r24, 0x10	; 16
    549c:	01 c0       	rjmp	.+2      	; 0x54a0 <_nrk_startup_error+0xc>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    549e:	80 e0       	ldi	r24, 0x00	; 0
	error|=0x10;
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    54a0:	04 b6       	in	r0, 0x34	; 52
    54a2:	02 fe       	sbrs	r0, 2
    54a4:	06 c0       	rjmp	.+12     	; 0x54b2 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    54a6:	94 b7       	in	r25, 0x34	; 52
    54a8:	9b 7f       	andi	r25, 0xFB	; 251
    54aa:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    54ac:	04 b6       	in	r0, 0x34	; 52
    54ae:	00 fe       	sbrs	r0, 0
		error|=0x04;
    54b0:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    54b2:	04 b6       	in	r0, 0x34	; 52
    54b4:	01 fe       	sbrs	r0, 1
    54b6:	05 c0       	rjmp	.+10     	; 0x54c2 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    54b8:	94 b7       	in	r25, 0x34	; 52
    54ba:	9d 7f       	andi	r25, 0xFD	; 253
    54bc:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    54be:	82 60       	ori	r24, 0x02	; 2
    54c0:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    54c2:	81 11       	cpse	r24, r1
    54c4:	0c c0       	rjmp	.+24     	; 0x54de <_nrk_startup_error+0x4a>


// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    54c6:	04 b6       	in	r0, 0x34	; 52
    54c8:	00 fe       	sbrs	r0, 0
    54ca:	04 c0       	rjmp	.+8      	; 0x54d4 <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    54cc:	94 b7       	in	r25, 0x34	; 52
    54ce:	9e 7f       	andi	r25, 0xFE	; 254
    54d0:	94 bf       	out	0x34, r25	; 52
    54d2:	01 c0       	rjmp	.+2      	; 0x54d6 <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    54d4:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    54d6:	90 91 b0 00 	lds	r25, 0x00B0
    54da:	91 11       	cpse	r25, r1
    54dc:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    54de:	08 95       	ret

000054e0 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    54e0:	81 11       	cpse	r24, r1
    54e2:	02 c0       	rjmp	.+4      	; 0x54e8 <nrk_ext_int_enable+0x8>
    54e4:	e8 9a       	sbi	0x1d, 0	; 29
    54e6:	39 c0       	rjmp	.+114    	; 0x555a <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    54e8:	81 30       	cpi	r24, 0x01	; 1
    54ea:	11 f4       	brne	.+4      	; 0x54f0 <nrk_ext_int_enable+0x10>
    54ec:	e9 9a       	sbi	0x1d, 1	; 29
    54ee:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    54f0:	82 30       	cpi	r24, 0x02	; 2
    54f2:	11 f4       	brne	.+4      	; 0x54f8 <nrk_ext_int_enable+0x18>
    54f4:	ea 9a       	sbi	0x1d, 2	; 29
    54f6:	31 c0       	rjmp	.+98     	; 0x555a <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    54f8:	83 30       	cpi	r24, 0x03	; 3
    54fa:	21 f4       	brne	.+8      	; 0x5504 <nrk_ext_int_enable+0x24>
    54fc:	80 91 6b 00 	lds	r24, 0x006B
    5500:	81 60       	ori	r24, 0x01	; 1
    5502:	29 c0       	rjmp	.+82     	; 0x5556 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    5504:	84 30       	cpi	r24, 0x04	; 4
    5506:	21 f4       	brne	.+8      	; 0x5510 <nrk_ext_int_enable+0x30>
    5508:	80 91 6b 00 	lds	r24, 0x006B
    550c:	82 60       	ori	r24, 0x02	; 2
    550e:	23 c0       	rjmp	.+70     	; 0x5556 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    5510:	85 30       	cpi	r24, 0x05	; 5
    5512:	21 f4       	brne	.+8      	; 0x551c <nrk_ext_int_enable+0x3c>
    5514:	80 91 6b 00 	lds	r24, 0x006B
    5518:	84 60       	ori	r24, 0x04	; 4
    551a:	1d c0       	rjmp	.+58     	; 0x5556 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    551c:	86 30       	cpi	r24, 0x06	; 6
    551e:	21 f4       	brne	.+8      	; 0x5528 <nrk_ext_int_enable+0x48>
    5520:	80 91 6b 00 	lds	r24, 0x006B
    5524:	88 60       	ori	r24, 0x08	; 8
    5526:	17 c0       	rjmp	.+46     	; 0x5556 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    5528:	87 30       	cpi	r24, 0x07	; 7
    552a:	21 f4       	brne	.+8      	; 0x5534 <nrk_ext_int_enable+0x54>
    552c:	80 91 6b 00 	lds	r24, 0x006B
    5530:	80 61       	ori	r24, 0x10	; 16
    5532:	11 c0       	rjmp	.+34     	; 0x5556 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    5534:	88 30       	cpi	r24, 0x08	; 8
    5536:	21 f4       	brne	.+8      	; 0x5540 <nrk_ext_int_enable+0x60>
    5538:	80 91 6b 00 	lds	r24, 0x006B
    553c:	80 62       	ori	r24, 0x20	; 32
    553e:	0b c0       	rjmp	.+22     	; 0x5556 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    5540:	89 30       	cpi	r24, 0x09	; 9
    5542:	21 f4       	brne	.+8      	; 0x554c <nrk_ext_int_enable+0x6c>
    5544:	80 91 6b 00 	lds	r24, 0x006B
    5548:	80 64       	ori	r24, 0x40	; 64
    554a:	05 c0       	rjmp	.+10     	; 0x5556 <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    554c:	8a 30       	cpi	r24, 0x0A	; 10
    554e:	39 f4       	brne	.+14     	; 0x555e <nrk_ext_int_enable+0x7e>
    5550:	80 91 6b 00 	lds	r24, 0x006B
    5554:	80 68       	ori	r24, 0x80	; 128
    5556:	80 93 6b 00 	sts	0x006B, r24
    555a:	81 e0       	ldi	r24, 0x01	; 1
    555c:	08 95       	ret
return NRK_ERROR;
    555e:	8f ef       	ldi	r24, 0xFF	; 255
}
    5560:	08 95       	ret

00005562 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    5562:	81 11       	cpse	r24, r1
    5564:	02 c0       	rjmp	.+4      	; 0x556a <nrk_ext_int_disable+0x8>
    5566:	e8 98       	cbi	0x1d, 0	; 29
    5568:	39 c0       	rjmp	.+114    	; 0x55dc <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    556a:	81 30       	cpi	r24, 0x01	; 1
    556c:	11 f4       	brne	.+4      	; 0x5572 <nrk_ext_int_disable+0x10>
    556e:	e9 98       	cbi	0x1d, 1	; 29
    5570:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    5572:	82 30       	cpi	r24, 0x02	; 2
    5574:	11 f4       	brne	.+4      	; 0x557a <nrk_ext_int_disable+0x18>
    5576:	e9 98       	cbi	0x1d, 1	; 29
    5578:	31 c0       	rjmp	.+98     	; 0x55dc <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    557a:	83 30       	cpi	r24, 0x03	; 3
    557c:	21 f4       	brne	.+8      	; 0x5586 <nrk_ext_int_disable+0x24>
    557e:	80 91 6b 00 	lds	r24, 0x006B
    5582:	8e 7f       	andi	r24, 0xFE	; 254
    5584:	29 c0       	rjmp	.+82     	; 0x55d8 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    5586:	84 30       	cpi	r24, 0x04	; 4
    5588:	21 f4       	brne	.+8      	; 0x5592 <nrk_ext_int_disable+0x30>
    558a:	80 91 6b 00 	lds	r24, 0x006B
    558e:	8d 7f       	andi	r24, 0xFD	; 253
    5590:	23 c0       	rjmp	.+70     	; 0x55d8 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    5592:	85 30       	cpi	r24, 0x05	; 5
    5594:	21 f4       	brne	.+8      	; 0x559e <nrk_ext_int_disable+0x3c>
    5596:	80 91 6b 00 	lds	r24, 0x006B
    559a:	8b 7f       	andi	r24, 0xFB	; 251
    559c:	1d c0       	rjmp	.+58     	; 0x55d8 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    559e:	86 30       	cpi	r24, 0x06	; 6
    55a0:	21 f4       	brne	.+8      	; 0x55aa <nrk_ext_int_disable+0x48>
    55a2:	80 91 6b 00 	lds	r24, 0x006B
    55a6:	87 7f       	andi	r24, 0xF7	; 247
    55a8:	17 c0       	rjmp	.+46     	; 0x55d8 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    55aa:	87 30       	cpi	r24, 0x07	; 7
    55ac:	21 f4       	brne	.+8      	; 0x55b6 <nrk_ext_int_disable+0x54>
    55ae:	80 91 6b 00 	lds	r24, 0x006B
    55b2:	8f 7e       	andi	r24, 0xEF	; 239
    55b4:	11 c0       	rjmp	.+34     	; 0x55d8 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    55b6:	88 30       	cpi	r24, 0x08	; 8
    55b8:	21 f4       	brne	.+8      	; 0x55c2 <nrk_ext_int_disable+0x60>
    55ba:	80 91 6b 00 	lds	r24, 0x006B
    55be:	8f 7d       	andi	r24, 0xDF	; 223
    55c0:	0b c0       	rjmp	.+22     	; 0x55d8 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    55c2:	89 30       	cpi	r24, 0x09	; 9
    55c4:	21 f4       	brne	.+8      	; 0x55ce <nrk_ext_int_disable+0x6c>
    55c6:	80 91 6b 00 	lds	r24, 0x006B
    55ca:	8f 7b       	andi	r24, 0xBF	; 191
    55cc:	05 c0       	rjmp	.+10     	; 0x55d8 <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    55ce:	8a 30       	cpi	r24, 0x0A	; 10
    55d0:	39 f4       	brne	.+14     	; 0x55e0 <nrk_ext_int_disable+0x7e>
    55d2:	80 91 6b 00 	lds	r24, 0x006B
    55d6:	8f 77       	andi	r24, 0x7F	; 127
    55d8:	80 93 6b 00 	sts	0x006B, r24
    55dc:	81 e0       	ldi	r24, 0x01	; 1
    55de:	08 95       	ret
return NRK_ERROR;
    55e0:	8f ef       	ldi	r24, 0xFF	; 255
}
    55e2:	08 95       	ret

000055e4 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    55e4:	81 11       	cpse	r24, r1
    55e6:	26 c0       	rjmp	.+76     	; 0x5634 <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    55e8:	50 93 5f 07 	sts	0x075F, r21
    55ec:	40 93 5e 07 	sts	0x075E, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    55f0:	61 11       	cpse	r22, r1
    55f2:	04 c0       	rjmp	.+8      	; 0x55fc <nrk_ext_int_configure+0x18>
    55f4:	80 91 69 00 	lds	r24, 0x0069
    55f8:	8c 7f       	andi	r24, 0xFC	; 252
    55fa:	3d c0       	rjmp	.+122    	; 0x5676 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    55fc:	61 30       	cpi	r22, 0x01	; 1
    55fe:	49 f4       	brne	.+18     	; 0x5612 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    5600:	80 91 69 00 	lds	r24, 0x0069
    5604:	8d 7f       	andi	r24, 0xFD	; 253
    5606:	80 93 69 00 	sts	0x0069, r24
    560a:	80 91 69 00 	lds	r24, 0x0069
    560e:	81 60       	ori	r24, 0x01	; 1
    5610:	32 c0       	rjmp	.+100    	; 0x5676 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5612:	62 30       	cpi	r22, 0x02	; 2
    5614:	49 f4       	brne	.+18     	; 0x5628 <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    5616:	80 91 69 00 	lds	r24, 0x0069
    561a:	82 60       	ori	r24, 0x02	; 2
    561c:	80 93 69 00 	sts	0x0069, r24
    5620:	80 91 69 00 	lds	r24, 0x0069
    5624:	8e 7f       	andi	r24, 0xFE	; 254
    5626:	27 c0       	rjmp	.+78     	; 0x5676 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    5628:	63 30       	cpi	r22, 0x03	; 3
    562a:	39 f5       	brne	.+78     	; 0x567a <nrk_ext_int_configure+0x96>
    562c:	80 91 69 00 	lds	r24, 0x0069
    5630:	83 60       	ori	r24, 0x03	; 3
    5632:	21 c0       	rjmp	.+66     	; 0x5676 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    5634:	81 30       	cpi	r24, 0x01	; 1
    5636:	49 f5       	brne	.+82     	; 0x568a <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    5638:	50 93 5d 07 	sts	0x075D, r21
    563c:	40 93 5c 07 	sts	0x075C, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    5640:	61 11       	cpse	r22, r1
    5642:	04 c0       	rjmp	.+8      	; 0x564c <nrk_ext_int_configure+0x68>
    5644:	80 91 69 00 	lds	r24, 0x0069
    5648:	83 7f       	andi	r24, 0xF3	; 243
    564a:	15 c0       	rjmp	.+42     	; 0x5676 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    564c:	61 30       	cpi	r22, 0x01	; 1
    564e:	49 f4       	brne	.+18     	; 0x5662 <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    5650:	80 91 69 00 	lds	r24, 0x0069
    5654:	87 7f       	andi	r24, 0xF7	; 247
    5656:	80 93 69 00 	sts	0x0069, r24
    565a:	80 91 69 00 	lds	r24, 0x0069
    565e:	84 60       	ori	r24, 0x04	; 4
    5660:	0a c0       	rjmp	.+20     	; 0x5676 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    5662:	62 30       	cpi	r22, 0x02	; 2
    5664:	61 f4       	brne	.+24     	; 0x567e <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    5666:	80 91 69 00 	lds	r24, 0x0069
    566a:	88 60       	ori	r24, 0x08	; 8
    566c:	80 93 69 00 	sts	0x0069, r24
    5670:	80 91 69 00 	lds	r24, 0x0069
    5674:	8b 7f       	andi	r24, 0xFB	; 251
    5676:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    567a:	81 e0       	ldi	r24, 0x01	; 1
    567c:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    567e:	63 30       	cpi	r22, 0x03	; 3
    5680:	e1 f7       	brne	.-8      	; 0x567a <nrk_ext_int_configure+0x96>
    5682:	80 91 69 00 	lds	r24, 0x0069
    5686:	8c 60       	ori	r24, 0x0C	; 12
    5688:	f6 cf       	rjmp	.-20     	; 0x5676 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    568a:	82 30       	cpi	r24, 0x02	; 2
    568c:	31 f5       	brne	.+76     	; 0x56da <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    568e:	50 93 61 07 	sts	0x0761, r21
    5692:	40 93 60 07 	sts	0x0760, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    5696:	61 11       	cpse	r22, r1
    5698:	04 c0       	rjmp	.+8      	; 0x56a2 <nrk_ext_int_configure+0xbe>
    569a:	80 91 69 00 	lds	r24, 0x0069
    569e:	8f 7c       	andi	r24, 0xCF	; 207
    56a0:	ea cf       	rjmp	.-44     	; 0x5676 <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    56a2:	61 30       	cpi	r22, 0x01	; 1
    56a4:	49 f4       	brne	.+18     	; 0x56b8 <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    56a6:	80 91 69 00 	lds	r24, 0x0069
    56aa:	8f 7d       	andi	r24, 0xDF	; 223
    56ac:	80 93 69 00 	sts	0x0069, r24
    56b0:	80 91 69 00 	lds	r24, 0x0069
    56b4:	80 61       	ori	r24, 0x10	; 16
    56b6:	df cf       	rjmp	.-66     	; 0x5676 <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    56b8:	62 30       	cpi	r22, 0x02	; 2
    56ba:	49 f4       	brne	.+18     	; 0x56ce <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    56bc:	80 91 69 00 	lds	r24, 0x0069
    56c0:	80 62       	ori	r24, 0x20	; 32
    56c2:	80 93 69 00 	sts	0x0069, r24
    56c6:	80 91 69 00 	lds	r24, 0x0069
    56ca:	8f 7e       	andi	r24, 0xEF	; 239
    56cc:	d4 cf       	rjmp	.-88     	; 0x5676 <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    56ce:	63 30       	cpi	r22, 0x03	; 3
    56d0:	a1 f6       	brne	.-88     	; 0x567a <nrk_ext_int_configure+0x96>
    56d2:	80 91 69 00 	lds	r24, 0x0069
    56d6:	80 63       	ori	r24, 0x30	; 48
    56d8:	ce cf       	rjmp	.-100    	; 0x5676 <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    56da:	83 50       	subi	r24, 0x03	; 3
    56dc:	88 30       	cpi	r24, 0x08	; 8
    56de:	50 f4       	brcc	.+20     	; 0x56f4 <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    56e0:	80 91 68 00 	lds	r24, 0x0068
    56e4:	81 60       	ori	r24, 0x01	; 1
    56e6:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    56ea:	50 93 63 07 	sts	0x0763, r21
    56ee:	40 93 62 07 	sts	0x0762, r20
    56f2:	c3 cf       	rjmp	.-122    	; 0x567a <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    56f4:	8f ef       	ldi	r24, 0xFF	; 255
}
    56f6:	08 95       	ret

000056f8 <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    56f8:	1f 92       	push	r1
    56fa:	0f 92       	push	r0
    56fc:	0f b6       	in	r0, 0x3f	; 63
    56fe:	0f 92       	push	r0
    5700:	11 24       	eor	r1, r1
    5702:	0b b6       	in	r0, 0x3b	; 59
    5704:	0f 92       	push	r0
    5706:	2f 93       	push	r18
    5708:	3f 93       	push	r19
    570a:	4f 93       	push	r20
    570c:	5f 93       	push	r21
    570e:	6f 93       	push	r22
    5710:	7f 93       	push	r23
    5712:	8f 93       	push	r24
    5714:	9f 93       	push	r25
    5716:	af 93       	push	r26
    5718:	bf 93       	push	r27
    571a:	ef 93       	push	r30
    571c:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    571e:	e0 91 62 07 	lds	r30, 0x0762
    5722:	f0 91 63 07 	lds	r31, 0x0763
    5726:	30 97       	sbiw	r30, 0x00	; 0
    5728:	11 f0       	breq	.+4      	; 0x572e <__vector_9+0x36>
    572a:	09 95       	icall
    572c:	04 c0       	rjmp	.+8      	; 0x5736 <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    572e:	60 e0       	ldi	r22, 0x00	; 0
    5730:	8a e0       	ldi	r24, 0x0A	; 10
    5732:	0e 94 ca 18 	call	0x3194	; 0x3194 <nrk_kernel_error_add>
	return;  	
}
    5736:	ff 91       	pop	r31
    5738:	ef 91       	pop	r30
    573a:	bf 91       	pop	r27
    573c:	af 91       	pop	r26
    573e:	9f 91       	pop	r25
    5740:	8f 91       	pop	r24
    5742:	7f 91       	pop	r23
    5744:	6f 91       	pop	r22
    5746:	5f 91       	pop	r21
    5748:	4f 91       	pop	r20
    574a:	3f 91       	pop	r19
    574c:	2f 91       	pop	r18
    574e:	0f 90       	pop	r0
    5750:	0b be       	out	0x3b, r0	; 59
    5752:	0f 90       	pop	r0
    5754:	0f be       	out	0x3f, r0	; 63
    5756:	0f 90       	pop	r0
    5758:	1f 90       	pop	r1
    575a:	18 95       	reti

0000575c <__vector_1>:


SIGNAL(INT0_vect) {
    575c:	1f 92       	push	r1
    575e:	0f 92       	push	r0
    5760:	0f b6       	in	r0, 0x3f	; 63
    5762:	0f 92       	push	r0
    5764:	11 24       	eor	r1, r1
    5766:	0b b6       	in	r0, 0x3b	; 59
    5768:	0f 92       	push	r0
    576a:	2f 93       	push	r18
    576c:	3f 93       	push	r19
    576e:	4f 93       	push	r20
    5770:	5f 93       	push	r21
    5772:	6f 93       	push	r22
    5774:	7f 93       	push	r23
    5776:	8f 93       	push	r24
    5778:	9f 93       	push	r25
    577a:	af 93       	push	r26
    577c:	bf 93       	push	r27
    577e:	ef 93       	push	r30
    5780:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    5782:	e0 91 5e 07 	lds	r30, 0x075E
    5786:	f0 91 5f 07 	lds	r31, 0x075F
    578a:	30 97       	sbiw	r30, 0x00	; 0
    578c:	11 f0       	breq	.+4      	; 0x5792 <__vector_1+0x36>
    578e:	09 95       	icall
    5790:	04 c0       	rjmp	.+8      	; 0x579a <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5792:	60 e0       	ldi	r22, 0x00	; 0
    5794:	8a e0       	ldi	r24, 0x0A	; 10
    5796:	0e 94 ca 18 	call	0x3194	; 0x3194 <nrk_kernel_error_add>
	return;  	
}
    579a:	ff 91       	pop	r31
    579c:	ef 91       	pop	r30
    579e:	bf 91       	pop	r27
    57a0:	af 91       	pop	r26
    57a2:	9f 91       	pop	r25
    57a4:	8f 91       	pop	r24
    57a6:	7f 91       	pop	r23
    57a8:	6f 91       	pop	r22
    57aa:	5f 91       	pop	r21
    57ac:	4f 91       	pop	r20
    57ae:	3f 91       	pop	r19
    57b0:	2f 91       	pop	r18
    57b2:	0f 90       	pop	r0
    57b4:	0b be       	out	0x3b, r0	; 59
    57b6:	0f 90       	pop	r0
    57b8:	0f be       	out	0x3f, r0	; 63
    57ba:	0f 90       	pop	r0
    57bc:	1f 90       	pop	r1
    57be:	18 95       	reti

000057c0 <__vector_2>:

SIGNAL(INT1_vect) {
    57c0:	1f 92       	push	r1
    57c2:	0f 92       	push	r0
    57c4:	0f b6       	in	r0, 0x3f	; 63
    57c6:	0f 92       	push	r0
    57c8:	11 24       	eor	r1, r1
    57ca:	0b b6       	in	r0, 0x3b	; 59
    57cc:	0f 92       	push	r0
    57ce:	2f 93       	push	r18
    57d0:	3f 93       	push	r19
    57d2:	4f 93       	push	r20
    57d4:	5f 93       	push	r21
    57d6:	6f 93       	push	r22
    57d8:	7f 93       	push	r23
    57da:	8f 93       	push	r24
    57dc:	9f 93       	push	r25
    57de:	af 93       	push	r26
    57e0:	bf 93       	push	r27
    57e2:	ef 93       	push	r30
    57e4:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    57e6:	e0 91 5c 07 	lds	r30, 0x075C
    57ea:	f0 91 5d 07 	lds	r31, 0x075D
    57ee:	30 97       	sbiw	r30, 0x00	; 0
    57f0:	11 f0       	breq	.+4      	; 0x57f6 <__vector_2+0x36>
    57f2:	09 95       	icall
    57f4:	04 c0       	rjmp	.+8      	; 0x57fe <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    57f6:	60 e0       	ldi	r22, 0x00	; 0
    57f8:	8a e0       	ldi	r24, 0x0A	; 10
    57fa:	0e 94 ca 18 	call	0x3194	; 0x3194 <nrk_kernel_error_add>
	return;  	
}
    57fe:	ff 91       	pop	r31
    5800:	ef 91       	pop	r30
    5802:	bf 91       	pop	r27
    5804:	af 91       	pop	r26
    5806:	9f 91       	pop	r25
    5808:	8f 91       	pop	r24
    580a:	7f 91       	pop	r23
    580c:	6f 91       	pop	r22
    580e:	5f 91       	pop	r21
    5810:	4f 91       	pop	r20
    5812:	3f 91       	pop	r19
    5814:	2f 91       	pop	r18
    5816:	0f 90       	pop	r0
    5818:	0b be       	out	0x3b, r0	; 59
    581a:	0f 90       	pop	r0
    581c:	0f be       	out	0x3f, r0	; 63
    581e:	0f 90       	pop	r0
    5820:	1f 90       	pop	r1
    5822:	18 95       	reti

00005824 <__vector_3>:

SIGNAL(INT2_vect) {
    5824:	1f 92       	push	r1
    5826:	0f 92       	push	r0
    5828:	0f b6       	in	r0, 0x3f	; 63
    582a:	0f 92       	push	r0
    582c:	11 24       	eor	r1, r1
    582e:	0b b6       	in	r0, 0x3b	; 59
    5830:	0f 92       	push	r0
    5832:	2f 93       	push	r18
    5834:	3f 93       	push	r19
    5836:	4f 93       	push	r20
    5838:	5f 93       	push	r21
    583a:	6f 93       	push	r22
    583c:	7f 93       	push	r23
    583e:	8f 93       	push	r24
    5840:	9f 93       	push	r25
    5842:	af 93       	push	r26
    5844:	bf 93       	push	r27
    5846:	ef 93       	push	r30
    5848:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    584a:	e0 91 60 07 	lds	r30, 0x0760
    584e:	f0 91 61 07 	lds	r31, 0x0761
    5852:	30 97       	sbiw	r30, 0x00	; 0
    5854:	11 f0       	breq	.+4      	; 0x585a <__vector_3+0x36>
    5856:	09 95       	icall
    5858:	04 c0       	rjmp	.+8      	; 0x5862 <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    585a:	60 e0       	ldi	r22, 0x00	; 0
    585c:	8a e0       	ldi	r24, 0x0A	; 10
    585e:	0e 94 ca 18 	call	0x3194	; 0x3194 <nrk_kernel_error_add>
	return;  	
}
    5862:	ff 91       	pop	r31
    5864:	ef 91       	pop	r30
    5866:	bf 91       	pop	r27
    5868:	af 91       	pop	r26
    586a:	9f 91       	pop	r25
    586c:	8f 91       	pop	r24
    586e:	7f 91       	pop	r23
    5870:	6f 91       	pop	r22
    5872:	5f 91       	pop	r21
    5874:	4f 91       	pop	r20
    5876:	3f 91       	pop	r19
    5878:	2f 91       	pop	r18
    587a:	0f 90       	pop	r0
    587c:	0b be       	out	0x3b, r0	; 59
    587e:	0f 90       	pop	r0
    5880:	0f be       	out	0x3f, r0	; 63
    5882:	0f 90       	pop	r0
    5884:	1f 90       	pop	r1
    5886:	18 95       	reti

00005888 <nrk_watchdog_disable>:
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    5888:	a8 95       	wdr
#include <util/atomic.h>

void nrk_watchdog_disable()
{
nrk_watchdog_reset();
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    588a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    588c:	f8 94       	cli
{
	MCUSR &= ~(1<<WDRF);
    588e:	84 b7       	in	r24, 0x34	; 52
    5890:	87 7f       	andi	r24, 0xF7	; 247
    5892:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE) | (1<<WDE);
    5894:	e0 e6       	ldi	r30, 0x60	; 96
    5896:	f0 e0       	ldi	r31, 0x00	; 0
    5898:	80 81       	ld	r24, Z
    589a:	88 61       	ori	r24, 0x18	; 24
    589c:	80 83       	st	Z, r24
	WDTCSR = 0;
    589e:	10 82       	st	Z, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    58a0:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    58a2:	08 95       	ret

000058a4 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    58a4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    58a6:	f8 94       	cli
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    58a8:	a8 95       	wdr
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
{
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    58aa:	84 b7       	in	r24, 0x34	; 52
    58ac:	87 7f       	andi	r24, 0xF7	; 247
    58ae:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    58b0:	e0 e6       	ldi	r30, 0x60	; 96
    58b2:	f0 e0       	ldi	r31, 0x00	; 0
    58b4:	80 81       	ld	r24, Z
    58b6:	88 61       	ori	r24, 0x18	; 24
    58b8:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    58ba:	8d e0       	ldi	r24, 0x0D	; 13
    58bc:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    58be:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    58c0:	08 95       	ret

000058c2 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    58c2:	04 b6       	in	r0, 0x34	; 52
    58c4:	03 fe       	sbrs	r0, 3
    58c6:	02 c0       	rjmp	.+4      	; 0x58cc <nrk_watchdog_check+0xa>
return NRK_ERROR;
    58c8:	8f ef       	ldi	r24, 0xFF	; 255
    58ca:	08 95       	ret
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    58cc:	81 e0       	ldi	r24, 0x01	; 1
return NRK_ERROR;
}
    58ce:	08 95       	ret

000058d0 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    58d0:	a8 95       	wdr
    58d2:	08 95       	ret

000058d4 <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    58d4:	08 95       	ret

000058d6 <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    58d6:	83 b7       	in	r24, 0x33	; 51
    58d8:	81 7f       	andi	r24, 0xF1	; 241
    58da:	86 60       	ori	r24, 0x06	; 6
    58dc:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    58de:	83 b7       	in	r24, 0x33	; 51
    58e0:	81 60       	ori	r24, 0x01	; 1
    58e2:	83 bf       	out	0x33, r24	; 51
    58e4:	88 95       	sleep
    58e6:	83 b7       	in	r24, 0x33	; 51
    58e8:	8e 7f       	andi	r24, 0xFE	; 254
    58ea:	83 bf       	out	0x33, r24	; 51
    58ec:	08 95       	ret

000058ee <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    58ee:	83 b7       	in	r24, 0x33	; 51
    58f0:	81 7f       	andi	r24, 0xF1	; 241
    58f2:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    58f4:	83 b7       	in	r24, 0x33	; 51
    58f6:	81 60       	ori	r24, 0x01	; 1
    58f8:	83 bf       	out	0x33, r24	; 51
    58fa:	88 95       	sleep
    58fc:	83 b7       	in	r24, 0x33	; 51
    58fe:	8e 7f       	andi	r24, 0xFE	; 254
    5900:	83 bf       	out	0x33, r24	; 51
    5902:	08 95       	ret

00005904 <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    5904:	fc 01       	movw	r30, r24
    5906:	76 83       	std	Z+6, r23	; 0x06
    5908:	65 83       	std	Z+5, r22	; 0x05
    590a:	08 95       	ret

0000590c <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    590c:	ef 92       	push	r14
    590e:	ff 92       	push	r15
    5910:	0f 93       	push	r16
    5912:	1f 93       	push	r17
    5914:	cf 93       	push	r28
    5916:	df 93       	push	r29
    5918:	8c 01       	movw	r16, r24
    591a:	7b 01       	movw	r14, r22
    591c:	ea 01       	movw	r28, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    591e:	40 32       	cpi	r20, 0x20	; 32
    5920:	51 05       	cpc	r21, r1
    5922:	18 f4       	brcc	.+6      	; 0x592a <nrk_task_set_stk+0x1e>
    5924:	81 e1       	ldi	r24, 0x11	; 17
    5926:	0e 94 bc 18 	call	0x3178	; 0x3178 <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    592a:	21 97       	sbiw	r28, 0x01	; 1
    592c:	ce 0d       	add	r28, r14
    592e:	df 1d       	adc	r29, r15
    5930:	f8 01       	movw	r30, r16
    5932:	d2 83       	std	Z+2, r29	; 0x02
    5934:	c1 83       	std	Z+1, r28	; 0x01
task->Pbos = (void *) &stk_base[0];
    5936:	f4 82       	std	Z+4, r15	; 0x04
    5938:	e3 82       	std	Z+3, r14	; 0x03

}
    593a:	df 91       	pop	r29
    593c:	cf 91       	pop	r28
    593e:	1f 91       	pop	r17
    5940:	0f 91       	pop	r16
    5942:	ff 90       	pop	r15
    5944:	ef 90       	pop	r14
    5946:	08 95       	ret

00005948 <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    5948:	25 e5       	ldi	r18, 0x55	; 85
    594a:	fa 01       	movw	r30, r20
    594c:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    594e:	fb 01       	movw	r30, r22
    5950:	32 97       	sbiw	r30, 0x02	; 2
    5952:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    5954:	31 96       	adiw	r30, 0x01	; 1
    5956:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    5958:	33 97       	sbiw	r30, 0x03	; 3
    595a:	11 82       	std	Z+1, r1	; 0x01
    595c:	10 82       	st	Z, r1
    *(--stk) = 0;       
    595e:	32 97       	sbiw	r30, 0x02	; 2
    5960:	11 82       	std	Z+1, r1	; 0x01
    5962:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    5964:	32 97       	sbiw	r30, 0x02	; 2
    5966:	11 82       	std	Z+1, r1	; 0x01
    5968:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    596a:	32 97       	sbiw	r30, 0x02	; 2
    596c:	11 82       	std	Z+1, r1	; 0x01
    596e:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    5970:	32 97       	sbiw	r30, 0x02	; 2
    5972:	11 82       	std	Z+1, r1	; 0x01
    5974:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    5976:	32 97       	sbiw	r30, 0x02	; 2
    5978:	11 82       	std	Z+1, r1	; 0x01
    597a:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    597c:	32 97       	sbiw	r30, 0x02	; 2
    597e:	11 82       	std	Z+1, r1	; 0x01
    5980:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5982:	32 97       	sbiw	r30, 0x02	; 2
    5984:	11 82       	std	Z+1, r1	; 0x01
    5986:	10 82       	st	Z, r1

    *(--stk) = 0; 
    5988:	32 97       	sbiw	r30, 0x02	; 2
    598a:	11 82       	std	Z+1, r1	; 0x01
    598c:	10 82       	st	Z, r1
    *(--stk) = 0; 
    598e:	32 97       	sbiw	r30, 0x02	; 2
    5990:	11 82       	std	Z+1, r1	; 0x01
    5992:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5994:	32 97       	sbiw	r30, 0x02	; 2
    5996:	11 82       	std	Z+1, r1	; 0x01
    5998:	10 82       	st	Z, r1
    *(--stk) = 0; 
    599a:	32 97       	sbiw	r30, 0x02	; 2
    599c:	11 82       	std	Z+1, r1	; 0x01
    599e:	10 82       	st	Z, r1
    *(--stk) = 0; 
    59a0:	32 97       	sbiw	r30, 0x02	; 2
    59a2:	11 82       	std	Z+1, r1	; 0x01
    59a4:	10 82       	st	Z, r1
    *(--stk) = 0; 
    59a6:	32 97       	sbiw	r30, 0x02	; 2
    59a8:	11 82       	std	Z+1, r1	; 0x01
    59aa:	10 82       	st	Z, r1
    *(--stk) = 0; 
    59ac:	32 97       	sbiw	r30, 0x02	; 2
    59ae:	11 82       	std	Z+1, r1	; 0x01
    59b0:	10 82       	st	Z, r1
    *(--stk) = 0; 
    59b2:	32 97       	sbiw	r30, 0x02	; 2
    59b4:	11 82       	std	Z+1, r1	; 0x01
    59b6:	10 82       	st	Z, r1
    *(--stk) = 0;
    59b8:	cb 01       	movw	r24, r22
    59ba:	84 97       	sbiw	r24, 0x24	; 36
    59bc:	fc 01       	movw	r30, r24
    59be:	11 82       	std	Z+1, r1	; 0x01
    59c0:	10 82       	st	Z, r1


    return ((void *)stk);
}
    59c2:	08 95       	ret

000059c4 <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    59c4:	85 e5       	ldi	r24, 0x55	; 85
    59c6:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    59ca:	ee ef       	ldi	r30, 0xFE	; 254
    59cc:	f1 e4       	ldi	r31, 0x41	; 65
    59ce:	f0 93 97 05 	sts	0x0597, r31
    59d2:	e0 93 96 05 	sts	0x0596, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    59d6:	82 e1       	ldi	r24, 0x12	; 18
    59d8:	98 e1       	ldi	r25, 0x18	; 24
    59da:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    59dc:	80 93 ff 41 	sts	0x41FF, r24
    59e0:	08 95       	ret

000059e2 <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    59e2:	82 e1       	ldi	r24, 0x12	; 18
    59e4:	98 e1       	ldi	r25, 0x18	; 24
    59e6:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    59ea:	80 93 ff 41 	sts	0x41FF, r24
    59ee:	08 95       	ret

000059f0 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    59f0:	0e 94 26 29 	call	0x524c	; 0x524c <_nrk_setup_timer>
  nrk_int_enable();  
    59f4:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <nrk_int_enable>

000059f8 <nrk_start_high_ready_task>:
    59f8:	a0 91 34 07 	lds	r26, 0x0734
    59fc:	b0 91 35 07 	lds	r27, 0x0735
    5a00:	cd 91       	ld	r28, X+
    5a02:	cd bf       	out	0x3d, r28	; 61
    5a04:	dd 91       	ld	r29, X+
    5a06:	de bf       	out	0x3e, r29	; 62
    5a08:	ff 91       	pop	r31
    5a0a:	ef 91       	pop	r30
    5a0c:	df 91       	pop	r29
    5a0e:	cf 91       	pop	r28
    5a10:	bf 91       	pop	r27
    5a12:	af 91       	pop	r26
    5a14:	9f 91       	pop	r25
    5a16:	8f 91       	pop	r24
    5a18:	7f 91       	pop	r23
    5a1a:	6f 91       	pop	r22
    5a1c:	5f 91       	pop	r21
    5a1e:	4f 91       	pop	r20
    5a20:	3f 91       	pop	r19
    5a22:	2f 91       	pop	r18
    5a24:	1f 91       	pop	r17
    5a26:	0f 91       	pop	r16
    5a28:	ff 90       	pop	r15
    5a2a:	ef 90       	pop	r14
    5a2c:	df 90       	pop	r13
    5a2e:	cf 90       	pop	r12
    5a30:	bf 90       	pop	r11
    5a32:	af 90       	pop	r10
    5a34:	9f 90       	pop	r9
    5a36:	8f 90       	pop	r8
    5a38:	7f 90       	pop	r7
    5a3a:	6f 90       	pop	r6
    5a3c:	5f 90       	pop	r5
    5a3e:	4f 90       	pop	r4
    5a40:	3f 90       	pop	r3
    5a42:	2f 90       	pop	r2
    5a44:	1f 90       	pop	r1
    5a46:	0f 90       	pop	r0
    5a48:	0f be       	out	0x3f, r0	; 63
    5a4a:	0f 90       	pop	r0
    5a4c:	18 95       	reti

00005a4e <main>:
	//printf("prev time :%lu global time :%lu\r\n", prev_local_time, global_time);
}	

uint8_t msg[PKT_LEN];

void main() {
    5a4e:	cf 93       	push	r28
    5a50:	df 93       	push	r29
    5a52:	cd b7       	in	r28, 0x3d	; 61
    5a54:	de b7       	in	r29, 0x3e	; 62
    5a56:	2b 97       	sbiw	r28, 0x0b	; 11
    5a58:	0f b6       	in	r0, 0x3f	; 63
    5a5a:	f8 94       	cli
    5a5c:	de bf       	out	0x3e, r29	; 62
    5a5e:	0f be       	out	0x3f, r0	; 63
    5a60:	cd bf       	out	0x3d, r28	; 61
	nrk_setup_ports();
    5a62:	0e 94 2f 12 	call	0x245e	; 0x245e <nrk_setup_ports>
	nrk_setup_uart(UART_BAUDRATE_9K6);
    5a66:	8f ec       	ldi	r24, 0xCF	; 207
    5a68:	90 e0       	ldi	r25, 0x00	; 0
    5a6a:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <nrk_setup_uart>
	
	//nrk_init();
	
	nrk_led_clr(0);
    5a6e:	80 e0       	ldi	r24, 0x00	; 0
    5a70:	90 e0       	ldi	r25, 0x00	; 0
    5a72:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <nrk_led_clr>
	nrk_led_clr(1);
    5a76:	81 e0       	ldi	r24, 0x01	; 1
    5a78:	90 e0       	ldi	r25, 0x00	; 0
    5a7a:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <nrk_led_clr>
	nrk_led_clr(2);
    5a7e:	82 e0       	ldi	r24, 0x02	; 2
    5a80:	90 e0       	ldi	r25, 0x00	; 0
    5a82:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <nrk_led_clr>
	nrk_led_clr(3);
    5a86:	83 e0       	ldi	r24, 0x03	; 3
    5a88:	90 e0       	ldi	r25, 0x00	; 0
    5a8a:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <nrk_led_clr>
	
	nrk_time_set(0, 0);
    5a8e:	20 e0       	ldi	r18, 0x00	; 0
    5a90:	30 e0       	ldi	r19, 0x00	; 0
    5a92:	a9 01       	movw	r20, r18
    5a94:	60 e0       	ldi	r22, 0x00	; 0
    5a96:	70 e0       	ldi	r23, 0x00	; 0
    5a98:	cb 01       	movw	r24, r22
    5a9a:	0e 94 9c 23 	call	0x4738	; 0x4738 <nrk_time_set>

	flash_init(14);
    5a9e:	8e e0       	ldi	r24, 0x0E	; 14
    5aa0:	0e 94 1c 0a 	call	0x1438	; 0x1438 <flash_init>
	flash_timer_setup();
    5aa4:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <flash_timer_setup>

	val = nrk_register_driver(&dev_manager_ff3_sensors, FIREFLY_3_SENSOR_BASIC);
    5aa8:	63 e0       	ldi	r22, 0x03	; 3
    5aaa:	8d e0       	ldi	r24, 0x0D	; 13
    5aac:	97 e0       	ldi	r25, 0x07	; 7
    5aae:	0e 94 93 27 	call	0x4f26	; 0x4f26 <nrk_register_driver>
    5ab2:	80 93 64 05 	sts	0x0564, r24
	//nrk_create_taskset();
	//nrk_start();
	int i,cycles_since_sync;
	int8_t fd, ret;
	uint32_t press;
	volatile bool already_tx = false;
    5ab6:	1d 82       	std	Y+5, r1	; 0x05

	fd = nrk_open(FIREFLY_3_SENSOR_BASIC, READ);
    5ab8:	65 e0       	ldi	r22, 0x05	; 5
    5aba:	83 e0       	ldi	r24, 0x03	; 3
    5abc:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <nrk_open>
    5ac0:	8f 83       	std	Y+7, r24	; 0x07

	printf("waiting for sync message\r\n");
    5ac2:	88 e6       	ldi	r24, 0x68	; 104
    5ac4:	92 e0       	ldi	r25, 0x02	; 2
    5ac6:	0e 94 55 31 	call	0x62aa	; 0x62aa <puts>

	flash_enable(5, NULL, time_sync_callback);
    5aca:	4e e3       	ldi	r20, 0x3E	; 62
    5acc:	52 e0       	ldi	r21, 0x02	; 2
    5ace:	60 e0       	ldi	r22, 0x00	; 0
    5ad0:	70 e0       	ldi	r23, 0x00	; 0
    5ad2:	85 e0       	ldi	r24, 0x05	; 5
    5ad4:	0e 94 41 0b 	call	0x1682	; 0x1682 <flash_enable>
	flash_set_retransmit(0);
    5ad8:	80 e0       	ldi	r24, 0x00	; 0
    5ada:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <flash_set_retransmit>
	cycles_since_sync = 0;
	bool already_sync = false;
	int cycle_count;
	uint8_t sensing_slot = (nodeID == NUM_NODES) ? 1 : nodeID + 1;
    5ade:	80 91 00 02 	lds	r24, 0x0200
    5ae2:	8a 30       	cpi	r24, 0x0A	; 10
    5ae4:	11 f0       	breq	.+4      	; 0x5aea <main+0x9c>
    5ae6:	8f 5f       	subi	r24, 0xFF	; 255
    5ae8:	01 c0       	rjmp	.+2      	; 0x5aec <main+0x9e>
    5aea:	81 e0       	ldi	r24, 0x01	; 1
	printf("waiting for sync message\r\n");

	flash_enable(5, NULL, time_sync_callback);
	flash_set_retransmit(0);
	cycles_since_sync = 0;
	bool already_sync = false;
    5aec:	1e 82       	std	Y+6, r1	; 0x06

	printf("waiting for sync message\r\n");

	flash_enable(5, NULL, time_sync_callback);
	flash_set_retransmit(0);
	cycles_since_sync = 0;
    5aee:	81 2c       	mov	r8, r1
    5af0:	91 2c       	mov	r9, r1
			cycle_count = 0;
			printf("press:%lu\r\n", press);
		}
		uint32_t cycle_start_time = flash_get_current_time();
		int slot = ((cycle_start_time/TDMA_SLOT_LEN) % NUM_NODES);
		if (slot == sensing_slot){
    5af2:	28 2f       	mov	r18, r24
    5af4:	30 e0       	ldi	r19, 0x00	; 0
    5af6:	3b 87       	std	Y+11, r19	; 0x0b
    5af8:	2a 87       	std	Y+10, r18	; 0x0a
	cycles_since_sync = 0;
	bool already_sync = false;
	int cycle_count;
	uint8_t sensing_slot = (nodeID == NUM_NODES) ? 1 : nodeID + 1;
	while(1){
		cycle_count ++;
    5afa:	3f ef       	ldi	r19, 0xFF	; 255
    5afc:	23 1a       	sub	r2, r19
    5afe:	33 0a       	sbc	r3, r19
		if (cycle_count > 1000){
    5b00:	89 ee       	ldi	r24, 0xE9	; 233
    5b02:	28 16       	cp	r2, r24
    5b04:	83 e0       	ldi	r24, 0x03	; 3
    5b06:	38 06       	cpc	r3, r24
    5b08:	b4 f0       	brlt	.+44     	; 0x5b36 <main+0xe8>
			cycle_count = 0;
			printf("press:%lu\r\n", press);
    5b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    5b0c:	8f 93       	push	r24
    5b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b10:	8f 93       	push	r24
    5b12:	8a 81       	ldd	r24, Y+2	; 0x02
    5b14:	8f 93       	push	r24
    5b16:	89 81       	ldd	r24, Y+1	; 0x01
    5b18:	8f 93       	push	r24
    5b1a:	a2 e8       	ldi	r26, 0x82	; 130
    5b1c:	b2 e0       	ldi	r27, 0x02	; 2
    5b1e:	bf 93       	push	r27
    5b20:	af 93       	push	r26
    5b22:	0e 94 3b 31 	call	0x6276	; 0x6276 <printf>
    5b26:	0f 90       	pop	r0
    5b28:	0f 90       	pop	r0
    5b2a:	0f 90       	pop	r0
    5b2c:	0f 90       	pop	r0
    5b2e:	0f 90       	pop	r0
    5b30:	0f 90       	pop	r0
	int cycle_count;
	uint8_t sensing_slot = (nodeID == NUM_NODES) ? 1 : nodeID + 1;
	while(1){
		cycle_count ++;
		if (cycle_count > 1000){
			cycle_count = 0;
    5b32:	21 2c       	mov	r2, r1
    5b34:	31 2c       	mov	r3, r1
			printf("press:%lu\r\n", press);
		}
		uint32_t cycle_start_time = flash_get_current_time();
    5b36:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <flash_get_current_time>
		int slot = ((cycle_start_time/TDMA_SLOT_LEN) % NUM_NODES);
    5b3a:	b9 01       	movw	r22, r18
    5b3c:	ca 01       	movw	r24, r20
    5b3e:	20 ed       	ldi	r18, 0xD0	; 208
    5b40:	37 e0       	ldi	r19, 0x07	; 7
    5b42:	40 e0       	ldi	r20, 0x00	; 0
    5b44:	50 e0       	ldi	r21, 0x00	; 0
    5b46:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__udivmodsi4>
    5b4a:	ca 01       	movw	r24, r20
    5b4c:	b9 01       	movw	r22, r18
    5b4e:	2a e0       	ldi	r18, 0x0A	; 10
    5b50:	30 e0       	ldi	r19, 0x00	; 0
    5b52:	40 e0       	ldi	r20, 0x00	; 0
    5b54:	50 e0       	ldi	r21, 0x00	; 0
    5b56:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__udivmodsi4>
    5b5a:	2b 01       	movw	r4, r22
    5b5c:	3c 01       	movw	r6, r24
    5b5e:	79 87       	std	Y+9, r23	; 0x09
    5b60:	68 87       	std	Y+8, r22	; 0x08
		if (slot == sensing_slot){
    5b62:	aa 85       	ldd	r26, Y+10	; 0x0a
    5b64:	bb 85       	ldd	r27, Y+11	; 0x0b
    5b66:	6a 17       	cp	r22, r26
    5b68:	7b 07       	cpc	r23, r27
    5b6a:	f1 f4       	brne	.+60     	; 0x5ba8 <main+0x15a>
		 	already_tx = false;
    5b6c:	1d 82       	std	Y+5, r1	; 0x05
		 	ret = nrk_set_status(fd,SENSOR_SELECT,PRESS);
    5b6e:	49 e0       	ldi	r20, 0x09	; 9
    5b70:	61 e0       	ldi	r22, 0x01	; 1
    5b72:	8f 81       	ldd	r24, Y+7	; 0x07
    5b74:	0e 94 47 28 	call	0x508e	; 0x508e <nrk_set_status>
		 	ret = nrk_read(fd,(uint8_t *)&press,4);
    5b78:	44 e0       	ldi	r20, 0x04	; 4
    5b7a:	be 01       	movw	r22, r28
    5b7c:	6f 5f       	subi	r22, 0xFF	; 255
    5b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    5b80:	8f 81       	ldd	r24, Y+7	; 0x07
    5b82:	0e 94 2a 28 	call	0x5054	; 0x5054 <nrk_read>
			nrk_spin_wait_us(flash_get_current_time()%TDMA_SLOT_LEN);
    5b86:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <flash_get_current_time>
    5b8a:	e0 ed       	ldi	r30, 0xD0	; 208
    5b8c:	ae 2e       	mov	r10, r30
    5b8e:	f7 e0       	ldi	r31, 0x07	; 7
    5b90:	bf 2e       	mov	r11, r31
    5b92:	c1 2c       	mov	r12, r1
    5b94:	d1 2c       	mov	r13, r1
    5b96:	e1 2c       	mov	r14, r1
    5b98:	f1 2c       	mov	r15, r1
    5b9a:	00 e0       	ldi	r16, 0x00	; 0
    5b9c:	10 e0       	ldi	r17, 0x00	; 0
    5b9e:	0e 94 b9 2f 	call	0x5f72	; 0x5f72 <__umoddi3>
    5ba2:	c9 01       	movw	r24, r18
    5ba4:	0e 94 81 28 	call	0x5102	; 0x5102 <nrk_spin_wait_us>
		}
		/* root node's synchronization slot */
		if ((slot == 0) && (!already_sync)){ //root's slot
    5ba8:	45 28       	or	r4, r5
    5baa:	46 28       	or	r4, r6
    5bac:	47 28       	or	r4, r7
    5bae:	a9 f4       	brne	.+42     	; 0x5bda <main+0x18c>
    5bb0:	be 81       	ldd	r27, Y+6	; 0x06
    5bb2:	b1 11       	cpse	r27, r1
    5bb4:	12 c0       	rjmp	.+36     	; 0x5bda <main+0x18c>
			cycles_since_sync ++;
    5bb6:	2f ef       	ldi	r18, 0xFF	; 255
    5bb8:	82 1a       	sub	r8, r18
    5bba:	92 0a       	sbc	r9, r18
			if (cycles_since_sync >= INTER_SYNC_CYCLES){
    5bbc:	3a e0       	ldi	r19, 0x0A	; 10
    5bbe:	83 16       	cp	r8, r19
    5bc0:	91 04       	cpc	r9, r1
    5bc2:	0c f4       	brge	.+2      	; 0x5bc6 <main+0x178>
    5bc4:	9a cf       	rjmp	.-204    	; 0x5afa <main+0xac>
				//printf("waiting for sync message\r\n");
				flash_enable(5, NULL, time_sync_callback);
    5bc6:	4e e3       	ldi	r20, 0x3E	; 62
    5bc8:	52 e0       	ldi	r21, 0x02	; 2
    5bca:	60 e0       	ldi	r22, 0x00	; 0
    5bcc:	70 e0       	ldi	r23, 0x00	; 0
    5bce:	85 e0       	ldi	r24, 0x05	; 5
    5bd0:	0e 94 41 0b 	call	0x1682	; 0x1682 <flash_enable>
				already_sync = true;
    5bd4:	81 e0       	ldi	r24, 0x01	; 1
    5bd6:	8e 83       	std	Y+6, r24	; 0x06
    5bd8:	90 cf       	rjmp	.-224    	; 0x5afa <main+0xac>
			}
		}
		/* occurs only one time per full tdma cycle */
		else if ((slot == nodeID) && (!already_tx)){
    5bda:	80 91 00 02 	lds	r24, 0x0200
    5bde:	90 e0       	ldi	r25, 0x00	; 0
    5be0:	a8 85       	ldd	r26, Y+8	; 0x08
    5be2:	b9 85       	ldd	r27, Y+9	; 0x09
    5be4:	a8 17       	cp	r26, r24
    5be6:	b9 07       	cpc	r27, r25
    5be8:	09 f0       	breq	.+2      	; 0x5bec <main+0x19e>
    5bea:	87 cf       	rjmp	.-242    	; 0x5afa <main+0xac>
    5bec:	8d 81       	ldd	r24, Y+5	; 0x05
    5bee:	81 11       	cpse	r24, r1
    5bf0:	84 cf       	rjmp	.-248    	; 0x5afa <main+0xac>
			//it's my turn!
			already_sync = false;
			//TODO: Send timestamp to master
			//TODO: Send RSSI to master
			
			nrk_led_toggle(RED_LED);
    5bf2:	80 e0       	ldi	r24, 0x00	; 0
    5bf4:	90 e0       	ldi	r25, 0x00	; 0
    5bf6:	0e 94 33 15 	call	0x2a66	; 0x2a66 <nrk_led_toggle>
			/* fill buffer with node id and sensor data */
			msg[0] = nodeID;
    5bfa:	80 91 00 02 	lds	r24, 0x0200
    5bfe:	80 93 5e 05 	sts	0x055E, r24
			*(uint32_t *)(msg + 1) = press;
    5c02:	89 81       	ldd	r24, Y+1	; 0x01
    5c04:	9a 81       	ldd	r25, Y+2	; 0x02
    5c06:	ab 81       	ldd	r26, Y+3	; 0x03
    5c08:	bc 81       	ldd	r27, Y+4	; 0x04
    5c0a:	80 93 5f 05 	sts	0x055F, r24
    5c0e:	90 93 60 05 	sts	0x0560, r25
    5c12:	a0 93 61 05 	sts	0x0561, r26
    5c16:	b0 93 62 05 	sts	0x0562, r27
			//add some redundancy
			for (i=0; i<1; i++){
				flash_tx_pkt(msg, 10);
    5c1a:	6a e0       	ldi	r22, 0x0A	; 10
    5c1c:	8e e5       	ldi	r24, 0x5E	; 94
    5c1e:	95 e0       	ldi	r25, 0x05	; 5
    5c20:	0e 94 6f 09 	call	0x12de	; 0x12de <flash_tx_pkt>
			}	
			already_tx = true;
    5c24:	81 e0       	ldi	r24, 0x01	; 1
    5c26:	8d 83       	std	Y+5, r24	; 0x05
			}
		}
		/* occurs only one time per full tdma cycle */
		else if ((slot == nodeID) && (!already_tx)){
			//it's my turn!
			already_sync = false;
    5c28:	1e 82       	std	Y+6, r1	; 0x06
    5c2a:	67 cf       	rjmp	.-306    	; 0x5afa <main+0xac>

00005c2c <vfprintf>:
    5c2c:	6f 92       	push	r6
    5c2e:	7f 92       	push	r7
    5c30:	8f 92       	push	r8
    5c32:	9f 92       	push	r9
    5c34:	af 92       	push	r10
    5c36:	bf 92       	push	r11
    5c38:	cf 92       	push	r12
    5c3a:	df 92       	push	r13
    5c3c:	ef 92       	push	r14
    5c3e:	ff 92       	push	r15
    5c40:	0f 93       	push	r16
    5c42:	1f 93       	push	r17
    5c44:	cf 93       	push	r28
    5c46:	df 93       	push	r29
    5c48:	cd b7       	in	r28, 0x3d	; 61
    5c4a:	de b7       	in	r29, 0x3e	; 62
    5c4c:	2c 97       	sbiw	r28, 0x0c	; 12
    5c4e:	0f b6       	in	r0, 0x3f	; 63
    5c50:	f8 94       	cli
    5c52:	de bf       	out	0x3e, r29	; 62
    5c54:	0f be       	out	0x3f, r0	; 63
    5c56:	cd bf       	out	0x3d, r28	; 61
    5c58:	6c 01       	movw	r12, r24
    5c5a:	5b 01       	movw	r10, r22
    5c5c:	7a 01       	movw	r14, r20
    5c5e:	fc 01       	movw	r30, r24
    5c60:	17 82       	std	Z+7, r1	; 0x07
    5c62:	16 82       	std	Z+6, r1	; 0x06
    5c64:	83 81       	ldd	r24, Z+3	; 0x03
    5c66:	81 ff       	sbrs	r24, 1
    5c68:	0e c1       	rjmp	.+540    	; 0x5e86 <vfprintf+0x25a>
    5c6a:	ce 01       	movw	r24, r28
    5c6c:	01 96       	adiw	r24, 0x01	; 1
    5c6e:	4c 01       	movw	r8, r24
    5c70:	f6 01       	movw	r30, r12
    5c72:	03 81       	ldd	r16, Z+3	; 0x03
    5c74:	f5 01       	movw	r30, r10
    5c76:	03 fd       	sbrc	r16, 3
    5c78:	15 91       	lpm	r17, Z+
    5c7a:	03 ff       	sbrs	r16, 3
    5c7c:	11 91       	ld	r17, Z+
    5c7e:	5f 01       	movw	r10, r30
    5c80:	11 23       	and	r17, r17
    5c82:	09 f4       	brne	.+2      	; 0x5c86 <vfprintf+0x5a>
    5c84:	fc c0       	rjmp	.+504    	; 0x5e7e <vfprintf+0x252>
    5c86:	15 32       	cpi	r17, 0x25	; 37
    5c88:	49 f4       	brne	.+18     	; 0x5c9c <vfprintf+0x70>
    5c8a:	03 fd       	sbrc	r16, 3
    5c8c:	15 91       	lpm	r17, Z+
    5c8e:	03 ff       	sbrs	r16, 3
    5c90:	11 91       	ld	r17, Z+
    5c92:	5f 01       	movw	r10, r30
    5c94:	15 32       	cpi	r17, 0x25	; 37
    5c96:	11 f0       	breq	.+4      	; 0x5c9c <vfprintf+0x70>
    5c98:	20 e0       	ldi	r18, 0x00	; 0
    5c9a:	1b c0       	rjmp	.+54     	; 0x5cd2 <vfprintf+0xa6>
    5c9c:	b6 01       	movw	r22, r12
    5c9e:	81 2f       	mov	r24, r17
    5ca0:	90 e0       	ldi	r25, 0x00	; 0
    5ca2:	0e 94 03 31 	call	0x6206	; 0x6206 <fputc>
    5ca6:	37 01       	movw	r6, r14
    5ca8:	73 01       	movw	r14, r6
    5caa:	e2 cf       	rjmp	.-60     	; 0x5c70 <vfprintf+0x44>
    5cac:	11 23       	and	r17, r17
    5cae:	09 f4       	brne	.+2      	; 0x5cb2 <vfprintf+0x86>
    5cb0:	e6 c0       	rjmp	.+460    	; 0x5e7e <vfprintf+0x252>
    5cb2:	61 2f       	mov	r22, r17
    5cb4:	70 e0       	ldi	r23, 0x00	; 0
    5cb6:	8a e2       	ldi	r24, 0x2A	; 42
    5cb8:	94 e0       	ldi	r25, 0x04	; 4
    5cba:	2c 87       	std	Y+12, r18	; 0x0c
    5cbc:	0e 94 96 30 	call	0x612c	; 0x612c <strchr_P>
    5cc0:	2c 85       	ldd	r18, Y+12	; 0x0c
    5cc2:	89 2b       	or	r24, r25
    5cc4:	49 f0       	breq	.+18     	; 0x5cd8 <vfprintf+0xac>
    5cc6:	f5 01       	movw	r30, r10
    5cc8:	03 fd       	sbrc	r16, 3
    5cca:	15 91       	lpm	r17, Z+
    5ccc:	03 ff       	sbrs	r16, 3
    5cce:	11 91       	ld	r17, Z+
    5cd0:	5f 01       	movw	r10, r30
    5cd2:	27 ff       	sbrs	r18, 7
    5cd4:	eb cf       	rjmp	.-42     	; 0x5cac <vfprintf+0x80>
    5cd6:	09 c0       	rjmp	.+18     	; 0x5cea <vfprintf+0xbe>
    5cd8:	13 32       	cpi	r17, 0x23	; 35
    5cda:	29 f0       	breq	.+10     	; 0x5ce6 <vfprintf+0xba>
    5cdc:	1c 36       	cpi	r17, 0x6C	; 108
    5cde:	09 f0       	breq	.+2      	; 0x5ce2 <vfprintf+0xb6>
    5ce0:	d5 c0       	rjmp	.+426    	; 0x5e8c <vfprintf+0x260>
    5ce2:	20 68       	ori	r18, 0x80	; 128
    5ce4:	f0 cf       	rjmp	.-32     	; 0x5cc6 <vfprintf+0x9a>
    5ce6:	20 e1       	ldi	r18, 0x10	; 16
    5ce8:	ee cf       	rjmp	.-36     	; 0x5cc6 <vfprintf+0x9a>
    5cea:	02 2f       	mov	r16, r18
    5cec:	11 23       	and	r17, r17
    5cee:	09 f4       	brne	.+2      	; 0x5cf2 <vfprintf+0xc6>
    5cf0:	c6 c0       	rjmp	.+396    	; 0x5e7e <vfprintf+0x252>
    5cf2:	61 2f       	mov	r22, r17
    5cf4:	70 e0       	ldi	r23, 0x00	; 0
    5cf6:	83 e2       	ldi	r24, 0x23	; 35
    5cf8:	94 e0       	ldi	r25, 0x04	; 4
    5cfa:	2c 87       	std	Y+12, r18	; 0x0c
    5cfc:	0e 94 96 30 	call	0x612c	; 0x612c <strchr_P>
    5d00:	2c 85       	ldd	r18, Y+12	; 0x0c
    5d02:	89 2b       	or	r24, r25
    5d04:	41 f0       	breq	.+16     	; 0x5d16 <vfprintf+0xea>
    5d06:	37 01       	movw	r6, r14
    5d08:	f4 e0       	ldi	r31, 0x04	; 4
    5d0a:	6f 0e       	add	r6, r31
    5d0c:	71 1c       	adc	r7, r1
    5d0e:	b6 01       	movw	r22, r12
    5d10:	8f e3       	ldi	r24, 0x3F	; 63
    5d12:	90 e0       	ldi	r25, 0x00	; 0
    5d14:	11 c0       	rjmp	.+34     	; 0x5d38 <vfprintf+0x10c>
    5d16:	13 36       	cpi	r17, 0x63	; 99
    5d18:	39 f0       	breq	.+14     	; 0x5d28 <vfprintf+0xfc>
    5d1a:	13 37       	cpi	r17, 0x73	; 115
    5d1c:	81 f0       	breq	.+32     	; 0x5d3e <vfprintf+0x112>
    5d1e:	13 35       	cpi	r17, 0x53	; 83
    5d20:	19 f5       	brne	.+70     	; 0x5d68 <vfprintf+0x13c>
    5d22:	02 2f       	mov	r16, r18
    5d24:	01 60       	ori	r16, 0x01	; 1
    5d26:	0b c0       	rjmp	.+22     	; 0x5d3e <vfprintf+0x112>
    5d28:	37 01       	movw	r6, r14
    5d2a:	82 e0       	ldi	r24, 0x02	; 2
    5d2c:	68 0e       	add	r6, r24
    5d2e:	71 1c       	adc	r7, r1
    5d30:	b6 01       	movw	r22, r12
    5d32:	f7 01       	movw	r30, r14
    5d34:	80 81       	ld	r24, Z
    5d36:	91 81       	ldd	r25, Z+1	; 0x01
    5d38:	0e 94 03 31 	call	0x6206	; 0x6206 <fputc>
    5d3c:	b5 cf       	rjmp	.-150    	; 0x5ca8 <vfprintf+0x7c>
    5d3e:	37 01       	movw	r6, r14
    5d40:	f2 e0       	ldi	r31, 0x02	; 2
    5d42:	6f 0e       	add	r6, r31
    5d44:	71 1c       	adc	r7, r1
    5d46:	f7 01       	movw	r30, r14
    5d48:	e0 80       	ld	r14, Z
    5d4a:	f1 80       	ldd	r15, Z+1	; 0x01
    5d4c:	f7 01       	movw	r30, r14
    5d4e:	00 fd       	sbrc	r16, 0
    5d50:	85 91       	lpm	r24, Z+
    5d52:	00 ff       	sbrs	r16, 0
    5d54:	81 91       	ld	r24, Z+
    5d56:	7f 01       	movw	r14, r30
    5d58:	88 23       	and	r24, r24
    5d5a:	09 f4       	brne	.+2      	; 0x5d5e <vfprintf+0x132>
    5d5c:	a5 cf       	rjmp	.-182    	; 0x5ca8 <vfprintf+0x7c>
    5d5e:	b6 01       	movw	r22, r12
    5d60:	90 e0       	ldi	r25, 0x00	; 0
    5d62:	0e 94 03 31 	call	0x6206	; 0x6206 <fputc>
    5d66:	f2 cf       	rjmp	.-28     	; 0x5d4c <vfprintf+0x120>
    5d68:	14 36       	cpi	r17, 0x64	; 100
    5d6a:	11 f0       	breq	.+4      	; 0x5d70 <vfprintf+0x144>
    5d6c:	19 36       	cpi	r17, 0x69	; 105
    5d6e:	29 f5       	brne	.+74     	; 0x5dba <vfprintf+0x18e>
    5d70:	37 01       	movw	r6, r14
    5d72:	27 ff       	sbrs	r18, 7
    5d74:	09 c0       	rjmp	.+18     	; 0x5d88 <vfprintf+0x15c>
    5d76:	f4 e0       	ldi	r31, 0x04	; 4
    5d78:	6f 0e       	add	r6, r31
    5d7a:	71 1c       	adc	r7, r1
    5d7c:	f7 01       	movw	r30, r14
    5d7e:	60 81       	ld	r22, Z
    5d80:	71 81       	ldd	r23, Z+1	; 0x01
    5d82:	82 81       	ldd	r24, Z+2	; 0x02
    5d84:	93 81       	ldd	r25, Z+3	; 0x03
    5d86:	0a c0       	rjmp	.+20     	; 0x5d9c <vfprintf+0x170>
    5d88:	f2 e0       	ldi	r31, 0x02	; 2
    5d8a:	6f 0e       	add	r6, r31
    5d8c:	71 1c       	adc	r7, r1
    5d8e:	f7 01       	movw	r30, r14
    5d90:	60 81       	ld	r22, Z
    5d92:	71 81       	ldd	r23, Z+1	; 0x01
    5d94:	88 27       	eor	r24, r24
    5d96:	77 fd       	sbrc	r23, 7
    5d98:	80 95       	com	r24
    5d9a:	98 2f       	mov	r25, r24
    5d9c:	02 2f       	mov	r16, r18
    5d9e:	0f 7e       	andi	r16, 0xEF	; 239
    5da0:	97 ff       	sbrs	r25, 7
    5da2:	08 c0       	rjmp	.+16     	; 0x5db4 <vfprintf+0x188>
    5da4:	90 95       	com	r25
    5da6:	80 95       	com	r24
    5da8:	70 95       	com	r23
    5daa:	61 95       	neg	r22
    5dac:	7f 4f       	sbci	r23, 0xFF	; 255
    5dae:	8f 4f       	sbci	r24, 0xFF	; 255
    5db0:	9f 4f       	sbci	r25, 0xFF	; 255
    5db2:	00 64       	ori	r16, 0x40	; 64
    5db4:	2a e0       	ldi	r18, 0x0A	; 10
    5db6:	30 e0       	ldi	r19, 0x00	; 0
    5db8:	33 c0       	rjmp	.+102    	; 0x5e20 <vfprintf+0x1f4>
    5dba:	10 37       	cpi	r17, 0x70	; 112
    5dbc:	99 f0       	breq	.+38     	; 0x5de4 <vfprintf+0x1b8>
    5dbe:	40 f4       	brcc	.+16     	; 0x5dd0 <vfprintf+0x1a4>
    5dc0:	18 35       	cpi	r17, 0x58	; 88
    5dc2:	b1 f0       	breq	.+44     	; 0x5df0 <vfprintf+0x1c4>
    5dc4:	1f 36       	cpi	r17, 0x6F	; 111
    5dc6:	09 f0       	breq	.+2      	; 0x5dca <vfprintf+0x19e>
    5dc8:	5a c0       	rjmp	.+180    	; 0x5e7e <vfprintf+0x252>
    5dca:	28 e0       	ldi	r18, 0x08	; 8
    5dcc:	30 e0       	ldi	r19, 0x00	; 0
    5dce:	14 c0       	rjmp	.+40     	; 0x5df8 <vfprintf+0x1cc>
    5dd0:	15 37       	cpi	r17, 0x75	; 117
    5dd2:	19 f0       	breq	.+6      	; 0x5dda <vfprintf+0x1ae>
    5dd4:	18 37       	cpi	r17, 0x78	; 120
    5dd6:	41 f0       	breq	.+16     	; 0x5de8 <vfprintf+0x1bc>
    5dd8:	52 c0       	rjmp	.+164    	; 0x5e7e <vfprintf+0x252>
    5dda:	02 2f       	mov	r16, r18
    5ddc:	0f 7e       	andi	r16, 0xEF	; 239
    5dde:	2a e0       	ldi	r18, 0x0A	; 10
    5de0:	30 e0       	ldi	r19, 0x00	; 0
    5de2:	0a c0       	rjmp	.+20     	; 0x5df8 <vfprintf+0x1cc>
    5de4:	02 2f       	mov	r16, r18
    5de6:	00 61       	ori	r16, 0x10	; 16
    5de8:	04 62       	ori	r16, 0x24	; 36
    5dea:	20 e1       	ldi	r18, 0x10	; 16
    5dec:	30 e0       	ldi	r19, 0x00	; 0
    5dee:	04 c0       	rjmp	.+8      	; 0x5df8 <vfprintf+0x1cc>
    5df0:	02 2f       	mov	r16, r18
    5df2:	04 60       	ori	r16, 0x04	; 4
    5df4:	20 e1       	ldi	r18, 0x10	; 16
    5df6:	32 e0       	ldi	r19, 0x02	; 2
    5df8:	37 01       	movw	r6, r14
    5dfa:	07 ff       	sbrs	r16, 7
    5dfc:	09 c0       	rjmp	.+18     	; 0x5e10 <vfprintf+0x1e4>
    5dfe:	f4 e0       	ldi	r31, 0x04	; 4
    5e00:	6f 0e       	add	r6, r31
    5e02:	71 1c       	adc	r7, r1
    5e04:	f7 01       	movw	r30, r14
    5e06:	60 81       	ld	r22, Z
    5e08:	71 81       	ldd	r23, Z+1	; 0x01
    5e0a:	82 81       	ldd	r24, Z+2	; 0x02
    5e0c:	93 81       	ldd	r25, Z+3	; 0x03
    5e0e:	08 c0       	rjmp	.+16     	; 0x5e20 <vfprintf+0x1f4>
    5e10:	f2 e0       	ldi	r31, 0x02	; 2
    5e12:	6f 0e       	add	r6, r31
    5e14:	71 1c       	adc	r7, r1
    5e16:	f7 01       	movw	r30, r14
    5e18:	60 81       	ld	r22, Z
    5e1a:	71 81       	ldd	r23, Z+1	; 0x01
    5e1c:	80 e0       	ldi	r24, 0x00	; 0
    5e1e:	90 e0       	ldi	r25, 0x00	; 0
    5e20:	a4 01       	movw	r20, r8
    5e22:	0e 94 b5 31 	call	0x636a	; 0x636a <__ultoa_invert>
    5e26:	18 2f       	mov	r17, r24
    5e28:	18 19       	sub	r17, r8
    5e2a:	06 ff       	sbrs	r16, 6
    5e2c:	05 c0       	rjmp	.+10     	; 0x5e38 <vfprintf+0x20c>
    5e2e:	b6 01       	movw	r22, r12
    5e30:	8d e2       	ldi	r24, 0x2D	; 45
    5e32:	90 e0       	ldi	r25, 0x00	; 0
    5e34:	0e 94 03 31 	call	0x6206	; 0x6206 <fputc>
    5e38:	04 ff       	sbrs	r16, 4
    5e3a:	15 c0       	rjmp	.+42     	; 0x5e66 <vfprintf+0x23a>
    5e3c:	fe 01       	movw	r30, r28
    5e3e:	e1 0f       	add	r30, r17
    5e40:	f1 1d       	adc	r31, r1
    5e42:	80 81       	ld	r24, Z
    5e44:	80 33       	cpi	r24, 0x30	; 48
    5e46:	79 f0       	breq	.+30     	; 0x5e66 <vfprintf+0x23a>
    5e48:	b6 01       	movw	r22, r12
    5e4a:	80 e3       	ldi	r24, 0x30	; 48
    5e4c:	90 e0       	ldi	r25, 0x00	; 0
    5e4e:	0e 94 03 31 	call	0x6206	; 0x6206 <fputc>
    5e52:	02 ff       	sbrs	r16, 2
    5e54:	08 c0       	rjmp	.+16     	; 0x5e66 <vfprintf+0x23a>
    5e56:	00 72       	andi	r16, 0x20	; 32
    5e58:	80 2f       	mov	r24, r16
    5e5a:	90 e0       	ldi	r25, 0x00	; 0
    5e5c:	b6 01       	movw	r22, r12
    5e5e:	88 5a       	subi	r24, 0xA8	; 168
    5e60:	9f 4f       	sbci	r25, 0xFF	; 255
    5e62:	0e 94 03 31 	call	0x6206	; 0x6206 <fputc>
    5e66:	11 50       	subi	r17, 0x01	; 1
    5e68:	f4 01       	movw	r30, r8
    5e6a:	e1 0f       	add	r30, r17
    5e6c:	f1 1d       	adc	r31, r1
    5e6e:	80 81       	ld	r24, Z
    5e70:	b6 01       	movw	r22, r12
    5e72:	90 e0       	ldi	r25, 0x00	; 0
    5e74:	0e 94 03 31 	call	0x6206	; 0x6206 <fputc>
    5e78:	11 11       	cpse	r17, r1
    5e7a:	f5 cf       	rjmp	.-22     	; 0x5e66 <vfprintf+0x23a>
    5e7c:	15 cf       	rjmp	.-470    	; 0x5ca8 <vfprintf+0x7c>
    5e7e:	f6 01       	movw	r30, r12
    5e80:	86 81       	ldd	r24, Z+6	; 0x06
    5e82:	97 81       	ldd	r25, Z+7	; 0x07
    5e84:	05 c0       	rjmp	.+10     	; 0x5e90 <vfprintf+0x264>
    5e86:	8f ef       	ldi	r24, 0xFF	; 255
    5e88:	9f ef       	ldi	r25, 0xFF	; 255
    5e8a:	02 c0       	rjmp	.+4      	; 0x5e90 <vfprintf+0x264>
    5e8c:	02 2f       	mov	r16, r18
    5e8e:	31 cf       	rjmp	.-414    	; 0x5cf2 <vfprintf+0xc6>
    5e90:	2c 96       	adiw	r28, 0x0c	; 12
    5e92:	0f b6       	in	r0, 0x3f	; 63
    5e94:	f8 94       	cli
    5e96:	de bf       	out	0x3e, r29	; 62
    5e98:	0f be       	out	0x3f, r0	; 63
    5e9a:	cd bf       	out	0x3d, r28	; 61
    5e9c:	df 91       	pop	r29
    5e9e:	cf 91       	pop	r28
    5ea0:	1f 91       	pop	r17
    5ea2:	0f 91       	pop	r16
    5ea4:	ff 90       	pop	r15
    5ea6:	ef 90       	pop	r14
    5ea8:	df 90       	pop	r13
    5eaa:	cf 90       	pop	r12
    5eac:	bf 90       	pop	r11
    5eae:	af 90       	pop	r10
    5eb0:	9f 90       	pop	r9
    5eb2:	8f 90       	pop	r8
    5eb4:	7f 90       	pop	r7
    5eb6:	6f 90       	pop	r6
    5eb8:	08 95       	ret

00005eba <__muluhisi3>:
    5eba:	0e 94 87 30 	call	0x610e	; 0x610e <__umulhisi3>
    5ebe:	a5 9f       	mul	r26, r21
    5ec0:	90 0d       	add	r25, r0
    5ec2:	b4 9f       	mul	r27, r20
    5ec4:	90 0d       	add	r25, r0
    5ec6:	a4 9f       	mul	r26, r20
    5ec8:	80 0d       	add	r24, r0
    5eca:	91 1d       	adc	r25, r1
    5ecc:	11 24       	eor	r1, r1
    5ece:	08 95       	ret

00005ed0 <__mulshisi3>:
    5ed0:	b7 ff       	sbrs	r27, 7
    5ed2:	0c 94 5d 2f 	jmp	0x5eba	; 0x5eba <__muluhisi3>

00005ed6 <__mulohisi3>:
    5ed6:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__muluhisi3>
    5eda:	82 1b       	sub	r24, r18
    5edc:	93 0b       	sbc	r25, r19
    5ede:	08 95       	ret

00005ee0 <__mulsi3>:
    5ee0:	db 01       	movw	r26, r22
    5ee2:	8f 93       	push	r24
    5ee4:	9f 93       	push	r25
    5ee6:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <__muluhisi3>
    5eea:	bf 91       	pop	r27
    5eec:	af 91       	pop	r26
    5eee:	a2 9f       	mul	r26, r18
    5ef0:	80 0d       	add	r24, r0
    5ef2:	91 1d       	adc	r25, r1
    5ef4:	a3 9f       	mul	r26, r19
    5ef6:	90 0d       	add	r25, r0
    5ef8:	b2 9f       	mul	r27, r18
    5efa:	90 0d       	add	r25, r0
    5efc:	11 24       	eor	r1, r1
    5efe:	08 95       	ret

00005f00 <__udivmodsi4>:
    5f00:	a1 e2       	ldi	r26, 0x21	; 33
    5f02:	1a 2e       	mov	r1, r26
    5f04:	aa 1b       	sub	r26, r26
    5f06:	bb 1b       	sub	r27, r27
    5f08:	fd 01       	movw	r30, r26
    5f0a:	0d c0       	rjmp	.+26     	; 0x5f26 <__udivmodsi4_ep>

00005f0c <__udivmodsi4_loop>:
    5f0c:	aa 1f       	adc	r26, r26
    5f0e:	bb 1f       	adc	r27, r27
    5f10:	ee 1f       	adc	r30, r30
    5f12:	ff 1f       	adc	r31, r31
    5f14:	a2 17       	cp	r26, r18
    5f16:	b3 07       	cpc	r27, r19
    5f18:	e4 07       	cpc	r30, r20
    5f1a:	f5 07       	cpc	r31, r21
    5f1c:	20 f0       	brcs	.+8      	; 0x5f26 <__udivmodsi4_ep>
    5f1e:	a2 1b       	sub	r26, r18
    5f20:	b3 0b       	sbc	r27, r19
    5f22:	e4 0b       	sbc	r30, r20
    5f24:	f5 0b       	sbc	r31, r21

00005f26 <__udivmodsi4_ep>:
    5f26:	66 1f       	adc	r22, r22
    5f28:	77 1f       	adc	r23, r23
    5f2a:	88 1f       	adc	r24, r24
    5f2c:	99 1f       	adc	r25, r25
    5f2e:	1a 94       	dec	r1
    5f30:	69 f7       	brne	.-38     	; 0x5f0c <__udivmodsi4_loop>
    5f32:	60 95       	com	r22
    5f34:	70 95       	com	r23
    5f36:	80 95       	com	r24
    5f38:	90 95       	com	r25
    5f3a:	9b 01       	movw	r18, r22
    5f3c:	ac 01       	movw	r20, r24
    5f3e:	bd 01       	movw	r22, r26
    5f40:	cf 01       	movw	r24, r30
    5f42:	08 95       	ret

00005f44 <__divmodsi4>:
    5f44:	05 2e       	mov	r0, r21
    5f46:	97 fb       	bst	r25, 7
    5f48:	1e f4       	brtc	.+6      	; 0x5f50 <__divmodsi4+0xc>
    5f4a:	00 94       	com	r0
    5f4c:	0e 94 18 30 	call	0x6030	; 0x6030 <__negsi2>
    5f50:	57 fd       	sbrc	r21, 7
    5f52:	07 d0       	rcall	.+14     	; 0x5f62 <__divmodsi4_neg2>
    5f54:	0e 94 80 2f 	call	0x5f00	; 0x5f00 <__udivmodsi4>
    5f58:	07 fc       	sbrc	r0, 7
    5f5a:	03 d0       	rcall	.+6      	; 0x5f62 <__divmodsi4_neg2>
    5f5c:	4e f4       	brtc	.+18     	; 0x5f70 <__divmodsi4_exit>
    5f5e:	0c 94 18 30 	jmp	0x6030	; 0x6030 <__negsi2>

00005f62 <__divmodsi4_neg2>:
    5f62:	50 95       	com	r21
    5f64:	40 95       	com	r20
    5f66:	30 95       	com	r19
    5f68:	21 95       	neg	r18
    5f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    5f6c:	4f 4f       	sbci	r20, 0xFF	; 255
    5f6e:	5f 4f       	sbci	r21, 0xFF	; 255

00005f70 <__divmodsi4_exit>:
    5f70:	08 95       	ret

00005f72 <__umoddi3>:
    5f72:	68 94       	set
    5f74:	01 c0       	rjmp	.+2      	; 0x5f78 <__udivdi3_umoddi3>

00005f76 <__udivdi3>:
    5f76:	e8 94       	clt

00005f78 <__udivdi3_umoddi3>:
    5f78:	8f 92       	push	r8
    5f7a:	9f 92       	push	r9
    5f7c:	cf 93       	push	r28
    5f7e:	df 93       	push	r29
    5f80:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <__udivmod64>
    5f84:	df 91       	pop	r29
    5f86:	cf 91       	pop	r28
    5f88:	9f 90       	pop	r9
    5f8a:	8f 90       	pop	r8
    5f8c:	08 95       	ret

00005f8e <__udivmod64>:
    5f8e:	88 24       	eor	r8, r8
    5f90:	99 24       	eor	r9, r9
    5f92:	f4 01       	movw	r30, r8
    5f94:	e4 01       	movw	r28, r8
    5f96:	b0 e4       	ldi	r27, 0x40	; 64
    5f98:	9f 93       	push	r25
    5f9a:	aa 27       	eor	r26, r26
    5f9c:	9a 15       	cp	r25, r10
    5f9e:	8b 04       	cpc	r8, r11
    5fa0:	9c 04       	cpc	r9, r12
    5fa2:	ed 05       	cpc	r30, r13
    5fa4:	fe 05       	cpc	r31, r14
    5fa6:	cf 05       	cpc	r28, r15
    5fa8:	d0 07       	cpc	r29, r16
    5faa:	a1 07       	cpc	r26, r17
    5fac:	98 f4       	brcc	.+38     	; 0x5fd4 <__udivmod64+0x46>
    5fae:	ad 2f       	mov	r26, r29
    5fb0:	dc 2f       	mov	r29, r28
    5fb2:	cf 2f       	mov	r28, r31
    5fb4:	fe 2f       	mov	r31, r30
    5fb6:	e9 2d       	mov	r30, r9
    5fb8:	98 2c       	mov	r9, r8
    5fba:	89 2e       	mov	r8, r25
    5fbc:	98 2f       	mov	r25, r24
    5fbe:	87 2f       	mov	r24, r23
    5fc0:	76 2f       	mov	r23, r22
    5fc2:	65 2f       	mov	r22, r21
    5fc4:	54 2f       	mov	r21, r20
    5fc6:	43 2f       	mov	r20, r19
    5fc8:	32 2f       	mov	r19, r18
    5fca:	22 27       	eor	r18, r18
    5fcc:	b8 50       	subi	r27, 0x08	; 8
    5fce:	31 f7       	brne	.-52     	; 0x5f9c <__udivmod64+0xe>
    5fd0:	bf 91       	pop	r27
    5fd2:	27 c0       	rjmp	.+78     	; 0x6022 <__udivmod64+0x94>
    5fd4:	1b 2e       	mov	r1, r27
    5fd6:	bf 91       	pop	r27
    5fd8:	bb 27       	eor	r27, r27
    5fda:	22 0f       	add	r18, r18
    5fdc:	33 1f       	adc	r19, r19
    5fde:	44 1f       	adc	r20, r20
    5fe0:	55 1f       	adc	r21, r21
    5fe2:	66 1f       	adc	r22, r22
    5fe4:	77 1f       	adc	r23, r23
    5fe6:	88 1f       	adc	r24, r24
    5fe8:	99 1f       	adc	r25, r25
    5fea:	88 1c       	adc	r8, r8
    5fec:	99 1c       	adc	r9, r9
    5fee:	ee 1f       	adc	r30, r30
    5ff0:	ff 1f       	adc	r31, r31
    5ff2:	cc 1f       	adc	r28, r28
    5ff4:	dd 1f       	adc	r29, r29
    5ff6:	aa 1f       	adc	r26, r26
    5ff8:	bb 1f       	adc	r27, r27
    5ffa:	8a 14       	cp	r8, r10
    5ffc:	9b 04       	cpc	r9, r11
    5ffe:	ec 05       	cpc	r30, r12
    6000:	fd 05       	cpc	r31, r13
    6002:	ce 05       	cpc	r28, r14
    6004:	df 05       	cpc	r29, r15
    6006:	a0 07       	cpc	r26, r16
    6008:	b1 07       	cpc	r27, r17
    600a:	48 f0       	brcs	.+18     	; 0x601e <__udivmod64+0x90>
    600c:	8a 18       	sub	r8, r10
    600e:	9b 08       	sbc	r9, r11
    6010:	ec 09       	sbc	r30, r12
    6012:	fd 09       	sbc	r31, r13
    6014:	ce 09       	sbc	r28, r14
    6016:	df 09       	sbc	r29, r15
    6018:	a0 0b       	sbc	r26, r16
    601a:	b1 0b       	sbc	r27, r17
    601c:	21 60       	ori	r18, 0x01	; 1
    601e:	1a 94       	dec	r1
    6020:	e1 f6       	brne	.-72     	; 0x5fda <__udivmod64+0x4c>
    6022:	2e f4       	brtc	.+10     	; 0x602e <__udivmod64+0xa0>
    6024:	94 01       	movw	r18, r8
    6026:	af 01       	movw	r20, r30
    6028:	be 01       	movw	r22, r28
    602a:	cd 01       	movw	r24, r26
    602c:	00 0c       	add	r0, r0
    602e:	08 95       	ret

00006030 <__negsi2>:
    6030:	90 95       	com	r25
    6032:	80 95       	com	r24
    6034:	70 95       	com	r23
    6036:	61 95       	neg	r22
    6038:	7f 4f       	sbci	r23, 0xFF	; 255
    603a:	8f 4f       	sbci	r24, 0xFF	; 255
    603c:	9f 4f       	sbci	r25, 0xFF	; 255
    603e:	08 95       	ret

00006040 <__tablejump2__>:
    6040:	ee 0f       	add	r30, r30
    6042:	ff 1f       	adc	r31, r31
    6044:	00 24       	eor	r0, r0
    6046:	00 1c       	adc	r0, r0
    6048:	0b be       	out	0x3b, r0	; 59
    604a:	07 90       	elpm	r0, Z+
    604c:	f6 91       	elpm	r31, Z
    604e:	e0 2d       	mov	r30, r0
    6050:	09 94       	ijmp

00006052 <__ashldi3>:
    6052:	0f 93       	push	r16
    6054:	08 30       	cpi	r16, 0x08	; 8
    6056:	90 f0       	brcs	.+36     	; 0x607c <__ashldi3+0x2a>
    6058:	98 2f       	mov	r25, r24
    605a:	87 2f       	mov	r24, r23
    605c:	76 2f       	mov	r23, r22
    605e:	65 2f       	mov	r22, r21
    6060:	54 2f       	mov	r21, r20
    6062:	43 2f       	mov	r20, r19
    6064:	32 2f       	mov	r19, r18
    6066:	22 27       	eor	r18, r18
    6068:	08 50       	subi	r16, 0x08	; 8
    606a:	f4 cf       	rjmp	.-24     	; 0x6054 <__ashldi3+0x2>
    606c:	22 0f       	add	r18, r18
    606e:	33 1f       	adc	r19, r19
    6070:	44 1f       	adc	r20, r20
    6072:	55 1f       	adc	r21, r21
    6074:	66 1f       	adc	r22, r22
    6076:	77 1f       	adc	r23, r23
    6078:	88 1f       	adc	r24, r24
    607a:	99 1f       	adc	r25, r25
    607c:	0a 95       	dec	r16
    607e:	b2 f7       	brpl	.-20     	; 0x606c <__ashldi3+0x1a>
    6080:	0f 91       	pop	r16
    6082:	08 95       	ret

00006084 <__ashrdi3>:
    6084:	97 fb       	bst	r25, 7
    6086:	10 f8       	bld	r1, 0

00006088 <__lshrdi3>:
    6088:	16 94       	lsr	r1
    608a:	00 08       	sbc	r0, r0
    608c:	0f 93       	push	r16
    608e:	08 30       	cpi	r16, 0x08	; 8
    6090:	98 f0       	brcs	.+38     	; 0x60b8 <__lshrdi3+0x30>
    6092:	08 50       	subi	r16, 0x08	; 8
    6094:	23 2f       	mov	r18, r19
    6096:	34 2f       	mov	r19, r20
    6098:	45 2f       	mov	r20, r21
    609a:	56 2f       	mov	r21, r22
    609c:	67 2f       	mov	r22, r23
    609e:	78 2f       	mov	r23, r24
    60a0:	89 2f       	mov	r24, r25
    60a2:	90 2d       	mov	r25, r0
    60a4:	f4 cf       	rjmp	.-24     	; 0x608e <__lshrdi3+0x6>
    60a6:	05 94       	asr	r0
    60a8:	97 95       	ror	r25
    60aa:	87 95       	ror	r24
    60ac:	77 95       	ror	r23
    60ae:	67 95       	ror	r22
    60b0:	57 95       	ror	r21
    60b2:	47 95       	ror	r20
    60b4:	37 95       	ror	r19
    60b6:	27 95       	ror	r18
    60b8:	0a 95       	dec	r16
    60ba:	aa f7       	brpl	.-22     	; 0x60a6 <__lshrdi3+0x1e>
    60bc:	0f 91       	pop	r16
    60be:	08 95       	ret

000060c0 <__adddi3>:
    60c0:	2a 0d       	add	r18, r10
    60c2:	3b 1d       	adc	r19, r11
    60c4:	4c 1d       	adc	r20, r12
    60c6:	5d 1d       	adc	r21, r13
    60c8:	6e 1d       	adc	r22, r14
    60ca:	7f 1d       	adc	r23, r15
    60cc:	80 1f       	adc	r24, r16
    60ce:	91 1f       	adc	r25, r17
    60d0:	08 95       	ret

000060d2 <__adddi3_s8>:
    60d2:	00 24       	eor	r0, r0
    60d4:	a7 fd       	sbrc	r26, 7
    60d6:	00 94       	com	r0
    60d8:	2a 0f       	add	r18, r26
    60da:	30 1d       	adc	r19, r0
    60dc:	40 1d       	adc	r20, r0
    60de:	50 1d       	adc	r21, r0
    60e0:	60 1d       	adc	r22, r0
    60e2:	70 1d       	adc	r23, r0
    60e4:	80 1d       	adc	r24, r0
    60e6:	90 1d       	adc	r25, r0
    60e8:	08 95       	ret

000060ea <__subdi3>:
    60ea:	2a 19       	sub	r18, r10
    60ec:	3b 09       	sbc	r19, r11
    60ee:	4c 09       	sbc	r20, r12
    60f0:	5d 09       	sbc	r21, r13
    60f2:	6e 09       	sbc	r22, r14
    60f4:	7f 09       	sbc	r23, r15
    60f6:	80 0b       	sbc	r24, r16
    60f8:	91 0b       	sbc	r25, r17
    60fa:	08 95       	ret

000060fc <__cmpdi2>:
    60fc:	2a 15       	cp	r18, r10
    60fe:	3b 05       	cpc	r19, r11
    6100:	4c 05       	cpc	r20, r12
    6102:	5d 05       	cpc	r21, r13
    6104:	6e 05       	cpc	r22, r14
    6106:	7f 05       	cpc	r23, r15
    6108:	80 07       	cpc	r24, r16
    610a:	91 07       	cpc	r25, r17
    610c:	08 95       	ret

0000610e <__umulhisi3>:
    610e:	a2 9f       	mul	r26, r18
    6110:	b0 01       	movw	r22, r0
    6112:	b3 9f       	mul	r27, r19
    6114:	c0 01       	movw	r24, r0
    6116:	a3 9f       	mul	r26, r19
    6118:	70 0d       	add	r23, r0
    611a:	81 1d       	adc	r24, r1
    611c:	11 24       	eor	r1, r1
    611e:	91 1d       	adc	r25, r1
    6120:	b2 9f       	mul	r27, r18
    6122:	70 0d       	add	r23, r0
    6124:	81 1d       	adc	r24, r1
    6126:	11 24       	eor	r1, r1
    6128:	91 1d       	adc	r25, r1
    612a:	08 95       	ret

0000612c <strchr_P>:
    612c:	fc 01       	movw	r30, r24
    612e:	05 90       	lpm	r0, Z+
    6130:	06 16       	cp	r0, r22
    6132:	21 f0       	breq	.+8      	; 0x613c <strchr_P+0x10>
    6134:	00 20       	and	r0, r0
    6136:	d9 f7       	brne	.-10     	; 0x612e <strchr_P+0x2>
    6138:	c0 01       	movw	r24, r0
    613a:	08 95       	ret
    613c:	31 97       	sbiw	r30, 0x01	; 1
    613e:	cf 01       	movw	r24, r30
    6140:	08 95       	ret

00006142 <memcpy>:
    6142:	fb 01       	movw	r30, r22
    6144:	dc 01       	movw	r26, r24
    6146:	02 c0       	rjmp	.+4      	; 0x614c <memcpy+0xa>
    6148:	01 90       	ld	r0, Z+
    614a:	0d 92       	st	X+, r0
    614c:	41 50       	subi	r20, 0x01	; 1
    614e:	50 40       	sbci	r21, 0x00	; 0
    6150:	d8 f7       	brcc	.-10     	; 0x6148 <memcpy+0x6>
    6152:	08 95       	ret

00006154 <strncmp>:
    6154:	fb 01       	movw	r30, r22
    6156:	dc 01       	movw	r26, r24
    6158:	41 50       	subi	r20, 0x01	; 1
    615a:	50 40       	sbci	r21, 0x00	; 0
    615c:	30 f0       	brcs	.+12     	; 0x616a <strncmp+0x16>
    615e:	8d 91       	ld	r24, X+
    6160:	01 90       	ld	r0, Z+
    6162:	80 19       	sub	r24, r0
    6164:	19 f4       	brne	.+6      	; 0x616c <strncmp+0x18>
    6166:	00 20       	and	r0, r0
    6168:	b9 f7       	brne	.-18     	; 0x6158 <strncmp+0x4>
    616a:	88 1b       	sub	r24, r24
    616c:	99 0b       	sbc	r25, r25
    616e:	08 95       	ret

00006170 <fdevopen>:
    6170:	0f 93       	push	r16
    6172:	1f 93       	push	r17
    6174:	cf 93       	push	r28
    6176:	df 93       	push	r29
    6178:	00 97       	sbiw	r24, 0x00	; 0
    617a:	31 f4       	brne	.+12     	; 0x6188 <fdevopen+0x18>
    617c:	61 15       	cp	r22, r1
    617e:	71 05       	cpc	r23, r1
    6180:	19 f4       	brne	.+6      	; 0x6188 <fdevopen+0x18>
    6182:	80 e0       	ldi	r24, 0x00	; 0
    6184:	90 e0       	ldi	r25, 0x00	; 0
    6186:	3a c0       	rjmp	.+116    	; 0x61fc <fdevopen+0x8c>
    6188:	8b 01       	movw	r16, r22
    618a:	ec 01       	movw	r28, r24
    618c:	6e e0       	ldi	r22, 0x0E	; 14
    618e:	70 e0       	ldi	r23, 0x00	; 0
    6190:	81 e0       	ldi	r24, 0x01	; 1
    6192:	90 e0       	ldi	r25, 0x00	; 0
    6194:	0e 94 29 32 	call	0x6452	; 0x6452 <calloc>
    6198:	fc 01       	movw	r30, r24
    619a:	00 97       	sbiw	r24, 0x00	; 0
    619c:	91 f3       	breq	.-28     	; 0x6182 <fdevopen+0x12>
    619e:	80 e8       	ldi	r24, 0x80	; 128
    61a0:	83 83       	std	Z+3, r24	; 0x03
    61a2:	01 15       	cp	r16, r1
    61a4:	11 05       	cpc	r17, r1
    61a6:	71 f0       	breq	.+28     	; 0x61c4 <fdevopen+0x54>
    61a8:	13 87       	std	Z+11, r17	; 0x0b
    61aa:	02 87       	std	Z+10, r16	; 0x0a
    61ac:	81 e8       	ldi	r24, 0x81	; 129
    61ae:	83 83       	std	Z+3, r24	; 0x03
    61b0:	80 91 64 07 	lds	r24, 0x0764
    61b4:	90 91 65 07 	lds	r25, 0x0765
    61b8:	89 2b       	or	r24, r25
    61ba:	21 f4       	brne	.+8      	; 0x61c4 <fdevopen+0x54>
    61bc:	f0 93 65 07 	sts	0x0765, r31
    61c0:	e0 93 64 07 	sts	0x0764, r30
    61c4:	20 97       	sbiw	r28, 0x00	; 0
    61c6:	c9 f0       	breq	.+50     	; 0x61fa <fdevopen+0x8a>
    61c8:	d1 87       	std	Z+9, r29	; 0x09
    61ca:	c0 87       	std	Z+8, r28	; 0x08
    61cc:	83 81       	ldd	r24, Z+3	; 0x03
    61ce:	82 60       	ori	r24, 0x02	; 2
    61d0:	83 83       	std	Z+3, r24	; 0x03
    61d2:	80 91 66 07 	lds	r24, 0x0766
    61d6:	90 91 67 07 	lds	r25, 0x0767
    61da:	89 2b       	or	r24, r25
    61dc:	71 f4       	brne	.+28     	; 0x61fa <fdevopen+0x8a>
    61de:	f0 93 67 07 	sts	0x0767, r31
    61e2:	e0 93 66 07 	sts	0x0766, r30
    61e6:	80 91 68 07 	lds	r24, 0x0768
    61ea:	90 91 69 07 	lds	r25, 0x0769
    61ee:	89 2b       	or	r24, r25
    61f0:	21 f4       	brne	.+8      	; 0x61fa <fdevopen+0x8a>
    61f2:	f0 93 69 07 	sts	0x0769, r31
    61f6:	e0 93 68 07 	sts	0x0768, r30
    61fa:	cf 01       	movw	r24, r30
    61fc:	df 91       	pop	r29
    61fe:	cf 91       	pop	r28
    6200:	1f 91       	pop	r17
    6202:	0f 91       	pop	r16
    6204:	08 95       	ret

00006206 <fputc>:
    6206:	0f 93       	push	r16
    6208:	1f 93       	push	r17
    620a:	cf 93       	push	r28
    620c:	df 93       	push	r29
    620e:	fb 01       	movw	r30, r22
    6210:	23 81       	ldd	r18, Z+3	; 0x03
    6212:	21 fd       	sbrc	r18, 1
    6214:	03 c0       	rjmp	.+6      	; 0x621c <fputc+0x16>
    6216:	8f ef       	ldi	r24, 0xFF	; 255
    6218:	9f ef       	ldi	r25, 0xFF	; 255
    621a:	28 c0       	rjmp	.+80     	; 0x626c <fputc+0x66>
    621c:	22 ff       	sbrs	r18, 2
    621e:	16 c0       	rjmp	.+44     	; 0x624c <fputc+0x46>
    6220:	46 81       	ldd	r20, Z+6	; 0x06
    6222:	57 81       	ldd	r21, Z+7	; 0x07
    6224:	24 81       	ldd	r18, Z+4	; 0x04
    6226:	35 81       	ldd	r19, Z+5	; 0x05
    6228:	42 17       	cp	r20, r18
    622a:	53 07       	cpc	r21, r19
    622c:	44 f4       	brge	.+16     	; 0x623e <fputc+0x38>
    622e:	a0 81       	ld	r26, Z
    6230:	b1 81       	ldd	r27, Z+1	; 0x01
    6232:	9d 01       	movw	r18, r26
    6234:	2f 5f       	subi	r18, 0xFF	; 255
    6236:	3f 4f       	sbci	r19, 0xFF	; 255
    6238:	31 83       	std	Z+1, r19	; 0x01
    623a:	20 83       	st	Z, r18
    623c:	8c 93       	st	X, r24
    623e:	26 81       	ldd	r18, Z+6	; 0x06
    6240:	37 81       	ldd	r19, Z+7	; 0x07
    6242:	2f 5f       	subi	r18, 0xFF	; 255
    6244:	3f 4f       	sbci	r19, 0xFF	; 255
    6246:	37 83       	std	Z+7, r19	; 0x07
    6248:	26 83       	std	Z+6, r18	; 0x06
    624a:	10 c0       	rjmp	.+32     	; 0x626c <fputc+0x66>
    624c:	eb 01       	movw	r28, r22
    624e:	09 2f       	mov	r16, r25
    6250:	18 2f       	mov	r17, r24
    6252:	00 84       	ldd	r0, Z+8	; 0x08
    6254:	f1 85       	ldd	r31, Z+9	; 0x09
    6256:	e0 2d       	mov	r30, r0
    6258:	09 95       	icall
    625a:	89 2b       	or	r24, r25
    625c:	e1 f6       	brne	.-72     	; 0x6216 <fputc+0x10>
    625e:	8e 81       	ldd	r24, Y+6	; 0x06
    6260:	9f 81       	ldd	r25, Y+7	; 0x07
    6262:	01 96       	adiw	r24, 0x01	; 1
    6264:	9f 83       	std	Y+7, r25	; 0x07
    6266:	8e 83       	std	Y+6, r24	; 0x06
    6268:	81 2f       	mov	r24, r17
    626a:	90 2f       	mov	r25, r16
    626c:	df 91       	pop	r29
    626e:	cf 91       	pop	r28
    6270:	1f 91       	pop	r17
    6272:	0f 91       	pop	r16
    6274:	08 95       	ret

00006276 <printf>:
    6276:	cf 93       	push	r28
    6278:	df 93       	push	r29
    627a:	cd b7       	in	r28, 0x3d	; 61
    627c:	de b7       	in	r29, 0x3e	; 62
    627e:	ae 01       	movw	r20, r28
    6280:	4b 5f       	subi	r20, 0xFB	; 251
    6282:	5f 4f       	sbci	r21, 0xFF	; 255
    6284:	fa 01       	movw	r30, r20
    6286:	61 91       	ld	r22, Z+
    6288:	71 91       	ld	r23, Z+
    628a:	af 01       	movw	r20, r30
    628c:	80 91 66 07 	lds	r24, 0x0766
    6290:	90 91 67 07 	lds	r25, 0x0767
    6294:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <vfprintf>
    6298:	df 91       	pop	r29
    629a:	cf 91       	pop	r28
    629c:	08 95       	ret

0000629e <putchar>:
    629e:	60 91 66 07 	lds	r22, 0x0766
    62a2:	70 91 67 07 	lds	r23, 0x0767
    62a6:	0c 94 03 31 	jmp	0x6206	; 0x6206 <fputc>

000062aa <puts>:
    62aa:	0f 93       	push	r16
    62ac:	1f 93       	push	r17
    62ae:	cf 93       	push	r28
    62b0:	df 93       	push	r29
    62b2:	e0 91 66 07 	lds	r30, 0x0766
    62b6:	f0 91 67 07 	lds	r31, 0x0767
    62ba:	23 81       	ldd	r18, Z+3	; 0x03
    62bc:	21 ff       	sbrs	r18, 1
    62be:	1b c0       	rjmp	.+54     	; 0x62f6 <puts+0x4c>
    62c0:	8c 01       	movw	r16, r24
    62c2:	d0 e0       	ldi	r29, 0x00	; 0
    62c4:	c0 e0       	ldi	r28, 0x00	; 0
    62c6:	f8 01       	movw	r30, r16
    62c8:	81 91       	ld	r24, Z+
    62ca:	8f 01       	movw	r16, r30
    62cc:	60 91 66 07 	lds	r22, 0x0766
    62d0:	70 91 67 07 	lds	r23, 0x0767
    62d4:	db 01       	movw	r26, r22
    62d6:	18 96       	adiw	r26, 0x08	; 8
    62d8:	ed 91       	ld	r30, X+
    62da:	fc 91       	ld	r31, X
    62dc:	19 97       	sbiw	r26, 0x09	; 9
    62de:	88 23       	and	r24, r24
    62e0:	31 f0       	breq	.+12     	; 0x62ee <puts+0x44>
    62e2:	09 95       	icall
    62e4:	89 2b       	or	r24, r25
    62e6:	79 f3       	breq	.-34     	; 0x62c6 <puts+0x1c>
    62e8:	df ef       	ldi	r29, 0xFF	; 255
    62ea:	cf ef       	ldi	r28, 0xFF	; 255
    62ec:	ec cf       	rjmp	.-40     	; 0x62c6 <puts+0x1c>
    62ee:	8a e0       	ldi	r24, 0x0A	; 10
    62f0:	09 95       	icall
    62f2:	89 2b       	or	r24, r25
    62f4:	19 f0       	breq	.+6      	; 0x62fc <puts+0x52>
    62f6:	8f ef       	ldi	r24, 0xFF	; 255
    62f8:	9f ef       	ldi	r25, 0xFF	; 255
    62fa:	02 c0       	rjmp	.+4      	; 0x6300 <puts+0x56>
    62fc:	8d 2f       	mov	r24, r29
    62fe:	9c 2f       	mov	r25, r28
    6300:	df 91       	pop	r29
    6302:	cf 91       	pop	r28
    6304:	1f 91       	pop	r17
    6306:	0f 91       	pop	r16
    6308:	08 95       	ret

0000630a <sprintf>:
    630a:	0f 93       	push	r16
    630c:	1f 93       	push	r17
    630e:	cf 93       	push	r28
    6310:	df 93       	push	r29
    6312:	cd b7       	in	r28, 0x3d	; 61
    6314:	de b7       	in	r29, 0x3e	; 62
    6316:	2e 97       	sbiw	r28, 0x0e	; 14
    6318:	0f b6       	in	r0, 0x3f	; 63
    631a:	f8 94       	cli
    631c:	de bf       	out	0x3e, r29	; 62
    631e:	0f be       	out	0x3f, r0	; 63
    6320:	cd bf       	out	0x3d, r28	; 61
    6322:	0d 89       	ldd	r16, Y+21	; 0x15
    6324:	1e 89       	ldd	r17, Y+22	; 0x16
    6326:	86 e0       	ldi	r24, 0x06	; 6
    6328:	8c 83       	std	Y+4, r24	; 0x04
    632a:	1a 83       	std	Y+2, r17	; 0x02
    632c:	09 83       	std	Y+1, r16	; 0x01
    632e:	8f ef       	ldi	r24, 0xFF	; 255
    6330:	9f e7       	ldi	r25, 0x7F	; 127
    6332:	9e 83       	std	Y+6, r25	; 0x06
    6334:	8d 83       	std	Y+5, r24	; 0x05
    6336:	ae 01       	movw	r20, r28
    6338:	47 5e       	subi	r20, 0xE7	; 231
    633a:	5f 4f       	sbci	r21, 0xFF	; 255
    633c:	6f 89       	ldd	r22, Y+23	; 0x17
    633e:	78 8d       	ldd	r23, Y+24	; 0x18
    6340:	ce 01       	movw	r24, r28
    6342:	01 96       	adiw	r24, 0x01	; 1
    6344:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <vfprintf>
    6348:	2f 81       	ldd	r18, Y+7	; 0x07
    634a:	38 85       	ldd	r19, Y+8	; 0x08
    634c:	f8 01       	movw	r30, r16
    634e:	e2 0f       	add	r30, r18
    6350:	f3 1f       	adc	r31, r19
    6352:	10 82       	st	Z, r1
    6354:	2e 96       	adiw	r28, 0x0e	; 14
    6356:	0f b6       	in	r0, 0x3f	; 63
    6358:	f8 94       	cli
    635a:	de bf       	out	0x3e, r29	; 62
    635c:	0f be       	out	0x3f, r0	; 63
    635e:	cd bf       	out	0x3d, r28	; 61
    6360:	df 91       	pop	r29
    6362:	cf 91       	pop	r28
    6364:	1f 91       	pop	r17
    6366:	0f 91       	pop	r16
    6368:	08 95       	ret

0000636a <__ultoa_invert>:
    636a:	fa 01       	movw	r30, r20
    636c:	aa 27       	eor	r26, r26
    636e:	28 30       	cpi	r18, 0x08	; 8
    6370:	51 f1       	breq	.+84     	; 0x63c6 <__ultoa_invert+0x5c>
    6372:	20 31       	cpi	r18, 0x10	; 16
    6374:	81 f1       	breq	.+96     	; 0x63d6 <__ultoa_invert+0x6c>
    6376:	e8 94       	clt
    6378:	6f 93       	push	r22
    637a:	6e 7f       	andi	r22, 0xFE	; 254
    637c:	6e 5f       	subi	r22, 0xFE	; 254
    637e:	7f 4f       	sbci	r23, 0xFF	; 255
    6380:	8f 4f       	sbci	r24, 0xFF	; 255
    6382:	9f 4f       	sbci	r25, 0xFF	; 255
    6384:	af 4f       	sbci	r26, 0xFF	; 255
    6386:	b1 e0       	ldi	r27, 0x01	; 1
    6388:	3e d0       	rcall	.+124    	; 0x6406 <__ultoa_invert+0x9c>
    638a:	b4 e0       	ldi	r27, 0x04	; 4
    638c:	3c d0       	rcall	.+120    	; 0x6406 <__ultoa_invert+0x9c>
    638e:	67 0f       	add	r22, r23
    6390:	78 1f       	adc	r23, r24
    6392:	89 1f       	adc	r24, r25
    6394:	9a 1f       	adc	r25, r26
    6396:	a1 1d       	adc	r26, r1
    6398:	68 0f       	add	r22, r24
    639a:	79 1f       	adc	r23, r25
    639c:	8a 1f       	adc	r24, r26
    639e:	91 1d       	adc	r25, r1
    63a0:	a1 1d       	adc	r26, r1
    63a2:	6a 0f       	add	r22, r26
    63a4:	71 1d       	adc	r23, r1
    63a6:	81 1d       	adc	r24, r1
    63a8:	91 1d       	adc	r25, r1
    63aa:	a1 1d       	adc	r26, r1
    63ac:	20 d0       	rcall	.+64     	; 0x63ee <__ultoa_invert+0x84>
    63ae:	09 f4       	brne	.+2      	; 0x63b2 <__ultoa_invert+0x48>
    63b0:	68 94       	set
    63b2:	3f 91       	pop	r19
    63b4:	2a e0       	ldi	r18, 0x0A	; 10
    63b6:	26 9f       	mul	r18, r22
    63b8:	11 24       	eor	r1, r1
    63ba:	30 19       	sub	r19, r0
    63bc:	30 5d       	subi	r19, 0xD0	; 208
    63be:	31 93       	st	Z+, r19
    63c0:	de f6       	brtc	.-74     	; 0x6378 <__ultoa_invert+0xe>
    63c2:	cf 01       	movw	r24, r30
    63c4:	08 95       	ret
    63c6:	46 2f       	mov	r20, r22
    63c8:	47 70       	andi	r20, 0x07	; 7
    63ca:	40 5d       	subi	r20, 0xD0	; 208
    63cc:	41 93       	st	Z+, r20
    63ce:	b3 e0       	ldi	r27, 0x03	; 3
    63d0:	0f d0       	rcall	.+30     	; 0x63f0 <__ultoa_invert+0x86>
    63d2:	c9 f7       	brne	.-14     	; 0x63c6 <__ultoa_invert+0x5c>
    63d4:	f6 cf       	rjmp	.-20     	; 0x63c2 <__ultoa_invert+0x58>
    63d6:	46 2f       	mov	r20, r22
    63d8:	4f 70       	andi	r20, 0x0F	; 15
    63da:	40 5d       	subi	r20, 0xD0	; 208
    63dc:	4a 33       	cpi	r20, 0x3A	; 58
    63de:	18 f0       	brcs	.+6      	; 0x63e6 <__ultoa_invert+0x7c>
    63e0:	49 5d       	subi	r20, 0xD9	; 217
    63e2:	31 fd       	sbrc	r19, 1
    63e4:	40 52       	subi	r20, 0x20	; 32
    63e6:	41 93       	st	Z+, r20
    63e8:	02 d0       	rcall	.+4      	; 0x63ee <__ultoa_invert+0x84>
    63ea:	a9 f7       	brne	.-22     	; 0x63d6 <__ultoa_invert+0x6c>
    63ec:	ea cf       	rjmp	.-44     	; 0x63c2 <__ultoa_invert+0x58>
    63ee:	b4 e0       	ldi	r27, 0x04	; 4
    63f0:	a6 95       	lsr	r26
    63f2:	97 95       	ror	r25
    63f4:	87 95       	ror	r24
    63f6:	77 95       	ror	r23
    63f8:	67 95       	ror	r22
    63fa:	ba 95       	dec	r27
    63fc:	c9 f7       	brne	.-14     	; 0x63f0 <__ultoa_invert+0x86>
    63fe:	00 97       	sbiw	r24, 0x00	; 0
    6400:	61 05       	cpc	r22, r1
    6402:	71 05       	cpc	r23, r1
    6404:	08 95       	ret
    6406:	9b 01       	movw	r18, r22
    6408:	ac 01       	movw	r20, r24
    640a:	0a 2e       	mov	r0, r26
    640c:	06 94       	lsr	r0
    640e:	57 95       	ror	r21
    6410:	47 95       	ror	r20
    6412:	37 95       	ror	r19
    6414:	27 95       	ror	r18
    6416:	ba 95       	dec	r27
    6418:	c9 f7       	brne	.-14     	; 0x640c <__ultoa_invert+0xa2>
    641a:	62 0f       	add	r22, r18
    641c:	73 1f       	adc	r23, r19
    641e:	84 1f       	adc	r24, r20
    6420:	95 1f       	adc	r25, r21
    6422:	a0 1d       	adc	r26, r0
    6424:	08 95       	ret

00006426 <__eerd_byte_m128rfa1>:
    6426:	f9 99       	sbic	0x1f, 1	; 31
    6428:	fe cf       	rjmp	.-4      	; 0x6426 <__eerd_byte_m128rfa1>
    642a:	92 bd       	out	0x22, r25	; 34
    642c:	81 bd       	out	0x21, r24	; 33
    642e:	f8 9a       	sbi	0x1f, 0	; 31
    6430:	99 27       	eor	r25, r25
    6432:	80 b5       	in	r24, 0x20	; 32
    6434:	08 95       	ret

00006436 <__eewr_byte_m128rfa1>:
    6436:	26 2f       	mov	r18, r22

00006438 <__eewr_r18_m128rfa1>:
    6438:	f9 99       	sbic	0x1f, 1	; 31
    643a:	fe cf       	rjmp	.-4      	; 0x6438 <__eewr_r18_m128rfa1>
    643c:	1f ba       	out	0x1f, r1	; 31
    643e:	92 bd       	out	0x22, r25	; 34
    6440:	81 bd       	out	0x21, r24	; 33
    6442:	20 bd       	out	0x20, r18	; 32
    6444:	0f b6       	in	r0, 0x3f	; 63
    6446:	f8 94       	cli
    6448:	fa 9a       	sbi	0x1f, 2	; 31
    644a:	f9 9a       	sbi	0x1f, 1	; 31
    644c:	0f be       	out	0x3f, r0	; 63
    644e:	01 96       	adiw	r24, 0x01	; 1
    6450:	08 95       	ret

00006452 <calloc>:
    6452:	0f 93       	push	r16
    6454:	1f 93       	push	r17
    6456:	cf 93       	push	r28
    6458:	df 93       	push	r29
    645a:	86 9f       	mul	r24, r22
    645c:	80 01       	movw	r16, r0
    645e:	87 9f       	mul	r24, r23
    6460:	10 0d       	add	r17, r0
    6462:	96 9f       	mul	r25, r22
    6464:	10 0d       	add	r17, r0
    6466:	11 24       	eor	r1, r1
    6468:	c8 01       	movw	r24, r16
    646a:	0e 94 45 32 	call	0x648a	; 0x648a <malloc>
    646e:	ec 01       	movw	r28, r24
    6470:	00 97       	sbiw	r24, 0x00	; 0
    6472:	29 f0       	breq	.+10     	; 0x647e <calloc+0x2c>
    6474:	a8 01       	movw	r20, r16
    6476:	60 e0       	ldi	r22, 0x00	; 0
    6478:	70 e0       	ldi	r23, 0x00	; 0
    647a:	0e 94 72 33 	call	0x66e4	; 0x66e4 <memset>
    647e:	ce 01       	movw	r24, r28
    6480:	df 91       	pop	r29
    6482:	cf 91       	pop	r28
    6484:	1f 91       	pop	r17
    6486:	0f 91       	pop	r16
    6488:	08 95       	ret

0000648a <malloc>:
    648a:	cf 93       	push	r28
    648c:	df 93       	push	r29
    648e:	82 30       	cpi	r24, 0x02	; 2
    6490:	91 05       	cpc	r25, r1
    6492:	10 f4       	brcc	.+4      	; 0x6498 <malloc+0xe>
    6494:	82 e0       	ldi	r24, 0x02	; 2
    6496:	90 e0       	ldi	r25, 0x00	; 0
    6498:	e0 91 6c 07 	lds	r30, 0x076C
    649c:	f0 91 6d 07 	lds	r31, 0x076D
    64a0:	20 e0       	ldi	r18, 0x00	; 0
    64a2:	30 e0       	ldi	r19, 0x00	; 0
    64a4:	c0 e0       	ldi	r28, 0x00	; 0
    64a6:	d0 e0       	ldi	r29, 0x00	; 0
    64a8:	30 97       	sbiw	r30, 0x00	; 0
    64aa:	11 f1       	breq	.+68     	; 0x64f0 <malloc+0x66>
    64ac:	40 81       	ld	r20, Z
    64ae:	51 81       	ldd	r21, Z+1	; 0x01
    64b0:	48 17       	cp	r20, r24
    64b2:	59 07       	cpc	r21, r25
    64b4:	c0 f0       	brcs	.+48     	; 0x64e6 <malloc+0x5c>
    64b6:	48 17       	cp	r20, r24
    64b8:	59 07       	cpc	r21, r25
    64ba:	61 f4       	brne	.+24     	; 0x64d4 <malloc+0x4a>
    64bc:	82 81       	ldd	r24, Z+2	; 0x02
    64be:	93 81       	ldd	r25, Z+3	; 0x03
    64c0:	20 97       	sbiw	r28, 0x00	; 0
    64c2:	19 f0       	breq	.+6      	; 0x64ca <malloc+0x40>
    64c4:	9b 83       	std	Y+3, r25	; 0x03
    64c6:	8a 83       	std	Y+2, r24	; 0x02
    64c8:	2b c0       	rjmp	.+86     	; 0x6520 <malloc+0x96>
    64ca:	90 93 6d 07 	sts	0x076D, r25
    64ce:	80 93 6c 07 	sts	0x076C, r24
    64d2:	26 c0       	rjmp	.+76     	; 0x6520 <malloc+0x96>
    64d4:	21 15       	cp	r18, r1
    64d6:	31 05       	cpc	r19, r1
    64d8:	19 f0       	breq	.+6      	; 0x64e0 <malloc+0x56>
    64da:	42 17       	cp	r20, r18
    64dc:	53 07       	cpc	r21, r19
    64de:	18 f4       	brcc	.+6      	; 0x64e6 <malloc+0x5c>
    64e0:	9a 01       	movw	r18, r20
    64e2:	be 01       	movw	r22, r28
    64e4:	df 01       	movw	r26, r30
    64e6:	ef 01       	movw	r28, r30
    64e8:	02 80       	ldd	r0, Z+2	; 0x02
    64ea:	f3 81       	ldd	r31, Z+3	; 0x03
    64ec:	e0 2d       	mov	r30, r0
    64ee:	dc cf       	rjmp	.-72     	; 0x64a8 <malloc+0x1e>
    64f0:	21 15       	cp	r18, r1
    64f2:	31 05       	cpc	r19, r1
    64f4:	09 f1       	breq	.+66     	; 0x6538 <malloc+0xae>
    64f6:	28 1b       	sub	r18, r24
    64f8:	39 0b       	sbc	r19, r25
    64fa:	24 30       	cpi	r18, 0x04	; 4
    64fc:	31 05       	cpc	r19, r1
    64fe:	90 f4       	brcc	.+36     	; 0x6524 <malloc+0x9a>
    6500:	12 96       	adiw	r26, 0x02	; 2
    6502:	8d 91       	ld	r24, X+
    6504:	9c 91       	ld	r25, X
    6506:	13 97       	sbiw	r26, 0x03	; 3
    6508:	61 15       	cp	r22, r1
    650a:	71 05       	cpc	r23, r1
    650c:	21 f0       	breq	.+8      	; 0x6516 <malloc+0x8c>
    650e:	fb 01       	movw	r30, r22
    6510:	93 83       	std	Z+3, r25	; 0x03
    6512:	82 83       	std	Z+2, r24	; 0x02
    6514:	04 c0       	rjmp	.+8      	; 0x651e <malloc+0x94>
    6516:	90 93 6d 07 	sts	0x076D, r25
    651a:	80 93 6c 07 	sts	0x076C, r24
    651e:	fd 01       	movw	r30, r26
    6520:	32 96       	adiw	r30, 0x02	; 2
    6522:	44 c0       	rjmp	.+136    	; 0x65ac <malloc+0x122>
    6524:	fd 01       	movw	r30, r26
    6526:	e2 0f       	add	r30, r18
    6528:	f3 1f       	adc	r31, r19
    652a:	81 93       	st	Z+, r24
    652c:	91 93       	st	Z+, r25
    652e:	22 50       	subi	r18, 0x02	; 2
    6530:	31 09       	sbc	r19, r1
    6532:	2d 93       	st	X+, r18
    6534:	3c 93       	st	X, r19
    6536:	3a c0       	rjmp	.+116    	; 0x65ac <malloc+0x122>
    6538:	20 91 6a 07 	lds	r18, 0x076A
    653c:	30 91 6b 07 	lds	r19, 0x076B
    6540:	23 2b       	or	r18, r19
    6542:	41 f4       	brne	.+16     	; 0x6554 <malloc+0xca>
    6544:	20 91 13 02 	lds	r18, 0x0213
    6548:	30 91 14 02 	lds	r19, 0x0214
    654c:	30 93 6b 07 	sts	0x076B, r19
    6550:	20 93 6a 07 	sts	0x076A, r18
    6554:	20 91 11 02 	lds	r18, 0x0211
    6558:	30 91 12 02 	lds	r19, 0x0212
    655c:	21 15       	cp	r18, r1
    655e:	31 05       	cpc	r19, r1
    6560:	41 f4       	brne	.+16     	; 0x6572 <malloc+0xe8>
    6562:	2d b7       	in	r18, 0x3d	; 61
    6564:	3e b7       	in	r19, 0x3e	; 62
    6566:	40 91 15 02 	lds	r20, 0x0215
    656a:	50 91 16 02 	lds	r21, 0x0216
    656e:	24 1b       	sub	r18, r20
    6570:	35 0b       	sbc	r19, r21
    6572:	e0 91 6a 07 	lds	r30, 0x076A
    6576:	f0 91 6b 07 	lds	r31, 0x076B
    657a:	e2 17       	cp	r30, r18
    657c:	f3 07       	cpc	r31, r19
    657e:	a0 f4       	brcc	.+40     	; 0x65a8 <malloc+0x11e>
    6580:	2e 1b       	sub	r18, r30
    6582:	3f 0b       	sbc	r19, r31
    6584:	28 17       	cp	r18, r24
    6586:	39 07       	cpc	r19, r25
    6588:	78 f0       	brcs	.+30     	; 0x65a8 <malloc+0x11e>
    658a:	ac 01       	movw	r20, r24
    658c:	4e 5f       	subi	r20, 0xFE	; 254
    658e:	5f 4f       	sbci	r21, 0xFF	; 255
    6590:	24 17       	cp	r18, r20
    6592:	35 07       	cpc	r19, r21
    6594:	48 f0       	brcs	.+18     	; 0x65a8 <malloc+0x11e>
    6596:	4e 0f       	add	r20, r30
    6598:	5f 1f       	adc	r21, r31
    659a:	50 93 6b 07 	sts	0x076B, r21
    659e:	40 93 6a 07 	sts	0x076A, r20
    65a2:	81 93       	st	Z+, r24
    65a4:	91 93       	st	Z+, r25
    65a6:	02 c0       	rjmp	.+4      	; 0x65ac <malloc+0x122>
    65a8:	e0 e0       	ldi	r30, 0x00	; 0
    65aa:	f0 e0       	ldi	r31, 0x00	; 0
    65ac:	cf 01       	movw	r24, r30
    65ae:	df 91       	pop	r29
    65b0:	cf 91       	pop	r28
    65b2:	08 95       	ret

000065b4 <free>:
    65b4:	0f 93       	push	r16
    65b6:	1f 93       	push	r17
    65b8:	cf 93       	push	r28
    65ba:	df 93       	push	r29
    65bc:	00 97       	sbiw	r24, 0x00	; 0
    65be:	09 f4       	brne	.+2      	; 0x65c2 <free+0xe>
    65c0:	8c c0       	rjmp	.+280    	; 0x66da <free+0x126>
    65c2:	fc 01       	movw	r30, r24
    65c4:	32 97       	sbiw	r30, 0x02	; 2
    65c6:	13 82       	std	Z+3, r1	; 0x03
    65c8:	12 82       	std	Z+2, r1	; 0x02
    65ca:	00 91 6c 07 	lds	r16, 0x076C
    65ce:	10 91 6d 07 	lds	r17, 0x076D
    65d2:	01 15       	cp	r16, r1
    65d4:	11 05       	cpc	r17, r1
    65d6:	81 f4       	brne	.+32     	; 0x65f8 <free+0x44>
    65d8:	20 81       	ld	r18, Z
    65da:	31 81       	ldd	r19, Z+1	; 0x01
    65dc:	82 0f       	add	r24, r18
    65de:	93 1f       	adc	r25, r19
    65e0:	20 91 6a 07 	lds	r18, 0x076A
    65e4:	30 91 6b 07 	lds	r19, 0x076B
    65e8:	28 17       	cp	r18, r24
    65ea:	39 07       	cpc	r19, r25
    65ec:	79 f5       	brne	.+94     	; 0x664c <free+0x98>
    65ee:	f0 93 6b 07 	sts	0x076B, r31
    65f2:	e0 93 6a 07 	sts	0x076A, r30
    65f6:	71 c0       	rjmp	.+226    	; 0x66da <free+0x126>
    65f8:	d8 01       	movw	r26, r16
    65fa:	40 e0       	ldi	r20, 0x00	; 0
    65fc:	50 e0       	ldi	r21, 0x00	; 0
    65fe:	ae 17       	cp	r26, r30
    6600:	bf 07       	cpc	r27, r31
    6602:	50 f4       	brcc	.+20     	; 0x6618 <free+0x64>
    6604:	12 96       	adiw	r26, 0x02	; 2
    6606:	2d 91       	ld	r18, X+
    6608:	3c 91       	ld	r19, X
    660a:	13 97       	sbiw	r26, 0x03	; 3
    660c:	ad 01       	movw	r20, r26
    660e:	21 15       	cp	r18, r1
    6610:	31 05       	cpc	r19, r1
    6612:	09 f1       	breq	.+66     	; 0x6656 <free+0xa2>
    6614:	d9 01       	movw	r26, r18
    6616:	f3 cf       	rjmp	.-26     	; 0x65fe <free+0x4a>
    6618:	9d 01       	movw	r18, r26
    661a:	da 01       	movw	r26, r20
    661c:	33 83       	std	Z+3, r19	; 0x03
    661e:	22 83       	std	Z+2, r18	; 0x02
    6620:	60 81       	ld	r22, Z
    6622:	71 81       	ldd	r23, Z+1	; 0x01
    6624:	86 0f       	add	r24, r22
    6626:	97 1f       	adc	r25, r23
    6628:	82 17       	cp	r24, r18
    662a:	93 07       	cpc	r25, r19
    662c:	69 f4       	brne	.+26     	; 0x6648 <free+0x94>
    662e:	ec 01       	movw	r28, r24
    6630:	28 81       	ld	r18, Y
    6632:	39 81       	ldd	r19, Y+1	; 0x01
    6634:	26 0f       	add	r18, r22
    6636:	37 1f       	adc	r19, r23
    6638:	2e 5f       	subi	r18, 0xFE	; 254
    663a:	3f 4f       	sbci	r19, 0xFF	; 255
    663c:	31 83       	std	Z+1, r19	; 0x01
    663e:	20 83       	st	Z, r18
    6640:	8a 81       	ldd	r24, Y+2	; 0x02
    6642:	9b 81       	ldd	r25, Y+3	; 0x03
    6644:	93 83       	std	Z+3, r25	; 0x03
    6646:	82 83       	std	Z+2, r24	; 0x02
    6648:	45 2b       	or	r20, r21
    664a:	29 f4       	brne	.+10     	; 0x6656 <free+0xa2>
    664c:	f0 93 6d 07 	sts	0x076D, r31
    6650:	e0 93 6c 07 	sts	0x076C, r30
    6654:	42 c0       	rjmp	.+132    	; 0x66da <free+0x126>
    6656:	13 96       	adiw	r26, 0x03	; 3
    6658:	fc 93       	st	X, r31
    665a:	ee 93       	st	-X, r30
    665c:	12 97       	sbiw	r26, 0x02	; 2
    665e:	ed 01       	movw	r28, r26
    6660:	49 91       	ld	r20, Y+
    6662:	59 91       	ld	r21, Y+
    6664:	9e 01       	movw	r18, r28
    6666:	24 0f       	add	r18, r20
    6668:	35 1f       	adc	r19, r21
    666a:	e2 17       	cp	r30, r18
    666c:	f3 07       	cpc	r31, r19
    666e:	71 f4       	brne	.+28     	; 0x668c <free+0xd8>
    6670:	80 81       	ld	r24, Z
    6672:	91 81       	ldd	r25, Z+1	; 0x01
    6674:	84 0f       	add	r24, r20
    6676:	95 1f       	adc	r25, r21
    6678:	02 96       	adiw	r24, 0x02	; 2
    667a:	11 96       	adiw	r26, 0x01	; 1
    667c:	9c 93       	st	X, r25
    667e:	8e 93       	st	-X, r24
    6680:	82 81       	ldd	r24, Z+2	; 0x02
    6682:	93 81       	ldd	r25, Z+3	; 0x03
    6684:	13 96       	adiw	r26, 0x03	; 3
    6686:	9c 93       	st	X, r25
    6688:	8e 93       	st	-X, r24
    668a:	12 97       	sbiw	r26, 0x02	; 2
    668c:	e0 e0       	ldi	r30, 0x00	; 0
    668e:	f0 e0       	ldi	r31, 0x00	; 0
    6690:	d8 01       	movw	r26, r16
    6692:	12 96       	adiw	r26, 0x02	; 2
    6694:	8d 91       	ld	r24, X+
    6696:	9c 91       	ld	r25, X
    6698:	13 97       	sbiw	r26, 0x03	; 3
    669a:	00 97       	sbiw	r24, 0x00	; 0
    669c:	19 f0       	breq	.+6      	; 0x66a4 <free+0xf0>
    669e:	f8 01       	movw	r30, r16
    66a0:	8c 01       	movw	r16, r24
    66a2:	f6 cf       	rjmp	.-20     	; 0x6690 <free+0xdc>
    66a4:	8d 91       	ld	r24, X+
    66a6:	9c 91       	ld	r25, X
    66a8:	98 01       	movw	r18, r16
    66aa:	2e 5f       	subi	r18, 0xFE	; 254
    66ac:	3f 4f       	sbci	r19, 0xFF	; 255
    66ae:	82 0f       	add	r24, r18
    66b0:	93 1f       	adc	r25, r19
    66b2:	20 91 6a 07 	lds	r18, 0x076A
    66b6:	30 91 6b 07 	lds	r19, 0x076B
    66ba:	28 17       	cp	r18, r24
    66bc:	39 07       	cpc	r19, r25
    66be:	69 f4       	brne	.+26     	; 0x66da <free+0x126>
    66c0:	30 97       	sbiw	r30, 0x00	; 0
    66c2:	29 f4       	brne	.+10     	; 0x66ce <free+0x11a>
    66c4:	10 92 6d 07 	sts	0x076D, r1
    66c8:	10 92 6c 07 	sts	0x076C, r1
    66cc:	02 c0       	rjmp	.+4      	; 0x66d2 <free+0x11e>
    66ce:	13 82       	std	Z+3, r1	; 0x03
    66d0:	12 82       	std	Z+2, r1	; 0x02
    66d2:	10 93 6b 07 	sts	0x076B, r17
    66d6:	00 93 6a 07 	sts	0x076A, r16
    66da:	df 91       	pop	r29
    66dc:	cf 91       	pop	r28
    66de:	1f 91       	pop	r17
    66e0:	0f 91       	pop	r16
    66e2:	08 95       	ret

000066e4 <memset>:
    66e4:	dc 01       	movw	r26, r24
    66e6:	01 c0       	rjmp	.+2      	; 0x66ea <memset+0x6>
    66e8:	6d 93       	st	X+, r22
    66ea:	41 50       	subi	r20, 0x01	; 1
    66ec:	50 40       	sbci	r21, 0x00	; 0
    66ee:	e0 f7       	brcc	.-8      	; 0x66e8 <memset+0x4>
    66f0:	08 95       	ret

000066f2 <_exit>:
    66f2:	f8 94       	cli

000066f4 <__stop_program>:
    66f4:	ff cf       	rjmp	.-2      	; 0x66f4 <__stop_program>
