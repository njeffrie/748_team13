   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 339               	.global	__udivdi3
 340               	.global	__umoddi3
 341               		.section	.rodata.str1.1,"aMS",@progbits,1
 342               	.LC0:
 343 0000 7065 7263 		.string	"percentage correct:%ld, [c:%ld, f:%ld] press:%lu\r\n"
 343      656E 7461 
 343      6765 2063 
 343      6F72 7265 
 343      6374 3A25 
 344               		.text
 347               	.global	node_data_callback
 349               	node_data_callback:
 350               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *	Lab 3 - Build Your Own Sensor Network (Gateway)
   3:main.c        **** *	Madhav Iyengar
   4:main.c        **** *	Miguel Sotolongo
   5:main.c        **** *	Nathaniel Jeffries
   6:main.c        **** -------------------------------------------------------------------------------
   7:main.c        **** *
   8:main.c        **** *Nano-RK, a real-time operating system for sensor networks.
   9:main.c        **** *Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
  10:main.c        **** *All rights reserved.
  11:main.c        **** *
  12:main.c        **** *This is the Open Source Version of Nano-RK included as part of a Dual
  13:main.c        **** *Licensing Model. If you are unsure which license to use please refer to:
  14:main.c        **** *http://www.nanork.org/nano-RK/wiki/Licensing
  15:main.c        **** *
  16:main.c        **** *This program is free software: you can redistribute it and/or modify
  17:main.c        **** *it under the terms of the GNU General Public License as published by
  18:main.c        **** *the Free Software Foundation, version 2.0 of the License.
  19:main.c        **** *
  20:main.c        **** *This program is distributed in the hope that it will be useful,
  21:main.c        **** *but WITHOUT ANY WARRANTY; without even the implied warranty of
  22:main.c        **** *MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
  23:main.c        **** *GNU General Public License for more details.
  24:main.c        **** *
  25:main.c        **** *You should have received a copy of the GNU General Public License
  26:main.c        **** *along with this program.If not, see <http://www.gnu.org/licenses/>.
  27:main.c        **** *
  28:main.c        **** *******************************************************************************/
  29:main.c        **** 
  30:main.c        **** #include <include.h>
  31:main.c        **** #include <ulib.h>
  32:main.c        **** #include <stdio.h>
  33:main.c        **** #include <avr/sleep.h>
  34:main.c        **** 
  35:main.c        **** #include <nrk.h>
  36:main.c        **** #include <nrk_error.h>
  37:main.c        **** 
  38:main.c        **** #include <hal.h>
  39:main.c        **** #include <string.h>
  40:main.c        **** #include <flash.h>
  41:main.c        **** //#include <pulse_sync.h>
  42:main.c        **** #include "../tdma_constants.h"
  43:main.c        **** 
  44:main.c        **** #define UART_BUF_SIZE	16
  45:main.c        **** 
  46:main.c        **** nrk_task_type TEST_TASK;
  47:main.c        **** NRK_STK test_task_stack[NRK_APP_STACKSIZE];
  48:main.c        **** void test_task(void);
  49:main.c        **** 
  50:main.c        **** RF_RX_INFO rfRxInfo;
  51:main.c        **** 
  52:main.c        **** uint8_t nodeID = 0;
  53:main.c        **** 
  54:main.c        **** uint8_t time_slots[NUM_NODES];
  55:main.c        **** 
  56:main.c        **** void nrk_create_taskset();
  57:main.c        **** 
  58:main.c        **** void nrk_register_drivers();
  59:main.c        **** 
  60:main.c        **** int main_disabled() {
  61:main.c        **** 	nrk_setup_ports();
  62:main.c        **** 	nrk_setup_uart(UART_BAUDRATE_9K6);
  63:main.c        **** 	
  64:main.c        **** 	//nrk_init();
  65:main.c        **** 	
  66:main.c        **** 	printf("nrk starting...\r\n");
  67:main.c        **** 	
  68:main.c        **** 	nrk_led_clr(0);
  69:main.c        **** 	nrk_led_clr(1);
  70:main.c        **** 	nrk_led_clr(2);
  71:main.c        **** 	nrk_led_clr(3);
  72:main.c        **** 	
  73:main.c        **** 	nrk_time_set(0, 0);
  74:main.c        **** 	flash_init(14);
  75:main.c        **** 	flash_timer_setup();
  76:main.c        **** 
  77:main.c        **** 	//nrk_create_taskset();
  78:main.c        **** 	//nrk_start();
  79:main.c        **** 	return 0;
  80:main.c        **** }
  81:main.c        **** 
  82:main.c        **** int32_t correct = 0;
  83:main.c        **** int32_t failed = 0;
  84:main.c        **** void node_data_callback(uint8_t *data, uint64_t time)
  85:main.c        **** {
 352               	.LM0:
 353               	.LFBB1:
 354 0000 2F92      		push r2
 355 0002 3F92      		push r3
 356 0004 4F92      		push r4
 357 0006 5F92      		push r5
 358 0008 6F92      		push r6
 359 000a 7F92      		push r7
 360 000c 8F92      		push r8
 361 000e 9F92      		push r9
 362 0010 AF92      		push r10
 363 0012 BF92      		push r11
 364 0014 CF92      		push r12
 365 0016 DF92      		push r13
 366 0018 EF92      		push r14
 367 001a FF92      		push r15
 368 001c 0F93      		push r16
 369 001e 1F93      		push r17
 370 0020 CF93      		push r28
 371 0022 DF93      		push r29
 372 0024 00D0      		rcall .
 373 0026 CDB7      		in r28,__SP_L__
 374 0028 DEB7      		in r29,__SP_H__
 375               	/* prologue: function */
 376               	/* frame size = 2 */
 377               	/* stack size = 20 */
 378               	.L__stack_usage = 20
 379 002a 8C01      		movw r16,r24
  86:main.c        **** 	uint32_t time_32 = (uint32_t)time;
  87:main.c        **** 	uint32_t press = *(uint32_t *)(data + 1);
 381               	.LM1:
 382 002c FC01      		movw r30,r24
 383 002e F181      		ldd r31,Z+1
 384 0030 F983      		std Y+1,r31
 385 0032 FC01      		movw r30,r24
 386 0034 F281      		ldd r31,Z+2
 387 0036 FA83      		std Y+2,r31
 388 0038 FC01      		movw r30,r24
 389 003a 7380      		ldd r7,Z+3
 390 003c 6480      		ldd r6,Z+4
  88:main.c        **** 	int slot = (flash_get_current_time()/TDMA_SLOT_LEN)%NUM_NODES;
 392               	.LM2:
 393 003e 0E94 0000 		call flash_get_current_time
  89:main.c        **** 	int sender_node = data[0];
 395               	.LM3:
 396 0042 F801      		movw r30,r16
 397 0044 4080      		ld r4,Z
 398 0046 512C      		mov r5,__zero_reg__
  88:main.c        **** 	int slot = (flash_get_current_time()/TDMA_SLOT_LEN)%NUM_NODES;
 400               	.LM4:
 401 0048 E4E3      		ldi r30,lo8(52)
 402 004a AE2E      		mov r10,r30
 403 004c F8E0      		ldi r31,lo8(8)
 404 004e BF2E      		mov r11,r31
 405 0050 C12C      		mov r12,__zero_reg__
 406 0052 D12C      		mov r13,__zero_reg__
 407 0054 E12C      		mov r14,__zero_reg__
 408 0056 F12C      		mov r15,__zero_reg__
 409 0058 00E0      		ldi r16,0
 410 005a 10E0      		ldi r17,0
 411 005c 0E94 0000 		call __udivdi3
 412 0060 AAE0      		ldi r26,lo8(10)
 413 0062 AA2E      		mov r10,r26
 414 0064 B12C      		mov r11,__zero_reg__
 415 0066 0E94 0000 		call __umoddi3
  90:main.c        **** 	if (sender_node != slot){
 417               	.LM5:
 418 006a 4216      		cp r4,r18
 419 006c 5306      		cpc r5,r19
 420 006e 01F0      		breq .L2
  91:main.c        **** 		failed ++;
 422               	.LM6:
 423 0070 8091 0000 		lds r24,failed
 424 0074 9091 0000 		lds r25,failed+1
 425 0078 A091 0000 		lds r26,failed+2
 426 007c B091 0000 		lds r27,failed+3
 427 0080 0196      		adiw r24,1
 428 0082 A11D      		adc r26,__zero_reg__
 429 0084 B11D      		adc r27,__zero_reg__
 430 0086 8093 0000 		sts failed,r24
 431 008a 9093 0000 		sts failed+1,r25
 432 008e A093 0000 		sts failed+2,r26
 433 0092 B093 0000 		sts failed+3,r27
 434 0096 00C0      		rjmp .L3
 435               	.L2:
  92:main.c        **** 		//printf("slot error[slot:%d,sender:%d]\r\n", slot, sender_node);
  93:main.c        **** 	}
  94:main.c        **** 	else{
  95:main.c        **** 		correct ++;
 437               	.LM7:
 438 0098 8091 0000 		lds r24,correct
 439 009c 9091 0000 		lds r25,correct+1
 440 00a0 A091 0000 		lds r26,correct+2
 441 00a4 B091 0000 		lds r27,correct+3
 442 00a8 0196      		adiw r24,1
 443 00aa A11D      		adc r26,__zero_reg__
 444 00ac B11D      		adc r27,__zero_reg__
 445 00ae 8093 0000 		sts correct,r24
 446 00b2 9093 0000 		sts correct+1,r25
 447 00b6 A093 0000 		sts correct+2,r26
 448 00ba B093 0000 		sts correct+3,r27
 449               	.L3:
  96:main.c        **** 		//printf("slot correct\r\n");
  97:main.c        **** 	}
  98:main.c        **** 	if (!((failed + correct)%10))
 451               	.LM8:
 452 00be 2090 0000 		lds r2,failed
 453 00c2 3090 0000 		lds r3,failed+1
 454 00c6 4090 0000 		lds r4,failed+2
 455 00ca 5090 0000 		lds r5,failed+3
 456 00ce C090 0000 		lds r12,correct
 457 00d2 D090 0000 		lds r13,correct+1
 458 00d6 E090 0000 		lds r14,correct+2
 459 00da F090 0000 		lds r15,correct+3
 460 00de 5201      		movw r10,r4
 461 00e0 4101      		movw r8,r2
 462 00e2 8C0C      		add r8,r12
 463 00e4 9D1C      		adc r9,r13
 464 00e6 AE1C      		adc r10,r14
 465 00e8 BF1C      		adc r11,r15
 466 00ea C501      		movw r24,r10
 467 00ec B401      		movw r22,r8
 468 00ee 2AE0      		ldi r18,lo8(10)
 469 00f0 30E0      		ldi r19,0
 470 00f2 40E0      		ldi r20,0
 471 00f4 50E0      		ldi r21,0
 472 00f6 0E94 0000 		call __divmodsi4
 473 00fa 672B      		or r22,r23
 474 00fc 682B      		or r22,r24
 475 00fe 692B      		or r22,r25
 476 0100 01F4      		brne .L4
  99:main.c        **** 		printf("percentage correct:%ld, [c:%ld, f:%ld] press:%lu\r\n", 
 478               	.LM9:
 479 0102 6F92      		push r6
 480 0104 7F92      		push r7
 481 0106 FA81      		ldd r31,Y+2
 482 0108 FF93      		push r31
 483 010a 8981      		ldd r24,Y+1
 484 010c 8F93      		push r24
 485 010e 5F92      		push r5
 486 0110 4F92      		push r4
 487 0112 3F92      		push r3
 488 0114 2F92      		push r2
 489 0116 FF92      		push r15
 490 0118 EF92      		push r14
 491 011a DF92      		push r13
 492 011c CF92      		push r12
 100:main.c        **** 				(correct * 100)/(correct + failed), correct, failed, press);
 494               	.LM10:
 495 011e A4E6      		ldi r26,lo8(100)
 496 0120 B0E0      		ldi r27,0
 497 0122 A701      		movw r20,r14
 498 0124 9601      		movw r18,r12
 499 0126 0E94 0000 		call __muluhisi3
  99:main.c        **** 		printf("percentage correct:%ld, [c:%ld, f:%ld] press:%lu\r\n", 
 501               	.LM11:
 502 012a A501      		movw r20,r10
 503 012c 9401      		movw r18,r8
 504 012e 0E94 0000 		call __divmodsi4
 505 0132 5F93      		push r21
 506 0134 4F93      		push r20
 507 0136 3F93      		push r19
 508 0138 2F93      		push r18
 509 013a 80E0      		ldi r24,lo8(.LC0)
 510 013c 90E0      		ldi r25,hi8(.LC0)
 511 013e 9F93      		push r25
 512 0140 8F93      		push r24
 513 0142 0E94 0000 		call printf
 514 0146 0FB6      		in __tmp_reg__,__SREG__
 515 0148 F894      		cli
 516 014a DEBF      		out __SP_H__,r29
 517 014c 0FBE      		out __SREG__,__tmp_reg__
 518 014e CDBF      		out __SP_L__,r28
 519               	.L4:
 101:main.c        **** 
 102:main.c        **** 	// TODO: Parse to JSON
 103:main.c        **** 	
 104:main.c        **** 	//printf("mac:%d;slot:%d;temp:%d;\r\n", sender_node, slot, temp);
 105:main.c        **** 
 106:main.c        **** 	//printf("{\"mac\":%d;\"temp\":%d}\r\n",
 107:main.c        **** 	//	data[0], *(uint16_t*)(data+1));
 108:main.c        **** 	
 109:main.c        **** 	
 110:main.c        **** 	nrk_led_toggle(GREEN_LED);
 521               	.LM12:
 522 0150 81E0      		ldi r24,lo8(1)
 523 0152 90E0      		ldi r25,0
 524               	/* epilogue start */
 111:main.c        **** }
 526               	.LM13:
 527 0154 0F90      		pop __tmp_reg__
 528 0156 0F90      		pop __tmp_reg__
 529 0158 DF91      		pop r29
 530 015a CF91      		pop r28
 531 015c 1F91      		pop r17
 532 015e 0F91      		pop r16
 533 0160 FF90      		pop r15
 534 0162 EF90      		pop r14
 535 0164 DF90      		pop r13
 536 0166 CF90      		pop r12
 537 0168 BF90      		pop r11
 538 016a AF90      		pop r10
 539 016c 9F90      		pop r9
 540 016e 8F90      		pop r8
 541 0170 7F90      		pop r7
 542 0172 6F90      		pop r6
 543 0174 5F90      		pop r5
 544 0176 4F90      		pop r4
 545 0178 3F90      		pop r3
 546 017a 2F90      		pop r2
 110:main.c        **** }
 548               	.LM14:
 549 017c 0C94 0000 		jmp nrk_led_toggle
 551               	.Lscope1:
 553               		.stabd	78,0,0
 554               		.section	.rodata.str1.1
 555               	.LC1:
 556 0033 6E72 6B20 		.string	"nrk starting...\r"
 556      7374 6172 
 556      7469 6E67 
 556      2E2E 2E0D 
 556      00
 557               		.text
 559               	.global	main_disabled
 561               	main_disabled:
 562               		.stabd	46,0,0
  60:main.c        **** 	nrk_setup_ports();
 564               	.LM15:
 565               	.LFBB2:
 566               	/* prologue: function */
 567               	/* frame size = 0 */
 568               	/* stack size = 0 */
 569               	.L__stack_usage = 0
  61:main.c        **** 	nrk_setup_uart(UART_BAUDRATE_9K6);
 571               	.LM16:
 572 0180 0E94 0000 		call nrk_setup_ports
  62:main.c        **** 	
 574               	.LM17:
 575 0184 8FEC      		ldi r24,lo8(-49)
 576 0186 90E0      		ldi r25,0
 577 0188 0E94 0000 		call nrk_setup_uart
  66:main.c        **** 	
 579               	.LM18:
 580 018c 80E0      		ldi r24,lo8(.LC1)
 581 018e 90E0      		ldi r25,hi8(.LC1)
 582 0190 0E94 0000 		call puts
  68:main.c        **** 	nrk_led_clr(1);
 584               	.LM19:
 585 0194 80E0      		ldi r24,0
 586 0196 90E0      		ldi r25,0
 587 0198 0E94 0000 		call nrk_led_clr
  69:main.c        **** 	nrk_led_clr(2);
 589               	.LM20:
 590 019c 81E0      		ldi r24,lo8(1)
 591 019e 90E0      		ldi r25,0
 592 01a0 0E94 0000 		call nrk_led_clr
  70:main.c        **** 	nrk_led_clr(3);
 594               	.LM21:
 595 01a4 82E0      		ldi r24,lo8(2)
 596 01a6 90E0      		ldi r25,0
 597 01a8 0E94 0000 		call nrk_led_clr
  71:main.c        **** 	
 599               	.LM22:
 600 01ac 83E0      		ldi r24,lo8(3)
 601 01ae 90E0      		ldi r25,0
 602 01b0 0E94 0000 		call nrk_led_clr
  73:main.c        **** 	flash_init(14);
 604               	.LM23:
 605 01b4 20E0      		ldi r18,0
 606 01b6 30E0      		ldi r19,0
 607 01b8 A901      		movw r20,r18
 608 01ba 60E0      		ldi r22,0
 609 01bc 70E0      		ldi r23,0
 610 01be CB01      		movw r24,r22
 611 01c0 0E94 0000 		call nrk_time_set
  74:main.c        **** 	flash_timer_setup();
 613               	.LM24:
 614 01c4 8EE0      		ldi r24,lo8(14)
 615 01c6 0E94 0000 		call flash_init
  75:main.c        **** 
 617               	.LM25:
 618 01ca 0E94 0000 		call flash_timer_setup
  80:main.c        **** 
 620               	.LM26:
 621 01ce 80E0      		ldi r24,0
 622 01d0 90E0      		ldi r25,0
 623 01d2 0895      		ret
 625               	.Lscope2:
 627               		.stabd	78,0,0
 628               		.section	.rodata.str1.1
 629               	.LC2:
 630 0044 7365 6E64 		.string	"sending synchronization buffer\r"
 630      696E 6720 
 630      7379 6E63 
 630      6872 6F6E 
 630      697A 6174 
 631               	.LC3:
 632 0064 7472 616E 		.string	"transmitting packet [%d,%lu]\r\n"
 632      736D 6974 
 632      7469 6E67 
 632      2070 6163 
 632      6B65 7420 
 633               	.LC4:
 634 0083 7761 6974 		.string	"waiting to propagate flood\r"
 634      696E 6720 
 634      746F 2070 
 634      726F 7061 
 634      6761 7465 
 635               		.section	.text.startup,"ax",@progbits
 637               	.global	main
 639               	main:
 640               		.stabd	46,0,0
 112:main.c        **** 
 113:main.c        **** uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
 114:main.c        **** 
 115:main.c        **** 
 116:main.c        **** void main ()
 117:main.c        **** {
 642               	.LM27:
 643               	.LFBB3:
 644 0000 CF93      		push r28
 645 0002 DF93      		push r29
 646 0004 CDB7      		in r28,__SP_L__
 647 0006 DEB7      		in r29,__SP_H__
 648 0008 6A97      		sbiw r28,26
 649 000a 0FB6      		in __tmp_reg__,__SREG__
 650 000c F894      		cli
 651 000e DEBF      		out __SP_H__,r29
 652 0010 0FBE      		out __SREG__,__tmp_reg__
 653 0012 CDBF      		out __SP_L__,r28
 654               	/* prologue: function */
 655               	/* frame size = 26 */
 656               	/* stack size = 28 */
 657               	.L__stack_usage = 28
 118:main.c        **** 	nrk_setup_ports();
 659               	.LM28:
 660 0014 0E94 0000 		call nrk_setup_ports
 119:main.c        **** 	nrk_setup_uart(UART_BAUDRATE_9K6);
 662               	.LM29:
 663 0018 8FEC      		ldi r24,lo8(-49)
 664 001a 90E0      		ldi r25,0
 665 001c 0E94 0000 		call nrk_setup_uart
 120:main.c        **** 	
 121:main.c        **** 	nrk_init();
 667               	.LM30:
 668 0020 0E94 0000 		call nrk_init
 122:main.c        **** 	
 123:main.c        **** 	printf("nrk starting...\r\n");
 670               	.LM31:
 671 0024 80E0      		ldi r24,lo8(.LC1)
 672 0026 90E0      		ldi r25,hi8(.LC1)
 673 0028 0E94 0000 		call puts
 124:main.c        **** 	
 125:main.c        **** 	nrk_led_clr(0);
 675               	.LM32:
 676 002c 80E0      		ldi r24,0
 677 002e 90E0      		ldi r25,0
 678 0030 0E94 0000 		call nrk_led_clr
 126:main.c        **** 	nrk_led_clr(1);
 680               	.LM33:
 681 0034 81E0      		ldi r24,lo8(1)
 682 0036 90E0      		ldi r25,0
 683 0038 0E94 0000 		call nrk_led_clr
 127:main.c        **** 	nrk_led_clr(2);
 685               	.LM34:
 686 003c 82E0      		ldi r24,lo8(2)
 687 003e 90E0      		ldi r25,0
 688 0040 0E94 0000 		call nrk_led_clr
 128:main.c        **** 	nrk_led_clr(3);
 690               	.LM35:
 691 0044 83E0      		ldi r24,lo8(3)
 692 0046 90E0      		ldi r25,0
 693 0048 0E94 0000 		call nrk_led_clr
 129:main.c        **** 	
 130:main.c        **** 	nrk_time_set(0, 0);
 695               	.LM36:
 696 004c 20E0      		ldi r18,0
 697 004e 30E0      		ldi r19,0
 698 0050 A901      		movw r20,r18
 699 0052 60E0      		ldi r22,0
 700 0054 70E0      		ldi r23,0
 701 0056 CB01      		movw r24,r22
 702 0058 0E94 0000 		call nrk_time_set
 131:main.c        **** 	flash_init(14);
 704               	.LM37:
 705 005c 8EE0      		ldi r24,lo8(14)
 706 005e 0E94 0000 		call flash_init
 132:main.c        **** 	flash_timer_setup();
 708               	.LM38:
 709 0062 0E94 0000 		call flash_timer_setup
 133:main.c        **** 
 134:main.c        **** 	//nrk_create_taskset();
 135:main.c        **** 	//nrk_start();
 136:main.c        **** 	uint8_t sync_buf[16];
 137:main.c        **** 	sync_buf[0] = nodeID;
 711               	.LM39:
 712 0066 8091 0000 		lds r24,nodeID
 713 006a 8983      		std Y+1,r24
 138:main.c        **** 	printf("sending synchronization buffer\r\n");
 715               	.LM40:
 716 006c 80E0      		ldi r24,lo8(.LC2)
 717 006e 90E0      		ldi r25,hi8(.LC2)
 718 0070 0E94 0000 		call puts
 139:main.c        **** 	uint32_t timestamp = (uint32_t)flash_get_current_time();
 720               	.LM41:
 721 0074 0E94 0000 		call flash_get_current_time
 722 0078 C901      		movw r24,r18
 723 007a BA01      		movw r22,r20
 140:main.c        **** 	*(uint32_t *)(sync_buf + 1) = timestamp;
 725               	.LM42:
 726 007c 2A83      		std Y+2,r18
 727 007e 9B83      		std Y+3,r25
 728 0080 4C83      		std Y+4,r20
 729 0082 7D83      		std Y+5,r23
 141:main.c        **** 		
 142:main.c        **** 	printf("transmitting packet [%d,%lu]\r\n", sync_buf[0], *(uint32_t *)(sync_buf + 1));
 731               	.LM43:
 732 0084 7F93      		push r23
 733 0086 4F93      		push r20
 734 0088 9F93      		push r25
 735 008a 2F93      		push r18
 736 008c 8981      		ldd r24,Y+1
 737 008e 1F92      		push __zero_reg__
 738 0090 8F93      		push r24
 739 0092 80E0      		ldi r24,lo8(.LC3)
 740 0094 90E0      		ldi r25,hi8(.LC3)
 741 0096 9F93      		push r25
 742 0098 8F93      		push r24
 743 009a 0E94 0000 		call printf
 143:main.c        **** 	printf("waiting to propagate flood\r\n");
 745               	.LM44:
 746 009e 80E0      		ldi r24,lo8(.LC4)
 747 00a0 90E0      		ldi r25,hi8(.LC4)
 748 00a2 0E94 0000 		call puts
 144:main.c        **** 	
 145:main.c        **** 	flash_tx_pkt(sync_buf, 5);
 750               	.LM45:
 751 00a6 65E0      		ldi r22,lo8(5)
 752 00a8 CE01      		movw r24,r28
 753 00aa 0196      		adiw r24,1
 754 00ac 0E94 0000 		call flash_tx_pkt
 146:main.c        **** 	flash_set_retransmit(0);
 756               	.LM46:
 757 00b0 80E0      		ldi r24,0
 758 00b2 0E94 0000 		call flash_set_retransmit
 147:main.c        **** 
 148:main.c        **** 	uint64_t timeout = TDMA_SLOT_LEN;
 760               	.LM47:
 761 00b6 84E3      		ldi r24,lo8(52)
 762 00b8 898B      		std Y+17,r24
 763 00ba 88E0      		ldi r24,lo8(8)
 764 00bc 8A8B      		std Y+18,r24
 765 00be 1B8A      		std Y+19,__zero_reg__
 766 00c0 1C8A      		std Y+20,__zero_reg__
 767 00c2 1D8A      		std Y+21,__zero_reg__
 768 00c4 1E8A      		std Y+22,__zero_reg__
 769 00c6 1F8A      		std Y+23,__zero_reg__
 770 00c8 188E      		std Y+24,__zero_reg__
 771 00ca 0FB6      		in __tmp_reg__,__SREG__
 772 00cc F894      		cli
 773 00ce DEBF      		out __SP_H__,r29
 774 00d0 0FBE      		out __SREG__,__tmp_reg__
 775 00d2 CDBF      		out __SP_L__,r28
 776               	.L9:
 777               	.LBB2:
 149:main.c        **** 
 150:main.c        **** 	uint32_t num_sync_sent = 0;
 151:main.c        **** 	while(1){
 152:main.c        **** 		volatile int slot = ((flash_get_current_time()) / TDMA_SLOT_LEN) % NUM_NODES;
 779               	.LM48:
 780 00d4 0E94 0000 		call flash_get_current_time
 781 00d8 E4E3      		ldi r30,lo8(52)
 782 00da AE2E      		mov r10,r30
 783 00dc F8E0      		ldi r31,lo8(8)
 784 00de BF2E      		mov r11,r31
 785 00e0 C12C      		mov r12,__zero_reg__
 786 00e2 D12C      		mov r13,__zero_reg__
 787 00e4 E12C      		mov r14,__zero_reg__
 788 00e6 F12C      		mov r15,__zero_reg__
 789 00e8 00E0      		ldi r16,0
 790 00ea 10E0      		ldi r17,0
 791 00ec 0E94 0000 		call __udivdi3
 792 00f0 AAE0      		ldi r26,lo8(10)
 793 00f2 AA2E      		mov r10,r26
 794 00f4 B12C      		mov r11,__zero_reg__
 795 00f6 0E94 0000 		call __umoddi3
 796 00fa 3A8F      		std Y+26,r19
 797 00fc 298F      		std Y+25,r18
 153:main.c        **** 		//printf("slot = %d\r\n", slot);
 154:main.c        **** 		if (slot == 0){ //perform time sync
 799               	.LM49:
 800 00fe 898D      		ldd r24,Y+25
 801 0100 9A8D      		ldd r25,Y+26
 802 0102 892B      		or r24,r25
 803 0104 01F4      		brne .L8
 155:main.c        **** 			num_sync_sent ++;
 156:main.c        **** 			timestamp = (uint32_t)flash_get_current_time();
 805               	.LM50:
 806 0106 0E94 0000 		call flash_get_current_time
 807 010a 2A83      		std Y+2,r18
 808 010c 3B83      		std Y+3,r19
 809 010e 4C83      		std Y+4,r20
 810 0110 5D83      		std Y+5,r21
 157:main.c        **** 			*(uint32_t *)(sync_buf + 1) = timestamp;
 158:main.c        **** 			flash_tx_pkt(sync_buf, 5);
 812               	.LM51:
 813 0112 65E0      		ldi r22,lo8(5)
 814 0114 CE01      		movw r24,r28
 815 0116 0196      		adiw r24,1
 816 0118 0E94 0000 		call flash_tx_pkt
 817               	.L8:
 159:main.c        **** 		}
 160:main.c        **** 		//else*/
 161:main.c        **** 		if (slot != 0){
 819               	.LM52:
 820 011c 898D      		ldd r24,Y+25
 821 011e 9A8D      		ldd r25,Y+26
 822 0120 892B      		or r24,r25
 823 0122 01F0      		breq .L9
 162:main.c        **** 			if (num_sync_sent > 0){
 163:main.c        **** 				//printf("sent %lu sync messages\r\n",num_sync_sent);
 164:main.c        **** 				num_sync_sent = 0;
 165:main.c        **** 			}
 166:main.c        **** 			flash_enable(10, &timeout, node_data_callback);
 825               	.LM53:
 826 0124 40E0      		ldi r20,lo8(gs(node_data_callback))
 827 0126 50E0      		ldi r21,hi8(gs(node_data_callback))
 828 0128 BE01      		movw r22,r28
 829 012a 6F5E      		subi r22,-17
 830 012c 7F4F      		sbci r23,-1
 831 012e 8AE0      		ldi r24,lo8(10)
 832 0130 0E94 0000 		call flash_enable
 833 0134 00C0      		rjmp .L9
 834               	.LBE2:
 843               	.Lscope3:
 845               		.stabd	78,0,0
 846               		.comm	rx_buf,116,1
 847               	.global	failed
 848               		.section .bss
 851               	failed:
 852 0000 0000 0000 		.zero	4
 853               	.global	correct
 856               	correct:
 857 0004 0000 0000 		.zero	4
 858               		.comm	time_slots,10,1
 859               	.global	nodeID
 862               	nodeID:
 863 0008 00        		.zero	1
 864               		.comm	rfRxInfo,12,1
 865               		.comm	test_task_stack,256,1
 866               		.comm	TEST_TASK,35,1
 867               		.comm	flash_tx_pkt_done_signal,1,1
 868               		.comm	app_timer0_prescale,1,1
 869               		.comm	app_timer0_callback,2,1
 870               		.comm	_nrk_time_trigger,1,1
 871               		.comm	_nrk_prev_timer_val,1,1
 872               		.comm	error_num,1,1
 873               		.comm	error_task,1,1
 874               		.comm	nrk_kernel_stk_ptr,2,1
 875               		.comm	nrk_idle_task_stk,128,1
 876               		.comm	_nrk_signal_list,4,1
 895               		.text
 897               	.Letext0:
 898               		.ident	"GCC: (GNU) 4.9.2"
 899               	.global __do_copy_data
 900               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//ccj7HpVz.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//ccj7HpVz.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//ccj7HpVz.s:4      *ABS*:000000000000003f __SREG__
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//ccj7HpVz.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//ccj7HpVz.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//ccj7HpVz.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//ccj7HpVz.s:349    .text:0000000000000000 node_data_callback
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//ccj7HpVz.s:851    .bss:0000000000000000 failed
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//ccj7HpVz.s:856    .bss:0000000000000004 correct
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//ccj7HpVz.s:561    .text:0000000000000180 main_disabled
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//ccj7HpVz.s:639    .text.startup:0000000000000000 main
/var/folders/g6/tbq62m5x2cb4hdh54h_fbn3h0000gn/T//ccj7HpVz.s:862    .bss:0000000000000008 nodeID
                            *COM*:0000000000000074 rx_buf
                            *COM*:000000000000000a time_slots
                            *COM*:000000000000000c rfRxInfo
                            *COM*:0000000000000100 test_task_stack
                            *COM*:0000000000000023 TEST_TASK
                            *COM*:0000000000000001 flash_tx_pkt_done_signal
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
__udivdi3
__umoddi3
flash_get_current_time
__divmodsi4
__muluhisi3
printf
nrk_led_toggle
nrk_setup_ports
nrk_setup_uart
puts
nrk_led_clr
nrk_time_set
flash_init
flash_timer_setup
nrk_init
flash_tx_pkt
flash_set_retransmit
flash_enable
__do_copy_data
__do_clear_bss
