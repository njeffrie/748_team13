
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019e  00800200  00005df6  00005e8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005df6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000026e  0080039e  0080039e  00006028  2**0
                  ALLOC
  3 .stab         000143f4  00000000  00000000  00006028  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00009866  00000000  00000000  0001a41c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00023c82  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 28 02 	jmp	0x450	; 0x450 <__ctors_end>
       4:	0c 94 60 28 	jmp	0x50c0	; 0x50c0 <__vector_1>
       8:	0c 94 92 28 	jmp	0x5124	; 0x5124 <__vector_2>
       c:	0c 94 c4 28 	jmp	0x5188	; 0x5188 <__vector_3>
      10:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      14:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      18:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      1c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      20:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      24:	0c 94 2e 28 	jmp	0x505c	; 0x505c <__vector_9>
      28:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      2c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      30:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      34:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__vector_13>
      38:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      3c:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__vector_13>
      40:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      44:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      48:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      4c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      50:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      54:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      58:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      5c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      60:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      64:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      68:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      6c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      70:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      74:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      78:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      7c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      80:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <__vector_32>
      84:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      88:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      8c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      90:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      94:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      98:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      9c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      a0:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      a4:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      a8:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      ac:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      b0:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      b4:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      b8:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      bc:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      c0:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      c4:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      c8:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      cc:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      d0:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      d4:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      d8:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      dc:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      e0:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
      e4:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <__vector_57>
      e8:	0c 94 2b 0d 	jmp	0x1a56	; 0x1a56 <__vector_58>
      ec:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__vector_59>
      f0:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <__vector_60>
      f4:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__vector_61>
      f8:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <__vector_62>
      fc:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <__vector_63>
     100:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__vector_64>
     104:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
     108:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
     10c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
     110:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
     114:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
     118:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
     11c:	0c 94 47 02 	jmp	0x48e	; 0x48e <__bad_interrupt>
     120:	6e 0f       	add	r22, r30
     122:	79 0f       	add	r23, r25
     124:	84 0f       	add	r24, r20
     126:	8f 0f       	add	r24, r31
     128:	9a 0f       	add	r25, r26
     12a:	a5 0f       	add	r26, r21
     12c:	b0 0f       	add	r27, r16
     12e:	cf 0f       	add	r28, r31
     130:	db 0f       	add	r29, r27
     132:	e7 0f       	add	r30, r23
     134:	f3 0f       	add	r31, r19
     136:	ff 0f       	add	r31, r31
     138:	0b 10       	cpse	r0, r11
     13a:	0b 10       	cpse	r0, r11
     13c:	29 10       	cpse	r2, r9
     13e:	2b 10       	cpse	r2, r11
     140:	2d 10       	cpse	r2, r13
     142:	2f 10       	cpse	r2, r15
     144:	31 10       	cpse	r3, r1
     146:	33 10       	cpse	r3, r3
     148:	35 10       	cpse	r3, r5
     14a:	53 10       	cpse	r5, r3
     14c:	73 10       	cpse	r7, r3
     14e:	93 10       	cpse	r9, r3
     150:	b3 10       	cpse	r11, r3
     152:	d3 10       	cpse	r13, r3
     154:	f3 10       	cpse	r15, r3
     156:	13 11       	cpse	r17, r3
     158:	49 11       	cpse	r20, r9
     15a:	55 11       	cpse	r21, r5
     15c:	61 11       	cpse	r22, r1
     15e:	6d 11       	cpse	r22, r13
     160:	79 11       	cpse	r23, r9
     162:	85 11       	cpse	r24, r5
     164:	91 11       	cpse	r25, r1
     166:	a9 11       	cpse	r26, r9
     168:	b4 11       	cpse	r27, r4
     16a:	bf 11       	cpse	r27, r15
     16c:	ca 11       	cpse	r28, r10
     16e:	d5 11       	cpse	r29, r5
     170:	e0 11       	cpse	r30, r0
     172:	eb 11       	cpse	r30, r11
     174:	4a 15       	cp	r20, r10
     176:	50 15       	cp	r21, r0
     178:	53 15       	cp	r21, r3
     17a:	56 15       	cp	r21, r6
     17c:	59 15       	cp	r21, r9
     17e:	5c 15       	cp	r21, r12
     180:	62 15       	cp	r22, r2
     182:	5f 15       	cp	r21, r15
     184:	65 15       	cp	r22, r5
     186:	68 15       	cp	r22, r8
     188:	6b 15       	cp	r22, r11
     18a:	74 15       	cp	r23, r4
     18c:	77 15       	cp	r23, r7
     18e:	7a 15       	cp	r23, r10
     190:	7d 15       	cp	r23, r13
     192:	71 15       	cp	r23, r1
     194:	47 15       	cp	r20, r7
     196:	4d 15       	cp	r20, r13
     198:	80 15       	cp	r24, r0
     19a:	83 15       	cp	r24, r3
     19c:	6e 15       	cp	r22, r14
     19e:	44 15       	cp	r20, r4
     1a0:	19 16       	cp	r1, r25
     1a2:	1c 16       	cp	r1, r28
     1a4:	27 16       	cp	r2, r23
     1a6:	2c 16       	cp	r2, r28
     1a8:	33 16       	cp	r3, r19
     1aa:	3c 16       	cp	r3, r28
     1ac:	3f 16       	cp	r3, r31
     1ae:	44 16       	cp	r4, r20
     1b0:	4b 16       	cp	r4, r27
     1b2:	54 16       	cp	r5, r20

000001b4 <__c.3323>:
     1b4:	46 61 69 6c 65 64 20 74 6f 20 6c 6f 61 64 20 6d     Failed to load m
     1c4:	79 20 41 44 43 20 64 72 69 76 65 72 0d 0a 00        y ADC driver...

000001d3 <__c.3315>:
     1d3:	46 61 69 6c 65 64 20 74 6f 20 6f 70 65 6e 20 73     Failed to open s
     1e3:	65 6e 73 6f 72 20 64 72 69 76 65 72 0d 0a 00        ensor driver...

000001f2 <__c.3307>:
     1f2:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000001f9 <__c.3304>:
     1f9:	45 78 74 65 72 6e 61 6c 20 52 65 73 65 74 00        External Reset.

00000208 <__c.3301>:
     208:	42 72 6f 77 6e 20 4f 75 74 20 44 65 74 65 63 74     Brown Out Detect
	...

00000219 <__c.3298>:
     219:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     229:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

00000234 <__c.3295>:
     234:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     244:	20 53 69 67 6e 61 6c 00                              Signal.

0000024c <__c.3292>:
     24c:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     25c:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

0000026c <__c.3289>:
     26c:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     27c:	72 6f 72 00                                         ror.

00000280 <__c.3286>:
     280:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000291 <__c.3283>:
     291:	53 57 20 57 61 74 63 68 64 6f 67 20 52 65 73 74     SW Watchdog Rest
     2a1:	61 72 74 00                                         art.

000002a5 <__c.3280>:
     2a5:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

000002b4 <__c.3277>:
     2b4:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     2c4:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

000002cf <__c.3274>:
     2cf:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

000002db <__c.3271>:
     2db:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     2eb:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     2fb:	20 6f 6b 3f 00                                       ok?.

00000300 <__c.3268>:
     300:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     310:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

0000031e <__c.3265>:
     31e:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     32e:	72 74 00                                            rt.

00000331 <__c.3262>:
     331:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     341:	49 44 00                                            ID.

00000344 <__c.3259>:
     344:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     354:	20 57 61 6b 65 75 70 00                              Wakeup.

0000035c <__c.3256>:
     35c:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     36c:	6c 61 74 65 64 00                                   lated.

00000372 <__c.3253>:
     372:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     382:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000038d <__c.3250>:
     38d:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     39d:	69 6e 74 65 72 00                                   inter.

000003a3 <__c.3247>:
     3a3:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     3b3:	6c 6f 77 00                                         low.

000003b7 <__c.3244>:
     3b7:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     3c7:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     3d7:	6e 6f 75 67 68 21 00                                nough!.

000003de <__c.3240>:
     3de:	54 61 73 6b 20 70 65 72 69 6f 64 20 74 6f 6f 20     Task period too 
     3ee:	6c 61 72 67 65 2e 20 50 65 72 69 6f 64 20 6d 75     large. Period mu
     3fe:	73 74 20 62 65 20 6c 65 73 73 20 74 68 61 6e 20     st be less than 
     40e:	36 31 20 73 65 63 6f 6e 64 73 2e 00                 61 seconds..

0000041a <__c.3237>:
     41a:	29 3a 20 00                                         ): .

0000041e <__c.3235>:
     41e:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

0000042a <__c.3172>:
     42a:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

00000439 <__c.2072>:
     439:	45 46 47 65 66 67 00                                EFGefg.

00000440 <__c.2066>:
     440:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

00000450 <__ctors_end>:
     450:	11 24       	eor	r1, r1
     452:	1f be       	out	0x3f, r1	; 63
     454:	cf ef       	ldi	r28, 0xFF	; 255
     456:	d1 e4       	ldi	r29, 0x41	; 65
     458:	de bf       	out	0x3e, r29	; 62
     45a:	cd bf       	out	0x3d, r28	; 61

0000045c <__do_copy_data>:
     45c:	13 e0       	ldi	r17, 0x03	; 3
     45e:	a0 e0       	ldi	r26, 0x00	; 0
     460:	b2 e0       	ldi	r27, 0x02	; 2
     462:	e6 ef       	ldi	r30, 0xF6	; 246
     464:	fd e5       	ldi	r31, 0x5D	; 93
     466:	00 e0       	ldi	r16, 0x00	; 0
     468:	0b bf       	out	0x3b, r16	; 59
     46a:	02 c0       	rjmp	.+4      	; 0x470 <__do_copy_data+0x14>
     46c:	07 90       	elpm	r0, Z+
     46e:	0d 92       	st	X+, r0
     470:	ae 39       	cpi	r26, 0x9E	; 158
     472:	b1 07       	cpc	r27, r17
     474:	d9 f7       	brne	.-10     	; 0x46c <__do_copy_data+0x10>

00000476 <__do_clear_bss>:
     476:	16 e0       	ldi	r17, 0x06	; 6
     478:	ae e9       	ldi	r26, 0x9E	; 158
     47a:	b3 e0       	ldi	r27, 0x03	; 3
     47c:	01 c0       	rjmp	.+2      	; 0x480 <.do_clear_bss_start>

0000047e <.do_clear_bss_loop>:
     47e:	1d 92       	st	X+, r1

00000480 <.do_clear_bss_start>:
     480:	ac 30       	cpi	r26, 0x0C	; 12
     482:	b1 07       	cpc	r27, r17
     484:	e1 f7       	brne	.-8      	; 0x47e <.do_clear_bss_loop>
     486:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <main>
     48a:	0c 94 f9 2e 	jmp	0x5df2	; 0x5df2 <_exit>

0000048e <__bad_interrupt>:
     48e:	0c 94 83 26 	jmp	0x4d06	; 0x4d06 <__vector_default>

00000492 <Task1>:
  return 0;
}


void Task1()
{
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	2a 97       	sbiw	r28, 0x0a	; 10
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
uint16_t cnt;
int8_t i,fd, val;
uint16_t buf[5];
uint64_t bbuf;

  printf( "My node's address is %d\r\n",NODE_ADDR );
     4a6:	1f 92       	push	r1
     4a8:	1f 92       	push	r1
     4aa:	87 e5       	ldi	r24, 0x57	; 87
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	9f 93       	push	r25
     4b0:	8f 93       	push	r24
     4b2:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>

  	// Open ADC device as read 
  	fd=nrk_open(FIREFLY_3_SENSOR_BASIC,READ);
     4b6:	65 e0       	ldi	r22, 0x05	; 5
     4b8:	83 e0       	ldi	r24, 0x03	; 3
     4ba:	0e 94 56 24 	call	0x48ac	; 0x48ac <nrk_open>
     4be:	f8 2e       	mov	r15, r24
  	if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	8f ef       	ldi	r24, 0xFF	; 255
     4ca:	f8 12       	cpse	r15, r24
     4cc:	04 c0       	rjmp	.+8      	; 0x4d6 <Task1+0x44>
     4ce:	83 ed       	ldi	r24, 0xD3	; 211
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <nrk_kprintf>
		
		// acc_z
		val=nrk_set_status(fd,SENSOR_SELECT,ACC_Z);
		val=nrk_read(fd,&buf[4],2);

		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
     4d6:	01 e7       	ldi	r16, 0x71	; 113
     4d8:	12 e0       	ldi	r17, 0x02	; 2
			NODE_ADDR, buf[0], buf[1], buf[2], buf[3], buf[4] );
	
		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
     4da:	8a e0       	ldi	r24, 0x0A	; 10
     4dc:	b8 2e       	mov	r11, r24
			10, buf[0], buf[1], buf[2], buf[3], buf[4] );
		
		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
     4de:	96 e1       	ldi	r25, 0x16	; 22
     4e0:	c9 2e       	mov	r12, r25
			22, buf[0], buf[1], buf[2], buf[3], buf[4] );

		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
     4e2:	29 e1       	ldi	r18, 0x19	; 25
     4e4:	d2 2e       	mov	r13, r18
			25, buf[0], buf[1], buf[2], buf[3], buf[4] );
	
		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
     4e6:	38 e0       	ldi	r19, 0x08	; 8
     4e8:	e3 2e       	mov	r14, r19
  	fd=nrk_open(FIREFLY_3_SENSOR_BASIC,READ);
  	if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
	cnt=0;
	while(1) {
		// Example of setting a sensor 
		val=nrk_set_status(fd,SENSOR_SELECT,LIGHT);
     4ea:	41 e0       	ldi	r20, 0x01	; 1
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	8f 2d       	mov	r24, r15
     4f0:	0e 94 f7 24 	call	0x49ee	; 0x49ee <nrk_set_status>
		val=nrk_read(fd,&buf[0],2);
     4f4:	42 e0       	ldi	r20, 0x02	; 2
     4f6:	be 01       	movw	r22, r28
     4f8:	6f 5f       	subi	r22, 0xFF	; 255
     4fa:	7f 4f       	sbci	r23, 0xFF	; 255
     4fc:	8f 2d       	mov	r24, r15
     4fe:	0e 94 da 24 	call	0x49b4	; 0x49b4 <nrk_read>
		
		// temp
		val=nrk_set_status(fd,SENSOR_SELECT,TEMP);
     502:	40 e0       	ldi	r20, 0x00	; 0
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	8f 2d       	mov	r24, r15
     508:	0e 94 f7 24 	call	0x49ee	; 0x49ee <nrk_set_status>
		val=nrk_read(fd,&buf[1],2);
     50c:	42 e0       	ldi	r20, 0x02	; 2
     50e:	be 01       	movw	r22, r28
     510:	6d 5f       	subi	r22, 0xFD	; 253
     512:	7f 4f       	sbci	r23, 0xFF	; 255
     514:	8f 2d       	mov	r24, r15
     516:	0e 94 da 24 	call	0x49b4	; 0x49b4 <nrk_read>
		
		// acc_x
		val=nrk_set_status(fd,SENSOR_SELECT,ACC_X);
     51a:	44 e0       	ldi	r20, 0x04	; 4
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	8f 2d       	mov	r24, r15
     520:	0e 94 f7 24 	call	0x49ee	; 0x49ee <nrk_set_status>
		val=nrk_read(fd,&buf[2],2);
     524:	42 e0       	ldi	r20, 0x02	; 2
     526:	be 01       	movw	r22, r28
     528:	6b 5f       	subi	r22, 0xFB	; 251
     52a:	7f 4f       	sbci	r23, 0xFF	; 255
     52c:	8f 2d       	mov	r24, r15
     52e:	0e 94 da 24 	call	0x49b4	; 0x49b4 <nrk_read>
		
		// acc_y
		val=nrk_set_status(fd,SENSOR_SELECT,ACC_Y);
     532:	45 e0       	ldi	r20, 0x05	; 5
     534:	61 e0       	ldi	r22, 0x01	; 1
     536:	8f 2d       	mov	r24, r15
     538:	0e 94 f7 24 	call	0x49ee	; 0x49ee <nrk_set_status>
		val=nrk_read(fd,&buf[3],2);
     53c:	42 e0       	ldi	r20, 0x02	; 2
     53e:	be 01       	movw	r22, r28
     540:	69 5f       	subi	r22, 0xF9	; 249
     542:	7f 4f       	sbci	r23, 0xFF	; 255
     544:	8f 2d       	mov	r24, r15
     546:	0e 94 da 24 	call	0x49b4	; 0x49b4 <nrk_read>
		
		// acc_z
		val=nrk_set_status(fd,SENSOR_SELECT,ACC_Z);
     54a:	46 e0       	ldi	r20, 0x06	; 6
     54c:	61 e0       	ldi	r22, 0x01	; 1
     54e:	8f 2d       	mov	r24, r15
     550:	0e 94 f7 24 	call	0x49ee	; 0x49ee <nrk_set_status>
		val=nrk_read(fd,&buf[4],2);
     554:	42 e0       	ldi	r20, 0x02	; 2
     556:	be 01       	movw	r22, r28
     558:	67 5f       	subi	r22, 0xF7	; 247
     55a:	7f 4f       	sbci	r23, 0xFF	; 255
     55c:	8f 2d       	mov	r24, r15
     55e:	0e 94 da 24 	call	0x49b4	; 0x49b4 <nrk_read>

		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
     562:	8a 85       	ldd	r24, Y+10	; 0x0a
     564:	8f 93       	push	r24
     566:	89 85       	ldd	r24, Y+9	; 0x09
     568:	8f 93       	push	r24
     56a:	88 85       	ldd	r24, Y+8	; 0x08
     56c:	8f 93       	push	r24
     56e:	8f 81       	ldd	r24, Y+7	; 0x07
     570:	8f 93       	push	r24
     572:	8e 81       	ldd	r24, Y+6	; 0x06
     574:	8f 93       	push	r24
     576:	8d 81       	ldd	r24, Y+5	; 0x05
     578:	8f 93       	push	r24
     57a:	8c 81       	ldd	r24, Y+4	; 0x04
     57c:	8f 93       	push	r24
     57e:	8b 81       	ldd	r24, Y+3	; 0x03
     580:	8f 93       	push	r24
     582:	8a 81       	ldd	r24, Y+2	; 0x02
     584:	8f 93       	push	r24
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	8f 93       	push	r24
     58a:	1f 92       	push	r1
     58c:	1f 92       	push	r1
     58e:	1f 93       	push	r17
     590:	0f 93       	push	r16
     592:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>
			NODE_ADDR, buf[0], buf[1], buf[2], buf[3], buf[4] );
	
		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
     596:	8a 85       	ldd	r24, Y+10	; 0x0a
     598:	8f 93       	push	r24
     59a:	89 85       	ldd	r24, Y+9	; 0x09
     59c:	8f 93       	push	r24
     59e:	88 85       	ldd	r24, Y+8	; 0x08
     5a0:	8f 93       	push	r24
     5a2:	8f 81       	ldd	r24, Y+7	; 0x07
     5a4:	8f 93       	push	r24
     5a6:	8e 81       	ldd	r24, Y+6	; 0x06
     5a8:	8f 93       	push	r24
     5aa:	8d 81       	ldd	r24, Y+5	; 0x05
     5ac:	8f 93       	push	r24
     5ae:	8c 81       	ldd	r24, Y+4	; 0x04
     5b0:	8f 93       	push	r24
     5b2:	8b 81       	ldd	r24, Y+3	; 0x03
     5b4:	8f 93       	push	r24
     5b6:	8a 81       	ldd	r24, Y+2	; 0x02
     5b8:	8f 93       	push	r24
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	8f 93       	push	r24
     5be:	1f 92       	push	r1
     5c0:	bf 92       	push	r11
     5c2:	1f 93       	push	r17
     5c4:	0f 93       	push	r16
     5c6:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>
			10, buf[0], buf[1], buf[2], buf[3], buf[4] );
		
		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
     5ca:	8a 85       	ldd	r24, Y+10	; 0x0a
     5cc:	8f 93       	push	r24
     5ce:	89 85       	ldd	r24, Y+9	; 0x09
     5d0:	8f 93       	push	r24
     5d2:	88 85       	ldd	r24, Y+8	; 0x08
     5d4:	8f 93       	push	r24
     5d6:	8f 81       	ldd	r24, Y+7	; 0x07
     5d8:	8f 93       	push	r24
     5da:	8e 81       	ldd	r24, Y+6	; 0x06
     5dc:	8f 93       	push	r24
     5de:	8d 81       	ldd	r24, Y+5	; 0x05
     5e0:	8f 93       	push	r24
     5e2:	8c 81       	ldd	r24, Y+4	; 0x04
     5e4:	8f 93       	push	r24
     5e6:	8b 81       	ldd	r24, Y+3	; 0x03
     5e8:	8f 93       	push	r24
     5ea:	8a 81       	ldd	r24, Y+2	; 0x02
     5ec:	8f 93       	push	r24
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	8f 93       	push	r24
     5f2:	1f 92       	push	r1
     5f4:	cf 92       	push	r12
     5f6:	1f 93       	push	r17
     5f8:	0f 93       	push	r16
     5fa:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>
			22, buf[0], buf[1], buf[2], buf[3], buf[4] );

		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
     608:	8a 85       	ldd	r24, Y+10	; 0x0a
     60a:	8f 93       	push	r24
     60c:	89 85       	ldd	r24, Y+9	; 0x09
     60e:	8f 93       	push	r24
     610:	88 85       	ldd	r24, Y+8	; 0x08
     612:	8f 93       	push	r24
     614:	8f 81       	ldd	r24, Y+7	; 0x07
     616:	8f 93       	push	r24
     618:	8e 81       	ldd	r24, Y+6	; 0x06
     61a:	8f 93       	push	r24
     61c:	8d 81       	ldd	r24, Y+5	; 0x05
     61e:	8f 93       	push	r24
     620:	8c 81       	ldd	r24, Y+4	; 0x04
     622:	8f 93       	push	r24
     624:	8b 81       	ldd	r24, Y+3	; 0x03
     626:	8f 93       	push	r24
     628:	8a 81       	ldd	r24, Y+2	; 0x02
     62a:	8f 93       	push	r24
     62c:	89 81       	ldd	r24, Y+1	; 0x01
     62e:	8f 93       	push	r24
     630:	1f 92       	push	r1
     632:	df 92       	push	r13
     634:	1f 93       	push	r17
     636:	0f 93       	push	r16
     638:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>
			25, buf[0], buf[1], buf[2], buf[3], buf[4] );
	
		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
     63c:	8a 85       	ldd	r24, Y+10	; 0x0a
     63e:	8f 93       	push	r24
     640:	89 85       	ldd	r24, Y+9	; 0x09
     642:	8f 93       	push	r24
     644:	88 85       	ldd	r24, Y+8	; 0x08
     646:	8f 93       	push	r24
     648:	8f 81       	ldd	r24, Y+7	; 0x07
     64a:	8f 93       	push	r24
     64c:	8e 81       	ldd	r24, Y+6	; 0x06
     64e:	8f 93       	push	r24
     650:	8d 81       	ldd	r24, Y+5	; 0x05
     652:	8f 93       	push	r24
     654:	8c 81       	ldd	r24, Y+4	; 0x04
     656:	8f 93       	push	r24
     658:	8b 81       	ldd	r24, Y+3	; 0x03
     65a:	8f 93       	push	r24
     65c:	8a 81       	ldd	r24, Y+2	; 0x02
     65e:	8f 93       	push	r24
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	8f 93       	push	r24
     664:	1f 92       	push	r1
     666:	ef 92       	push	r14
     668:	1f 93       	push	r17
     66a:	0f 93       	push	r16
     66c:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>
			8, buf[0], buf[1], buf[2], buf[3], buf[4] );
	

		nrk_wait_until_next_period();
     670:	0e 94 3e 1c 	call	0x387c	; 0x387c <nrk_wait_until_next_period>
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	de bf       	out	0x3e, r29	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	cd bf       	out	0x3d, r28	; 61
     67e:	35 cf       	rjmp	.-406    	; 0x4ea <Task1+0x58>

00000680 <nrk_create_taskset>:


void
nrk_create_taskset()
{
  TaskOne.task = Task1;
     680:	89 e4       	ldi	r24, 0x49	; 73
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	90 93 ac 03 	sts	0x03AC, r25
     688:	80 93 ab 03 	sts	0x03AB, r24
  nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
     68c:	40 e8       	ldi	r20, 0x80	; 128
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	6d ec       	ldi	r22, 0xCD	; 205
     692:	73 e0       	ldi	r23, 0x03	; 3
     694:	86 ea       	ldi	r24, 0xA6	; 166
     696:	93 e0       	ldi	r25, 0x03	; 3
     698:	0e 94 38 29 	call	0x5270	; 0x5270 <nrk_task_set_stk>
  TaskOne.prio = 1;
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	80 93 ae 03 	sts	0x03AE, r24
  TaskOne.FirstActivation = TRUE;
     6a2:	80 93 ad 03 	sts	0x03AD, r24
  TaskOne.Type = BASIC_TASK;
     6a6:	80 93 af 03 	sts	0x03AF, r24
  TaskOne.SchType = PREEMPTIVE;
     6aa:	80 93 b0 03 	sts	0x03B0, r24
  TaskOne.period.secs = 0;
     6ae:	10 92 b1 03 	sts	0x03B1, r1
     6b2:	10 92 b2 03 	sts	0x03B2, r1
     6b6:	10 92 b3 03 	sts	0x03B3, r1
     6ba:	10 92 b4 03 	sts	0x03B4, r1
  TaskOne.period.nano_secs = 2000*NANOS_PER_MS; //*NANOS_PER_MS;
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	94 e9       	ldi	r25, 0x94	; 148
     6c2:	a5 e3       	ldi	r26, 0x35	; 53
     6c4:	b7 e7       	ldi	r27, 0x77	; 119
     6c6:	80 93 b5 03 	sts	0x03B5, r24
     6ca:	90 93 b6 03 	sts	0x03B6, r25
     6ce:	a0 93 b7 03 	sts	0x03B7, r26
     6d2:	b0 93 b8 03 	sts	0x03B8, r27
  TaskOne.cpu_reserve.secs = 0;
     6d6:	10 92 b9 03 	sts	0x03B9, r1
     6da:	10 92 ba 03 	sts	0x03BA, r1
     6de:	10 92 bb 03 	sts	0x03BB, r1
     6e2:	10 92 bc 03 	sts	0x03BC, r1
  TaskOne.cpu_reserve.nano_secs =  200*NANOS_PER_MS;
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	92 ec       	ldi	r25, 0xC2	; 194
     6ea:	ab ee       	ldi	r26, 0xEB	; 235
     6ec:	bb e0       	ldi	r27, 0x0B	; 11
     6ee:	80 93 bd 03 	sts	0x03BD, r24
     6f2:	90 93 be 03 	sts	0x03BE, r25
     6f6:	a0 93 bf 03 	sts	0x03BF, r26
     6fa:	b0 93 c0 03 	sts	0x03C0, r27
  TaskOne.offset.secs = 0;
     6fe:	10 92 c1 03 	sts	0x03C1, r1
     702:	10 92 c2 03 	sts	0x03C2, r1
     706:	10 92 c3 03 	sts	0x03C3, r1
     70a:	10 92 c4 03 	sts	0x03C4, r1
  TaskOne.offset.nano_secs= 0;
     70e:	10 92 c5 03 	sts	0x03C5, r1
     712:	10 92 c6 03 	sts	0x03C6, r1
     716:	10 92 c7 03 	sts	0x03C7, r1
     71a:	10 92 c8 03 	sts	0x03C8, r1
  nrk_activate_task (&TaskOne);
     71e:	86 ea       	ldi	r24, 0xA6	; 166
     720:	93 e0       	ldi	r25, 0x03	; 3
     722:	0c 94 ac 1b 	jmp	0x3758	; 0x3758 <nrk_activate_task>

00000726 <nrk_register_drivers>:
//     #define NRK_MAX_DRIVER_CNT  
//     in nrk_cfg.h
// Make sure to add: 
//     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
//     in makefile
val=nrk_register_driver( &dev_manager_ff3_sensors,FIREFLY_3_SENSOR_BASIC);
     726:	63 e0       	ldi	r22, 0x03	; 3
     728:	87 e0       	ldi	r24, 0x07	; 7
     72a:	98 e0       	ldi	r25, 0x08	; 8
     72c:	0e 94 3e 24 	call	0x487c	; 0x487c <nrk_register_driver>
if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
     730:	8f 3f       	cpi	r24, 0xFF	; 255
     732:	21 f4       	brne	.+8      	; 0x73c <nrk_register_drivers+0x16>
     734:	84 eb       	ldi	r24, 0xB4	; 180
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <nrk_kprintf>
     73c:	08 95       	ret

0000073e <open>:
}

int8_t open(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
    // Note that here nothing needs to be done for the I2C. This is the original
    // code for the firefly 2.2 board driver
	if (is_open == 1) return NRK_ERROR;
     73e:	80 91 fc 04 	lds	r24, 0x04FC
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	11 f4       	brne	.+4      	; 0x74a <open+0xc>
     746:	8f ef       	ldi	r24, 0xFF	; 255
     748:	08 95       	ret
    is_open = 1;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	80 93 fc 04 	sts	0x04FC, r24
    if (opt & READ_FLAG) {
     750:	60 ff       	sbrs	r22, 0
     752:	18 c0       	rjmp	.+48     	; 0x784 <open+0x46>
        // Turn on Sensor Node Power
        //PORTE &= ~(PWR_CTRL_MASK);
        //PORTE |= PWR_CTRL_MASK;
        nrk_gpio_set(PWR_CTRL_PIN);
     754:	80 91 24 02 	lds	r24, 0x0224
     758:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <nrk_gpio_set>
        channel = 0;
     75c:	10 92 01 05 	sts	0x0501, r1
        ADC_SET_CHANNEL(0);
     760:	80 91 7c 00 	lds	r24, 0x007C
     764:	80 7e       	andi	r24, 0xE0	; 224
     766:	80 93 7c 00 	sts	0x007C, r24
     76a:	90 91 7c 00 	lds	r25, 0x007C
     76e:	80 91 7c 00 	lds	r24, 0x007C
     772:	80 7e       	andi	r24, 0xE0	; 224
     774:	89 2b       	or	r24, r25
     776:	80 93 7c 00 	sts	0x007C, r24
        nrk_spin_wait_us(ADC_STARTUP_DELAY);
     77a:	88 ee       	ldi	r24, 0xE8	; 232
     77c:	93 e0       	ldi	r25, 0x03	; 3
     77e:	0e 94 31 25 	call	0x4a62	; 0x4a62 <nrk_spin_wait_us>
     782:	05 c0       	rjmp	.+10     	; 0x78e <open+0x50>
     784:	86 2f       	mov	r24, r22
     786:	86 70       	andi	r24, 0x06	; 6
        return NRK_OK;
    }
    if (opt & WRITE_FLAG) {
        return NRK_ERROR;
    }
    if (opt & APPEND_FLAG) {
     788:	f1 f6       	brne	.-68     	; 0x746 <open+0x8>
        return NRK_ERROR;
    }
    if (((opt)&(READ_FLAG | WRITE_FLAG | APPEND_FLAG)) == 0)
     78a:	67 70       	andi	r22, 0x07	; 7
     78c:	e1 f2       	breq	.-72     	; 0x746 <open+0x8>
        return NRK_ERROR;
    else return NRK_OK;
     78e:	81 e0       	ldi	r24, 0x01	; 1

}
     790:	08 95       	ret

00000792 <close>:

int8_t close(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {

    // Turn off sensor power
    //PORTE |= PWR_CTRL_MASK;
    nrk_gpio_clr(PWR_CTRL_PIN);
     792:	80 91 24 02 	lds	r24, 0x0224
     796:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <nrk_gpio_clr>
    //PORTE &= ~(PWR_CTRL_MASK);
    	is_open = 0;
     79a:	10 92 fc 04 	sts	0x04FC, r1
    close_i2c(); // Shut down the I2C
     79e:	0e 94 42 08 	call	0x1084	; 0x1084 <close_i2c>
    ADC_DISABLE();
     7a2:	ea e7       	ldi	r30, 0x7A	; 122
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	80 81       	ld	r24, Z
     7a8:	8f 77       	andi	r24, 0x7F	; 127
     7aa:	80 83       	st	Z, r24
    return NRK_OK;
}
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	08 95       	ret

000007b0 <get_status>:

    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
     7b0:	61 30       	cpi	r22, 0x01	; 1
     7b2:	19 f4       	brne	.+6      	; 0x7ba <get_status+0xa>
     7b4:	80 91 01 05 	lds	r24, 0x0501
     7b8:	08 95       	ret
    return NRK_ERROR;
     7ba:	8f ef       	ldi	r24, 0xFF	; 255
}
     7bc:	08 95       	ret

000007be <set_status>:
    // key and value get passed as opt and size
    uint8_t key = opt;
    uint8_t value = size;

    // use "key" and "value" here
    if (key == SENSOR_SELECT) {
     7be:	61 30       	cpi	r22, 0x01	; 1
     7c0:	69 f5       	brne	.+90     	; 0x81c <set_status+0x5e>
        // Set to audio channel if it is an average value
        if (value == AUDIO_P2P) {
     7c2:	2c 30       	cpi	r18, 0x0C	; 12
     7c4:	69 f4       	brne	.+26     	; 0x7e0 <set_status+0x22>
            channel = value;
     7c6:	20 93 01 05 	sts	0x0501, r18
            ADC_VREF_VCC();
            ADC_SET_CHANNEL(AUDIO);
     7ca:	80 91 7c 00 	lds	r24, 0x007C
     7ce:	80 7e       	andi	r24, 0xE0	; 224
     7d0:	80 93 7c 00 	sts	0x007C, r24
     7d4:	80 91 7c 00 	lds	r24, 0x007C
     7d8:	90 91 7c 00 	lds	r25, 0x007C
     7dc:	83 60       	ori	r24, 0x03	; 3
     7de:	14 c0       	rjmp	.+40     	; 0x808 <set_status+0x4a>
            nrk_spin_wait_us(ADC_SETUP_DELAY);
            return NRK_OK;

        } else {
            if (value > 13) { // Update for all of the sensors
     7e0:	2e 30       	cpi	r18, 0x0E	; 14
     7e2:	20 f0       	brcs	.+8      	; 0x7ec <set_status+0x2e>
                _nrk_errno_set(1);
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_nrk_errno_set>
     7ea:	18 c0       	rjmp	.+48     	; 0x81c <set_status+0x5e>
                return NRK_ERROR;
            }
            channel = value;
     7ec:	20 93 01 05 	sts	0x0501, r18
            ADC_VREF_VCC();
            ADC_SET_CHANNEL(channel);
     7f0:	80 91 7c 00 	lds	r24, 0x007C
     7f4:	80 7e       	andi	r24, 0xE0	; 224
     7f6:	80 93 7c 00 	sts	0x007C, r24
     7fa:	80 91 7c 00 	lds	r24, 0x007C
     7fe:	90 91 7c 00 	lds	r25, 0x007C
     802:	20 91 01 05 	lds	r18, 0x0501
     806:	82 2b       	or	r24, r18
     808:	90 7e       	andi	r25, 0xE0	; 224
     80a:	89 2b       	or	r24, r25
     80c:	80 93 7c 00 	sts	0x007C, r24
            nrk_spin_wait_us(ADC_SETUP_DELAY);
     810:	88 ec       	ldi	r24, 0xC8	; 200
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 31 25 	call	0x4a62	; 0x4a62 <nrk_spin_wait_us>
            return NRK_OK;
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	08 95       	ret
        }
    }
    return NRK_ERROR;
     81c:	8f ef       	ldi	r24, 0xFF	; 255
}
     81e:	08 95       	ret

00000820 <get_eeprom_values>:

void get_eeprom_values(){
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	66 97       	sbiw	r28, 0x16	; 22
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
   uint8_t raw_eeprom_data[22]; // Buffer for storing the raw values being returned
   int j = 0;
   int rv;

   // Get the values
  rv = ee24xx_read_bytes(0xAA, 22, raw_eeprom_data);
     834:	ae 01       	movw	r20, r28
     836:	4f 5f       	subi	r20, 0xFF	; 255
     838:	5f 4f       	sbci	r21, 0xFF	; 255
     83a:	66 e1       	ldi	r22, 0x16	; 22
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	8a ea       	ldi	r24, 0xAA	; 170
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 4c 08 	call	0x1098	; 0x1098 <ee24xx_read_bytes>
     846:	fe 01       	movw	r30, r28
     848:	32 96       	adiw	r30, 0x02	; 2
     84a:	62 ed       	ldi	r22, 0xD2	; 210
     84c:	74 e0       	ldi	r23, 0x04	; 4
     84e:	9e 01       	movw	r18, r28
     850:	28 5e       	subi	r18, 0xE8	; 232
     852:	3f 4f       	sbci	r19, 0xFF	; 255
     854:	cf 01       	movw	r24, r30
     856:	01 97       	sbiw	r24, 0x01	; 1
     // printf("\r\n");
  }

  // Place the data in a formatted buffer
  for(j = 0; j < 11; j++){
      eeprom_values[j] = ((raw_eeprom_data[2*j] | 0x0000) << 8) |
     858:	dc 01       	movw	r26, r24
     85a:	8c 91       	ld	r24, X
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	98 2f       	mov	r25, r24
     860:	88 27       	eor	r24, r24
     862:	40 81       	ld	r20, Z
     864:	84 2b       	or	r24, r20
     866:	db 01       	movw	r26, r22
     868:	8d 93       	st	X+, r24
     86a:	9d 93       	st	X+, r25
     86c:	bd 01       	movw	r22, r26
     86e:	32 96       	adiw	r30, 0x02	; 2
      //  printf("%02x ", raw_eeprom_data[j]);
     // printf("\r\n");
  }

  // Place the data in a formatted buffer
  for(j = 0; j < 11; j++){
     870:	e2 17       	cp	r30, r18
     872:	f3 07       	cpc	r31, r19
     874:	79 f7       	brne	.-34     	; 0x854 <get_eeprom_values+0x34>
      printf("MC: %i\r\n", MC);
      printf("MD: %i\r\n", MD);
      printf("-------------------------------------------------\r\n");
  }
  */
}
     876:	66 96       	adiw	r28, 0x16	; 22
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	cd bf       	out	0x3d, r28	; 61
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	08 95       	ret

00000888 <init_adc>:
    return val;
}
*/
void init_adc() {
    // Initialize values here
    ADC_INIT();
     888:	ea e7       	ldi	r30, 0x7A	; 122
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	83 e0       	ldi	r24, 0x03	; 3
     88e:	80 83       	st	Z, r24
    ADC_ENABLE();
     890:	80 81       	ld	r24, Z
     892:	80 68       	ori	r24, 0x80	; 128
     894:	80 83       	st	Z, r24
    channel = 0;
     896:	10 92 01 05 	sts	0x0501, r1
    ADC_SET_CHANNEL(0);
     89a:	ac e7       	ldi	r26, 0x7C	; 124
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	8c 91       	ld	r24, X
     8a0:	80 7e       	andi	r24, 0xE0	; 224
     8a2:	8c 93       	st	X, r24
     8a4:	9c 91       	ld	r25, X
     8a6:	8c 91       	ld	r24, X
     8a8:	80 7e       	andi	r24, 0xE0	; 224
     8aa:	89 2b       	or	r24, r25
     8ac:	8c 93       	st	X, r24
    ADC_DISABLE();
     8ae:	80 81       	ld	r24, Z
     8b0:	8f 77       	andi	r24, 0x7F	; 127
     8b2:	80 83       	st	Z, r24
     8b4:	08 95       	ret

000008b6 <init>:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
            return 0;
    }
}

int8_t init(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
     8b6:	cf 93       	push	r28
        // For handling the ADC
        // Set the pwr ctrl pin as output
	//DDRE = 0;
        //DDRE |= PWR_CTRL_MASK;
        //PORTE |= PWR_CTRL_MASK;
        nrk_gpio_direction(PWR_CTRL_PIN, NRK_PIN_OUTPUT);
     8b8:	c0 91 24 02 	lds	r28, 0x0224
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	8c 2f       	mov	r24, r28
     8c0:	0e 94 35 11 	call	0x226a	; 0x226a <nrk_gpio_direction>
        //nrk_gpio_clr(PWR_CTRL_PIN);
        nrk_gpio_set(PWR_CTRL_PIN);
     8c4:	8c 2f       	mov	r24, r28
     8c6:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <nrk_gpio_set>
	// Input for motion detector
        nrk_gpio_direction(NRK_PORTF_6, NRK_PIN_INPUT );
     8ca:	c0 91 0f 02 	lds	r28, 0x020F
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	8c 2f       	mov	r24, r28
     8d2:	0e 94 35 11 	call	0x226a	; 0x226a <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTF_6);
     8d6:	8c 2f       	mov	r24, r28
     8d8:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <nrk_gpio_clr>
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_INPUT);
     8dc:	c0 91 25 02 	lds	r28, 0x0225
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	8c 2f       	mov	r24, r28
     8e4:	0e 94 35 11 	call	0x226a	; 0x226a <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTE_2);
     8e8:	8c 2f       	mov	r24, r28
     8ea:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <nrk_gpio_clr>
	nrk_gpio_pullups(0);
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	0e 94 47 12 	call	0x248e	; 0x248e <nrk_gpio_pullups>

        init_adc();
     8f4:	0e 94 44 04 	call	0x888	; 0x888 <init_adc>
        
        // For handling the I2C
         init_i2c();
     8f8:	0e 94 32 08 	call	0x1064	; 0x1064 <init_i2c>

	set_i2c_device(BOSCH_EEPROM_ADDRESS);
     8fc:	8e ee       	ldi	r24, 0xEE	; 238
     8fe:	0e 94 2f 08 	call	0x105e	; 0x105e <set_i2c_device>
        get_eeprom_values();
     902:	0e 94 10 04 	call	0x820	; 0x820 <get_eeprom_values>
        is_open = 0;
     906:	10 92 fc 04 	sts	0x04FC, r1
        return 1;
    
}
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <delay>:
    ADC_GET_SAMPLE_10(adc_val);
    return adc_val;
}

void delay() {
    nrk_spin_wait_us(ADC_SETUP_DELAY);
     910:	88 ec       	ldi	r24, 0xC8	; 200
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0c 94 31 25 	jmp	0x4a62	; 0x4a62 <nrk_spin_wait_us>

00000918 <get_adc_val>:
    ADC_DISABLE();
}

uint16_t get_adc_val() {
    uint16_t adc_val;
    ADC_SAMPLE_SINGLE();
     918:	80 91 7a 00 	lds	r24, 0x007A
     91c:	80 64       	ori	r24, 0x40	; 64
     91e:	80 93 7a 00 	sts	0x007A, r24
     922:	80 91 7a 00 	lds	r24, 0x007A
     926:	84 ff       	sbrs	r24, 4
     928:	fc cf       	rjmp	.-8      	; 0x922 <get_adc_val+0xa>
    delay();
     92a:	0e 94 88 04 	call	0x910	; 0x910 <delay>
    ADC_GET_SAMPLE_10(adc_val);
     92e:	80 91 78 00 	lds	r24, 0x0078
     932:	20 91 79 00 	lds	r18, 0x0079
     936:	90 e0       	ldi	r25, 0x00	; 0
    return adc_val;
}
     938:	92 2b       	or	r25, r18
     93a:	08 95       	ret

0000093c <calc_true_press>:

void delay() {
    nrk_spin_wait_us(ADC_SETUP_DELAY);
}

int32_t calc_true_press(uint8_t oss){
     93c:	4f 92       	push	r4
     93e:	5f 92       	push	r5
     940:	6f 92       	push	r6
     942:	7f 92       	push	r7
     944:	8f 92       	push	r8
     946:	9f 92       	push	r9
     948:	af 92       	push	r10
     94a:	bf 92       	push	r11
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	1f 93       	push	r17
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	00 d0       	rcall	.+0      	; 0x95c <calc_true_press+0x20>
     95c:	00 d0       	rcall	.+0      	; 0x95e <calc_true_press+0x22>
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	18 2f       	mov	r17, r24

    B6 = B5 - 4000;                                     if(DEBUG) printf("B6 %li\r\n", B6);
     964:	80 90 f8 04 	lds	r8, 0x04F8
     968:	90 90 f9 04 	lds	r9, 0x04F9
     96c:	a0 90 fa 04 	lds	r10, 0x04FA
     970:	b0 90 fb 04 	lds	r11, 0x04FB
     974:	80 ea       	ldi	r24, 0xA0	; 160
     976:	88 1a       	sub	r8, r24
     978:	8f e0       	ldi	r24, 0x0F	; 15
     97a:	98 0a       	sbc	r9, r24
     97c:	a1 08       	sbc	r10, r1
     97e:	b1 08       	sbc	r11, r1
     980:	80 92 e8 04 	sts	0x04E8, r8
     984:	90 92 e9 04 	sts	0x04E9, r9
     988:	a0 92 ea 04 	sts	0x04EA, r10
     98c:	b0 92 eb 04 	sts	0x04EB, r11
//    X1 = (B2 * (B6 * B6/ pow(2,12)))/ pow(2,11);        if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (B2 * (B6 * B6/ 4096))/ 2048;        if(DEBUG) printf("X1 %li\r\n", X1);
     990:	a5 01       	movw	r20, r10
     992:	94 01       	movw	r18, r8
     994:	c5 01       	movw	r24, r10
     996:	b4 01       	movw	r22, r8
     998:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__mulsi3>
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e1       	ldi	r19, 0x10	; 16
     9a0:	40 e0       	ldi	r20, 0x00	; 0
     9a2:	50 e0       	ldi	r21, 0x00	; 0
     9a4:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__divmodsi4>
     9a8:	29 83       	std	Y+1, r18	; 0x01
     9aa:	3a 83       	std	Y+2, r19	; 0x02
     9ac:	4b 83       	std	Y+3, r20	; 0x03
     9ae:	5c 83       	std	Y+4, r21	; 0x04
    X2 = (int32_t)AC2 * B6 / 2048;                          if(DEBUG) printf("X2 %li\r\n", X2);
//    X2 = AC2 * B6 / pow(2,11);                          if(DEBUG) printf("X2 %li\r\n", X2);
    X3 = X1 + X2;                                       if(DEBUG) printf("X3 %li\r\n", X3);
    B3 = ((((int32_t)AC1 * 4 + X3) << oss) + 2) / 4;               if(DEBUG) printf("B3 %li\r\n", B3);
     9b0:	c0 90 d2 04 	lds	r12, 0x04D2
     9b4:	d0 90 d3 04 	lds	r13, 0x04D3
     9b8:	ee 24       	eor	r14, r14
     9ba:	d7 fc       	sbrc	r13, 7
     9bc:	e0 94       	com	r14
     9be:	fe 2c       	mov	r15, r14
     9c0:	f2 e0       	ldi	r31, 0x02	; 2
     9c2:	cc 0c       	add	r12, r12
     9c4:	dd 1c       	adc	r13, r13
     9c6:	ee 1c       	adc	r14, r14
     9c8:	ff 1c       	adc	r15, r15
     9ca:	fa 95       	dec	r31
     9cc:	d1 f7       	brne	.-12     	; 0x9c2 <calc_true_press+0x86>

int32_t calc_true_press(uint8_t oss){

    B6 = B5 - 4000;                                     if(DEBUG) printf("B6 %li\r\n", B6);
//    X1 = (B2 * (B6 * B6/ pow(2,12)))/ pow(2,11);        if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (B2 * (B6 * B6/ 4096))/ 2048;        if(DEBUG) printf("X1 %li\r\n", X1);
     9ce:	a0 91 e0 04 	lds	r26, 0x04E0
     9d2:	b0 91 e1 04 	lds	r27, 0x04E1
     9d6:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <__mulshisi3>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	38 e0       	ldi	r19, 0x08	; 8
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	50 e0       	ldi	r21, 0x00	; 0
     9e2:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__divmodsi4>
     9e6:	29 01       	movw	r4, r18
     9e8:	3a 01       	movw	r6, r20
    X2 = (int32_t)AC2 * B6 / 2048;                          if(DEBUG) printf("X2 %li\r\n", X2);
     9ea:	a0 91 d4 04 	lds	r26, 0x04D4
     9ee:	b0 91 d5 04 	lds	r27, 0x04D5
     9f2:	a5 01       	movw	r20, r10
     9f4:	94 01       	movw	r18, r8
     9f6:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <__mulshisi3>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	38 e0       	ldi	r19, 0x08	; 8
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__divmodsi4>
//    X2 = AC2 * B6 / pow(2,11);                          if(DEBUG) printf("X2 %li\r\n", X2);
    X3 = X1 + X2;                                       if(DEBUG) printf("X3 %li\r\n", X3);
     a06:	42 0e       	add	r4, r18
     a08:	53 1e       	adc	r5, r19
     a0a:	64 1e       	adc	r6, r20
     a0c:	75 1e       	adc	r7, r21
    B3 = ((((int32_t)AC1 * 4 + X3) << oss) + 2) / 4;               if(DEBUG) printf("B3 %li\r\n", B3);
     a0e:	c4 0c       	add	r12, r4
     a10:	d5 1c       	adc	r13, r5
     a12:	e6 1c       	adc	r14, r6
     a14:	f7 1c       	adc	r15, r7
     a16:	01 2e       	mov	r0, r17
     a18:	04 c0       	rjmp	.+8      	; 0xa22 <calc_true_press+0xe6>
     a1a:	cc 0c       	add	r12, r12
     a1c:	dd 1c       	adc	r13, r13
     a1e:	ee 1c       	adc	r14, r14
     a20:	ff 1c       	adc	r15, r15
     a22:	0a 94       	dec	r0
     a24:	d2 f7       	brpl	.-12     	; 0xa1a <calc_true_press+0xde>
     a26:	e2 e0       	ldi	r30, 0x02	; 2
     a28:	ce 0e       	add	r12, r30
     a2a:	d1 1c       	adc	r13, r1
     a2c:	e1 1c       	adc	r14, r1
     a2e:	f1 1c       	adc	r15, r1
     a30:	a4 e0       	ldi	r26, 0x04	; 4
     a32:	4a 2e       	mov	r4, r26
     a34:	51 2c       	mov	r5, r1
     a36:	61 2c       	mov	r6, r1
     a38:	71 2c       	mov	r7, r1
     a3a:	c7 01       	movw	r24, r14
     a3c:	b6 01       	movw	r22, r12
     a3e:	a3 01       	movw	r20, r6
     a40:	92 01       	movw	r18, r4
     a42:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__divmodsi4>
     a46:	69 01       	movw	r12, r18
     a48:	7a 01       	movw	r14, r20
     a4a:	20 93 17 05 	sts	0x0517, r18
     a4e:	30 93 18 05 	sts	0x0518, r19
     a52:	40 93 19 05 	sts	0x0519, r20
     a56:	50 93 1a 05 	sts	0x051A, r21
//    X1 = AC3 * B6 / pow(2,13);                          if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = AC3 * B6 / 8192;                          if(DEBUG) printf("X1 %li\r\n", X1);
     a5a:	a0 91 d6 04 	lds	r26, 0x04D6
     a5e:	b0 91 d7 04 	lds	r27, 0x04D7
     a62:	a5 01       	movw	r20, r10
     a64:	94 01       	movw	r18, r8
     a66:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <__mulshisi3>
     a6a:	20 e0       	ldi	r18, 0x00	; 0
     a6c:	30 e2       	ldi	r19, 0x20	; 32
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__divmodsi4>
     a76:	49 01       	movw	r8, r18
     a78:	5a 01       	movw	r10, r20
//    X2 = (B1 * (B6 * B6 / pow(2,12))) / pow(2,16);      if(DEBUG) printf("X2 %li\r\n", X2);
    X2 = (B1 * (B6 * B6 / 4096)) / 65536;      if(DEBUG) printf("X2 %li\r\n", X2);
     a7a:	a0 91 de 04 	lds	r26, 0x04DE
     a7e:	b0 91 df 04 	lds	r27, 0x04DF
     a82:	29 81       	ldd	r18, Y+1	; 0x01
     a84:	3a 81       	ldd	r19, Y+2	; 0x02
     a86:	4b 81       	ldd	r20, Y+3	; 0x03
     a88:	5c 81       	ldd	r21, Y+4	; 0x04
     a8a:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <__mulshisi3>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	41 e0       	ldi	r20, 0x01	; 1
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__divmodsi4>
//    X3 = ((X1 + X2) + 2) / pow(2,2);                    if(DEBUG) printf("X3 %li\r\n", X3);
    X3 = ((X1 + X2) + 2) / 4;                    if(DEBUG) printf("X3 %li\r\n", X3);
     a9a:	82 0e       	add	r8, r18
     a9c:	93 1e       	adc	r9, r19
     a9e:	a4 1e       	adc	r10, r20
     aa0:	b5 1e       	adc	r11, r21
     aa2:	f2 e0       	ldi	r31, 0x02	; 2
     aa4:	8f 0e       	add	r8, r31
     aa6:	91 1c       	adc	r9, r1
     aa8:	a1 1c       	adc	r10, r1
     aaa:	b1 1c       	adc	r11, r1
     aac:	c5 01       	movw	r24, r10
     aae:	b4 01       	movw	r22, r8
     ab0:	a3 01       	movw	r20, r6
     ab2:	92 01       	movw	r18, r4
     ab4:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__divmodsi4>
     ab8:	20 93 02 05 	sts	0x0502, r18
     abc:	30 93 03 05 	sts	0x0503, r19
     ac0:	40 93 04 05 	sts	0x0504, r20
     ac4:	50 93 05 05 	sts	0x0505, r21
//    B4 = AC4 * (X3 + 32768) / pow(2,15);                if(DEBUG) printf("B4 %lu\r\n", B4);
    B4 = AC4 * (X3 + 32768) / 32768;                if(DEBUG) printf("B4 %lu\r\n", B4);
     ac8:	a0 91 d8 04 	lds	r26, 0x04D8
     acc:	b0 91 d9 04 	lds	r27, 0x04D9
     ad0:	30 58       	subi	r19, 0x80	; 128
     ad2:	4f 4f       	sbci	r20, 0xFF	; 255
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__muluhisi3>
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e8       	ldi	r19, 0x80	; 128
     ade:	40 e0       	ldi	r20, 0x00	; 0
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__divmodsi4>
     ae6:	49 01       	movw	r8, r18
     ae8:	5a 01       	movw	r10, r20
     aea:	20 93 06 05 	sts	0x0506, r18
     aee:	30 93 07 05 	sts	0x0507, r19
     af2:	40 93 08 05 	sts	0x0508, r20
     af6:	50 93 09 05 	sts	0x0509, r21
    B7 = (UP - B3) * (50000 >> oss);                    if(DEBUG) printf("B7 %lu\r\n", B7);
     afa:	20 91 0f 05 	lds	r18, 0x050F
     afe:	30 91 10 05 	lds	r19, 0x0510
     b02:	40 91 11 05 	lds	r20, 0x0511
     b06:	50 91 12 05 	lds	r21, 0x0512
     b0a:	2c 19       	sub	r18, r12
     b0c:	3d 09       	sbc	r19, r13
     b0e:	4e 09       	sbc	r20, r14
     b10:	5f 09       	sbc	r21, r15
     b12:	60 e5       	ldi	r22, 0x50	; 80
     b14:	73 ec       	ldi	r23, 0xC3	; 195
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	04 c0       	rjmp	.+8      	; 0xb24 <calc_true_press+0x1e8>
     b1c:	95 95       	asr	r25
     b1e:	87 95       	ror	r24
     b20:	77 95       	ror	r23
     b22:	67 95       	ror	r22
     b24:	1a 95       	dec	r17
     b26:	d2 f7       	brpl	.-12     	; 0xb1c <calc_true_press+0x1e0>
     b28:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__mulsi3>
     b2c:	60 93 0b 05 	sts	0x050B, r22
     b30:	70 93 0c 05 	sts	0x050C, r23
     b34:	80 93 0d 05 	sts	0x050D, r24
     b38:	90 93 0e 05 	sts	0x050E, r25

    if(B7 < 0x80000000)
     b3c:	97 fd       	sbrc	r25, 7
     b3e:	09 c0       	rjmp	.+18     	; 0xb52 <calc_true_press+0x216>
       P = (B7 * 2)/ B4;
     b40:	66 0f       	add	r22, r22
     b42:	77 1f       	adc	r23, r23
     b44:	88 1f       	adc	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	a5 01       	movw	r20, r10
     b4a:	94 01       	movw	r18, r8
     b4c:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__udivmodsi4>
     b50:	08 c0       	rjmp	.+16     	; 0xb62 <calc_true_press+0x226>
    else
        P = (B7 / B4) * 2;
     b52:	a5 01       	movw	r20, r10
     b54:	94 01       	movw	r18, r8
     b56:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__udivmodsi4>
     b5a:	22 0f       	add	r18, r18
     b5c:	33 1f       	adc	r19, r19
     b5e:	44 1f       	adc	r20, r20
     b60:	55 1f       	adc	r21, r21
     b62:	20 93 13 05 	sts	0x0513, r18
     b66:	30 93 14 05 	sts	0x0514, r19
     b6a:	40 93 15 05 	sts	0x0515, r20
     b6e:	50 93 16 05 	sts	0x0516, r21
                                                        if(DEBUG) printf("P %li\r\n", P);
    X1 = (P / 256) * (P / 256);               if(DEBUG) printf("X1 %li\r\n", X1);
     b72:	c0 90 13 05 	lds	r12, 0x0513
     b76:	d0 90 14 05 	lds	r13, 0x0514
     b7a:	e0 90 15 05 	lds	r14, 0x0515
     b7e:	f0 90 16 05 	lds	r15, 0x0516
     b82:	c7 01       	movw	r24, r14
     b84:	b6 01       	movw	r22, r12
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	31 e0       	ldi	r19, 0x01	; 1
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__divmodsi4>
     b92:	ca 01       	movw	r24, r20
     b94:	b9 01       	movw	r22, r18
     b96:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__mulsi3>
     b9a:	9b 01       	movw	r18, r22
     b9c:	ac 01       	movw	r20, r24
//    X1 = (P / pow(2,8)) * (P / pow(2,8));               if(DEBUG) printf("X1 %li\r\n", X1);
    X1 = (X1 * 3038) / 65536;                       if(DEBUG) printf("X1 %li\r\n", X1);
     b9e:	ae ed       	ldi	r26, 0xDE	; 222
     ba0:	bb e0       	ldi	r27, 0x0B	; 11
     ba2:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__muluhisi3>
     ba6:	41 2c       	mov	r4, r1
     ba8:	51 2c       	mov	r5, r1
     baa:	32 01       	movw	r6, r4
     bac:	63 94       	inc	r6
     bae:	a3 01       	movw	r20, r6
     bb0:	92 01       	movw	r18, r4
     bb2:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__divmodsi4>
     bb6:	49 01       	movw	r8, r18
     bb8:	5a 01       	movw	r10, r20
     bba:	20 93 fd 04 	sts	0x04FD, r18
     bbe:	30 93 fe 04 	sts	0x04FE, r19
     bc2:	40 93 ff 04 	sts	0x04FF, r20
     bc6:	50 93 00 05 	sts	0x0500, r21
//    X1 = (X1 * 3038) / pow(2,16);                       if(DEBUG) printf("X1 %li\r\n", X1);
    X2 = (-7357 * P ) / 65536;                      if(DEBUG) printf("X2 %li\r\n", X2);
     bca:	a3 e4       	ldi	r26, 0x43	; 67
     bcc:	b3 ee       	ldi	r27, 0xE3	; 227
     bce:	a7 01       	movw	r20, r14
     bd0:	96 01       	movw	r18, r12
     bd2:	0e 94 63 2b 	call	0x56c6	; 0x56c6 <__mulohisi3>
     bd6:	a3 01       	movw	r20, r6
     bd8:	92 01       	movw	r18, r4
     bda:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__divmodsi4>
     bde:	20 93 f0 04 	sts	0x04F0, r18
     be2:	30 93 f1 04 	sts	0x04F1, r19
     be6:	40 93 f2 04 	sts	0x04F2, r20
     bea:	50 93 f3 04 	sts	0x04F3, r21
//	X2 = (-7357 * P ) / pow(2,16);                      if(DEBUG) printf("X2 %li\r\n", X2);
//    P = P + (X1 + X2 + 3791) / pow(2,4);                if(DEBUG) printf("P %li\r\n", P);
    P = P + (X1 + X2 + 3791) / 16;                if(DEBUG) printf("P %li\r\n", P);
     bee:	c5 01       	movw	r24, r10
     bf0:	b4 01       	movw	r22, r8
     bf2:	62 0f       	add	r22, r18
     bf4:	73 1f       	adc	r23, r19
     bf6:	84 1f       	adc	r24, r20
     bf8:	95 1f       	adc	r25, r21
     bfa:	61 53       	subi	r22, 0x31	; 49
     bfc:	71 4f       	sbci	r23, 0xF1	; 241
     bfe:	8f 4f       	sbci	r24, 0xFF	; 255
     c00:	9f 4f       	sbci	r25, 0xFF	; 255
     c02:	20 e1       	ldi	r18, 0x10	; 16
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__divmodsi4>
     c0e:	2c 0d       	add	r18, r12
     c10:	3d 1d       	adc	r19, r13
     c12:	4e 1d       	adc	r20, r14
     c14:	5f 1d       	adc	r21, r15
     c16:	20 93 13 05 	sts	0x0513, r18
     c1a:	30 93 14 05 	sts	0x0514, r19
     c1e:	40 93 15 05 	sts	0x0515, r20
     c22:	50 93 16 05 	sts	0x0516, r21

    if(DEBUG) printf("Pressure is %li Pascals\r\n", P);

    return P;

}
     c26:	ca 01       	movw	r24, r20
     c28:	b9 01       	movw	r22, r18
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	df 90       	pop	r13
     c3e:	cf 90       	pop	r12
     c40:	bf 90       	pop	r11
     c42:	af 90       	pop	r10
     c44:	9f 90       	pop	r9
     c46:	8f 90       	pop	r8
     c48:	7f 90       	pop	r7
     c4a:	6f 90       	pop	r6
     c4c:	5f 90       	pop	r5
     c4e:	4f 90       	pop	r4
     c50:	08 95       	ret

00000c52 <calc_true_temp>:


inline int32_t calc_true_temp(){
     c52:	cf 92       	push	r12
     c54:	df 92       	push	r13
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15

    X1 = ((int32_t)UT - (int32_t)AC6) * (int32_t)AC5 / (int32_t)32768;
     c5a:	80 91 dc 04 	lds	r24, 0x04DC
     c5e:	90 91 dd 04 	lds	r25, 0x04DD
     c62:	20 91 ec 04 	lds	r18, 0x04EC
     c66:	30 91 ed 04 	lds	r19, 0x04ED
     c6a:	40 91 ee 04 	lds	r20, 0x04EE
     c6e:	50 91 ef 04 	lds	r21, 0x04EF
     c72:	28 1b       	sub	r18, r24
     c74:	39 0b       	sbc	r19, r25
     c76:	41 09       	sbc	r20, r1
     c78:	51 09       	sbc	r21, r1
     c7a:	a0 91 da 04 	lds	r26, 0x04DA
     c7e:	b0 91 db 04 	lds	r27, 0x04DB
     c82:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__muluhisi3>
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e8       	ldi	r19, 0x80	; 128
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__divmodsi4>
     c92:	69 01       	movw	r12, r18
     c94:	7a 01       	movw	r14, r20
     c96:	20 93 fd 04 	sts	0x04FD, r18
     c9a:	30 93 fe 04 	sts	0x04FE, r19
     c9e:	40 93 ff 04 	sts	0x04FF, r20
     ca2:	50 93 00 05 	sts	0x0500, r21
//    X1 = ((int32_t)UT - (int32_t)AC6) * (int32_t)AC5 / (int32_t)pow(2,15);
if(DEBUG) printf("X1 %li\r\n", X1);
//    X2 = (int32_t) MC * pow(2,11) / (X1 + MD);
    X2 = (int32_t) MC * 2048 / (X1 + MD);
     ca6:	60 91 e4 04 	lds	r22, 0x04E4
     caa:	70 91 e5 04 	lds	r23, 0x04E5
     cae:	88 27       	eor	r24, r24
     cb0:	77 fd       	sbrc	r23, 7
     cb2:	80 95       	com	r24
     cb4:	98 2f       	mov	r25, r24
     cb6:	bb e0       	ldi	r27, 0x0B	; 11
     cb8:	66 0f       	add	r22, r22
     cba:	77 1f       	adc	r23, r23
     cbc:	88 1f       	adc	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	ba 95       	dec	r27
     cc2:	d1 f7       	brne	.-12     	; 0xcb8 <calc_true_temp+0x66>
     cc4:	20 91 e6 04 	lds	r18, 0x04E6
     cc8:	30 91 e7 04 	lds	r19, 0x04E7
     ccc:	44 27       	eor	r20, r20
     cce:	37 fd       	sbrc	r19, 7
     cd0:	40 95       	com	r20
     cd2:	54 2f       	mov	r21, r20
     cd4:	2c 0d       	add	r18, r12
     cd6:	3d 1d       	adc	r19, r13
     cd8:	4e 1d       	adc	r20, r14
     cda:	5f 1d       	adc	r21, r15
     cdc:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__divmodsi4>
     ce0:	20 93 f0 04 	sts	0x04F0, r18
     ce4:	30 93 f1 04 	sts	0x04F1, r19
     ce8:	40 93 f2 04 	sts	0x04F2, r20
     cec:	50 93 f3 04 	sts	0x04F3, r21
if(DEBUG) printf("X2 %li\r\n", X2);
    B5 = X1 + X2;
     cf0:	c2 0e       	add	r12, r18
     cf2:	d3 1e       	adc	r13, r19
     cf4:	e4 1e       	adc	r14, r20
     cf6:	f5 1e       	adc	r15, r21
     cf8:	c0 92 f8 04 	sts	0x04F8, r12
     cfc:	d0 92 f9 04 	sts	0x04F9, r13
     d00:	e0 92 fa 04 	sts	0x04FA, r14
     d04:	f0 92 fb 04 	sts	0x04FB, r15
if(DEBUG) printf("B5 %li\r\n", B5);
//    T = (B5 + 8) / pow(2,4);
    T = (B5 + 8) / 16;
     d08:	c7 01       	movw	r24, r14
     d0a:	b6 01       	movw	r22, r12
     d0c:	68 5f       	subi	r22, 0xF8	; 248
     d0e:	7f 4f       	sbci	r23, 0xFF	; 255
     d10:	8f 4f       	sbci	r24, 0xFF	; 255
     d12:	9f 4f       	sbci	r25, 0xFF	; 255
     d14:	20 e1       	ldi	r18, 0x10	; 16
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	0e 94 9a 2b 	call	0x5734	; 0x5734 <__divmodsi4>
     d20:	20 93 f4 04 	sts	0x04F4, r18
     d24:	30 93 f5 04 	sts	0x04F5, r19
     d28:	40 93 f6 04 	sts	0x04F6, r20
     d2c:	50 93 f7 04 	sts	0x04F7, r21
if(DEBUG) printf("XT %li\r\n", T);

    if(DEBUG) printf("Temperature is %li /10 degrees Celcius.\r\n", T);

    return T;
}
     d30:	ca 01       	movw	r24, r20
     d32:	b9 01       	movw	r22, r18
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	df 90       	pop	r13
     d3a:	cf 90       	pop	r12
     d3c:	08 95       	ret

00000d3e <read_uncomp_temp>:

void read_uncomp_temp(){
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	00 d0       	rcall	.+0      	; 0xd44 <read_uncomp_temp+0x6>
     d44:	1f 92       	push	r1
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62

    uint8_t write_buf[1];
    uint8_t rx_buf[2];
    uint8_t i;

    write_buf[0] = 0x2E;
     d4a:	8e e2       	ldi	r24, 0x2E	; 46
     d4c:	8b 83       	std	Y+3, r24	; 0x03

    // Step 1: Write 0x2E into register 0xF4
    ee24xx_write_bytes(0xF4, 1, write_buf);
     d4e:	ae 01       	movw	r20, r28
     d50:	4d 5f       	subi	r20, 0xFD	; 253
     d52:	5f 4f       	sbci	r21, 0xFF	; 255
     d54:	61 e0       	ldi	r22, 0x01	; 1
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	84 ef       	ldi	r24, 0xF4	; 244
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 65 09 	call	0x12ca	; 0x12ca <ee24xx_write_bytes>

    // Step 2: Wait 4.5 ms
 //   nrk_wait_ticks(1000); // 1 tick is 1 ms I believe
    nrk_spin_wait_us(4500);
     d60:	84 e9       	ldi	r24, 0x94	; 148
     d62:	91 e1       	ldi	r25, 0x11	; 17
     d64:	0e 94 31 25 	call	0x4a62	; 0x4a62 <nrk_spin_wait_us>

    // Step 3: Read registers 0xF6, 0xF7
    ee24xx_read_bytes(0xF6, 2, rx_buf);
     d68:	ae 01       	movw	r20, r28
     d6a:	4f 5f       	subi	r20, 0xFF	; 255
     d6c:	5f 4f       	sbci	r21, 0xFF	; 255
     d6e:	62 e0       	ldi	r22, 0x02	; 2
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	86 ef       	ldi	r24, 0xF6	; 246
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 4c 08 	call	0x1098	; 0x1098 <ee24xx_read_bytes>
//    if(DEBUG){
  //      for(i = 0; i < 2; i++)
  //          printf("uncomp_temp[%i] is %u\r\n", i, rx_buf[i]);
  //  }

    UT = (((uint16_t)rx_buf[0] | 0x0000) << 8) | ((uint16_t)rx_buf[1]);
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	98 2f       	mov	r25, r24
     d80:	88 27       	eor	r24, r24
     d82:	2a 81       	ldd	r18, Y+2	; 0x02
     d84:	82 2b       	or	r24, r18
     d86:	a0 e0       	ldi	r26, 0x00	; 0
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	80 93 ec 04 	sts	0x04EC, r24
     d8e:	90 93 ed 04 	sts	0x04ED, r25
     d92:	a0 93 ee 04 	sts	0x04EE, r26
     d96:	b0 93 ef 04 	sts	0x04EF, r27

//    if(DEBUG)
  //   printf("UT is %i\r\n", UT);

}
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <calc_temp>:


int32_t calc_temp(){
    read_uncomp_temp();
     da6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <read_uncomp_temp>
    return calc_true_temp();
     daa:	0c 94 29 06 	jmp	0xc52	; 0xc52 <calc_true_temp>

00000dae <read_uncomp_press>:
int32_t calc_press(uint8_t oss){
    read_uncomp_press(oss);
    return calc_true_press(oss);
}

void read_uncomp_press(uint8_t oss){
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <read_uncomp_press+0x8>
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <read_uncomp_press+0xa>
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	18 2f       	mov	r17, r24

    uint8_t write_buf[1]; // Used to send a value to the Bosch sensor
    uint8_t rx_buf[3]; // Used to store the received values from the sensor
    uint8_t i;

    write_buf[0] = 0x34 + (oss << 6);
     dbe:	98 2f       	mov	r25, r24
     dc0:	92 95       	swap	r25
     dc2:	99 0f       	add	r25, r25
     dc4:	99 0f       	add	r25, r25
     dc6:	90 7c       	andi	r25, 0xC0	; 192
     dc8:	9c 5c       	subi	r25, 0xCC	; 204
     dca:	9c 83       	std	Y+4, r25	; 0x04

    // Step 1: Write 0x2E into register 0xF4
    ee24xx_write_bytes(0xF4, sizeof(write_buf), write_buf);
     dcc:	ae 01       	movw	r20, r28
     dce:	4c 5f       	subi	r20, 0xFC	; 252
     dd0:	5f 4f       	sbci	r21, 0xFF	; 255
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	84 ef       	ldi	r24, 0xF4	; 244
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 65 09 	call	0x12ca	; 0x12ca <ee24xx_write_bytes>

    // Step 2: Wait 4.5 ms
//    nrk_wait_ticks(1000); // 1 tick is 1 ms I believe
    nrk_spin_wait_us(4500);
     dde:	84 e9       	ldi	r24, 0x94	; 148
     de0:	91 e1       	ldi	r25, 0x11	; 17
     de2:	0e 94 31 25 	call	0x4a62	; 0x4a62 <nrk_spin_wait_us>

    // Step 3: Read registers 0xF6, 0xF7, 0xF8
    ee24xx_read_bytes(PRESS_BASE_REGISTER, sizeof(rx_buf), rx_buf);
     de6:	ae 01       	movw	r20, r28
     de8:	4f 5f       	subi	r20, 0xFF	; 255
     dea:	5f 4f       	sbci	r21, 0xFF	; 255
     dec:	63 e0       	ldi	r22, 0x03	; 3
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	86 ef       	ldi	r24, 0xF6	; 246
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 4c 08 	call	0x1098	; 0x1098 <ee24xx_read_bytes>
    }
*/
     // Assemble the raw pressure value

     UP = ((uint32_t) rx_buf[0]) << 16;
     UP = UP  | ((uint32_t)(rx_buf[1]) << 8);
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
            printf("uncomp_press[%i] is %u\r\n", i, rx_buf[i]);
    }
*/
     // Assemble the raw pressure value

     UP = ((uint32_t) rx_buf[0]) << 16;
     dfa:	49 81       	ldd	r20, Y+1	; 0x01
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	ba 01       	movw	r22, r20
     e04:	55 27       	eor	r21, r21
     e06:	44 27       	eor	r20, r20
     UP = UP  | ((uint32_t)(rx_buf[1]) << 8);
     e08:	58 2b       	or	r21, r24
     UP = UP  + rx_buf[2];
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	48 0f       	add	r20, r24
     e0e:	51 1d       	adc	r21, r1
     e10:	61 1d       	adc	r22, r1
     e12:	71 1d       	adc	r23, r1
     UP = UP >> (8-oss);
     e14:	28 e0       	ldi	r18, 0x08	; 8
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	21 1b       	sub	r18, r17
     e1a:	31 09       	sbc	r19, r1
     e1c:	04 c0       	rjmp	.+8      	; 0xe26 <read_uncomp_press+0x78>
     e1e:	75 95       	asr	r23
     e20:	67 95       	ror	r22
     e22:	57 95       	ror	r21
     e24:	47 95       	ror	r20
     e26:	2a 95       	dec	r18
     e28:	d2 f7       	brpl	.-12     	; 0xe1e <read_uncomp_press+0x70>
     e2a:	40 93 0f 05 	sts	0x050F, r20
     e2e:	50 93 10 05 	sts	0x0510, r21
     e32:	60 93 11 05 	sts	0x0511, r22
     e36:	70 93 12 05 	sts	0x0512, r23

 //    if(DEBUG)
 //    printf("UP is %li\r\n", UP);

}
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	08 95       	ret

00000e4a <calc_press>:
    read_uncomp_temp();
    return calc_true_temp();
}


int32_t calc_press(uint8_t oss){
     e4a:	cf 93       	push	r28
     e4c:	c8 2f       	mov	r28, r24
    read_uncomp_press(oss);
     e4e:	0e 94 d7 06 	call	0xdae	; 0xdae <read_uncomp_press>
    return calc_true_press(oss);
     e52:	8c 2f       	mov	r24, r28
}
     e54:	cf 91       	pop	r28
}


int32_t calc_press(uint8_t oss){
    read_uncomp_press(oss);
    return calc_true_press(oss);
     e56:	0c 94 9e 04 	jmp	0x93c	; 0x93c <calc_true_press>

00000e5a <read>:
        return NRK_ERROR;
    else return NRK_OK;

}

int8_t read(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {
     e5a:	af 92       	push	r10
     e5c:	bf 92       	push	r11
     e5e:	cf 92       	push	r12
     e60:	df 92       	push	r13
     e62:	ef 92       	push	r14
     e64:	ff 92       	push	r15
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	1f 92       	push	r1
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	5a 01       	movw	r10, r20

    int32_t value_from_sensor;



    ADC_ENABLE();
     e76:	80 91 7a 00 	lds	r24, 0x007A
     e7a:	80 68       	ori	r24, 0x80	; 128
     e7c:	80 93 7a 00 	sts	0x007A, r24
    uint8_t count = 0;
    // key and value get passed as opt and size
    uint8_t key = opt;
    uint8_t value = size;

    if (size != 1 && size != 2 && size != 4) return 0;
     e80:	8f ef       	ldi	r24, 0xFF	; 255
     e82:	82 0f       	add	r24, r18
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	18 f0       	brcs	.+6      	; 0xe8e <read+0x34>
     e88:	24 30       	cpi	r18, 0x04	; 4
     e8a:	09 f0       	breq	.+2      	; 0xe8e <read+0x34>
     e8c:	b3 c0       	rjmp	.+358    	; 0xff4 <read+0x19a>
    if ((channel != TEMP2) && (channel != PRESS) && channel <= 7) {
     e8e:	80 91 01 05 	lds	r24, 0x0501
     e92:	88 30       	cpi	r24, 0x08	; 8
     e94:	90 f4       	brcc	.+36     	; 0xeba <read+0x60>
        /* Conversion to 8-bit value*/
        uint16_t val = get_adc_val();
     e96:	29 83       	std	Y+1, r18	; 0x01
     e98:	0e 94 8c 04 	call	0x918	; 0x918 <get_adc_val>

        if (size == 2) {
     e9c:	29 81       	ldd	r18, Y+1	; 0x01
     e9e:	22 30       	cpi	r18, 0x02	; 2
     ea0:	21 f4       	brne	.+8      	; 0xeaa <read+0x50>
            buffer[count] = val & 0xFF;
     ea2:	f5 01       	movw	r30, r10
     ea4:	80 83       	st	Z, r24
            count++;
            buffer[count] = (val >> 8) & 0xFF;
     ea6:	91 83       	std	Z+1, r25	; 0x01
     ea8:	21 c0       	rjmp	.+66     	; 0xeec <read+0x92>
        }

        if (size == 1) {
     eaa:	21 30       	cpi	r18, 0x01	; 1
     eac:	09 f0       	breq	.+2      	; 0xeb0 <read+0x56>
     eae:	65 c0       	rjmp	.+202    	; 0xf7a <read+0x120>
            buffer[count] = (val >> 2) & 0xFF;
     eb0:	96 95       	lsr	r25
     eb2:	87 95       	ror	r24
     eb4:	96 95       	lsr	r25
     eb6:	87 95       	ror	r24
     eb8:	21 c0       	rjmp	.+66     	; 0xefc <read+0xa2>
        }


    } else if (channel == MOTION ){
     eba:	8d 30       	cpi	r24, 0x0D	; 13
     ebc:	11 f5       	brne	.+68     	; 0xf02 <read+0xa8>

	// Pull the pin low to dissipate charge otherwise it always floats high
	// In the future, we either need a buffer or a tiny pull down 
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_OUTPUT);
     ebe:	10 91 25 02 	lds	r17, 0x0225
     ec2:	61 e0       	ldi	r22, 0x01	; 1
     ec4:	81 2f       	mov	r24, r17
     ec6:	29 83       	std	Y+1, r18	; 0x01
     ec8:	0e 94 35 11 	call	0x226a	; 0x226a <nrk_gpio_direction>
        nrk_gpio_clr(NRK_PORTE_2);
     ecc:	81 2f       	mov	r24, r17
     ece:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <nrk_gpio_clr>
        nrk_gpio_direction(NRK_PORTE_2, NRK_PIN_INPUT);
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	81 2f       	mov	r24, r17
     ed6:	0e 94 35 11 	call	0x226a	; 0x226a <nrk_gpio_direction>
	if(size==2) {buffer[count]=nrk_gpio_get(NRK_PORTE_2); count++; buffer[count]=0;  }
     eda:	29 81       	ldd	r18, Y+1	; 0x01
     edc:	22 30       	cpi	r18, 0x02	; 2
     ede:	41 f4       	brne	.+16     	; 0xef0 <read+0x96>
     ee0:	81 2f       	mov	r24, r17
     ee2:	0e 94 19 10 	call	0x2032	; 0x2032 <nrk_gpio_get>
     ee6:	f5 01       	movw	r30, r10
     ee8:	80 83       	st	Z, r24
     eea:	11 82       	std	Z+1, r1	; 0x01
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	7b c0       	rjmp	.+246    	; 0xfe6 <read+0x18c>
	if(size==1) {buffer[count]=nrk_gpio_get(NRK_PORTE_2); }
     ef0:	21 30       	cpi	r18, 0x01	; 1
     ef2:	09 f0       	breq	.+2      	; 0xef6 <read+0x9c>
     ef4:	42 c0       	rjmp	.+132    	; 0xf7a <read+0x120>
     ef6:	81 2f       	mov	r24, r17
     ef8:	0e 94 19 10 	call	0x2032	; 0x2032 <nrk_gpio_get>
     efc:	f5 01       	movw	r30, r10
     efe:	80 83       	st	Z, r24
     f00:	3c c0       	rjmp	.+120    	; 0xf7a <read+0x120>
     } 
	else if (channel == AUDIO_P2P) {
     f02:	8c 30       	cpi	r24, 0x0C	; 12
     f04:	e1 f5       	brne	.+120    	; 0xf7e <read+0x124>
     f06:	c1 2c       	mov	r12, r1
     f08:	dd 24       	eor	r13, r13
     f0a:	d3 94       	inc	r13
     f0c:	e1 2c       	mov	r14, r1
     f0e:	f1 2c       	mov	r15, r1
     f10:	01 e0       	ldi	r16, 0x01	; 1
     f12:	14 e0       	ldi	r17, 0x04	; 4
        uint16_t i;
        max = 0;
        min = 1025;
        for (i = 0; i < 256; i++) {
            // 10ms snapshot at around 11KHz measured on scope
	    ADC_SAMPLE_SINGLE();
     f14:	80 91 7a 00 	lds	r24, 0x007A
     f18:	80 64       	ori	r24, 0x40	; 64
     f1a:	80 93 7a 00 	sts	0x007A, r24
     f1e:	80 91 7a 00 	lds	r24, 0x007A
     f22:	84 ff       	sbrs	r24, 4
     f24:	fc cf       	rjmp	.-8      	; 0xf1e <read+0xc4>
            nrk_spin_wait_us(32);
     f26:	80 e2       	ldi	r24, 0x20	; 32
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	29 83       	std	Y+1, r18	; 0x01
     f2c:	0e 94 31 25 	call	0x4a62	; 0x4a62 <nrk_spin_wait_us>
    	    ADC_GET_SAMPLE_10(val);
     f30:	80 91 78 00 	lds	r24, 0x0078
     f34:	30 91 79 00 	lds	r19, 0x0079
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	93 2b       	or	r25, r19
     f3c:	29 81       	ldd	r18, Y+1	; 0x01
     f3e:	80 17       	cp	r24, r16
     f40:	91 07       	cpc	r25, r17
     f42:	08 f4       	brcc	.+2      	; 0xf46 <read+0xec>
     f44:	8c 01       	movw	r16, r24
     f46:	e8 16       	cp	r14, r24
     f48:	f9 06       	cpc	r15, r25
     f4a:	08 f4       	brcc	.+2      	; 0xf4e <read+0xf4>
     f4c:	7c 01       	movw	r14, r24
     f4e:	f1 e0       	ldi	r31, 0x01	; 1
     f50:	cf 1a       	sub	r12, r31
     f52:	d1 08       	sbc	r13, r1
        //uint16_t val=get_adc_val();
        uint16_t val, min, max;
        uint16_t i;
        max = 0;
        min = 1025;
        for (i = 0; i < 256; i++) {
     f54:	c1 14       	cp	r12, r1
     f56:	d1 04       	cpc	r13, r1
     f58:	e9 f6       	brne	.-70     	; 0xf14 <read+0xba>
            nrk_spin_wait_us(32);
    	    ADC_GET_SAMPLE_10(val);
            if (val < min)min = val;
            if (val > max)max = val;
        }
        val = max - min;
     f5a:	e0 1a       	sub	r14, r16
     f5c:	f1 0a       	sbc	r15, r17
        if (size == 2) {
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	21 f4       	brne	.+8      	; 0xf6a <read+0x110>
            buffer[count] = val & 0xFF;
     f62:	f5 01       	movw	r30, r10
     f64:	e0 82       	st	Z, r14
            count++;
            buffer[count] = (val >> 8) & 0xFF;
     f66:	f1 82       	std	Z+1, r15	; 0x01
     f68:	c1 cf       	rjmp	.-126    	; 0xeec <read+0x92>
        }

        if (size == 1) {
     f6a:	21 30       	cpi	r18, 0x01	; 1
     f6c:	31 f4       	brne	.+12     	; 0xf7a <read+0x120>
            buffer[count] = (val >> 2) & 0xFF;
     f6e:	f6 94       	lsr	r15
     f70:	e7 94       	ror	r14
     f72:	f6 94       	lsr	r15
     f74:	e7 94       	ror	r14
     f76:	f5 01       	movw	r30, r10
     f78:	e0 82       	st	Z, r14
    int32_t value_from_sensor;



    ADC_ENABLE();
    uint8_t count = 0;
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	34 c0       	rjmp	.+104    	; 0xfe6 <read+0x18c>

        if (size == 1) {
            buffer[count] = (val >> 2) & 0xFF;
        }
    }
    else if(channel == HUMIDITY)
     f7e:	8b 30       	cpi	r24, 0x0B	; 11
     f80:	e1 f4       	brne	.+56     	; 0xfba <read+0x160>
    {
	h_cnt=0;
     f82:	10 92 0a 05 	sts	0x050A, r1
	// Port F.2
	// Wait while pin is high
	do{
	}while((PINF & 0x4) == 0x4 );
     f86:	7a 99       	sbic	0x0f, 2	; 15
     f88:	fe cf       	rjmp	.-4      	; 0xf86 <read+0x12c>
	// Wait while pin is low
	do{
	}while((PINF & 0x4) == 0 );
     f8a:	7a 9b       	sbis	0x0f, 2	; 15
     f8c:	fe cf       	rjmp	.-4      	; 0xf8a <read+0x130>
	//_nrk_high_speed_timer_stop();
	//_nrk_high_speed_timer_reset();
	//_nrk_high_speed_timer_start();
	do{
	// Make h_cnt only 8 bit so it accumulates faster
	h_cnt++;
     f8e:	80 91 0a 05 	lds	r24, 0x050A
     f92:	8f 5f       	subi	r24, 0xFF	; 255
     f94:	80 93 0a 05 	sts	0x050A, r24
	}while((PINF & 0x4) == 0x4 );
     f98:	7a 99       	sbic	0x0f, 2	; 15
     f9a:	f9 cf       	rjmp	.-14     	; 0xf8e <read+0x134>
//	h_cnt=_nrk_high_speed_timer_get();
	buffer[0]=h_cnt&0xff;
     f9c:	f5 01       	movw	r30, r10
     f9e:	80 83       	st	Z, r24
	buffer[1]=h_cnt >> 8;
     fa0:	80 91 0a 05 	lds	r24, 0x050A
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	11 82       	std	Z+1, r1	; 0x01
	buffer[2]=h_cnt >> 16;
     fa8:	33 0f       	add	r19, r19
     faa:	22 0b       	sbc	r18, r18
     fac:	32 2f       	mov	r19, r18
     fae:	22 83       	std	Z+2, r18	; 0x02
	buffer[3]=h_cnt >> 24;
     fb0:	99 0f       	add	r25, r25
     fb2:	88 0b       	sbc	r24, r24
     fb4:	98 2f       	mov	r25, r24
     fb6:	83 83       	std	Z+3, r24	; 0x03
     fb8:	e0 cf       	rjmp	.-64     	; 0xf7a <read+0x120>

    }
    // Here the special cases of the I2C sensors (pressure and temperature)
    // are dealt with
    else if(channel == TEMP2 || channel == PRESS){
     fba:	97 ef       	ldi	r25, 0xF7	; 247
     fbc:	98 0f       	add	r25, r24
     fbe:	92 30       	cpi	r25, 0x02	; 2
     fc0:	e0 f6       	brcc	.-72     	; 0xf7a <read+0x120>

        // Size must be 2 for these measurements. If the user has specified 1,
        // give them a zero to indicate something is wrong
        if(size != 4)
     fc2:	24 30       	cpi	r18, 0x04	; 4
     fc4:	b9 f4       	brne	.+46     	; 0xff4 <read+0x19a>
            return 0;

        if(channel == TEMP2)
     fc6:	8a 30       	cpi	r24, 0x0A	; 10
     fc8:	19 f4       	brne	.+6      	; 0xfd0 <read+0x176>
	{
            value_from_sensor = calc_temp();
     fca:	0e 94 d3 06 	call	0xda6	; 0xda6 <calc_temp>
     fce:	05 c0       	rjmp	.+10     	; 0xfda <read+0x180>
	}
	    else{
            calc_temp(); /* Note this is neccessary because the pressure calculations depend upon the
     fd0:	0e 94 d3 06 	call	0xda6	; 0xda6 <calc_temp>
             raw temperature values*/
            value_from_sensor = calc_press(0); // OSS hard coded to 0 for now, doesn't really matter
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	0e 94 25 07 	call	0xe4a	; 0xe4a <calc_press>
        }
        // Now break up the value to fit in the buffer
        buffer[count] = value_from_sensor & 0xFF;
     fda:	f5 01       	movw	r30, r10
     fdc:	60 83       	st	Z, r22
        count++;
        buffer[count] = (value_from_sensor >> 8 ) & 0xFF;
     fde:	71 83       	std	Z+1, r23	; 0x01
        count++;
        buffer[count] = (value_from_sensor >> 16 ) & 0xFF;
     fe0:	82 83       	std	Z+2, r24	; 0x02
        count++;
        buffer[count] = (value_from_sensor >> 24 ) & 0xFF;
     fe2:	93 83       	std	Z+3, r25	; 0x03
        buffer[count] = value_from_sensor & 0xFF;
        count++;
        buffer[count] = (value_from_sensor >> 8 ) & 0xFF;
        count++;
        buffer[count] = (value_from_sensor >> 16 ) & 0xFF;
        count++;
     fe4:	83 e0       	ldi	r24, 0x03	; 3
        buffer[count] = (value_from_sensor >> 24 ) & 0xFF;

    }

    ADC_DISABLE();
     fe6:	90 91 7a 00 	lds	r25, 0x007A
     fea:	9f 77       	andi	r25, 0x7F	; 127
     fec:	90 93 7a 00 	sts	0x007A, r25
    count++;
     ff0:	8f 5f       	subi	r24, 0xFF	; 255
    return count;
     ff2:	01 c0       	rjmp	.+2      	; 0xff6 <read+0x19c>
    uint8_t count = 0;
    // key and value get passed as opt and size
    uint8_t key = opt;
    uint8_t value = size;

    if (size != 1 && size != 2 && size != 4) return 0;
     ff4:	80 e0       	ldi	r24, 0x00	; 0
    ADC_DISABLE();
    count++;
    return count;


}
     ff6:	0f 90       	pop	r0
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	ff 90       	pop	r15
    1002:	ef 90       	pop	r14
    1004:	df 90       	pop	r13
    1006:	cf 90       	pop	r12
    1008:	bf 90       	pop	r11
    100a:	af 90       	pop	r10
    100c:	08 95       	ret

0000100e <dev_manager_ff3_sensors>:



int8_t dev_manager_ff3_sensors(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {

    switch (action) {
    100e:	82 30       	cpi	r24, 0x02	; 2
    1010:	99 f0       	breq	.+38     	; 0x1038 <dev_manager_ff3_sensors+0x2a>
    1012:	38 f4       	brcc	.+14     	; 0x1022 <dev_manager_ff3_sensors+0x14>
    1014:	88 23       	and	r24, r24
    1016:	69 f0       	breq	.+26     	; 0x1032 <dev_manager_ff3_sensors+0x24>
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	c9 f4       	brne	.+50     	; 0x104e <dev_manager_ff3_sensors+0x40>

        case INIT:
            return init(action, opt, buffer, size);

        case OPEN:
            return open(action, opt, buffer, size);
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	0c 94 9f 03 	jmp	0x73e	; 0x73e <open>



int8_t dev_manager_ff3_sensors(uint8_t action, uint8_t opt, uint8_t *buffer, uint8_t size) {

    switch (action) {
    1022:	84 30       	cpi	r24, 0x04	; 4
    1024:	89 f0       	breq	.+34     	; 0x1048 <dev_manager_ff3_sensors+0x3a>
    1026:	58 f0       	brcs	.+22     	; 0x103e <dev_manager_ff3_sensors+0x30>
    1028:	85 30       	cpi	r24, 0x05	; 5
    102a:	89 f4       	brne	.+34     	; 0x104e <dev_manager_ff3_sensors+0x40>

        case OPEN:
            return open(action, opt, buffer, size);

        case READ:
            return read(action, opt, buffer, size);
    102c:	85 e0       	ldi	r24, 0x05	; 5
    102e:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <read>
         * well as the I2C methods of getting inputs, even though only one of
         * them will be used at any given time.
         */

        case INIT:
            return init(action, opt, buffer, size);
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <init>

        case READ:
            return read(action, opt, buffer, size);

        case CLOSE:
            return close(action, opt, buffer, size);
    1038:	82 e0       	ldi	r24, 0x02	; 2
    103a:	0c 94 c9 03 	jmp	0x792	; 0x792 <close>

    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
    103e:	61 30       	cpi	r22, 0x01	; 1
    1040:	61 f4       	brne	.+24     	; 0x105a <dev_manager_ff3_sensors+0x4c>
    1042:	80 91 01 05 	lds	r24, 0x0501
    1046:	08 95       	ret

        case GET_STATUS:
            return get_status(action, opt, buffer, size);

        case SET_STATUS:
            return set_status(action, opt, buffer, size);
    1048:	84 e0       	ldi	r24, 0x04	; 4
    104a:	0c 94 df 03 	jmp	0x7be	; 0x7be <set_status>

        default:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	8c e0       	ldi	r24, 0x0C	; 12
    1052:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <nrk_kernel_error_add>
            return 0;
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	08 95       	ret
    // key and value get passed as opt and size
    uint8_t key = opt;

    // use "key" here
    if (key == SENSOR_SELECT) return channel;
    return NRK_ERROR;
    105a:	8f ef       	ldi	r24, 0xFF	; 255

        default:
            nrk_kernel_error_add(NRK_DEVICE_DRIVER, 0);
            return 0;
    }
}
    105c:	08 95       	ret

0000105e <set_i2c_device>:

uint8_t i2c_address; // The address of the slave node to write to

void set_i2c_device(uint8_t address)
{
    i2c_address = address;
    105e:	80 93 1c 05 	sts	0x051C, r24
    1062:	08 95       	ret

00001064 <init_i2c>:
{

  // Set up the SCL frequency
  // To operate at a clock frequency of 1 MHz, set TWBR and TWPS to 0
  // TODO: Generalize later
  TWBR = 0x02; // TWI Bit Rate Register
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	80 93 b8 00 	sts	0x00B8, r24
  TWSR = 0x00; // TWPS is the value of the prescaler in the TWI status register (the 2 LSB)
    106a:	10 92 b9 00 	sts	0x00B9, r1

  // Enable the SCL/SDA
  PRR0 = PRR0 & 0x7F; // Set the MSB in PRRO to 0 (see page 378)
    106e:	e4 e6       	ldi	r30, 0x64	; 100
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	8f 77       	andi	r24, 0x7F	; 127
    1076:	80 83       	st	Z, r24
  TWCR = TWCR | 0x04; // Set the TWEN bit in the TWCR (see page 196)
    1078:	ec eb       	ldi	r30, 0xBC	; 188
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	84 60       	ori	r24, 0x04	; 4
    1080:	80 83       	st	Z, r24
    1082:	08 95       	ret

00001084 <close_i2c>:

}

void close_i2c(void)
{
   PRR0 = PRR0 & 0xFF; // Set the MSB in PRRO to 1 (see page 378)
    1084:	e4 e6       	ldi	r30, 0x64	; 100
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	80 83       	st	Z, r24
   TWCR = TWCR & 0xFB; // Set the TWEN bit in the TWCR (see page 196)
    108c:	ec eb       	ldi	r30, 0xBC	; 188
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	8b 7f       	andi	r24, 0xFB	; 251
    1094:	80 83       	st	Z, r24
    1096:	08 95       	ret

00001098 <ee24xx_read_bytes>:

  uint8_t sla, twcr, n = 0;
  int rv = 0;

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);
    1098:	97 70       	andi	r25, 0x07	; 7
    109a:	99 0f       	add	r25, r25
    109c:	20 91 1c 05 	lds	r18, 0x051C
    10a0:	92 2b       	or	r25, r18
    10a2:	35 e6       	ldi	r19, 0x65	; 101
  restart:
  if (n++ >= MAX_ITER)
    return -1;
  begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    10a4:	f4 ea       	ldi	r31, 0xA4	; 164
    10a6:	a4 ea       	ldi	r26, 0xA4	; 164
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    10a8:	e4 e8       	ldi	r30, 0x84	; 132
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
    10aa:	b9 2f       	mov	r27, r25
    10ac:	b1 60       	ori	r27, 0x01	; 1
    10ae:	31 50       	subi	r19, 0x01	; 1
  /*
   * Note [8]
   * First cycle: master transmitter mode
   */
  restart:
  if (n++ >= MAX_ITER)
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <ee24xx_read_bytes+0x1c>
    10b2:	8d c0       	rjmp	.+282    	; 0x11ce <ee24xx_read_bytes+0x136>
    return -1;
  begin:

  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    10b4:	a0 93 bc 00 	sts	0x00BC, r26
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    10b8:	20 91 bc 00 	lds	r18, 0x00BC
    10bc:	27 ff       	sbrs	r18, 7
    10be:	fc cf       	rjmp	.-8      	; 0x10b8 <ee24xx_read_bytes+0x20>
  switch ((twst = TW_STATUS))
    10c0:	20 91 b9 00 	lds	r18, 0x00B9
    10c4:	28 7f       	andi	r18, 0xF8	; 248
    10c6:	20 93 1b 05 	sts	0x051B, r18
    10ca:	20 31       	cpi	r18, 0x10	; 16
    10cc:	29 f0       	breq	.+10     	; 0x10d8 <ee24xx_read_bytes+0x40>
    10ce:	28 33       	cpi	r18, 0x38	; 56
    10d0:	89 f3       	breq	.-30     	; 0x10b4 <ee24xx_read_bytes+0x1c>
    10d2:	28 30       	cpi	r18, 0x08	; 8
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <ee24xx_read_bytes+0x40>
    10d6:	7b c0       	rjmp	.+246    	; 0x11ce <ee24xx_read_bytes+0x136>
				/* NB: do /not/ send stop condition */
    }

  /* Note [10] */
  /* send SLA+W */
  TWDR = sla | TW_WRITE;
    10d8:	90 93 bb 00 	sts	0x00BB, r25
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    10dc:	e0 93 bc 00 	sts	0x00BC, r30
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    10e0:	20 91 bc 00 	lds	r18, 0x00BC
    10e4:	27 ff       	sbrs	r18, 7
    10e6:	fc cf       	rjmp	.-8      	; 0x10e0 <ee24xx_read_bytes+0x48>
  switch ((twst = TW_STATUS))
    10e8:	20 91 b9 00 	lds	r18, 0x00B9
    10ec:	28 7f       	andi	r18, 0xF8	; 248
    10ee:	20 93 1b 05 	sts	0x051B, r18
    10f2:	20 32       	cpi	r18, 0x20	; 32
    10f4:	e1 f2       	breq	.-72     	; 0x10ae <ee24xx_read_bytes+0x16>
    10f6:	28 33       	cpi	r18, 0x38	; 56
    10f8:	e9 f2       	breq	.-70     	; 0x10b4 <ee24xx_read_bytes+0x1c>
    10fa:	28 31       	cpi	r18, 0x18	; 24
    10fc:	09 f0       	breq	.+2      	; 0x1100 <ee24xx_read_bytes+0x68>
    10fe:	60 c0       	rjmp	.+192    	; 0x11c0 <ee24xx_read_bytes+0x128>

    default:
      goto error;		/* must send stop condition */
    }

  TWDR = eeaddr;		/* low 8 bits of addr */
    1100:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1104:	e0 93 bc 00 	sts	0x00BC, r30
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1108:	20 91 bc 00 	lds	r18, 0x00BC
    110c:	27 ff       	sbrs	r18, 7
    110e:	fc cf       	rjmp	.-8      	; 0x1108 <ee24xx_read_bytes+0x70>
  switch ((twst = TW_STATUS))
    1110:	20 91 b9 00 	lds	r18, 0x00B9
    1114:	28 7f       	andi	r18, 0xF8	; 248
    1116:	20 93 1b 05 	sts	0x051B, r18
    111a:	20 33       	cpi	r18, 0x30	; 48
    111c:	59 f1       	breq	.+86     	; 0x1174 <ee24xx_read_bytes+0xdc>
    111e:	28 33       	cpi	r18, 0x38	; 56
    1120:	49 f2       	breq	.-110    	; 0x10b4 <ee24xx_read_bytes+0x1c>
    1122:	28 32       	cpi	r18, 0x28	; 40
    1124:	09 f0       	breq	.+2      	; 0x1128 <ee24xx_read_bytes+0x90>
    1126:	4c c0       	rjmp	.+152    	; 0x11c0 <ee24xx_read_bytes+0x128>

  /*
   * Note [12]
   * Next cycle(s): master receiver mode
   */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send (rep.) start condition */
    1128:	f0 93 bc 00 	sts	0x00BC, r31
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    112c:	20 91 bc 00 	lds	r18, 0x00BC
    1130:	27 ff       	sbrs	r18, 7
    1132:	fc cf       	rjmp	.-8      	; 0x112c <ee24xx_read_bytes+0x94>
  switch ((twst = TW_STATUS))
    1134:	20 91 b9 00 	lds	r18, 0x00B9
    1138:	28 7f       	andi	r18, 0xF8	; 248
    113a:	20 93 1b 05 	sts	0x051B, r18
    113e:	20 31       	cpi	r18, 0x10	; 16
    1140:	29 f0       	breq	.+10     	; 0x114c <ee24xx_read_bytes+0xb4>
    1142:	28 33       	cpi	r18, 0x38	; 56
    1144:	09 f4       	brne	.+2      	; 0x1148 <ee24xx_read_bytes+0xb0>
    1146:	b6 cf       	rjmp	.-148    	; 0x10b4 <ee24xx_read_bytes+0x1c>
    1148:	28 30       	cpi	r18, 0x08	; 8
    114a:	d1 f5       	brne	.+116    	; 0x11c0 <ee24xx_read_bytes+0x128>
    default:
      goto error;
    }

  /* send SLA+R */
  TWDR = sla | TW_READ;
    114c:	b0 93 bb 00 	sts	0x00BB, r27
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1150:	e0 93 bc 00 	sts	0x00BC, r30
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1154:	20 91 bc 00 	lds	r18, 0x00BC
    1158:	27 ff       	sbrs	r18, 7
    115a:	fc cf       	rjmp	.-8      	; 0x1154 <ee24xx_read_bytes+0xbc>
  switch ((twst = TW_STATUS))
    115c:	20 91 b9 00 	lds	r18, 0x00B9
    1160:	28 7f       	andi	r18, 0xF8	; 248
    1162:	20 93 1b 05 	sts	0x051B, r18
    1166:	20 34       	cpi	r18, 0x40	; 64
    1168:	41 f0       	breq	.+16     	; 0x117a <ee24xx_read_bytes+0xe2>
    116a:	28 34       	cpi	r18, 0x48	; 72
    116c:	19 f0       	breq	.+6      	; 0x1174 <ee24xx_read_bytes+0xdc>
    116e:	28 33       	cpi	r18, 0x38	; 56
    1170:	39 f5       	brne	.+78     	; 0x11c0 <ee24xx_read_bytes+0x128>
    1172:	a0 cf       	rjmp	.-192    	; 0x10b4 <ee24xx_read_bytes+0x1c>
ee24xx_read_bytes(uint16_t eeaddr, int len, uint8_t *buf)
{


  uint8_t sla, twcr, n = 0;
  int rv = 0;
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	25 c0       	rjmp	.+74     	; 0x11c4 <ee24xx_read_bytes+0x12c>

  /* send SLA+R */
  TWDR = sla | TW_READ;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
  switch ((twst = TW_STATUS))
    117a:	fa 01       	movw	r30, r20
    117c:	94 ec       	ldi	r25, 0xC4	; 196
    117e:	9f 01       	movw	r18, r30
    1180:	24 1b       	sub	r18, r20
    1182:	35 0b       	sbc	r19, r21

    default:
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
    1184:	16 16       	cp	r1, r22
    1186:	17 06       	cpc	r1, r23
    1188:	ec f4       	brge	.+58     	; 0x11c4 <ee24xx_read_bytes+0x12c>
       len > 0;
       len--)
    {
      if (len == 1)
    118a:	61 30       	cpi	r22, 0x01	; 1
    118c:	71 05       	cpc	r23, r1
    118e:	09 f4       	brne	.+2      	; 0x1192 <ee24xx_read_bytes+0xfa>
	twcr = _BV(TWINT) | _BV(TWEN); /* send NAK this time */
    1190:	94 e8       	ldi	r25, 0x84	; 132
      TWCR = twcr;		/* clear int to start transmission */
    1192:	90 93 bc 00 	sts	0x00BC, r25
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1196:	80 91 bc 00 	lds	r24, 0x00BC
    119a:	87 ff       	sbrs	r24, 7
    119c:	fc cf       	rjmp	.-8      	; 0x1196 <ee24xx_read_bytes+0xfe>
      switch ((twst = TW_STATUS))
    119e:	80 91 b9 00 	lds	r24, 0x00B9
    11a2:	88 7f       	andi	r24, 0xF8	; 248
    11a4:	80 93 1b 05 	sts	0x051B, r24
    11a8:	80 35       	cpi	r24, 0x50	; 80
    11aa:	21 f0       	breq	.+8      	; 0x11b4 <ee24xx_read_bytes+0x11c>
    11ac:	88 35       	cpi	r24, 0x58	; 88
    11ae:	41 f4       	brne	.+16     	; 0x11c0 <ee24xx_read_bytes+0x128>
	{
	case TW_MR_DATA_NACK:
	  len = 0;		/* force end of loop */
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	70 e0       	ldi	r23, 0x00	; 0
	  /* FALLTHROUGH */
	case TW_MR_DATA_ACK:
	  *buf++ = TWDR;
    11b4:	80 91 bb 00 	lds	r24, 0x00BB
    11b8:	81 93       	st	Z+, r24
      goto error;
    }

  for (twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA) /* Note [13] */;
       len > 0;
       len--)
    11ba:	61 50       	subi	r22, 0x01	; 1
    11bc:	71 09       	sbc	r23, r1
    11be:	df cf       	rjmp	.-66     	; 0x117e <ee24xx_read_bytes+0xe6>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

  error:
  rv = -1;
    11c0:	2f ef       	ldi	r18, 0xFF	; 255
    11c2:	3f ef       	ldi	r19, 0xFF	; 255
	  goto error;
	}
    }
  quit:
  /* Note [14] */
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    11c4:	84 e9       	ldi	r24, 0x94	; 148
    11c6:	80 93 bc 00 	sts	0x00BC, r24

  return rv;
    11ca:	c9 01       	movw	r24, r18
    11cc:	08 95       	ret

    case TW_MT_ARB_LOST:	/* Note [9] */
      goto begin;

    default:
      return -1;		/* error: not in start condition */
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	9f ef       	ldi	r25, 0xFF	; 255
  return rv;

  error:
  rv = -1;
  goto quit;
}
    11d2:	08 95       	ret

000011d4 <ee24xx_write_page>:
  int rv = 0;
  uint16_t endaddr;



  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
    11d4:	68 0f       	add	r22, r24
    11d6:	79 1f       	adc	r23, r25
    11d8:	9c 01       	movw	r18, r24
    11da:	27 60       	ori	r18, 0x07	; 7
    11dc:	62 17       	cp	r22, r18
    11de:	73 07       	cpc	r23, r19
    11e0:	18 f0       	brcs	.+6      	; 0x11e8 <ee24xx_write_page+0x14>
    endaddr = eeaddr + len;
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
    11e2:	b9 01       	movw	r22, r18
    11e4:	6f 5f       	subi	r22, 0xFF	; 255
    11e6:	7f 4f       	sbci	r23, 0xFF	; 255
  len = endaddr - eeaddr;

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);
    11e8:	39 2f       	mov	r19, r25
    11ea:	37 70       	andi	r19, 0x07	; 7
    11ec:	33 0f       	add	r19, r19
    11ee:	20 91 1c 05 	lds	r18, 0x051C
    11f2:	32 2b       	or	r19, r18
    11f4:	e5 e6       	ldi	r30, 0x65	; 101
  if (n++ >= MAX_ITER)
    return -1;
  begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    11f6:	a4 ea       	ldi	r26, 0xA4	; 164
				/* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    11f8:	f4 e8       	ldi	r31, 0x84	; 132
    11fa:	e1 50       	subi	r30, 0x01	; 1

  /* patch high bits of EEPROM address into SLA */
  sla = i2c_address | (((eeaddr >> 8) & 0x07) << 1);

  restart:
  if (n++ >= MAX_ITER)
    11fc:	09 f4       	brne	.+2      	; 0x1200 <ee24xx_write_page+0x2c>
    11fe:	62 c0       	rjmp	.+196    	; 0x12c4 <ee24xx_write_page+0xf0>
    return -1;
  begin:

  /* Note [15] */
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
    1200:	a0 93 bc 00 	sts	0x00BC, r26
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1204:	20 91 bc 00 	lds	r18, 0x00BC
    1208:	27 ff       	sbrs	r18, 7
    120a:	fc cf       	rjmp	.-8      	; 0x1204 <ee24xx_write_page+0x30>
  switch ((twst = TW_STATUS))
    120c:	20 91 b9 00 	lds	r18, 0x00B9
    1210:	28 7f       	andi	r18, 0xF8	; 248
    1212:	20 93 1b 05 	sts	0x051B, r18
    1216:	20 31       	cpi	r18, 0x10	; 16
    1218:	29 f0       	breq	.+10     	; 0x1224 <ee24xx_write_page+0x50>
    121a:	28 33       	cpi	r18, 0x38	; 56
    121c:	89 f3       	breq	.-30     	; 0x1200 <ee24xx_write_page+0x2c>
    121e:	28 30       	cpi	r18, 0x08	; 8
    1220:	09 f0       	breq	.+2      	; 0x1224 <ee24xx_write_page+0x50>
    1222:	50 c0       	rjmp	.+160    	; 0x12c4 <ee24xx_write_page+0xf0>
        return -1;		/* error: not in start condition */
				/* NB: do /not/ send stop condition */
    }

  /* send SLA+W */
  TWDR = sla | TW_WRITE;
    1224:	30 93 bb 00 	sts	0x00BB, r19
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    1228:	f0 93 bc 00 	sts	0x00BC, r31
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    122c:	20 91 bc 00 	lds	r18, 0x00BC
    1230:	27 ff       	sbrs	r18, 7
    1232:	fc cf       	rjmp	.-8      	; 0x122c <ee24xx_write_page+0x58>
  switch ((twst = TW_STATUS))
    1234:	20 91 b9 00 	lds	r18, 0x00B9
    1238:	28 7f       	andi	r18, 0xF8	; 248
    123a:	20 93 1b 05 	sts	0x051B, r18
    123e:	20 32       	cpi	r18, 0x20	; 32
    1240:	e1 f2       	breq	.-72     	; 0x11fa <ee24xx_write_page+0x26>
    1242:	28 33       	cpi	r18, 0x38	; 56
    1244:	e9 f2       	breq	.-70     	; 0x1200 <ee24xx_write_page+0x2c>
    1246:	28 31       	cpi	r18, 0x18	; 24
    1248:	b1 f5       	brne	.+108    	; 0x12b6 <ee24xx_write_page+0xe2>

    default:
        goto error;		/* must send stop condition */
    }

  TWDR = eeaddr;		/* low 8 bits of addr */
    124a:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
    124e:	f0 93 bc 00 	sts	0x00BC, r31
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1252:	20 91 bc 00 	lds	r18, 0x00BC
    1256:	27 ff       	sbrs	r18, 7
    1258:	fc cf       	rjmp	.-8      	; 0x1252 <ee24xx_write_page+0x7e>
  switch ((twst = TW_STATUS))
    125a:	20 91 b9 00 	lds	r18, 0x00B9
    125e:	28 7f       	andi	r18, 0xF8	; 248
    1260:	20 93 1b 05 	sts	0x051B, r18
    1264:	20 33       	cpi	r18, 0x30	; 48
    1266:	59 f0       	breq	.+22     	; 0x127e <ee24xx_write_page+0xaa>
    1268:	28 33       	cpi	r18, 0x38	; 56
    126a:	51 f2       	breq	.-108    	; 0x1200 <ee24xx_write_page+0x2c>
    126c:	28 32       	cpi	r18, 0x28	; 40
    126e:	19 f5       	brne	.+70     	; 0x12b6 <ee24xx_write_page+0xe2>

  if (eeaddr + len < (eeaddr | (PAGE_SIZE - 1)))
    endaddr = eeaddr + len;
  else
    endaddr = (eeaddr | (PAGE_SIZE - 1)) + 1;
  len = endaddr - eeaddr;
    1270:	68 1b       	sub	r22, r24
    1272:	79 0b       	sbc	r23, r25
    1274:	fa 01       	movw	r30, r20
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    }

  for (; len > 0; len--)
    {
      TWDR = *buf++;
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
    127a:	44 e8       	ldi	r20, 0x84	; 132
    127c:	10 c0       	rjmp	.+32     	; 0x129e <ee24xx_write_page+0xca>
 */
int
ee24xx_write_page(uint16_t eeaddr, int len, uint8_t *buf)
{
  uint8_t sla, n = 0;
  int rv = 0;
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	1b c0       	rjmp	.+54     	; 0x12ba <ee24xx_write_page+0xe6>

  for (; len > 0; len--)
    {
      TWDR = *buf++;
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    1284:	80 91 bc 00 	lds	r24, 0x00BC
    1288:	87 ff       	sbrs	r24, 7
    128a:	fc cf       	rjmp	.-8      	; 0x1284 <ee24xx_write_page+0xb0>
      switch ((twst = TW_STATUS))
    128c:	80 91 b9 00 	lds	r24, 0x00B9
    1290:	88 7f       	andi	r24, 0xF8	; 248
    1292:	80 93 1b 05 	sts	0x051B, r24
    1296:	88 32       	cpi	r24, 0x28	; 40
    1298:	71 f4       	brne	.+28     	; 0x12b6 <ee24xx_write_page+0xe2>
	{
	case TW_MT_DATA_NACK:
	  goto error;		/* device write protected -- Note [16] */

	case TW_MT_DATA_ACK:
	  rv++;
    129a:	2f 5f       	subi	r18, 0xFF	; 255
    129c:	3f 4f       	sbci	r19, 0xFF	; 255
    129e:	cb 01       	movw	r24, r22
    12a0:	82 1b       	sub	r24, r18
    12a2:	93 0b       	sbc	r25, r19
    default:

        goto error;		/* must send stop condition */
    }

  for (; len > 0; len--)
    12a4:	18 16       	cp	r1, r24
    12a6:	19 06       	cpc	r1, r25
    12a8:	44 f4       	brge	.+16     	; 0x12ba <ee24xx_write_page+0xe6>
    {
      TWDR = *buf++;
    12aa:	81 91       	ld	r24, Z+
    12ac:	80 93 bb 00 	sts	0x00BB, r24
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
    12b0:	40 93 bc 00 	sts	0x00BC, r20
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
    12b4:	e7 cf       	rjmp	.-50     	; 0x1284 <ee24xx_write_page+0xb0>
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */

  return rv;

  error:
  rv = -1;
    12b6:	2f ef       	ldi	r18, 0xFF	; 255
    12b8:	3f ef       	ldi	r19, 0xFF	; 255
	default:
            goto error;
	}
    }
  quit:
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
    12ba:	84 e9       	ldi	r24, 0x94	; 148
    12bc:	80 93 bc 00 	sts	0x00BC, r24

  return rv;
    12c0:	c9 01       	movw	r24, r18
    12c2:	08 95       	ret

    case TW_MT_ARB_LOST:
      goto begin;

    default:
        return -1;		/* error: not in start condition */
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	9f ef       	ldi	r25, 0xFF	; 255
  return rv;

  error:
  rv = -1;
  goto quit;
}
    12c8:	08 95       	ret

000012ca <ee24xx_write_bytes>:
 * function until either an error has been returned, or all bytes
 * have been written.
 */
int
ee24xx_write_bytes(uint16_t eeaddr, int len, uint8_t *buf)
{
    12ca:	cf 92       	push	r12
    12cc:	df 92       	push	r13
    12ce:	ef 92       	push	r14
    12d0:	ff 92       	push	r15
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	6c 01       	movw	r12, r24
    12dc:	8b 01       	movw	r16, r22
    12de:	7a 01       	movw	r14, r20
  int rv, total;



  total = 0;
    12e0:	c0 e0       	ldi	r28, 0x00	; 0
    12e2:	d0 e0       	ldi	r29, 0x00	; 0
    {
#if DEBUG
      printf("Calling ee24xx_write_page(%d, %d, %p)",
	     eeaddr, len, buf);
#endif
      rv = ee24xx_write_page(eeaddr, len, buf);
    12e4:	a7 01       	movw	r20, r14
    12e6:	b8 01       	movw	r22, r16
    12e8:	c6 01       	movw	r24, r12
    12ea:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <ee24xx_write_page>
#if DEBUG
      printf(" => %d\n", rv);
#endif
      if (rv == -1)
    12ee:	8f 3f       	cpi	r24, 0xFF	; 255
    12f0:	2f ef       	ldi	r18, 0xFF	; 255
    12f2:	92 07       	cpc	r25, r18
    12f4:	69 f0       	breq	.+26     	; 0x1310 <ee24xx_write_bytes+0x46>
	return -1;
      eeaddr += rv;
    12f6:	c8 0e       	add	r12, r24
    12f8:	d9 1e       	adc	r13, r25
      len -= rv;
    12fa:	08 1b       	sub	r16, r24
    12fc:	19 0b       	sbc	r17, r25
      buf += rv;
    12fe:	e8 0e       	add	r14, r24
    1300:	f9 1e       	adc	r15, r25
      total += rv;
    1302:	c8 0f       	add	r28, r24
    1304:	d9 1f       	adc	r29, r25
    }
  while (len > 0);
    1306:	10 16       	cp	r1, r16
    1308:	11 06       	cpc	r1, r17
    130a:	64 f3       	brlt	.-40     	; 0x12e4 <ee24xx_write_bytes+0x1a>
      if (rv == -1)
	return -1;
      eeaddr += rv;
      len -= rv;
      buf += rv;
      total += rv;
    130c:	ce 01       	movw	r24, r28
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <ee24xx_write_bytes+0x4a>
      rv = ee24xx_write_page(eeaddr, len, buf);
#if DEBUG
      printf(" => %d\n", rv);
#endif
      if (rv == -1)
	return -1;
    1310:	8f ef       	ldi	r24, 0xFF	; 255
    1312:	9f ef       	ldi	r25, 0xFF	; 255
      total += rv;
    }
  while (len > 0);

  return total;
}
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	ff 90       	pop	r15
    131e:	ef 90       	pop	r14
    1320:	df 90       	pop	r13
    1322:	cf 90       	pop	r12
    1324:	08 95       	ret

00001326 <error>:

void
error(void)
{

  printf("error: TWI status %#x\n", twst);
    1326:	80 91 1b 05 	lds	r24, 0x051B
    132a:	1f 92       	push	r1
    132c:	8f 93       	push	r24
    132e:	80 ec       	ldi	r24, 0xC0	; 192
    1330:	92 e0       	ldi	r25, 0x02	; 2
    1332:	9f 93       	push	r25
    1334:	8f 93       	push	r24
    1336:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	08 95       	ret

00001344 <rf_cmd>:


/* Safely change the radio state */
static void rf_cmd(uint8_t cmd)
{
	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1344:	90 91 41 01 	lds	r25, 0x0141
    1348:	9f 71       	andi	r25, 0x1F	; 31
    134a:	9f 31       	cpi	r25, 0x1F	; 31
    134c:	d9 f3       	breq	.-10     	; 0x1344 <rf_cmd>
		continue;
	TRX_STATE = cmd;
    134e:	80 93 42 01 	sts	0x0142, r24
    1352:	08 95       	ret

00001354 <rf_enable_glossy>:



void rf_enable_glossy()
{
	use_glossy = 1;
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	80 93 23 05 	sts	0x0523, r24
    135a:	08 95       	ret

0000135c <rf_disable_glossy>:
}

void rf_disable_glossy()
{
	use_glossy = 0;
    135c:	10 92 23 05 	sts	0x0523, r1
    1360:	08 95       	ret

00001362 <rf_power_down>:

void rf_power_down()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    1362:	80 91 41 01 	lds	r24, 0x0141
    1366:	8f 71       	andi	r24, 0x1F	; 31
    1368:	8f 31       	cpi	r24, 0x1F	; 31
    136a:	d9 f3       	breq	.-10     	; 0x1362 <rf_power_down>
		continue;

	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    136c:	80 91 41 01 	lds	r24, 0x0141
    1370:	8f 71       	andi	r24, 0x1F	; 31
	if((status == 0) || (status == 0xF))
    1372:	e1 f0       	breq	.+56     	; 0x13ac <rf_power_down+0x4a>
    1374:	8f 30       	cpi	r24, 0x0F	; 15
    1376:	d1 f0       	breq	.+52     	; 0x13ac <rf_power_down+0x4a>
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
    1378:	80 91 41 01 	lds	r24, 0x0141
    137c:	8f 71       	andi	r24, 0x1F	; 31
    137e:	88 30       	cpi	r24, 0x08	; 8
    1380:	31 f4       	brne	.+12     	; 0x138e <rf_power_down+0x2c>
		do{
			status = (TRX_STATUS & 0x1F);
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
    1382:	80 91 39 01 	lds	r24, 0x0139
    1386:	82 60       	ori	r24, 0x02	; 2
    1388:	80 93 39 01 	sts	0x0139, r24
    138c:	0b c0       	rjmp	.+22     	; 0x13a4 <rf_power_down+0x42>
	status = (TRX_STATUS & 0x1F);
	if((status == 0) || (status == 0xF))
		return;
	/* Disable TRX if it is enabled */
	if((TRX_STATUS & 0x1F) != TRX_OFF){
		rf_cmd(TRX_OFF);
    138e:	88 e0       	ldi	r24, 0x08	; 8
    1390:	0e 94 a2 09 	call	0x1344	; 0x1344 <rf_cmd>
		do{
			status = (TRX_STATUS & 0x1F);
    1394:	80 91 41 01 	lds	r24, 0x0141
    1398:	8f 71       	andi	r24, 0x1F	; 31
		}while(status != TRX_OFF);
    139a:	88 30       	cpi	r24, 0x08	; 8
    139c:	d9 f7       	brne	.-10     	; 0x1394 <rf_power_down+0x32>
    139e:	f1 cf       	rjmp	.-30     	; 0x1382 <rf_power_down+0x20>
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
	}while((status != 0) && (status != 0xF));
    13a0:	8f 30       	cpi	r24, 0x0F	; 15
    13a2:	21 f0       	breq	.+8      	; 0x13ac <rf_power_down+0x4a>
		}while(status != TRX_OFF);
	}

	TRXPR |= (1 << SLPTR);
	do{
		status = (TRX_STATUS & 0x1F);
    13a4:	80 91 41 01 	lds	r24, 0x0141
    13a8:	8f 71       	andi	r24, 0x1F	; 31
	}while((status != 0) && (status != 0xF));
    13aa:	d1 f7       	brne	.-12     	; 0x13a0 <rf_power_down+0x3e>
    13ac:	08 95       	ret

000013ae <rf_power_up>:

void rf_power_up()
{
	uint8_t status;

	while((TRX_STATUS & 0x1F) == STATE_TRANSITION_IN_PROGRESS)
    13ae:	80 91 41 01 	lds	r24, 0x0141
    13b2:	8f 71       	andi	r24, 0x1F	; 31
    13b4:	8f 31       	cpi	r24, 0x1F	; 31
    13b6:	d9 f3       	breq	.-10     	; 0x13ae <rf_power_up>
		continue;
	/* For some reason comparing to SLEEP doesn't work, but 0 does */
	status = (TRX_STATUS & 0x1F);
    13b8:	80 91 41 01 	lds	r24, 0x0141
    13bc:	8f 71       	andi	r24, 0x1F	; 31
	if((status != 0) && (status != 0xF))
    13be:	11 f0       	breq	.+4      	; 0x13c4 <rf_power_up+0x16>
    13c0:	8f 30       	cpi	r24, 0x0F	; 15
    13c2:	51 f4       	brne	.+20     	; 0x13d8 <rf_power_up+0x2a>
		return;

	/* Wake up */
	TRXPR &= ~(1 << SLPTR);
    13c4:	80 91 39 01 	lds	r24, 0x0139
    13c8:	8d 7f       	andi	r24, 0xFD	; 253
    13ca:	80 93 39 01 	sts	0x0139, r24
	while((TRX_STATUS & 0x1F) != TRX_OFF)
    13ce:	80 91 41 01 	lds	r24, 0x0141
    13d2:	8f 71       	andi	r24, 0x1F	; 31
    13d4:	88 30       	cpi	r24, 0x08	; 8
    13d6:	d9 f7       	brne	.-10     	; 0x13ce <rf_power_up+0x20>
    13d8:	08 95       	ret

000013da <rf_tx_power>:
}


void rf_tx_power(uint8_t pwr)
{
	PHY_TX_PWR &= 0xF0;
    13da:	e5 e4       	ldi	r30, 0x45	; 69
    13dc:	f1 e0       	ldi	r31, 0x01	; 1
    13de:	90 81       	ld	r25, Z
    13e0:	90 7f       	andi	r25, 0xF0	; 240
    13e2:	90 83       	st	Z, r25
	PHY_TX_PWR |= (pwr & 0xF);
    13e4:	90 81       	ld	r25, Z
    13e6:	8f 70       	andi	r24, 0x0F	; 15
    13e8:	89 2b       	or	r24, r25
    13ea:	80 83       	st	Z, r24
    13ec:	08 95       	ret

000013ee <rf_addr_decode_enable>:
}

void rf_addr_decode_enable()
{
	XAH_CTRL_1 &= ~(1 << AACK_PROM_MODE);
    13ee:	e7 e5       	ldi	r30, 0x57	; 87
    13f0:	f1 e0       	ldi	r31, 0x01	; 1
    13f2:	80 81       	ld	r24, Z
    13f4:	8d 7f       	andi	r24, 0xFD	; 253
    13f6:	80 83       	st	Z, r24
    13f8:	08 95       	ret

000013fa <rf_addr_decode_disable>:
}


void rf_addr_decode_disable()
{
	XAH_CTRL_1 |= (1 << AACK_PROM_MODE);
    13fa:	e7 e5       	ldi	r30, 0x57	; 87
    13fc:	f1 e0       	ldi	r31, 0x01	; 1
    13fe:	80 81       	ld	r24, Z
    1400:	82 60       	ori	r24, 0x02	; 2
    1402:	80 83       	st	Z, r24
    1404:	08 95       	ret

00001406 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
	CSMA_SEED_1 &= ~(1 << AACK_DIS_ACK);
    1406:	ee e6       	ldi	r30, 0x6E	; 110
    1408:	f1 e0       	ldi	r31, 0x01	; 1
    140a:	80 81       	ld	r24, Z
    140c:	8f 7e       	andi	r24, 0xEF	; 239
    140e:	80 83       	st	Z, r24
    1410:	08 95       	ret

00001412 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
	CSMA_SEED_1 |= (1 << AACK_DIS_ACK);
    1412:	ee e6       	ldi	r30, 0x6E	; 110
    1414:	f1 e0       	ldi	r31, 0x01	; 1
    1416:	80 81       	ld	r24, Z
    1418:	80 61       	ori	r24, 0x10	; 16
    141a:	80 83       	st	Z, r24
    141c:	08 95       	ret

0000141e <rf_addr_decode_set_my_mac>:


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
	/* Set short MAC address */
	SHORT_ADDR_0 = (my_mac & 0xFF); 
    141e:	80 93 60 01 	sts	0x0160, r24
	SHORT_ADDR_1 = (my_mac >> 8);
    1422:	90 93 61 01 	sts	0x0161, r25
	rfSettings.myAddr = my_mac;
    1426:	90 93 2d 05 	sts	0x052D, r25
    142a:	80 93 2c 05 	sts	0x052C, r24
    142e:	08 95       	ret

00001430 <rf_set_rx>:
}


void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
	rfSettings.pRxInfo = pRRI;
    1430:	90 93 27 05 	sts	0x0527, r25
    1434:	80 93 26 05 	sts	0x0526, r24
	PHY_CC_CCA &= ~(0x1F);
    1438:	e8 e4       	ldi	r30, 0x48	; 72
    143a:	f1 e0       	ldi	r31, 0x01	; 1
    143c:	80 81       	ld	r24, Z
    143e:	80 7e       	andi	r24, 0xE0	; 224
    1440:	80 83       	st	Z, r24
	PHY_CC_CCA |= (channel << CHANNEL0);
    1442:	80 81       	ld	r24, Z
    1444:	68 2b       	or	r22, r24
    1446:	60 83       	st	Z, r22
    1448:	08 95       	ret

0000144a <rx_start_callback>:
}

void rx_start_callback(void (*func)(void)){
	rx_start_func = func;
    144a:	90 93 a1 03 	sts	0x03A1, r25
    144e:	80 93 a0 03 	sts	0x03A0, r24
    1452:	08 95       	ret

00001454 <rx_end_callback>:
}

void rx_end_callback(void (*func)(void)){
	rx_end_func = func;
    1454:	90 93 9f 03 	sts	0x039F, r25
    1458:	80 93 9e 03 	sts	0x039E, r24
    145c:	08 95       	ret

0000145e <rf_init>:
}


void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr)
{ 
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29

*/


	/* Turn on auto crc calculation */
	TRX_CTRL_1 = (1 << TX_AUTO_CRC_ON);
    1464:	70 e2       	ldi	r23, 0x20	; 32
    1466:	70 93 44 01 	sts	0x0144, r23
	/* Set PA buffer lead time to 6 us and TX power to 3.0 dBm (maximum) */
	PHY_TX_PWR = (1 << PA_BUF_LT1) | (1 << PA_BUF_LT0) | (0 << TX_PWR0);
    146a:	70 ec       	ldi	r23, 0xC0	; 192
    146c:	70 93 45 01 	sts	0x0145, r23
	/* CCA Mode and Channel selection */
	PHY_CC_CCA = (0 << CCA_MODE1) | (1 << CCA_MODE0) | (channel << CHANNEL0);
    1470:	60 62       	ori	r22, 0x20	; 32
    1472:	60 93 48 01 	sts	0x0148, r22
	/* Set CCA energy threshold */
	CCA_THRES = 0xC5;
    1476:	65 ec       	ldi	r22, 0xC5	; 197
    1478:	60 93 49 01 	sts	0x0149, r22
	/* Start of frame delimiter */
	SFD_VALUE = 0xA7;
    147c:	67 ea       	ldi	r22, 0xA7	; 167
    147e:	60 93 4b 01 	sts	0x014B, r22
	/* Dynamic buffer protection on and data rate is 250 kb/s */
	TRX_CTRL_2 = (1 << RX_SAFE_MODE) | (0 << OQPSK_DATA_RATE1) | (0 << OQPSK_DATA_RATE0);
    1482:	60 e8       	ldi	r22, 0x80	; 128
    1484:	60 93 4c 01 	sts	0x014C, r22
	
	/* Set short MAC address */
	SHORT_ADDR_0 = (myAddr & 0xFF); SHORT_ADDR_1 = (myAddr >> 8);
    1488:	20 93 60 01 	sts	0x0160, r18
    148c:	30 93 61 01 	sts	0x0161, r19
	/* Set PAN ID */
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
    1490:	40 93 62 01 	sts	0x0162, r20
    1494:	50 93 63 01 	sts	0x0163, r21
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    1498:	e6 e4       	ldi	r30, 0x46	; 70
    149a:	f1 e0       	ldi	r31, 0x01	; 1
    149c:	c0 81       	ld	r28, Z
    149e:	a0 81       	ld	r26, Z
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    14a0:	60 81       	ld	r22, Z
    14a2:	10 81       	ld	r17, Z
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    14a4:	c2 95       	swap	r28
    14a6:	c6 95       	lsr	r28
    14a8:	c7 70       	andi	r28, 0x07	; 7
    14aa:	70 e4       	ldi	r23, 0x40	; 64
    14ac:	c7 9f       	mul	r28, r23
    14ae:	e0 01       	movw	r28, r0
    14b0:	11 24       	eor	r1, r1
    14b2:	12 95       	swap	r17
    14b4:	16 95       	lsr	r17
    14b6:	13 70       	andi	r17, 0x03	; 3
    14b8:	1c 2b       	or	r17, r28
    14ba:	a2 95       	swap	r26
    14bc:	a6 95       	lsr	r26
    14be:	a3 70       	andi	r26, 0x03	; 3
    14c0:	70 e1       	ldi	r23, 0x10	; 16
    14c2:	a7 9f       	mul	r26, r23
    14c4:	d0 01       	movw	r26, r0
    14c6:	11 24       	eor	r1, r1
    14c8:	1a 2b       	or	r17, r26
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
    14ca:	62 95       	swap	r22
    14cc:	66 95       	lsr	r22
    14ce:	63 70       	andi	r22, 0x03	; 3
    14d0:	a4 e0       	ldi	r26, 0x04	; 4
    14d2:	6a 9f       	mul	r22, r26
    14d4:	b0 01       	movw	r22, r0
    14d6:	11 24       	eor	r1, r1
	PAN_ID_0 = (panId & 0xFF); PAN_ID_1 = (panId >> 8);
	
	/* 2-bit random value generated by radio hardware */
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
    14d8:	16 2b       	or	r17, r22
    14da:	10 93 6d 01 	sts	0x016D, r17
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    14de:	60 81       	ld	r22, Z
    14e0:	70 81       	ld	r23, Z
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    14e2:	72 95       	swap	r23
    14e4:	76 95       	lsr	r23
    14e6:	73 70       	andi	r23, 0x03	; 3
    14e8:	70 64       	ori	r23, 0x40	; 64
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);
    14ea:	62 95       	swap	r22
    14ec:	66 70       	andi	r22, 0x06	; 6
	#define RADIO_RAND ((PHY_RSSI >> RND_VALUE0) & 0x3)
	/* Set random csma seed */
	CSMA_SEED_0 = (RADIO_RAND << 6) | (RADIO_RAND << 4) 
			| (RADIO_RAND << 2) | (RADIO_RAND << 0);
	/* Will ACK received frames with version numbers of 0 or 1 */
	CSMA_SEED_1 = (0 << AACK_FVN_MODE1) | (1 << AACK_FVN_MODE0) 
    14ee:	67 2b       	or	r22, r23
    14f0:	60 93 6e 01 	sts	0x016E, r22
			| (RADIO_RAND << CSMA_SEED_11) | (RADIO_RAND << CSMA_SEED_10);

	/* don't re-transmit frames or perform cca multiple times, slotted op is off */
	XAH_CTRL_0 = (0 << MAX_FRAME_RETRIES0) | (0 << MAX_CSMA_RETRIES0)
    14f4:	10 92 6c 01 	sts	0x016C, r1
			| (0 << SLOTTED_OPERATION);
	/* Enable radio interrupts */
	IRQ_MASK = (1 << AWAKE_EN) | (1 << TX_END_EN) | (1 << AMI_EN) | (1 << CCA_ED_DONE_EN)
    14f8:	6f ef       	ldi	r22, 0xFF	; 255
    14fa:	60 93 4e 01 	sts	0x014E, r22
			| (1 << RX_END_EN) | (1 << RX_START_EN) | (1 << PLL_UNLOCK_EN) | (1 << PLL_LOCK_EN);

	/* Initialize settings struct */
	rfSettings.pRxInfo = pRRI;
    14fe:	90 93 27 05 	sts	0x0527, r25
    1502:	80 93 26 05 	sts	0x0526, r24
	rfSettings.txSeqNumber = 0;
    1506:	10 92 28 05 	sts	0x0528, r1
	rfSettings.ackReceived = 0;
    150a:	10 92 29 05 	sts	0x0529, r1
	rfSettings.panId = panId;
    150e:	50 93 2b 05 	sts	0x052B, r21
    1512:	40 93 2a 05 	sts	0x052A, r20
	rfSettings.myAddr = myAddr;
    1516:	30 93 2d 05 	sts	0x052D, r19
    151a:	20 93 2c 05 	sts	0x052C, r18
	rfSettings.receiveOn = 0;
    151e:	10 92 2e 05 	sts	0x052E, r1

	rf_ready = 1;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	80 93 48 05 	sts	0x0548, r24
	rx_ready = 0;
    1528:	10 92 67 05 	sts	0x0567, r1
	tx_done = 0;
    152c:	10 92 37 05 	sts	0x0537, r1

	use_glossy = 0;
    1530:	10 92 23 05 	sts	0x0523, r1

} // rf_init() 
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	08 95       	ret

0000153c <rf_rx_on>:
	rf_cc2591_rx_on();
#endif
#ifdef GLOSSY_TESTING
	clear_packet_flags();
#endif
	rf_cmd(RX_AACK_ON);
    153c:	86 e1       	ldi	r24, 0x16	; 22
    153e:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <rf_cmd>

00001542 <rf_polling_rx_on>:

#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	rf_cmd(RX_AACK_ON);
    1542:	86 e1       	ldi	r24, 0x16	; 22
    1544:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <rf_cmd>

00001548 <rf_rx_off>:
#ifdef RADIO_PRIORITY_CEILING
  nrk_sem_post(radio_sem);
#endif
  //	DISABLE_FIFOP_INT();
*/
	rf_cmd(TRX_OFF);
    1548:	88 e0       	ldi	r24, 0x08	; 8
    154a:	0e 94 a2 09 	call	0x1344	; 0x1344 <rf_cmd>
	rx_ready = 0;
    154e:	10 92 67 05 	sts	0x0567, r1
    1552:	08 95       	ret

00001554 <rf_tx_packet_repeat>:
uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
}

uint8_t rf_tx_packet_repeat(RF_TX_INFO *pRTI, uint16_t ms)
{
    1554:	3f 92       	push	r3
    1556:	4f 92       	push	r4
    1558:	5f 92       	push	r5
    155a:	6f 92       	push	r6
    155c:	7f 92       	push	r7
    155e:	8f 92       	push	r8
    1560:	9f 92       	push	r9
    1562:	af 92       	push	r10
    1564:	bf 92       	push	r11
    1566:	cf 92       	push	r12
    1568:	df 92       	push	r13
    156a:	ef 92       	push	r14
    156c:	ff 92       	push	r15
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	ec 01       	movw	r28, r24
    1578:	3b 01       	movw	r6, r22
	*/

	uint8_t trx_status, trx_error, *data_start, *frame_start = &TRXFBST;
	uint16_t i;

	if(!rf_ready) 
    157a:	80 91 48 05 	lds	r24, 0x0548
    157e:	81 11       	cpse	r24, r1
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <rf_tx_packet_repeat+0x32>
		return NRK_ERROR;
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	0f c1       	rjmp	.+542    	; 0x17a4 <rf_tx_packet_repeat+0x250>

	/* TODO: Setting FCF bits is probably slow. Optimize later. */
	fcf.frame_type = 1;
	fcf.sec_en = 0;
	fcf.frame_pending = 0;
	fcf.ack_request = pRTI->ackRequest;
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
	fcf.dest_addr_mode = 2;
	fcf.frame_version = 0;
	fcf.src_addr_mode = 2;
	
	/* Build the rest of the MAC header */
	rfSettings.txSeqNumber++;
    1588:	80 91 28 05 	lds	r24, 0x0528
    158c:	8f 5f       	subi	r24, 0xFF	; 255
    158e:	80 93 28 05 	sts	0x0528, r24
	machead->fcf = fcf;
    1592:	80 91 81 01 	lds	r24, 0x0181
    1596:	80 7e       	andi	r24, 0xE0	; 224
    1598:	81 60       	ori	r24, 0x01	; 1
    159a:	90 fb       	bst	r25, 0
    159c:	85 f9       	bld	r24, 5
    159e:	8f 73       	andi	r24, 0x3F	; 63
    15a0:	80 64       	ori	r24, 0x40	; 64
    15a2:	80 93 81 01 	sts	0x0181, r24
    15a6:	88 e8       	ldi	r24, 0x88	; 136
    15a8:	80 93 82 01 	sts	0x0182, r24
	if (use_glossy) {
    15ac:	80 91 23 05 	lds	r24, 0x0523
    15b0:	88 23       	and	r24, r24
    15b2:	61 f0       	breq	.+24     	; 0x15cc <rf_tx_packet_repeat+0x78>
		machead->seq_num = 0xFF;
    15b4:	8f ef       	ldi	r24, 0xFF	; 255
    15b6:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = 0xAAAA;
    15ba:	8a ea       	ldi	r24, 0xAA	; 170
    15bc:	9a ea       	ldi	r25, 0xAA	; 170
    15be:	90 93 89 01 	sts	0x0189, r25
    15c2:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = 0xFFFF;
    15c6:	8f ef       	ldi	r24, 0xFF	; 255
    15c8:	9f ef       	ldi	r25, 0xFF	; 255
    15ca:	10 c0       	rjmp	.+32     	; 0x15ec <rf_tx_packet_repeat+0x98>
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	} else {
		machead->seq_num = rfSettings.txSeqNumber;
    15cc:	80 91 28 05 	lds	r24, 0x0528
    15d0:	80 93 83 01 	sts	0x0183, r24
		machead->src_addr = (SHORT_ADDR_1 << 8) | SHORT_ADDR_0;
    15d4:	20 91 61 01 	lds	r18, 0x0161
    15d8:	80 91 60 01 	lds	r24, 0x0160
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	92 2b       	or	r25, r18
    15e0:	90 93 89 01 	sts	0x0189, r25
    15e4:	80 93 88 01 	sts	0x0188, r24
		machead->dest_addr = pRTI->destAddr;
    15e8:	88 81       	ld	r24, Y
    15ea:	99 81       	ldd	r25, Y+1	; 0x01
    15ec:	90 93 87 01 	sts	0x0187, r25
    15f0:	80 93 86 01 	sts	0x0186, r24
		machead->dest_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
    15f4:	20 91 63 01 	lds	r18, 0x0163
    15f8:	80 91 62 01 	lds	r24, 0x0162
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	92 2b       	or	r25, r18
    1600:	90 93 85 01 	sts	0x0185, r25
    1604:	80 93 84 01 	sts	0x0184, r24
	}
	//machead->src_pan_id = (PAN_ID_1 << 8) | PAN_ID_0;
	
	/* Copy data payload into packet */
	data_start = frame_start + sizeof(ieee_mac_frame_header_t) + 1;
	memcpy(data_start, pRTI->pPayload, pRTI->length);
    1608:	4a 81       	ldd	r20, Y+2	; 0x02
    160a:	55 27       	eor	r21, r21
    160c:	47 fd       	sbrc	r20, 7
    160e:	50 95       	com	r21
    1610:	6b 81       	ldd	r22, Y+3	; 0x03
    1612:	7c 81       	ldd	r23, Y+4	; 0x04
    1614:	8a e8       	ldi	r24, 0x8A	; 138
    1616:	91 e0       	ldi	r25, 0x01	; 1
    1618:	0e 94 41 2c 	call	0x5882	; 0x5882 <memcpy>
	/* Set the size of the packet */
	*frame_start = sizeof(ieee_mac_frame_header_t) + pRTI->length + 2;
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	85 5f       	subi	r24, 0xF5	; 245
    1620:	80 93 80 01 	sts	0x0180, r24
	
	vprintf("packet length: %d bytes\r\n", *frame_start);

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    1624:	80 91 41 01 	lds	r24, 0x0141
    1628:	98 2f       	mov	r25, r24
    162a:	9f 71       	andi	r25, 0x1F	; 31
    162c:	39 2e       	mov	r3, r25
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS));
    162e:	8f 70       	andi	r24, 0x0F	; 15
    1630:	9f ef       	ldi	r25, 0xFF	; 255
    1632:	98 0f       	add	r25, r24
    1634:	92 30       	cpi	r25, 0x02	; 2
    1636:	b0 f3       	brcs	.-20     	; 0x1624 <rf_tx_packet_repeat+0xd0>
    1638:	9f e1       	ldi	r25, 0x1F	; 31
    163a:	39 16       	cp	r3, r25
    163c:	99 f3       	breq	.-26     	; 0x1624 <rf_tx_packet_repeat+0xd0>
	
	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    163e:	98 ef       	ldi	r25, 0xF8	; 248
    1640:	93 0d       	add	r25, r3
    1642:	92 30       	cpi	r25, 0x02	; 2
    1644:	18 f0       	brcs	.+6      	; 0x164c <rf_tx_packet_repeat+0xf8>
    1646:	86 30       	cpi	r24, 0x06	; 6
    1648:	09 f0       	breq	.+2      	; 0x164c <rf_tx_packet_repeat+0xf8>
    164a:	9b cf       	rjmp	.-202    	; 0x1582 <rf_tx_packet_repeat+0x2e>
			&& (trx_status != RX_AACK_ON) && (trx_status != PLL_ON)){
		return NRK_ERROR;
	}

	rf_cmd(RX_AACK_ON);
    164c:	86 e1       	ldi	r24, 0x16	; 22
    164e:	0e 94 a2 09 	call	0x1344	; 0x1344 <rf_cmd>

	/* Perform CCA if requested */
	if(pRTI->cca){
    1652:	8d 81       	ldd	r24, Y+5	; 0x05
    1654:	81 11       	cpse	r24, r1
    1656:	0a c0       	rjmp	.+20     	; 0x166c <rf_tx_packet_repeat+0x118>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
			return NRK_ERROR;
	}

	rf_cmd(PLL_ON);
    1658:	89 e0       	ldi	r24, 0x09	; 9
    165a:	0e 94 a2 09 	call	0x1344	; 0x1344 <rf_cmd>
	if(pRTI->ackRequest)
    165e:	8e 81       	ldd	r24, Y+6	; 0x06
    1660:	88 23       	and	r24, r24
    1662:	91 f0       	breq	.+36     	; 0x1688 <rf_tx_packet_repeat+0x134>
		rf_cmd(TX_ARET_ON);
    1664:	89 e1       	ldi	r24, 0x19	; 25
    1666:	0e 94 a2 09 	call	0x1344	; 0x1344 <rf_cmd>
    166a:	0e c0       	rjmp	.+28     	; 0x1688 <rf_tx_packet_repeat+0x134>

	rf_cmd(RX_AACK_ON);

	/* Perform CCA if requested */
	if(pRTI->cca){
		PHY_CC_CCA |= (1 << CCA_REQUEST);
    166c:	80 91 48 01 	lds	r24, 0x0148
    1670:	80 68       	ori	r24, 0x80	; 128
    1672:	80 93 48 01 	sts	0x0148, r24
		while(!(TRX_STATUS & (1 << CCA_DONE)))
    1676:	80 91 41 01 	lds	r24, 0x0141
    167a:	87 ff       	sbrs	r24, 7
    167c:	fc cf       	rjmp	.-8      	; 0x1676 <rf_tx_packet_repeat+0x122>
			continue;
		if(!(TRX_STATUS & (1 << CCA_STATUS)))
    167e:	80 91 41 01 	lds	r24, 0x0141
    1682:	86 ff       	sbrs	r24, 6
    1684:	7e cf       	rjmp	.-260    	; 0x1582 <rf_tx_packet_repeat+0x2e>
    1686:	e8 cf       	rjmp	.-48     	; 0x1658 <rf_tx_packet_repeat+0x104>

	rf_cmd(PLL_ON);
	if(pRTI->ackRequest)
		rf_cmd(TX_ARET_ON);
	
	if(ms != 0){
    1688:	61 14       	cp	r6, r1
    168a:	71 04       	cpc	r7, r1
    168c:	99 f1       	breq	.+102    	; 0x16f4 <rf_tx_packet_repeat+0x1a0>
		nrk_time_get(&curr_t);
    168e:	8f e2       	ldi	r24, 0x2F	; 47
    1690:	95 e0       	ldi	r25, 0x05	; 5
    1692:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <nrk_time_get>
		target_t.secs = curr_t.secs;
    1696:	80 91 2f 05 	lds	r24, 0x052F
    169a:	90 91 30 05 	lds	r25, 0x0530
    169e:	a0 91 31 05 	lds	r26, 0x0531
    16a2:	b0 91 32 05 	lds	r27, 0x0532
    16a6:	80 93 49 05 	sts	0x0549, r24
    16aa:	90 93 4a 05 	sts	0x054A, r25
    16ae:	a0 93 4b 05 	sts	0x054B, r26
    16b2:	b0 93 4c 05 	sts	0x054C, r27
		target_t.nano_secs = curr_t.nano_secs + (ms * NANOS_PER_MS);
    16b6:	d3 01       	movw	r26, r6
    16b8:	20 e4       	ldi	r18, 0x40	; 64
    16ba:	32 e4       	ldi	r19, 0x42	; 66
    16bc:	4f e0       	ldi	r20, 0x0F	; 15
    16be:	50 e0       	ldi	r21, 0x00	; 0
    16c0:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__muluhisi3>
    16c4:	00 91 33 05 	lds	r16, 0x0533
    16c8:	10 91 34 05 	lds	r17, 0x0534
    16cc:	20 91 35 05 	lds	r18, 0x0535
    16d0:	30 91 36 05 	lds	r19, 0x0536
    16d4:	60 0f       	add	r22, r16
    16d6:	71 1f       	adc	r23, r17
    16d8:	82 1f       	adc	r24, r18
    16da:	93 1f       	adc	r25, r19
    16dc:	60 93 4d 05 	sts	0x054D, r22
    16e0:	70 93 4e 05 	sts	0x054E, r23
    16e4:	80 93 4f 05 	sts	0x054F, r24
    16e8:	90 93 50 05 	sts	0x0550, r25
		nrk_time_compact_nanos(&target_t);
    16ec:	89 e4       	ldi	r24, 0x49	; 73
    16ee:	95 e0       	ldi	r25, 0x05	; 5
    16f0:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <nrk_time_compact_nanos>
	do{
#ifdef RADIO_CC2591
		rf_cc2591_tx_on();
#endif

		tx_done = 0;
    16f4:	10 92 37 05 	sts	0x0537, r1
		/* Send the packet. 0x2 is equivalent to TX_START */
		rf_cmd(0x2);
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	0e 94 a2 09 	call	0x1344	; 0x1344 <rf_cmd>

		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
    16fe:	41 2c       	mov	r4, r1
    1700:	51 2c       	mov	r5, r1
    1702:	80 91 37 05 	lds	r24, 0x0537
    1706:	81 11       	cpse	r24, r1
    1708:	08 c0       	rjmp	.+16     	; 0x171a <rf_tx_packet_repeat+0x1c6>
    170a:	8f ef       	ldi	r24, 0xFF	; 255
    170c:	48 1a       	sub	r4, r24
    170e:	58 0a       	sbc	r5, r24
    1710:	98 ee       	ldi	r25, 0xE8	; 232
    1712:	49 16       	cp	r4, r25
    1714:	9d ef       	ldi	r25, 0xFD	; 253
    1716:	59 06       	cpc	r5, r25
    1718:	a1 f7       	brne	.-24     	; 0x1702 <rf_tx_packet_repeat+0x1ae>
			continue;
		if(ms == 0)
    171a:	61 14       	cp	r6, r1
    171c:	71 04       	cpc	r7, r1
    171e:	21 f4       	brne	.+8      	; 0x1728 <rf_tx_packet_repeat+0x1d4>
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    1720:	8e 81       	ldd	r24, Y+6	; 0x06
    1722:	81 11       	cpse	r24, r1
    1724:	2d c0       	rjmp	.+90     	; 0x1780 <rf_tx_packet_repeat+0x22c>
    1726:	34 c0       	rjmp	.+104    	; 0x1790 <rf_tx_packet_repeat+0x23c>
		/* Return an error if no ACK received */
		for(i=0; (i<65000) && !tx_done; i++)
			continue;
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
    1728:	8f e2       	ldi	r24, 0x2F	; 47
    172a:	95 e0       	ldi	r25, 0x05	; 5
    172c:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <nrk_time_get>
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);
    1730:	80 90 2f 05 	lds	r8, 0x052F
    1734:	90 90 30 05 	lds	r9, 0x0530
    1738:	a0 90 31 05 	lds	r10, 0x0531
    173c:	b0 90 32 05 	lds	r11, 0x0532
    1740:	c0 90 33 05 	lds	r12, 0x0533
    1744:	d0 90 34 05 	lds	r13, 0x0534
    1748:	e0 90 35 05 	lds	r14, 0x0535
    174c:	f0 90 36 05 	lds	r15, 0x0536
    1750:	00 91 49 05 	lds	r16, 0x0549
    1754:	10 91 4a 05 	lds	r17, 0x054A
    1758:	20 91 4b 05 	lds	r18, 0x054B
    175c:	30 91 4c 05 	lds	r19, 0x054C
    1760:	40 91 4d 05 	lds	r20, 0x054D
    1764:	50 91 4e 05 	lds	r21, 0x054E
    1768:	60 91 4f 05 	lds	r22, 0x054F
    176c:	70 91 50 05 	lds	r23, 0x0550
    1770:	88 e6       	ldi	r24, 0x68	; 104
    1772:	95 e0       	ldi	r25, 0x05	; 5
    1774:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <nrk_time_sub>
    1778:	8f 3f       	cpi	r24, 0xFF	; 255
    177a:	09 f0       	breq	.+2      	; 0x177e <rf_tx_packet_repeat+0x22a>
    177c:	bb cf       	rjmp	.-138    	; 0x16f4 <rf_tx_packet_repeat+0x1a0>
    177e:	d0 cf       	rjmp	.-96     	; 0x1720 <rf_tx_packet_repeat+0x1cc>

	trx_error = ((pRTI->ackRequest && 
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
    1780:	80 91 42 01 	lds	r24, 0x0142
    1784:	82 95       	swap	r24
    1786:	86 95       	lsr	r24
    1788:	87 70       	andi	r24, 0x07	; 7
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    178a:	11 f0       	breq	.+4      	; 0x1790 <rf_tx_packet_repeat+0x23c>
    178c:	cf ef       	ldi	r28, 0xFF	; 255
    178e:	06 c0       	rjmp	.+12     	; 0x179c <rf_tx_packet_repeat+0x248>
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
    1790:	88 ee       	ldi	r24, 0xE8	; 232
    1792:	48 16       	cp	r4, r24
    1794:	8d ef       	ldi	r24, 0xFD	; 253
    1796:	58 06       	cpc	r5, r24
    1798:	c9 f3       	breq	.-14     	; 0x178c <rf_tx_packet_repeat+0x238>
		if(ms == 0)
			break;
		nrk_time_get(&curr_t);
	}while(nrk_time_sub(&dummy_t, target_t, curr_t) != NRK_ERROR);

	trx_error = ((pRTI->ackRequest && 
    179a:	c1 e0       	ldi	r28, 0x01	; 1
			(((TRX_STATE >> TRAC_STATUS0) & 0x7) != 0))
			|| (i == 65000)) ? NRK_ERROR : NRK_OK;
	rf_cmd(trx_status);
    179c:	83 2d       	mov	r24, r3
    179e:	0e 94 a2 09 	call	0x1344	; 0x1344 <rf_cmd>

#ifdef RADIO_CC2591
	if (trx_error == NRK_ERROR) rf_cc2591_rx_on();
#endif

	return trx_error;
    17a2:	8c 2f       	mov	r24, r28
}
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	df 90       	pop	r13
    17b2:	cf 90       	pop	r12
    17b4:	bf 90       	pop	r11
    17b6:	af 90       	pop	r10
    17b8:	9f 90       	pop	r9
    17ba:	8f 90       	pop	r8
    17bc:	7f 90       	pop	r7
    17be:	6f 90       	pop	r6
    17c0:	5f 90       	pop	r5
    17c2:	4f 90       	pop	r4
    17c4:	3f 90       	pop	r3
    17c6:	08 95       	ret

000017c8 <rf_tx_packet>:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------

uint8_t rf_tx_packet(RF_TX_INFO *pRTI){
	return rf_tx_packet_repeat(pRTI, 0);
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <rf_tx_packet_repeat>

000017d0 <rf_cca_check>:

/* Returns 1 if the channel is clear
 * Returns 0 if the channel is being used
 */
int8_t rf_cca_check()
{
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
	uint8_t trx_status, cca_value;

	if(!rf_ready)
    17d4:	80 91 48 05 	lds	r24, 0x0548
    17d8:	88 23       	and	r24, r24
    17da:	21 f1       	breq	.+72     	; 0x1824 <rf_cca_check+0x54>
		return NRK_ERROR;

	/* Wait for radio to be in a ready state */
	do{
		trx_status = (TRX_STATUS & 0x1F);
    17dc:	80 91 41 01 	lds	r24, 0x0141
    17e0:	c8 2f       	mov	r28, r24
    17e2:	cf 71       	andi	r28, 0x1F	; 31
	}while((trx_status == BUSY_TX) || (trx_status == BUSY_RX)
			|| (trx_status == BUSY_RX_AACK) || (trx_status == BUSY_TX_ARET)
			|| (trx_status == STATE_TRANSITION_IN_PROGRESS)); 
    17e4:	8f 70       	andi	r24, 0x0F	; 15
    17e6:	9f ef       	ldi	r25, 0xFF	; 255
    17e8:	98 0f       	add	r25, r24
    17ea:	92 30       	cpi	r25, 0x02	; 2
    17ec:	b8 f3       	brcs	.-18     	; 0x17dc <rf_cca_check+0xc>
    17ee:	cf 31       	cpi	r28, 0x1F	; 31
    17f0:	a9 f3       	breq	.-22     	; 0x17dc <rf_cca_check+0xc>

	/* Return error if radio not in a tx-ready state */
	if((trx_status != TRX_OFF) && (trx_status != RX_ON) 
    17f2:	c8 30       	cpi	r28, 0x08	; 8
    17f4:	11 f0       	breq	.+4      	; 0x17fa <rf_cca_check+0x2a>
    17f6:	86 30       	cpi	r24, 0x06	; 6
    17f8:	a9 f4       	brne	.+42     	; 0x1824 <rf_cca_check+0x54>
			&& (trx_status != RX_AACK_ON))
		return NRK_ERROR;
	
	rf_cmd(RX_AACK_ON);
    17fa:	86 e1       	ldi	r24, 0x16	; 22
    17fc:	0e 94 a2 09 	call	0x1344	; 0x1344 <rf_cmd>

	PHY_CC_CCA |= (1 << CCA_REQUEST);
    1800:	80 91 48 01 	lds	r24, 0x0148
    1804:	80 68       	ori	r24, 0x80	; 128
    1806:	80 93 48 01 	sts	0x0148, r24
	while(!(TRX_STATUS & (1 << CCA_DONE)))
    180a:	80 91 41 01 	lds	r24, 0x0141
    180e:	87 ff       	sbrs	r24, 7
    1810:	fc cf       	rjmp	.-8      	; 0x180a <rf_cca_check+0x3a>
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    1812:	d0 91 41 01 	lds	r29, 0x0141
	rf_cmd(trx_status);
    1816:	8c 2f       	mov	r24, r28
    1818:	0e 94 a2 09 	call	0x1344	; 0x1344 <rf_cmd>
	rf_cmd(RX_AACK_ON);

	PHY_CC_CCA |= (1 << CCA_REQUEST);
	while(!(TRX_STATUS & (1 << CCA_DONE)))
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
    181c:	d6 fb       	bst	r29, 6
    181e:	88 27       	eor	r24, r24
    1820:	80 f9       	bld	r24, 0
	rf_cmd(trx_status);

	return cca_value;
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <rf_cca_check+0x56>
int8_t rf_cca_check()
{
	uint8_t trx_status, cca_value;

	if(!rf_ready)
		return NRK_ERROR;
    1824:	8f ef       	ldi	r24, 0xFF	; 255
		continue;
	cca_value = (TRX_STATUS & (1 << CCA_STATUS)) ? 1 : 0;
	rf_cmd(trx_status);

	return cca_value;
}
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <rf_rx_packet_nonblock>:
	#endif
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
    182c:	80 91 48 05 	lds	r24, 0x0548
    1830:	88 23       	and	r24, r24
    1832:	09 f4       	brne	.+2      	; 0x1836 <rf_rx_packet_nonblock+0xa>
    1834:	9f c0       	rjmp	.+318    	; 0x1974 <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;

	if(!rx_ready)
    1836:	80 91 67 05 	lds	r24, 0x0567
    183a:	88 23       	and	r24, r24
    183c:	09 f4       	brne	.+2      	; 0x1840 <rf_rx_packet_nonblock+0x14>
    183e:	98 c0       	rjmp	.+304    	; 0x1970 <rf_rx_packet_nonblock+0x144>
		return 0;
	else if((TST_RX_LENGTH - 2) > rfSettings.pRxInfo->max_length)
    1840:	80 91 7b 01 	lds	r24, 0x017B
    1844:	e0 91 26 05 	lds	r30, 0x0526
    1848:	f0 91 27 05 	lds	r31, 0x0527
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 97       	sbiw	r24, 0x02	; 2
    1850:	24 81       	ldd	r18, Z+4	; 0x04
    1852:	33 27       	eor	r19, r19
    1854:	27 fd       	sbrc	r18, 7
    1856:	30 95       	com	r19
    1858:	28 17       	cp	r18, r24
    185a:	39 07       	cpc	r19, r25
    185c:	0c f4       	brge	.+2      	; 0x1860 <rf_rx_packet_nonblock+0x34>
    185e:	8a c0       	rjmp	.+276    	; 0x1974 <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;

	ieee_mac_frame_header_t *machead = frame_start;

	rfSettings.pRxInfo->seqNumber = machead->seq_num;
    1860:	e0 91 26 05 	lds	r30, 0x0526
    1864:	f0 91 27 05 	lds	r31, 0x0527
    1868:	80 91 82 01 	lds	r24, 0x0182
    186c:	80 83       	st	Z, r24
	rfSettings.pRxInfo->srcAddr = machead->src_addr;
    186e:	e0 91 26 05 	lds	r30, 0x0526
    1872:	f0 91 27 05 	lds	r31, 0x0527
    1876:	80 91 87 01 	lds	r24, 0x0187
    187a:	90 91 88 01 	lds	r25, 0x0188
    187e:	92 83       	std	Z+2, r25	; 0x02
    1880:	81 83       	std	Z+1, r24	; 0x01
	rfSettings.pRxInfo->length = TST_RX_LENGTH - sizeof(ieee_mac_frame_header_t) - 2;
    1882:	e0 91 26 05 	lds	r30, 0x0526
    1886:	f0 91 27 05 	lds	r31, 0x0527
    188a:	80 91 7b 01 	lds	r24, 0x017B
    188e:	8b 50       	subi	r24, 0x0B	; 11
    1890:	83 83       	std	Z+3, r24	; 0x03

	if((rfSettings.pRxInfo->length > rfSettings.pRxInfo->max_length)
    1892:	a0 91 26 05 	lds	r26, 0x0526
    1896:	b0 91 27 05 	lds	r27, 0x0527
    189a:	e0 91 26 05 	lds	r30, 0x0526
    189e:	f0 91 27 05 	lds	r31, 0x0527
    18a2:	13 96       	adiw	r26, 0x03	; 3
    18a4:	9c 91       	ld	r25, X
    18a6:	84 81       	ldd	r24, Z+4	; 0x04
    18a8:	89 17       	cp	r24, r25
    18aa:	3c f0       	brlt	.+14     	; 0x18ba <rf_rx_packet_nonblock+0x8e>
			|| (rfSettings.pRxInfo->length < 0)){
    18ac:	e0 91 26 05 	lds	r30, 0x0526
    18b0:	f0 91 27 05 	lds	r31, 0x0527
    18b4:	83 81       	ldd	r24, Z+3	; 0x03
    18b6:	87 ff       	sbrs	r24, 7
    18b8:	0d c0       	rjmp	.+26     	; 0x18d4 <rf_rx_packet_nonblock+0xa8>
		rx_ready = 0;
    18ba:	10 92 67 05 	sts	0x0567, r1
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    18be:	80 91 4c 01 	lds	r24, 0x014C
    18c2:	8f 77       	andi	r24, 0x7F	; 127
    18c4:	80 93 4c 01 	sts	0x014C, r24
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    18c8:	80 91 4c 01 	lds	r24, 0x014C
    18cc:	80 68       	ori	r24, 0x80	; 128
    18ce:	80 93 4c 01 	sts	0x014C, r24
    18d2:	50 c0       	rjmp	.+160    	; 0x1974 <rf_rx_packet_nonblock+0x148>
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
    18d4:	a0 91 26 05 	lds	r26, 0x0526
    18d8:	b0 91 27 05 	lds	r27, 0x0527
		TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
		TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
		return NRK_ERROR;
	}

	memcpy(rfSettings.pRxInfo->pPayload, frame_start 
    18dc:	e0 91 26 05 	lds	r30, 0x0526
    18e0:	f0 91 27 05 	lds	r31, 0x0527
    18e4:	13 96       	adiw	r26, 0x03	; 3
    18e6:	4c 91       	ld	r20, X
    18e8:	55 27       	eor	r21, r21
    18ea:	47 fd       	sbrc	r20, 7
    18ec:	50 95       	com	r21
    18ee:	69 e8       	ldi	r22, 0x89	; 137
    18f0:	71 e0       	ldi	r23, 0x01	; 1
    18f2:	85 81       	ldd	r24, Z+5	; 0x05
    18f4:	96 81       	ldd	r25, Z+6	; 0x06
    18f6:	0e 94 41 2c 	call	0x5882	; 0x5882 <memcpy>
			+ sizeof(ieee_mac_frame_header_t), rfSettings.pRxInfo->length);
	
	/* I am assuming that ackRequest is supposed to
	 * be set, not read, by rf_basic */
	rfSettings.pRxInfo->ackRequest = machead->fcf.ack_request;
    18fa:	e0 91 26 05 	lds	r30, 0x0526
    18fe:	f0 91 27 05 	lds	r31, 0x0527
    1902:	80 91 80 01 	lds	r24, 0x0180
    1906:	85 fb       	bst	r24, 5
    1908:	88 27       	eor	r24, r24
    190a:	80 f9       	bld	r24, 0
    190c:	87 83       	std	Z+7, r24	; 0x07
	//rfSettings.pRxInfo->rssi = *(frame_start + TST_RX_LENGTH);
	rfSettings.pRxInfo->rssi = PHY_ED_LEVEL;
    190e:	e0 91 26 05 	lds	r30, 0x0526
    1912:	f0 91 27 05 	lds	r31, 0x0527
    1916:	80 91 47 01 	lds	r24, 0x0147
    191a:	80 87       	std	Z+8, r24	; 0x08
	rfSettings.pRxInfo->actualRssi = PHY_RSSI >> 3;
    191c:	e0 91 26 05 	lds	r30, 0x0526
    1920:	f0 91 27 05 	lds	r31, 0x0527
    1924:	80 91 46 01 	lds	r24, 0x0146
    1928:	86 95       	lsr	r24
    192a:	86 95       	lsr	r24
    192c:	86 95       	lsr	r24
    192e:	81 87       	std	Z+9, r24	; 0x09
	rfSettings.pRxInfo->energyDetectionLevel = PHY_ED_LEVEL;
    1930:	e0 91 26 05 	lds	r30, 0x0526
    1934:	f0 91 27 05 	lds	r31, 0x0527
    1938:	80 91 47 01 	lds	r24, 0x0147
    193c:	82 87       	std	Z+10, r24	; 0x0a
	rfSettings.pRxInfo->linkQualityIndication = *(frame_start + TST_RX_LENGTH);
    193e:	e0 91 26 05 	lds	r30, 0x0526
    1942:	f0 91 27 05 	lds	r31, 0x0527
    1946:	a0 91 7b 01 	lds	r26, 0x017B
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	a0 58       	subi	r26, 0x80	; 128
    194e:	be 4f       	sbci	r27, 0xFE	; 254
    1950:	8c 91       	ld	r24, X
    1952:	83 87       	std	Z+11, r24	; 0x0b

	/* Reset frame buffer protection */
	rx_ready = 0;
    1954:	10 92 67 05 	sts	0x0567, r1
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
    1958:	80 91 4c 01 	lds	r24, 0x014C
    195c:	8f 77       	andi	r24, 0x7F	; 127
    195e:	80 93 4c 01 	sts	0x014C, r24
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);
    1962:	80 91 4c 01 	lds	r24, 0x014C
    1966:	80 68       	ori	r24, 0x80	; 128
    1968:	80 93 4c 01 	sts	0x014C, r24

	return NRK_OK;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	08 95       	ret

	if(!rf_ready)
		return NRK_ERROR;

	if(!rx_ready)
		return 0;
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	08 95       	ret
	*/
	
	uint8_t *frame_start = &TRXFBST;

	if(!rf_ready)
		return NRK_ERROR;
    1974:	8f ef       	ldi	r24, 0xFF	; 255
	rx_ready = 0;
	TRX_CTRL_2 &= ~(1 << RX_SAFE_MODE);
	TRX_CTRL_2 |= (1 << RX_SAFE_MODE);

	return NRK_OK;
}
    1976:	08 95       	ret

00001978 <__vector_64>:

/* These interrupt handlers are useful for finding
 * out the exact order of events during a transmission */

SIGNAL(TRX24_AWAKE_vect)
{
    1978:	1f 92       	push	r1
    197a:	0f 92       	push	r0
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	0f 92       	push	r0
    1980:	11 24       	eor	r1, r1
    1982:	8f 93       	push	r24
	vprintf("RADIO AWAKE IRQ!\r\n");
	IRQ_STATUS = (1 << AWAKE);
    1984:	80 e8       	ldi	r24, 0x80	; 128
    1986:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    198a:	8f 91       	pop	r24
    198c:	0f 90       	pop	r0
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	0f 90       	pop	r0
    1992:	1f 90       	pop	r1
    1994:	18 95       	reti

00001996 <__vector_63>:

SIGNAL(TRX24_TX_END_vect)
{
    1996:	1f 92       	push	r1
    1998:	0f 92       	push	r0
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	0f 92       	push	r0
    199e:	11 24       	eor	r1, r1
    19a0:	8f 93       	push	r24
	vprintf("TX_END IRQ!\r\n");
	tx_done = 1;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	80 93 37 05 	sts	0x0537, r24
	IRQ_STATUS = (1 << TX_END);
    19a8:	80 e4       	ldi	r24, 0x40	; 64
    19aa:	80 93 4f 01 	sts	0x014F, r24
#ifdef RADIO_CC2591
	rf_cc2591_rx_on();
#endif

	return;
}
    19ae:	8f 91       	pop	r24
    19b0:	0f 90       	pop	r0
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	0f 90       	pop	r0
    19b6:	1f 90       	pop	r1
    19b8:	18 95       	reti

000019ba <__vector_62>:

SIGNAL(TRX24_XAH_AMI_vect)
{
    19ba:	1f 92       	push	r1
    19bc:	0f 92       	push	r0
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	0f 92       	push	r0
    19c2:	11 24       	eor	r1, r1
    19c4:	8f 93       	push	r24
	vprintf("AMI IRQ!\r\n");
	IRQ_STATUS = (1 << AMI);
    19c6:	80 e2       	ldi	r24, 0x20	; 32
    19c8:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    19cc:	8f 91       	pop	r24
    19ce:	0f 90       	pop	r0
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	0f 90       	pop	r0
    19d4:	1f 90       	pop	r1
    19d6:	18 95       	reti

000019d8 <__vector_61>:

SIGNAL(TRX24_CCA_ED_DONE_vect)
{
    19d8:	1f 92       	push	r1
    19da:	0f 92       	push	r0
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	0f 92       	push	r0
    19e0:	11 24       	eor	r1, r1
    19e2:	8f 93       	push	r24
	vprintf("CCA_ED_DONE IRQ!\r\n");
	IRQ_STATUS = (1 << CCA_ED_DONE);
    19e4:	80 e1       	ldi	r24, 0x10	; 16
    19e6:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    19ea:	8f 91       	pop	r24
    19ec:	0f 90       	pop	r0
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	0f 90       	pop	r0
    19f2:	1f 90       	pop	r1
    19f4:	18 95       	reti

000019f6 <__vector_59>:

SIGNAL(TRX24_RX_START_vect)
{
    19f6:	1f 92       	push	r1
    19f8:	0f 92       	push	r0
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	0f 92       	push	r0
    19fe:	11 24       	eor	r1, r1
    1a00:	0b b6       	in	r0, 0x3b	; 59
    1a02:	0f 92       	push	r0
    1a04:	2f 93       	push	r18
    1a06:	3f 93       	push	r19
    1a08:	4f 93       	push	r20
    1a0a:	5f 93       	push	r21
    1a0c:	6f 93       	push	r22
    1a0e:	7f 93       	push	r23
    1a10:	8f 93       	push	r24
    1a12:	9f 93       	push	r25
    1a14:	af 93       	push	r26
    1a16:	bf 93       	push	r27
    1a18:	ef 93       	push	r30
    1a1a:	ff 93       	push	r31
	vprintf("RX_START IRQ!\r\n");
	IRQ_STATUS = (1 << RX_START);
    1a1c:	84 e0       	ldi	r24, 0x04	; 4
    1a1e:	80 93 4f 01 	sts	0x014F, r24

	if(rx_start_func)
    1a22:	e0 91 a0 03 	lds	r30, 0x03A0
    1a26:	f0 91 a1 03 	lds	r31, 0x03A1
    1a2a:	30 97       	sbiw	r30, 0x00	; 0
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <__vector_59+0x3a>
		rx_start_func();
    1a2e:	09 95       	icall

	return;
}
    1a30:	ff 91       	pop	r31
    1a32:	ef 91       	pop	r30
    1a34:	bf 91       	pop	r27
    1a36:	af 91       	pop	r26
    1a38:	9f 91       	pop	r25
    1a3a:	8f 91       	pop	r24
    1a3c:	7f 91       	pop	r23
    1a3e:	6f 91       	pop	r22
    1a40:	5f 91       	pop	r21
    1a42:	4f 91       	pop	r20
    1a44:	3f 91       	pop	r19
    1a46:	2f 91       	pop	r18
    1a48:	0f 90       	pop	r0
    1a4a:	0b be       	out	0x3b, r0	; 59
    1a4c:	0f 90       	pop	r0
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	0f 90       	pop	r0
    1a52:	1f 90       	pop	r1
    1a54:	18 95       	reti

00001a56 <__vector_58>:

SIGNAL(TRX24_PLL_UNLOCK_vect)
{
    1a56:	1f 92       	push	r1
    1a58:	0f 92       	push	r0
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	0f 92       	push	r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	8f 93       	push	r24
	vprintf("PLL_UNLOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_UNLOCK);
    1a62:	82 e0       	ldi	r24, 0x02	; 2
    1a64:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1a68:	8f 91       	pop	r24
    1a6a:	0f 90       	pop	r0
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	0f 90       	pop	r0
    1a70:	1f 90       	pop	r1
    1a72:	18 95       	reti

00001a74 <__vector_57>:

SIGNAL(TRX24_PLL_LOCK_vect)
{
    1a74:	1f 92       	push	r1
    1a76:	0f 92       	push	r0
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	0f 92       	push	r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	8f 93       	push	r24
	vprintf("PLL_LOCK IRQ!\r\n");
	IRQ_STATUS = (1 << PLL_LOCK);
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	80 93 4f 01 	sts	0x014F, r24

	return;
}
    1a86:	8f 91       	pop	r24
    1a88:	0f 90       	pop	r0
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	0f 90       	pop	r0
    1a8e:	1f 90       	pop	r1
    1a90:	18 95       	reti

00001a92 <rf_set_cca_thresh>:



void rf_set_cca_thresh(int8_t t)
{
	CCA_THRES &= 0xF0;
    1a92:	e9 e4       	ldi	r30, 0x49	; 73
    1a94:	f1 e0       	ldi	r31, 0x01	; 1
    1a96:	90 81       	ld	r25, Z
    1a98:	90 7f       	andi	r25, 0xF0	; 240
    1a9a:	90 83       	st	Z, r25
	CCA_THRES |= (t & 0xF);
    1a9c:	90 81       	ld	r25, Z
    1a9e:	8f 70       	andi	r24, 0x0F	; 15
    1aa0:	89 2b       	or	r24, r25
    1aa2:	80 83       	st	Z, r24
    1aa4:	08 95       	ret

00001aa6 <rf_security_last_pkt_status>:
// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
	//return last_pkt_encrypted;
	return NRK_ERROR;
}
    1aa6:	8f ef       	ldi	r24, 0xFF	; 255
    1aa8:	08 95       	ret

00001aaa <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    1aaa:	08 95       	ret

00001aac <rf_security_set_key>:
	return;
}


void rf_security_set_key(uint8_t *key)
{
    1aac:	08 95       	ret

00001aae <rf_security_disable>:
}



void rf_security_disable()
{
    1aae:	08 95       	ret

00001ab0 <rf_tx_tdma_packet>:


uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
//    return success;
	return NRK_ERROR;
}
    1ab0:	8f ef       	ldi	r24, 0xFF	; 255
    1ab2:	08 95       	ret

00001ab4 <rf_get_sem>:


nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    1ab4:	80 91 21 05 	lds	r24, 0x0521
    1ab8:	90 91 22 05 	lds	r25, 0x0522
    1abc:	08 95       	ret

00001abe <rf_rx_packet>:
	/*
	int8_t tmp;
	if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
	*/
	return 0;
}
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	08 95       	ret

00001ac2 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
    1ac2:	08 95       	ret

00001ac4 <rf_busy>:

uint8_t rf_busy()
{
//return SFD_IS_1;
return 1;
}
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	08 95       	ret

00001ac8 <rf_rx_check_fifop>:
/* Implement */
uint8_t rf_rx_check_fifop()
{
//return FIFOP_IS_1;
return 1;
}
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	08 95       	ret

00001acc <rf_rx_check_sfd>:

uint8_t rf_rx_check_sfd()
{
//return SFD_IS_1;
return 1;
}
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	08 95       	ret

00001ad0 <rf_carrier_on>:
/**********************************************************
 * start sending a carrier pulse
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
    1ad0:	08 95       	ret

00001ad2 <rf_carrier_off>:

/**********************************************************
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
    1ad2:	08 95       	ret

00001ad4 <rf_test_mode>:
}



void rf_test_mode()
{
    1ad4:	08 95       	ret

00001ad6 <rf_data_mode>:


/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode()
{
    1ad6:	08 95       	ret

00001ad8 <rf_rx_set_serial>:
 * RX data is received through sampling the FIFO pin, timing is done using FIFOP 
 * Use rf_rx_on() to start rcv, then wait for SFD / FIFOP. Sample during each high edge of FIFOP
 * This can be undone by using rf_data_mode()
 */
void rf_rx_set_serial()
{
    1ad8:	08 95       	ret

00001ada <rf_tx_set_serial>:
 * to go up and down, then set next bit etc.
 * NOTE: You must set the FIFO pin to output mode in order to do this!
 * This can be undone by calling rf_data_mode()
 */
void rf_tx_set_serial()
{
    1ada:	08 95       	ret

00001adc <rf_set_preamble_length>:
 * arg is equal to number of bytes - 1.
 * (3 bytes is 802.15.4 compliant, so length arg would be 2)
 * Length arg supports values 0 to 15. See the datasheet of course for more details
 */
void rf_set_preamble_length(uint8_t length)
{
    1adc:	08 95       	ret

00001ade <rf_set_cca_mode>:
}


void rf_set_cca_mode(uint8_t mode)
{
    1ade:	08 95       	ret

00001ae0 <rf_cc2591_tx_on>:
}


void rf_cc2591_tx_on()
{
	DPDS1	|= 0x3; 
    1ae0:	e7 e3       	ldi	r30, 0x37	; 55
    1ae2:	f1 e0       	ldi	r31, 0x01	; 1
    1ae4:	80 81       	ld	r24, Z
    1ae6:	83 60       	ori	r24, 0x03	; 3
    1ae8:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    1aea:	98 9a       	sbi	0x13, 0	; 19
	PORTG	|= 0x1;
    1aec:	a0 9a       	sbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    1aee:	8d b1       	in	r24, 0x0d	; 13
    1af0:	80 6e       	ori	r24, 0xE0	; 224
    1af2:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    1af4:	8e b1       	in	r24, 0x0e	; 14
    1af6:	80 6e       	ori	r24, 0xE0	; 224
    1af8:	8e b9       	out	0x0e, r24	; 14
    1afa:	08 95       	ret

00001afc <rf_cc2591_rx_on>:
    //nrk_spin_wait_us(12);
}

void rf_cc2591_rx_on()
{
	DPDS1	|= 0x3; 
    1afc:	e7 e3       	ldi	r30, 0x37	; 55
    1afe:	f1 e0       	ldi	r31, 0x01	; 1
    1b00:	80 81       	ld	r24, Z
    1b02:	83 60       	ori	r24, 0x03	; 3
    1b04:	80 83       	st	Z, r24
	DDRG	|= 0x1;
    1b06:	98 9a       	sbi	0x13, 0	; 19
	PORTG	&= ~(0x1);
    1b08:	a0 98       	cbi	0x14, 0	; 20
	DDRE	|= 0xE0;
    1b0a:	8d b1       	in	r24, 0x0d	; 13
    1b0c:	80 6e       	ori	r24, 0xE0	; 224
    1b0e:	8d b9       	out	0x0d, r24	; 13
	PORTE	|= 0xE0;
    1b10:	8e b1       	in	r24, 0x0e	; 14
    1b12:	80 6e       	ori	r24, 0xE0	; 224
    1b14:	8e b9       	out	0x0e, r24	; 14
    1b16:	08 95       	ret

00001b18 <rf_glossy_interrupt>:
	curr_count = 0;
}
#endif

void rf_glossy_interrupt()
{
    1b18:	cf 92       	push	r12
    1b1a:	df 92       	push	r13
    1b1c:	ef 92       	push	r14
    1b1e:	ff 92       	push	r15
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	27 97       	sbiw	r28, 0x07	; 7
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
	nrk_int_disable();
    1b38:	0e 94 47 13 	call	0x268e	; 0x268e <nrk_int_disable>

	RF_RX_INFO rfRxInfo = *(rfSettings.pRxInfo);
    1b3c:	e0 91 26 05 	lds	r30, 0x0526
    1b40:	f0 91 27 05 	lds	r31, 0x0527
    1b44:	c0 80       	ld	r12, Z
    1b46:	d3 80       	ldd	r13, Z+3	; 0x03
    1b48:	05 81       	ldd	r16, Z+5	; 0x05
    1b4a:	16 81       	ldd	r17, Z+6	; 0x06
    1b4c:	e0 84       	ldd	r14, Z+8	; 0x08
	RF_TX_INFO rfTxInfo;

	/* Grab packet */
	int err = rf_rx_packet_nonblock();
    1b4e:	0e 94 16 0c 	call	0x182c	; 0x182c <rf_rx_packet_nonblock>
	if (err < 1) {
    1b52:	18 16       	cp	r1, r24
    1b54:	1c f0       	brlt	.+6      	; 0x1b5c <rf_glossy_interrupt+0x44>
		printf("rf_rx_packet_nonblock failed]\r\n");
    1b56:	87 ed       	ldi	r24, 0xD7	; 215
    1b58:	92 e0       	ldi	r25, 0x02	; 2
    1b5a:	06 c0       	rjmp	.+12     	; 0x1b68 <rf_glossy_interrupt+0x50>
		nrk_int_enable();
		return;
	}

	/* TTL should be the first byte of the payload */
	uint8_t ttl = rfRxInfo.pPayload[0];
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	f0 80       	ld	r15, Z
	if (ttl == 0) {
    1b60:	f1 10       	cpse	r15, r1
    1b62:	07 c0       	rjmp	.+14     	; 0x1b72 <rf_glossy_interrupt+0x5a>
#ifndef GLOSSY_TESTING
		printf("Packet is done bouncing around!\r\n\n");
    1b64:	86 ef       	ldi	r24, 0xF6	; 246
    1b66:	92 e0       	ldi	r25, 0x02	; 2
    1b68:	0e 94 df 2c 	call	0x59be	; 0x59be <puts>
#endif
		nrk_int_enable();
    1b6c:	0e 94 49 13 	call	0x2692	; 0x2692 <nrk_int_enable>
		return;
    1b70:	32 c0       	rjmp	.+100    	; 0x1bd6 <rf_glossy_interrupt+0xbe>
	} else if (ttl == 5) {
    1b72:	f5 e0       	ldi	r31, 0x05	; 5
    1b74:	ff 12       	cpse	r15, r31
    1b76:	04 c0       	rjmp	.+8      	; 0x1b80 <rf_glossy_interrupt+0x68>
#ifndef GLOSSY_TESTING
		printf("\n");
    1b78:	8a e0       	ldi	r24, 0x0A	; 10
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <putchar>

	/* Print packet information */
#ifndef GLOSSY_TESTING
	int8_t rssi = rfRxInfo.rssi;
	uint8_t snum = rfRxInfo.seqNumber;
	printf("SEQ:%4u\tTTL:%2d\tRSSI:%4d\tPayload: [%s]\r\n", 
    1b80:	c8 01       	movw	r24, r16
    1b82:	01 96       	adiw	r24, 0x01	; 1
    1b84:	9f 93       	push	r25
    1b86:	8f 93       	push	r24
    1b88:	8e 2d       	mov	r24, r14
    1b8a:	99 27       	eor	r25, r25
    1b8c:	87 fd       	sbrc	r24, 7
    1b8e:	90 95       	com	r25
    1b90:	9f 93       	push	r25
    1b92:	ef 92       	push	r14
    1b94:	1f 92       	push	r1
    1b96:	ff 92       	push	r15
    1b98:	1f 92       	push	r1
    1b9a:	cf 92       	push	r12
    1b9c:	88 e1       	ldi	r24, 0x18	; 24
    1b9e:	93 e0       	ldi	r25, 0x03	; 3
    1ba0:	9f 93       	push	r25
    1ba2:	8f 93       	push	r24
    1ba4:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>
					snum, ttl, rssi, rfRxInfo.pPayload + 1);
#endif
	/* Copy pointer to payload and length */
	rfTxInfo.pPayload = rfRxInfo.pPayload;
    1ba8:	1d 83       	std	Y+5, r17	; 0x05
    1baa:	0c 83       	std	Y+4, r16	; 0x04
	rfTxInfo.pPayload[0] = ttl - 1;
    1bac:	fa 94       	dec	r15
    1bae:	f8 01       	movw	r30, r16
    1bb0:	f0 82       	st	Z, r15
	rfTxInfo.length = rfRxInfo.length;
    1bb2:	db 82       	std	Y+3, r13	; 0x03
	rfTxInfo.cca = 0;
    1bb4:	1e 82       	std	Y+6, r1	; 0x06
	rfTxInfo.ackRequest = 0;
    1bb6:	1f 82       	std	Y+7, r1	; 0x07
	rfTxInfo.destAddr = 0xFFFF;
    1bb8:	8f ef       	ldi	r24, 0xFF	; 255
    1bba:	9f ef       	ldi	r25, 0xFF	; 255
    1bbc:	9a 83       	std	Y+2, r25	; 0x02
    1bbe:	89 83       	std	Y+1, r24	; 0x01
		rf_tx_packet(&rfTxInfo);
	} else {
		nrk_int_enable();
	}
#else
	nrk_int_enable();
    1bc0:	0e 94 49 13 	call	0x2692	; 0x2692 <nrk_int_enable>
	rf_tx_packet(&rfTxInfo);
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	01 96       	adiw	r24, 0x01	; 1
    1bc8:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <rf_tx_packet>
#endif
	return;
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
}
    1bd6:	27 96       	adiw	r28, 0x07	; 7
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	1f 91       	pop	r17
    1be8:	0f 91       	pop	r16
    1bea:	ff 90       	pop	r15
    1bec:	ef 90       	pop	r14
    1bee:	df 90       	pop	r13
    1bf0:	cf 90       	pop	r12
    1bf2:	08 95       	ret

00001bf4 <__vector_60>:
	return NRK_OK;
}


SIGNAL(TRX24_RX_END_vect)
{	
    1bf4:	1f 92       	push	r1
    1bf6:	0f 92       	push	r0
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	0f 92       	push	r0
    1bfc:	11 24       	eor	r1, r1
    1bfe:	0b b6       	in	r0, 0x3b	; 59
    1c00:	0f 92       	push	r0
    1c02:	2f 93       	push	r18
    1c04:	3f 93       	push	r19
    1c06:	4f 93       	push	r20
    1c08:	5f 93       	push	r21
    1c0a:	6f 93       	push	r22
    1c0c:	7f 93       	push	r23
    1c0e:	8f 93       	push	r24
    1c10:	9f 93       	push	r25
    1c12:	af 93       	push	r26
    1c14:	bf 93       	push	r27
    1c16:	ef 93       	push	r30
    1c18:	ff 93       	push	r31
	uint8_t i, *byte_ptr = &TRXFBST;

	/* Verbose mode print block */
	vprintf("RX_END IRQ!\r\n");	
	for(i=0; i<TST_RX_LENGTH; i++){
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 91 7b 01 	lds	r25, 0x017B
    1c20:	89 17       	cp	r24, r25
    1c22:	10 f4       	brcc	.+4      	; 0x1c28 <__vector_60+0x34>
    1c24:	8f 5f       	subi	r24, 0xFF	; 255
    1c26:	fa cf       	rjmp	.-12     	; 0x1c1c <__vector_60+0x28>
		if(((i+1) % 16) == 0)
			vprintf("\r\n");
	}
	vprintf("\r\n");

	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    1c28:	80 91 46 01 	lds	r24, 0x0146
    1c2c:	87 ff       	sbrs	r24, 7
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <__vector_60+0x44>
		rx_ready = 1;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	80 93 67 05 	sts	0x0567, r24
    1c36:	04 c0       	rjmp	.+8      	; 0x1c40 <__vector_60+0x4c>
	} else {
		printf("RX end failed checksum!\r\n");
    1c38:	81 e4       	ldi	r24, 0x41	; 65
    1c3a:	93 e0       	ldi	r25, 0x03	; 3
    1c3c:	0e 94 df 2c 	call	0x59be	; 0x59be <puts>
	}
	IRQ_STATUS = (1 << RX_END);
    1c40:	88 e0       	ldi	r24, 0x08	; 8
    1c42:	80 93 4f 01 	sts	0x014F, r24
	
	if((PHY_RSSI >> RX_CRC_VALID) & 0x1) {
    1c46:	80 91 46 01 	lds	r24, 0x0146
    1c4a:	87 ff       	sbrs	r24, 7
    1c4c:	05 c0       	rjmp	.+10     	; 0x1c58 <__vector_60+0x64>
		if (use_glossy) rf_glossy_interrupt();
    1c4e:	80 91 23 05 	lds	r24, 0x0523
    1c52:	81 11       	cpse	r24, r1
    1c54:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <rf_glossy_interrupt>
	}

	if(rx_end_func)
    1c58:	e0 91 9e 03 	lds	r30, 0x039E
    1c5c:	f0 91 9f 03 	lds	r31, 0x039F
    1c60:	30 97       	sbiw	r30, 0x00	; 0
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <__vector_60+0x72>
		rx_end_func();
    1c64:	09 95       	icall

	return;
}
    1c66:	ff 91       	pop	r31
    1c68:	ef 91       	pop	r30
    1c6a:	bf 91       	pop	r27
    1c6c:	af 91       	pop	r26
    1c6e:	9f 91       	pop	r25
    1c70:	8f 91       	pop	r24
    1c72:	7f 91       	pop	r23
    1c74:	6f 91       	pop	r22
    1c76:	5f 91       	pop	r21
    1c78:	4f 91       	pop	r20
    1c7a:	3f 91       	pop	r19
    1c7c:	2f 91       	pop	r18
    1c7e:	0f 90       	pop	r0
    1c80:	0b be       	out	0x3b, r0	; 59
    1c82:	0f 90       	pop	r0
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	0f 90       	pop	r0
    1c88:	1f 90       	pop	r1
    1c8a:	18 95       	reti

00001c8c <aes_setkey>:


/* AES encryption and decryption */

void aes_setkey(uint8_t *key)
{
    1c8c:	e8 e3       	ldi	r30, 0x38	; 56
    1c8e:	f5 e0       	ldi	r31, 0x05	; 5
    1c90:	dc 01       	movw	r26, r24
   uint8_t i;

   for(i=0; i<16; i++){
      ekey[i] = key[i];
    1c92:	8c 91       	ld	r24, X
    1c94:	81 93       	st	Z+, r24
      AES_KEY = key[i];
    1c96:	8d 91       	ld	r24, X+
    1c98:	80 93 3f 01 	sts	0x013F, r24

void aes_setkey(uint8_t *key)
{
   uint8_t i;

   for(i=0; i<16; i++){
    1c9c:	85 e0       	ldi	r24, 0x05	; 5
    1c9e:	e8 34       	cpi	r30, 0x48	; 72
    1ca0:	f8 07       	cpc	r31, r24
    1ca2:	b9 f7       	brne	.-18     	; 0x1c92 <aes_setkey+0x6>
    1ca4:	80 e1       	ldi	r24, 0x10	; 16
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
      AES_STATE = 0x00;
    1ca6:	10 92 3e 01 	sts	0x013E, r1
    1caa:	81 50       	subi	r24, 0x01	; 1

   for(i=0; i<16; i++){
      ekey[i] = key[i];
      AES_KEY = key[i];
   }
   for(i=0; i<16; i++){
    1cac:	e1 f7       	brne	.-8      	; 0x1ca6 <aes_setkey+0x1a>
      AES_STATE = 0x00;
   }
   AES_CTRL = (1 << AES_REQUEST);
    1cae:	80 e8       	ldi	r24, 0x80	; 128
    1cb0:	80 93 3c 01 	sts	0x013C, r24

   while(!(AES_STATUS & (1 << AES_DONE))){
    1cb4:	80 91 3d 01 	lds	r24, 0x013D
    1cb8:	80 ff       	sbrs	r24, 0
    1cba:	fc cf       	rjmp	.-8      	; 0x1cb4 <aes_setkey+0x28>
    1cbc:	e1 e5       	ldi	r30, 0x51	; 81
    1cbe:	f5 e0       	ldi	r31, 0x05	; 5
      continue;
   }
   for(i=0; i<16; i++){
      dkey[i] = AES_KEY;
    1cc0:	80 91 3f 01 	lds	r24, 0x013F
    1cc4:	81 93       	st	Z+, r24
   AES_CTRL = (1 << AES_REQUEST);

   while(!(AES_STATUS & (1 << AES_DONE))){
      continue;
   }
   for(i=0; i<16; i++){
    1cc6:	85 e0       	ldi	r24, 0x05	; 5
    1cc8:	e1 36       	cpi	r30, 0x61	; 97
    1cca:	f8 07       	cpc	r31, r24
    1ccc:	c9 f7       	brne	.-14     	; 0x1cc0 <aes_setkey+0x34>
      dkey[i] = AES_KEY;
   }
}
    1cce:	08 95       	ret

00001cd0 <aes_encrypt>:


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    1cd0:	cf 93       	push	r28
   uint8_t i, j;

   if(len==0 || len%16!=0)
    1cd2:	66 23       	and	r22, r22
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <aes_encrypt+0x8>
    1cd6:	47 c0       	rjmp	.+142    	; 0x1d66 <aes_encrypt+0x96>
    1cd8:	26 2f       	mov	r18, r22
    1cda:	2f 70       	andi	r18, 0x0F	; 15
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <aes_encrypt+0x10>
    1cde:	43 c0       	rjmp	.+134    	; 0x1d66 <aes_encrypt+0x96>
    1ce0:	e8 e3       	ldi	r30, 0x38	; 56
    1ce2:	f5 e0       	ldi	r31, 0x05	; 5
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];
    1ce4:	21 91       	ld	r18, Z+
    1ce6:	20 93 3f 01 	sts	0x013F, r18
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1cea:	25 e0       	ldi	r18, 0x05	; 5
    1cec:	e8 34       	cpi	r30, 0x48	; 72
    1cee:	f2 07       	cpc	r31, r18
    1cf0:	c9 f7       	brne	.-14     	; 0x1ce4 <aes_encrypt+0x14>
    1cf2:	a0 e0       	ldi	r26, 0x00	; 0
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    1cf6:	b0 e2       	ldi	r27, 0x20	; 32
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1cf8:	20 e1       	ldi	r18, 0x10	; 16
    1cfa:	a2 9f       	mul	r26, r18
    1cfc:	a0 01       	movw	r20, r0
    1cfe:	11 24       	eor	r1, r1
    1d00:	46 17       	cp	r20, r22
    1d02:	57 07       	cpc	r21, r23
    1d04:	74 f5       	brge	.+92     	; 0x1d62 <aes_encrypt+0x92>
      if(i==0)
    1d06:	a1 11       	cpse	r26, r1
    1d08:	03 c0       	rjmp	.+6      	; 0x1d10 <aes_encrypt+0x40>
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
    1d0a:	10 92 3c 01 	sts	0x013C, r1
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <aes_encrypt+0x44>
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
    1d10:	b0 93 3c 01 	sts	0x013C, r27
   }
}


uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	48 0f       	add	r20, r24
    1d1a:	59 1f       	adc	r21, r25
    1d1c:	fa 01       	movw	r30, r20
    1d1e:	e2 0f       	add	r30, r18
    1d20:	f3 1f       	adc	r31, r19
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    1d22:	e0 81       	ld	r30, Z
    1d24:	e0 93 3e 01 	sts	0x013E, r30
    1d28:	2f 5f       	subi	r18, 0xFF	; 255
    1d2a:	3f 4f       	sbci	r19, 0xFF	; 255
      if(i==0)
         AES_CTRL = (0 << AES_MODE) | (0 << AES_DIR);
      else
         AES_CTRL = (1 << AES_MODE) | (0 << AES_DIR);
      
      for(j=0; j<16; j++)
    1d2c:	20 31       	cpi	r18, 0x10	; 16
    1d2e:	31 05       	cpc	r19, r1
    1d30:	a9 f7       	brne	.-22     	; 0x1d1c <aes_encrypt+0x4c>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1d32:	20 91 3c 01 	lds	r18, 0x013C
    1d36:	20 68       	ori	r18, 0x80	; 128
    1d38:	20 93 3c 01 	sts	0x013C, r18
      while(!(AES_STATUS & (1 << AES_DONE)))
    1d3c:	20 91 3d 01 	lds	r18, 0x013D
    1d40:	20 ff       	sbrs	r18, 0
    1d42:	fc cf       	rjmp	.-8      	; 0x1d3c <aes_encrypt+0x6c>
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
    1d48:	c0 91 3e 01 	lds	r28, 0x013E
    1d4c:	fa 01       	movw	r30, r20
    1d4e:	e2 0f       	add	r30, r18
    1d50:	f3 1f       	adc	r31, r19
    1d52:	c0 83       	st	Z, r28
    1d54:	2f 5f       	subi	r18, 0xFF	; 255
    1d56:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
    1d58:	20 31       	cpi	r18, 0x10	; 16
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	a9 f7       	brne	.-22     	; 0x1d48 <aes_encrypt+0x78>
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = ekey[i];

   for(i=0; 16*i<len; i++){ 
    1d5e:	af 5f       	subi	r26, 0xFF	; 255
    1d60:	cb cf       	rjmp	.-106    	; 0x1cf8 <aes_encrypt+0x28>
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <aes_encrypt+0x98>
uint8_t aes_encrypt(uint8_t *data, uint8_t len)
{
   uint8_t i, j;

   if(len==0 || len%16!=0)
      return 1;
    1d66:	81 e0       	ldi	r24, 0x01	; 1
         continue;
      for(j=0; j<16; j++)
         data[16*i+j] = AES_STATE;
   }
   return 0;
}
    1d68:	cf 91       	pop	r28
    1d6a:	08 95       	ret

00001d6c <aes_decrypt>:

uint8_t aes_decrypt(uint8_t *data, uint8_t len)
{
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
    1d74:	61 30       	cpi	r22, 0x01	; 1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <aes_decrypt+0xe>
    1d78:	4f c0       	rjmp	.+158    	; 0x1e18 <aes_decrypt+0xac>
    1d7a:	26 2f       	mov	r18, r22
    1d7c:	2f 70       	andi	r18, 0x0F	; 15
    1d7e:	09 f0       	breq	.+2      	; 0x1d82 <aes_decrypt+0x16>
    1d80:	4b c0       	rjmp	.+150    	; 0x1e18 <aes_decrypt+0xac>
    1d82:	e1 e5       	ldi	r30, 0x51	; 81
    1d84:	f5 e0       	ldi	r31, 0x05	; 5
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];
    1d86:	21 91       	ld	r18, Z+
    1d88:	20 93 3f 01 	sts	0x013F, r18
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;

   for(i=0; i<16; i++)
    1d8c:	25 e0       	ldi	r18, 0x05	; 5
    1d8e:	e1 36       	cpi	r30, 0x61	; 97
    1d90:	f2 07       	cpc	r31, r18
    1d92:	c9 f7       	brne	.-14     	; 0x1d86 <aes_decrypt+0x1a>
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1d94:	62 95       	swap	r22
    1d96:	6f 70       	andi	r22, 0x0F	; 15
    1d98:	61 50       	subi	r22, 0x01	; 1
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1d9a:	08 e0       	ldi	r16, 0x08	; 8
      return 1;

   for(i=0; i<16; i++)
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
    1d9c:	6f 3f       	cpi	r22, 0xFF	; 255
    1d9e:	d1 f1       	breq	.+116    	; 0x1e14 <aes_decrypt+0xa8>
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
    1da0:	00 93 3c 01 	sts	0x013C, r16
      
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
    1da4:	20 e1       	ldi	r18, 0x10	; 16
    1da6:	62 02       	muls	r22, r18
    1da8:	a0 01       	movw	r20, r0
    1daa:	11 24       	eor	r1, r1
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	fc 01       	movw	r30, r24
    1db2:	e4 0f       	add	r30, r20
    1db4:	f5 1f       	adc	r31, r21
    1db6:	df 01       	movw	r26, r30
    1db8:	a2 0f       	add	r26, r18
    1dba:	b3 1f       	adc	r27, r19
    1dbc:	7c 91       	ld	r23, X
    1dbe:	70 93 3e 01 	sts	0x013E, r23
    1dc2:	2f 5f       	subi	r18, 0xFF	; 255
    1dc4:	3f 4f       	sbci	r19, 0xFF	; 255
      AES_KEY = dkey[i];

   for(i=(len/16)-1; i>=0; i--){ 
      AES_CTRL = (0 << AES_MODE) | (1 << AES_DIR);
      
      for(j=0; j<16; j++)
    1dc6:	20 31       	cpi	r18, 0x10	; 16
    1dc8:	31 05       	cpc	r19, r1
    1dca:	a9 f7       	brne	.-22     	; 0x1db6 <aes_decrypt+0x4a>
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
    1dcc:	20 91 3c 01 	lds	r18, 0x013C
    1dd0:	20 68       	ori	r18, 0x80	; 128
    1dd2:	20 93 3c 01 	sts	0x013C, r18
      while(!(AES_STATUS & (1 << AES_DONE)))
    1dd6:	20 91 3d 01 	lds	r18, 0x013D
    1dda:	20 ff       	sbrs	r18, 0
    1ddc:	fc cf       	rjmp	.-8      	; 0x1dd6 <aes_decrypt+0x6a>
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
    1dde:	40 51       	subi	r20, 0x10	; 16
    1de0:	51 09       	sbc	r21, r1
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	48 0f       	add	r20, r24
    1de8:	59 1f       	adc	r21, r25
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
         data[16*i+j] = AES_STATE;
    1dea:	10 91 3e 01 	lds	r17, 0x013E
    1dee:	df 01       	movw	r26, r30
    1df0:	a2 0f       	add	r26, r18
    1df2:	b3 1f       	adc	r27, r19
    1df4:	1c 93       	st	X, r17
         if(i!=0)
    1df6:	66 23       	and	r22, r22
    1df8:	31 f0       	breq	.+12     	; 0x1e06 <aes_decrypt+0x9a>
    1dfa:	ea 01       	movw	r28, r20
    1dfc:	c2 0f       	add	r28, r18
    1dfe:	d3 1f       	adc	r29, r19
            data[16*i+j] ^= data[16*(i-1)+j];
    1e00:	78 81       	ld	r23, Y
    1e02:	71 27       	eor	r23, r17
    1e04:	7c 93       	st	X, r23
    1e06:	2f 5f       	subi	r18, 0xFF	; 255
    1e08:	3f 4f       	sbci	r19, 0xFF	; 255
      for(j=0; j<16; j++)
         AES_STATE = data[16*i+j];
      AES_CTRL |= (1 << AES_REQUEST);
      while(!(AES_STATUS & (1 << AES_DONE)))
         continue;
      for(j=0; j<16; j++){
    1e0a:	20 31       	cpi	r18, 0x10	; 16
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	69 f7       	brne	.-38     	; 0x1dea <aes_decrypt+0x7e>
    1e10:	61 50       	subi	r22, 0x01	; 1
    1e12:	c4 cf       	rjmp	.-120    	; 0x1d9c <aes_decrypt+0x30>
         data[16*i+j] = AES_STATE;
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	01 c0       	rjmp	.+2      	; 0x1e1a <aes_decrypt+0xae>
{
   int8_t i;
   uint8_t j;

   if(len==1 || len%16!=0)
      return 1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
         if(i!=0)
            data[16*i+j] ^= data[16*(i-1)+j];
      }
   }
   return 0;
}
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	1f 91       	pop	r17
    1e20:	0f 91       	pop	r16
    1e22:	08 95       	ret

00001e24 <getc0>:
return 0;
}

char getc0(void){
        unsigned char tmp;
        UART0_WAIT_AND_RECEIVE(tmp);
    1e24:	80 91 c0 00 	lds	r24, 0x00C0
    1e28:	87 ff       	sbrs	r24, 7
    1e2a:	fc cf       	rjmp	.-8      	; 0x1e24 <getc0>
    1e2c:	80 91 c0 00 	lds	r24, 0x00C0
    1e30:	8f 77       	andi	r24, 0x7F	; 127
    1e32:	80 93 c0 00 	sts	0x00C0, r24
    1e36:	80 91 c6 00 	lds	r24, 0x00C6
        return tmp;
}
    1e3a:	08 95       	ret

00001e3c <putc0>:
}
*/

void putc0(char x)
{
     UART0_WAIT_AND_SEND(x);
    1e3c:	90 91 c0 00 	lds	r25, 0x00C0
    1e40:	95 ff       	sbrs	r25, 5
    1e42:	fc cf       	rjmp	.-8      	; 0x1e3c <putc0>
    1e44:	90 91 c0 00 	lds	r25, 0x00C0
    1e48:	9f 7d       	andi	r25, 0xDF	; 223
    1e4a:	90 93 c0 00 	sts	0x00C0, r25
    1e4e:	80 93 c6 00 	sts	0x00C6, r24
    1e52:	08 95       	ret

00001e54 <nrk_uart_rx_signal_get>:
#else

nrk_sig_t nrk_uart_rx_signal_get()
{
   return NRK_ERROR;
}
    1e54:	8f ef       	ldi	r24, 0xFF	; 255
    1e56:	08 95       	ret

00001e58 <nrk_uart_data_ready>:


uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
    1e58:	81 30       	cpi	r24, 0x01	; 1
    1e5a:	31 f4       	brne	.+12     	; 0x1e68 <nrk_uart_data_ready+0x10>
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    1e5c:	80 91 c8 00 	lds	r24, 0x00C8
    1e60:	87 fd       	sbrc	r24, 7
    1e62:	07 c0       	rjmp	.+14     	; 0x1e72 <nrk_uart_data_ready+0x1a>
        }
if(uart_num==0)
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	08 95       	ret
{
if(uart_num==1)
        {
        if( UCSR1A & BM(RXC1) ) return 1;
        }
if(uart_num==0)
    1e68:	81 11       	cpse	r24, r1
    1e6a:	fc cf       	rjmp	.-8      	; 0x1e64 <nrk_uart_data_ready+0xc>
        {
        if( UCSR0A & BM(RXC0) ) return 1;
    1e6c:	80 91 c0 00 	lds	r24, 0x00C0
    1e70:	f7 cf       	rjmp	.-18     	; 0x1e60 <nrk_uart_data_ready+0x8>

uint8_t nrk_uart_data_ready(uint8_t uart_num)
{
if(uart_num==1)
        {
        if( UCSR1A & BM(RXC1) ) return 1;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
if(uart_num==0)
        {
        if( UCSR0A & BM(RXC0) ) return 1;
        }
return 0;
}
    1e74:	08 95       	ret

00001e76 <nrk_kprintf>:
}

#endif

void nrk_kprintf( const char *addr)
{
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
 char c;
   while((c=pgm_read_byte(addr++)))
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	24 91       	lpm	r18, Z
    1e7e:	ec 01       	movw	r28, r24
    1e80:	21 96       	adiw	r28, 0x01	; 1
    1e82:	22 23       	and	r18, r18
    1e84:	51 f0       	breq	.+20     	; 0x1e9a <nrk_kprintf+0x24>
        putchar(c);
    1e86:	60 91 04 06 	lds	r22, 0x0604
    1e8a:	70 91 05 06 	lds	r23, 0x0605
    1e8e:	82 2f       	mov	r24, r18
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 94 95 2c 	call	0x592a	; 0x592a <fputc>
    1e96:	ce 01       	movw	r24, r28
    1e98:	f0 cf       	rjmp	.-32     	; 0x1e7a <nrk_kprintf+0x4>
}
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	08 95       	ret

00001ea0 <PORT_INIT>:

#ifdef SPI_SS_PULLUP
        DDRB  = BM(MOSI) | BM(SCK) | BM(SPI_SS);  
        PORTB = BM(MOSI) | BM(SCK) | BM(SPI_SS); 
#else
        DDRB  = BM(MOSI) | BM(SCK);  
    1ea0:	86 e0       	ldi	r24, 0x06	; 6
    1ea2:	84 b9       	out	0x04, r24	; 4
        PORTB = BM(MOSI) | BM(SCK); 
    1ea4:	85 b9       	out	0x05, r24	; 5
#endif
        DDRD  = BM(LED_0) | BM(LED_1) | BM(LED_2) | BM(LED_3) |  BM(UART1_TXD) ; 
    1ea6:	88 ef       	ldi	r24, 0xF8	; 248
    1ea8:	8a b9       	out	0x0a, r24	; 10
	PORTD = BM(LED_0)|BM(LED_1)|BM(LED_2)|BM(LED_3);
    1eaa:	80 ef       	ldi	r24, 0xF0	; 240
    1eac:	8b b9       	out	0x0b, r24	; 11
        DDRE = BM(UART0_TXD); 
    1eae:	82 e0       	ldi	r24, 0x02	; 2
    1eb0:	8d b9       	out	0x0d, r24	; 13
    1eb2:	08 95       	ret

00001eb4 <nrk_setup_ports>:
        putchar(c);
}

void nrk_setup_ports()
{
PORT_INIT();
    1eb4:	0c 94 50 0f 	jmp	0x1ea0	; 0x1ea0 <PORT_INIT>

00001eb8 <nrk_gpio_set>:
//-------------------------------
// GPIO handling functions

int8_t nrk_gpio_set(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1eb8:	8f 3f       	cpi	r24, 0xFF	; 255
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <nrk_gpio_set+0x6>
    1ebc:	5c c0       	rjmp	.+184    	; 0x1f76 <nrk_gpio_set+0xbe>
        switch (pin & 0x07) {
    1ebe:	48 2f       	mov	r20, r24
    1ec0:	47 70       	andi	r20, 0x07	; 7
    1ec2:	50 e0       	ldi	r21, 0x00	; 0
    1ec4:	47 30       	cpi	r20, 0x07	; 7
    1ec6:	51 05       	cpc	r21, r1
    1ec8:	08 f0       	brcs	.+2      	; 0x1ecc <nrk_gpio_set+0x14>
    1eca:	55 c0       	rjmp	.+170    	; 0x1f76 <nrk_gpio_set+0xbe>
    1ecc:	fa 01       	movw	r30, r20
    1ece:	e0 57       	subi	r30, 0x70	; 112
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	86 95       	lsr	r24
    1ed4:	86 95       	lsr	r24
    1ed6:	86 95       	lsr	r24
    1ed8:	0c 94 18 2c 	jmp	0x5830	; 0x5830 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1edc:	92 b1       	in	r25, 0x02	; 2
    1ede:	21 e0       	ldi	r18, 0x01	; 1
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	08 2e       	mov	r0, r24
    1ee4:	01 c0       	rjmp	.+2      	; 0x1ee8 <nrk_gpio_set+0x30>
    1ee6:	22 0f       	add	r18, r18
    1ee8:	0a 94       	dec	r0
    1eea:	ea f7       	brpl	.-6      	; 0x1ee6 <nrk_gpio_set+0x2e>
    1eec:	92 2b       	or	r25, r18
    1eee:	92 b9       	out	0x02, r25	; 2
    1ef0:	40 c0       	rjmp	.+128    	; 0x1f72 <nrk_gpio_set+0xba>
                case NRK_PORTB:
                        do { PORTB |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1ef2:	95 b1       	in	r25, 0x05	; 5
    1ef4:	21 e0       	ldi	r18, 0x01	; 1
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	08 2e       	mov	r0, r24
    1efa:	01 c0       	rjmp	.+2      	; 0x1efe <nrk_gpio_set+0x46>
    1efc:	22 0f       	add	r18, r18
    1efe:	0a 94       	dec	r0
    1f00:	ea f7       	brpl	.-6      	; 0x1efc <nrk_gpio_set+0x44>
    1f02:	92 2b       	or	r25, r18
    1f04:	95 b9       	out	0x05, r25	; 5
    1f06:	35 c0       	rjmp	.+106    	; 0x1f72 <nrk_gpio_set+0xba>
                case NRK_PORTC:
                        do { PORTC |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1f08:	98 b1       	in	r25, 0x08	; 8
    1f0a:	21 e0       	ldi	r18, 0x01	; 1
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	08 2e       	mov	r0, r24
    1f10:	01 c0       	rjmp	.+2      	; 0x1f14 <nrk_gpio_set+0x5c>
    1f12:	22 0f       	add	r18, r18
    1f14:	0a 94       	dec	r0
    1f16:	ea f7       	brpl	.-6      	; 0x1f12 <nrk_gpio_set+0x5a>
    1f18:	92 2b       	or	r25, r18
    1f1a:	98 b9       	out	0x08, r25	; 8
    1f1c:	2a c0       	rjmp	.+84     	; 0x1f72 <nrk_gpio_set+0xba>
                case NRK_PORTD:
                        do { PORTD |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1f1e:	9b b1       	in	r25, 0x0b	; 11
    1f20:	21 e0       	ldi	r18, 0x01	; 1
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	08 2e       	mov	r0, r24
    1f26:	01 c0       	rjmp	.+2      	; 0x1f2a <nrk_gpio_set+0x72>
    1f28:	22 0f       	add	r18, r18
    1f2a:	0a 94       	dec	r0
    1f2c:	ea f7       	brpl	.-6      	; 0x1f28 <nrk_gpio_set+0x70>
    1f2e:	92 2b       	or	r25, r18
    1f30:	9b b9       	out	0x0b, r25	; 11
    1f32:	1f c0       	rjmp	.+62     	; 0x1f72 <nrk_gpio_set+0xba>
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1f34:	9e b1       	in	r25, 0x0e	; 14
    1f36:	21 e0       	ldi	r18, 0x01	; 1
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	08 2e       	mov	r0, r24
    1f3c:	01 c0       	rjmp	.+2      	; 0x1f40 <nrk_gpio_set+0x88>
    1f3e:	22 0f       	add	r18, r18
    1f40:	0a 94       	dec	r0
    1f42:	ea f7       	brpl	.-6      	; 0x1f3e <nrk_gpio_set+0x86>
    1f44:	92 2b       	or	r25, r18
    1f46:	9e b9       	out	0x0e, r25	; 14
    1f48:	14 c0       	rjmp	.+40     	; 0x1f72 <nrk_gpio_set+0xba>
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1f4a:	91 b3       	in	r25, 0x11	; 17
    1f4c:	21 e0       	ldi	r18, 0x01	; 1
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	08 2e       	mov	r0, r24
    1f52:	01 c0       	rjmp	.+2      	; 0x1f56 <nrk_gpio_set+0x9e>
    1f54:	22 0f       	add	r18, r18
    1f56:	0a 94       	dec	r0
    1f58:	ea f7       	brpl	.-6      	; 0x1f54 <nrk_gpio_set+0x9c>
    1f5a:	92 2b       	or	r25, r18
    1f5c:	91 bb       	out	0x11, r25	; 17
    1f5e:	09 c0       	rjmp	.+18     	; 0x1f72 <nrk_gpio_set+0xba>
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1f60:	94 b3       	in	r25, 0x14	; 20
    1f62:	21 e0       	ldi	r18, 0x01	; 1
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	01 c0       	rjmp	.+2      	; 0x1f6a <nrk_gpio_set+0xb2>
    1f68:	22 0f       	add	r18, r18
    1f6a:	8a 95       	dec	r24
    1f6c:	ea f7       	brpl	.-6      	; 0x1f68 <nrk_gpio_set+0xb0>
    1f6e:	92 2b       	or	r25, r18
    1f70:	94 bb       	out	0x14, r25	; 20
                default: return -1;
        }
        return 1;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF |= BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTG |= BM((pin & 0xF8) >> 3); } while(0); break; 
    1f74:	08 95       	ret
                default: return -1;
    1f76:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    1f78:	08 95       	ret

00001f7a <nrk_gpio_clr>:

int8_t nrk_gpio_clr(uint8_t pin)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    1f7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <nrk_gpio_clr+0x6>
    1f7e:	57 c0       	rjmp	.+174    	; 0x202e <nrk_gpio_clr+0xb4>
        switch (pin & 0x07) {
    1f80:	48 2f       	mov	r20, r24
    1f82:	47 70       	andi	r20, 0x07	; 7
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	47 30       	cpi	r20, 0x07	; 7
    1f88:	51 05       	cpc	r21, r1
    1f8a:	08 f0       	brcs	.+2      	; 0x1f8e <nrk_gpio_clr+0x14>
    1f8c:	50 c0       	rjmp	.+160    	; 0x202e <nrk_gpio_clr+0xb4>
    1f8e:	fa 01       	movw	r30, r20
    1f90:	e9 56       	subi	r30, 0x69	; 105
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	86 95       	lsr	r24
    1f96:	86 95       	lsr	r24
    1f98:	86 95       	lsr	r24
    1f9a:	0c 94 18 2c 	jmp	0x5830	; 0x5830 <__tablejump2__>
                case NRK_PORTA:
                        do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1f9e:	92 b1       	in	r25, 0x02	; 2
    1fa0:	21 e0       	ldi	r18, 0x01	; 1
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	08 2e       	mov	r0, r24
    1fa6:	01 c0       	rjmp	.+2      	; 0x1faa <nrk_gpio_clr+0x30>
    1fa8:	22 0f       	add	r18, r18
    1faa:	0a 94       	dec	r0
    1fac:	ea f7       	brpl	.-6      	; 0x1fa8 <nrk_gpio_clr+0x2e>
    1fae:	20 95       	com	r18
    1fb0:	29 23       	and	r18, r25
    1fb2:	22 b9       	out	0x02, r18	; 2
    1fb4:	3a c0       	rjmp	.+116    	; 0x202a <nrk_gpio_clr+0xb0>
                case NRK_PORTB:
                        do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0); break;
    1fb6:	95 b1       	in	r25, 0x05	; 5
    1fb8:	21 e0       	ldi	r18, 0x01	; 1
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	08 2e       	mov	r0, r24
    1fbe:	01 c0       	rjmp	.+2      	; 0x1fc2 <nrk_gpio_clr+0x48>
    1fc0:	22 0f       	add	r18, r18
    1fc2:	0a 94       	dec	r0
    1fc4:	ea f7       	brpl	.-6      	; 0x1fc0 <nrk_gpio_clr+0x46>
    1fc6:	20 95       	com	r18
    1fc8:	29 23       	and	r18, r25
    1fca:	25 b9       	out	0x05, r18	; 5
    1fcc:	2e c0       	rjmp	.+92     	; 0x202a <nrk_gpio_clr+0xb0>
                case NRK_PORTC:
                        do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1fce:	98 b1       	in	r25, 0x08	; 8
    1fd0:	21 e0       	ldi	r18, 0x01	; 1
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	08 2e       	mov	r0, r24
    1fd6:	01 c0       	rjmp	.+2      	; 0x1fda <nrk_gpio_clr+0x60>
    1fd8:	22 0f       	add	r18, r18
    1fda:	0a 94       	dec	r0
    1fdc:	ea f7       	brpl	.-6      	; 0x1fd8 <nrk_gpio_clr+0x5e>
    1fde:	20 95       	com	r18
    1fe0:	29 23       	and	r18, r25
    1fe2:	28 b9       	out	0x08, r18	; 8
    1fe4:	22 c0       	rjmp	.+68     	; 0x202a <nrk_gpio_clr+0xb0>
                case NRK_PORTD:
                        do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1fe6:	9b b1       	in	r25, 0x0b	; 11
    1fe8:	21 e0       	ldi	r18, 0x01	; 1
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	08 2e       	mov	r0, r24
    1fee:	01 c0       	rjmp	.+2      	; 0x1ff2 <nrk_gpio_clr+0x78>
    1ff0:	22 0f       	add	r18, r18
    1ff2:	0a 94       	dec	r0
    1ff4:	ea f7       	brpl	.-6      	; 0x1ff0 <nrk_gpio_clr+0x76>
    1ff6:	20 95       	com	r18
    1ff8:	29 23       	and	r18, r25
    1ffa:	2b b9       	out	0x0b, r18	; 11
    1ffc:	16 c0       	rjmp	.+44     	; 0x202a <nrk_gpio_clr+0xb0>
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    1ffe:	9e b1       	in	r25, 0x0e	; 14
    2000:	21 e0       	ldi	r18, 0x01	; 1
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	08 2e       	mov	r0, r24
    2006:	01 c0       	rjmp	.+2      	; 0x200a <nrk_gpio_clr+0x90>
    2008:	22 0f       	add	r18, r18
    200a:	0a 94       	dec	r0
    200c:	ea f7       	brpl	.-6      	; 0x2008 <nrk_gpio_clr+0x8e>
    200e:	20 95       	com	r18
    2010:	29 23       	and	r18, r25
    2012:	2e b9       	out	0x0e, r18	; 14
    2014:	0a c0       	rjmp	.+20     	; 0x202a <nrk_gpio_clr+0xb0>
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    2016:	91 b3       	in	r25, 0x11	; 17
    2018:	21 e0       	ldi	r18, 0x01	; 1
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	01 c0       	rjmp	.+2      	; 0x2020 <nrk_gpio_clr+0xa6>
    201e:	22 0f       	add	r18, r18
    2020:	8a 95       	dec	r24
    2022:	ea f7       	brpl	.-6      	; 0x201e <nrk_gpio_clr+0xa4>
    2024:	20 95       	com	r18
    2026:	29 23       	and	r18, r25
    2028:	21 bb       	out	0x11, r18	; 17
                default: return -1;
        }
        return 1;
    202a:	81 e0       	ldi	r24, 0x01	; 1
                case NRK_PORTE:
                        do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTF:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
                case NRK_PORTG:
                        do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0); break; 
    202c:	08 95       	ret
                default: return -1;
    202e:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2030:	08 95       	ret

00002032 <nrk_gpio_get>:

int8_t nrk_gpio_get(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2032:	8f 3f       	cpi	r24, 0xFF	; 255
    2034:	21 f1       	breq	.+72     	; 0x207e <nrk_gpio_get+0x4c>
        switch (pin & 0x07) {
    2036:	48 2f       	mov	r20, r24
    2038:	47 70       	andi	r20, 0x07	; 7
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	47 30       	cpi	r20, 0x07	; 7
    203e:	51 05       	cpc	r21, r1
    2040:	f0 f4       	brcc	.+60     	; 0x207e <nrk_gpio_get+0x4c>
    2042:	fa 01       	movw	r30, r20
    2044:	e2 56       	subi	r30, 0x62	; 98
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	86 95       	lsr	r24
    204a:	86 95       	lsr	r24
    204c:	86 95       	lsr	r24
    204e:	0c 94 18 2c 	jmp	0x5830	; 0x5830 <__tablejump2__>
                case NRK_PORTA:
                        return !!(PINA & BM((pin & 0xF8) >> 3));
    2052:	20 b1       	in	r18, 0x00	; 0
    2054:	0b c0       	rjmp	.+22     	; 0x206c <nrk_gpio_get+0x3a>
                case NRK_PORTB:
                        return !!(PINB & BM((pin & 0xF8) >> 3));
    2056:	23 b1       	in	r18, 0x03	; 3
    2058:	09 c0       	rjmp	.+18     	; 0x206c <nrk_gpio_get+0x3a>
                case NRK_PORTC:
                        return !!(PINC & BM((pin & 0xF8) >> 3));
    205a:	26 b1       	in	r18, 0x06	; 6
    205c:	07 c0       	rjmp	.+14     	; 0x206c <nrk_gpio_get+0x3a>
                case NRK_PORTD:
                        return !!(PIND & BM((pin & 0xF8) >> 3));
    205e:	29 b1       	in	r18, 0x09	; 9
    2060:	05 c0       	rjmp	.+10     	; 0x206c <nrk_gpio_get+0x3a>
                case NRK_PORTE:
                        return !!(PINE & BM((pin & 0xF8) >> 3));
    2062:	2c b1       	in	r18, 0x0c	; 12
    2064:	03 c0       	rjmp	.+6      	; 0x206c <nrk_gpio_get+0x3a>
                case NRK_PORTF:
                        return !!(PINF & BM((pin & 0xF8) >> 3));
    2066:	2f b1       	in	r18, 0x0f	; 15
    2068:	01 c0       	rjmp	.+2      	; 0x206c <nrk_gpio_get+0x3a>
                case NRK_PORTG:
                        return !!(PING & BM((pin & 0xF8) >> 3));
    206a:	22 b3       	in	r18, 0x12	; 18
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <nrk_gpio_get+0x42>
    2070:	35 95       	asr	r19
    2072:	27 95       	ror	r18
    2074:	8a 95       	dec	r24
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <nrk_gpio_get+0x3e>
    2078:	82 2f       	mov	r24, r18
    207a:	81 70       	andi	r24, 0x01	; 1
    207c:	08 95       	ret
                default: return -1;
    207e:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2080:	08 95       	ret

00002082 <nrk_gpio_toggle>:

int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
    2082:	8f 3f       	cpi	r24, 0xFF	; 255
    2084:	09 f4       	brne	.+2      	; 0x2088 <nrk_gpio_toggle+0x6>
    2086:	ef c0       	rjmp	.+478    	; 0x2266 <nrk_gpio_toggle+0x1e4>
        switch (pin & 0x07) {
    2088:	48 2f       	mov	r20, r24
    208a:	47 70       	andi	r20, 0x07	; 7
    208c:	50 e0       	ldi	r21, 0x00	; 0
    208e:	47 30       	cpi	r20, 0x07	; 7
    2090:	51 05       	cpc	r21, r1
    2092:	08 f0       	brcs	.+2      	; 0x2096 <nrk_gpio_toggle+0x14>
    2094:	e8 c0       	rjmp	.+464    	; 0x2266 <nrk_gpio_toggle+0x1e4>
    2096:	fa 01       	movw	r30, r20
    2098:	eb 55       	subi	r30, 0x5B	; 91
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	86 95       	lsr	r24
    209e:	86 95       	lsr	r24
    20a0:	86 95       	lsr	r24
    20a2:	0c 94 18 2c 	jmp	0x5830	; 0x5830 <__tablejump2__>
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    20a6:	20 b1       	in	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	08 2e       	mov	r0, r24
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <nrk_gpio_toggle+0x30>
    20ae:	35 95       	asr	r19
    20b0:	27 95       	ror	r18
    20b2:	0a 94       	dec	r0
    20b4:	e2 f7       	brpl	.-8      	; 0x20ae <nrk_gpio_toggle+0x2c>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    20b6:	92 b1       	in	r25, 0x02	; 2
int8_t nrk_gpio_toggle(uint8_t pin)
{
    if (pin == NRK_INVALID_PIN_VAL) return -1;
        switch (pin & 0x07) {
                case NRK_PORTA:
                        if ((PINA & BM((pin & 0xF8) >> 3)) == 0) {
    20b8:	20 fd       	sbrc	r18, 0
    20ba:	0a c0       	rjmp	.+20     	; 0x20d0 <nrk_gpio_toggle+0x4e>
                                do { PORTA |= BM((pin & 0xF8) >> 3); } while(0);
    20bc:	21 e0       	ldi	r18, 0x01	; 1
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	08 2e       	mov	r0, r24
    20c2:	01 c0       	rjmp	.+2      	; 0x20c6 <nrk_gpio_toggle+0x44>
    20c4:	22 0f       	add	r18, r18
    20c6:	0a 94       	dec	r0
    20c8:	ea f7       	brpl	.-6      	; 0x20c4 <nrk_gpio_toggle+0x42>
    20ca:	92 2b       	or	r25, r18
    20cc:	92 b9       	out	0x02, r25	; 2
    20ce:	1e c0       	rjmp	.+60     	; 0x210c <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
    20d0:	21 e0       	ldi	r18, 0x01	; 1
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	08 2e       	mov	r0, r24
    20d6:	01 c0       	rjmp	.+2      	; 0x20da <nrk_gpio_toggle+0x58>
    20d8:	22 0f       	add	r18, r18
    20da:	0a 94       	dec	r0
    20dc:	ea f7       	brpl	.-6      	; 0x20d8 <nrk_gpio_toggle+0x56>
    20de:	20 95       	com	r18
    20e0:	29 23       	and	r18, r25
    20e2:	22 b9       	out	0x02, r18	; 2
    20e4:	13 c0       	rjmp	.+38     	; 0x210c <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    20e6:	23 b1       	in	r18, 0x03	; 3
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	08 2e       	mov	r0, r24
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <nrk_gpio_toggle+0x70>
    20ee:	35 95       	asr	r19
    20f0:	27 95       	ror	r18
    20f2:	0a 94       	dec	r0
    20f4:	e2 f7       	brpl	.-8      	; 0x20ee <nrk_gpio_toggle+0x6c>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    20f6:	95 b1       	in	r25, 0x05	; 5
                        } else {
                                do { PORTA &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
    20f8:	20 fd       	sbrc	r18, 0
    20fa:	0a c0       	rjmp	.+20     	; 0x2110 <nrk_gpio_toggle+0x8e>
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
    20fc:	21 e0       	ldi	r18, 0x01	; 1
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	01 c0       	rjmp	.+2      	; 0x2104 <nrk_gpio_toggle+0x82>
    2102:	22 0f       	add	r18, r18
    2104:	8a 95       	dec	r24
    2106:	ea f7       	brpl	.-6      	; 0x2102 <nrk_gpio_toggle+0x80>
    2108:	92 2b       	or	r25, r18
    210a:	95 b9       	out	0x05, r25	; 5
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                 default: return -1;
        }
        return 1;
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	08 95       	ret
                        break;
                case NRK_PORTB:
                        if ((PINB & BM((pin & 0xF8) >> 3)) == 0) {
                                do { PORTB |= BM((pin & 0xF8) >> 3); } while(0);
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
    2110:	21 e0       	ldi	r18, 0x01	; 1
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	08 2e       	mov	r0, r24
    2116:	01 c0       	rjmp	.+2      	; 0x211a <nrk_gpio_toggle+0x98>
    2118:	22 0f       	add	r18, r18
    211a:	0a 94       	dec	r0
    211c:	ea f7       	brpl	.-6      	; 0x2118 <nrk_gpio_toggle+0x96>
    211e:	20 95       	com	r18
    2120:	29 23       	and	r18, r25
    2122:	25 b9       	out	0x05, r18	; 5
    2124:	f3 cf       	rjmp	.-26     	; 0x210c <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2126:	26 b1       	in	r18, 0x06	; 6
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	08 2e       	mov	r0, r24
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <nrk_gpio_toggle+0xb0>
    212e:	35 95       	asr	r19
    2130:	27 95       	ror	r18
    2132:	0a 94       	dec	r0
    2134:	e2 f7       	brpl	.-8      	; 0x212e <nrk_gpio_toggle+0xac>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    2136:	98 b1       	in	r25, 0x08	; 8
                        } else {
                                do { PORTB &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTC:
                        if ((PINC & BM((pin & 0xF8) >> 3)) == 0) {
    2138:	20 fd       	sbrc	r18, 0
    213a:	0a c0       	rjmp	.+20     	; 0x2150 <nrk_gpio_toggle+0xce>
                                do { PORTC |= BM((pin & 0xF8) >> 3); } while(0);
    213c:	21 e0       	ldi	r18, 0x01	; 1
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	08 2e       	mov	r0, r24
    2142:	01 c0       	rjmp	.+2      	; 0x2146 <nrk_gpio_toggle+0xc4>
    2144:	22 0f       	add	r18, r18
    2146:	0a 94       	dec	r0
    2148:	ea f7       	brpl	.-6      	; 0x2144 <nrk_gpio_toggle+0xc2>
    214a:	92 2b       	or	r25, r18
    214c:	98 b9       	out	0x08, r25	; 8
    214e:	de cf       	rjmp	.-68     	; 0x210c <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
    2150:	21 e0       	ldi	r18, 0x01	; 1
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	08 2e       	mov	r0, r24
    2156:	01 c0       	rjmp	.+2      	; 0x215a <nrk_gpio_toggle+0xd8>
    2158:	22 0f       	add	r18, r18
    215a:	0a 94       	dec	r0
    215c:	ea f7       	brpl	.-6      	; 0x2158 <nrk_gpio_toggle+0xd6>
    215e:	20 95       	com	r18
    2160:	29 23       	and	r18, r25
    2162:	28 b9       	out	0x08, r18	; 8
    2164:	d3 cf       	rjmp	.-90     	; 0x210c <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2166:	29 b1       	in	r18, 0x09	; 9
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	08 2e       	mov	r0, r24
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <nrk_gpio_toggle+0xf0>
    216e:	35 95       	asr	r19
    2170:	27 95       	ror	r18
    2172:	0a 94       	dec	r0
    2174:	e2 f7       	brpl	.-8      	; 0x216e <nrk_gpio_toggle+0xec>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    2176:	9b b1       	in	r25, 0x0b	; 11
                        } else {
                                do { PORTC &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTD:
                        if ((PIND & BM((pin & 0xF8) >> 3)) == 0) {
    2178:	20 fd       	sbrc	r18, 0
    217a:	0a c0       	rjmp	.+20     	; 0x2190 <nrk_gpio_toggle+0x10e>
                                do { PORTD |= BM((pin & 0xF8) >> 3); } while(0);
    217c:	21 e0       	ldi	r18, 0x01	; 1
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	08 2e       	mov	r0, r24
    2182:	01 c0       	rjmp	.+2      	; 0x2186 <nrk_gpio_toggle+0x104>
    2184:	22 0f       	add	r18, r18
    2186:	0a 94       	dec	r0
    2188:	ea f7       	brpl	.-6      	; 0x2184 <nrk_gpio_toggle+0x102>
    218a:	92 2b       	or	r25, r18
    218c:	9b b9       	out	0x0b, r25	; 11
    218e:	be cf       	rjmp	.-132    	; 0x210c <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
    2190:	21 e0       	ldi	r18, 0x01	; 1
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	08 2e       	mov	r0, r24
    2196:	01 c0       	rjmp	.+2      	; 0x219a <nrk_gpio_toggle+0x118>
    2198:	22 0f       	add	r18, r18
    219a:	0a 94       	dec	r0
    219c:	ea f7       	brpl	.-6      	; 0x2198 <nrk_gpio_toggle+0x116>
    219e:	20 95       	com	r18
    21a0:	29 23       	and	r18, r25
    21a2:	2b b9       	out	0x0b, r18	; 11
    21a4:	b3 cf       	rjmp	.-154    	; 0x210c <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    21a6:	2c b1       	in	r18, 0x0c	; 12
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	08 2e       	mov	r0, r24
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <nrk_gpio_toggle+0x130>
    21ae:	35 95       	asr	r19
    21b0:	27 95       	ror	r18
    21b2:	0a 94       	dec	r0
    21b4:	e2 f7       	brpl	.-8      	; 0x21ae <nrk_gpio_toggle+0x12c>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    21b6:	9e b1       	in	r25, 0x0e	; 14
                        } else {
                                do { PORTD &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTE:
                        if ((PINE & BM((pin & 0xF8) >> 3)) == 0) {
    21b8:	20 fd       	sbrc	r18, 0
    21ba:	0a c0       	rjmp	.+20     	; 0x21d0 <nrk_gpio_toggle+0x14e>
                                do { PORTE |= BM((pin & 0xF8) >> 3); } while(0);
    21bc:	21 e0       	ldi	r18, 0x01	; 1
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	08 2e       	mov	r0, r24
    21c2:	01 c0       	rjmp	.+2      	; 0x21c6 <nrk_gpio_toggle+0x144>
    21c4:	22 0f       	add	r18, r18
    21c6:	0a 94       	dec	r0
    21c8:	ea f7       	brpl	.-6      	; 0x21c4 <nrk_gpio_toggle+0x142>
    21ca:	92 2b       	or	r25, r18
    21cc:	9e b9       	out	0x0e, r25	; 14
    21ce:	9e cf       	rjmp	.-196    	; 0x210c <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
    21d0:	21 e0       	ldi	r18, 0x01	; 1
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	08 2e       	mov	r0, r24
    21d6:	01 c0       	rjmp	.+2      	; 0x21da <nrk_gpio_toggle+0x158>
    21d8:	22 0f       	add	r18, r18
    21da:	0a 94       	dec	r0
    21dc:	ea f7       	brpl	.-6      	; 0x21d8 <nrk_gpio_toggle+0x156>
    21de:	20 95       	com	r18
    21e0:	29 23       	and	r18, r25
    21e2:	2e b9       	out	0x0e, r18	; 14
    21e4:	93 cf       	rjmp	.-218    	; 0x210c <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    21e6:	2f b1       	in	r18, 0x0f	; 15
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	08 2e       	mov	r0, r24
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <nrk_gpio_toggle+0x170>
    21ee:	35 95       	asr	r19
    21f0:	27 95       	ror	r18
    21f2:	0a 94       	dec	r0
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <nrk_gpio_toggle+0x16c>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    21f6:	91 b3       	in	r25, 0x11	; 17
                        } else {
                                do { PORTE &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTF:
                        if ((PINF & BM((pin & 0xF8) >> 3)) == 0) {
    21f8:	20 fd       	sbrc	r18, 0
    21fa:	0a c0       	rjmp	.+20     	; 0x2210 <nrk_gpio_toggle+0x18e>
                                do { PORTF |= BM((pin & 0xF8) >> 3); } while(0);
    21fc:	21 e0       	ldi	r18, 0x01	; 1
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	08 2e       	mov	r0, r24
    2202:	01 c0       	rjmp	.+2      	; 0x2206 <nrk_gpio_toggle+0x184>
    2204:	22 0f       	add	r18, r18
    2206:	0a 94       	dec	r0
    2208:	ea f7       	brpl	.-6      	; 0x2204 <nrk_gpio_toggle+0x182>
    220a:	92 2b       	or	r25, r18
    220c:	91 bb       	out	0x11, r25	; 17
    220e:	7e cf       	rjmp	.-260    	; 0x210c <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
    2210:	21 e0       	ldi	r18, 0x01	; 1
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	08 2e       	mov	r0, r24
    2216:	01 c0       	rjmp	.+2      	; 0x221a <nrk_gpio_toggle+0x198>
    2218:	22 0f       	add	r18, r18
    221a:	0a 94       	dec	r0
    221c:	ea f7       	brpl	.-6      	; 0x2218 <nrk_gpio_toggle+0x196>
    221e:	20 95       	com	r18
    2220:	29 23       	and	r18, r25
    2222:	21 bb       	out	0x11, r18	; 17
    2224:	73 cf       	rjmp	.-282    	; 0x210c <nrk_gpio_toggle+0x8a>
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    2226:	22 b3       	in	r18, 0x12	; 18
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	08 2e       	mov	r0, r24
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <nrk_gpio_toggle+0x1b0>
    222e:	35 95       	asr	r19
    2230:	27 95       	ror	r18
    2232:	0a 94       	dec	r0
    2234:	e2 f7       	brpl	.-8      	; 0x222e <nrk_gpio_toggle+0x1ac>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    2236:	94 b3       	in	r25, 0x14	; 20
                        } else {
                                do { PORTF &= ~BM((pin & 0xF8) >> 3); } while(0);
                        }
                        break;
                case NRK_PORTG:
                        if ((PING & BM((pin & 0xF8) >> 3)) == 0) {
    2238:	20 fd       	sbrc	r18, 0
    223a:	0a c0       	rjmp	.+20     	; 0x2250 <nrk_gpio_toggle+0x1ce>
                                do { PORTG |= BM((pin & 0xF8) >> 3); } while(0);
    223c:	21 e0       	ldi	r18, 0x01	; 1
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	08 2e       	mov	r0, r24
    2242:	01 c0       	rjmp	.+2      	; 0x2246 <nrk_gpio_toggle+0x1c4>
    2244:	22 0f       	add	r18, r18
    2246:	0a 94       	dec	r0
    2248:	ea f7       	brpl	.-6      	; 0x2244 <nrk_gpio_toggle+0x1c2>
    224a:	92 2b       	or	r25, r18
    224c:	94 bb       	out	0x14, r25	; 20
    224e:	5e cf       	rjmp	.-324    	; 0x210c <nrk_gpio_toggle+0x8a>
                        } else {
                                do { PORTG &= ~BM((pin & 0xF8) >> 3); } while(0);
    2250:	21 e0       	ldi	r18, 0x01	; 1
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	08 2e       	mov	r0, r24
    2256:	01 c0       	rjmp	.+2      	; 0x225a <nrk_gpio_toggle+0x1d8>
    2258:	22 0f       	add	r18, r18
    225a:	0a 94       	dec	r0
    225c:	ea f7       	brpl	.-6      	; 0x2258 <nrk_gpio_toggle+0x1d6>
    225e:	20 95       	com	r18
    2260:	29 23       	and	r18, r25
    2262:	24 bb       	out	0x14, r18	; 20
    2264:	53 cf       	rjmp	.-346    	; 0x210c <nrk_gpio_toggle+0x8a>
                        }
                        break;
                 default: return -1;
    2266:	8f ef       	ldi	r24, 0xFF	; 255
        }
        return 1;
}
    2268:	08 95       	ret

0000226a <nrk_gpio_direction>:

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
    226a:	8f 3f       	cpi	r24, 0xFF	; 255
    226c:	09 f4       	brne	.+2      	; 0x2270 <nrk_gpio_direction+0x6>
    226e:	be c0       	rjmp	.+380    	; 0x23ec <nrk_gpio_direction+0x182>
    2270:	48 2f       	mov	r20, r24
    2272:	47 70       	andi	r20, 0x07	; 7
        if (pin_direction == NRK_PIN_INPUT) {
                switch (pin & 0x07) {
    2274:	50 e0       	ldi	r21, 0x00	; 0
}

int8_t nrk_gpio_direction(uint8_t pin, uint8_t pin_direction)
{
        if (pin == NRK_INVALID_PIN_VAL) return -1;
        if (pin_direction == NRK_PIN_INPUT) {
    2276:	61 11       	cpse	r22, r1
    2278:	60 c0       	rjmp	.+192    	; 0x233a <nrk_gpio_direction+0xd0>
                switch (pin & 0x07) {
    227a:	47 30       	cpi	r20, 0x07	; 7
    227c:	51 05       	cpc	r21, r1
    227e:	08 f0       	brcs	.+2      	; 0x2282 <nrk_gpio_direction+0x18>
    2280:	b5 c0       	rjmp	.+362    	; 0x23ec <nrk_gpio_direction+0x182>
    2282:	fa 01       	movw	r30, r20
    2284:	e4 55       	subi	r30, 0x54	; 84
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	86 95       	lsr	r24
    228a:	86 95       	lsr	r24
    228c:	86 95       	lsr	r24
    228e:	0c 94 18 2c 	jmp	0x5830	; 0x5830 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA &= ~BM((pin & 0xF8) >> 3); 
    2292:	91 b1       	in	r25, 0x01	; 1
    2294:	21 e0       	ldi	r18, 0x01	; 1
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	08 2e       	mov	r0, r24
    229a:	01 c0       	rjmp	.+2      	; 0x229e <nrk_gpio_direction+0x34>
    229c:	22 0f       	add	r18, r18
    229e:	0a 94       	dec	r0
    22a0:	ea f7       	brpl	.-6      	; 0x229c <nrk_gpio_direction+0x32>
    22a2:	20 95       	com	r18
    22a4:	29 23       	and	r18, r25
    22a6:	21 b9       	out	0x01, r18	; 1
    22a8:	9f c0       	rjmp	.+318    	; 0x23e8 <nrk_gpio_direction+0x17e>
                                //PORTA |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTB:
                                DDRB &= ~BM((pin & 0xF8) >> 3); 
    22aa:	94 b1       	in	r25, 0x04	; 4
    22ac:	21 e0       	ldi	r18, 0x01	; 1
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	08 2e       	mov	r0, r24
    22b2:	01 c0       	rjmp	.+2      	; 0x22b6 <nrk_gpio_direction+0x4c>
    22b4:	22 0f       	add	r18, r18
    22b6:	0a 94       	dec	r0
    22b8:	ea f7       	brpl	.-6      	; 0x22b4 <nrk_gpio_direction+0x4a>
    22ba:	20 95       	com	r18
    22bc:	29 23       	and	r18, r25
    22be:	24 b9       	out	0x04, r18	; 4
    22c0:	93 c0       	rjmp	.+294    	; 0x23e8 <nrk_gpio_direction+0x17e>
                                //PORTB |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTC:
                                DDRC &= ~BM((pin & 0xF8) >> 3); 
    22c2:	97 b1       	in	r25, 0x07	; 7
    22c4:	21 e0       	ldi	r18, 0x01	; 1
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	08 2e       	mov	r0, r24
    22ca:	01 c0       	rjmp	.+2      	; 0x22ce <nrk_gpio_direction+0x64>
    22cc:	22 0f       	add	r18, r18
    22ce:	0a 94       	dec	r0
    22d0:	ea f7       	brpl	.-6      	; 0x22cc <nrk_gpio_direction+0x62>
    22d2:	20 95       	com	r18
    22d4:	29 23       	and	r18, r25
    22d6:	27 b9       	out	0x07, r18	; 7
    22d8:	87 c0       	rjmp	.+270    	; 0x23e8 <nrk_gpio_direction+0x17e>
                                //PORTC |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTD:
                                DDRD &= ~BM((pin & 0xF8) >> 3); 
    22da:	9a b1       	in	r25, 0x0a	; 10
    22dc:	21 e0       	ldi	r18, 0x01	; 1
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	08 2e       	mov	r0, r24
    22e2:	01 c0       	rjmp	.+2      	; 0x22e6 <nrk_gpio_direction+0x7c>
    22e4:	22 0f       	add	r18, r18
    22e6:	0a 94       	dec	r0
    22e8:	ea f7       	brpl	.-6      	; 0x22e4 <nrk_gpio_direction+0x7a>
    22ea:	20 95       	com	r18
    22ec:	29 23       	and	r18, r25
    22ee:	2a b9       	out	0x0a, r18	; 10
    22f0:	7b c0       	rjmp	.+246    	; 0x23e8 <nrk_gpio_direction+0x17e>
                                //PORTD |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTE:
                                DDRE &= ~BM((pin & 0xF8) >> 3); 
    22f2:	9d b1       	in	r25, 0x0d	; 13
    22f4:	21 e0       	ldi	r18, 0x01	; 1
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	08 2e       	mov	r0, r24
    22fa:	01 c0       	rjmp	.+2      	; 0x22fe <nrk_gpio_direction+0x94>
    22fc:	22 0f       	add	r18, r18
    22fe:	0a 94       	dec	r0
    2300:	ea f7       	brpl	.-6      	; 0x22fc <nrk_gpio_direction+0x92>
    2302:	20 95       	com	r18
    2304:	29 23       	and	r18, r25
    2306:	2d b9       	out	0x0d, r18	; 13
    2308:	6f c0       	rjmp	.+222    	; 0x23e8 <nrk_gpio_direction+0x17e>
                                //PORTE |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTF:
                                DDRF &= ~BM((pin & 0xF8) >> 3);
    230a:	90 b3       	in	r25, 0x10	; 16
    230c:	21 e0       	ldi	r18, 0x01	; 1
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	08 2e       	mov	r0, r24
    2312:	01 c0       	rjmp	.+2      	; 0x2316 <nrk_gpio_direction+0xac>
    2314:	22 0f       	add	r18, r18
    2316:	0a 94       	dec	r0
    2318:	ea f7       	brpl	.-6      	; 0x2314 <nrk_gpio_direction+0xaa>
    231a:	20 95       	com	r18
    231c:	29 23       	and	r18, r25
    231e:	20 bb       	out	0x10, r18	; 16
    2320:	63 c0       	rjmp	.+198    	; 0x23e8 <nrk_gpio_direction+0x17e>
                                //PORTF |= BM((pin & 0xF8) >> 3); 
                                break;
                        case NRK_PORTG:
                                DDRG &= ~BM((pin & 0xF8) >> 3);
    2322:	93 b3       	in	r25, 0x13	; 19
    2324:	21 e0       	ldi	r18, 0x01	; 1
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	08 2e       	mov	r0, r24
    232a:	01 c0       	rjmp	.+2      	; 0x232e <nrk_gpio_direction+0xc4>
    232c:	22 0f       	add	r18, r18
    232e:	0a 94       	dec	r0
    2330:	ea f7       	brpl	.-6      	; 0x232c <nrk_gpio_direction+0xc2>
    2332:	20 95       	com	r18
    2334:	29 23       	and	r18, r25
    2336:	23 bb       	out	0x13, r18	; 19
    2338:	57 c0       	rjmp	.+174    	; 0x23e8 <nrk_gpio_direction+0x17e>
                                //PORTG |= BM((pin & 0xF8) >> 3); 
                                break;
                        default: return -1;
                }
        } else {
                switch (pin & 0x07) {
    233a:	47 30       	cpi	r20, 0x07	; 7
    233c:	51 05       	cpc	r21, r1
    233e:	08 f0       	brcs	.+2      	; 0x2342 <nrk_gpio_direction+0xd8>
    2340:	55 c0       	rjmp	.+170    	; 0x23ec <nrk_gpio_direction+0x182>
    2342:	fa 01       	movw	r30, r20
    2344:	ed 54       	subi	r30, 0x4D	; 77
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	86 95       	lsr	r24
    234a:	86 95       	lsr	r24
    234c:	86 95       	lsr	r24
    234e:	0c 94 18 2c 	jmp	0x5830	; 0x5830 <__tablejump2__>
                        case NRK_PORTA:
                                DDRA |= BM((pin & 0xF8) >> 3); break;
    2352:	91 b1       	in	r25, 0x01	; 1
    2354:	21 e0       	ldi	r18, 0x01	; 1
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	08 2e       	mov	r0, r24
    235a:	01 c0       	rjmp	.+2      	; 0x235e <nrk_gpio_direction+0xf4>
    235c:	22 0f       	add	r18, r18
    235e:	0a 94       	dec	r0
    2360:	ea f7       	brpl	.-6      	; 0x235c <nrk_gpio_direction+0xf2>
    2362:	92 2b       	or	r25, r18
    2364:	91 b9       	out	0x01, r25	; 1
    2366:	40 c0       	rjmp	.+128    	; 0x23e8 <nrk_gpio_direction+0x17e>
                        case NRK_PORTB:
                                DDRB |= BM((pin & 0xF8) >> 3); break;
    2368:	94 b1       	in	r25, 0x04	; 4
    236a:	21 e0       	ldi	r18, 0x01	; 1
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	08 2e       	mov	r0, r24
    2370:	01 c0       	rjmp	.+2      	; 0x2374 <nrk_gpio_direction+0x10a>
    2372:	22 0f       	add	r18, r18
    2374:	0a 94       	dec	r0
    2376:	ea f7       	brpl	.-6      	; 0x2372 <nrk_gpio_direction+0x108>
    2378:	92 2b       	or	r25, r18
    237a:	94 b9       	out	0x04, r25	; 4
    237c:	35 c0       	rjmp	.+106    	; 0x23e8 <nrk_gpio_direction+0x17e>
                        case NRK_PORTC:
                                DDRC |= BM((pin & 0xF8) >> 3); break;
    237e:	97 b1       	in	r25, 0x07	; 7
    2380:	21 e0       	ldi	r18, 0x01	; 1
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	08 2e       	mov	r0, r24
    2386:	01 c0       	rjmp	.+2      	; 0x238a <nrk_gpio_direction+0x120>
    2388:	22 0f       	add	r18, r18
    238a:	0a 94       	dec	r0
    238c:	ea f7       	brpl	.-6      	; 0x2388 <nrk_gpio_direction+0x11e>
    238e:	92 2b       	or	r25, r18
    2390:	97 b9       	out	0x07, r25	; 7
    2392:	2a c0       	rjmp	.+84     	; 0x23e8 <nrk_gpio_direction+0x17e>
                        case NRK_PORTD:
                                DDRD |= BM((pin & 0xF8) >> 3); break;
    2394:	9a b1       	in	r25, 0x0a	; 10
    2396:	21 e0       	ldi	r18, 0x01	; 1
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	08 2e       	mov	r0, r24
    239c:	01 c0       	rjmp	.+2      	; 0x23a0 <nrk_gpio_direction+0x136>
    239e:	22 0f       	add	r18, r18
    23a0:	0a 94       	dec	r0
    23a2:	ea f7       	brpl	.-6      	; 0x239e <nrk_gpio_direction+0x134>
    23a4:	92 2b       	or	r25, r18
    23a6:	9a b9       	out	0x0a, r25	; 10
    23a8:	1f c0       	rjmp	.+62     	; 0x23e8 <nrk_gpio_direction+0x17e>
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
    23aa:	9d b1       	in	r25, 0x0d	; 13
    23ac:	21 e0       	ldi	r18, 0x01	; 1
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	08 2e       	mov	r0, r24
    23b2:	01 c0       	rjmp	.+2      	; 0x23b6 <nrk_gpio_direction+0x14c>
    23b4:	22 0f       	add	r18, r18
    23b6:	0a 94       	dec	r0
    23b8:	ea f7       	brpl	.-6      	; 0x23b4 <nrk_gpio_direction+0x14a>
    23ba:	92 2b       	or	r25, r18
    23bc:	9d b9       	out	0x0d, r25	; 13
    23be:	14 c0       	rjmp	.+40     	; 0x23e8 <nrk_gpio_direction+0x17e>
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
    23c0:	90 b3       	in	r25, 0x10	; 16
    23c2:	21 e0       	ldi	r18, 0x01	; 1
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	08 2e       	mov	r0, r24
    23c8:	01 c0       	rjmp	.+2      	; 0x23cc <nrk_gpio_direction+0x162>
    23ca:	22 0f       	add	r18, r18
    23cc:	0a 94       	dec	r0
    23ce:	ea f7       	brpl	.-6      	; 0x23ca <nrk_gpio_direction+0x160>
    23d0:	92 2b       	or	r25, r18
    23d2:	90 bb       	out	0x10, r25	; 16
    23d4:	09 c0       	rjmp	.+18     	; 0x23e8 <nrk_gpio_direction+0x17e>
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    23d6:	93 b3       	in	r25, 0x13	; 19
    23d8:	21 e0       	ldi	r18, 0x01	; 1
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	01 c0       	rjmp	.+2      	; 0x23e0 <nrk_gpio_direction+0x176>
    23de:	22 0f       	add	r18, r18
    23e0:	8a 95       	dec	r24
    23e2:	ea f7       	brpl	.-6      	; 0x23de <nrk_gpio_direction+0x174>
    23e4:	92 2b       	or	r25, r18
    23e6:	93 bb       	out	0x13, r25	; 19
                        default: return -1;
                }
        }
        return 1;
    23e8:	81 e0       	ldi	r24, 0x01	; 1
                        case NRK_PORTE:
                                DDRE |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTF:
                                DDRF |= BM((pin & 0xF8) >> 3); break;
                        case NRK_PORTG:
                                DDRG |= BM((pin & 0xF8) >> 3); break;
    23ea:	08 95       	ret
                        default: return -1;
    23ec:	8f ef       	ldi	r24, 0xFF	; 255
                }
        }
        return 1;
}
    23ee:	08 95       	ret

000023f0 <nrk_get_button>:

int8_t nrk_get_button(uint8_t b)
{
if(b==0) {
    23f0:	81 11       	cpse	r24, r1
    23f2:	06 c0       	rjmp	.+12     	; 0x2400 <nrk_get_button+0x10>
	 return( !(PINA & BM(BUTTON))); 
    23f4:	80 b1       	in	r24, 0x00	; 0
    23f6:	86 95       	lsr	r24
    23f8:	81 70       	andi	r24, 0x01	; 1
    23fa:	91 e0       	ldi	r25, 0x01	; 1
    23fc:	89 27       	eor	r24, r25
    23fe:	08 95       	ret
	} 
return -1;
    2400:	8f ef       	ldi	r24, 0xFF	; 255
}
    2402:	08 95       	ret

00002404 <nrk_led_toggle>:

int8_t nrk_led_toggle( int led )
{
if(led==0) { nrk_gpio_toggle(NRK_LED_0); return 1; }
    2404:	00 97       	sbiw	r24, 0x00	; 0
    2406:	11 f4       	brne	.+4      	; 0x240c <nrk_led_toggle+0x8>
    2408:	83 e2       	ldi	r24, 0x23	; 35
    240a:	0d c0       	rjmp	.+26     	; 0x2426 <nrk_led_toggle+0x22>
if(led==1) { nrk_gpio_toggle(NRK_LED_1); return 1; }
    240c:	81 30       	cpi	r24, 0x01	; 1
    240e:	91 05       	cpc	r25, r1
    2410:	11 f4       	brne	.+4      	; 0x2416 <nrk_led_toggle+0x12>
    2412:	8b e2       	ldi	r24, 0x2B	; 43
    2414:	08 c0       	rjmp	.+16     	; 0x2426 <nrk_led_toggle+0x22>
if(led==2) { nrk_gpio_toggle(NRK_LED_2); return 1; }
    2416:	82 30       	cpi	r24, 0x02	; 2
    2418:	91 05       	cpc	r25, r1
    241a:	11 f4       	brne	.+4      	; 0x2420 <nrk_led_toggle+0x1c>
    241c:	83 e3       	ldi	r24, 0x33	; 51
    241e:	03 c0       	rjmp	.+6      	; 0x2426 <nrk_led_toggle+0x22>
if(led==3) { nrk_gpio_toggle(NRK_LED_3); return 1; }
    2420:	03 97       	sbiw	r24, 0x03	; 3
    2422:	29 f4       	brne	.+10     	; 0x242e <nrk_led_toggle+0x2a>
    2424:	8b e3       	ldi	r24, 0x3B	; 59
    2426:	0e 94 41 10 	call	0x2082	; 0x2082 <nrk_gpio_toggle>
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	08 95       	ret
return -1;
    242e:	8f ef       	ldi	r24, 0xFF	; 255
}
    2430:	08 95       	ret

00002432 <nrk_led_clr>:

int8_t nrk_led_clr( int led )
{
if(led==0) { nrk_gpio_set(NRK_LED_0); return 1; }
    2432:	00 97       	sbiw	r24, 0x00	; 0
    2434:	11 f4       	brne	.+4      	; 0x243a <nrk_led_clr+0x8>
    2436:	83 e2       	ldi	r24, 0x23	; 35
    2438:	0d c0       	rjmp	.+26     	; 0x2454 <nrk_led_clr+0x22>
if(led==1) { nrk_gpio_set(NRK_LED_1); return 1; }
    243a:	81 30       	cpi	r24, 0x01	; 1
    243c:	91 05       	cpc	r25, r1
    243e:	11 f4       	brne	.+4      	; 0x2444 <nrk_led_clr+0x12>
    2440:	8b e2       	ldi	r24, 0x2B	; 43
    2442:	08 c0       	rjmp	.+16     	; 0x2454 <nrk_led_clr+0x22>
if(led==2) { nrk_gpio_set(NRK_LED_2); return 1; }
    2444:	82 30       	cpi	r24, 0x02	; 2
    2446:	91 05       	cpc	r25, r1
    2448:	11 f4       	brne	.+4      	; 0x244e <nrk_led_clr+0x1c>
    244a:	83 e3       	ldi	r24, 0x33	; 51
    244c:	03 c0       	rjmp	.+6      	; 0x2454 <nrk_led_clr+0x22>
if(led==3) { nrk_gpio_set(NRK_LED_3); return 1; }
    244e:	03 97       	sbiw	r24, 0x03	; 3
    2450:	29 f4       	brne	.+10     	; 0x245c <nrk_led_clr+0x2a>
    2452:	8b e3       	ldi	r24, 0x3B	; 59
    2454:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <nrk_gpio_set>
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	08 95       	ret
return -1;
    245c:	8f ef       	ldi	r24, 0xFF	; 255
}
    245e:	08 95       	ret

00002460 <nrk_led_set>:

int8_t nrk_led_set( int led )
{
if(led==0) { nrk_gpio_clr(NRK_LED_0); return 1; }
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	11 f4       	brne	.+4      	; 0x2468 <nrk_led_set+0x8>
    2464:	83 e2       	ldi	r24, 0x23	; 35
    2466:	0d c0       	rjmp	.+26     	; 0x2482 <nrk_led_set+0x22>
if(led==1) { nrk_gpio_clr(NRK_LED_1); return 1; }
    2468:	81 30       	cpi	r24, 0x01	; 1
    246a:	91 05       	cpc	r25, r1
    246c:	11 f4       	brne	.+4      	; 0x2472 <nrk_led_set+0x12>
    246e:	8b e2       	ldi	r24, 0x2B	; 43
    2470:	08 c0       	rjmp	.+16     	; 0x2482 <nrk_led_set+0x22>
if(led==2) { nrk_gpio_clr(NRK_LED_2); return 1; }
    2472:	82 30       	cpi	r24, 0x02	; 2
    2474:	91 05       	cpc	r25, r1
    2476:	11 f4       	brne	.+4      	; 0x247c <nrk_led_set+0x1c>
    2478:	83 e3       	ldi	r24, 0x33	; 51
    247a:	03 c0       	rjmp	.+6      	; 0x2482 <nrk_led_set+0x22>
if(led==3) { nrk_gpio_clr(NRK_LED_3); return 1; }
    247c:	03 97       	sbiw	r24, 0x03	; 3
    247e:	29 f4       	brne	.+10     	; 0x248a <nrk_led_set+0x2a>
    2480:	8b e3       	ldi	r24, 0x3B	; 59
    2482:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <nrk_gpio_clr>
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	08 95       	ret
return -1;
    248a:	8f ef       	ldi	r24, 0xFF	; 255
}
    248c:	08 95       	ret

0000248e <nrk_gpio_pullups>:

int8_t nrk_gpio_pullups(uint8_t enable)
{
if(enable) MCUCR &= ~BM(PUD);
    248e:	88 23       	and	r24, r24
    2490:	19 f0       	breq	.+6      	; 0x2498 <nrk_gpio_pullups+0xa>
    2492:	85 b7       	in	r24, 0x35	; 53
    2494:	8f 7e       	andi	r24, 0xEF	; 239
    2496:	02 c0       	rjmp	.+4      	; 0x249c <nrk_gpio_pullups+0xe>
else MCUCR |= BM(PUD);
    2498:	85 b7       	in	r24, 0x35	; 53
    249a:	80 61       	ori	r24, 0x10	; 16
    249c:	85 bf       	out	0x35, r24	; 53
return NRK_OK;
}
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	08 95       	ret

000024a2 <putc1>:
     UART0_WAIT_AND_SEND(x);
}

void putc1(char x)
{
     UART1_WAIT_AND_SEND(x);
    24a2:	90 91 c8 00 	lds	r25, 0x00C8
    24a6:	95 ff       	sbrs	r25, 5
    24a8:	fc cf       	rjmp	.-8      	; 0x24a2 <putc1>
    24aa:	80 93 ce 00 	sts	0x00CE, r24
    24ae:	08 95       	ret

000024b0 <setup_uart0>:
}

void setup_uart0(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART0( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    24b0:	90 93 c5 00 	sts	0x00C5, r25
    24b4:	80 93 c4 00 	sts	0x00C4, r24
    24b8:	86 e0       	ldi	r24, 0x06	; 6
    24ba:	80 93 c2 00 	sts	0x00C2, r24
    24be:	e1 ec       	ldi	r30, 0xC1	; 193
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	8b 7f       	andi	r24, 0xFB	; 251
    24c6:	80 83       	st	Z, r24
    24c8:	a0 ec       	ldi	r26, 0xC0	; 192
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	8c 91       	ld	r24, X
    24ce:	82 60       	ori	r24, 0x02	; 2
    24d0:	8c 93       	st	X, r24
ENABLE_UART0();
    24d2:	80 81       	ld	r24, Z
    24d4:	88 61       	ori	r24, 0x18	; 24
    24d6:	80 83       	st	Z, r24
    24d8:	08 95       	ret

000024da <setup_uart1>:
}

void setup_uart1(uint16_t baudrate)
{
//INIT_UART1( UART_BAUDRATE_115K2, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
INIT_UART1( baudrate, (UART_OPT_NO_PARITY|UART_OPT_8_BITS_PER_CHAR|UART_OPT_ONE_STOP_BIT));
    24da:	90 93 cd 00 	sts	0x00CD, r25
    24de:	80 93 cc 00 	sts	0x00CC, r24
    24e2:	86 e0       	ldi	r24, 0x06	; 6
    24e4:	80 93 ca 00 	sts	0x00CA, r24
    24e8:	e9 ec       	ldi	r30, 0xC9	; 201
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	8b 7f       	andi	r24, 0xFB	; 251
    24f0:	80 83       	st	Z, r24
    24f2:	a8 ec       	ldi	r26, 0xC8	; 200
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	8c 91       	ld	r24, X
    24f8:	82 60       	ori	r24, 0x02	; 2
    24fa:	8c 93       	st	X, r24
ENABLE_UART1();
    24fc:	80 81       	ld	r24, Z
    24fe:	88 61       	ori	r24, 0x18	; 24
    2500:	80 83       	st	Z, r24
    2502:	08 95       	ret

00002504 <nrk_setup_uart>:

//  setup_uart1(baudrate);
//  stdout = fdevopen( (void *)putc1, (void *)getc1);
//  stdin = fdevopen( (void *)putc1, (void *)getc1);

  setup_uart0(baudrate);
    2504:	0e 94 58 12 	call	0x24b0	; 0x24b0 <setup_uart0>

  stdout = fdevopen( (void *)putc0, (void *)getc0);
    2508:	62 e1       	ldi	r22, 0x12	; 18
    250a:	7f e0       	ldi	r23, 0x0F	; 15
    250c:	8e e1       	ldi	r24, 0x1E	; 30
    250e:	9f e0       	ldi	r25, 0x0F	; 15
    2510:	0e 94 4a 2c 	call	0x5894	; 0x5894 <fdevopen>
    2514:	90 93 05 06 	sts	0x0605, r25
    2518:	80 93 04 06 	sts	0x0604, r24
  stdin = fdevopen( (void *)putc0, (void *)getc0);
    251c:	62 e1       	ldi	r22, 0x12	; 18
    251e:	7f e0       	ldi	r23, 0x0F	; 15
    2520:	8e e1       	ldi	r24, 0x1E	; 30
    2522:	9f e0       	ldi	r25, 0x0F	; 15
    2524:	0e 94 4a 2c 	call	0x5894	; 0x5894 <fdevopen>
    2528:	90 93 03 06 	sts	0x0603, r25
    252c:	80 93 02 06 	sts	0x0602, r24
    2530:	08 95       	ret

00002532 <getc1>:

char getc1()
{
char tmp;

UART1_WAIT_AND_RECEIVE(tmp);
    2532:	80 91 c8 00 	lds	r24, 0x00C8
    2536:	87 ff       	sbrs	r24, 7
    2538:	fc cf       	rjmp	.-8      	; 0x2532 <getc1>
    253a:	80 91 c8 00 	lds	r24, 0x00C8
    253e:	8f 77       	andi	r24, 0x7F	; 127
    2540:	80 93 c8 00 	sts	0x00C8, r24
    2544:	80 91 ce 00 	lds	r24, 0x00CE
return tmp;
}
    2548:	08 95       	ret

0000254a <halWait>:
	...
    do {
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	c9 f7       	brne	.-14     	; 0x254a <halWait>

} // halWait
    2558:	08 95       	ret

0000255a <nrk_eeprom_read_byte>:
#include <nrk_error.h>

uint8_t nrk_eeprom_read_byte( uint16_t addr )
{
uint8_t v;
v=eeprom_read_byte((uint8_t*)addr);
    255a:	0c 94 99 2d 	jmp	0x5b32	; 0x5b32 <__eerd_byte_m128rfa1>

0000255e <nrk_eeprom_write_byte>:
return v;
}

int8_t nrk_eeprom_write_byte( uint16_t addr, uint8_t value )
{
eeprom_write_byte( (uint8_t*)addr, value );
    255e:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <__eewr_byte_m128rfa1>
}
    2562:	08 95       	ret

00002564 <read_eeprom_mac_address>:

int8_t read_eeprom_mac_address(uint32_t *mac_addr)
{
    2564:	ef 92       	push	r14
    2566:	ff 92       	push	r15
    2568:	0f 93       	push	r16
    256a:	1f 93       	push	r17
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	ec 01       	movw	r28, r24
uint8_t checksum,ct;
uint8_t *buf;
buf=(uint8_t *)mac_addr;
checksum=buf[0]+buf[1]+buf[2]+buf[3];
buf[3]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_0);
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <__eerd_byte_m128rfa1>
    257a:	f8 2e       	mov	r15, r24
    257c:	8b 83       	std	Y+3, r24	; 0x03
buf[2]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_1);
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <__eerd_byte_m128rfa1>
    2586:	e8 2e       	mov	r14, r24
    2588:	8a 83       	std	Y+2, r24	; 0x02
buf[1]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_2);
    258a:	82 e0       	ldi	r24, 0x02	; 2
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <__eerd_byte_m128rfa1>
    2592:	08 2f       	mov	r16, r24
    2594:	89 83       	std	Y+1, r24	; 0x01
buf[0]=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_3);
    2596:	83 e0       	ldi	r24, 0x03	; 3
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <__eerd_byte_m128rfa1>
    259e:	18 2f       	mov	r17, r24
    25a0:	88 83       	st	Y, r24
checksum=eeprom_read_byte ((uint8_t*)EE_MAC_ADDR_CHKSUM);
    25a2:	84 e0       	ldi	r24, 0x04	; 4
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <__eerd_byte_m128rfa1>
ct=buf[0];
ct+=buf[1];
    25aa:	9e 2d       	mov	r25, r14
    25ac:	9f 0d       	add	r25, r15
ct+=buf[2];
    25ae:	90 0f       	add	r25, r16
ct+=buf[3];
    25b0:	91 0f       	add	r25, r17
if(checksum==ct) return NRK_OK;
    25b2:	89 13       	cpse	r24, r25
    25b4:	02 c0       	rjmp	.+4      	; 0x25ba <read_eeprom_mac_address+0x56>
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	01 c0       	rjmp	.+2      	; 0x25bc <read_eeprom_mac_address+0x58>

return NRK_ERROR;
    25ba:	8f ef       	ldi	r24, 0xFF	; 255
}
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	1f 91       	pop	r17
    25c2:	0f 91       	pop	r16
    25c4:	ff 90       	pop	r15
    25c6:	ef 90       	pop	r14
    25c8:	08 95       	ret

000025ca <read_eeprom_channel>:

int8_t read_eeprom_channel(uint8_t *channel)
{
    25ca:	cf 93       	push	r28
    25cc:	df 93       	push	r29
    25ce:	ec 01       	movw	r28, r24
  *channel=eeprom_read_byte ((uint8_t*)EE_CHANNEL);
    25d0:	85 e0       	ldi	r24, 0x05	; 5
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <__eerd_byte_m128rfa1>
    25d8:	88 83       	st	Y, r24
return NRK_OK;
}
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	df 91       	pop	r29
    25de:	cf 91       	pop	r28
    25e0:	08 95       	ret

000025e2 <write_eeprom_load_img_pages>:

int8_t write_eeprom_load_img_pages(uint8_t *load_pages)
{
  eeprom_write_byte ((uint8_t*)EE_LOAD_IMG_PAGES, *load_pages);
    25e2:	fc 01       	movw	r30, r24
    25e4:	60 81       	ld	r22, Z
    25e6:	86 e0       	ldi	r24, 0x06	; 6
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	08 95       	ret

000025f2 <read_eeprom_load_img_pages>:

int8_t read_eeprom_load_img_pages(uint8_t *load_pages)
{
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
    25f6:	ec 01       	movw	r28, r24
  *load_pages=eeprom_read_byte ((uint8_t*)EE_LOAD_IMG_PAGES);
    25f8:	86 e0       	ldi	r24, 0x06	; 6
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <__eerd_byte_m128rfa1>
    2600:	88 83       	st	Y, r24
  return NRK_OK;
}
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	df 91       	pop	r29
    2606:	cf 91       	pop	r28
    2608:	08 95       	ret

0000260a <read_eeprom_aes_key>:

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
    260a:	0f 93       	push	r16
    260c:	1f 93       	push	r17
    260e:	cf 93       	push	r28
    2610:	df 93       	push	r29
    2612:	8c 01       	movw	r16, r24
    2614:	c8 e0       	ldi	r28, 0x08	; 8
    2616:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
    2618:	ce 01       	movw	r24, r28
    261a:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <__eerd_byte_m128rfa1>
    261e:	f8 01       	movw	r30, r16
    2620:	81 93       	st	Z+, r24
    2622:	8f 01       	movw	r16, r30
    2624:	21 96       	adiw	r28, 0x01	; 1
}

int8_t read_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2626:	c8 31       	cpi	r28, 0x18	; 24
    2628:	d1 05       	cpc	r29, r1
    262a:	b1 f7       	brne	.-20     	; 0x2618 <read_eeprom_aes_key+0xe>
  aes_key[i]=eeprom_read_byte ((uint8_t*)(EE_AES_KEY+i));
  return NRK_OK;
}
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	1f 91       	pop	r17
    2634:	0f 91       	pop	r16
    2636:	08 95       	ret

00002638 <write_eeprom_aes_key>:

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
    2638:	0f 93       	push	r16
    263a:	1f 93       	push	r17
    263c:	cf 93       	push	r28
    263e:	df 93       	push	r29
    2640:	8c 01       	movw	r16, r24
    2642:	c8 e0       	ldi	r28, 0x08	; 8
    2644:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t i;
for(i=0; i<16; i++ )
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
    2646:	f8 01       	movw	r30, r16
    2648:	61 91       	ld	r22, Z+
    264a:	8f 01       	movw	r16, r30
    264c:	ce 01       	movw	r24, r28
    264e:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <__eewr_byte_m128rfa1>
    2652:	21 96       	adiw	r28, 0x01	; 1
}

int8_t write_eeprom_aes_key(uint8_t *aes_key)
{
uint8_t i;
for(i=0; i<16; i++ )
    2654:	c8 31       	cpi	r28, 0x18	; 24
    2656:	d1 05       	cpc	r29, r1
    2658:	b1 f7       	brne	.-20     	; 0x2646 <write_eeprom_aes_key+0xe>
  eeprom_write_byte ((uint8_t*)(EE_AES_KEY+i),aes_key[i]);
  return NRK_OK;
}
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	df 91       	pop	r29
    265e:	cf 91       	pop	r28
    2660:	1f 91       	pop	r17
    2662:	0f 91       	pop	r16
    2664:	08 95       	ret

00002666 <read_eeprom_current_image_checksum>:

int8_t read_eeprom_current_image_checksum(uint8_t *image_checksum)
{
    2666:	cf 93       	push	r28
    2668:	df 93       	push	r29
    266a:	ec 01       	movw	r28, r24
  *image_checksum=eeprom_read_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM);
    266c:	87 e0       	ldi	r24, 0x07	; 7
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	0e 94 99 2d 	call	0x5b32	; 0x5b32 <__eerd_byte_m128rfa1>
    2674:	88 83       	st	Y, r24
  return NRK_OK;
}
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	df 91       	pop	r29
    267a:	cf 91       	pop	r28
    267c:	08 95       	ret

0000267e <write_eeprom_current_image_checksum>:

int8_t write_eeprom_current_image_checksum(uint8_t *image_checksum)
{
  eeprom_write_byte ((uint8_t*)EE_CURRENT_IMAGE_CHECKSUM, *image_checksum);
    267e:	fc 01       	movw	r30, r24
    2680:	60 81       	ld	r22, Z
    2682:	87 e0       	ldi	r24, 0x07	; 7
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	0e 94 a1 2d 	call	0x5b42	; 0x5b42 <__eewr_byte_m128rfa1>
  return NRK_OK;
}
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	08 95       	ret

0000268e <nrk_int_disable>:
#include <nrk_reserve.h>
#include <nrk_cfg.h>
#include <nrk_stats.h>

inline void nrk_int_disable(void) {
  DISABLE_GLOBAL_INT();
    268e:	f8 94       	cli
    2690:	08 95       	ret

00002692 <nrk_int_enable>:
};

inline void nrk_int_enable(void) {
  ENABLE_GLOBAL_INT();
    2692:	78 94       	sei
    2694:	08 95       	ret

00002696 <nrk_halt>:
uint8_t nrk_task_init_cnt;


void nrk_halt()
{
nrk_int_disable();
    2696:	0e 94 47 13 	call	0x268e	; 0x268e <nrk_int_disable>
    269a:	ff cf       	rjmp	.-2      	; 0x269a <nrk_halt+0x4>

0000269c <nrk_init>:
 *  - Init global variables
 *  - Init event list
 *  - Create idle task
 */
void nrk_init()
{
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	a3 97       	sbiw	r28, 0x23	; 35
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
	
    uint8_t i;	
//    unsigned char *stkc;
	
   nrk_task_type IdleTask;
   nrk_wakeup_signal = nrk_signal_create();
    26b0:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <nrk_signal_create>
    26b4:	80 93 d1 05 	sts	0x05D1, r24
   if(nrk_wakeup_signal==NRK_ERROR) nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,0);
    26b8:	8f 3f       	cpi	r24, 0xFF	; 255
    26ba:	21 f4       	brne	.+8      	; 0x26c4 <nrk_init+0x28>
    26bc:	60 e0       	ldi	r22, 0x00	; 0
    26be:	8e e0       	ldi	r24, 0x0E	; 14
    26c0:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <nrk_kernel_error_add>
   //if((volatile)TCCR1B!=0) nrk_kernel_error_add(NRK_STACK_OVERFLOW,0); 
#ifndef NRK_SOFT_REBOOT_ON_ERROR
   i=_nrk_startup_error();
    26c4:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <_nrk_startup_error>
   if((i&0x1)!=0) nrk_kernel_error_add(NRK_BAD_STARTUP,0);
    26c8:	80 ff       	sbrs	r24, 0
    26ca:	04 c0       	rjmp	.+8      	; 0x26d4 <nrk_init+0x38>
    26cc:	60 e0       	ldi	r22, 0x00	; 0
    26ce:	86 e0       	ldi	r24, 0x06	; 6
    26d0:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <nrk_kernel_error_add>
*/	
 
   // printf( "Init kernel_entry= %d %d\n",kernel_entry[1], kernel_entry[0] );

    
    nrk_cur_task_prio = 0;
    26d4:	10 92 d4 05 	sts	0x05D4, r1
    nrk_cur_task_TCB = NULL;
    26d8:	10 92 e2 05 	sts	0x05E2, r1
    26dc:	10 92 e1 05 	sts	0x05E1, r1
    
    nrk_high_ready_TCB = NULL;
    26e0:	10 92 d3 05 	sts	0x05D3, r1
    26e4:	10 92 d2 05 	sts	0x05D2, r1
    nrk_high_ready_prio = 0; 
    26e8:	10 92 e3 05 	sts	0x05E3, r1
    #ifdef NRK_MAX_RESERVES 
    // Setup the reserve structures
    _nrk_reserve_init();
    #endif

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;
    26ec:	10 92 e0 05 	sts	0x05E0, r1

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    26f0:	8f ef       	ldi	r24, 0xFF	; 255
    26f2:	80 93 ca 05 	sts	0x05CA, r24
    nrk_sem_list[i].value=-1;
    26f6:	80 93 cc 05 	sts	0x05CC, r24
    nrk_sem_list[i].resource_ceiling=-1;
    26fa:	80 93 cb 05 	sts	0x05CB, r24

    _nrk_resource_cnt=0; //NRK_MAX_RESOURCE_CNT;

for(i=0;i<NRK_MAX_RESOURCE_CNT;i++)
{
    nrk_sem_list[i].count=-1;
    26fe:	80 93 cd 05 	sts	0x05CD, r24
    nrk_sem_list[i].value=-1;
    2702:	80 93 cf 05 	sts	0x05CF, r24
    nrk_sem_list[i].resource_ceiling=-1;
    2706:	80 93 ce 05 	sts	0x05CE, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    270a:	93 e6       	ldi	r25, 0x63	; 99
    270c:	90 93 7c 05 	sts	0x057C, r25
        nrk_task_TCB[i].task_ID = -1; 
    2710:	80 93 7a 05 	sts	0x057A, r24
    //nrk_resource_ceiling[i]=-1;
    
}        
    for (i= 0; i<NRK_MAX_TASKS; i++)
	{
        nrk_task_TCB[i].task_prio = TCB_EMPTY_PRIO;
    2714:	90 93 a7 05 	sts	0x05A7, r25
        nrk_task_TCB[i].task_ID = -1; 
    2718:	80 93 a5 05 	sts	0x05A5, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    271c:	29 ee       	ldi	r18, 0xE9	; 233
    271e:	35 e0       	ldi	r19, 0x05	; 5
    2720:	30 93 e8 05 	sts	0x05E8, r19
    2724:	20 93 e7 05 	sts	0x05E7, r18
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2728:	84 ee       	ldi	r24, 0xE4	; 228
    272a:	95 e0       	ldi	r25, 0x05	; 5
    272c:	90 93 eb 05 	sts	0x05EB, r25
    2730:	80 93 ea 05 	sts	0x05EA, r24
  
       
    // Setup a double linked list of Ready Tasks 
    for (i=0;i<NRK_MAX_TASKS;i++)
	{
		_nrk_readyQ[i].Next	=	&_nrk_readyQ[i+1];
    2734:	4e ee       	ldi	r20, 0xEE	; 238
    2736:	55 e0       	ldi	r21, 0x05	; 5
    2738:	50 93 ed 05 	sts	0x05ED, r21
    273c:	40 93 ec 05 	sts	0x05EC, r20
		_nrk_readyQ[i+1].Prev	=	&_nrk_readyQ[i];
    2740:	30 93 f0 05 	sts	0x05F0, r19
    2744:	20 93 ef 05 	sts	0x05EF, r18
	}
	
	_nrk_readyQ[0].Prev	=	NULL;
    2748:	10 92 e6 05 	sts	0x05E6, r1
    274c:	10 92 e5 05 	sts	0x05E5, r1
	_nrk_readyQ[NRK_MAX_TASKS].Next	=	NULL;
    2750:	10 92 f2 05 	sts	0x05F2, r1
    2754:	10 92 f1 05 	sts	0x05F1, r1
	_head_node = NULL;
    2758:	10 92 d7 05 	sts	0x05D7, r1
    275c:	10 92 d6 05 	sts	0x05D6, r1
	_free_node = &_nrk_readyQ[0];
    2760:	90 93 71 05 	sts	0x0571, r25
    2764:	80 93 70 05 	sts	0x0570, r24
	
	
	

	nrk_task_set_entry_function( &IdleTask, nrk_idle_task);
    2768:	62 e1       	ldi	r22, 0x12	; 18
    276a:	71 e2       	ldi	r23, 0x21	; 33
    276c:	ce 01       	movw	r24, r28
    276e:	01 96       	adiw	r24, 0x01	; 1
    2770:	0e 94 34 29 	call	0x5268	; 0x5268 <nrk_task_set_entry_function>
	nrk_task_set_stk( &IdleTask, nrk_idle_task_stk, NRK_TASK_IDLE_STK_SIZE);
    2774:	40 e8       	ldi	r20, 0x80	; 128
    2776:	50 e0       	ldi	r21, 0x00	; 0
    2778:	62 e5       	ldi	r22, 0x52	; 82
    277a:	74 e0       	ldi	r23, 0x04	; 4
    277c:	ce 01       	movw	r24, r28
    277e:	01 96       	adiw	r24, 0x01	; 1
    2780:	0e 94 38 29 	call	0x5270	; 0x5270 <nrk_task_set_stk>
	nrk_idle_task_stk[0]=STK_CANARY_VAL;	
    2784:	85 e5       	ldi	r24, 0x55	; 85
    2786:	80 93 52 04 	sts	0x0452, r24
	//IdleTask.task_ID = NRK_IDLE_TASK_ID;
	IdleTask.prio = 0;
    278a:	19 86       	std	Y+9, r1	; 0x09
	IdleTask.period.secs = 0;
    278c:	1c 86       	std	Y+12, r1	; 0x0c
    278e:	1d 86       	std	Y+13, r1	; 0x0d
    2790:	1e 86       	std	Y+14, r1	; 0x0e
    2792:	1f 86       	std	Y+15, r1	; 0x0f
	IdleTask.period.nano_secs = 0;
    2794:	18 8a       	std	Y+16, r1	; 0x10
    2796:	19 8a       	std	Y+17, r1	; 0x11
    2798:	1a 8a       	std	Y+18, r1	; 0x12
    279a:	1b 8a       	std	Y+19, r1	; 0x13
	IdleTask.cpu_reserve.secs = 0;
    279c:	1c 8a       	std	Y+20, r1	; 0x14
    279e:	1d 8a       	std	Y+21, r1	; 0x15
    27a0:	1e 8a       	std	Y+22, r1	; 0x16
    27a2:	1f 8a       	std	Y+23, r1	; 0x17
	IdleTask.cpu_reserve.nano_secs = 0;
    27a4:	18 8e       	std	Y+24, r1	; 0x18
    27a6:	19 8e       	std	Y+25, r1	; 0x19
    27a8:	1a 8e       	std	Y+26, r1	; 0x1a
    27aa:	1b 8e       	std	Y+27, r1	; 0x1b
	IdleTask.offset.secs = 0;
    27ac:	1c 8e       	std	Y+28, r1	; 0x1c
    27ae:	1d 8e       	std	Y+29, r1	; 0x1d
    27b0:	1e 8e       	std	Y+30, r1	; 0x1e
    27b2:	1f 8e       	std	Y+31, r1	; 0x1f
	IdleTask.offset.nano_secs = 0;
    27b4:	18 a2       	std	Y+32, r1	; 0x20
    27b6:	19 a2       	std	Y+33, r1	; 0x21
    27b8:	1a a2       	std	Y+34, r1	; 0x22
    27ba:	1b a2       	std	Y+35, r1	; 0x23
	IdleTask.FirstActivation = TRUE;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	88 87       	std	Y+8, r24	; 0x08
	IdleTask.Type = IDLE_TASK;
    27c0:	92 e0       	ldi	r25, 0x02	; 2
    27c2:	9a 87       	std	Y+10, r25	; 0x0a
	IdleTask.SchType = PREEMPTIVE;
    27c4:	8b 87       	std	Y+11, r24	; 0x0b
	nrk_activate_task(&IdleTask);
    27c6:	ce 01       	movw	r24, r28
    27c8:	01 96       	adiw	r24, 0x01	; 1
    27ca:	0e 94 ac 1b 	call	0x3758	; 0x3758 <nrk_activate_task>
	
}
    27ce:	a3 96       	adiw	r28, 0x23	; 35
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	08 95       	ret

000027e0 <nrk_start>:
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    27e0:	60 91 7a 05 	lds	r22, 0x057A
	// only check activated tasks
	if(task_ID!=-1)
    27e4:	6f 3f       	cpi	r22, 0xFF	; 255
    27e6:	39 f0       	breq	.+14     	; 0x27f6 <nrk_start+0x16>
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    27e8:	80 91 a5 05 	lds	r24, 0x05A5
    27ec:	68 13       	cpse	r22, r24
    27ee:	03 c0       	rjmp	.+6      	; 0x27f6 <nrk_start+0x16>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    27f0:	85 e0       	ldi	r24, 0x05	; 5
    27f2:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <nrk_kernel_error_add>
		- set cur prio and start the task 
	*/
    // Check to make sure all tasks unique
    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
	task_ID = nrk_task_TCB[i].task_ID;
    27f6:	60 91 a5 05 	lds	r22, 0x05A5
	// only check activated tasks
	if(task_ID!=-1)
    27fa:	6f 3f       	cpi	r22, 0xFF	; 255
    27fc:	e1 f4       	brne	.+56     	; 0x2836 <nrk_start+0x56>
		}
	}

    }

    task_ID = nrk_get_high_ready_task_ID();	
    27fe:	0e 94 a9 1a 	call	0x3552	; 0x3552 <nrk_get_high_ready_task_ID>
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    2802:	9b e2       	ldi	r25, 0x2B	; 43
    2804:	89 02       	muls	r24, r25
    2806:	f0 01       	movw	r30, r0
    2808:	11 24       	eor	r1, r1
    280a:	ee 58       	subi	r30, 0x8E	; 142
    280c:	fa 4f       	sbci	r31, 0xFA	; 250
    280e:	82 85       	ldd	r24, Z+10	; 0x0a
    2810:	80 93 e3 05 	sts	0x05E3, r24
    nrk_high_ready_TCB = nrk_cur_task_TCB = &nrk_task_TCB[task_ID];           
    2814:	f0 93 e2 05 	sts	0x05E2, r31
    2818:	e0 93 e1 05 	sts	0x05E1, r30
    281c:	f0 93 d3 05 	sts	0x05D3, r31
    2820:	e0 93 d2 05 	sts	0x05D2, r30
    nrk_cur_task_prio = nrk_high_ready_prio;
    2824:	80 93 d4 05 	sts	0x05D4, r24
    
    //TODO: this way on msp
    // *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    // *stkc = (uint16_t)((uint16_t)_nrk_timer_tick>>8); 
*/
    nrk_target_start();
    2828:	0e 94 bc 29 	call	0x5378	; 0x5378 <nrk_target_start>
    nrk_stack_pointer_init(); 
    282c:	0e 94 a6 29 	call	0x534c	; 0x534c <nrk_stack_pointer_init>
    nrk_start_high_ready_task();	
    2830:	0e 94 c0 29 	call	0x5380	; 0x5380 <nrk_start_high_ready_task>
    2834:	08 c0       	rjmp	.+16     	; 0x2846 <nrk_start+0x66>
	// only check activated tasks
	if(task_ID!=-1)
	{
    		for(j=0; j<NRK_MAX_TASKS; j++ )
		{
			if(i!=j && task_ID==nrk_task_TCB[j].task_ID)
    2836:	80 91 7a 05 	lds	r24, 0x057A
    283a:	68 13       	cpse	r22, r24
    283c:	e0 cf       	rjmp	.-64     	; 0x27fe <nrk_start+0x1e>
			{
			nrk_kernel_error_add(NRK_DUP_TASK_ID,task_ID);
    283e:	85 e0       	ldi	r24, 0x05	; 5
    2840:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <nrk_kernel_error_add>
    2844:	dc cf       	rjmp	.-72     	; 0x27fe <nrk_start+0x1e>
    2846:	ff cf       	rjmp	.-2      	; 0x2846 <nrk_start+0x66>

00002848 <nrk_TCB_init>:
    while(1);
}


int8_t nrk_TCB_init (nrk_task_type *Task, NRK_STK *ptos, NRK_STK *pbos, uint16_t stk_size, void *pext, uint16_t opt)
{
    2848:	af 92       	push	r10
    284a:	bf 92       	push	r11
    284c:	cf 92       	push	r12
    284e:	df 92       	push	r13
    2850:	ef 92       	push	r14
    2852:	ff 92       	push	r15
    2854:	0f 93       	push	r16
    2856:	1f 93       	push	r17
    2858:	cf 93       	push	r28
    285a:	df 93       	push	r29
    285c:	1f 92       	push	r1
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    2862:	5c 01       	movw	r10, r24
    2864:	6b 01       	movw	r12, r22
    2866:	7a 01       	movw	r14, r20
	
    //  Already in critical section so no needenter critical section
    if(Task->Type!=IDLE_TASK)
    2868:	dc 01       	movw	r26, r24
    286a:	19 96       	adiw	r26, 0x09	; 9
    286c:	8c 91       	ld	r24, X
    286e:	19 97       	sbiw	r26, 0x09	; 9
    2870:	82 30       	cpi	r24, 0x02	; 2
    2872:	21 f0       	breq	.+8      	; 0x287c <nrk_TCB_init+0x34>
    	Task->task_ID=nrk_task_init_cnt;
    2874:	80 91 d0 05 	lds	r24, 0x05D0
    2878:	8c 93       	st	X, r24
    287a:	02 c0       	rjmp	.+4      	; 0x2880 <nrk_TCB_init+0x38>
    else Task->task_ID=NRK_IDLE_TASK_ID;
    287c:	f5 01       	movw	r30, r10
    287e:	10 82       	st	Z, r1

    if(nrk_task_init_cnt>=NRK_MAX_TASKS) nrk_kernel_error_add(NRK_EXTRA_TASK,0);
    2880:	80 91 d0 05 	lds	r24, 0x05D0
    2884:	82 30       	cpi	r24, 0x02	; 2
    2886:	20 f0       	brcs	.+8      	; 0x2890 <nrk_TCB_init+0x48>
    2888:	60 e0       	ldi	r22, 0x00	; 0
    288a:	87 e0       	ldi	r24, 0x07	; 7
    288c:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <nrk_kernel_error_add>
    if(Task->Type!=IDLE_TASK) nrk_task_init_cnt++; 
    2890:	d5 01       	movw	r26, r10
    2892:	19 96       	adiw	r26, 0x09	; 9
    2894:	8c 91       	ld	r24, X
    2896:	82 30       	cpi	r24, 0x02	; 2
    2898:	29 f0       	breq	.+10     	; 0x28a4 <nrk_TCB_init+0x5c>
    289a:	80 91 d0 05 	lds	r24, 0x05D0
    289e:	8f 5f       	subi	r24, 0xFF	; 255
    28a0:	80 93 d0 05 	sts	0x05D0, r24
    if(nrk_task_init_cnt==NRK_IDLE_TASK_ID) nrk_task_init_cnt++;
    28a4:	80 91 d0 05 	lds	r24, 0x05D0
    28a8:	81 11       	cpse	r24, r1
    28aa:	03 c0       	rjmp	.+6      	; 0x28b2 <nrk_TCB_init+0x6a>
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	80 93 d0 05 	sts	0x05D0, r24
    //initialize member of TCB structure
    nrk_task_TCB[Task->task_ID].OSTaskStkPtr = ptos;
    28b2:	f5 01       	movw	r30, r10
    28b4:	30 81       	ld	r19, Z
    28b6:	2b e2       	ldi	r18, 0x2B	; 43
    28b8:	32 03       	mulsu	r19, r18
    28ba:	f0 01       	movw	r30, r0
    28bc:	11 24       	eor	r1, r1
    28be:	ee 58       	subi	r30, 0x8E	; 142
    28c0:	fa 4f       	sbci	r31, 0xFA	; 250
    28c2:	d1 82       	std	Z+1, r13	; 0x01
    28c4:	c0 82       	st	Z, r12
    nrk_task_TCB[Task->task_ID].task_prio = Task->prio;
    28c6:	d5 01       	movw	r26, r10
    28c8:	18 96       	adiw	r26, 0x08	; 8
    28ca:	8c 91       	ld	r24, X
    28cc:	18 97       	sbiw	r26, 0x08	; 8
    28ce:	82 87       	std	Z+10, r24	; 0x0a
    nrk_task_TCB[Task->task_ID].task_state = SUSPENDED;
    28d0:	3c 91       	ld	r19, X
    28d2:	32 03       	mulsu	r19, r18
    28d4:	f0 01       	movw	r30, r0
    28d6:	11 24       	eor	r1, r1
    28d8:	ee 58       	subi	r30, 0x8E	; 142
    28da:	fa 4f       	sbci	r31, 0xFA	; 250
    28dc:	83 e0       	ldi	r24, 0x03	; 3
    28de:	81 87       	std	Z+9, r24	; 0x09
    
    nrk_task_TCB[Task->task_ID].task_ID = Task->task_ID;
    28e0:	3c 91       	ld	r19, X
    28e2:	32 03       	mulsu	r19, r18
    28e4:	f0 01       	movw	r30, r0
    28e6:	11 24       	eor	r1, r1
    28e8:	ee 58       	subi	r30, 0x8E	; 142
    28ea:	fa 4f       	sbci	r31, 0xFA	; 250
    28ec:	30 87       	std	Z+8, r19	; 0x08
    nrk_task_TCB[Task->task_ID].suspend_flag = 0;
    28ee:	0c 91       	ld	r16, X
    28f0:	02 03       	mulsu	r16, r18
    28f2:	80 01       	movw	r16, r0
    28f4:	11 24       	eor	r1, r1
    28f6:	0e 58       	subi	r16, 0x8E	; 142
    28f8:	1a 4f       	sbci	r17, 0xFA	; 250
    28fa:	f8 01       	movw	r30, r16
    28fc:	15 82       	std	Z+5, r1	; 0x05
    nrk_task_TCB[Task->task_ID].period= _nrk_time_to_ticks_long( &(Task->period) );
    28fe:	c5 01       	movw	r24, r10
    2900:	0b 96       	adiw	r24, 0x0b	; 11
    2902:	0e 94 5f 20 	call	0x40be	; 0x40be <_nrk_time_to_ticks_long>
    2906:	d8 01       	movw	r26, r16
    2908:	91 96       	adiw	r26, 0x21	; 33
    290a:	6d 93       	st	X+, r22
    290c:	7d 93       	st	X+, r23
    290e:	8d 93       	st	X+, r24
    2910:	9c 93       	st	X, r25
    2912:	94 97       	sbiw	r26, 0x24	; 36
    if(Task->period.secs > 4294967) nrk_kernel_error_add(NRK_PERIOD_OVERFLOW,Task->task_ID);
    2914:	f5 01       	movw	r30, r10
    2916:	83 85       	ldd	r24, Z+11	; 0x0b
    2918:	94 85       	ldd	r25, Z+12	; 0x0c
    291a:	a5 85       	ldd	r26, Z+13	; 0x0d
    291c:	b6 85       	ldd	r27, Z+14	; 0x0e
    291e:	88 33       	cpi	r24, 0x38	; 56
    2920:	99 48       	sbci	r25, 0x89	; 137
    2922:	a1 44       	sbci	r26, 0x41	; 65
    2924:	b1 05       	cpc	r27, r1
    2926:	28 f0       	brcs	.+10     	; 0x2932 <nrk_TCB_init+0xea>
    2928:	d5 01       	movw	r26, r10
    292a:	6c 91       	ld	r22, X
    292c:	86 e1       	ldi	r24, 0x16	; 22
    292e:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <nrk_kernel_error_add>
    nrk_task_TCB[Task->task_ID].next_wakeup= _nrk_time_to_ticks_long( &(Task->offset));
    2932:	f5 01       	movw	r30, r10
    2934:	00 81       	ld	r16, Z
    2936:	11 27       	eor	r17, r17
    2938:	07 fd       	sbrc	r16, 7
    293a:	10 95       	com	r17
    293c:	c5 01       	movw	r24, r10
    293e:	4b 96       	adiw	r24, 0x1b	; 27
    2940:	0e 94 5f 20 	call	0x40be	; 0x40be <_nrk_time_to_ticks_long>
    2944:	4b e2       	ldi	r20, 0x2B	; 43
    2946:	40 9f       	mul	r20, r16
    2948:	f0 01       	movw	r30, r0
    294a:	41 9f       	mul	r20, r17
    294c:	f0 0d       	add	r31, r0
    294e:	11 24       	eor	r1, r1
    2950:	ee 58       	subi	r30, 0x8E	; 142
    2952:	fa 4f       	sbci	r31, 0xFA	; 250
    2954:	65 8b       	std	Z+21, r22	; 0x15
    2956:	76 8b       	std	Z+22, r23	; 0x16
    2958:	87 8b       	std	Z+23, r24	; 0x17
    295a:	90 8f       	std	Z+24, r25	; 0x18
    nrk_task_TCB[Task->task_ID].next_period= nrk_task_TCB[Task->task_ID].period+nrk_task_TCB[Task->task_ID].next_wakeup;
    295c:	d5 01       	movw	r26, r10
    295e:	2c 91       	ld	r18, X
    2960:	24 03       	mulsu	r18, r20
    2962:	60 01       	movw	r12, r0
    2964:	11 24       	eor	r1, r1
    2966:	f6 01       	movw	r30, r12
    2968:	ee 58       	subi	r30, 0x8E	; 142
    296a:	fa 4f       	sbci	r31, 0xFA	; 250
    296c:	6f 01       	movw	r12, r30
    296e:	05 89       	ldd	r16, Z+21	; 0x15
    2970:	16 89       	ldd	r17, Z+22	; 0x16
    2972:	27 89       	ldd	r18, Z+23	; 0x17
    2974:	30 8d       	ldd	r19, Z+24	; 0x18
    2976:	81 a1       	ldd	r24, Z+33	; 0x21
    2978:	92 a1       	ldd	r25, Z+34	; 0x22
    297a:	a3 a1       	ldd	r26, Z+35	; 0x23
    297c:	b4 a1       	ldd	r27, Z+36	; 0x24
    297e:	08 0f       	add	r16, r24
    2980:	19 1f       	adc	r17, r25
    2982:	2a 1f       	adc	r18, r26
    2984:	3b 1f       	adc	r19, r27
    2986:	01 8f       	std	Z+25, r16	; 0x19
    2988:	12 8f       	std	Z+26, r17	; 0x1a
    298a:	23 8f       	std	Z+27, r18	; 0x1b
    298c:	34 8f       	std	Z+28, r19	; 0x1c
    nrk_task_TCB[Task->task_ID].cpu_reserve= _nrk_time_to_ticks_long(&(Task->cpu_reserve));
    298e:	c5 01       	movw	r24, r10
    2990:	43 96       	adiw	r24, 0x13	; 19
    2992:	49 83       	std	Y+1, r20	; 0x01
    2994:	0e 94 5f 20 	call	0x40be	; 0x40be <_nrk_time_to_ticks_long>
    2998:	f6 01       	movw	r30, r12
    299a:	65 a3       	std	Z+37, r22	; 0x25
    299c:	76 a3       	std	Z+38, r23	; 0x26
    299e:	87 a3       	std	Z+39, r24	; 0x27
    29a0:	90 a7       	std	Z+40, r25	; 0x28
    nrk_task_TCB[Task->task_ID].cpu_remaining = nrk_task_TCB[Task->task_ID].cpu_reserve;
    29a2:	d5 01       	movw	r26, r10
    29a4:	2c 91       	ld	r18, X
    29a6:	49 81       	ldd	r20, Y+1	; 0x01
    29a8:	24 03       	mulsu	r18, r20
    29aa:	f0 01       	movw	r30, r0
    29ac:	11 24       	eor	r1, r1
    29ae:	ee 58       	subi	r30, 0x8E	; 142
    29b0:	fa 4f       	sbci	r31, 0xFA	; 250
    29b2:	85 a1       	ldd	r24, Z+37	; 0x25
    29b4:	96 a1       	ldd	r25, Z+38	; 0x26
    29b6:	a7 a1       	ldd	r26, Z+39	; 0x27
    29b8:	b0 a5       	ldd	r27, Z+40	; 0x28
    29ba:	85 8f       	std	Z+29, r24	; 0x1d
    29bc:	96 8f       	std	Z+30, r25	; 0x1e
    29be:	a7 8f       	std	Z+31, r26	; 0x1f
    29c0:	b0 a3       	std	Z+32, r27	; 0x20
    nrk_task_TCB[Task->task_ID].num_periods = 1;
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	92 a7       	std	Z+42, r25	; 0x2a
    29c8:	81 a7       	std	Z+41, r24	; 0x29
    nrk_task_TCB[Task->task_ID].OSTCBStkBottom = pbos;
    29ca:	f3 82       	std	Z+3, r15	; 0x03
    29cc:	e2 82       	std	Z+2, r14	; 0x02
    nrk_task_TCB[Task->task_ID].errno= NRK_OK;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	84 87       	std	Z+12, r24	; 0x0c
	         

			
    return NRK_OK;

}
    29d2:	0f 90       	pop	r0
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	1f 91       	pop	r17
    29da:	0f 91       	pop	r16
    29dc:	ff 90       	pop	r15
    29de:	ef 90       	pop	r14
    29e0:	df 90       	pop	r13
    29e2:	cf 90       	pop	r12
    29e4:	bf 90       	pop	r11
    29e6:	af 90       	pop	r10
    29e8:	08 95       	ret

000029ea <_nrk_timer_tick>:
void _nrk_timer_tick(void)
{
	// want to do something before the scheduler gets called? 
	// Go ahead and put it here...

	_nrk_scheduler();
    29ea:	0c 94 36 21 	jmp	0x426c	; 0x426c <_nrk_scheduler>

000029ee <nrk_version>:


uint16_t nrk_version (void)
{
    return (NRK_VERSION);
}
    29ee:	85 e6       	ldi	r24, 0x65	; 101
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	08 95       	ret

000029f4 <_nrk_errno_set>:
void blink_morse_code_error( uint8_t number );


void _nrk_errno_set (NRK_ERRNO error_code)
{
    nrk_cur_task_TCB->errno = error_code;
    29f4:	e0 91 e1 05 	lds	r30, 0x05E1
    29f8:	f0 91 e2 05 	lds	r31, 0x05E2
    29fc:	84 87       	std	Z+12, r24	; 0x0c
    29fe:	08 95       	ret

00002a00 <nrk_errno_get>:
}

uint8_t nrk_errno_get ()
{
    return nrk_cur_task_TCB->errno;
    2a00:	e0 91 e1 05 	lds	r30, 0x05E1
    2a04:	f0 91 e2 05 	lds	r31, 0x05E2
}
    2a08:	84 85       	ldd	r24, Z+12	; 0x0c
    2a0a:	08 95       	ret

00002a0c <nrk_error_get>:
}


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
    2a0c:	20 91 51 04 	lds	r18, 0x0451
    2a10:	22 23       	and	r18, r18
    2a12:	41 f0       	breq	.+16     	; 0x2a24 <nrk_error_get+0x18>
        return 0;
    *code = error_num;
    2a14:	fb 01       	movw	r30, r22
    2a16:	20 83       	st	Z, r18
    *task_id = error_task;
    2a18:	20 91 a4 03 	lds	r18, 0x03A4
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	20 83       	st	Z, r18
    return 1;
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	08 95       	ret


uint8_t nrk_error_get (uint8_t * task_id, uint8_t * code)
{
    if (error_num == 0)
        return 0;
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    *code = error_num;
    *task_id = error_task;
    return 1;
}
    2a26:	08 95       	ret

00002a28 <nrk_error_print>:

int8_t nrk_error_print ()
{
    int8_t t=0,i=0;
    if (error_num == 0)
    2a28:	80 91 51 04 	lds	r24, 0x0451
    2a2c:	88 23       	and	r24, r24
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <nrk_error_print+0xa>
    2a30:	83 c0       	rjmp	.+262    	; 0x2b38 <nrk_error_print+0x110>
    nrk_watchdog_disable();
#endif
#endif

#ifndef NRK_REBOOT_ON_ERROR
    nrk_int_disable ();
    2a32:	0e 94 47 13 	call	0x268e	; 0x268e <nrk_int_disable>
    while (1)
    {

#endif

        nrk_kprintf (PSTR ("*NRK ERROR("));
    2a36:	8e e1       	ldi	r24, 0x1E	; 30
    2a38:	94 e0       	ldi	r25, 0x04	; 4
    2a3a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <nrk_kprintf>
        printf ("%d", error_task);
    2a3e:	80 91 a4 03 	lds	r24, 0x03A4
    2a42:	1f 92       	push	r1
    2a44:	8f 93       	push	r24
    2a46:	8a e5       	ldi	r24, 0x5A	; 90
    2a48:	93 e0       	ldi	r25, 0x03	; 3
    2a4a:	9f 93       	push	r25
    2a4c:	8f 93       	push	r24
    2a4e:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>
        nrk_kprintf (PSTR ("): "));
    2a52:	8a e1       	ldi	r24, 0x1A	; 26
    2a54:	94 e0       	ldi	r25, 0x04	; 4
    2a56:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <nrk_kprintf>
        if (error_num > NRK_NUM_ERRORS)
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	80 91 51 04 	lds	r24, 0x0451
    2a66:	88 31       	cpi	r24, 0x18	; 24
    2a68:	10 f0       	brcs	.+4      	; 0x2a6e <nrk_error_print+0x46>
            error_num = NRK_UNKOWN;
    2a6a:	10 92 51 04 	sts	0x0451, r1
        switch (error_num)
    2a6e:	80 91 51 04 	lds	r24, 0x0451
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	fc 01       	movw	r30, r24
    2a76:	31 97       	sbiw	r30, 0x01	; 1
    2a78:	e6 31       	cpi	r30, 0x16	; 22
    2a7a:	f1 05       	cpc	r31, r1
    2a7c:	08 f0       	brcs	.+2      	; 0x2a80 <nrk_error_print+0x58>
    2a7e:	46 c0       	rjmp	.+140    	; 0x2b0c <nrk_error_print+0xe4>
    2a80:	e6 54       	subi	r30, 0x46	; 70
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	0c 94 18 2c 	jmp	0x5830	; 0x5830 <__tablejump2__>
        {
        case NRK_PERIOD_OVERFLOW:
            nrk_kprintf (PSTR ("Task period too large. Period must be less than 61 seconds."));
    2a88:	8e ed       	ldi	r24, 0xDE	; 222
    2a8a:	93 e0       	ldi	r25, 0x03	; 3
    2a8c:	41 c0       	rjmp	.+130    	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_STACK_TOO_SMALL:
            nrk_kprintf (PSTR ("Stack was not defined as large enough!"));
    2a8e:	87 eb       	ldi	r24, 0xB7	; 183
    2a90:	93 e0       	ldi	r25, 0x03	; 3
    2a92:	3e c0       	rjmp	.+124    	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_STACK_OVERFLOW:
            nrk_kprintf (PSTR ("Task Stack Overflow"));
    2a94:	83 ea       	ldi	r24, 0xA3	; 163
    2a96:	93 e0       	ldi	r25, 0x03	; 3
    2a98:	3b c0       	rjmp	.+118    	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_INVALID_STACK_POINTER:
            nrk_kprintf (PSTR ("Invalid Stack Pointer"));
    2a9a:	8d e8       	ldi	r24, 0x8D	; 141
    2a9c:	93 e0       	ldi	r25, 0x03	; 3
    2a9e:	38 c0       	rjmp	.+112    	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_RESERVE_ERROR:
            nrk_kprintf (PSTR ("Reserve Error in Scheduler"));
    2aa0:	82 e7       	ldi	r24, 0x72	; 114
    2aa2:	93 e0       	ldi	r25, 0x03	; 3
    2aa4:	35 c0       	rjmp	.+106    	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_RESERVE_VIOLATED:
            nrk_kprintf (PSTR ("Task Reserve Violated"));
    2aa6:	8c e5       	ldi	r24, 0x5C	; 92
    2aa8:	93 e0       	ldi	r25, 0x03	; 3
    2aaa:	32 c0       	rjmp	.+100    	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_WAKEUP_MISSED:
            nrk_kprintf (PSTR ("Scheduler Missed Wakeup"));
    2aac:	84 e4       	ldi	r24, 0x44	; 68
    2aae:	93 e0       	ldi	r25, 0x03	; 3
    2ab0:	2f c0       	rjmp	.+94     	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_DUP_TASK_ID:
            nrk_kprintf (PSTR ("Duplicated Task ID"));
    2ab2:	81 e3       	ldi	r24, 0x31	; 49
    2ab4:	93 e0       	ldi	r25, 0x03	; 3
    2ab6:	2c c0       	rjmp	.+88     	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_BAD_STARTUP:
            nrk_kprintf (PSTR ("Unexpected Restart"));
    2ab8:	8e e1       	ldi	r24, 0x1E	; 30
    2aba:	93 e0       	ldi	r25, 0x03	; 3
    2abc:	29 c0       	rjmp	.+82     	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_STACK_SMASH:
            nrk_kprintf (PSTR ("Idle or Kernel Stack Overflow"));
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	93 e0       	ldi	r25, 0x03	; 3
    2ac2:	26 c0       	rjmp	.+76     	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_EXTRA_TASK:
            nrk_kprintf (PSTR ("Extra Task started, is nrk_cfg.h ok?"));
    2ac4:	8b ed       	ldi	r24, 0xDB	; 219
    2ac6:	92 e0       	ldi	r25, 0x02	; 2
    2ac8:	23 c0       	rjmp	.+70     	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_LOW_VOLTAGE:
            nrk_kprintf (PSTR ("Low Voltage"));
    2aca:	8f ec       	ldi	r24, 0xCF	; 207
    2acc:	92 e0       	ldi	r25, 0x02	; 2
    2ace:	20 c0       	rjmp	.+64     	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_SEG_FAULT:
            nrk_kprintf (PSTR ("Unhandled Interrupt Vector"));
    2ad0:	84 eb       	ldi	r24, 0xB4	; 180
    2ad2:	92 e0       	ldi	r25, 0x02	; 2
    2ad4:	1d c0       	rjmp	.+58     	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_TIMER_OVERFLOW:
            nrk_kprintf (PSTR ("Timer Overflow"));
    2ad6:	85 ea       	ldi	r24, 0xA5	; 165
    2ad8:	92 e0       	ldi	r25, 0x02	; 2
    2ada:	1a c0       	rjmp	.+52     	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_SW_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("SW Watchdog Restart"));
    2adc:	81 e9       	ldi	r24, 0x91	; 145
    2ade:	92 e0       	ldi	r25, 0x02	; 2
    2ae0:	17 c0       	rjmp	.+46     	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_WATCHDOG_ERROR:
            nrk_kprintf (PSTR ("Watchdog Restart"));
    2ae2:	80 e8       	ldi	r24, 0x80	; 128
    2ae4:	92 e0       	ldi	r25, 0x02	; 2
    2ae6:	14 c0       	rjmp	.+40     	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_DEVICE_DRIVER:
            nrk_kprintf (PSTR ("Device Driver Error"));
    2ae8:	8c e6       	ldi	r24, 0x6C	; 108
    2aea:	92 e0       	ldi	r25, 0x02	; 2
    2aec:	11 c0       	rjmp	.+34     	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_UNIMPLEMENTED:
            nrk_kprintf (PSTR ("Kernel function not implemented"));
    2aee:	8c e4       	ldi	r24, 0x4C	; 76
    2af0:	92 e0       	ldi	r25, 0x02	; 2
    2af2:	0e c0       	rjmp	.+28     	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_SIGNAL_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Signal"));
    2af4:	84 e3       	ldi	r24, 0x34	; 52
    2af6:	92 e0       	ldi	r25, 0x02	; 2
    2af8:	0b c0       	rjmp	.+22     	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_SEMAPHORE_CREATE_ERROR:
            nrk_kprintf (PSTR ("Failed to create Semaphore"));
    2afa:	89 e1       	ldi	r24, 0x19	; 25
    2afc:	92 e0       	ldi	r25, 0x02	; 2
    2afe:	08 c0       	rjmp	.+16     	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_BOD_ERROR:
            nrk_kprintf (PSTR ("Brown Out Detect"));
    2b00:	88 e0       	ldi	r24, 0x08	; 8
    2b02:	92 e0       	ldi	r25, 0x02	; 2
    2b04:	05 c0       	rjmp	.+10     	; 0x2b10 <nrk_error_print+0xe8>
            break;
        case NRK_EXT_RST_ERROR:
            nrk_kprintf (PSTR ("External Reset"));
    2b06:	89 ef       	ldi	r24, 0xF9	; 249
    2b08:	91 e0       	ldi	r25, 0x01	; 1
    2b0a:	02 c0       	rjmp	.+4      	; 0x2b10 <nrk_error_print+0xe8>
            break;
        default:
            nrk_kprintf (PSTR ("UNKOWN"));
    2b0c:	82 ef       	ldi	r24, 0xF2	; 242
    2b0e:	91 e0       	ldi	r25, 0x01	; 1
    2b10:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <nrk_kprintf>
        }
        putchar ('\r');
    2b14:	60 91 04 06 	lds	r22, 0x0604
    2b18:	70 91 05 06 	lds	r23, 0x0605
    2b1c:	8d e0       	ldi	r24, 0x0D	; 13
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	0e 94 95 2c 	call	0x592a	; 0x592a <fputc>
        putchar ('\n');
    2b24:	60 91 04 06 	lds	r22, 0x0604
    2b28:	70 91 05 06 	lds	r23, 0x0605
    2b2c:	8a e0       	ldi	r24, 0x0A	; 10
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	0e 94 95 2c 	call	0x592a	; 0x592a <fputc>
        pause();
        blink_morse_code_error( error_num);
    }

#endif  /*  */
    error_num = 0;
    2b34:	10 92 51 04 	sts	0x0451, r1
    return t;
}
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	08 95       	ret

00002b3c <nrk_error_add>:
}
#endif

void nrk_error_add (uint8_t n)
{
    error_num = n;
    2b3c:	80 93 51 04 	sts	0x0451, r24
    error_task = nrk_cur_task_TCB->task_ID;
    2b40:	e0 91 e1 05 	lds	r30, 0x05E1
    2b44:	f0 91 e2 05 	lds	r31, 0x05E2
    2b48:	80 85       	ldd	r24, Z+8	; 0x08
    2b4a:	80 93 a4 03 	sts	0x03A4, r24
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2b4e:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <nrk_error_print>

00002b52 <nrk_kernel_error_add>:
#endif  /*  */
}

void nrk_kernel_error_add (uint8_t n, uint8_t task)
{
    error_num = n;
    2b52:	80 93 51 04 	sts	0x0451, r24
    error_task = task;
    2b56:	60 93 a4 03 	sts	0x03A4, r22
#ifdef NRK_LOG_ERRORS
    _nrk_log_error(error_num, error_task);
#endif

#ifdef NRK_REPORT_ERRORS
    nrk_error_print ();
    2b5a:	0c 94 14 15 	jmp	0x2a28	; 0x2a28 <nrk_error_print>

00002b5e <pause>:
    }

}

void pause()
{
    2b5e:	cf 93       	push	r28
    2b60:	df 93       	push	r29
    2b62:	1f 92       	push	r1
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2b68:	19 82       	std	Y+1, r1	; 0x01
    2b6a:	89 81       	ldd	r24, Y+1	; 0x01
    2b6c:	84 36       	cpi	r24, 0x64	; 100
    2b6e:	40 f4       	brcc	.+16     	; 0x2b80 <pause+0x22>
        nrk_spin_wait_us (2000);
    2b70:	80 ed       	ldi	r24, 0xD0	; 208
    2b72:	97 e0       	ldi	r25, 0x07	; 7
    2b74:	0e 94 31 25 	call	0x4a62	; 0x4a62 <nrk_spin_wait_us>
}

void pause()
{
    volatile uint8_t t;
    for (t = 0; t < 100; t++)
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	8f 5f       	subi	r24, 0xFF	; 255
    2b7c:	89 83       	std	Y+1, r24	; 0x01
    2b7e:	f5 cf       	rjmp	.-22     	; 0x2b6a <pause+0xc>
        nrk_spin_wait_us (2000);
}
    2b80:	0f 90       	pop	r0
    2b82:	df 91       	pop	r29
    2b84:	cf 91       	pop	r28
    2b86:	08 95       	ret

00002b88 <blink_dash>:
    return t;
}

void blink_dash()
{
    nrk_led_set (GREEN_LED);
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	0e 94 30 12 	call	0x2460	; 0x2460 <nrk_led_set>
    pause();
    2b90:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <pause>
    pause();
    2b94:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <pause>
    pause();
    2b98:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <pause>
    nrk_led_clr(GREEN_LED);
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	0e 94 19 12 	call	0x2432	; 0x2432 <nrk_led_clr>
    pause();
    2ba4:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <pause>

00002ba8 <blink_dot>:
}

void blink_dot()
{
    nrk_led_set(GREEN_LED);
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	0e 94 30 12 	call	0x2460	; 0x2460 <nrk_led_set>
    pause();
    2bb0:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <pause>
    nrk_led_clr(GREEN_LED);
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	0e 94 19 12 	call	0x2432	; 0x2432 <nrk_led_clr>
    pause();
    2bbc:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <pause>

00002bc0 <blink_morse_code_error>:
}


void blink_morse_code_error( uint8_t number )
{
    2bc0:	ff 92       	push	r15
    2bc2:	0f 93       	push	r16
    2bc4:	1f 93       	push	r17
    2bc6:	cf 93       	push	r28
    2bc8:	df 93       	push	r29
    2bca:	00 d0       	rcall	.+0      	; 0x2bcc <blink_morse_code_error+0xc>
    2bcc:	1f 92       	push	r1
    2bce:	cd b7       	in	r28, 0x3d	; 61
    2bd0:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );
    2bd2:	1f 92       	push	r1
    2bd4:	8f 93       	push	r24
    2bd6:	8a e5       	ldi	r24, 0x5A	; 90
    2bd8:	93 e0       	ldi	r25, 0x03	; 3
    2bda:	9f 93       	push	r25
    2bdc:	8f 93       	push	r24
    2bde:	8e 01       	movw	r16, r28
    2be0:	0f 5f       	subi	r16, 0xFF	; 255
    2be2:	1f 4f       	sbci	r17, 0xFF	; 255
    2be4:	1f 93       	push	r17
    2be6:	0f 93       	push	r16
    2be8:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <sprintf>

    for(i=0; i<strlen(str); i++ )
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
    2bf8:	f1 2c       	mov	r15, r1
    2bfa:	f8 01       	movw	r30, r16
    2bfc:	01 90       	ld	r0, Z+
    2bfe:	00 20       	and	r0, r0
    2c00:	e9 f7       	brne	.-6      	; 0x2bfc <blink_morse_code_error+0x3c>
    2c02:	31 97       	sbiw	r30, 0x01	; 1
    2c04:	e0 1b       	sub	r30, r16
    2c06:	f1 0b       	sbc	r31, r17
    2c08:	8f 2d       	mov	r24, r15
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	8e 17       	cp	r24, r30
    2c0e:	9f 07       	cpc	r25, r31
    2c10:	08 f0       	brcs	.+2      	; 0x2c14 <blink_morse_code_error+0x54>
    2c12:	5c c0       	rjmp	.+184    	; 0x2ccc <blink_morse_code_error+0x10c>
    {
        switch( str[i])
    2c14:	f8 01       	movw	r30, r16
    2c16:	e8 0f       	add	r30, r24
    2c18:	f9 1f       	adc	r31, r25
    2c1a:	80 81       	ld	r24, Z
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	fc 01       	movw	r30, r24
    2c20:	f0 97       	sbiw	r30, 0x30	; 48
    2c22:	ea 30       	cpi	r30, 0x0A	; 10
    2c24:	f1 05       	cpc	r31, r1
    2c26:	08 f0       	brcs	.+2      	; 0x2c2a <blink_morse_code_error+0x6a>
    2c28:	49 c0       	rjmp	.+146    	; 0x2cbc <blink_morse_code_error+0xfc>
    2c2a:	e0 53       	subi	r30, 0x30	; 48
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	0c 94 18 2c 	jmp	0x5830	; 0x5830 <__tablejump2__>
        {
        case '0':
            blink_dash();
    2c32:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <blink_dash>
    2c36:	02 c0       	rjmp	.+4      	; 0x2c3c <blink_morse_code_error+0x7c>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '1':
            blink_dot();
    2c38:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <blink_dot>
            blink_dash();
    2c3c:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <blink_dash>
            blink_dash();
    2c40:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <blink_dash>
            blink_dash();
    2c44:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <blink_dash>
            blink_dash();
    2c48:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <blink_dash>
            break;
    2c4c:	37 c0       	rjmp	.+110    	; 0x2cbc <blink_morse_code_error+0xfc>
        case '2':
            blink_dot();
    2c4e:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <blink_dot>
            blink_dot();
    2c52:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <blink_dot>
    2c56:	f4 cf       	rjmp	.-24     	; 0x2c40 <blink_morse_code_error+0x80>
            blink_dash();
            blink_dash();
            blink_dash();
            break;
        case '3':
            blink_dot();
    2c58:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <blink_dot>
            blink_dot();
    2c5c:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <blink_dot>
            blink_dot();
    2c60:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <blink_dot>
    2c64:	ef cf       	rjmp	.-34     	; 0x2c44 <blink_morse_code_error+0x84>
            blink_dash();
            blink_dash();
            break;
        case '4':
            blink_dot();
    2c66:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <blink_dot>
            blink_dot();
    2c6a:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <blink_dot>
            blink_dot();
    2c6e:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <blink_dot>
            blink_dot();
    2c72:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <blink_dot>
    2c76:	e8 cf       	rjmp	.-48     	; 0x2c48 <blink_morse_code_error+0x88>
            blink_dash();
            break;
        case '5':
            blink_dot();
    2c78:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <blink_dot>
    2c7c:	02 c0       	rjmp	.+4      	; 0x2c82 <blink_morse_code_error+0xc2>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '6':
            blink_dash();
    2c7e:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <blink_dash>
            blink_dot();
    2c82:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <blink_dot>
    2c86:	04 c0       	rjmp	.+8      	; 0x2c90 <blink_morse_code_error+0xd0>
            blink_dot();
            blink_dot();
            blink_dot();
            break;
        case '7':
            blink_dash();
    2c88:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <blink_dash>
            blink_dash();
    2c8c:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <blink_dash>
            blink_dot();
    2c90:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <blink_dot>
    2c94:	06 c0       	rjmp	.+12     	; 0x2ca2 <blink_morse_code_error+0xe2>
            blink_dot();
            blink_dot();
            break;
        case '8':
            blink_dash();
    2c96:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <blink_dash>
            blink_dash();
    2c9a:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <blink_dash>
            blink_dash();
    2c9e:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <blink_dash>
            blink_dot();
    2ca2:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <blink_dot>
    2ca6:	08 c0       	rjmp	.+16     	; 0x2cb8 <blink_morse_code_error+0xf8>
            blink_dot();
            break;
        case '9':
            blink_dash();
    2ca8:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <blink_dash>
            blink_dash();
    2cac:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <blink_dash>
            blink_dash();
    2cb0:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <blink_dash>
            blink_dash();
    2cb4:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <blink_dash>
            blink_dot();
    2cb8:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <blink_dot>
            break;
        }
        pause();
    2cbc:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <pause>
        pause();
    2cc0:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <pause>
        pause();
    2cc4:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <pause>
    uint8_t i;
    char str[3];

    sprintf( str,"%d",number );

    for(i=0; i<strlen(str); i++ )
    2cc8:	f3 94       	inc	r15
    2cca:	97 cf       	rjmp	.-210    	; 0x2bfa <blink_morse_code_error+0x3a>
        pause();
        pause();
        pause();
    }

}
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	ff 90       	pop	r15
    2cdc:	08 95       	ret

00002cde <dump_stack_info>:
#include <nrk_error.h>
#include <nrk_stack_check.h>
#include <stdio.h>

void dump_stack_info()
{
    2cde:	6f 92       	push	r6
    2ce0:	7f 92       	push	r7
    2ce2:	8f 92       	push	r8
    2ce4:	9f 92       	push	r9
    2ce6:	af 92       	push	r10
    2ce8:	bf 92       	push	r11
    2cea:	cf 92       	push	r12
    2cec:	df 92       	push	r13
    2cee:	ef 92       	push	r14
    2cf0:	ff 92       	push	r15
    2cf2:	0f 93       	push	r16
    2cf4:	1f 93       	push	r17
    2cf6:	cf 93       	push	r28
    2cf8:	df 93       	push	r29
    unsigned int *stk;
    unsigned char *stkc;
    uint8_t i;

    nrk_kprintf( PSTR("\r\nSTACK DUMP\r\n"));
    2cfa:	8a e2       	ldi	r24, 0x2A	; 42
    2cfc:	94 e0       	ldi	r25, 0x04	; 4
    2cfe:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <nrk_kprintf>

    printf( "cur: %d ",nrk_cur_task_TCB->task_ID);
    2d02:	e0 91 e1 05 	lds	r30, 0x05E1
    2d06:	f0 91 e2 05 	lds	r31, 0x05E2
    2d0a:	20 85       	ldd	r18, Z+8	; 0x08
    2d0c:	82 2f       	mov	r24, r18
    2d0e:	99 27       	eor	r25, r25
    2d10:	87 fd       	sbrc	r24, 7
    2d12:	90 95       	com	r25
    2d14:	9f 93       	push	r25
    2d16:	2f 93       	push	r18
    2d18:	8d e5       	ldi	r24, 0x5D	; 93
    2d1a:	93 e0       	ldi	r25, 0x03	; 3
    2d1c:	9f 93       	push	r25
    2d1e:	8f 93       	push	r24
    2d20:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;
    2d24:	e0 91 e1 05 	lds	r30, 0x05E1
    2d28:	f0 91 e2 05 	lds	r31, 0x05E2
    2d2c:	c2 81       	ldd	r28, Z+2	; 0x02
    2d2e:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    printf( "bottom = %x ",(uint16_t)stkc );
    2d30:	df 93       	push	r29
    2d32:	cf 93       	push	r28
    2d34:	81 e9       	ldi	r24, 0x91	; 145
    2d36:	93 e0       	ldi	r25, 0x03	; 3
    2d38:	9f 93       	push	r25
    2d3a:	8f 93       	push	r24
    2d3c:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>
    printf( "canary = %x ",*stkc );
    2d40:	88 81       	ld	r24, Y
    2d42:	1f 92       	push	r1
    2d44:	8f 93       	push	r24
    2d46:	86 e6       	ldi	r24, 0x66	; 102
    2d48:	93 e0       	ldi	r25, 0x03	; 3
    2d4a:	9f 93       	push	r25
    2d4c:	8f 93       	push	r24
    2d4e:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    2d52:	e0 91 e1 05 	lds	r30, 0x05E1
    2d56:	f0 91 e2 05 	lds	r31, 0x05E2
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    2d5a:	81 81       	ldd	r24, Z+1	; 0x01
    2d5c:	8f 93       	push	r24
    2d5e:	80 81       	ld	r24, Z
    2d60:	8f 93       	push	r24
    2d62:	83 e7       	ldi	r24, 0x73	; 115
    2d64:	93 e0       	ldi	r25, 0x03	; 3
    2d66:	9f 93       	push	r25
    2d68:	8f 93       	push	r24
    2d6a:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);
    2d6e:	80 91 e2 05 	lds	r24, 0x05E2
    2d72:	8f 93       	push	r24
    2d74:	80 91 e1 05 	lds	r24, 0x05E1
    2d78:	8f 93       	push	r24
    2d7a:	8d e7       	ldi	r24, 0x7D	; 125
    2d7c:	93 e0       	ldi	r25, 0x03	; 3
    2d7e:	9f 93       	push	r25
    2d80:	8f 93       	push	r24
    2d82:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>
    2d86:	c2 e7       	ldi	r28, 0x72	; 114
    2d88:	d5 e0       	ldi	r29, 0x05	; 5
    2d8a:	ed b7       	in	r30, 0x3d	; 61
    2d8c:	fe b7       	in	r31, 0x3e	; 62
    2d8e:	74 96       	adiw	r30, 0x14	; 20
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	fe bf       	out	0x3e, r31	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	ed bf       	out	0x3d, r30	; 61
    2d9a:	00 e0       	ldi	r16, 0x00	; 0
    2d9c:	10 e0       	ldi	r17, 0x00	; 0

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2d9e:	8d e8       	ldi	r24, 0x8D	; 141
    2da0:	68 2e       	mov	r6, r24
    2da2:	83 e0       	ldi	r24, 0x03	; 3
    2da4:	78 2e       	mov	r7, r24
        printf( "canary = %x ",*stkc );
    2da6:	96 e6       	ldi	r25, 0x66	; 102
    2da8:	89 2e       	mov	r8, r25
    2daa:	93 e0       	ldi	r25, 0x03	; 3
    2dac:	99 2e       	mov	r9, r25
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2dae:	23 e7       	ldi	r18, 0x73	; 115
    2db0:	a2 2e       	mov	r10, r18
    2db2:	23 e0       	ldi	r18, 0x03	; 3
    2db4:	b2 2e       	mov	r11, r18
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2db6:	3d e7       	ldi	r19, 0x7D	; 125
    2db8:	c3 2e       	mov	r12, r19
    2dba:	33 e0       	ldi	r19, 0x03	; 3
    2dbc:	d3 2e       	mov	r13, r19
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    {
        stk= (unsigned int *)nrk_task_TCB[i].OSTCBStkBottom;
    2dbe:	ea 80       	ldd	r14, Y+2	; 0x02
    2dc0:	fb 80       	ldd	r15, Y+3	; 0x03
        stkc = (unsigned char*)stk;
        printf( "%d: bottom = %x ",i,(uint16_t)stkc );
    2dc2:	ff 92       	push	r15
    2dc4:	ef 92       	push	r14
    2dc6:	1f 93       	push	r17
    2dc8:	0f 93       	push	r16
    2dca:	7f 92       	push	r7
    2dcc:	6f 92       	push	r6
    2dce:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>
        printf( "canary = %x ",*stkc );
    2dd2:	f7 01       	movw	r30, r14
    2dd4:	80 81       	ld	r24, Z
    2dd6:	1f 92       	push	r1
    2dd8:	8f 93       	push	r24
    2dda:	9f 92       	push	r9
    2ddc:	8f 92       	push	r8
    2dde:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>
        stk= (unsigned int *)nrk_task_TCB[i].OSTaskStkPtr;
        stkc = (unsigned char*)stk;
        printf( "stk = %x ",(uint16_t)stkc );
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	8f 93       	push	r24
    2de6:	88 81       	ld	r24, Y
    2de8:	8f 93       	push	r24
    2dea:	bf 92       	push	r11
    2dec:	af 92       	push	r10
    2dee:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	df 92       	push	r13
    2df8:	cf 92       	push	r12
    2dfa:	0e 94 c7 2c 	call	0x598e	; 0x598e <printf>
    2dfe:	0f 5f       	subi	r16, 0xFF	; 255
    2e00:	1f 4f       	sbci	r17, 0xFF	; 255
    2e02:	ab 96       	adiw	r28, 0x2b	; 43
    stk= (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;
    stkc = (unsigned char*)stk;
    printf( "stk = %x ",(uint16_t)stkc );
    printf( "tcb addr = %x\r\n",(uint16_t)nrk_cur_task_TCB);

    for(i=0; i<NRK_MAX_TASKS; i++ )
    2e04:	ed b7       	in	r30, 0x3d	; 61
    2e06:	fe b7       	in	r31, 0x3e	; 62
    2e08:	72 96       	adiw	r30, 0x12	; 18
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	fe bf       	out	0x3e, r31	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	ed bf       	out	0x3d, r30	; 61
    2e14:	02 30       	cpi	r16, 0x02	; 2
    2e16:	11 05       	cpc	r17, r1
    2e18:	91 f6       	brne	.-92     	; 0x2dbe <dump_stack_info+0xe0>
        printf( "stk = %x ",(uint16_t)stkc );
        printf( "tcb addr = %x\r\n",(uint16_t)&nrk_task_TCB[i]);

    }

}
    2e1a:	df 91       	pop	r29
    2e1c:	cf 91       	pop	r28
    2e1e:	1f 91       	pop	r17
    2e20:	0f 91       	pop	r16
    2e22:	ff 90       	pop	r15
    2e24:	ef 90       	pop	r14
    2e26:	df 90       	pop	r13
    2e28:	cf 90       	pop	r12
    2e2a:	bf 90       	pop	r11
    2e2c:	af 90       	pop	r10
    2e2e:	9f 90       	pop	r9
    2e30:	8f 90       	pop	r8
    2e32:	7f 90       	pop	r7
    2e34:	6f 90       	pop	r6
    2e36:	08 95       	ret

00002e38 <nrk_stack_check>:
 * If the end of the stack was overwritten, then flag an error.
 *
 * */
//inline void nrk_stack_check()
void nrk_stack_check()
{
    2e38:	cf 93       	push	r28
    2e3a:	df 93       	push	r29
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTCBStkBottom;          /* Load stack pointer */
    2e3c:	e0 91 e1 05 	lds	r30, 0x05E1
    2e40:	f0 91 e2 05 	lds	r31, 0x05E2
    2e44:	c2 81       	ldd	r28, Z+2	; 0x02
    2e46:	d3 81       	ldd	r29, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2e48:	88 81       	ld	r24, Y
    2e4a:	85 35       	cpi	r24, 0x55	; 85
    2e4c:	39 f0       	breq	.+14     	; 0x2e5c <nrk_stack_check+0x24>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    2e4e:	0e 94 6f 16 	call	0x2cde	; 0x2cde <dump_stack_info>
#endif
        nrk_error_add( NRK_STACK_OVERFLOW );
    2e52:	81 e0       	ldi	r24, 0x01	; 1
    2e54:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <nrk_error_add>
        *stkc=STK_CANARY_VAL;
    2e58:	85 e5       	ldi	r24, 0x55	; 85
    2e5a:	88 83       	st	Y, r24
    }

    stk  = (unsigned int *)nrk_cur_task_TCB->OSTaskStkPtr;          /* Load stack pointer */
    2e5c:	e0 91 e1 05 	lds	r30, 0x05E1
    2e60:	f0 91 e2 05 	lds	r31, 0x05E2
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2e64:	80 81       	ld	r24, Z
    2e66:	91 81       	ldd	r25, Z+1	; 0x01
    2e68:	81 15       	cp	r24, r1
    2e6a:	92 44       	sbci	r25, 0x42	; 66
    2e6c:	38 f0       	brcs	.+14     	; 0x2e7c <nrk_stack_check+0x44>
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
    2e6e:	0e 94 6f 16 	call	0x2cde	; 0x2cde <dump_stack_info>
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2e72:	82 e1       	ldi	r24, 0x12	; 18




#endif
}
    2e74:	df 91       	pop	r29
    2e76:	cf 91       	pop	r28
    if(stkc > (unsigned char *)RAMEND )
    {
#ifdef NRK_REPORT_ERRORS
        dump_stack_info();
#endif
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2e78:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <nrk_error_add>




#endif
}
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	08 95       	ret

00002e82 <nrk_stack_check_pid>:
#ifdef NRK_STACK_CHECK

    unsigned int *stk ;  // 2 bytes
    unsigned char *stkc; // 1 byte

    stk  = (unsigned int *)nrk_task_TCB[pid].OSTCBStkBottom;          /* Load stack pointer */
    2e82:	2b e2       	ldi	r18, 0x2B	; 43
    2e84:	82 02       	muls	r24, r18
    2e86:	f0 01       	movw	r30, r0
    2e88:	11 24       	eor	r1, r1
    2e8a:	ee 58       	subi	r30, 0x8E	; 142
    2e8c:	fa 4f       	sbci	r31, 0xFA	; 250
    2e8e:	a2 81       	ldd	r26, Z+2	; 0x02
    2e90:	b3 81       	ldd	r27, Z+3	; 0x03
    stkc = (unsigned char*)stk;
    if(*stkc != STK_CANARY_VAL)
    2e92:	8c 91       	ld	r24, X
    2e94:	85 35       	cpi	r24, 0x55	; 85
    2e96:	19 f0       	breq	.+6      	; 0x2e9e <nrk_stack_check_pid+0x1c>
    {
        *stkc=STK_CANARY_VAL;
    2e98:	85 e5       	ldi	r24, 0x55	; 85
    2e9a:	8c 93       	st	X, r24
    2e9c:	08 c0       	rjmp	.+16     	; 0x2eae <nrk_stack_check_pid+0x2c>
        return NRK_ERROR;
    }
    stk  = (unsigned int *)nrk_task_TCB[pid].OSTaskStkPtr;          /* Load stack pointer */
    stkc = (unsigned char*)stk;
    if(stkc > (unsigned char *)RAMEND )
    2e9e:	80 81       	ld	r24, Z
    2ea0:	91 81       	ldd	r25, Z+1	; 0x01
    2ea2:	81 15       	cp	r24, r1
    2ea4:	92 44       	sbci	r25, 0x42	; 66
    2ea6:	28 f0       	brcs	.+10     	; 0x2eb2 <nrk_stack_check_pid+0x30>
    {
        nrk_error_add( NRK_INVALID_STACK_POINTER);
    2ea8:	82 e1       	ldi	r24, 0x12	; 18
    2eaa:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <nrk_error_add>
        return NRK_ERROR;
    2eae:	8f ef       	ldi	r24, 0xFF	; 255
    2eb0:	08 95       	ret
    }
#endif
    return NRK_OK;
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
}
    2eb4:	08 95       	ret

00002eb6 <nrk_signal_create>:
#include <nrk_cfg.h>
#include <nrk_cpu.h>
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
    2eb6:	0f 93       	push	r16
    2eb8:	1f 93       	push	r17
	uint8_t i=0;
	for(i=0;i<32;i++)   
	{                         
		if( !(_nrk_signal_list & SIG(i)))
    2eba:	00 91 c9 03 	lds	r16, 0x03C9
    2ebe:	10 91 ca 03 	lds	r17, 0x03CA
    2ec2:	20 91 cb 03 	lds	r18, 0x03CB
    2ec6:	30 91 cc 03 	lds	r19, 0x03CC
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	b9 01       	movw	r22, r18
    2ed0:	a8 01       	movw	r20, r16
    2ed2:	08 2e       	mov	r0, r24
    2ed4:	04 c0       	rjmp	.+8      	; 0x2ede <nrk_signal_create+0x28>
    2ed6:	76 95       	lsr	r23
    2ed8:	67 95       	ror	r22
    2eda:	57 95       	ror	r21
    2edc:	47 95       	ror	r20
    2ede:	0a 94       	dec	r0
    2ee0:	d2 f7       	brpl	.-12     	; 0x2ed6 <nrk_signal_create+0x20>
    2ee2:	40 fd       	sbrc	r20, 0
    2ee4:	19 c0       	rjmp	.+50     	; 0x2f18 <nrk_signal_create+0x62>
		{    
			_nrk_signal_list|=SIG(i);
    2ee6:	41 e0       	ldi	r20, 0x01	; 1
    2ee8:	50 e0       	ldi	r21, 0x00	; 0
    2eea:	60 e0       	ldi	r22, 0x00	; 0
    2eec:	70 e0       	ldi	r23, 0x00	; 0
    2eee:	08 2e       	mov	r0, r24
    2ef0:	04 c0       	rjmp	.+8      	; 0x2efa <nrk_signal_create+0x44>
    2ef2:	44 0f       	add	r20, r20
    2ef4:	55 1f       	adc	r21, r21
    2ef6:	66 1f       	adc	r22, r22
    2ef8:	77 1f       	adc	r23, r23
    2efa:	0a 94       	dec	r0
    2efc:	d2 f7       	brpl	.-12     	; 0x2ef2 <nrk_signal_create+0x3c>
    2efe:	40 2b       	or	r20, r16
    2f00:	51 2b       	or	r21, r17
    2f02:	62 2b       	or	r22, r18
    2f04:	73 2b       	or	r23, r19
    2f06:	40 93 c9 03 	sts	0x03C9, r20
    2f0a:	50 93 ca 03 	sts	0x03CA, r21
    2f0e:	60 93 cb 03 	sts	0x03CB, r22
    2f12:	70 93 cc 03 	sts	0x03CC, r23
			return i;
    2f16:	05 c0       	rjmp	.+10     	; 0x2f22 <nrk_signal_create+0x6c>
    2f18:	01 96       	adiw	r24, 0x01	; 1
#include <nrk_defs.h>

int8_t nrk_signal_create()
{
	uint8_t i=0;
	for(i=0;i<32;i++)   
    2f1a:	80 32       	cpi	r24, 0x20	; 32
    2f1c:	91 05       	cpc	r25, r1
    2f1e:	b9 f6       	brne	.-82     	; 0x2ece <nrk_signal_create+0x18>
		{    
			_nrk_signal_list|=SIG(i);
			return i;
		}
	}
	return NRK_ERROR;
    2f20:	8f ef       	ldi	r24, 0xFF	; 255


}
    2f22:	1f 91       	pop	r17
    2f24:	0f 91       	pop	r16
    2f26:	08 95       	ret

00002f28 <nrk_signal_get_registered_mask>:

uint32_t nrk_signal_get_registered_mask()
{
        return nrk_cur_task_TCB->registered_signal_mask;
    2f28:	e0 91 e1 05 	lds	r30, 0x05E1
    2f2c:	f0 91 e2 05 	lds	r31, 0x05E2
    2f30:	65 85       	ldd	r22, Z+13	; 0x0d
    2f32:	76 85       	ldd	r23, Z+14	; 0x0e
    2f34:	87 85       	ldd	r24, Z+15	; 0x0f
    2f36:	90 89       	ldd	r25, Z+16	; 0x10
}
    2f38:	08 95       	ret

00002f3a <nrk_signal_delete>:

//return the number removed from signal set
int8_t nrk_signal_delete(nrk_sig_t sig_id)
{
    2f3a:	cf 92       	push	r12
    2f3c:	df 92       	push	r13
    2f3e:	ef 92       	push	r14
    2f40:	ff 92       	push	r15
    2f42:	0f 93       	push	r16
    2f44:	1f 93       	push	r17
    2f46:	cf 93       	push	r28
    2f48:	df 93       	push	r29
    2f4a:	1f 92       	push	r1
    2f4c:	cd b7       	in	r28, 0x3d	; 61
    2f4e:	de b7       	in	r29, 0x3e	; 62
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    2f50:	c1 2c       	mov	r12, r1
    2f52:	d1 2c       	mov	r13, r1
    2f54:	76 01       	movw	r14, r12
    2f56:	c3 94       	inc	r12
    2f58:	08 2e       	mov	r0, r24
    2f5a:	04 c0       	rjmp	.+8      	; 0x2f64 <nrk_signal_delete+0x2a>
    2f5c:	cc 0c       	add	r12, r12
    2f5e:	dd 1c       	adc	r13, r13
    2f60:	ee 1c       	adc	r14, r14
    2f62:	ff 1c       	adc	r15, r15
    2f64:	0a 94       	dec	r0
    2f66:	d2 f7       	brpl	.-12     	; 0x2f5c <nrk_signal_delete+0x22>

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    2f68:	40 91 c9 03 	lds	r20, 0x03C9
    2f6c:	50 91 ca 03 	lds	r21, 0x03CA
    2f70:	60 91 cb 03 	lds	r22, 0x03CB
    2f74:	70 91 cc 03 	lds	r23, 0x03CC
    2f78:	4c 21       	and	r20, r12
    2f7a:	5d 21       	and	r21, r13
    2f7c:	6e 21       	and	r22, r14
    2f7e:	7f 21       	and	r23, r15
    2f80:	45 2b       	or	r20, r21
    2f82:	46 2b       	or	r20, r22
    2f84:	47 2b       	or	r20, r23
    2f86:	09 f4       	brne	.+2      	; 0x2f8a <nrk_signal_delete+0x50>
    2f88:	63 c0       	rjmp	.+198    	; 0x3050 <nrk_signal_delete+0x116>

	nrk_int_disable();
    2f8a:	89 83       	std	Y+1, r24	; 0x01
    2f8c:	0e 94 47 13 	call	0x268e	; 0x268e <nrk_int_disable>
    2f90:	eb e7       	ldi	r30, 0x7B	; 123
    2f92:	f5 e0       	ldi	r31, 0x05	; 5
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2f94:	97 01       	movw	r18, r14
    2f96:	86 01       	movw	r16, r12
    2f98:	00 95       	com	r16
    2f9a:	10 95       	com	r17
    2f9c:	20 95       	com	r18
    2f9e:	30 95       	com	r19
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
			nrk_task_TCB[task_ID].event_suspend=0;
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2fa0:	93 e0       	ldi	r25, 0x03	; 3
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	df 01       	movw	r26, r30
    2fa6:	11 97       	sbiw	r26, 0x01	; 1

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
		if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    2fa8:	4c 91       	ld	r20, X
    2faa:	4f 3f       	cpi	r20, 0xFF	; 255
    2fac:	49 f1       	breq	.+82     	; 0x3000 <nrk_signal_delete+0xc6>
		// Check for tasks waiting on the signal
		// If there is a task that is waiting on just this signal
		// then we need to change it to the normal SUSPEND state
		if(nrk_task_TCB[task_ID].registered_signal_mask==sig_mask) //check to make sure its only signal its waiting on 
    2fae:	44 81       	ldd	r20, Z+4	; 0x04
    2fb0:	55 81       	ldd	r21, Z+5	; 0x05
    2fb2:	66 81       	ldd	r22, Z+6	; 0x06
    2fb4:	77 81       	ldd	r23, Z+7	; 0x07
    2fb6:	4c 15       	cp	r20, r12
    2fb8:	5d 05       	cpc	r21, r13
    2fba:	6e 05       	cpc	r22, r14
    2fbc:	7f 05       	cpc	r23, r15
    2fbe:	41 f4       	brne	.+16     	; 0x2fd0 <nrk_signal_delete+0x96>
		{
		      //  printf("delete t(%i) signal(%li)\r\n",task_ID,nrk_task_TCB[task_ID].registered_signal_mask);
			nrk_task_TCB[task_ID].active_signal_mask=0;
    2fc0:	10 86       	std	Z+8, r1	; 0x08
    2fc2:	11 86       	std	Z+9, r1	; 0x09
    2fc4:	12 86       	std	Z+10, r1	; 0x0a
    2fc6:	13 86       	std	Z+11, r1	; 0x0b
    2fc8:	df 01       	movw	r26, r30
    2fca:	12 97       	sbiw	r26, 0x02	; 2
			nrk_task_TCB[task_ID].event_suspend=0;
    2fcc:	1c 92       	st	X, r1
			nrk_task_TCB[task_ID].task_state=SUSPENDED;
    2fce:	90 83       	st	Z, r25
		}
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2fd0:	44 81       	ldd	r20, Z+4	; 0x04
    2fd2:	55 81       	ldd	r21, Z+5	; 0x05
    2fd4:	66 81       	ldd	r22, Z+6	; 0x06
    2fd6:	77 81       	ldd	r23, Z+7	; 0x07
    2fd8:	40 23       	and	r20, r16
    2fda:	51 23       	and	r21, r17
    2fdc:	62 23       	and	r22, r18
    2fde:	73 23       	and	r23, r19
    2fe0:	44 83       	std	Z+4, r20	; 0x04
    2fe2:	55 83       	std	Z+5, r21	; 0x05
    2fe4:	66 83       	std	Z+6, r22	; 0x06
    2fe6:	77 83       	std	Z+7, r23	; 0x07
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check
    2fe8:	40 85       	ldd	r20, Z+8	; 0x08
    2fea:	51 85       	ldd	r21, Z+9	; 0x09
    2fec:	62 85       	ldd	r22, Z+10	; 0x0a
    2fee:	73 85       	ldd	r23, Z+11	; 0x0b
    2ff0:	40 23       	and	r20, r16
    2ff2:	51 23       	and	r21, r17
    2ff4:	62 23       	and	r22, r18
    2ff6:	73 23       	and	r23, r19
    2ff8:	40 87       	std	Z+8, r20	; 0x08
    2ffa:	51 87       	std	Z+9, r21	; 0x09
    2ffc:	62 87       	std	Z+10, r22	; 0x0a
    2ffe:	73 87       	std	Z+11, r23	; 0x0b
    3000:	bb 96       	adiw	r30, 0x2b	; 43
	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 

	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3002:	45 e0       	ldi	r20, 0x05	; 5
    3004:	e1 3d       	cpi	r30, 0xD1	; 209
    3006:	f4 07       	cpc	r31, r20
    3008:	69 f6       	brne	.-102    	; 0x2fa4 <nrk_signal_delete+0x6a>
		nrk_task_TCB[task_ID].registered_signal_mask&=~sig_mask; //cheaper to remove than do a check
		nrk_task_TCB[task_ID].active_signal_mask&=~sig_mask; //cheaper to remove than do a check

	}
	
	_nrk_signal_list&=~SIG(sig_id);
    300a:	4e ef       	ldi	r20, 0xFE	; 254
    300c:	5f ef       	ldi	r21, 0xFF	; 255
    300e:	6f ef       	ldi	r22, 0xFF	; 255
    3010:	7f ef       	ldi	r23, 0xFF	; 255
    3012:	04 c0       	rjmp	.+8      	; 0x301c <nrk_signal_delete+0xe2>
    3014:	44 0f       	add	r20, r20
    3016:	55 1f       	adc	r21, r21
    3018:	66 1f       	adc	r22, r22
    301a:	77 1f       	adc	r23, r23
    301c:	8a 95       	dec	r24
    301e:	d2 f7       	brpl	.-12     	; 0x3014 <nrk_signal_delete+0xda>
    3020:	80 91 c9 03 	lds	r24, 0x03C9
    3024:	90 91 ca 03 	lds	r25, 0x03CA
    3028:	a0 91 cb 03 	lds	r26, 0x03CB
    302c:	b0 91 cc 03 	lds	r27, 0x03CC
    3030:	84 23       	and	r24, r20
    3032:	95 23       	and	r25, r21
    3034:	a6 23       	and	r26, r22
    3036:	b7 23       	and	r27, r23
    3038:	80 93 c9 03 	sts	0x03C9, r24
    303c:	90 93 ca 03 	sts	0x03CA, r25
    3040:	a0 93 cb 03 	sts	0x03CB, r26
    3044:	b0 93 cc 03 	sts	0x03CC, r27
	nrk_int_enable();
    3048:	0e 94 49 13 	call	0x2692	; 0x2692 <nrk_int_enable>

	return NRK_OK;
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	01 c0       	rjmp	.+2      	; 0x3052 <nrk_signal_delete+0x118>
	uint8_t task_ID;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);

	if( (sig_mask & _nrk_signal_list)==0) return NRK_ERROR; 
    3050:	8f ef       	ldi	r24, 0xFF	; 255
	
	_nrk_signal_list&=~SIG(sig_id);
	nrk_int_enable();

	return NRK_OK;
}
    3052:	0f 90       	pop	r0
    3054:	df 91       	pop	r29
    3056:	cf 91       	pop	r28
    3058:	1f 91       	pop	r17
    305a:	0f 91       	pop	r16
    305c:	ff 90       	pop	r15
    305e:	ef 90       	pop	r14
    3060:	df 90       	pop	r13
    3062:	cf 90       	pop	r12
    3064:	08 95       	ret

00003066 <nrk_signal_unregister>:


int8_t nrk_signal_unregister(int8_t sig_id)
{
    3066:	0f 93       	push	r16
    3068:	1f 93       	push	r17
uint32_t sig_mask;

sig_mask=SIG(sig_id);
    306a:	41 e0       	ldi	r20, 0x01	; 1
    306c:	50 e0       	ldi	r21, 0x00	; 0
    306e:	60 e0       	ldi	r22, 0x00	; 0
    3070:	70 e0       	ldi	r23, 0x00	; 0
    3072:	04 c0       	rjmp	.+8      	; 0x307c <nrk_signal_unregister+0x16>
    3074:	44 0f       	add	r20, r20
    3076:	55 1f       	adc	r21, r21
    3078:	66 1f       	adc	r22, r22
    307a:	77 1f       	adc	r23, r23
    307c:	8a 95       	dec	r24
    307e:	d2 f7       	brpl	.-12     	; 0x3074 <nrk_signal_unregister+0xe>

	if(nrk_cur_task_TCB->registered_signal_mask & sig_mask)
    3080:	e0 91 e1 05 	lds	r30, 0x05E1
    3084:	f0 91 e2 05 	lds	r31, 0x05E2
    3088:	85 85       	ldd	r24, Z+13	; 0x0d
    308a:	96 85       	ldd	r25, Z+14	; 0x0e
    308c:	a7 85       	ldd	r26, Z+15	; 0x0f
    308e:	b0 89       	ldd	r27, Z+16	; 0x10
    3090:	8a 01       	movw	r16, r20
    3092:	9b 01       	movw	r18, r22
    3094:	08 23       	and	r16, r24
    3096:	19 23       	and	r17, r25
    3098:	2a 23       	and	r18, r26
    309a:	3b 23       	and	r19, r27
    309c:	01 2b       	or	r16, r17
    309e:	02 2b       	or	r16, r18
    30a0:	03 2b       	or	r16, r19
    30a2:	d1 f0       	breq	.+52     	; 0x30d8 <nrk_signal_unregister+0x72>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
    30a4:	40 95       	com	r20
    30a6:	50 95       	com	r21
    30a8:	60 95       	com	r22
    30aa:	70 95       	com	r23
    30ac:	84 23       	and	r24, r20
    30ae:	95 23       	and	r25, r21
    30b0:	a6 23       	and	r26, r22
    30b2:	b7 23       	and	r27, r23
    30b4:	85 87       	std	Z+13, r24	; 0x0d
    30b6:	96 87       	std	Z+14, r25	; 0x0e
    30b8:	a7 87       	std	Z+15, r26	; 0x0f
    30ba:	b0 8b       	std	Z+16, r27	; 0x10
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
    30bc:	81 89       	ldd	r24, Z+17	; 0x11
    30be:	92 89       	ldd	r25, Z+18	; 0x12
    30c0:	a3 89       	ldd	r26, Z+19	; 0x13
    30c2:	b4 89       	ldd	r27, Z+20	; 0x14
    30c4:	84 23       	and	r24, r20
    30c6:	95 23       	and	r25, r21
    30c8:	a6 23       	and	r26, r22
    30ca:	b7 23       	and	r27, r23
    30cc:	81 8b       	std	Z+17, r24	; 0x11
    30ce:	92 8b       	std	Z+18, r25	; 0x12
    30d0:	a3 8b       	std	Z+19, r26	; 0x13
    30d2:	b4 8b       	std	Z+20, r27	; 0x14
	}
	else
		return NRK_ERROR;
return NRK_OK;
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	01 c0       	rjmp	.+2      	; 0x30da <nrk_signal_unregister+0x74>
	{
		nrk_cur_task_TCB->registered_signal_mask&=~(sig_mask); 	
		nrk_cur_task_TCB->active_signal_mask&=~(sig_mask); 	
	}
	else
		return NRK_ERROR;
    30d8:	8f ef       	ldi	r24, 0xFF	; 255
return NRK_OK;
}
    30da:	1f 91       	pop	r17
    30dc:	0f 91       	pop	r16
    30de:	08 95       	ret

000030e0 <nrk_signal_register>:

int8_t nrk_signal_register(int8_t sig_id)
{

	// Make sure the signal was created...
	if(SIG(sig_id) & _nrk_signal_list )
    30e0:	40 91 c9 03 	lds	r20, 0x03C9
    30e4:	50 91 ca 03 	lds	r21, 0x03CA
    30e8:	60 91 cb 03 	lds	r22, 0x03CB
    30ec:	70 91 cc 03 	lds	r23, 0x03CC
    30f0:	08 2e       	mov	r0, r24
    30f2:	04 c0       	rjmp	.+8      	; 0x30fc <nrk_signal_register+0x1c>
    30f4:	76 95       	lsr	r23
    30f6:	67 95       	ror	r22
    30f8:	57 95       	ror	r21
    30fa:	47 95       	ror	r20
    30fc:	0a 94       	dec	r0
    30fe:	d2 f7       	brpl	.-12     	; 0x30f4 <nrk_signal_register+0x14>
    3100:	40 ff       	sbrs	r20, 0
    3102:	1d c0       	rjmp	.+58     	; 0x313e <nrk_signal_register+0x5e>
	{
		nrk_cur_task_TCB->registered_signal_mask|=SIG(sig_id); 	
    3104:	e0 91 e1 05 	lds	r30, 0x05E1
    3108:	f0 91 e2 05 	lds	r31, 0x05E2
    310c:	41 e0       	ldi	r20, 0x01	; 1
    310e:	50 e0       	ldi	r21, 0x00	; 0
    3110:	60 e0       	ldi	r22, 0x00	; 0
    3112:	70 e0       	ldi	r23, 0x00	; 0
    3114:	04 c0       	rjmp	.+8      	; 0x311e <nrk_signal_register+0x3e>
    3116:	44 0f       	add	r20, r20
    3118:	55 1f       	adc	r21, r21
    311a:	66 1f       	adc	r22, r22
    311c:	77 1f       	adc	r23, r23
    311e:	8a 95       	dec	r24
    3120:	d2 f7       	brpl	.-12     	; 0x3116 <nrk_signal_register+0x36>
    3122:	85 85       	ldd	r24, Z+13	; 0x0d
    3124:	96 85       	ldd	r25, Z+14	; 0x0e
    3126:	a7 85       	ldd	r26, Z+15	; 0x0f
    3128:	b0 89       	ldd	r27, Z+16	; 0x10
    312a:	84 2b       	or	r24, r20
    312c:	95 2b       	or	r25, r21
    312e:	a6 2b       	or	r26, r22
    3130:	b7 2b       	or	r27, r23
    3132:	85 87       	std	Z+13, r24	; 0x0d
    3134:	96 87       	std	Z+14, r25	; 0x0e
    3136:	a7 87       	std	Z+15, r26	; 0x0f
    3138:	b0 8b       	std	Z+16, r27	; 0x10
		return NRK_OK;
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	08 95       	ret
	}
            
	return NRK_ERROR;
    313e:	8f ef       	ldi	r24, 0xFF	; 255
}
    3140:	08 95       	ret

00003142 <nrk_event_signal>:

int8_t nrk_event_signal(int8_t sig_id)
{
    3142:	cf 92       	push	r12
    3144:	df 92       	push	r13
    3146:	ef 92       	push	r14
    3148:	ff 92       	push	r15
    314a:	1f 93       	push	r17
    314c:	cf 93       	push	r28
    314e:	df 93       	push	r29

	uint8_t task_ID;
	uint8_t event_occured=0;
	uint32_t sig_mask;

	sig_mask=SIG(sig_id);
    3150:	c1 2c       	mov	r12, r1
    3152:	d1 2c       	mov	r13, r1
    3154:	76 01       	movw	r14, r12
    3156:	c3 94       	inc	r12
    3158:	04 c0       	rjmp	.+8      	; 0x3162 <nrk_event_signal+0x20>
    315a:	cc 0c       	add	r12, r12
    315c:	dd 1c       	adc	r13, r13
    315e:	ee 1c       	adc	r14, r14
    3160:	ff 1c       	adc	r15, r15
    3162:	8a 95       	dec	r24
    3164:	d2 f7       	brpl	.-12     	; 0x315a <nrk_event_signal+0x18>
	// Check if signal was created
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
    3166:	80 91 c9 03 	lds	r24, 0x03C9
    316a:	90 91 ca 03 	lds	r25, 0x03CA
    316e:	a0 91 cb 03 	lds	r26, 0x03CB
    3172:	b0 91 cc 03 	lds	r27, 0x03CC
    3176:	8c 21       	and	r24, r12
    3178:	9d 21       	and	r25, r13
    317a:	ae 21       	and	r26, r14
    317c:	bf 21       	and	r27, r15
    317e:	89 2b       	or	r24, r25
    3180:	8a 2b       	or	r24, r26
    3182:	8b 2b       	or	r24, r27
    3184:	11 f4       	brne	.+4      	; 0x318a <nrk_event_signal+0x48>
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	44 c0       	rjmp	.+136    	; 0x3212 <nrk_event_signal+0xd0>
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
    318a:	0e 94 47 13 	call	0x268e	; 0x268e <nrk_int_disable>
    318e:	e9 e7       	ldi	r30, 0x79	; 121
    3190:	f5 e0       	ldi	r31, 0x05	; 5
    3192:	cb e7       	ldi	r28, 0x7B	; 123
    3194:	d5 e0       	ldi	r29, 0x05	; 5

int8_t nrk_event_signal(int8_t sig_id)
{

	uint8_t task_ID;
	uint8_t event_occured=0;
    3196:	10 e0       	ldi	r17, 0x00	; 0
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    3198:	23 e0       	ldi	r18, 0x03	; 3


	//	if (nrk_task_TCB[task_ID].task_state == EVENT_SUSPENDED)   
	//	{
	//	printf( "task %d is event suspended\r\n",task_ID );
			if(nrk_task_TCB[task_ID].event_suspend==SIG_EVENT_SUSPENDED)
    319a:	80 81       	ld	r24, Z
    319c:	81 30       	cpi	r24, 0x01	; 1
    319e:	b9 f4       	brne	.+46     	; 0x31ce <nrk_event_signal+0x8c>
				if((nrk_task_TCB[task_ID].active_signal_mask & sig_mask))
    31a0:	82 85       	ldd	r24, Z+10	; 0x0a
    31a2:	93 85       	ldd	r25, Z+11	; 0x0b
    31a4:	a4 85       	ldd	r26, Z+12	; 0x0c
    31a6:	b5 85       	ldd	r27, Z+13	; 0x0d
    31a8:	8c 21       	and	r24, r12
    31aa:	9d 21       	and	r25, r13
    31ac:	ae 21       	and	r26, r14
    31ae:	bf 21       	and	r27, r15
    31b0:	89 2b       	or	r24, r25
    31b2:	8a 2b       	or	r24, r26
    31b4:	8b 2b       	or	r24, r27
    31b6:	59 f0       	breq	.+22     	; 0x31ce <nrk_event_signal+0x8c>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    31b8:	28 83       	st	Y, r18
					nrk_task_TCB[task_ID].next_wakeup=0;
    31ba:	16 86       	std	Z+14, r1	; 0x0e
    31bc:	17 86       	std	Z+15, r1	; 0x0f
    31be:	10 8a       	std	Z+16, r1	; 0x10
    31c0:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    31c2:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=sig_mask;
    31c4:	c2 86       	std	Z+10, r12	; 0x0a
    31c6:	d3 86       	std	Z+11, r13	; 0x0b
    31c8:	e4 86       	std	Z+12, r14	; 0x0c
    31ca:	f5 86       	std	Z+13, r15	; 0x0d
					event_occured=1;
    31cc:	11 e0       	ldi	r17, 0x01	; 1
				}

			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    31ce:	80 81       	ld	r24, Z
    31d0:	82 30       	cpi	r24, 0x02	; 2
    31d2:	a1 f4       	brne	.+40     	; 0x31fc <nrk_event_signal+0xba>
				if((nrk_task_TCB[task_ID].active_signal_mask == sig_mask))
    31d4:	82 85       	ldd	r24, Z+10	; 0x0a
    31d6:	93 85       	ldd	r25, Z+11	; 0x0b
    31d8:	a4 85       	ldd	r26, Z+12	; 0x0c
    31da:	b5 85       	ldd	r27, Z+13	; 0x0d
    31dc:	8c 15       	cp	r24, r12
    31de:	9d 05       	cpc	r25, r13
    31e0:	ae 05       	cpc	r26, r14
    31e2:	bf 05       	cpc	r27, r15
    31e4:	59 f4       	brne	.+22     	; 0x31fc <nrk_event_signal+0xba>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    31e6:	28 83       	st	Y, r18
					nrk_task_TCB[task_ID].next_wakeup=0;
    31e8:	16 86       	std	Z+14, r1	; 0x0e
    31ea:	17 86       	std	Z+15, r1	; 0x0f
    31ec:	10 8a       	std	Z+16, r1	; 0x10
    31ee:	11 8a       	std	Z+17, r1	; 0x11
					nrk_task_TCB[task_ID].event_suspend=0;
    31f0:	10 82       	st	Z, r1
					// Add the event trigger here so it is returned
					// from nrk_event_wait()
					nrk_task_TCB[task_ID].active_signal_mask=0;
    31f2:	12 86       	std	Z+10, r1	; 0x0a
    31f4:	13 86       	std	Z+11, r1	; 0x0b
    31f6:	14 86       	std	Z+12, r1	; 0x0c
    31f8:	15 86       	std	Z+13, r1	; 0x0d
					event_occured=1;
    31fa:	11 e0       	ldi	r17, 0x01	; 1
    31fc:	bb 96       	adiw	r30, 0x2b	; 43
    31fe:	ab 96       	adiw	r28, 0x2b	; 43
	// Signal was not created
	if((sig_mask & _nrk_signal_list)==0 ) { _nrk_errno_set(1); return NRK_ERROR;}
	
	//needs to be atomic otherwise run the risk of multiple tasks being scheduled late and not in order of priority.  
	nrk_int_disable();
	for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
    3200:	85 e0       	ldi	r24, 0x05	; 5
    3202:	ef 3c       	cpi	r30, 0xCF	; 207
    3204:	f8 07       	cpc	r31, r24
    3206:	49 f6       	brne	.-110    	; 0x319a <nrk_event_signal+0x58>
					event_occured=1;
				}   

	//	}
	}
	nrk_int_enable();
    3208:	0e 94 49 13 	call	0x2692	; 0x2692 <nrk_int_enable>
	if(event_occured)
    320c:	11 11       	cpse	r17, r1
    320e:	05 c0       	rjmp	.+10     	; 0x321a <nrk_event_signal+0xd8>
	{
		return NRK_OK;
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
    3210:	82 e0       	ldi	r24, 0x02	; 2
    3212:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_nrk_errno_set>
	return NRK_ERROR;
    3216:	8f ef       	ldi	r24, 0xFF	; 255
    3218:	01 c0       	rjmp	.+2      	; 0x321c <nrk_event_signal+0xda>
	//	}
	}
	nrk_int_enable();
	if(event_occured)
	{
		return NRK_OK;
    321a:	81 e0       	ldi	r24, 0x01	; 1
	} 
	// No task was waiting on the signal
	_nrk_errno_set(2);
	return NRK_ERROR;
}
    321c:	df 91       	pop	r29
    321e:	cf 91       	pop	r28
    3220:	1f 91       	pop	r17
    3222:	ff 90       	pop	r15
    3224:	ef 90       	pop	r14
    3226:	df 90       	pop	r13
    3228:	cf 90       	pop	r12
    322a:	08 95       	ret

0000322c <nrk_event_wait>:


uint32_t nrk_event_wait(uint32_t event_mask)
{
    322c:	0f 93       	push	r16
    322e:	1f 93       	push	r17

	// FIXME: Should go through list and check that all masks are registered, not just 1
	if(event_mask &  nrk_cur_task_TCB->registered_signal_mask)
    3230:	e0 91 e1 05 	lds	r30, 0x05E1
    3234:	f0 91 e2 05 	lds	r31, 0x05E2
    3238:	05 85       	ldd	r16, Z+13	; 0x0d
    323a:	16 85       	ldd	r17, Z+14	; 0x0e
    323c:	27 85       	ldd	r18, Z+15	; 0x0f
    323e:	30 89       	ldd	r19, Z+16	; 0x10
    3240:	06 23       	and	r16, r22
    3242:	17 23       	and	r17, r23
    3244:	28 23       	and	r18, r24
    3246:	39 23       	and	r19, r25
    3248:	01 2b       	or	r16, r17
    324a:	02 2b       	or	r16, r18
    324c:	03 2b       	or	r16, r19
    324e:	19 f1       	breq	.+70     	; 0x3296 <nrk_event_wait+0x6a>
	  {
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
    3250:	61 8b       	std	Z+17, r22	; 0x11
    3252:	72 8b       	std	Z+18, r23	; 0x12
    3254:	83 8b       	std	Z+19, r24	; 0x13
    3256:	94 8b       	std	Z+20, r25	; 0x14
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
    3258:	21 e0       	ldi	r18, 0x01	; 1
    325a:	27 83       	std	Z+7, r18	; 0x07
	else
	  {
	   return 0;
	  }

	if(event_mask & SIG(nrk_wakeup_signal))
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	00 90 d1 05 	lds	r0, 0x05D1
    3264:	04 c0       	rjmp	.+8      	; 0x326e <nrk_event_wait+0x42>
    3266:	b6 95       	lsr	r27
    3268:	a7 95       	ror	r26
    326a:	97 95       	ror	r25
    326c:	87 95       	ror	r24
    326e:	0a 94       	dec	r0
    3270:	d2 f7       	brpl	.-12     	; 0x3266 <nrk_event_wait+0x3a>
    3272:	80 ff       	sbrs	r24, 0
    3274:	03 c0       	rjmp	.+6      	; 0x327c <nrk_event_wait+0x50>
		nrk_wait_until_nw();
    3276:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <nrk_wait_until_nw>
    327a:	04 c0       	rjmp	.+8      	; 0x3284 <nrk_event_wait+0x58>
	else
		nrk_wait_until_ticks(0);
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <nrk_wait_until_ticks>
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
    3284:	e0 91 e1 05 	lds	r30, 0x05E1
    3288:	f0 91 e2 05 	lds	r31, 0x05E2
    328c:	61 89       	ldd	r22, Z+17	; 0x11
    328e:	72 89       	ldd	r23, Z+18	; 0x12
    3290:	83 89       	ldd	r24, Z+19	; 0x13
    3292:	94 89       	ldd	r25, Z+20	; 0x14
    3294:	03 c0       	rjmp	.+6      	; 0x329c <nrk_event_wait+0x70>
	   nrk_cur_task_TCB->active_signal_mask=event_mask; 
	   nrk_cur_task_TCB->event_suspend=SIG_EVENT_SUSPENDED; 
	  }
	else
	  {
	   return 0;
    3296:	60 e0       	ldi	r22, 0x00	; 0
    3298:	70 e0       	ldi	r23, 0x00	; 0
    329a:	cb 01       	movw	r24, r22
		nrk_wait_until_nw();
	else
		nrk_wait_until_ticks(0);
	//unmask the signal when its return so it has logical value like 1 to or whatever was user defined
	return ( (nrk_cur_task_TCB->active_signal_mask));
}
    329c:	1f 91       	pop	r17
    329e:	0f 91       	pop	r16
    32a0:	08 95       	ret

000032a2 <nrk_sem_create>:
}

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
    32a2:	90 91 e0 05 	lds	r25, 0x05E0
    32a6:	91 11       	cpse	r25, r1
    32a8:	1d c0       	rjmp	.+58     	; 0x32e4 <nrk_sem_create+0x42>
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
		{
		   if(nrk_sem_list[i].count==-1) break;
    32aa:	90 91 ca 05 	lds	r25, 0x05CA
    32ae:	9f 3f       	cpi	r25, 0xFF	; 255
    32b0:	31 f0       	breq	.+12     	; 0x32be <nrk_sem_create+0x1c>
    32b2:	90 91 cd 05 	lds	r25, 0x05CD
    32b6:	9f 3f       	cpi	r25, 0xFF	; 255
    32b8:	21 f4       	brne	.+8      	; 0x32c2 <nrk_sem_create+0x20>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    32ba:	21 e0       	ldi	r18, 0x01	; 1
    32bc:	03 c0       	rjmp	.+6      	; 0x32c4 <nrk_sem_create+0x22>
		{
		   if(nrk_sem_list[i].count==-1) break;
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	01 c0       	rjmp	.+2      	; 0x32c4 <nrk_sem_create+0x22>
nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
	for(i=0; i<NRK_MAX_RESOURCE_CNT; i++ )
    32c2:	22 e0       	ldi	r18, 0x02	; 2
		{
		   if(nrk_sem_list[i].count==-1) break;
		}
	                                              
	nrk_sem_list[i].value=count;
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	f9 01       	movw	r30, r18
    32c8:	ee 0f       	add	r30, r30
    32ca:	ff 1f       	adc	r31, r31
    32cc:	e2 0f       	add	r30, r18
    32ce:	f3 1f       	adc	r31, r19
    32d0:	e6 53       	subi	r30, 0x36	; 54
    32d2:	fa 4f       	sbci	r31, 0xFA	; 250
    32d4:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[i].count=count;
    32d6:	80 83       	st	Z, r24
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
    32d8:	61 83       	std	Z+1, r22	; 0x01
	_nrk_resource_cnt++;
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	80 93 e0 05 	sts	0x05E0, r24
	return	&nrk_sem_list[i];
    32e0:	cf 01       	movw	r24, r30
    32e2:	08 95       	ret

nrk_sem_t* nrk_sem_create(uint8_t count,uint8_t ceiling_prio)
{
uint8_t i;
	if(_nrk_resource_cnt>=(NRK_MAX_RESOURCE_CNT-1))
		return NULL;  
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	90 e0       	ldi	r25, 0x00	; 0
	nrk_sem_list[i].value=count;
	nrk_sem_list[i].count=count;
	nrk_sem_list[i].resource_ceiling=ceiling_prio;
	_nrk_resource_cnt++;
	return	&nrk_sem_list[i];
}
    32e8:	08 95       	ret

000032ea <nrk_get_resource_index>:

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
    32ea:	25 e0       	ldi	r18, 0x05	; 5
    32ec:	8a 3c       	cpi	r24, 0xCA	; 202
    32ee:	92 07       	cpc	r25, r18
    32f0:	29 f0       	breq	.+10     	; 0x32fc <nrk_get_resource_index+0x12>
    32f2:	8d 5c       	subi	r24, 0xCD	; 205
    32f4:	95 40       	sbci	r25, 0x05	; 5
    32f6:	21 f4       	brne	.+8      	; 0x3300 <nrk_get_resource_index+0x16>
}

int8_t nrk_get_resource_index(nrk_sem_t *resrc)
{
	int8_t id;
		for(id=0;id<NRK_MAX_RESOURCE_CNT;id++)
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	08 95       	ret
    32fc:	80 e0       	ldi	r24, 0x00	; 0
    32fe:	08 95       	ret
			if((nrk_sem_t *)(&nrk_sem_list[id])==(nrk_sem_t*)resrc)
				return id;
	return NRK_ERROR;
    3300:	8f ef       	ldi	r24, 0xFF	; 255
}
    3302:	08 95       	ret

00003304 <nrk_sem_query>:
}

int8_t nrk_sem_query(nrk_sem_t *rsrc )
{
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    3304:	0e 94 75 19 	call	0x32ea	; 0x32ea <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3308:	8f 3f       	cpi	r24, 0xFF	; 255
    330a:	11 f4       	brne	.+4      	; 0x3310 <nrk_sem_query+0xc>
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	02 c0       	rjmp	.+4      	; 0x3314 <nrk_sem_query+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3310:	82 30       	cpi	r24, 0x02	; 2
    3312:	21 f4       	brne	.+8      	; 0x331c <nrk_sem_query+0x18>
    3314:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_nrk_errno_set>
    3318:	8f ef       	ldi	r24, 0xFF	; 255
    331a:	08 95       	ret
	
	return(nrk_sem_list[id].value);
    331c:	99 27       	eor	r25, r25
    331e:	87 fd       	sbrc	r24, 7
    3320:	90 95       	com	r25
    3322:	fc 01       	movw	r30, r24
    3324:	ee 0f       	add	r30, r30
    3326:	ff 1f       	adc	r31, r31
    3328:	e8 0f       	add	r30, r24
    332a:	f9 1f       	adc	r31, r25
    332c:	e6 53       	subi	r30, 0x36	; 54
    332e:	fa 4f       	sbci	r31, 0xFA	; 250
    3330:	82 81       	ldd	r24, Z+2	; 0x02
}
    3332:	08 95       	ret

00003334 <nrk_sem_pend>:



int8_t nrk_sem_pend(nrk_sem_t *rsrc )
{
    3334:	ef 92       	push	r14
    3336:	ff 92       	push	r15
    3338:	0f 93       	push	r16
    333a:	1f 93       	push	r17
    333c:	cf 93       	push	r28
    333e:	df 93       	push	r29
    3340:	1f 92       	push	r1
    3342:	cd b7       	in	r28, 0x3d	; 61
    3344:	de b7       	in	r29, 0x3e	; 62
	int8_t id;
	id=nrk_get_resource_index(rsrc);  
    3346:	0e 94 75 19 	call	0x32ea	; 0x32ea <nrk_get_resource_index>
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    334a:	8f 3f       	cpi	r24, 0xFF	; 255
    334c:	11 f4       	brne	.+4      	; 0x3352 <nrk_sem_pend+0x1e>
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	02 c0       	rjmp	.+4      	; 0x3356 <nrk_sem_pend+0x22>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3352:	82 30       	cpi	r24, 0x02	; 2
    3354:	21 f4       	brne	.+8      	; 0x335e <nrk_sem_pend+0x2a>
    3356:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_nrk_errno_set>
    335a:	8f ef       	ldi	r24, 0xFF	; 255
    335c:	40 c0       	rjmp	.+128    	; 0x33de <nrk_sem_pend+0xaa>
	
	nrk_int_disable();
    335e:	89 83       	std	Y+1, r24	; 0x01
    3360:	0e 94 47 13 	call	0x268e	; 0x268e <nrk_int_disable>
	if(nrk_sem_list[id].value==0)
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	e8 2e       	mov	r14, r24
    3368:	ff 24       	eor	r15, r15
    336a:	e7 fc       	sbrc	r14, 7
    336c:	f0 94       	com	r15
    336e:	87 01       	movw	r16, r14
    3370:	00 0f       	add	r16, r16
    3372:	11 1f       	adc	r17, r17
    3374:	d8 01       	movw	r26, r16
    3376:	ae 0d       	add	r26, r14
    3378:	bf 1d       	adc	r27, r15
    337a:	a6 53       	subi	r26, 0x36	; 54
    337c:	ba 4f       	sbci	r27, 0xFA	; 250
    337e:	12 96       	adiw	r26, 0x02	; 2
    3380:	9c 91       	ld	r25, X
    3382:	91 11       	cpse	r25, r1
    3384:	16 c0       	rjmp	.+44     	; 0x33b2 <nrk_sem_pend+0x7e>
	{
		nrk_cur_task_TCB->event_suspend|=RSRC_EVENT_SUSPENDED;
    3386:	e0 91 e1 05 	lds	r30, 0x05E1
    338a:	f0 91 e2 05 	lds	r31, 0x05E2
    338e:	97 81       	ldd	r25, Z+7	; 0x07
    3390:	92 60       	ori	r25, 0x02	; 2
    3392:	97 83       	std	Z+7, r25	; 0x07
		nrk_cur_task_TCB->active_signal_mask=id;
    3394:	99 27       	eor	r25, r25
    3396:	87 fd       	sbrc	r24, 7
    3398:	90 95       	com	r25
    339a:	a9 2f       	mov	r26, r25
    339c:	b9 2f       	mov	r27, r25
    339e:	81 8b       	std	Z+17, r24	; 0x11
    33a0:	92 8b       	std	Z+18, r25	; 0x12
    33a2:	a3 8b       	std	Z+19, r26	; 0x13
    33a4:	b4 8b       	std	Z+20, r27	; 0x14
		// Wait on suspend event
		nrk_int_enable();
    33a6:	0e 94 49 13 	call	0x2692	; 0x2692 <nrk_int_enable>
		nrk_wait_until_ticks(0);
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <nrk_wait_until_ticks>
	}

	nrk_sem_list[id].value--;	
    33b2:	f8 01       	movw	r30, r16
    33b4:	ee 0d       	add	r30, r14
    33b6:	ff 1d       	adc	r31, r15
    33b8:	e6 53       	subi	r30, 0x36	; 54
    33ba:	fa 4f       	sbci	r31, 0xFA	; 250
    33bc:	82 81       	ldd	r24, Z+2	; 0x02
    33be:	81 50       	subi	r24, 0x01	; 1
    33c0:	82 83       	std	Z+2, r24	; 0x02
	nrk_cur_task_TCB->task_prio_ceil=nrk_sem_list[id].resource_ceiling;
    33c2:	a0 91 e1 05 	lds	r26, 0x05E1
    33c6:	b0 91 e2 05 	lds	r27, 0x05E2
    33ca:	81 81       	ldd	r24, Z+1	; 0x01
    33cc:	1b 96       	adiw	r26, 0x0b	; 11
    33ce:	8c 93       	st	X, r24
    33d0:	1b 97       	sbiw	r26, 0x0b	; 11
	nrk_cur_task_TCB->elevated_prio_flag=1;
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	14 96       	adiw	r26, 0x04	; 4
    33d6:	8c 93       	st	X, r24
	nrk_int_enable();
    33d8:	0e 94 49 13 	call	0x2692	; 0x2692 <nrk_int_enable>

	return NRK_OK;
    33dc:	81 e0       	ldi	r24, 0x01	; 1
}
    33de:	0f 90       	pop	r0
    33e0:	df 91       	pop	r29
    33e2:	cf 91       	pop	r28
    33e4:	1f 91       	pop	r17
    33e6:	0f 91       	pop	r16
    33e8:	ff 90       	pop	r15
    33ea:	ef 90       	pop	r14
    33ec:	08 95       	ret

000033ee <nrk_sem_post>:



int8_t nrk_sem_post(nrk_sem_t *rsrc)
{
    33ee:	0f 93       	push	r16
    33f0:	1f 93       	push	r17
    33f2:	cf 93       	push	r28
    33f4:	df 93       	push	r29
    33f6:	1f 92       	push	r1
    33f8:	cd b7       	in	r28, 0x3d	; 61
    33fa:	de b7       	in	r29, 0x3e	; 62
	int8_t id=nrk_get_resource_index(rsrc);	
    33fc:	0e 94 75 19 	call	0x32ea	; 0x32ea <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3400:	8f 3f       	cpi	r24, 0xFF	; 255
    3402:	11 f4       	brne	.+4      	; 0x3408 <nrk_sem_post+0x1a>
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	02 c0       	rjmp	.+4      	; 0x340c <nrk_sem_post+0x1e>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    3408:	82 30       	cpi	r24, 0x02	; 2
    340a:	21 f4       	brne	.+8      	; 0x3414 <nrk_sem_post+0x26>
    340c:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_nrk_errno_set>
    3410:	8f ef       	ldi	r24, 0xFF	; 255
    3412:	78 c0       	rjmp	.+240    	; 0x3504 <nrk_sem_post+0x116>

	if(nrk_sem_list[id].value<nrk_sem_list[id].count)
    3414:	28 2f       	mov	r18, r24
    3416:	33 27       	eor	r19, r19
    3418:	27 fd       	sbrc	r18, 7
    341a:	30 95       	com	r19
    341c:	89 01       	movw	r16, r18
    341e:	00 0f       	add	r16, r16
    3420:	11 1f       	adc	r17, r17
    3422:	02 0f       	add	r16, r18
    3424:	13 1f       	adc	r17, r19
    3426:	06 53       	subi	r16, 0x36	; 54
    3428:	1a 4f       	sbci	r17, 0xFA	; 250
    342a:	f8 01       	movw	r30, r16
    342c:	22 81       	ldd	r18, Z+2	; 0x02
    342e:	90 81       	ld	r25, Z
    3430:	29 17       	cp	r18, r25
    3432:	0c f0       	brlt	.+2      	; 0x3436 <nrk_sem_post+0x48>
    3434:	66 c0       	rjmp	.+204    	; 0x3502 <nrk_sem_post+0x114>
	{
		// Signal RSRC Event		
		nrk_int_disable();
    3436:	89 83       	std	Y+1, r24	; 0x01
    3438:	0e 94 47 13 	call	0x268e	; 0x268e <nrk_int_disable>

		nrk_sem_list[id].value++;
    343c:	f8 01       	movw	r30, r16
    343e:	92 81       	ldd	r25, Z+2	; 0x02
    3440:	9f 5f       	subi	r25, 0xFF	; 255
    3442:	92 83       	std	Z+2, r25	; 0x02
		nrk_cur_task_TCB->elevated_prio_flag=0;
    3444:	e0 91 e1 05 	lds	r30, 0x05E1
    3448:	f0 91 e2 05 	lds	r31, 0x05E2
    344c:	14 82       	std	Z+4, r1	; 0x04

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    344e:	90 91 79 05 	lds	r25, 0x0579
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	92 30       	cpi	r25, 0x02	; 2
    3456:	41 f5       	brne	.+80     	; 0x34a8 <nrk_sem_post+0xba>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    3458:	00 91 83 05 	lds	r16, 0x0583
    345c:	10 91 84 05 	lds	r17, 0x0584
    3460:	20 91 85 05 	lds	r18, 0x0585
    3464:	30 91 86 05 	lds	r19, 0x0586
    3468:	48 2f       	mov	r20, r24
    346a:	55 27       	eor	r21, r21
    346c:	47 fd       	sbrc	r20, 7
    346e:	50 95       	com	r21
    3470:	65 2f       	mov	r22, r21
    3472:	75 2f       	mov	r23, r21
    3474:	04 17       	cp	r16, r20
    3476:	15 07       	cpc	r17, r21
    3478:	26 07       	cpc	r18, r22
    347a:	37 07       	cpc	r19, r23
    347c:	a9 f4       	brne	.+42     	; 0x34a8 <nrk_sem_post+0xba>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    347e:	93 e0       	ldi	r25, 0x03	; 3
    3480:	90 93 7b 05 	sts	0x057B, r25
					nrk_task_TCB[task_ID].next_wakeup=0;
    3484:	10 92 87 05 	sts	0x0587, r1
    3488:	10 92 88 05 	sts	0x0588, r1
    348c:	10 92 89 05 	sts	0x0589, r1
    3490:	10 92 8a 05 	sts	0x058A, r1
					nrk_task_TCB[task_ID].event_suspend=0;
    3494:	10 92 79 05 	sts	0x0579, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    3498:	10 92 83 05 	sts	0x0583, r1
    349c:	10 92 84 05 	sts	0x0584, r1
    34a0:	10 92 85 05 	sts	0x0585, r1
    34a4:	10 92 86 05 	sts	0x0586, r1

		nrk_sem_list[id].value++;
		nrk_cur_task_TCB->elevated_prio_flag=0;

		for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++){
			if(nrk_task_TCB[task_ID].event_suspend==RSRC_EVENT_SUSPENDED)
    34a8:	90 91 a4 05 	lds	r25, 0x05A4
    34ac:	92 30       	cpi	r25, 0x02	; 2
    34ae:	39 f5       	brne	.+78     	; 0x34fe <nrk_sem_post+0x110>
				if((nrk_task_TCB[task_ID].active_signal_mask == id))
    34b0:	99 27       	eor	r25, r25
    34b2:	87 fd       	sbrc	r24, 7
    34b4:	90 95       	com	r25
    34b6:	a9 2f       	mov	r26, r25
    34b8:	b9 2f       	mov	r27, r25
    34ba:	40 91 ae 05 	lds	r20, 0x05AE
    34be:	50 91 af 05 	lds	r21, 0x05AF
    34c2:	60 91 b0 05 	lds	r22, 0x05B0
    34c6:	70 91 b1 05 	lds	r23, 0x05B1
    34ca:	48 17       	cp	r20, r24
    34cc:	59 07       	cpc	r21, r25
    34ce:	6a 07       	cpc	r22, r26
    34d0:	7b 07       	cpc	r23, r27
    34d2:	a9 f4       	brne	.+42     	; 0x34fe <nrk_sem_post+0x110>
				{
					nrk_task_TCB[task_ID].task_state=SUSPENDED;
    34d4:	83 e0       	ldi	r24, 0x03	; 3
    34d6:	80 93 a6 05 	sts	0x05A6, r24
					nrk_task_TCB[task_ID].next_wakeup=0;
    34da:	10 92 b2 05 	sts	0x05B2, r1
    34de:	10 92 b3 05 	sts	0x05B3, r1
    34e2:	10 92 b4 05 	sts	0x05B4, r1
    34e6:	10 92 b5 05 	sts	0x05B5, r1
					nrk_task_TCB[task_ID].event_suspend=0;
    34ea:	10 92 a4 05 	sts	0x05A4, r1
					nrk_task_TCB[task_ID].active_signal_mask=0;
    34ee:	10 92 ae 05 	sts	0x05AE, r1
    34f2:	10 92 af 05 	sts	0x05AF, r1
    34f6:	10 92 b0 05 	sts	0x05B0, r1
    34fa:	10 92 b1 05 	sts	0x05B1, r1
				}   

		}
		nrk_int_enable();
    34fe:	0e 94 49 13 	call	0x2692	; 0x2692 <nrk_int_enable>
	}
		
return NRK_OK;
    3502:	81 e0       	ldi	r24, 0x01	; 1
}
    3504:	0f 90       	pop	r0
    3506:	df 91       	pop	r29
    3508:	cf 91       	pop	r28
    350a:	1f 91       	pop	r17
    350c:	0f 91       	pop	r16
    350e:	08 95       	ret

00003510 <nrk_sem_delete>:

int8_t  nrk_sem_delete(nrk_sem_t *rsrc)
{
int8_t id=nrk_get_resource_index(rsrc);	
    3510:	0e 94 75 19 	call	0x32ea	; 0x32ea <nrk_get_resource_index>
	int8_t task_ID;
	if(id==-1) { _nrk_errno_set(1); return NRK_ERROR;}
    3514:	8f 3f       	cpi	r24, 0xFF	; 255
    3516:	11 f4       	brne	.+4      	; 0x351c <nrk_sem_delete+0xc>
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	02 c0       	rjmp	.+4      	; 0x3520 <nrk_sem_delete+0x10>
	if(id==NRK_MAX_RESOURCE_CNT) { _nrk_errno_set(2); return NRK_ERROR; }
    351c:	82 30       	cpi	r24, 0x02	; 2
    351e:	21 f4       	brne	.+8      	; 0x3528 <nrk_sem_delete+0x18>
    3520:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_nrk_errno_set>
    3524:	8f ef       	ldi	r24, 0xFF	; 255
    3526:	08 95       	ret

	nrk_sem_list[id].count=-1;
    3528:	99 27       	eor	r25, r25
    352a:	87 fd       	sbrc	r24, 7
    352c:	90 95       	com	r25
    352e:	fc 01       	movw	r30, r24
    3530:	ee 0f       	add	r30, r30
    3532:	ff 1f       	adc	r31, r31
    3534:	e8 0f       	add	r30, r24
    3536:	f9 1f       	adc	r31, r25
    3538:	e6 53       	subi	r30, 0x36	; 54
    353a:	fa 4f       	sbci	r31, 0xFA	; 250
    353c:	8f ef       	ldi	r24, 0xFF	; 255
    353e:	80 83       	st	Z, r24
	nrk_sem_list[id].value=-1;
    3540:	82 83       	std	Z+2, r24	; 0x02
	nrk_sem_list[id].resource_ceiling=-1;
    3542:	81 83       	std	Z+1, r24	; 0x01
	_nrk_resource_cnt--;
    3544:	80 91 e0 05 	lds	r24, 0x05E0
    3548:	81 50       	subi	r24, 0x01	; 1
    354a:	80 93 e0 05 	sts	0x05E0, r24
return NRK_OK;
    354e:	81 e0       	ldi	r24, 0x01	; 1
}
    3550:	08 95       	ret

00003552 <nrk_get_high_ready_task_ID>:

inline void _nrk_wait_for_scheduler ();

uint8_t nrk_get_high_ready_task_ID ()
{
    return (_head_node->task_ID);
    3552:	e0 91 d6 05 	lds	r30, 0x05D6
    3556:	f0 91 d7 05 	lds	r31, 0x05D7
}
    355a:	80 81       	ld	r24, Z
    355c:	08 95       	ret

0000355e <nrk_print_readyQ>:

void nrk_print_readyQ ()
{
    nrk_queue *ptr;
    ptr = _head_node;
    355e:	e0 91 d6 05 	lds	r30, 0x05D6
    3562:	f0 91 d7 05 	lds	r31, 0x05D7
    //nrk_kprintf (PSTR ("nrk_queue: "));
    while (ptr != NULL)
    3566:	30 97       	sbiw	r30, 0x00	; 0
    3568:	21 f0       	breq	.+8      	; 0x3572 <nrk_print_readyQ+0x14>
    {
        //printf ("%d ", ptr->task_ID);
        ptr = ptr->Next;
    356a:	03 80       	ldd	r0, Z+3	; 0x03
    356c:	f4 81       	ldd	r31, Z+4	; 0x04
    356e:	e0 2d       	mov	r30, r0
    3570:	fa cf       	rjmp	.-12     	; 0x3566 <nrk_print_readyQ+0x8>
    }
    //nrk_kprintf (PSTR ("\n\r"));
}
    3572:	08 95       	ret

00003574 <nrk_add_to_readyQ>:


void nrk_add_to_readyQ (int8_t task_ID)
{
    3574:	cf 92       	push	r12
    3576:	df 92       	push	r13
    3578:	ef 92       	push	r14
    357a:	ff 92       	push	r15
    357c:	0f 93       	push	r16
    357e:	1f 93       	push	r17
    3580:	cf 93       	push	r28
    3582:	df 93       	push	r29
    nrk_queue *NextNode;
    nrk_queue *CurNode;

    //printf( "nrk_add_to_readyQ %d\n",task_ID );
    // nrk_queue full
    if (_free_node == NULL)
    3584:	e0 91 70 05 	lds	r30, 0x0570
    3588:	f0 91 71 05 	lds	r31, 0x0571
    358c:	30 97       	sbiw	r30, 0x00	; 0
    358e:	09 f4       	brne	.+2      	; 0x3592 <nrk_add_to_readyQ+0x1e>
    3590:	8a c0       	rjmp	.+276    	; 0x36a6 <nrk_add_to_readyQ+0x132>
    {
        return;
    }


    NextNode = _head_node;
    3592:	40 91 d6 05 	lds	r20, 0x05D6
    3596:	50 91 d7 05 	lds	r21, 0x05D7
    CurNode = _free_node;

    if (_head_node != NULL)
    359a:	41 15       	cp	r20, r1
    359c:	51 05       	cpc	r21, r1
    359e:	09 f4       	brne	.+2      	; 0x35a2 <nrk_add_to_readyQ+0x2e>
    35a0:	46 c0       	rjmp	.+140    	; 0x362e <nrk_add_to_readyQ+0xba>
    35a2:	da 01       	movw	r26, r20
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    35a4:	9b e2       	ldi	r25, 0x2B	; 43
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
                        nrk_task_TCB[task_ID].task_prio)
    35a6:	69 2f       	mov	r22, r25
    35a8:	78 2f       	mov	r23, r24
    35aa:	76 03       	mulsu	r23, r22
    35ac:	90 01       	movw	r18, r0
    35ae:	11 24       	eor	r1, r1
    35b0:	2e 58       	subi	r18, 0x8E	; 142
    35b2:	3a 4f       	sbci	r19, 0xFA	; 250
    35b4:	89 01       	movw	r16, r18
    35b6:	06 5f       	subi	r16, 0xF6	; 246
    35b8:	1f 4f       	sbci	r17, 0xFF	; 255
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    35ba:	79 01       	movw	r14, r18
    35bc:	c4 e0       	ldi	r28, 0x04	; 4
    35be:	ec 0e       	add	r14, r28
    35c0:	f1 1c       	adc	r15, r1
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
                        nrk_task_TCB[task_ID].task_prio_ceil)
    35c2:	25 5f       	subi	r18, 0xF5	; 245
    35c4:	3f 4f       	sbci	r19, 0xFF	; 255
    if (_head_node != NULL)
    {

        while (NextNode != NULL)
        {
            if (nrk_task_TCB[NextNode->task_ID].elevated_prio_flag)
    35c6:	6c 91       	ld	r22, X
    35c8:	70 e0       	ldi	r23, 0x00	; 0
    35ca:	96 9f       	mul	r25, r22
    35cc:	e0 01       	movw	r28, r0
    35ce:	97 9f       	mul	r25, r23
    35d0:	d0 0d       	add	r29, r0
    35d2:	11 24       	eor	r1, r1
    35d4:	ce 58       	subi	r28, 0x8E	; 142
    35d6:	da 4f       	sbci	r29, 0xFA	; 250
    35d8:	dc 80       	ldd	r13, Y+4	; 0x04
    35da:	dd 20       	and	r13, r13
    35dc:	29 f0       	breq	.+10     	; 0x35e8 <nrk_add_to_readyQ+0x74>
                if (nrk_task_TCB[NextNode->task_ID].task_prio_ceil <
    35de:	db 84       	ldd	r13, Y+11	; 0x0b
    35e0:	e8 01       	movw	r28, r16
    35e2:	c8 80       	ld	r12, Y
    35e4:	dc 14       	cp	r13, r12
    35e6:	28 f1       	brcs	.+74     	; 0x3632 <nrk_add_to_readyQ+0xbe>
                        nrk_task_TCB[task_ID].task_prio)
                    break;
            if (nrk_task_TCB[task_ID].elevated_prio_flag)
    35e8:	e7 01       	movw	r28, r14
    35ea:	d8 80       	ld	r13, Y
    35ec:	dd 20       	and	r13, r13
    35ee:	61 f0       	breq	.+24     	; 0x3608 <nrk_add_to_readyQ+0x94>
                if (nrk_task_TCB[NextNode->task_ID].task_prio <
    35f0:	96 9f       	mul	r25, r22
    35f2:	e0 01       	movw	r28, r0
    35f4:	97 9f       	mul	r25, r23
    35f6:	d0 0d       	add	r29, r0
    35f8:	11 24       	eor	r1, r1
    35fa:	ce 58       	subi	r28, 0x8E	; 142
    35fc:	da 4f       	sbci	r29, 0xFA	; 250
    35fe:	da 84       	ldd	r13, Y+10	; 0x0a
    3600:	e9 01       	movw	r28, r18
    3602:	c8 80       	ld	r12, Y
    3604:	dc 14       	cp	r13, r12
    3606:	a8 f0       	brcs	.+42     	; 0x3632 <nrk_add_to_readyQ+0xbe>
                        nrk_task_TCB[task_ID].task_prio_ceil)
                    break;
            if (nrk_task_TCB[NextNode->task_ID].task_prio <
    3608:	96 9f       	mul	r25, r22
    360a:	e0 01       	movw	r28, r0
    360c:	97 9f       	mul	r25, r23
    360e:	d0 0d       	add	r29, r0
    3610:	11 24       	eor	r1, r1
    3612:	ce 58       	subi	r28, 0x8E	; 142
    3614:	da 4f       	sbci	r29, 0xFA	; 250
    3616:	7a 85       	ldd	r23, Y+10	; 0x0a
    3618:	e8 01       	movw	r28, r16
    361a:	68 81       	ld	r22, Y
    361c:	76 17       	cp	r23, r22
    361e:	48 f0       	brcs	.+18     	; 0x3632 <nrk_add_to_readyQ+0xbe>
                    nrk_task_TCB[task_ID].task_prio)
                break;

            NextNode = NextNode->Next;
    3620:	13 96       	adiw	r26, 0x03	; 3
    3622:	0d 90       	ld	r0, X+
    3624:	bc 91       	ld	r27, X
    3626:	a0 2d       	mov	r26, r0
    CurNode = _free_node;

    if (_head_node != NULL)
    {

        while (NextNode != NULL)
    3628:	10 97       	sbiw	r26, 0x00	; 0
    362a:	69 f6       	brne	.-102    	; 0x35c6 <nrk_add_to_readyQ+0x52>
    362c:	02 c0       	rjmp	.+4      	; 0x3632 <nrk_add_to_readyQ+0xbe>
    362e:	a0 e0       	ldi	r26, 0x00	; 0
    3630:	b0 e0       	ldi	r27, 0x00	; 0
        // Issues - 1 comes, becomes 2', 1 more comes (2' 1) then 2 comes where should it be placed ?
        // 2' 2  1 or 2 2' 1 in ready q , what happens after 2'->1, what if 2'->2

    }

    CurNode->task_ID = task_ID;
    3632:	80 83       	st	Z, r24
    _free_node = _free_node->Next;
    3634:	c3 81       	ldd	r28, Z+3	; 0x03
    3636:	d4 81       	ldd	r29, Z+4	; 0x04
    3638:	d0 93 71 05 	sts	0x0571, r29
    363c:	c0 93 70 05 	sts	0x0570, r28

    if (NextNode == _head_node)
    3640:	a4 17       	cp	r26, r20
    3642:	b5 07       	cpc	r27, r21
    3644:	b1 f4       	brne	.+44     	; 0x3672 <nrk_add_to_readyQ+0xfe>
    {
        //at start
        if (_head_node != NULL)
    3646:	10 97       	sbiw	r26, 0x00	; 0
    3648:	49 f0       	breq	.+18     	; 0x365c <nrk_add_to_readyQ+0xe8>
        {
            CurNode->Next = _head_node;
    364a:	b4 83       	std	Z+4, r27	; 0x04
    364c:	a3 83       	std	Z+3, r26	; 0x03
            CurNode->Prev = NULL;
    364e:	12 82       	std	Z+2, r1	; 0x02
    3650:	11 82       	std	Z+1, r1	; 0x01
            _head_node->Prev = CurNode;
    3652:	12 96       	adiw	r26, 0x02	; 2
    3654:	fc 93       	st	X, r31
    3656:	ee 93       	st	-X, r30
    3658:	11 97       	sbiw	r26, 0x01	; 1
    365a:	06 c0       	rjmp	.+12     	; 0x3668 <nrk_add_to_readyQ+0xf4>
        }
        else
        {
            CurNode->Next = NULL;
    365c:	14 82       	std	Z+4, r1	; 0x04
    365e:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = NULL;
    3660:	12 82       	std	Z+2, r1	; 0x02
    3662:	11 82       	std	Z+1, r1	; 0x01
            _free_node->Prev = CurNode;
    3664:	fa 83       	std	Y+2, r31	; 0x02
    3666:	e9 83       	std	Y+1, r30	; 0x01
        }
        _head_node = CurNode;
    3668:	f0 93 d7 05 	sts	0x05D7, r31
    366c:	e0 93 d6 05 	sts	0x05D6, r30
    3670:	1a c0       	rjmp	.+52     	; 0x36a6 <nrk_add_to_readyQ+0x132>
    3672:	11 96       	adiw	r26, 0x01	; 1
    3674:	8d 91       	ld	r24, X+
    3676:	9c 91       	ld	r25, X
    3678:	12 97       	sbiw	r26, 0x02	; 2

    }
    else
    {
        if (NextNode != _free_node)
    367a:	ac 17       	cp	r26, r28
    367c:	bd 07       	cpc	r27, r29
    367e:	59 f0       	breq	.+22     	; 0x3696 <nrk_add_to_readyQ+0x122>
        {
            // Insert  in middle

            CurNode->Prev = NextNode->Prev;
    3680:	92 83       	std	Z+2, r25	; 0x02
    3682:	81 83       	std	Z+1, r24	; 0x01
            CurNode->Next = NextNode;
    3684:	b4 83       	std	Z+4, r27	; 0x04
    3686:	a3 83       	std	Z+3, r26	; 0x03
            (NextNode->Prev)->Next = CurNode;
    3688:	11 96       	adiw	r26, 0x01	; 1
    368a:	cd 91       	ld	r28, X+
    368c:	dc 91       	ld	r29, X
    368e:	12 97       	sbiw	r26, 0x02	; 2
    3690:	fc 83       	std	Y+4, r31	; 0x04
    3692:	eb 83       	std	Y+3, r30	; 0x03
    3694:	04 c0       	rjmp	.+8      	; 0x369e <nrk_add_to_readyQ+0x12a>
            NextNode->Prev = CurNode;
        }
        else
        {
            //insert at end
            CurNode->Next = NULL;
    3696:	14 82       	std	Z+4, r1	; 0x04
    3698:	13 82       	std	Z+3, r1	; 0x03
            CurNode->Prev = _free_node->Prev;
    369a:	92 83       	std	Z+2, r25	; 0x02
    369c:	81 83       	std	Z+1, r24	; 0x01
            _free_node->Prev = CurNode;
    369e:	12 96       	adiw	r26, 0x02	; 2
    36a0:	fc 93       	st	X, r31
    36a2:	ee 93       	st	-X, r30
    36a4:	11 97       	sbiw	r26, 0x01	; 1
        }

    }

}
    36a6:	df 91       	pop	r29
    36a8:	cf 91       	pop	r28
    36aa:	1f 91       	pop	r17
    36ac:	0f 91       	pop	r16
    36ae:	ff 90       	pop	r15
    36b0:	ef 90       	pop	r14
    36b2:	df 90       	pop	r13
    36b4:	cf 90       	pop	r12
    36b6:	08 95       	ret

000036b8 <nrk_rem_from_readyQ>:


void nrk_rem_from_readyQ (int8_t task_ID)
{
    36b8:	cf 93       	push	r28
    36ba:	df 93       	push	r29
       }
     */

//      printf("nrk_rem_from_readyQ_nrk_queue %d\n",task_ID);

    if (_head_node == NULL)
    36bc:	e0 91 d6 05 	lds	r30, 0x05D6
    36c0:	f0 91 d7 05 	lds	r31, 0x05D7
    36c4:	30 97       	sbiw	r30, 0x00	; 0
    36c6:	09 f4       	brne	.+2      	; 0x36ca <nrk_rem_from_readyQ+0x12>
    36c8:	44 c0       	rjmp	.+136    	; 0x3752 <nrk_rem_from_readyQ+0x9a>
        return;

    CurNode = _head_node;

    if (_head_node->task_ID == task_ID)
    36ca:	99 27       	eor	r25, r25
    36cc:	87 fd       	sbrc	r24, 7
    36ce:	90 95       	com	r25
    36d0:	20 81       	ld	r18, Z
    36d2:	30 e0       	ldi	r19, 0x00	; 0
    36d4:	28 17       	cp	r18, r24
    36d6:	39 07       	cpc	r19, r25
    36d8:	81 f4       	brne	.+32     	; 0x36fa <nrk_rem_from_readyQ+0x42>
    {
        //REmove from start
        _head_node = _head_node->Next;
    36da:	a3 81       	ldd	r26, Z+3	; 0x03
    36dc:	b4 81       	ldd	r27, Z+4	; 0x04
    36de:	b0 93 d7 05 	sts	0x05D7, r27
    36e2:	a0 93 d6 05 	sts	0x05D6, r26
        _head_node->Prev = NULL;
    36e6:	12 96       	adiw	r26, 0x02	; 2
    36e8:	1c 92       	st	X, r1
    36ea:	1e 92       	st	-X, r1
    36ec:	11 97       	sbiw	r26, 0x01	; 1
    36ee:	18 c0       	rjmp	.+48     	; 0x3720 <nrk_rem_from_readyQ+0x68>
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
            CurNode = CurNode->Next;
    36f0:	03 80       	ldd	r0, Z+3	; 0x03
    36f2:	f4 81       	ldd	r31, Z+4	; 0x04
    36f4:	e0 2d       	mov	r30, r0
        _head_node = _head_node->Next;
        _head_node->Prev = NULL;
    }
    else
    {
        while ((CurNode != NULL) && (CurNode->task_ID != task_ID))
    36f6:	30 97       	sbiw	r30, 0x00	; 0
    36f8:	61 f1       	breq	.+88     	; 0x3752 <nrk_rem_from_readyQ+0x9a>
    36fa:	20 81       	ld	r18, Z
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	28 17       	cp	r18, r24
    3700:	39 07       	cpc	r19, r25
    3702:	b1 f7       	brne	.-20     	; 0x36f0 <nrk_rem_from_readyQ+0x38>
            CurNode = CurNode->Next;
        if (CurNode == NULL)
            return;


        (CurNode->Prev)->Next = CurNode->Next;      //Both for middle and end
    3704:	c1 81       	ldd	r28, Z+1	; 0x01
    3706:	d2 81       	ldd	r29, Z+2	; 0x02
    3708:	83 81       	ldd	r24, Z+3	; 0x03
    370a:	94 81       	ldd	r25, Z+4	; 0x04
    370c:	9c 83       	std	Y+4, r25	; 0x04
    370e:	8b 83       	std	Y+3, r24	; 0x03
        if (CurNode->Next != NULL)
    3710:	a3 81       	ldd	r26, Z+3	; 0x03
    3712:	b4 81       	ldd	r27, Z+4	; 0x04
    3714:	10 97       	sbiw	r26, 0x00	; 0
    3716:	21 f0       	breq	.+8      	; 0x3720 <nrk_rem_from_readyQ+0x68>
            (CurNode->Next)->Prev = CurNode->Prev;    // Only for middle
    3718:	12 96       	adiw	r26, 0x02	; 2
    371a:	dc 93       	st	X, r29
    371c:	ce 93       	st	-X, r28
    371e:	11 97       	sbiw	r26, 0x01	; 1
    }



    // Add to free list
    if (_free_node == NULL)
    3720:	a0 91 70 05 	lds	r26, 0x0570
    3724:	b0 91 71 05 	lds	r27, 0x0571
    3728:	10 97       	sbiw	r26, 0x00	; 0
    372a:	39 f4       	brne	.+14     	; 0x373a <nrk_rem_from_readyQ+0x82>
    {
        _free_node = CurNode;
    372c:	f0 93 71 05 	sts	0x0571, r31
    3730:	e0 93 70 05 	sts	0x0570, r30
        _free_node->Next = NULL;
    3734:	14 82       	std	Z+4, r1	; 0x04
    3736:	13 82       	std	Z+3, r1	; 0x03
    3738:	0a c0       	rjmp	.+20     	; 0x374e <nrk_rem_from_readyQ+0x96>
    }
    else
    {
        CurNode->Next = _free_node;
    373a:	b4 83       	std	Z+4, r27	; 0x04
    373c:	a3 83       	std	Z+3, r26	; 0x03
        _free_node->Prev = CurNode;
    373e:	12 96       	adiw	r26, 0x02	; 2
    3740:	fc 93       	st	X, r31
    3742:	ee 93       	st	-X, r30
    3744:	11 97       	sbiw	r26, 0x01	; 1
        _free_node = CurNode;
    3746:	f0 93 71 05 	sts	0x0571, r31
    374a:	e0 93 70 05 	sts	0x0570, r30
    }
    _free_node->Prev = NULL;
    374e:	12 82       	std	Z+2, r1	; 0x02
    3750:	11 82       	std	Z+1, r1	; 0x01
}
    3752:	df 91       	pop	r29
    3754:	cf 91       	pop	r28
    3756:	08 95       	ret

00003758 <nrk_activate_task>:




nrk_status_t nrk_activate_task (nrk_task_type * Task)
{
    3758:	ef 92       	push	r14
    375a:	ff 92       	push	r15
    375c:	0f 93       	push	r16
    375e:	1f 93       	push	r17
    3760:	cf 93       	push	r28
    3762:	df 93       	push	r29
    3764:	ec 01       	movw	r28, r24
    uint8_t rtype;
    void *topOfStackPtr;

    topOfStackPtr =
    3766:	4b 81       	ldd	r20, Y+3	; 0x03
    3768:	5c 81       	ldd	r21, Y+4	; 0x04
    376a:	69 81       	ldd	r22, Y+1	; 0x01
    376c:	7a 81       	ldd	r23, Y+2	; 0x02
    376e:	8d 81       	ldd	r24, Y+5	; 0x05
    3770:	9e 81       	ldd	r25, Y+6	; 0x06
    3772:	0e 94 57 29 	call	0x52ae	; 0x52ae <nrk_task_stk_init>
        (void *) nrk_task_stk_init (Task->task, Task->Ptos, Task->Pbos);

    //printf("activate %d\n",(int)Task.task_ID);
    if (Task->FirstActivation == TRUE)
    3776:	2f 81       	ldd	r18, Y+7	; 0x07
    3778:	22 23       	and	r18, r18
    377a:	71 f0       	breq	.+28     	; 0x3798 <nrk_activate_task+0x40>
    {
        rtype = nrk_TCB_init (Task, topOfStackPtr, Task->Pbos, 0, (void *) 0, 0);
    377c:	4b 81       	ldd	r20, Y+3	; 0x03
    377e:	5c 81       	ldd	r21, Y+4	; 0x04
    3780:	e1 2c       	mov	r14, r1
    3782:	f1 2c       	mov	r15, r1
    3784:	00 e0       	ldi	r16, 0x00	; 0
    3786:	10 e0       	ldi	r17, 0x00	; 0
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	bc 01       	movw	r22, r24
    378e:	ce 01       	movw	r24, r28
    3790:	0e 94 24 14 	call	0x2848	; 0x2848 <nrk_TCB_init>
        Task->FirstActivation = FALSE;
    3794:	1f 82       	std	Y+7, r1	; 0x07
    3796:	0c c0       	rjmp	.+24     	; 0x37b0 <nrk_activate_task+0x58>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
    3798:	e8 81       	ld	r30, Y
    379a:	2b e2       	ldi	r18, 0x2B	; 43
    379c:	e2 02       	muls	r30, r18
    379e:	f0 01       	movw	r30, r0
    37a0:	11 24       	eor	r1, r1
    37a2:	ee 58       	subi	r30, 0x8E	; 142
    37a4:	fa 4f       	sbci	r31, 0xFA	; 250
    37a6:	21 85       	ldd	r18, Z+9	; 0x09
    37a8:	23 30       	cpi	r18, 0x03	; 3
    37aa:	b9 f4       	brne	.+46     	; 0x37da <nrk_activate_task+0x82>
            return NRK_ERROR;
        //Re-init some parts of TCB

        nrk_task_TCB[Task->task_ID].OSTaskStkPtr = (NRK_STK *) topOfStackPtr;
    37ac:	91 83       	std	Z+1, r25	; 0x01
    37ae:	80 83       	st	Z, r24
    // If Idle Task then Add to ready Q
    //if(Task->task_ID==0) nrk_add_to_readyQ(Task->task_ID);
    //nrk_add_to_readyQ(Task->task_ID);
    //printf( "task %d nw %d \r\n",Task->task_ID,nrk_task_TCB[Task->task_ID].next_wakeup);
    //printf( "task %d nw %d \r\n",Task->task_ID,Task->offset.secs);
    if (nrk_task_TCB[Task->task_ID].next_wakeup == 0)
    37b0:	e8 81       	ld	r30, Y
    37b2:	8b e2       	ldi	r24, 0x2B	; 43
    37b4:	e8 02       	muls	r30, r24
    37b6:	f0 01       	movw	r30, r0
    37b8:	11 24       	eor	r1, r1
    37ba:	ee 58       	subi	r30, 0x8E	; 142
    37bc:	fa 4f       	sbci	r31, 0xFA	; 250
    37be:	45 89       	ldd	r20, Z+21	; 0x15
    37c0:	56 89       	ldd	r21, Z+22	; 0x16
    37c2:	67 89       	ldd	r22, Z+23	; 0x17
    37c4:	70 8d       	ldd	r23, Z+24	; 0x18
    37c6:	45 2b       	or	r20, r21
    37c8:	46 2b       	or	r20, r22
    37ca:	47 2b       	or	r20, r23
    37cc:	41 f4       	brne	.+16     	; 0x37de <nrk_activate_task+0x86>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
    37ce:	82 e0       	ldi	r24, 0x02	; 2
    37d0:	81 87       	std	Z+9, r24	; 0x09
        nrk_add_to_readyQ (Task->task_ID);
    37d2:	88 81       	ld	r24, Y
    37d4:	0e 94 ba 1a 	call	0x3574	; 0x3574 <nrk_add_to_readyQ>
    37d8:	02 c0       	rjmp	.+4      	; 0x37de <nrk_activate_task+0x86>

    }
    else
    {
        if (nrk_task_TCB[Task->task_ID].task_state != SUSPENDED)
            return NRK_ERROR;
    37da:	8f ef       	ldi	r24, 0xFF	; 255
    37dc:	01 c0       	rjmp	.+2      	; 0x37e0 <nrk_activate_task+0x88>
    {
        nrk_task_TCB[Task->task_ID].task_state = READY;
        nrk_add_to_readyQ (Task->task_ID);
    }

    return NRK_OK;
    37de:	81 e0       	ldi	r24, 0x01	; 1
}
    37e0:	df 91       	pop	r29
    37e2:	cf 91       	pop	r28
    37e4:	1f 91       	pop	r17
    37e6:	0f 91       	pop	r16
    37e8:	ff 90       	pop	r15
    37ea:	ef 90       	pop	r14
    37ec:	08 95       	ret

000037ee <nrk_set_next_wakeup>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_set_next_wakeup (nrk_time_t t)
{
    37ee:	1f 93       	push	r17
    37f0:	cf 93       	push	r28
    37f2:	df 93       	push	r29
    37f4:	cd b7       	in	r28, 0x3d	; 61
    37f6:	de b7       	in	r29, 0x3e	; 62
    37f8:	28 97       	sbiw	r28, 0x08	; 8
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	f8 94       	cli
    37fe:	de bf       	out	0x3e, r29	; 62
    3800:	0f be       	out	0x3f, r0	; 63
    3802:	cd bf       	out	0x3d, r28	; 61
    3804:	29 83       	std	Y+1, r18	; 0x01
    3806:	3a 83       	std	Y+2, r19	; 0x02
    3808:	4b 83       	std	Y+3, r20	; 0x03
    380a:	5c 83       	std	Y+4, r21	; 0x04
    380c:	6d 83       	std	Y+5, r22	; 0x05
    380e:	7e 83       	std	Y+6, r23	; 0x06
    3810:	8f 83       	std	Y+7, r24	; 0x07
    3812:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint16_t nw;
    nrk_int_disable ();
    3814:	0e 94 47 13 	call	0x268e	; 0x268e <nrk_int_disable>
    timer = _nrk_os_timer_get ();
    3818:	0e 94 80 26 	call	0x4d00	; 0x4d00 <_nrk_os_timer_get>
    381c:	18 2f       	mov	r17, r24
    nw = _nrk_time_to_ticks_long(&t);
    381e:	ce 01       	movw	r24, r28
    3820:	01 96       	adiw	r24, 0x01	; 1
    3822:	0e 94 5f 20 	call	0x40be	; 0x40be <_nrk_time_to_ticks_long>
    if (nw <= TIME_PAD)
    3826:	63 30       	cpi	r22, 0x03	; 3
    3828:	71 05       	cpc	r23, r1
    382a:	98 f0       	brcs	.+38     	; 0x3852 <nrk_set_next_wakeup+0x64>
        return NRK_ERROR;
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    382c:	e0 91 e1 05 	lds	r30, 0x05E1
    3830:	f0 91 e2 05 	lds	r31, 0x05E2
    3834:	21 2f       	mov	r18, r17
    3836:	30 e0       	ldi	r19, 0x00	; 0
    3838:	26 0f       	add	r18, r22
    383a:	37 1f       	adc	r19, r23
    383c:	c9 01       	movw	r24, r18
    383e:	a0 e0       	ldi	r26, 0x00	; 0
    3840:	b0 e0       	ldi	r27, 0x00	; 0
    3842:	85 8b       	std	Z+21, r24	; 0x15
    3844:	96 8b       	std	Z+22, r25	; 0x16
    3846:	a7 8b       	std	Z+23, r26	; 0x17
    3848:	b0 8f       	std	Z+24, r27	; 0x18
    			_nrk_prev_timer_val=timer;
    			_nrk_set_next_wakeup(timer);
    		}
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();
    384a:	0e 94 49 13 	call	0x2692	; 0x2692 <nrk_int_enable>

    return NRK_OK;
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	01 c0       	rjmp	.+2      	; 0x3854 <nrk_set_next_wakeup+0x66>
    uint16_t nw;
    nrk_int_disable ();
    timer = _nrk_os_timer_get ();
    nw = _nrk_time_to_ticks_long(&t);
    if (nw <= TIME_PAD)
        return NRK_ERROR;
    3852:	8f ef       	ldi	r24, 0xFF	; 255
    */
//      nrk_cur_task_TCB->nw_flag=1;
    nrk_int_enable ();

    return NRK_OK;
}
    3854:	28 96       	adiw	r28, 0x08	; 8
    3856:	0f b6       	in	r0, 0x3f	; 63
    3858:	f8 94       	cli
    385a:	de bf       	out	0x3e, r29	; 62
    385c:	0f be       	out	0x3f, r0	; 63
    385e:	cd bf       	out	0x3d, r28	; 61
    3860:	df 91       	pop	r29
    3862:	cf 91       	pop	r28
    3864:	1f 91       	pop	r17
    3866:	08 95       	ret

00003868 <_nrk_wait_for_scheduler>:
{

    //TIMSK = BM (OCIE1A);
    do
    {
        nrk_idle ();                // wait for the interrupt to tick... // pdiener: halt CPU here until any interrupt triggers
    3868:	0e 94 29 29 	call	0x5252	; 0x5252 <nrk_idle>
    }
    while ((volatile uint8_t) nrk_cur_task_TCB->suspend_flag == 1); // pdiener: make shure that was the right interrupt
    386c:	e0 91 e1 05 	lds	r30, 0x05E1
    3870:	f0 91 e2 05 	lds	r31, 0x05E2
    3874:	85 81       	ldd	r24, Z+5	; 0x05
    3876:	81 11       	cpse	r24, r1
    3878:	f7 cf       	rjmp	.-18     	; 0x3868 <_nrk_wait_for_scheduler>

    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}
    387a:	08 95       	ret

0000387c <nrk_wait_until_next_period>:
    nrk_wait_until_next_period ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_period ()
{
    387c:	cf 93       	push	r28
    uint8_t timer;

    nrk_stack_check ();
    387e:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <nrk_stack_check>
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    3882:	0e 94 47 13 	call	0x268e	; 0x268e <nrk_int_disable>
    nrk_cur_task_TCB->num_periods = 1;
    3886:	e0 91 e1 05 	lds	r30, 0x05E1
    388a:	f0 91 e2 05 	lds	r31, 0x05E2
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	92 a7       	std	Z+42, r25	; 0x2a
    3894:	81 a7       	std	Z+41, r24	; 0x29
    nrk_cur_task_TCB->suspend_flag = 1;
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    389a:	0e 94 80 26 	call	0x4d00	; 0x4d00 <_nrk_os_timer_get>
    389e:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    38a0:	88 3f       	cpi	r24, 0xF8	; 248
    38a2:	88 f4       	brcc	.+34     	; 0x38c6 <nrk_wait_until_next_period+0x4a>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    38a4:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <_nrk_get_next_wakeup>
    38a8:	2c 2f       	mov	r18, r28
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	2f 5f       	subi	r18, 0xFF	; 255
    38ae:	3f 4f       	sbci	r19, 0xFF	; 255
    38b0:	48 2f       	mov	r20, r24
    38b2:	50 e0       	ldi	r21, 0x00	; 0
    38b4:	24 17       	cp	r18, r20
    38b6:	35 07       	cpc	r19, r21
    38b8:	34 f4       	brge	.+12     	; 0x38c6 <nrk_wait_until_next_period+0x4a>
        {
            timer += TIME_PAD;
    38ba:	82 e0       	ldi	r24, 0x02	; 2
    38bc:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;                  // pdiener: why is this only set in this special case?
    38be:	80 93 50 04 	sts	0x0450, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    38c2:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    38c6:	0e 94 49 13 	call	0x2692	; 0x2692 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    38ca:	0e 94 34 1c 	call	0x3868	; 0x3868 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	cf 91       	pop	r28
    38d2:	08 95       	ret

000038d4 <nrk_terminate_task>:



nrk_status_t nrk_terminate_task ()
{
    nrk_rem_from_readyQ (nrk_cur_task_TCB->task_ID);
    38d4:	e0 91 e1 05 	lds	r30, 0x05E1
    38d8:	f0 91 e2 05 	lds	r31, 0x05E2
    38dc:	80 85       	ldd	r24, Z+8	; 0x08
    38de:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <nrk_rem_from_readyQ>
    nrk_cur_task_TCB->task_state = FINISHED;
    38e2:	e0 91 e1 05 	lds	r30, 0x05E1
    38e6:	f0 91 e2 05 	lds	r31, 0x05E2
    38ea:	84 e0       	ldi	r24, 0x04	; 4
    38ec:	81 87       	std	Z+9, r24	; 0x09

    // HAHA, there is NO next period...
    nrk_wait_until_next_period ();
    38ee:	0e 94 3e 1c 	call	0x387c	; 0x387c <nrk_wait_until_next_period>
    return NRK_OK;
}
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	08 95       	ret

000038f6 <nrk_wait_until_next_n_periods>:
    _nrk_wait_for_scheduler ();
    return NRK_OK;
}

int8_t nrk_wait_until_next_n_periods (uint16_t p)
{
    38f6:	cf 93       	push	r28
    38f8:	df 93       	push	r29
    38fa:	ec 01       	movw	r28, r24
    uint8_t timer;

    nrk_stack_check ();
    38fc:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <nrk_stack_check>

    if (p == 0)
    3900:	20 97       	sbiw	r28, 0x00	; 0
    3902:	11 f4       	brne	.+4      	; 0x3908 <nrk_wait_until_next_n_periods+0x12>
        p = 1;
    3904:	c1 e0       	ldi	r28, 0x01	; 1
    3906:	d0 e0       	ldi	r29, 0x00	; 0
// Next Period Wakeup Time is Set inside scheduler when a task becomes Runnable
    nrk_int_disable ();
    3908:	0e 94 47 13 	call	0x268e	; 0x268e <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    390c:	e0 91 e1 05 	lds	r30, 0x05E1
    3910:	f0 91 e2 05 	lds	r31, 0x05E2
    3914:	81 e0       	ldi	r24, 0x01	; 1
    3916:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = p;
    3918:	d2 a7       	std	Z+42, r29	; 0x2a
    391a:	c1 a7       	std	Z+41, r28	; 0x29
    timer = _nrk_os_timer_get ();
    391c:	0e 94 80 26 	call	0x4d00	; 0x4d00 <_nrk_os_timer_get>
    3920:	c8 2f       	mov	r28, r24

//nrk_cur_task_TCB->cpu_remaining=_nrk_prev_timer_val+1;

// +2 allows for potential time conflict resolution
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))       // 254 8bit overflow point - 2
    3922:	88 3f       	cpi	r24, 0xF8	; 248
    3924:	88 f4       	brcc	.+34     	; 0x3948 <nrk_wait_until_next_n_periods+0x52>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3926:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <_nrk_get_next_wakeup>
    392a:	2c 2f       	mov	r18, r28
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	2f 5f       	subi	r18, 0xFF	; 255
    3930:	3f 4f       	sbci	r19, 0xFF	; 255
    3932:	48 2f       	mov	r20, r24
    3934:	50 e0       	ldi	r21, 0x00	; 0
    3936:	24 17       	cp	r18, r20
    3938:	35 07       	cpc	r19, r21
    393a:	34 f4       	brge	.+12     	; 0x3948 <nrk_wait_until_next_n_periods+0x52>
        {
            timer += TIME_PAD;
    393c:	82 e0       	ldi	r24, 0x02	; 2
    393e:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    3940:	80 93 50 04 	sts	0x0450, r24
            _nrk_set_next_wakeup (timer);                 // pdiener: Set next wakeup to NOW
    3944:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <_nrk_set_next_wakeup>
        }

    nrk_int_enable ();
    3948:	0e 94 49 13 	call	0x2692	; 0x2692 <nrk_int_enable>
    _nrk_wait_for_scheduler ();
    394c:	0e 94 34 1c 	call	0x3868	; 0x3868 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	df 91       	pop	r29
    3954:	cf 91       	pop	r28
    3956:	08 95       	ret

00003958 <nrk_wait_ticks>:
 * timer ticks after the curret OS tick timer.
 *
 */

int8_t nrk_wait_ticks (uint16_t ticks)
{
    3958:	ff 92       	push	r15
    395a:	0f 93       	push	r16
    395c:	1f 93       	push	r17
    395e:	cf 93       	push	r28
    3960:	df 93       	push	r29
    3962:	8c 01       	movw	r16, r24
    uint8_t timer;
    nrk_int_disable ();
    3964:	0e 94 47 13 	call	0x268e	; 0x268e <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3968:	e0 91 e1 05 	lds	r30, 0x05E1
    396c:	f0 91 e2 05 	lds	r31, 0x05E2
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	85 83       	std	Z+5, r24	; 0x05
    timer = _nrk_os_timer_get ();
    3974:	0e 94 80 26 	call	0x4d00	; 0x4d00 <_nrk_os_timer_get>
    3978:	f8 2e       	mov	r15, r24
    nrk_cur_task_TCB->next_wakeup = ticks + timer;
    397a:	e0 91 e1 05 	lds	r30, 0x05E1
    397e:	f0 91 e2 05 	lds	r31, 0x05E2
    3982:	c8 2f       	mov	r28, r24
    3984:	d0 e0       	ldi	r29, 0x00	; 0
    3986:	ae 01       	movw	r20, r28
    3988:	40 0f       	add	r20, r16
    398a:	51 1f       	adc	r21, r17
    398c:	60 e0       	ldi	r22, 0x00	; 0
    398e:	70 e0       	ldi	r23, 0x00	; 0
    3990:	45 8b       	std	Z+21, r20	; 0x15
    3992:	56 8b       	std	Z+22, r21	; 0x16
    3994:	67 8b       	std	Z+23, r22	; 0x17
    3996:	70 8f       	std	Z+24, r23	; 0x18

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3998:	87 ef       	ldi	r24, 0xF7	; 247
    399a:	8f 15       	cp	r24, r15
    399c:	70 f0       	brcs	.+28     	; 0x39ba <nrk_wait_ticks+0x62>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    399e:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <_nrk_get_next_wakeup>
    39a2:	21 96       	adiw	r28, 0x01	; 1
    39a4:	28 2f       	mov	r18, r24
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	c2 17       	cp	r28, r18
    39aa:	d3 07       	cpc	r29, r19
    39ac:	34 f4       	brge	.+12     	; 0x39ba <nrk_wait_ticks+0x62>
        {
            timer += TIME_PAD;
    39ae:	82 e0       	ldi	r24, 0x02	; 2
    39b0:	8f 0d       	add	r24, r15
            _nrk_prev_timer_val = timer;
    39b2:	80 93 50 04 	sts	0x0450, r24
            _nrk_set_next_wakeup (timer);
    39b6:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    39ba:	0e 94 49 13 	call	0x2692	; 0x2692 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    39be:	0e 94 34 1c 	call	0x3868	; 0x3868 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	df 91       	pop	r29
    39c6:	cf 91       	pop	r28
    39c8:	1f 91       	pop	r17
    39ca:	0f 91       	pop	r16
    39cc:	ff 90       	pop	r15
    39ce:	08 95       	ret

000039d0 <nrk_wait_until_ticks>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_ticks (uint16_t ticks)
{
    39d0:	cf 93       	push	r28
    39d2:	df 93       	push	r29
    39d4:	ec 01       	movw	r28, r24
    uint8_t timer;
    nrk_int_disable ();
    39d6:	0e 94 47 13 	call	0x268e	; 0x268e <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    39da:	e0 91 e1 05 	lds	r30, 0x05E1
    39de:	f0 91 e2 05 	lds	r31, 0x05E2
    39e2:	21 e0       	ldi	r18, 0x01	; 1
    39e4:	25 83       	std	Z+5, r18	; 0x05
    nrk_cur_task_TCB->next_wakeup = ticks;
    39e6:	ce 01       	movw	r24, r28
    39e8:	a0 e0       	ldi	r26, 0x00	; 0
    39ea:	b0 e0       	ldi	r27, 0x00	; 0
    39ec:	85 8b       	std	Z+21, r24	; 0x15
    39ee:	96 8b       	std	Z+22, r25	; 0x16
    39f0:	a7 8b       	std	Z+23, r26	; 0x17
    39f2:	b0 8f       	std	Z+24, r27	; 0x18
    // printf( "t %u\r\n",ticks );
    timer = _nrk_os_timer_get ();
    39f4:	0e 94 80 26 	call	0x4d00	; 0x4d00 <_nrk_os_timer_get>
    39f8:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    39fa:	88 3f       	cpi	r24, 0xF8	; 248
    39fc:	88 f4       	brcc	.+34     	; 0x3a20 <nrk_wait_until_ticks+0x50>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    39fe:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <_nrk_get_next_wakeup>
    3a02:	2c 2f       	mov	r18, r28
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	2f 5f       	subi	r18, 0xFF	; 255
    3a08:	3f 4f       	sbci	r19, 0xFF	; 255
    3a0a:	48 2f       	mov	r20, r24
    3a0c:	50 e0       	ldi	r21, 0x00	; 0
    3a0e:	24 17       	cp	r18, r20
    3a10:	35 07       	cpc	r19, r21
    3a12:	34 f4       	brge	.+12     	; 0x3a20 <nrk_wait_until_ticks+0x50>
        {
            timer += TIME_PAD;
    3a14:	82 e0       	ldi	r24, 0x02	; 2
    3a16:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    3a18:	80 93 50 04 	sts	0x0450, r24
            _nrk_set_next_wakeup (timer);
    3a1c:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3a20:	0e 94 49 13 	call	0x2692	; 0x2692 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3a24:	0e 94 34 1c 	call	0x3868	; 0x3868 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	df 91       	pop	r29
    3a2c:	cf 91       	pop	r28
    3a2e:	08 95       	ret

00003a30 <nrk_wait_until_nw>:
 * taking into account any task processing time.
 *
 */

int8_t nrk_wait_until_nw ()
{
    3a30:	cf 93       	push	r28
    uint8_t timer;
    nrk_int_disable ();
    3a32:	0e 94 47 13 	call	0x268e	; 0x268e <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3a36:	e0 91 e1 05 	lds	r30, 0x05E1
    3a3a:	f0 91 e2 05 	lds	r31, 0x05E2
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->nw_flag = 1;
    3a42:	86 83       	std	Z+6, r24	; 0x06
    timer = _nrk_os_timer_get ();
    3a44:	0e 94 80 26 	call	0x4d00	; 0x4d00 <_nrk_os_timer_get>
    3a48:	c8 2f       	mov	r28, r24

    if (timer < MAX_SCHED_WAKEUP_TIME - TIME_PAD)
    3a4a:	88 3f       	cpi	r24, 0xF8	; 248
    3a4c:	88 f4       	brcc	.+34     	; 0x3a70 <nrk_wait_until_nw+0x40>
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3a4e:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <_nrk_get_next_wakeup>
    3a52:	2c 2f       	mov	r18, r28
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	2f 5f       	subi	r18, 0xFF	; 255
    3a58:	3f 4f       	sbci	r19, 0xFF	; 255
    3a5a:	48 2f       	mov	r20, r24
    3a5c:	50 e0       	ldi	r21, 0x00	; 0
    3a5e:	24 17       	cp	r18, r20
    3a60:	35 07       	cpc	r19, r21
    3a62:	34 f4       	brge	.+12     	; 0x3a70 <nrk_wait_until_nw+0x40>
        {
            timer += TIME_PAD;
    3a64:	82 e0       	ldi	r24, 0x02	; 2
    3a66:	8c 0f       	add	r24, r28
            _nrk_prev_timer_val = timer;
    3a68:	80 93 50 04 	sts	0x0450, r24
            _nrk_set_next_wakeup (timer);
    3a6c:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <_nrk_set_next_wakeup>
        }
//else nrk_cur_task_TCB->next_wakeup=ticks+1;
    nrk_int_enable ();
    3a70:	0e 94 49 13 	call	0x2692	; 0x2692 <nrk_int_enable>
//while(nrk_cur_task_TCB->suspend_flag==1);
    _nrk_wait_for_scheduler ();
    3a74:	0e 94 34 1c 	call	0x3868	; 0x3868 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	cf 91       	pop	r28
    3a7c:	08 95       	ret

00003a7e <nrk_wait>:


int8_t nrk_wait (nrk_time_t t)
{
    3a7e:	1f 93       	push	r17
    3a80:	cf 93       	push	r28
    3a82:	df 93       	push	r29
    3a84:	cd b7       	in	r28, 0x3d	; 61
    3a86:	de b7       	in	r29, 0x3e	; 62
    3a88:	28 97       	sbiw	r28, 0x08	; 8
    3a8a:	0f b6       	in	r0, 0x3f	; 63
    3a8c:	f8 94       	cli
    3a8e:	de bf       	out	0x3e, r29	; 62
    3a90:	0f be       	out	0x3f, r0	; 63
    3a92:	cd bf       	out	0x3d, r28	; 61
    3a94:	29 83       	std	Y+1, r18	; 0x01
    3a96:	3a 83       	std	Y+2, r19	; 0x02
    3a98:	4b 83       	std	Y+3, r20	; 0x03
    3a9a:	5c 83       	std	Y+4, r21	; 0x04
    3a9c:	6d 83       	std	Y+5, r22	; 0x05
    3a9e:	7e 83       	std	Y+6, r23	; 0x06
    3aa0:	8f 83       	std	Y+7, r24	; 0x07
    3aa2:	98 87       	std	Y+8, r25	; 0x08
    uint8_t timer;
    uint32_t nw;

    nrk_stack_check ();
    3aa4:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <nrk_stack_check>

    nrk_int_disable ();
    3aa8:	0e 94 47 13 	call	0x268e	; 0x268e <nrk_int_disable>
    nrk_cur_task_TCB->suspend_flag = 1;
    3aac:	e0 91 e1 05 	lds	r30, 0x05E1
    3ab0:	f0 91 e2 05 	lds	r31, 0x05E2
    3ab4:	81 e0       	ldi	r24, 0x01	; 1
    3ab6:	85 83       	std	Z+5, r24	; 0x05
    nrk_cur_task_TCB->num_periods = 1;
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	92 a7       	std	Z+42, r25	; 0x2a
    3abe:	81 a7       	std	Z+41, r24	; 0x29
    timer = _nrk_os_timer_get ();
    3ac0:	0e 94 80 26 	call	0x4d00	; 0x4d00 <_nrk_os_timer_get>
    3ac4:	18 2f       	mov	r17, r24

//printf( "t1 %lu %lu\n",t.secs, t.nano_secs/NANOS_PER_MS);

    nw = _nrk_time_to_ticks_long (&t);
    3ac6:	ce 01       	movw	r24, r28
    3ac8:	01 96       	adiw	r24, 0x01	; 1
    3aca:	0e 94 5f 20 	call	0x40be	; 0x40be <_nrk_time_to_ticks_long>
// printf( "t2 %u %u\r\n",timer, nw);
    nrk_cur_task_TCB->next_wakeup = nw + timer;
    3ace:	e0 91 e1 05 	lds	r30, 0x05E1
    3ad2:	f0 91 e2 05 	lds	r31, 0x05E2
    3ad6:	61 0f       	add	r22, r17
    3ad8:	71 1d       	adc	r23, r1
    3ada:	81 1d       	adc	r24, r1
    3adc:	91 1d       	adc	r25, r1
    3ade:	65 8b       	std	Z+21, r22	; 0x15
    3ae0:	76 8b       	std	Z+22, r23	; 0x16
    3ae2:	87 8b       	std	Z+23, r24	; 0x17
    3ae4:	90 8f       	std	Z+24, r25	; 0x18
//printf( "wu %u\n",nrk_cur_task_TCB->next_wakeup );
    if (timer < (MAX_SCHED_WAKEUP_TIME - TIME_PAD))
    3ae6:	18 3f       	cpi	r17, 0xF8	; 248
    3ae8:	88 f4       	brcc	.+34     	; 0x3b0c <nrk_wait+0x8e>
    {
        if ((timer + TIME_PAD) <= _nrk_get_next_wakeup ())
    3aea:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <_nrk_get_next_wakeup>
    3aee:	21 2f       	mov	r18, r17
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	2f 5f       	subi	r18, 0xFF	; 255
    3af4:	3f 4f       	sbci	r19, 0xFF	; 255
    3af6:	48 2f       	mov	r20, r24
    3af8:	50 e0       	ldi	r21, 0x00	; 0
    3afa:	24 17       	cp	r18, r20
    3afc:	35 07       	cpc	r19, r21
    3afe:	34 f4       	brge	.+12     	; 0x3b0c <nrk_wait+0x8e>
        {
            timer += TIME_PAD;
    3b00:	82 e0       	ldi	r24, 0x02	; 2
    3b02:	81 0f       	add	r24, r17
            _nrk_prev_timer_val = timer;
    3b04:	80 93 50 04 	sts	0x0450, r24
            _nrk_set_next_wakeup (timer);
    3b08:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <_nrk_set_next_wakeup>
        }
    }
    nrk_int_enable ();
    3b0c:	0e 94 49 13 	call	0x2692	; 0x2692 <nrk_int_enable>

    _nrk_wait_for_scheduler ();
    3b10:	0e 94 34 1c 	call	0x3868	; 0x3868 <_nrk_wait_for_scheduler>
    return NRK_OK;
}
    3b14:	81 e0       	ldi	r24, 0x01	; 1
    3b16:	28 96       	adiw	r28, 0x08	; 8
    3b18:	0f b6       	in	r0, 0x3f	; 63
    3b1a:	f8 94       	cli
    3b1c:	de bf       	out	0x3e, r29	; 62
    3b1e:	0f be       	out	0x3f, r0	; 63
    3b20:	cd bf       	out	0x3d, r28	; 61
    3b22:	df 91       	pop	r29
    3b24:	cf 91       	pop	r28
    3b26:	1f 91       	pop	r17
    3b28:	08 95       	ret

00003b2a <nrk_wait_until>:
    //TIMSK = BM (OCIE1A) | BM(OCIE0);
}


int8_t nrk_wait_until (nrk_time_t t)
{
    3b2a:	8f 92       	push	r8
    3b2c:	9f 92       	push	r9
    3b2e:	af 92       	push	r10
    3b30:	bf 92       	push	r11
    3b32:	cf 92       	push	r12
    3b34:	df 92       	push	r13
    3b36:	ef 92       	push	r14
    3b38:	ff 92       	push	r15
    3b3a:	0f 93       	push	r16
    3b3c:	1f 93       	push	r17
    3b3e:	cf 93       	push	r28
    3b40:	df 93       	push	r29
    3b42:	cd b7       	in	r28, 0x3d	; 61
    3b44:	de b7       	in	r29, 0x3e	; 62
    3b46:	60 97       	sbiw	r28, 0x10	; 16
    3b48:	0f b6       	in	r0, 0x3f	; 63
    3b4a:	f8 94       	cli
    3b4c:	de bf       	out	0x3e, r29	; 62
    3b4e:	0f be       	out	0x3f, r0	; 63
    3b50:	cd bf       	out	0x3d, r28	; 61
    3b52:	29 87       	std	Y+9, r18	; 0x09
    3b54:	3a 87       	std	Y+10, r19	; 0x0a
    3b56:	4b 87       	std	Y+11, r20	; 0x0b
    3b58:	5c 87       	std	Y+12, r21	; 0x0c
    3b5a:	6d 87       	std	Y+13, r22	; 0x0d
    3b5c:	7e 87       	std	Y+14, r23	; 0x0e
    3b5e:	8f 87       	std	Y+15, r24	; 0x0f
    3b60:	98 8b       	std	Y+16, r25	; 0x10
    //c = _nrk_os_timer_get ();
    //do{
    //}while(_nrk_os_timer_get()==c);

    //ttt=c+1;
    nrk_time_get (&ct);
    3b62:	ce 01       	movw	r24, r28
    3b64:	01 96       	adiw	r24, 0x01	; 1
    3b66:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <nrk_time_get>

    v = nrk_time_sub (&t, t, ct);
    3b6a:	89 80       	ldd	r8, Y+1	; 0x01
    3b6c:	9a 80       	ldd	r9, Y+2	; 0x02
    3b6e:	ab 80       	ldd	r10, Y+3	; 0x03
    3b70:	bc 80       	ldd	r11, Y+4	; 0x04
    3b72:	cd 80       	ldd	r12, Y+5	; 0x05
    3b74:	de 80       	ldd	r13, Y+6	; 0x06
    3b76:	ef 80       	ldd	r14, Y+7	; 0x07
    3b78:	f8 84       	ldd	r15, Y+8	; 0x08
    3b7a:	09 85       	ldd	r16, Y+9	; 0x09
    3b7c:	1a 85       	ldd	r17, Y+10	; 0x0a
    3b7e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3b80:	3c 85       	ldd	r19, Y+12	; 0x0c
    3b82:	4d 85       	ldd	r20, Y+13	; 0x0d
    3b84:	5e 85       	ldd	r21, Y+14	; 0x0e
    3b86:	6f 85       	ldd	r22, Y+15	; 0x0f
    3b88:	78 89       	ldd	r23, Y+16	; 0x10
    3b8a:	ce 01       	movw	r24, r28
    3b8c:	09 96       	adiw	r24, 0x09	; 9
    3b8e:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <nrk_time_sub>
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    3b92:	8f 3f       	cpi	r24, 0xFF	; 255
    3b94:	61 f0       	breq	.+24     	; 0x3bae <nrk_wait_until+0x84>
//if(t.secs==ct.secs && t.nano_secs<ct.nano_secs) return 0;

//t.secs-=ct.secs;
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);
    3b96:	29 85       	ldd	r18, Y+9	; 0x09
    3b98:	3a 85       	ldd	r19, Y+10	; 0x0a
    3b9a:	4b 85       	ldd	r20, Y+11	; 0x0b
    3b9c:	5c 85       	ldd	r21, Y+12	; 0x0c
    3b9e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3ba0:	7e 85       	ldd	r23, Y+14	; 0x0e
    3ba2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ba4:	98 89       	ldd	r25, Y+16	; 0x10
    3ba6:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <nrk_wait>

    return NRK_OK;
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	01 c0       	rjmp	.+2      	; 0x3bb0 <nrk_wait_until+0x86>

    v = nrk_time_sub (&t, t, ct);
    //nrk_time_compact_nanos(&t);
    if (v == NRK_ERROR)
    {
        return NRK_ERROR;
    3bae:	8f ef       	ldi	r24, 0xFF	; 255
//t.nano_secs-=ct.nano_secs;
//
    nrk_wait (t);

    return NRK_OK;
}
    3bb0:	60 96       	adiw	r28, 0x10	; 16
    3bb2:	0f b6       	in	r0, 0x3f	; 63
    3bb4:	f8 94       	cli
    3bb6:	de bf       	out	0x3e, r29	; 62
    3bb8:	0f be       	out	0x3f, r0	; 63
    3bba:	cd bf       	out	0x3d, r28	; 61
    3bbc:	df 91       	pop	r29
    3bbe:	cf 91       	pop	r28
    3bc0:	1f 91       	pop	r17
    3bc2:	0f 91       	pop	r16
    3bc4:	ff 90       	pop	r15
    3bc6:	ef 90       	pop	r14
    3bc8:	df 90       	pop	r13
    3bca:	cf 90       	pop	r12
    3bcc:	bf 90       	pop	r11
    3bce:	af 90       	pop	r10
    3bd0:	9f 90       	pop	r9
    3bd2:	8f 90       	pop	r8
    3bd4:	08 95       	ret

00003bd6 <nrk_get_pid>:


uint8_t nrk_get_pid ()
{
    return nrk_cur_task_TCB->task_ID;
    3bd6:	e0 91 e1 05 	lds	r30, 0x05E1
    3bda:	f0 91 e2 05 	lds	r31, 0x05E2
}
    3bde:	80 85       	ldd	r24, Z+8	; 0x08
    3be0:	08 95       	ret

00003be2 <nrk_time_get>:
#include <nrk.h>
#include <nrk_timer.h>
#include <nrk_error.h>

void nrk_time_get(nrk_time_t *t)
{
    3be2:	cf 92       	push	r12
    3be4:	df 92       	push	r13
    3be6:	ef 92       	push	r14
    3be8:	ff 92       	push	r15
    3bea:	cf 93       	push	r28
    3bec:	df 93       	push	r29
    3bee:	ec 01       	movw	r28, r24
 //t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get()%PRECISION_TICKS_PER_TICK)*(uint32_t)NANOS_PER_PRECISION_TICK);
#ifdef NRK_SUB_TICK_TIMING
       	t->nano_secs=(((uint32_t)_nrk_precision_os_timer_get())*(uint32_t)NANOS_PER_PRECISION_TICK);
#else
       	t->nano_secs=0;
    3bf0:	1c 82       	std	Y+4, r1	; 0x04
    3bf2:	1d 82       	std	Y+5, r1	; 0x05
    3bf4:	1e 82       	std	Y+6, r1	; 0x06
    3bf6:	1f 82       	std	Y+7, r1	; 0x07

#endif

 t->secs=nrk_system_time.secs;
    3bf8:	40 91 d8 05 	lds	r20, 0x05D8
    3bfc:	50 91 d9 05 	lds	r21, 0x05D9
    3c00:	60 91 da 05 	lds	r22, 0x05DA
    3c04:	70 91 db 05 	lds	r23, 0x05DB
    3c08:	48 83       	st	Y, r20
    3c0a:	59 83       	std	Y+1, r21	; 0x01
    3c0c:	6a 83       	std	Y+2, r22	; 0x02
    3c0e:	7b 83       	std	Y+3, r23	; 0x03
 t->nano_secs+=nrk_system_time.nano_secs;
    3c10:	c0 90 dc 05 	lds	r12, 0x05DC
    3c14:	d0 90 dd 05 	lds	r13, 0x05DD
    3c18:	e0 90 de 05 	lds	r14, 0x05DE
    3c1c:	f0 90 df 05 	lds	r15, 0x05DF
    3c20:	cc 82       	std	Y+4, r12	; 0x04
    3c22:	dd 82       	std	Y+5, r13	; 0x05
    3c24:	ee 82       	std	Y+6, r14	; 0x06
    3c26:	ff 82       	std	Y+7, r15	; 0x07
   
   t->nano_secs+=((uint32_t)_nrk_os_timer_get()*(uint32_t)NANOS_PER_TICK);
    3c28:	0e 94 80 26 	call	0x4d00	; 0x4d00 <_nrk_os_timer_get>
    3c2c:	a8 2f       	mov	r26, r24
    3c2e:	b0 e0       	ldi	r27, 0x00	; 0
    3c30:	23 eb       	ldi	r18, 0xB3	; 179
    3c32:	36 ee       	ldi	r19, 0xE6	; 230
    3c34:	4e e0       	ldi	r20, 0x0E	; 14
    3c36:	50 e0       	ldi	r21, 0x00	; 0
    3c38:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__muluhisi3>
    3c3c:	6c 0d       	add	r22, r12
    3c3e:	7d 1d       	adc	r23, r13
    3c40:	8e 1d       	adc	r24, r14
    3c42:	9f 1d       	adc	r25, r15
    3c44:	6c 83       	std	Y+4, r22	; 0x04
    3c46:	7d 83       	std	Y+5, r23	; 0x05
    3c48:	8e 83       	std	Y+6, r24	; 0x06
    3c4a:	9f 83       	std	Y+7, r25	; 0x07
  

    while(t->nano_secs>=(uint32_t)NANOS_PER_SEC)
    3c4c:	4c 81       	ldd	r20, Y+4	; 0x04
    3c4e:	5d 81       	ldd	r21, Y+5	; 0x05
    3c50:	6e 81       	ldd	r22, Y+6	; 0x06
    3c52:	7f 81       	ldd	r23, Y+7	; 0x07
    3c54:	41 15       	cp	r20, r1
    3c56:	8a ec       	ldi	r24, 0xCA	; 202
    3c58:	58 07       	cpc	r21, r24
    3c5a:	8a e9       	ldi	r24, 0x9A	; 154
    3c5c:	68 07       	cpc	r22, r24
    3c5e:	8b e3       	ldi	r24, 0x3B	; 59
    3c60:	78 07       	cpc	r23, r24
    3c62:	a0 f0       	brcs	.+40     	; 0x3c8c <nrk_time_get+0xaa>
    {
    t->nano_secs-=(uint32_t)NANOS_PER_SEC;
    3c64:	5a 5c       	subi	r21, 0xCA	; 202
    3c66:	6a 49       	sbci	r22, 0x9A	; 154
    3c68:	7b 43       	sbci	r23, 0x3B	; 59
    3c6a:	4c 83       	std	Y+4, r20	; 0x04
    3c6c:	5d 83       	std	Y+5, r21	; 0x05
    3c6e:	6e 83       	std	Y+6, r22	; 0x06
    3c70:	7f 83       	std	Y+7, r23	; 0x07
    t->secs++;
    3c72:	48 81       	ld	r20, Y
    3c74:	59 81       	ldd	r21, Y+1	; 0x01
    3c76:	6a 81       	ldd	r22, Y+2	; 0x02
    3c78:	7b 81       	ldd	r23, Y+3	; 0x03
    3c7a:	4f 5f       	subi	r20, 0xFF	; 255
    3c7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c7e:	6f 4f       	sbci	r22, 0xFF	; 255
    3c80:	7f 4f       	sbci	r23, 0xFF	; 255
    3c82:	48 83       	st	Y, r20
    3c84:	59 83       	std	Y+1, r21	; 0x01
    3c86:	6a 83       	std	Y+2, r22	; 0x02
    3c88:	7b 83       	std	Y+3, r23	; 0x03
    3c8a:	e0 cf       	rjmp	.-64     	; 0x3c4c <nrk_time_get+0x6a>
    }

}
    3c8c:	df 91       	pop	r29
    3c8e:	cf 91       	pop	r28
    3c90:	ff 90       	pop	r15
    3c92:	ef 90       	pop	r14
    3c94:	df 90       	pop	r13
    3c96:	cf 90       	pop	r12
    3c98:	08 95       	ret

00003c9a <nrk_time_sub>:
/*
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
    3c9a:	8f 92       	push	r8
    3c9c:	9f 92       	push	r9
    3c9e:	af 92       	push	r10
    3ca0:	bf 92       	push	r11
    3ca2:	cf 92       	push	r12
    3ca4:	df 92       	push	r13
    3ca6:	ef 92       	push	r14
    3ca8:	ff 92       	push	r15
    3caa:	0f 93       	push	r16
    3cac:	1f 93       	push	r17
    3cae:	cf 93       	push	r28
    3cb0:	df 93       	push	r29
    3cb2:	cd b7       	in	r28, 0x3d	; 61
    3cb4:	de b7       	in	r29, 0x3e	; 62
    3cb6:	60 97       	sbiw	r28, 0x10	; 16
    3cb8:	0f b6       	in	r0, 0x3f	; 63
    3cba:	f8 94       	cli
    3cbc:	de bf       	out	0x3e, r29	; 62
    3cbe:	0f be       	out	0x3f, r0	; 63
    3cc0:	cd bf       	out	0x3d, r28	; 61
    3cc2:	fc 01       	movw	r30, r24
    3cc4:	09 83       	std	Y+1, r16	; 0x01
    3cc6:	1a 83       	std	Y+2, r17	; 0x02
    3cc8:	2b 83       	std	Y+3, r18	; 0x03
    3cca:	3c 83       	std	Y+4, r19	; 0x04
    3ccc:	4d 83       	std	Y+5, r20	; 0x05
    3cce:	5e 83       	std	Y+6, r21	; 0x06
    3cd0:	6f 83       	std	Y+7, r22	; 0x07
    3cd2:	78 87       	std	Y+8, r23	; 0x08
    3cd4:	89 86       	std	Y+9, r8	; 0x09
    3cd6:	9a 86       	std	Y+10, r9	; 0x0a
    3cd8:	ab 86       	std	Y+11, r10	; 0x0b
    3cda:	bc 86       	std	Y+12, r11	; 0x0c
    3cdc:	cd 86       	std	Y+13, r12	; 0x0d
    3cde:	de 86       	std	Y+14, r13	; 0x0e
    3ce0:	ef 86       	std	Y+15, r14	; 0x0f
    3ce2:	f8 8a       	std	Y+16, r15	; 0x10
    3ce4:	89 80       	ldd	r8, Y+1	; 0x01
    3ce6:	9a 80       	ldd	r9, Y+2	; 0x02
    3ce8:	ab 80       	ldd	r10, Y+3	; 0x03
    3cea:	bc 80       	ldd	r11, Y+4	; 0x04
    3cec:	0d 81       	ldd	r16, Y+5	; 0x05
    3cee:	1e 81       	ldd	r17, Y+6	; 0x06
    3cf0:	2f 81       	ldd	r18, Y+7	; 0x07
    3cf2:	38 85       	ldd	r19, Y+8	; 0x08
    3cf4:	c9 84       	ldd	r12, Y+9	; 0x09
    3cf6:	da 84       	ldd	r13, Y+10	; 0x0a
    3cf8:	eb 84       	ldd	r14, Y+11	; 0x0b
    3cfa:	fc 84       	ldd	r15, Y+12	; 0x0c
    3cfc:	4d 85       	ldd	r20, Y+13	; 0x0d
    3cfe:	5e 85       	ldd	r21, Y+14	; 0x0e
    3d00:	6f 85       	ldd	r22, Y+15	; 0x0f
    3d02:	78 89       	ldd	r23, Y+16	; 0x10
if(high.secs<low.secs) return NRK_ERROR; 
    3d04:	8c 14       	cp	r8, r12
    3d06:	9d 04       	cpc	r9, r13
    3d08:	ae 04       	cpc	r10, r14
    3d0a:	bf 04       	cpc	r11, r15
    3d0c:	08 f4       	brcc	.+2      	; 0x3d10 <nrk_time_sub+0x76>
    3d0e:	3f c0       	rjmp	.+126    	; 0x3d8e <nrk_time_sub+0xf4>
if(low.secs==high.secs)
    3d10:	c8 14       	cp	r12, r8
    3d12:	d9 04       	cpc	r13, r9
    3d14:	ea 04       	cpc	r14, r10
    3d16:	fb 04       	cpc	r15, r11
    3d18:	91 f4       	brne	.+36     	; 0x3d3e <nrk_time_sub+0xa4>
	{
	if((uint32_t)low.nano_secs>(uint32_t)high.nano_secs)  return NRK_ERROR;  
    3d1a:	04 17       	cp	r16, r20
    3d1c:	15 07       	cpc	r17, r21
    3d1e:	26 07       	cpc	r18, r22
    3d20:	37 07       	cpc	r19, r23
    3d22:	a8 f1       	brcs	.+106    	; 0x3d8e <nrk_time_sub+0xf4>
	result->nano_secs=(uint32_t)high.nano_secs-(uint32_t)low.nano_secs;
    3d24:	04 1b       	sub	r16, r20
    3d26:	15 0b       	sbc	r17, r21
    3d28:	26 0b       	sbc	r18, r22
    3d2a:	37 0b       	sbc	r19, r23
    3d2c:	04 83       	std	Z+4, r16	; 0x04
    3d2e:	15 83       	std	Z+5, r17	; 0x05
    3d30:	26 83       	std	Z+6, r18	; 0x06
    3d32:	37 83       	std	Z+7, r19	; 0x07
	result->secs=0;
    3d34:	10 82       	st	Z, r1
    3d36:	11 82       	std	Z+1, r1	; 0x01
    3d38:	12 82       	std	Z+2, r1	; 0x02
    3d3a:	13 82       	std	Z+3, r1	; 0x03
    3d3c:	26 c0       	rjmp	.+76     	; 0x3d8a <nrk_time_sub+0xf0>
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
    3d3e:	04 17       	cp	r16, r20
    3d40:	15 07       	cpc	r17, r21
    3d42:	26 07       	cpc	r18, r22
    3d44:	37 07       	cpc	r19, r23
    3d46:	88 f4       	brcc	.+34     	; 0x3d6a <nrk_time_sub+0xd0>
{
	high.secs--;
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	88 1a       	sub	r8, r24
    3d4c:	91 08       	sbc	r9, r1
    3d4e:	a1 08       	sbc	r10, r1
    3d50:	b1 08       	sbc	r11, r1
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
	result->secs=high.secs-low.secs;
    3d52:	8c 18       	sub	r8, r12
    3d54:	9d 08       	sbc	r9, r13
    3d56:	ae 08       	sbc	r10, r14
    3d58:	bf 08       	sbc	r11, r15
    3d5a:	80 82       	st	Z, r8
    3d5c:	91 82       	std	Z+1, r9	; 0x01
    3d5e:	a2 82       	std	Z+2, r10	; 0x02
    3d60:	b3 82       	std	Z+3, r11	; 0x03
	return NRK_OK;
	}
if(low.nano_secs > high.nano_secs)
{
	high.secs--;
	high.nano_secs+=(uint32_t)NANOS_PER_SEC;
    3d62:	16 53       	subi	r17, 0x36	; 54
    3d64:	25 46       	sbci	r18, 0x65	; 101
    3d66:	34 4c       	sbci	r19, 0xC4	; 196
    3d68:	08 c0       	rjmp	.+16     	; 0x3d7a <nrk_time_sub+0xe0>
	result->secs=high.secs-low.secs;
	result->nano_secs=high.nano_secs-low.nano_secs;
	return NRK_OK;
}

result->secs=high.secs-low.secs;
    3d6a:	8c 18       	sub	r8, r12
    3d6c:	9d 08       	sbc	r9, r13
    3d6e:	ae 08       	sbc	r10, r14
    3d70:	bf 08       	sbc	r11, r15
    3d72:	80 82       	st	Z, r8
    3d74:	91 82       	std	Z+1, r9	; 0x01
    3d76:	a2 82       	std	Z+2, r10	; 0x02
    3d78:	b3 82       	std	Z+3, r11	; 0x03
result->nano_secs=high.nano_secs-low.nano_secs;
    3d7a:	04 1b       	sub	r16, r20
    3d7c:	15 0b       	sbc	r17, r21
    3d7e:	26 0b       	sbc	r18, r22
    3d80:	37 0b       	sbc	r19, r23
    3d82:	04 83       	std	Z+4, r16	; 0x04
    3d84:	15 83       	std	Z+5, r17	; 0x05
    3d86:	26 83       	std	Z+6, r18	; 0x06
    3d88:	37 83       	std	Z+7, r19	; 0x07
return NRK_OK;
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
    3d8c:	01 c0       	rjmp	.+2      	; 0x3d90 <nrk_time_sub+0xf6>
 * result = high-low
 *
 */
int8_t nrk_time_sub(nrk_time_t *result,nrk_time_t high, nrk_time_t low)
{
if(high.secs<low.secs) return NRK_ERROR; 
    3d8e:	8f ef       	ldi	r24, 0xFF	; 255
}

result->secs=high.secs-low.secs;
result->nano_secs=high.nano_secs-low.nano_secs;
return NRK_OK;
}
    3d90:	60 96       	adiw	r28, 0x10	; 16
    3d92:	0f b6       	in	r0, 0x3f	; 63
    3d94:	f8 94       	cli
    3d96:	de bf       	out	0x3e, r29	; 62
    3d98:	0f be       	out	0x3f, r0	; 63
    3d9a:	cd bf       	out	0x3d, r28	; 61
    3d9c:	df 91       	pop	r29
    3d9e:	cf 91       	pop	r28
    3da0:	1f 91       	pop	r17
    3da2:	0f 91       	pop	r16
    3da4:	ff 90       	pop	r15
    3da6:	ef 90       	pop	r14
    3da8:	df 90       	pop	r13
    3daa:	cf 90       	pop	r12
    3dac:	bf 90       	pop	r11
    3dae:	af 90       	pop	r10
    3db0:	9f 90       	pop	r9
    3db2:	8f 90       	pop	r8
    3db4:	08 95       	ret

00003db6 <nrk_time_compact_nanos>:
 * the nano seconds field, this function will move the nano
 * seconds into the seconds field.
 *
 */
inline void nrk_time_compact_nanos(nrk_time_t *t)
{
    3db6:	fc 01       	movw	r30, r24
  while(t->nano_secs>=NANOS_PER_SEC)
    3db8:	44 81       	ldd	r20, Z+4	; 0x04
    3dba:	55 81       	ldd	r21, Z+5	; 0x05
    3dbc:	66 81       	ldd	r22, Z+6	; 0x06
    3dbe:	77 81       	ldd	r23, Z+7	; 0x07
    3dc0:	41 15       	cp	r20, r1
    3dc2:	8a ec       	ldi	r24, 0xCA	; 202
    3dc4:	58 07       	cpc	r21, r24
    3dc6:	8a e9       	ldi	r24, 0x9A	; 154
    3dc8:	68 07       	cpc	r22, r24
    3dca:	8b e3       	ldi	r24, 0x3B	; 59
    3dcc:	78 07       	cpc	r23, r24
    3dce:	a0 f0       	brcs	.+40     	; 0x3df8 <nrk_time_compact_nanos+0x42>
    {
    t->nano_secs-=NANOS_PER_SEC;
    3dd0:	5a 5c       	subi	r21, 0xCA	; 202
    3dd2:	6a 49       	sbci	r22, 0x9A	; 154
    3dd4:	7b 43       	sbci	r23, 0x3B	; 59
    3dd6:	44 83       	std	Z+4, r20	; 0x04
    3dd8:	55 83       	std	Z+5, r21	; 0x05
    3dda:	66 83       	std	Z+6, r22	; 0x06
    3ddc:	77 83       	std	Z+7, r23	; 0x07
    t->secs++;
    3dde:	40 81       	ld	r20, Z
    3de0:	51 81       	ldd	r21, Z+1	; 0x01
    3de2:	62 81       	ldd	r22, Z+2	; 0x02
    3de4:	73 81       	ldd	r23, Z+3	; 0x03
    3de6:	4f 5f       	subi	r20, 0xFF	; 255
    3de8:	5f 4f       	sbci	r21, 0xFF	; 255
    3dea:	6f 4f       	sbci	r22, 0xFF	; 255
    3dec:	7f 4f       	sbci	r23, 0xFF	; 255
    3dee:	40 83       	st	Z, r20
    3df0:	51 83       	std	Z+1, r21	; 0x01
    3df2:	62 83       	std	Z+2, r22	; 0x02
    3df4:	73 83       	std	Z+3, r23	; 0x03
    3df6:	e0 cf       	rjmp	.-64     	; 0x3db8 <nrk_time_compact_nanos+0x2>
    }
}
    3df8:	08 95       	ret

00003dfa <nrk_time_add>:
/*
 * result = a+b
 *
 */
int8_t nrk_time_add(nrk_time_t *result,nrk_time_t a, nrk_time_t b)
{
    3dfa:	8f 92       	push	r8
    3dfc:	9f 92       	push	r9
    3dfe:	af 92       	push	r10
    3e00:	bf 92       	push	r11
    3e02:	cf 92       	push	r12
    3e04:	df 92       	push	r13
    3e06:	ef 92       	push	r14
    3e08:	ff 92       	push	r15
    3e0a:	0f 93       	push	r16
    3e0c:	1f 93       	push	r17
    3e0e:	cf 93       	push	r28
    3e10:	df 93       	push	r29
    3e12:	cd b7       	in	r28, 0x3d	; 61
    3e14:	de b7       	in	r29, 0x3e	; 62
    3e16:	60 97       	sbiw	r28, 0x10	; 16
    3e18:	0f b6       	in	r0, 0x3f	; 63
    3e1a:	f8 94       	cli
    3e1c:	de bf       	out	0x3e, r29	; 62
    3e1e:	0f be       	out	0x3f, r0	; 63
    3e20:	cd bf       	out	0x3d, r28	; 61
    3e22:	09 83       	std	Y+1, r16	; 0x01
    3e24:	1a 83       	std	Y+2, r17	; 0x02
    3e26:	2b 83       	std	Y+3, r18	; 0x03
    3e28:	3c 83       	std	Y+4, r19	; 0x04
    3e2a:	4d 83       	std	Y+5, r20	; 0x05
    3e2c:	5e 83       	std	Y+6, r21	; 0x06
    3e2e:	6f 83       	std	Y+7, r22	; 0x07
    3e30:	78 87       	std	Y+8, r23	; 0x08
    3e32:	89 86       	std	Y+9, r8	; 0x09
    3e34:	9a 86       	std	Y+10, r9	; 0x0a
    3e36:	ab 86       	std	Y+11, r10	; 0x0b
    3e38:	bc 86       	std	Y+12, r11	; 0x0c
    3e3a:	cd 86       	std	Y+13, r12	; 0x0d
    3e3c:	de 86       	std	Y+14, r13	; 0x0e
    3e3e:	ef 86       	std	Y+15, r14	; 0x0f
    3e40:	f8 8a       	std	Y+16, r15	; 0x10
result->secs=a.secs+b.secs;
    3e42:	49 85       	ldd	r20, Y+9	; 0x09
    3e44:	5a 85       	ldd	r21, Y+10	; 0x0a
    3e46:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e48:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e4a:	09 81       	ldd	r16, Y+1	; 0x01
    3e4c:	1a 81       	ldd	r17, Y+2	; 0x02
    3e4e:	2b 81       	ldd	r18, Y+3	; 0x03
    3e50:	3c 81       	ldd	r19, Y+4	; 0x04
    3e52:	40 0f       	add	r20, r16
    3e54:	51 1f       	adc	r21, r17
    3e56:	62 1f       	adc	r22, r18
    3e58:	73 1f       	adc	r23, r19
    3e5a:	fc 01       	movw	r30, r24
    3e5c:	40 83       	st	Z, r20
    3e5e:	51 83       	std	Z+1, r21	; 0x01
    3e60:	62 83       	std	Z+2, r22	; 0x02
    3e62:	73 83       	std	Z+3, r23	; 0x03
result->nano_secs=a.nano_secs+b.nano_secs;
    3e64:	4d 85       	ldd	r20, Y+13	; 0x0d
    3e66:	5e 85       	ldd	r21, Y+14	; 0x0e
    3e68:	6f 85       	ldd	r22, Y+15	; 0x0f
    3e6a:	78 89       	ldd	r23, Y+16	; 0x10
    3e6c:	0d 81       	ldd	r16, Y+5	; 0x05
    3e6e:	1e 81       	ldd	r17, Y+6	; 0x06
    3e70:	2f 81       	ldd	r18, Y+7	; 0x07
    3e72:	38 85       	ldd	r19, Y+8	; 0x08
    3e74:	40 0f       	add	r20, r16
    3e76:	51 1f       	adc	r21, r17
    3e78:	62 1f       	adc	r22, r18
    3e7a:	73 1f       	adc	r23, r19
    3e7c:	44 83       	std	Z+4, r20	; 0x04
    3e7e:	55 83       	std	Z+5, r21	; 0x05
    3e80:	66 83       	std	Z+6, r22	; 0x06
    3e82:	77 83       	std	Z+7, r23	; 0x07
nrk_time_compact_nanos(result);
    3e84:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <nrk_time_compact_nanos>
return NRK_OK;
}
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	60 96       	adiw	r28, 0x10	; 16
    3e8c:	0f b6       	in	r0, 0x3f	; 63
    3e8e:	f8 94       	cli
    3e90:	de bf       	out	0x3e, r29	; 62
    3e92:	0f be       	out	0x3f, r0	; 63
    3e94:	cd bf       	out	0x3d, r28	; 61
    3e96:	df 91       	pop	r29
    3e98:	cf 91       	pop	r28
    3e9a:	1f 91       	pop	r17
    3e9c:	0f 91       	pop	r16
    3e9e:	ff 90       	pop	r15
    3ea0:	ef 90       	pop	r14
    3ea2:	df 90       	pop	r13
    3ea4:	cf 90       	pop	r12
    3ea6:	bf 90       	pop	r11
    3ea8:	af 90       	pop	r10
    3eaa:	9f 90       	pop	r9
    3eac:	8f 90       	pop	r8
    3eae:	08 95       	ret

00003eb0 <nrk_time_set>:



void nrk_time_set(uint32_t secs, uint32_t nano_secs)
{
  nrk_system_time.secs=secs;
    3eb0:	60 93 d8 05 	sts	0x05D8, r22
    3eb4:	70 93 d9 05 	sts	0x05D9, r23
    3eb8:	80 93 da 05 	sts	0x05DA, r24
    3ebc:	90 93 db 05 	sts	0x05DB, r25
  nrk_system_time.nano_secs=nano_secs;
    3ec0:	20 93 dc 05 	sts	0x05DC, r18
    3ec4:	30 93 dd 05 	sts	0x05DD, r19
    3ec8:	40 93 de 05 	sts	0x05DE, r20
    3ecc:	50 93 df 05 	sts	0x05DF, r21
    3ed0:	08 95       	ret

00003ed2 <_nrk_time_to_ticks>:
}

uint16_t _nrk_time_to_ticks(nrk_time_t *t)
{
    3ed2:	2f 92       	push	r2
    3ed4:	3f 92       	push	r3
    3ed6:	4f 92       	push	r4
    3ed8:	5f 92       	push	r5
    3eda:	6f 92       	push	r6
    3edc:	7f 92       	push	r7
    3ede:	8f 92       	push	r8
    3ee0:	9f 92       	push	r9
    3ee2:	af 92       	push	r10
    3ee4:	bf 92       	push	r11
    3ee6:	cf 92       	push	r12
    3ee8:	df 92       	push	r13
    3eea:	ef 92       	push	r14
    3eec:	ff 92       	push	r15
    3eee:	0f 93       	push	r16
    3ef0:	1f 93       	push	r17
    3ef2:	cf 93       	push	r28
    3ef4:	df 93       	push	r29
    3ef6:	cd b7       	in	r28, 0x3d	; 61
    3ef8:	de b7       	in	r29, 0x3e	; 62
    3efa:	62 97       	sbiw	r28, 0x12	; 18
    3efc:	0f b6       	in	r0, 0x3f	; 63
    3efe:	f8 94       	cli
    3f00:	de bf       	out	0x3e, r29	; 62
    3f02:	0f be       	out	0x3f, r0	; 63
    3f04:	cd bf       	out	0x3d, r28	; 61
uint16_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    3f06:	dc 01       	movw	r26, r24
    3f08:	4d 90       	ld	r4, X+
    3f0a:	5d 90       	ld	r5, X+
    3f0c:	6d 90       	ld	r6, X+
    3f0e:	7c 90       	ld	r7, X
    3f10:	13 97       	sbiw	r26, 0x03	; 3
    3f12:	14 96       	adiw	r26, 0x04	; 4
    3f14:	6d 91       	ld	r22, X+
    3f16:	7d 91       	ld	r23, X+
    3f18:	8d 91       	ld	r24, X+
    3f1a:	9c 91       	ld	r25, X
    3f1c:	17 97       	sbiw	r26, 0x07	; 7
    3f1e:	41 14       	cp	r4, r1
    3f20:	51 04       	cpc	r5, r1
    3f22:	61 04       	cpc	r6, r1
    3f24:	71 04       	cpc	r7, r1
    3f26:	09 f4       	brne	.+2      	; 0x3f2a <_nrk_time_to_ticks+0x58>
    3f28:	6c c0       	rjmp	.+216    	; 0x4002 <_nrk_time_to_ticks+0x130>
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    3f2a:	b2 e4       	ldi	r27, 0x42	; 66
    3f2c:	4b 16       	cp	r4, r27
    3f2e:	51 04       	cpc	r5, r1
    3f30:	61 04       	cpc	r6, r1
    3f32:	71 04       	cpc	r7, r1
    3f34:	08 f0       	brcs	.+2      	; 0x3f38 <_nrk_time_to_ticks+0x66>
    3f36:	6d c0       	rjmp	.+218    	; 0x4012 <_nrk_time_to_ticks+0x140>
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
    3f38:	7b 01       	movw	r14, r22
    3f3a:	8c 01       	movw	r16, r24
    3f3c:	20 e0       	ldi	r18, 0x00	; 0
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	a9 01       	movw	r20, r18
    3f42:	69 83       	std	Y+1, r22	; 0x01
    3f44:	fa 82       	std	Y+2, r15	; 0x02
    3f46:	0b 83       	std	Y+3, r16	; 0x03
    3f48:	1c 83       	std	Y+4, r17	; 0x04
    3f4a:	2d 83       	std	Y+5, r18	; 0x05
    3f4c:	3e 83       	std	Y+6, r19	; 0x06
    3f4e:	4f 83       	std	Y+7, r20	; 0x07
    3f50:	58 87       	std	Y+8, r21	; 0x08
    3f52:	a0 e0       	ldi	r26, 0x00	; 0
    3f54:	b0 e0       	ldi	r27, 0x00	; 0
    3f56:	19 8a       	std	Y+17, r1	; 0x11
    3f58:	1a 8a       	std	Y+18, r1	; 0x12
    3f5a:	31 2c       	mov	r3, r1
    3f5c:	81 2c       	mov	r8, r1
    3f5e:	f0 e0       	ldi	r31, 0x00	; 0
    3f60:	e0 e0       	ldi	r30, 0x00	; 0
    3f62:	91 2c       	mov	r9, r1
    3f64:	9d 01       	movw	r18, r26
    3f66:	49 89       	ldd	r20, Y+17	; 0x11
    3f68:	5a 89       	ldd	r21, Y+18	; 0x12
    3f6a:	63 2d       	mov	r22, r3
    3f6c:	78 2d       	mov	r23, r8
    3f6e:	8f 2f       	mov	r24, r31
    3f70:	9e 2f       	mov	r25, r30
    3f72:	a9 80       	ldd	r10, Y+1	; 0x01
    3f74:	ba 80       	ldd	r11, Y+2	; 0x02
    3f76:	cb 80       	ldd	r12, Y+3	; 0x03
    3f78:	dc 80       	ldd	r13, Y+4	; 0x04
    3f7a:	ed 80       	ldd	r14, Y+5	; 0x05
    3f7c:	fe 80       	ldd	r15, Y+6	; 0x06
    3f7e:	0f 81       	ldd	r16, Y+7	; 0x07
    3f80:	18 85       	ldd	r17, Y+8	; 0x08
    3f82:	0e 94 1e 2c 	call	0x583c	; 0x583c <__adddi3>
    3f86:	22 2e       	mov	r2, r18
    3f88:	39 87       	std	Y+9, r19	; 0x09
    3f8a:	4a 87       	std	Y+10, r20	; 0x0a
    3f8c:	5b 87       	std	Y+11, r21	; 0x0b
    3f8e:	6c 87       	std	Y+12, r22	; 0x0c
    3f90:	7d 87       	std	Y+13, r23	; 0x0d
    3f92:	8e 87       	std	Y+14, r24	; 0x0e
    3f94:	9f 87       	std	Y+15, r25	; 0x0f
    3f96:	9d 01       	movw	r18, r26
    3f98:	49 89       	ldd	r20, Y+17	; 0x11
    3f9a:	5a 89       	ldd	r21, Y+18	; 0x12
    3f9c:	63 2d       	mov	r22, r3
    3f9e:	78 2d       	mov	r23, r8
    3fa0:	8f 2f       	mov	r24, r31
    3fa2:	9e 2f       	mov	r25, r30
    3fa4:	36 53       	subi	r19, 0x36	; 54
    3fa6:	45 46       	sbci	r20, 0x65	; 101
    3fa8:	54 4c       	sbci	r21, 0xC4	; 196
    3faa:	6f 4f       	sbci	r22, 0xFF	; 255
    3fac:	7f 4f       	sbci	r23, 0xFF	; 255
    3fae:	8f 4f       	sbci	r24, 0xFF	; 255
    3fb0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb2:	d9 01       	movw	r26, r18
    3fb4:	49 8b       	std	Y+17, r20	; 0x11
    3fb6:	5a 8b       	std	Y+18, r21	; 0x12
    3fb8:	36 2e       	mov	r3, r22
    3fba:	87 2e       	mov	r8, r23
    3fbc:	f8 2f       	mov	r31, r24
    3fbe:	e9 2f       	mov	r30, r25
   if(t->secs>65) return 0;
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    3fc0:	49 2d       	mov	r20, r9
    3fc2:	50 e0       	ldi	r21, 0x00	; 0
    3fc4:	60 e0       	ldi	r22, 0x00	; 0
    3fc6:	70 e0       	ldi	r23, 0x00	; 0
    3fc8:	44 15       	cp	r20, r4
    3fca:	55 05       	cpc	r21, r5
    3fcc:	66 05       	cpc	r22, r6
    3fce:	77 05       	cpc	r23, r7
    3fd0:	10 f4       	brcc	.+4      	; 0x3fd6 <_nrk_time_to_ticks+0x104>
    3fd2:	93 94       	inc	r9
    3fd4:	c7 cf       	rjmp	.-114    	; 0x3f64 <_nrk_time_to_ticks+0x92>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    3fd6:	83 eb       	ldi	r24, 0xB3	; 179
    3fd8:	a8 2e       	mov	r10, r24
    3fda:	96 ee       	ldi	r25, 0xE6	; 230
    3fdc:	b9 2e       	mov	r11, r25
    3fde:	2e e0       	ldi	r18, 0x0E	; 14
    3fe0:	c2 2e       	mov	r12, r18
    3fe2:	d1 2c       	mov	r13, r1
    3fe4:	e1 2c       	mov	r14, r1
    3fe6:	f1 2c       	mov	r15, r1
    3fe8:	00 e0       	ldi	r16, 0x00	; 0
    3fea:	10 e0       	ldi	r17, 0x00	; 0
    3fec:	22 2d       	mov	r18, r2
    3fee:	39 85       	ldd	r19, Y+9	; 0x09
    3ff0:	4a 85       	ldd	r20, Y+10	; 0x0a
    3ff2:	5b 85       	ldd	r21, Y+11	; 0x0b
    3ff4:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ff6:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ff8:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ffa:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ffc:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__udivdi3>
    4000:	06 c0       	rjmp	.+12     	; 0x400e <_nrk_time_to_ticks+0x13c>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    4002:	23 eb       	ldi	r18, 0xB3	; 179
    4004:	36 ee       	ldi	r19, 0xE6	; 230
    4006:	4e e0       	ldi	r20, 0x0E	; 14
    4008:	50 e0       	ldi	r21, 0x00	; 0
    400a:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__udivmodsi4>
    400e:	c9 01       	movw	r24, r18
    4010:	02 c0       	rjmp	.+4      	; 0x4016 <_nrk_time_to_ticks+0x144>
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
{
   tmp=t->nano_secs;
   if(t->secs>65) return 0;
    4012:	80 e0       	ldi	r24, 0x00	; 0
    4014:	90 e0       	ldi	r25, 0x00	; 0
}
*/
//ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
//ticks+=t->secs*(uint32_t)TICKS_PER_SEC;
return ticks;
}
    4016:	62 96       	adiw	r28, 0x12	; 18
    4018:	0f b6       	in	r0, 0x3f	; 63
    401a:	f8 94       	cli
    401c:	de bf       	out	0x3e, r29	; 62
    401e:	0f be       	out	0x3f, r0	; 63
    4020:	cd bf       	out	0x3d, r28	; 61
    4022:	df 91       	pop	r29
    4024:	cf 91       	pop	r28
    4026:	1f 91       	pop	r17
    4028:	0f 91       	pop	r16
    402a:	ff 90       	pop	r15
    402c:	ef 90       	pop	r14
    402e:	df 90       	pop	r13
    4030:	cf 90       	pop	r12
    4032:	bf 90       	pop	r11
    4034:	af 90       	pop	r10
    4036:	9f 90       	pop	r9
    4038:	8f 90       	pop	r8
    403a:	7f 90       	pop	r7
    403c:	6f 90       	pop	r6
    403e:	5f 90       	pop	r5
    4040:	4f 90       	pop	r4
    4042:	3f 90       	pop	r3
    4044:	2f 90       	pop	r2
    4046:	08 95       	ret

00004048 <_nrk_ticks_to_time>:

nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
    4048:	cf 92       	push	r12
    404a:	df 92       	push	r13
    404c:	ef 92       	push	r14
    404e:	ff 92       	push	r15
    4050:	cf 93       	push	r28
    4052:	df 93       	push	r29
    4054:	cd b7       	in	r28, 0x3d	; 61
    4056:	de b7       	in	r29, 0x3e	; 62
    4058:	28 97       	sbiw	r28, 0x08	; 8
    405a:	0f b6       	in	r0, 0x3f	; 63
    405c:	f8 94       	cli
    405e:	de bf       	out	0x3e, r29	; 62
    4060:	0f be       	out	0x3f, r0	; 63
    4062:	cd bf       	out	0x3d, r28	; 61
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
    4064:	6b 01       	movw	r12, r22
    4066:	7c 01       	movw	r14, r24
    4068:	3a e0       	ldi	r19, 0x0A	; 10
    406a:	f6 94       	lsr	r15
    406c:	e7 94       	ror	r14
    406e:	d7 94       	ror	r13
    4070:	c7 94       	ror	r12
    4072:	3a 95       	dec	r19
    4074:	d1 f7       	brne	.-12     	; 0x406a <_nrk_ticks_to_time+0x22>
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;

return t;
    4076:	c9 82       	std	Y+1, r12	; 0x01
    4078:	da 82       	std	Y+2, r13	; 0x02
    407a:	eb 82       	std	Y+3, r14	; 0x03
    407c:	fc 82       	std	Y+4, r15	; 0x04
nrk_time_t _nrk_ticks_to_time(uint32_t ticks)
{
nrk_time_t t;

t.secs=ticks/TICKS_PER_SEC;
t.nano_secs=(ticks%TICKS_PER_SEC)*NANOS_PER_TICK;
    407e:	9b 01       	movw	r18, r22
    4080:	ac 01       	movw	r20, r24
    4082:	33 70       	andi	r19, 0x03	; 3
    4084:	44 27       	eor	r20, r20
    4086:	55 27       	eor	r21, r21
    4088:	63 eb       	ldi	r22, 0xB3	; 179
    408a:	76 ee       	ldi	r23, 0xE6	; 230
    408c:	8e e0       	ldi	r24, 0x0E	; 14
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__mulsi3>

return t;
    4094:	6d 83       	std	Y+5, r22	; 0x05
    4096:	7e 83       	std	Y+6, r23	; 0x06
    4098:	8f 83       	std	Y+7, r24	; 0x07
    409a:	98 87       	std	Y+8, r25	; 0x08
    409c:	2c 2d       	mov	r18, r12
    409e:	3a 81       	ldd	r19, Y+2	; 0x02
    40a0:	4b 81       	ldd	r20, Y+3	; 0x03
    40a2:	5c 81       	ldd	r21, Y+4	; 0x04
}
    40a4:	28 96       	adiw	r28, 0x08	; 8
    40a6:	0f b6       	in	r0, 0x3f	; 63
    40a8:	f8 94       	cli
    40aa:	de bf       	out	0x3e, r29	; 62
    40ac:	0f be       	out	0x3f, r0	; 63
    40ae:	cd bf       	out	0x3d, r28	; 61
    40b0:	df 91       	pop	r29
    40b2:	cf 91       	pop	r28
    40b4:	ff 90       	pop	r15
    40b6:	ef 90       	pop	r14
    40b8:	df 90       	pop	r13
    40ba:	cf 90       	pop	r12
    40bc:	08 95       	ret

000040be <_nrk_time_to_ticks_long>:

uint32_t _nrk_time_to_ticks_long(nrk_time_t *t)
{
    40be:	2f 92       	push	r2
    40c0:	3f 92       	push	r3
    40c2:	4f 92       	push	r4
    40c4:	5f 92       	push	r5
    40c6:	6f 92       	push	r6
    40c8:	7f 92       	push	r7
    40ca:	8f 92       	push	r8
    40cc:	9f 92       	push	r9
    40ce:	af 92       	push	r10
    40d0:	bf 92       	push	r11
    40d2:	cf 92       	push	r12
    40d4:	df 92       	push	r13
    40d6:	ef 92       	push	r14
    40d8:	ff 92       	push	r15
    40da:	0f 93       	push	r16
    40dc:	1f 93       	push	r17
    40de:	cf 93       	push	r28
    40e0:	df 93       	push	r29
    40e2:	cd b7       	in	r28, 0x3d	; 61
    40e4:	de b7       	in	r29, 0x3e	; 62
    40e6:	62 97       	sbiw	r28, 0x12	; 18
    40e8:	0f b6       	in	r0, 0x3f	; 63
    40ea:	f8 94       	cli
    40ec:	de bf       	out	0x3e, r29	; 62
    40ee:	0f be       	out	0x3f, r0	; 63
    40f0:	cd bf       	out	0x3d, r28	; 61
uint32_t ticks;
uint64_t tmp;
uint8_t i;
// FIXME: This will overflow
if(t->secs>0)
    40f2:	dc 01       	movw	r26, r24
    40f4:	4d 90       	ld	r4, X+
    40f6:	5d 90       	ld	r5, X+
    40f8:	6d 90       	ld	r6, X+
    40fa:	7c 90       	ld	r7, X
    40fc:	13 97       	sbiw	r26, 0x03	; 3
    40fe:	14 96       	adiw	r26, 0x04	; 4
    4100:	6d 91       	ld	r22, X+
    4102:	7d 91       	ld	r23, X+
    4104:	8d 91       	ld	r24, X+
    4106:	9c 91       	ld	r25, X
    4108:	17 97       	sbiw	r26, 0x07	; 7
    410a:	41 14       	cp	r4, r1
    410c:	51 04       	cpc	r5, r1
    410e:	61 04       	cpc	r6, r1
    4110:	71 04       	cpc	r7, r1
    4112:	09 f4       	brne	.+2      	; 0x4116 <_nrk_time_to_ticks_long+0x58>
    4114:	66 c0       	rjmp	.+204    	; 0x41e2 <_nrk_time_to_ticks_long+0x124>
{
   tmp=t->nano_secs;
    4116:	7b 01       	movw	r14, r22
    4118:	8c 01       	movw	r16, r24
    411a:	20 e0       	ldi	r18, 0x00	; 0
    411c:	30 e0       	ldi	r19, 0x00	; 0
    411e:	a9 01       	movw	r20, r18
    4120:	69 83       	std	Y+1, r22	; 0x01
    4122:	fa 82       	std	Y+2, r15	; 0x02
    4124:	0b 83       	std	Y+3, r16	; 0x03
    4126:	1c 83       	std	Y+4, r17	; 0x04
    4128:	2d 83       	std	Y+5, r18	; 0x05
    412a:	3e 83       	std	Y+6, r19	; 0x06
    412c:	4f 83       	std	Y+7, r20	; 0x07
    412e:	58 87       	std	Y+8, r21	; 0x08
   for(i=0; i<t->secs; i++ ) tmp+=NANOS_PER_SEC; // t->nano_secs+=NANOS_PER_SEC;
    4130:	a0 e0       	ldi	r26, 0x00	; 0
    4132:	b0 e0       	ldi	r27, 0x00	; 0
    4134:	19 8a       	std	Y+17, r1	; 0x11
    4136:	1a 8a       	std	Y+18, r1	; 0x12
    4138:	31 2c       	mov	r3, r1
    413a:	81 2c       	mov	r8, r1
    413c:	f0 e0       	ldi	r31, 0x00	; 0
    413e:	e0 e0       	ldi	r30, 0x00	; 0
    4140:	91 2c       	mov	r9, r1
    4142:	9d 01       	movw	r18, r26
    4144:	49 89       	ldd	r20, Y+17	; 0x11
    4146:	5a 89       	ldd	r21, Y+18	; 0x12
    4148:	63 2d       	mov	r22, r3
    414a:	78 2d       	mov	r23, r8
    414c:	8f 2f       	mov	r24, r31
    414e:	9e 2f       	mov	r25, r30
    4150:	a9 80       	ldd	r10, Y+1	; 0x01
    4152:	ba 80       	ldd	r11, Y+2	; 0x02
    4154:	cb 80       	ldd	r12, Y+3	; 0x03
    4156:	dc 80       	ldd	r13, Y+4	; 0x04
    4158:	ed 80       	ldd	r14, Y+5	; 0x05
    415a:	fe 80       	ldd	r15, Y+6	; 0x06
    415c:	0f 81       	ldd	r16, Y+7	; 0x07
    415e:	18 85       	ldd	r17, Y+8	; 0x08
    4160:	0e 94 1e 2c 	call	0x583c	; 0x583c <__adddi3>
    4164:	22 2e       	mov	r2, r18
    4166:	39 87       	std	Y+9, r19	; 0x09
    4168:	4a 87       	std	Y+10, r20	; 0x0a
    416a:	5b 87       	std	Y+11, r21	; 0x0b
    416c:	6c 87       	std	Y+12, r22	; 0x0c
    416e:	7d 87       	std	Y+13, r23	; 0x0d
    4170:	8e 87       	std	Y+14, r24	; 0x0e
    4172:	9f 87       	std	Y+15, r25	; 0x0f
    4174:	9d 01       	movw	r18, r26
    4176:	49 89       	ldd	r20, Y+17	; 0x11
    4178:	5a 89       	ldd	r21, Y+18	; 0x12
    417a:	63 2d       	mov	r22, r3
    417c:	78 2d       	mov	r23, r8
    417e:	8f 2f       	mov	r24, r31
    4180:	9e 2f       	mov	r25, r30
    4182:	36 53       	subi	r19, 0x36	; 54
    4184:	45 46       	sbci	r20, 0x65	; 101
    4186:	54 4c       	sbci	r21, 0xC4	; 196
    4188:	6f 4f       	sbci	r22, 0xFF	; 255
    418a:	7f 4f       	sbci	r23, 0xFF	; 255
    418c:	8f 4f       	sbci	r24, 0xFF	; 255
    418e:	9f 4f       	sbci	r25, 0xFF	; 255
    4190:	d9 01       	movw	r26, r18
    4192:	49 8b       	std	Y+17, r20	; 0x11
    4194:	5a 8b       	std	Y+18, r21	; 0x12
    4196:	36 2e       	mov	r3, r22
    4198:	87 2e       	mov	r8, r23
    419a:	f8 2f       	mov	r31, r24
    419c:	e9 2f       	mov	r30, r25
    419e:	49 2d       	mov	r20, r9
    41a0:	50 e0       	ldi	r21, 0x00	; 0
    41a2:	60 e0       	ldi	r22, 0x00	; 0
    41a4:	70 e0       	ldi	r23, 0x00	; 0
    41a6:	44 15       	cp	r20, r4
    41a8:	55 05       	cpc	r21, r5
    41aa:	66 05       	cpc	r22, r6
    41ac:	77 05       	cpc	r23, r7
    41ae:	10 f4       	brcc	.+4      	; 0x41b4 <_nrk_time_to_ticks_long+0xf6>
    41b0:	93 94       	inc	r9
    41b2:	c7 cf       	rjmp	.-114    	; 0x4142 <_nrk_time_to_ticks_long+0x84>
   ticks=tmp/(uint32_t)NANOS_PER_TICK;
    41b4:	43 eb       	ldi	r20, 0xB3	; 179
    41b6:	a4 2e       	mov	r10, r20
    41b8:	56 ee       	ldi	r21, 0xE6	; 230
    41ba:	b5 2e       	mov	r11, r21
    41bc:	6e e0       	ldi	r22, 0x0E	; 14
    41be:	c6 2e       	mov	r12, r22
    41c0:	d1 2c       	mov	r13, r1
    41c2:	e1 2c       	mov	r14, r1
    41c4:	f1 2c       	mov	r15, r1
    41c6:	00 e0       	ldi	r16, 0x00	; 0
    41c8:	10 e0       	ldi	r17, 0x00	; 0
    41ca:	22 2d       	mov	r18, r2
    41cc:	39 85       	ldd	r19, Y+9	; 0x09
    41ce:	4a 85       	ldd	r20, Y+10	; 0x0a
    41d0:	5b 85       	ldd	r21, Y+11	; 0x0b
    41d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    41d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    41d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    41d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    41da:	0e 94 b3 2b 	call	0x5766	; 0x5766 <__udivdi3>
    41de:	ca 01       	movw	r24, r20
    41e0:	07 c0       	rjmp	.+14     	; 0x41f0 <_nrk_time_to_ticks_long+0x132>
   //ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
}else
{
ticks=t->nano_secs/(uint32_t)NANOS_PER_TICK;
    41e2:	23 eb       	ldi	r18, 0xB3	; 179
    41e4:	36 ee       	ldi	r19, 0xE6	; 230
    41e6:	4e e0       	ldi	r20, 0x0E	; 14
    41e8:	50 e0       	ldi	r21, 0x00	; 0
    41ea:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__udivmodsi4>
    41ee:	ca 01       	movw	r24, r20
}
return ticks;
}
    41f0:	b9 01       	movw	r22, r18
    41f2:	62 96       	adiw	r28, 0x12	; 18
    41f4:	0f b6       	in	r0, 0x3f	; 63
    41f6:	f8 94       	cli
    41f8:	de bf       	out	0x3e, r29	; 62
    41fa:	0f be       	out	0x3f, r0	; 63
    41fc:	cd bf       	out	0x3d, r28	; 61
    41fe:	df 91       	pop	r29
    4200:	cf 91       	pop	r28
    4202:	1f 91       	pop	r17
    4204:	0f 91       	pop	r16
    4206:	ff 90       	pop	r15
    4208:	ef 90       	pop	r14
    420a:	df 90       	pop	r13
    420c:	cf 90       	pop	r12
    420e:	bf 90       	pop	r11
    4210:	af 90       	pop	r10
    4212:	9f 90       	pop	r9
    4214:	8f 90       	pop	r8
    4216:	7f 90       	pop	r7
    4218:	6f 90       	pop	r6
    421a:	5f 90       	pop	r5
    421c:	4f 90       	pop	r4
    421e:	3f 90       	pop	r3
    4220:	2f 90       	pop	r2
    4222:	08 95       	ret

00004224 <nrk_idle_task>:
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
	    _nrk_cpu_state=CPU_SLEEP;
    4224:	c2 e0       	ldi	r28, 0x02	; 2

  nrk_stack_check(); 
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    {
	    _nrk_cpu_state=CPU_IDLE;
    4226:	d1 e0       	ldi	r29, 0x01	; 1
volatile unsigned char *stkc;
// unsigned int *stk ;  // 2 bytes
while(1)
{

  nrk_stack_check(); 
    4228:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <nrk_stack_check>
  
  if(_nrk_get_next_wakeup()<=NRK_SLEEP_WAKEUP_TIME) 
    422c:	0e 94 1a 26 	call	0x4c34	; 0x4c34 <_nrk_get_next_wakeup>
    4230:	84 30       	cpi	r24, 0x04	; 4
    4232:	28 f4       	brcc	.+10     	; 0x423e <nrk_idle_task+0x1a>
    {
	    _nrk_cpu_state=CPU_IDLE;
    4234:	d0 93 d5 05 	sts	0x05D5, r29
	    nrk_idle();
    4238:	0e 94 29 29 	call	0x5252	; 0x5252 <nrk_idle>
    423c:	08 c0       	rjmp	.+16     	; 0x424e <nrk_idle_task+0x2a>
    }
    else {
	#ifndef NRK_NO_POWER_DOWN
	    // Allow last UART byte to get out
    	    nrk_spin_wait_us(10);  
    423e:	8a e0       	ldi	r24, 0x0A	; 10
    4240:	90 e0       	ldi	r25, 0x00	; 0
    4242:	0e 94 31 25 	call	0x4a62	; 0x4a62 <nrk_spin_wait_us>
	    _nrk_cpu_state=CPU_SLEEP;
    4246:	c0 93 d5 05 	sts	0x05D5, r28
	    nrk_sleep();
    424a:	0e 94 1d 29 	call	0x523a	; 0x523a <nrk_sleep>
	    nrk_idle();
	#endif
    }
 
#ifdef NRK_STACK_CHECK
   if(nrk_idle_task_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    424e:	80 91 52 04 	lds	r24, 0x0452
    4252:	85 35       	cpi	r24, 0x55	; 85
    4254:	19 f0       	breq	.+6      	; 0x425c <nrk_idle_task+0x38>
    4256:	88 e0       	ldi	r24, 0x08	; 8
    4258:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <nrk_error_add>
   #ifdef KERNEL_STK_ARRAY
   	if(nrk_kernel_stk[0]!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
   #else
   	stkc=(unsigned char*)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
   	if(*stkc!=STK_CANARY_VAL) nrk_error_add(NRK_STACK_SMASH);
    425c:	80 91 7e 41 	lds	r24, 0x417E
    4260:	85 35       	cpi	r24, 0x55	; 85
    4262:	11 f3       	breq	.-60     	; 0x4228 <nrk_idle_task+0x4>
    4264:	88 e0       	ldi	r24, 0x08	; 8
    4266:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <nrk_error_add>
    426a:	de cf       	rjmp	.-68     	; 0x4228 <nrk_idle_task+0x4>

0000426c <_nrk_scheduler>:
// For rfa1:
//#define CONTEXT_SWAP_TIME_BOUND    1500 

uint8_t t;
void inline _nrk_scheduler()
{
    426c:	2f 92       	push	r2
    426e:	3f 92       	push	r3
    4270:	4f 92       	push	r4
    4272:	5f 92       	push	r5
    4274:	6f 92       	push	r6
    4276:	7f 92       	push	r7
    4278:	8f 92       	push	r8
    427a:	9f 92       	push	r9
    427c:	af 92       	push	r10
    427e:	bf 92       	push	r11
    4280:	cf 92       	push	r12
    4282:	df 92       	push	r13
    4284:	ef 92       	push	r14
    4286:	ff 92       	push	r15
    4288:	0f 93       	push	r16
    428a:	1f 93       	push	r17
    428c:	cf 93       	push	r28
    428e:	df 93       	push	r29
    4290:	cd b7       	in	r28, 0x3d	; 61
    4292:	de b7       	in	r29, 0x3e	; 62
    4294:	29 97       	sbiw	r28, 0x09	; 9
    4296:	0f b6       	in	r0, 0x3f	; 63
    4298:	f8 94       	cli
    429a:	de bf       	out	0x3e, r29	; 62
    429c:	0f be       	out	0x3f, r0	; 63
    429e:	cd bf       	out	0x3d, r28	; 61
    int8_t task_ID;
    uint16_t next_wake;
    uint16_t start_time_stamp;

    _nrk_precision_os_timer_reset();
    42a0:	0e 94 4e 25 	call	0x4a9c	; 0x4a9c <_nrk_precision_os_timer_reset>
    nrk_int_enable();   // this should be removed...  Not needed
    42a4:	0e 94 49 13 	call	0x2692	; 0x2692 <nrk_int_enable>


#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    _nrk_high_speed_timer_reset();
    42a8:	0e 94 6c 25 	call	0x4ad8	; 0x4ad8 <_nrk_high_speed_timer_reset>
    start_time_stamp=_nrk_high_speed_timer_get();
    42ac:	0e 94 74 25 	call	0x4ae8	; 0x4ae8 <_nrk_high_speed_timer_get>
    42b0:	9f 83       	std	Y+7, r25	; 0x07
    42b2:	8e 83       	std	Y+6, r24	; 0x06
#endif
    _nrk_set_next_wakeup(MAX_SCHED_WAKEUP_TIME);
    42b4:	8a ef       	ldi	r24, 0xFA	; 250
    42b6:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <_nrk_set_next_wakeup>
    if((_nrk_cpu_state!=CPU_ACTIVE) && (_nrk_os_timer_get()>nrk_max_sleep_wakeup_time))
        nrk_max_sleep_wakeup_time=_nrk_os_timer_get();
#endif
    //while(_nrk_time_trigger>0)
    //{
    nrk_system_time.nano_secs+=((uint32_t)_nrk_prev_timer_val*NANOS_PER_TICK);
    42ba:	a0 91 50 04 	lds	r26, 0x0450
    42be:	b0 e0       	ldi	r27, 0x00	; 0
    42c0:	23 eb       	ldi	r18, 0xB3	; 179
    42c2:	36 ee       	ldi	r19, 0xE6	; 230
    42c4:	4e e0       	ldi	r20, 0x0E	; 14
    42c6:	50 e0       	ldi	r21, 0x00	; 0
    42c8:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__muluhisi3>
    42cc:	6b 01       	movw	r12, r22
    42ce:	7c 01       	movw	r14, r24
    42d0:	80 91 dc 05 	lds	r24, 0x05DC
    42d4:	90 91 dd 05 	lds	r25, 0x05DD
    42d8:	a0 91 de 05 	lds	r26, 0x05DE
    42dc:	b0 91 df 05 	lds	r27, 0x05DF
    42e0:	c8 0e       	add	r12, r24
    42e2:	d9 1e       	adc	r13, r25
    42e4:	ea 1e       	adc	r14, r26
    42e6:	fb 1e       	adc	r15, r27
    nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    42e8:	c7 01       	movw	r24, r14
    42ea:	b6 01       	movw	r22, r12
    42ec:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__udivmodsi4>
    42f0:	00 91 d8 05 	lds	r16, 0x05D8
    42f4:	10 91 d9 05 	lds	r17, 0x05D9
    42f8:	20 91 da 05 	lds	r18, 0x05DA
    42fc:	30 91 db 05 	lds	r19, 0x05DB
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    4300:	c6 1a       	sub	r12, r22
    4302:	d7 0a       	sbc	r13, r23
    4304:	e8 0a       	sbc	r14, r24
    4306:	f9 0a       	sbc	r15, r25
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4308:	63 eb       	ldi	r22, 0xB3	; 179
    430a:	46 2e       	mov	r4, r22
    430c:	66 ee       	ldi	r22, 0xE6	; 230
    430e:	56 2e       	mov	r5, r22
    4310:	6e e0       	ldi	r22, 0x0E	; 14
    4312:	66 2e       	mov	r6, r22
    4314:	71 2c       	mov	r7, r1
    4316:	48 01       	movw	r8, r16
    4318:	59 01       	movw	r10, r18
    431a:	8f ef       	ldi	r24, 0xFF	; 255
    431c:	88 1a       	sub	r8, r24
    431e:	98 0a       	sbc	r9, r24
    4320:	a8 0a       	sbc	r10, r24
    4322:	b8 0a       	sbc	r11, r24
        else
            _nrk_stats_task_preempted(nrk_cur_task_TCB->task_ID, _nrk_prev_timer_val);
    }
#endif

    while(nrk_system_time.nano_secs>=NANOS_PER_SEC)
    4324:	c1 14       	cp	r12, r1
    4326:	9a ec       	ldi	r25, 0xCA	; 202
    4328:	d9 06       	cpc	r13, r25
    432a:	9a e9       	ldi	r25, 0x9A	; 154
    432c:	e9 06       	cpc	r14, r25
    432e:	9b e3       	ldi	r25, 0x3B	; 59
    4330:	f9 06       	cpc	r15, r25
    4332:	98 f0       	brcs	.+38     	; 0x435a <_nrk_scheduler+0xee>
    {
        nrk_system_time.nano_secs-=NANOS_PER_SEC;
    4334:	2a ec       	ldi	r18, 0xCA	; 202
    4336:	d2 1a       	sub	r13, r18
    4338:	2a e9       	ldi	r18, 0x9A	; 154
    433a:	e2 0a       	sbc	r14, r18
    433c:	2b e3       	ldi	r18, 0x3B	; 59
    433e:	f2 0a       	sbc	r15, r18
        nrk_system_time.secs++;
        nrk_system_time.nano_secs-=(nrk_system_time.nano_secs%(uint32_t)NANOS_PER_TICK);
    4340:	c7 01       	movw	r24, r14
    4342:	b6 01       	movw	r22, r12
    4344:	a3 01       	movw	r20, r6
    4346:	92 01       	movw	r18, r4
    4348:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__udivmodsi4>
    434c:	c6 1a       	sub	r12, r22
    434e:	d7 0a       	sbc	r13, r23
    4350:	e8 0a       	sbc	r14, r24
    4352:	f9 0a       	sbc	r15, r25
    4354:	95 01       	movw	r18, r10
    4356:	84 01       	movw	r16, r8
    4358:	de cf       	rjmp	.-68     	; 0x4316 <_nrk_scheduler+0xaa>
    435a:	00 93 d8 05 	sts	0x05D8, r16
    435e:	10 93 d9 05 	sts	0x05D9, r17
    4362:	20 93 da 05 	sts	0x05DA, r18
    4366:	30 93 db 05 	sts	0x05DB, r19
    436a:	c0 92 dc 05 	sts	0x05DC, r12
    436e:	d0 92 dd 05 	sts	0x05DD, r13
    4372:	e0 92 de 05 	sts	0x05DE, r14
    4376:	f0 92 df 05 	sts	0x05DF, r15
    }
    //  _nrk_time_trigger--;
    //}
    if(nrk_cur_task_TCB->suspend_flag==1 && nrk_cur_task_TCB->task_state!=FINISHED)
    437a:	e0 91 e1 05 	lds	r30, 0x05E1
    437e:	f0 91 e2 05 	lds	r31, 0x05E2
    4382:	85 81       	ldd	r24, Z+5	; 0x05
    4384:	88 23       	and	r24, r24
    4386:	39 f1       	breq	.+78     	; 0x43d6 <_nrk_scheduler+0x16a>
    4388:	81 85       	ldd	r24, Z+9	; 0x09
    438a:	84 30       	cpi	r24, 0x04	; 4
    438c:	21 f1       	breq	.+72     	; 0x43d6 <_nrk_scheduler+0x16a>
    {
        //	nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;

        if(nrk_cur_task_TCB->event_suspend==RSRC_EVENT_SUSPENDED)
    438e:	87 81       	ldd	r24, Z+7	; 0x07
    4390:	82 30       	cpi	r24, 0x02	; 2
    4392:	29 f0       	breq	.+10     	; 0x439e <_nrk_scheduler+0x132>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==0)
    4394:	88 23       	and	r24, r24
    4396:	41 f0       	breq	.+16     	; 0x43a8 <_nrk_scheduler+0x13c>
    4398:	86 81       	ldd	r24, Z+6	; 0x06
    439a:	81 11       	cpse	r24, r1
    439c:	02 c0       	rjmp	.+4      	; 0x43a2 <_nrk_scheduler+0x136>
            nrk_cur_task_TCB->task_state = EVENT_SUSPENDED;
    439e:	85 e0       	ldi	r24, 0x05	; 5
    43a0:	01 c0       	rjmp	.+2      	; 0x43a4 <_nrk_scheduler+0x138>
        else if( nrk_cur_task_TCB->event_suspend>0 && nrk_cur_task_TCB->nw_flag==1)
            nrk_cur_task_TCB->task_state = SUSPENDED;
    43a2:	83 e0       	ldi	r24, 0x03	; 3
    43a4:	81 87       	std	Z+9, r24	; 0x09
    43a6:	14 c0       	rjmp	.+40     	; 0x43d0 <_nrk_scheduler+0x164>
        else
        {
            nrk_cur_task_TCB->task_state = SUSPENDED;
    43a8:	83 e0       	ldi	r24, 0x03	; 3
    43aa:	81 87       	std	Z+9, r24	; 0x09
            nrk_cur_task_TCB->event_suspend=0;
    43ac:	17 82       	std	Z+7, r1	; 0x07
            nrk_cur_task_TCB->nw_flag=0;
    43ae:	16 82       	std	Z+6, r1	; 0x06
	    // agr added to fix initial startup scheduling problem
            if(nrk_cur_task_TCB->next_wakeup==0) {
    43b0:	85 89       	ldd	r24, Z+21	; 0x15
    43b2:	96 89       	ldd	r25, Z+22	; 0x16
    43b4:	a7 89       	ldd	r26, Z+23	; 0x17
    43b6:	b0 8d       	ldd	r27, Z+24	; 0x18
    43b8:	89 2b       	or	r24, r25
    43ba:	8a 2b       	or	r24, r26
    43bc:	8b 2b       	or	r24, r27
    43be:	41 f4       	brne	.+16     	; 0x43d0 <_nrk_scheduler+0x164>
		nrk_cur_task_TCB->next_wakeup=nrk_cur_task_TCB->next_period;
    43c0:	81 8d       	ldd	r24, Z+25	; 0x19
    43c2:	92 8d       	ldd	r25, Z+26	; 0x1a
    43c4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    43c6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    43c8:	85 8b       	std	Z+21, r24	; 0x15
    43ca:	96 8b       	std	Z+22, r25	; 0x16
    43cc:	a7 8b       	std	Z+23, r26	; 0x17
    43ce:	b0 8f       	std	Z+24, r27	; 0x18
		}
        }
        nrk_rem_from_readyQ(nrk_cur_task_TCB->task_ID);
    43d0:	80 85       	ldd	r24, Z+8	; 0x08
    43d2:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <nrk_rem_from_readyQ>

    // Update cpu used value for ended task
    // If the task has used its reserve, suspend task
    // Don't disable IdleTask which is 0
    // Don't decrease cpu_remaining if reserve is 0 and hence disabled
    if(nrk_cur_task_TCB->cpu_reserve!=0 && nrk_cur_task_TCB->task_ID!=NRK_IDLE_TASK_ID && nrk_cur_task_TCB->task_state!=FINISHED )
    43d6:	e0 91 e1 05 	lds	r30, 0x05E1
    43da:	f0 91 e2 05 	lds	r31, 0x05E2
    43de:	85 a1       	ldd	r24, Z+37	; 0x25
    43e0:	96 a1       	ldd	r25, Z+38	; 0x26
    43e2:	a7 a1       	ldd	r26, Z+39	; 0x27
    43e4:	b0 a5       	ldd	r27, Z+40	; 0x28
    43e6:	89 2b       	or	r24, r25
    43e8:	8a 2b       	or	r24, r26
    43ea:	8b 2b       	or	r24, r27
    43ec:	09 f4       	brne	.+2      	; 0x43f0 <_nrk_scheduler+0x184>
    43ee:	44 c0       	rjmp	.+136    	; 0x4478 <_nrk_scheduler+0x20c>
    43f0:	20 85       	ldd	r18, Z+8	; 0x08
    43f2:	22 23       	and	r18, r18
    43f4:	09 f4       	brne	.+2      	; 0x43f8 <_nrk_scheduler+0x18c>
    43f6:	40 c0       	rjmp	.+128    	; 0x4478 <_nrk_scheduler+0x20c>
    43f8:	81 85       	ldd	r24, Z+9	; 0x09
    43fa:	84 30       	cpi	r24, 0x04	; 4
    43fc:	e9 f1       	breq	.+122    	; 0x4478 <_nrk_scheduler+0x20c>
    {
        if(nrk_cur_task_TCB->cpu_remaining<_nrk_prev_timer_val)
    43fe:	45 8d       	ldd	r20, Z+29	; 0x1d
    4400:	56 8d       	ldd	r21, Z+30	; 0x1e
    4402:	67 8d       	ldd	r22, Z+31	; 0x1f
    4404:	70 a1       	ldd	r23, Z+32	; 0x20
    4406:	80 91 50 04 	lds	r24, 0x0450
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	a0 e0       	ldi	r26, 0x00	; 0
    440e:	b0 e0       	ldi	r27, 0x00	; 0
    4410:	48 17       	cp	r20, r24
    4412:	59 07       	cpc	r21, r25
    4414:	6a 07       	cpc	r22, r26
    4416:	7b 07       	cpc	r23, r27
    4418:	68 f4       	brcc	.+26     	; 0x4434 <_nrk_scheduler+0x1c8>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_ERROR,nrk_cur_task_TCB->task_ID);
    441a:	62 2f       	mov	r22, r18
    441c:	82 e0       	ldi	r24, 0x02	; 2
    441e:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <nrk_kernel_error_add>
            nrk_cur_task_TCB->cpu_remaining=0;
    4422:	e0 91 e1 05 	lds	r30, 0x05E1
    4426:	f0 91 e2 05 	lds	r31, 0x05E2
    442a:	15 8e       	std	Z+29, r1	; 0x1d
    442c:	16 8e       	std	Z+30, r1	; 0x1e
    442e:	17 8e       	std	Z+31, r1	; 0x1f
    4430:	10 a2       	std	Z+32, r1	; 0x20
    4432:	08 c0       	rjmp	.+16     	; 0x4444 <_nrk_scheduler+0x1d8>
        }
        else
            nrk_cur_task_TCB->cpu_remaining-=_nrk_prev_timer_val;
    4434:	48 1b       	sub	r20, r24
    4436:	59 0b       	sbc	r21, r25
    4438:	6a 0b       	sbc	r22, r26
    443a:	7b 0b       	sbc	r23, r27
    443c:	45 8f       	std	Z+29, r20	; 0x1d
    443e:	56 8f       	std	Z+30, r21	; 0x1e
    4440:	67 8f       	std	Z+31, r22	; 0x1f
    4442:	70 a3       	std	Z+32, r23	; 0x20

        task_ID= nrk_cur_task_TCB->task_ID;
    4444:	e0 91 e1 05 	lds	r30, 0x05E1
    4448:	f0 91 e2 05 	lds	r31, 0x05E2
    444c:	10 85       	ldd	r17, Z+8	; 0x08

        if (nrk_cur_task_TCB->cpu_remaining ==0 )
    444e:	45 8d       	ldd	r20, Z+29	; 0x1d
    4450:	56 8d       	ldd	r21, Z+30	; 0x1e
    4452:	67 8d       	ldd	r22, Z+31	; 0x1f
    4454:	70 a1       	ldd	r23, Z+32	; 0x20
    4456:	45 2b       	or	r20, r21
    4458:	46 2b       	or	r20, r22
    445a:	47 2b       	or	r20, r23
    445c:	69 f4       	brne	.+26     	; 0x4478 <_nrk_scheduler+0x20c>
        {
#ifdef NRK_STATS_TRACKER
            _nrk_stats_add_violation(nrk_cur_task_TCB->task_ID);
#endif
            nrk_kernel_error_add(NRK_RESERVE_VIOLATED,task_ID);
    445e:	61 2f       	mov	r22, r17
    4460:	83 e0       	ldi	r24, 0x03	; 3
    4462:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <nrk_kernel_error_add>
            nrk_cur_task_TCB->task_state = SUSPENDED;
    4466:	e0 91 e1 05 	lds	r30, 0x05E1
    446a:	f0 91 e2 05 	lds	r31, 0x05E2
    446e:	83 e0       	ldi	r24, 0x03	; 3
    4470:	81 87       	std	Z+9, r24	; 0x09
            nrk_rem_from_readyQ(task_ID);
    4472:	81 2f       	mov	r24, r17
    4474:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <nrk_rem_from_readyQ>
    4478:	0a e7       	ldi	r16, 0x7A	; 122
    447a:	15 e0       	ldi	r17, 0x05	; 5
    447c:	3b e7       	ldi	r19, 0x7B	; 123
    447e:	23 2e       	mov	r2, r19
    4480:	35 e0       	ldi	r19, 0x05	; 5
    4482:	33 2e       	mov	r3, r19
    4484:	47 e8       	ldi	r20, 0x87	; 135
    4486:	a4 2e       	mov	r10, r20
    4488:	45 e0       	ldi	r20, 0x05	; 5
    448a:	b4 2e       	mov	r11, r20
    448c:	a9 e7       	ldi	r26, 0x79	; 121
    448e:	b5 e0       	ldi	r27, 0x05	; 5
    4490:	ba 83       	std	Y+2, r27	; 0x02
    4492:	a9 83       	std	Y+1, r26	; 0x01
    4494:	e8 e7       	ldi	r30, 0x78	; 120
    4496:	f5 e0       	ldi	r31, 0x05	; 5
    4498:	fc 83       	std	Y+4, r31	; 0x04
    449a:	eb 83       	std	Y+3, r30	; 0x03
    449c:	57 e7       	ldi	r21, 0x77	; 119
    449e:	85 2e       	mov	r8, r21
    44a0:	55 e0       	ldi	r21, 0x05	; 5
    44a2:	95 2e       	mov	r9, r21
    44a4:	20 e6       	ldi	r18, 0x60	; 96
    44a6:	3a ee       	ldi	r19, 0xEA	; 234
    44a8:	39 87       	std	Y+9, r19	; 0x09
    44aa:	28 87       	std	Y+8, r18	; 0x08
    44ac:	1d 82       	std	Y+5, r1	; 0x05

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    {
        if(nrk_task_TCB[task_ID].task_ID==-1) continue;
    44ae:	d8 01       	movw	r26, r16
    44b0:	8c 91       	ld	r24, X
    44b2:	8f 3f       	cpi	r24, 0xFF	; 255
    44b4:	09 f4       	brne	.+2      	; 0x44b8 <_nrk_scheduler+0x24c>
    44b6:	2a c1       	rjmp	.+596    	; 0x470c <_nrk_scheduler+0x4a0>
        nrk_task_TCB[task_ID].suspend_flag=0;
    44b8:	f4 01       	movw	r30, r8
    44ba:	10 82       	st	Z, r1
        if( nrk_task_TCB[task_ID].task_ID!=NRK_IDLE_TASK_ID && nrk_task_TCB[task_ID].task_state!=FINISHED )
    44bc:	8c 91       	ld	r24, X
    44be:	88 23       	and	r24, r24
    44c0:	09 f4       	brne	.+2      	; 0x44c4 <_nrk_scheduler+0x258>
    44c2:	6a c0       	rjmp	.+212    	; 0x4598 <_nrk_scheduler+0x32c>
    44c4:	d1 01       	movw	r26, r2
    44c6:	8c 91       	ld	r24, X
    44c8:	84 30       	cpi	r24, 0x04	; 4
    44ca:	09 f4       	brne	.+2      	; 0x44ce <_nrk_scheduler+0x262>
    44cc:	65 c0       	rjmp	.+202    	; 0x4598 <_nrk_scheduler+0x32c>
        {
            if(  nrk_task_TCB[task_ID].next_wakeup >= _nrk_prev_timer_val )
    44ce:	f5 01       	movw	r30, r10
    44d0:	c0 80       	ld	r12, Z
    44d2:	d1 80       	ldd	r13, Z+1	; 0x01
    44d4:	e2 80       	ldd	r14, Z+2	; 0x02
    44d6:	f3 80       	ldd	r15, Z+3	; 0x03
    44d8:	60 91 50 04 	lds	r22, 0x0450
    44dc:	70 e0       	ldi	r23, 0x00	; 0
    44de:	80 e0       	ldi	r24, 0x00	; 0
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	c6 16       	cp	r12, r22
    44e4:	d7 06       	cpc	r13, r23
    44e6:	e8 06       	cpc	r14, r24
    44e8:	f9 06       	cpc	r15, r25
    44ea:	48 f0       	brcs	.+18     	; 0x44fe <_nrk_scheduler+0x292>
                nrk_task_TCB[task_ID].next_wakeup-=_nrk_prev_timer_val;
    44ec:	c6 1a       	sub	r12, r22
    44ee:	d7 0a       	sbc	r13, r23
    44f0:	e8 0a       	sbc	r14, r24
    44f2:	f9 0a       	sbc	r15, r25
    44f4:	c0 82       	st	Z, r12
    44f6:	d1 82       	std	Z+1, r13	; 0x01
    44f8:	e2 82       	std	Z+2, r14	; 0x02
    44fa:	f3 82       	std	Z+3, r15	; 0x03
    44fc:	05 c0       	rjmp	.+10     	; 0x4508 <_nrk_scheduler+0x29c>
            else
            {
                nrk_task_TCB[task_ID].next_wakeup=0;
    44fe:	f5 01       	movw	r30, r10
    4500:	10 82       	st	Z, r1
    4502:	11 82       	std	Z+1, r1	; 0x01
    4504:	12 82       	std	Z+2, r1	; 0x02
    4506:	13 82       	std	Z+3, r1	; 0x03
            }
            // Do next period book keeping.
            // next_period needs to be set such that the period is kept consistent even if other
            // wait until functions are called.
            if( nrk_task_TCB[task_ID].next_period >= _nrk_prev_timer_val )
    4508:	d8 01       	movw	r26, r16
    450a:	51 96       	adiw	r26, 0x11	; 17
    450c:	cd 90       	ld	r12, X+
    450e:	dd 90       	ld	r13, X+
    4510:	ed 90       	ld	r14, X+
    4512:	fc 90       	ld	r15, X
    4514:	54 97       	sbiw	r26, 0x14	; 20
    4516:	c6 16       	cp	r12, r22
    4518:	d7 06       	cpc	r13, r23
    451a:	e8 06       	cpc	r14, r24
    451c:	f9 06       	cpc	r15, r25
    451e:	50 f0       	brcs	.+20     	; 0x4534 <_nrk_scheduler+0x2c8>
                nrk_task_TCB[task_ID].next_period-=_nrk_prev_timer_val;
    4520:	c6 1a       	sub	r12, r22
    4522:	d7 0a       	sbc	r13, r23
    4524:	e8 0a       	sbc	r14, r24
    4526:	f9 0a       	sbc	r15, r25
    4528:	f8 01       	movw	r30, r16
    452a:	c1 8a       	std	Z+17, r12	; 0x11
    452c:	d2 8a       	std	Z+18, r13	; 0x12
    452e:	e3 8a       	std	Z+19, r14	; 0x13
    4530:	f4 8a       	std	Z+20, r15	; 0x14
    4532:	21 c0       	rjmp	.+66     	; 0x4576 <_nrk_scheduler+0x30a>
            else
            {
                if(nrk_task_TCB[task_ID].period>_nrk_prev_timer_val)
    4534:	d8 01       	movw	r26, r16
    4536:	59 96       	adiw	r26, 0x19	; 25
    4538:	2d 91       	ld	r18, X+
    453a:	3d 91       	ld	r19, X+
    453c:	4d 91       	ld	r20, X+
    453e:	5c 91       	ld	r21, X
    4540:	5c 97       	sbiw	r26, 0x1c	; 28
    4542:	62 17       	cp	r22, r18
    4544:	73 07       	cpc	r23, r19
    4546:	84 07       	cpc	r24, r20
    4548:	95 07       	cpc	r25, r21
    454a:	60 f4       	brcc	.+24     	; 0x4564 <_nrk_scheduler+0x2f8>
                    nrk_task_TCB[task_ID].next_period= nrk_task_TCB[task_ID].period-_nrk_prev_timer_val;
    454c:	69 01       	movw	r12, r18
    454e:	7a 01       	movw	r14, r20
    4550:	c6 1a       	sub	r12, r22
    4552:	d7 0a       	sbc	r13, r23
    4554:	e8 0a       	sbc	r14, r24
    4556:	f9 0a       	sbc	r15, r25
    4558:	f8 01       	movw	r30, r16
    455a:	c1 8a       	std	Z+17, r12	; 0x11
    455c:	d2 8a       	std	Z+18, r13	; 0x12
    455e:	e3 8a       	std	Z+19, r14	; 0x13
    4560:	f4 8a       	std	Z+20, r15	; 0x14
    4562:	09 c0       	rjmp	.+18     	; 0x4576 <_nrk_scheduler+0x30a>
                else
                    nrk_task_TCB[task_ID].next_period= _nrk_prev_timer_val % nrk_task_TCB[task_ID].period;
    4564:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__udivmodsi4>
    4568:	d8 01       	movw	r26, r16
    456a:	51 96       	adiw	r26, 0x11	; 17
    456c:	6d 93       	st	X+, r22
    456e:	7d 93       	st	X+, r23
    4570:	8d 93       	st	X+, r24
    4572:	9c 93       	st	X, r25
    4574:	54 97       	sbiw	r26, 0x14	; 20
            }
            if(nrk_task_TCB[task_ID].next_period==0) nrk_task_TCB[task_ID].next_period=nrk_task_TCB[task_ID].period;
    4576:	f8 01       	movw	r30, r16
    4578:	81 89       	ldd	r24, Z+17	; 0x11
    457a:	92 89       	ldd	r25, Z+18	; 0x12
    457c:	a3 89       	ldd	r26, Z+19	; 0x13
    457e:	b4 89       	ldd	r27, Z+20	; 0x14
    4580:	89 2b       	or	r24, r25
    4582:	8a 2b       	or	r24, r26
    4584:	8b 2b       	or	r24, r27
    4586:	41 f4       	brne	.+16     	; 0x4598 <_nrk_scheduler+0x32c>
    4588:	81 8d       	ldd	r24, Z+25	; 0x19
    458a:	92 8d       	ldd	r25, Z+26	; 0x1a
    458c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    458e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4590:	81 8b       	std	Z+17, r24	; 0x11
    4592:	92 8b       	std	Z+18, r25	; 0x12
    4594:	a3 8b       	std	Z+19, r26	; 0x13
    4596:	b4 8b       	std	Z+20, r27	; 0x14

        }


        // Look for Next Task that Might Wakeup to interrupt current task
        if (nrk_task_TCB[task_ID].task_state == SUSPENDED )
    4598:	d1 01       	movw	r26, r2
    459a:	8c 91       	ld	r24, X
    459c:	83 30       	cpi	r24, 0x03	; 3
    459e:	09 f0       	breq	.+2      	; 0x45a2 <_nrk_scheduler+0x336>
    45a0:	b5 c0       	rjmp	.+362    	; 0x470c <_nrk_scheduler+0x4a0>
        {
             //printf( "Task: %d nw: %d\n",task_ID,nrk_task_TCB[task_ID].next_wakeup);
            // If a task needs to become READY, make it ready
            if (nrk_task_TCB[task_ID].next_wakeup == 0)
    45a2:	f5 01       	movw	r30, r10
    45a4:	80 81       	ld	r24, Z
    45a6:	91 81       	ldd	r25, Z+1	; 0x01
    45a8:	a2 81       	ldd	r26, Z+2	; 0x02
    45aa:	b3 81       	ldd	r27, Z+3	; 0x03
    45ac:	89 2b       	or	r24, r25
    45ae:	8a 2b       	or	r24, r26
    45b0:	8b 2b       	or	r24, r27
    45b2:	09 f0       	breq	.+2      	; 0x45b6 <_nrk_scheduler+0x34a>
    45b4:	96 c0       	rjmp	.+300    	; 0x46e2 <_nrk_scheduler+0x476>
            {
                // printf( "Adding back %d\n",task_ID );
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
    45b6:	a9 81       	ldd	r26, Y+1	; 0x01
    45b8:	ba 81       	ldd	r27, Y+2	; 0x02
    45ba:	8c 91       	ld	r24, X
    45bc:	88 23       	and	r24, r24
    45be:	b9 f0       	breq	.+46     	; 0x45ee <_nrk_scheduler+0x382>
    45c0:	eb 81       	ldd	r30, Y+3	; 0x03
    45c2:	fc 81       	ldd	r31, Y+4	; 0x04
    45c4:	80 81       	ld	r24, Z
    45c6:	88 23       	and	r24, r24
    45c8:	91 f0       	breq	.+36     	; 0x45ee <_nrk_scheduler+0x382>
    45ca:	81 e0       	ldi	r24, 0x01	; 1
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	a0 e0       	ldi	r26, 0x00	; 0
    45d0:	b0 e0       	ldi	r27, 0x00	; 0
    45d2:	00 90 d1 05 	lds	r0, 0x05D1
    45d6:	04 c0       	rjmp	.+8      	; 0x45e0 <_nrk_scheduler+0x374>
    45d8:	88 0f       	add	r24, r24
    45da:	99 1f       	adc	r25, r25
    45dc:	aa 1f       	adc	r26, r26
    45de:	bb 1f       	adc	r27, r27
    45e0:	0a 94       	dec	r0
    45e2:	d2 f7       	brpl	.-12     	; 0x45d8 <_nrk_scheduler+0x36c>
    45e4:	f8 01       	movw	r30, r16
    45e6:	81 87       	std	Z+9, r24	; 0x09
    45e8:	92 87       	std	Z+10, r25	; 0x0a
    45ea:	a3 87       	std	Z+11, r26	; 0x0b
    45ec:	b4 87       	std	Z+12, r27	; 0x0c
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
    45ee:	a9 81       	ldd	r26, Y+1	; 0x01
    45f0:	ba 81       	ldd	r27, Y+2	; 0x02
    45f2:	1c 92       	st	X, r1
                nrk_task_TCB[task_ID].nw_flag=0;
    45f4:	eb 81       	ldd	r30, Y+3	; 0x03
    45f6:	fc 81       	ldd	r31, Y+4	; 0x04
    45f8:	10 82       	st	Z, r1
                nrk_task_TCB[task_ID].suspend_flag=0;
    45fa:	d4 01       	movw	r26, r8
    45fc:	1c 92       	st	X, r1
                if(nrk_task_TCB[task_ID].num_periods==1)
    45fe:	f5 01       	movw	r30, r10
    4600:	84 89       	ldd	r24, Z+20	; 0x14
    4602:	95 89       	ldd	r25, Z+21	; 0x15
    4604:	d8 01       	movw	r26, r16
    4606:	5d 96       	adiw	r26, 0x1d	; 29
    4608:	4d 91       	ld	r20, X+
    460a:	5d 91       	ld	r21, X+
    460c:	6d 91       	ld	r22, X+
    460e:	7c 91       	ld	r23, X
    4610:	90 97       	sbiw	r26, 0x20	; 32
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
    4612:	f8 01       	movw	r30, r16
    4614:	45 8b       	std	Z+21, r20	; 0x15
    4616:	56 8b       	std	Z+22, r21	; 0x16
    4618:	67 8b       	std	Z+23, r22	; 0x17
    461a:	70 8f       	std	Z+24, r23	; 0x18
                if(nrk_task_TCB[task_ID].event_suspend>0 && nrk_task_TCB[task_ID].nw_flag==1) nrk_task_TCB[task_ID].active_signal_mask=SIG(nrk_wakeup_signal);
                //if(nrk_task_TCB[task_ID].event_suspend==0) nrk_task_TCB[task_ID].active_signal_mask=0;
                nrk_task_TCB[task_ID].event_suspend=0;
                nrk_task_TCB[task_ID].nw_flag=0;
                nrk_task_TCB[task_ID].suspend_flag=0;
                if(nrk_task_TCB[task_ID].num_periods==1)
    461c:	01 97       	sbiw	r24, 0x01	; 1
    461e:	29 f5       	brne	.+74     	; 0x466a <_nrk_scheduler+0x3fe>
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    nrk_task_TCB[task_ID].task_state = READY;
    4620:	e2 e0       	ldi	r30, 0x02	; 2
    4622:	d1 01       	movw	r26, r2
    4624:	ec 93       	st	X, r30
                    nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
    4626:	f8 01       	movw	r30, r16
    4628:	81 89       	ldd	r24, Z+17	; 0x11
    462a:	92 89       	ldd	r25, Z+18	; 0x12
    462c:	a3 89       	ldd	r26, Z+19	; 0x13
    462e:	b4 89       	ldd	r27, Z+20	; 0x14
    4630:	f5 01       	movw	r30, r10
    4632:	80 83       	st	Z, r24
    4634:	91 83       	std	Z+1, r25	; 0x01
    4636:	a2 83       	std	Z+2, r26	; 0x02
    4638:	b3 83       	std	Z+3, r27	; 0x03
                    // If there is no period set, don't wakeup periodically
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    463a:	f8 01       	movw	r30, r16
    463c:	81 8d       	ldd	r24, Z+25	; 0x19
    463e:	92 8d       	ldd	r25, Z+26	; 0x1a
    4640:	a3 8d       	ldd	r26, Z+27	; 0x1b
    4642:	b4 8d       	ldd	r27, Z+28	; 0x1c
    4644:	89 2b       	or	r24, r25
    4646:	8a 2b       	or	r24, r26
    4648:	8b 2b       	or	r24, r27
    464a:	59 f4       	brne	.+22     	; 0x4662 <_nrk_scheduler+0x3f6>
    464c:	2a ef       	ldi	r18, 0xFA	; 250
    464e:	c2 2e       	mov	r12, r18
    4650:	d1 2c       	mov	r13, r1
    4652:	e1 2c       	mov	r14, r1
    4654:	f1 2c       	mov	r15, r1
    4656:	d5 01       	movw	r26, r10
    4658:	cd 92       	st	X+, r12
    465a:	dd 92       	st	X+, r13
    465c:	ed 92       	st	X+, r14
    465e:	fc 92       	st	X, r15
    4660:	13 97       	sbiw	r26, 0x03	; 3
		    nrk_add_to_readyQ(task_ID);
    4662:	8d 81       	ldd	r24, Y+5	; 0x05
    4664:	0e 94 ba 1a 	call	0x3574	; 0x3574 <nrk_add_to_readyQ>
    4668:	3c c0       	rjmp	.+120    	; 0x46e2 <_nrk_scheduler+0x476>
                else
                {
                    nrk_task_TCB[task_ID].cpu_remaining = nrk_task_TCB[task_ID].cpu_reserve;
                    //nrk_task_TCB[task_ID].next_wakeup = nrk_task_TCB[task_ID].next_period;
                    //nrk_task_TCB[task_ID].num_periods--;
                    nrk_task_TCB[task_ID].next_wakeup = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    466a:	d5 01       	movw	r26, r10
    466c:	54 96       	adiw	r26, 0x14	; 20
    466e:	4d 90       	ld	r4, X+
    4670:	5c 90       	ld	r5, X
    4672:	55 97       	sbiw	r26, 0x15	; 21
    4674:	b1 e0       	ldi	r27, 0x01	; 1
    4676:	4b 1a       	sub	r4, r27
    4678:	51 08       	sbc	r5, r1
    467a:	61 2c       	mov	r6, r1
    467c:	71 2c       	mov	r7, r1
    467e:	61 8d       	ldd	r22, Z+25	; 0x19
    4680:	72 8d       	ldd	r23, Z+26	; 0x1a
    4682:	83 8d       	ldd	r24, Z+27	; 0x1b
    4684:	94 8d       	ldd	r25, Z+28	; 0x1c
    4686:	a3 01       	movw	r20, r6
    4688:	92 01       	movw	r18, r4
    468a:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__mulsi3>
    468e:	f5 01       	movw	r30, r10
    4690:	60 83       	st	Z, r22
    4692:	71 83       	std	Z+1, r23	; 0x01
    4694:	82 83       	std	Z+2, r24	; 0x02
    4696:	93 83       	std	Z+3, r25	; 0x03
                    nrk_task_TCB[task_ID].next_period = (nrk_task_TCB[task_ID].period*(nrk_task_TCB[task_ID].num_periods-1));
    4698:	d8 01       	movw	r26, r16
    469a:	59 96       	adiw	r26, 0x19	; 25
    469c:	cd 90       	ld	r12, X+
    469e:	dd 90       	ld	r13, X+
    46a0:	ed 90       	ld	r14, X+
    46a2:	fc 90       	ld	r15, X
    46a4:	5c 97       	sbiw	r26, 0x1c	; 28
    46a6:	c7 01       	movw	r24, r14
    46a8:	b6 01       	movw	r22, r12
    46aa:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <__mulsi3>
    46ae:	f8 01       	movw	r30, r16
    46b0:	61 8b       	std	Z+17, r22	; 0x11
    46b2:	72 8b       	std	Z+18, r23	; 0x12
    46b4:	83 8b       	std	Z+19, r24	; 0x13
    46b6:	94 8b       	std	Z+20, r25	; 0x14
                    if(nrk_task_TCB[task_ID].period==0) nrk_task_TCB[task_ID].next_wakeup = MAX_SCHED_WAKEUP_TIME;
    46b8:	cd 28       	or	r12, r13
    46ba:	ce 28       	or	r12, r14
    46bc:	cf 28       	or	r12, r15
    46be:	59 f4       	brne	.+22     	; 0x46d6 <_nrk_scheduler+0x46a>
    46c0:	9a ef       	ldi	r25, 0xFA	; 250
    46c2:	c9 2e       	mov	r12, r25
    46c4:	d1 2c       	mov	r13, r1
    46c6:	e1 2c       	mov	r14, r1
    46c8:	f1 2c       	mov	r15, r1
    46ca:	d5 01       	movw	r26, r10
    46cc:	cd 92       	st	X+, r12
    46ce:	dd 92       	st	X+, r13
    46d0:	ed 92       	st	X+, r14
    46d2:	fc 92       	st	X, r15
    46d4:	13 97       	sbiw	r26, 0x03	; 3
                    nrk_task_TCB[task_ID].num_periods=1;
    46d6:	cc 24       	eor	r12, r12
    46d8:	c3 94       	inc	r12
    46da:	d1 2c       	mov	r13, r1
    46dc:	f5 01       	movw	r30, r10
    46de:	d5 8a       	std	Z+21, r13	; 0x15
    46e0:	c4 8a       	std	Z+20, r12	; 0x14
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    46e2:	f5 01       	movw	r30, r10
    46e4:	80 81       	ld	r24, Z
    46e6:	91 81       	ldd	r25, Z+1	; 0x01
    46e8:	a2 81       	ldd	r26, Z+2	; 0x02
    46ea:	b3 81       	ldd	r27, Z+3	; 0x03
    46ec:	00 97       	sbiw	r24, 0x00	; 0
    46ee:	a1 05       	cpc	r26, r1
    46f0:	b1 05       	cpc	r27, r1
    46f2:	61 f0       	breq	.+24     	; 0x470c <_nrk_scheduler+0x4a0>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
    46f4:	c8 84       	ldd	r12, Y+8	; 0x08
    46f6:	d9 84       	ldd	r13, Y+9	; 0x09
    46f8:	a6 01       	movw	r20, r12
    46fa:	60 e0       	ldi	r22, 0x00	; 0
    46fc:	70 e0       	ldi	r23, 0x00	; 0
                    //			printf( "np = %d\r\n",nrk_task_TCB[task_ID].next_wakeup);
                    //			nrk_task_TCB[task_ID].num_periods=1;
                }
            }

            if(nrk_task_TCB[task_ID].next_wakeup!=0 &&
    46fe:	84 17       	cp	r24, r20
    4700:	95 07       	cpc	r25, r21
    4702:	a6 07       	cpc	r26, r22
    4704:	b7 07       	cpc	r27, r23
    4706:	10 f4       	brcc	.+4      	; 0x470c <_nrk_scheduler+0x4a0>
                    nrk_task_TCB[task_ID].next_wakeup<next_wake )
            {
                // Find closest next_wake task
                next_wake=nrk_task_TCB[task_ID].next_wakeup;
    4708:	99 87       	std	Y+9, r25	; 0x09
    470a:	88 87       	std	Y+8, r24	; 0x08
    470c:	2d 81       	ldd	r18, Y+5	; 0x05
    470e:	2f 5f       	subi	r18, 0xFF	; 255
    4710:	2d 83       	std	Y+5, r18	; 0x05
    4712:	05 5d       	subi	r16, 0xD5	; 213
    4714:	1f 4f       	sbci	r17, 0xFF	; 255
    4716:	3b e2       	ldi	r19, 0x2B	; 43
    4718:	23 0e       	add	r2, r19
    471a:	31 1c       	adc	r3, r1
    471c:	8b e2       	ldi	r24, 0x2B	; 43
    471e:	a8 0e       	add	r10, r24
    4720:	b1 1c       	adc	r11, r1
    4722:	a9 81       	ldd	r26, Y+1	; 0x01
    4724:	ba 81       	ldd	r27, Y+2	; 0x02
    4726:	9b 96       	adiw	r26, 0x2b	; 43
    4728:	ba 83       	std	Y+2, r27	; 0x02
    472a:	a9 83       	std	Y+1, r26	; 0x01
    472c:	eb 81       	ldd	r30, Y+3	; 0x03
    472e:	fc 81       	ldd	r31, Y+4	; 0x04
    4730:	bb 96       	adiw	r30, 0x2b	; 43
    4732:	fc 83       	std	Y+4, r31	; 0x04
    4734:	eb 83       	std	Y+3, r30	; 0x03
    4736:	fb e2       	ldi	r31, 0x2B	; 43
    4738:	8f 0e       	add	r8, r31
    473a:	91 1c       	adc	r9, r1

    // Check I/O nrk_queues to add tasks with remaining cpu back...

    // Add eligable tasks back to the ready Queue
    // At the same time find the next earliest wakeup
    for (task_ID=0; task_ID < NRK_MAX_TASKS; task_ID++)
    473c:	22 30       	cpi	r18, 0x02	; 2
    473e:	09 f0       	breq	.+2      	; 0x4742 <_nrk_scheduler+0x4d6>
    4740:	b6 ce       	rjmp	.-660    	; 0x44ae <_nrk_scheduler+0x242>


#ifdef NRK_STATS_TRACKER
    _nrk_stats_task_start(nrk_cur_task_TCB->task_ID);
#endif
    task_ID = nrk_get_high_ready_task_ID();
    4742:	0e 94 a9 1a 	call	0x3552	; 0x3552 <nrk_get_high_ready_task_ID>
    4746:	f8 2e       	mov	r15, r24
    nrk_high_ready_prio = nrk_task_TCB[task_ID].task_prio;
    4748:	2b e2       	ldi	r18, 0x2B	; 43
    474a:	82 02       	muls	r24, r18
    474c:	f0 01       	movw	r30, r0
    474e:	11 24       	eor	r1, r1
    4750:	ee 58       	subi	r30, 0x8E	; 142
    4752:	fa 4f       	sbci	r31, 0xFA	; 250
    4754:	82 85       	ldd	r24, Z+10	; 0x0a
    4756:	80 93 e3 05 	sts	0x05E3, r24
    nrk_high_ready_TCB = &nrk_task_TCB[task_ID];
    475a:	f0 93 d3 05 	sts	0x05D3, r31
    475e:	e0 93 d2 05 	sts	0x05D2, r30
    // task_ID holds the highest priority READY task ID
    // So nrk_task_TCB[task_ID].cpu_remaining holds the READY task's end time

    // Now we pick the next wakeup (either the end of the current task, or the possible resume
    // of a suspended task)
    if(task_ID!=NRK_IDLE_TASK_ID)
    4762:	ff 20       	and	r15, r15
    4764:	21 f1       	breq	.+72     	; 0x47ae <_nrk_scheduler+0x542>
    {
        // You are a non-Idle Task
        if(nrk_task_TCB[task_ID].cpu_reserve!=0 && nrk_task_TCB[task_ID].cpu_remaining<MAX_SCHED_WAKEUP_TIME)
    4766:	45 a1       	ldd	r20, Z+37	; 0x25
    4768:	56 a1       	ldd	r21, Z+38	; 0x26
    476a:	67 a1       	ldd	r22, Z+39	; 0x27
    476c:	70 a5       	ldd	r23, Z+40	; 0x28
    476e:	45 2b       	or	r20, r21
    4770:	46 2b       	or	r20, r22
    4772:	47 2b       	or	r20, r23
    4774:	b1 f0       	breq	.+44     	; 0x47a2 <_nrk_scheduler+0x536>
    4776:	45 8d       	ldd	r20, Z+29	; 0x1d
    4778:	56 8d       	ldd	r21, Z+30	; 0x1e
    477a:	67 8d       	ldd	r22, Z+31	; 0x1f
    477c:	70 a1       	ldd	r23, Z+32	; 0x20
    477e:	4a 3f       	cpi	r20, 0xFA	; 250
    4780:	51 05       	cpc	r21, r1
    4782:	61 05       	cpc	r22, r1
    4784:	71 05       	cpc	r23, r1
    4786:	68 f4       	brcc	.+26     	; 0x47a2 <_nrk_scheduler+0x536>
        {
            if(next_wake>nrk_task_TCB[task_ID].cpu_remaining)
    4788:	c8 84       	ldd	r12, Y+8	; 0x08
    478a:	d9 84       	ldd	r13, Y+9	; 0x09
    478c:	86 01       	movw	r16, r12
    478e:	20 e0       	ldi	r18, 0x00	; 0
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	40 17       	cp	r20, r16
    4794:	51 07       	cpc	r21, r17
    4796:	62 07       	cpc	r22, r18
    4798:	73 07       	cpc	r23, r19
    479a:	48 f5       	brcc	.+82     	; 0x47ee <_nrk_scheduler+0x582>
                next_wake=nrk_task_TCB[task_ID].cpu_remaining;
    479c:	59 87       	std	Y+9, r21	; 0x09
    479e:	48 87       	std	Y+8, r20	; 0x08
    47a0:	26 c0       	rjmp	.+76     	; 0x47ee <_nrk_scheduler+0x582>
    47a2:	28 85       	ldd	r18, Y+8	; 0x08
    47a4:	39 85       	ldd	r19, Y+9	; 0x09
    47a6:	2b 3f       	cpi	r18, 0xFB	; 251
    47a8:	31 05       	cpc	r19, r1
    47aa:	08 f1       	brcs	.+66     	; 0x47ee <_nrk_scheduler+0x582>
    47ac:	19 c0       	rjmp	.+50     	; 0x47e0 <_nrk_scheduler+0x574>
        // Make sure you wake up from the idle task a little earlier
        // if you would go into deep sleep...
        // After waking from deep sleep, the next context swap must be at least
        // NRK_SLEEP_WAKEUP_TIME-1 away to make sure the CPU wakes up in time.
#ifndef NRK_NO_POWER_DOWN
        if(next_wake>NRK_SLEEP_WAKEUP_TIME)
    47ae:	28 85       	ldd	r18, Y+8	; 0x08
    47b0:	39 85       	ldd	r19, Y+9	; 0x09
    47b2:	24 30       	cpi	r18, 0x04	; 4
    47b4:	31 05       	cpc	r19, r1
    47b6:	d8 f0       	brcs	.+54     	; 0x47ee <_nrk_scheduler+0x582>
        {
            if(next_wake-NRK_SLEEP_WAKEUP_TIME<MAX_SCHED_WAKEUP_TIME)
    47b8:	23 50       	subi	r18, 0x03	; 3
    47ba:	31 09       	sbc	r19, r1
    47bc:	2a 3f       	cpi	r18, 0xFA	; 250
    47be:	31 05       	cpc	r19, r1
    47c0:	50 f4       	brcc	.+20     	; 0x47d6 <_nrk_scheduler+0x56a>
    47c2:	39 87       	std	Y+9, r19	; 0x09
    47c4:	28 87       	std	Y+8, r18	; 0x08
    47c6:	22 30       	cpi	r18, 0x02	; 2
    47c8:	31 05       	cpc	r19, r1
    47ca:	88 f4       	brcc	.+34     	; 0x47ee <_nrk_scheduler+0x582>
    47cc:	a2 e0       	ldi	r26, 0x02	; 2
    47ce:	b0 e0       	ldi	r27, 0x00	; 0
    47d0:	b9 87       	std	Y+9, r27	; 0x09
    47d2:	a8 87       	std	Y+8, r26	; 0x08
    47d4:	0c c0       	rjmp	.+24     	; 0x47ee <_nrk_scheduler+0x582>
                else
                {
                    next_wake=next_wake-NRK_SLEEP_WAKEUP_TIME;
                }
            }
            else if(next_wake>NRK_SLEEP_WAKEUP_TIME+MAX_SCHED_WAKEUP_TIME)
    47d6:	28 85       	ldd	r18, Y+8	; 0x08
    47d8:	39 85       	ldd	r19, Y+9	; 0x09
    47da:	2d 3f       	cpi	r18, 0xFD	; 253
    47dc:	31 05       	cpc	r19, r1
    47de:	19 f0       	breq	.+6      	; 0x47e6 <_nrk_scheduler+0x57a>
            {
                next_wake=MAX_SCHED_WAKEUP_TIME;
    47e0:	aa ef       	ldi	r26, 0xFA	; 250
    47e2:	b0 e0       	ldi	r27, 0x00	; 0
    47e4:	f5 cf       	rjmp	.-22     	; 0x47d0 <_nrk_scheduler+0x564>
            }
            else
            {
                next_wake=MAX_SCHED_WAKEUP_TIME-NRK_SLEEP_WAKEUP_TIME;
    47e6:	27 ef       	ldi	r18, 0xF7	; 247
    47e8:	30 e0       	ldi	r19, 0x00	; 0
    47ea:	39 87       	std	Y+9, r19	; 0x09
    47ec:	28 87       	std	Y+8, r18	; 0x08
//  If we disable power down, we still need to wakeup before the overflow
#ifdef NRK_NO_POWER_DOWN
    if(next_wake>MAX_SCHED_WAKEUP_TIME)  next_wake=MAX_SCHED_WAKEUP_TIME;
#endif
    //printf( "nw = %d %d %d\r\n",task_ID,_nrk_cpu_state,next_wake);
    nrk_cur_task_prio = nrk_high_ready_prio;
    47ee:	80 93 d4 05 	sts	0x05D4, r24
    nrk_cur_task_TCB  = nrk_high_ready_TCB;
    47f2:	f0 93 e2 05 	sts	0x05E2, r31
    47f6:	e0 93 e1 05 	sts	0x05E1, r30
        nrk_kprintf( PSTR( "KERNEL TEST: BAD TCB!\r\n" ));
    }
#endif
    //printf( "n %u %u %u %u\r\n",task_ID, _nrk_prev_timer_val, next_wake,_nrk_os_timer_get());

    _nrk_prev_timer_val=next_wake;
    47fa:	38 85       	ldd	r19, Y+8	; 0x08
    47fc:	30 93 50 04 	sts	0x0450, r19

    // Maybe the signals are triggering this problem?
    if((_nrk_os_timer_get()+1)>=next_wake)  // just bigger then, or equal?
    4800:	0e 94 80 26 	call	0x4d00	; 0x4d00 <_nrk_os_timer_get>
    4804:	28 2f       	mov	r18, r24
    4806:	30 e0       	ldi	r19, 0x00	; 0
    4808:	2f 5f       	subi	r18, 0xFF	; 255
    480a:	3f 4f       	sbci	r19, 0xFF	; 255
    480c:	c8 84       	ldd	r12, Y+8	; 0x08
    480e:	d9 84       	ldd	r13, Y+9	; 0x09
    4810:	2c 15       	cp	r18, r12
    4812:	3d 05       	cpc	r19, r13
    4814:	58 f0       	brcs	.+22     	; 0x482c <_nrk_scheduler+0x5c0>
        if(!(task_ID==NRK_IDLE_TASK_ID && _nrk_cpu_state==CPU_SLEEP))
            nrk_kernel_error_add(NRK_WAKEUP_MISSED,task_ID);
#endif
        // This is bad news, but keeps things running
        // +2 just in case we are on the edge of the last tick
        next_wake=_nrk_os_timer_get()+2;
    4816:	0e 94 80 26 	call	0x4d00	; 0x4d00 <_nrk_os_timer_get>
    481a:	c8 2e       	mov	r12, r24
    481c:	d1 2c       	mov	r13, r1
    481e:	96 01       	movw	r18, r12
    4820:	2e 5f       	subi	r18, 0xFE	; 254
    4822:	3f 4f       	sbci	r19, 0xFF	; 255
    4824:	39 87       	std	Y+9, r19	; 0x09
    4826:	28 87       	std	Y+8, r18	; 0x08
        _nrk_prev_timer_val=next_wake;
    4828:	20 93 50 04 	sts	0x0450, r18
    }

    if(task_ID!=NRK_IDLE_TASK_ID) _nrk_cpu_state=CPU_ACTIVE;
    482c:	f1 10       	cpse	r15, r1
    482e:	10 92 d5 05 	sts	0x05D5, r1

    _nrk_set_next_wakeup(next_wake);
    4832:	88 85       	ldd	r24, Y+8	; 0x08
    4834:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <_nrk_set_next_wakeup>

#ifndef NRK_NO_BOUNDED_CONTEXT_SWAP
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
    4838:	6c ed       	ldi	r22, 0xDC	; 220
    483a:	75 e0       	ldi	r23, 0x05	; 5
    483c:	8e 81       	ldd	r24, Y+6	; 0x06
    483e:	9f 81       	ldd	r25, Y+7	; 0x07
    4840:	0e 94 86 25 	call	0x4b0c	; 0x4b0c <nrk_high_speed_timer_wait>
#endif
    nrk_stack_pointer_restore();
    4844:	0e 94 b5 29 	call	0x536a	; 0x536a <nrk_stack_pointer_restore>
    //nrk_int_enable();
    nrk_start_high_ready_task();

}
    4848:	29 96       	adiw	r28, 0x09	; 9
    484a:	0f b6       	in	r0, 0x3f	; 63
    484c:	f8 94       	cli
    484e:	de bf       	out	0x3e, r29	; 62
    4850:	0f be       	out	0x3f, r0	; 63
    4852:	cd bf       	out	0x3d, r28	; 61
    4854:	df 91       	pop	r29
    4856:	cf 91       	pop	r28
    4858:	1f 91       	pop	r17
    485a:	0f 91       	pop	r16
    485c:	ff 90       	pop	r15
    485e:	ef 90       	pop	r14
    4860:	df 90       	pop	r13
    4862:	cf 90       	pop	r12
    4864:	bf 90       	pop	r11
    4866:	af 90       	pop	r10
    4868:	9f 90       	pop	r9
    486a:	8f 90       	pop	r8
    486c:	7f 90       	pop	r7
    486e:	6f 90       	pop	r6
    4870:	5f 90       	pop	r5
    4872:	4f 90       	pop	r4
    4874:	3f 90       	pop	r3
    4876:	2f 90       	pop	r2
    // Bound Context Swap to 100us
    nrk_high_speed_timer_wait(start_time_stamp,CONTEXT_SWAP_TIME_BOUND);
#endif
    nrk_stack_pointer_restore();
    //nrk_int_enable();
    nrk_start_high_ready_task();
    4878:	0c 94 c0 29 	jmp	0x5380	; 0x5380 <nrk_start_high_ready_task>

0000487c <nrk_register_driver>:
 *
 */

int8_t nrk_register_driver(void *devicemanager,uint8_t dev_index)
{
    if(_nrk_driver_count<NRK_MAX_DRIVER_CNT)
    487c:	40 91 f4 05 	lds	r20, 0x05F4
    4880:	14 16       	cp	r1, r20
    4882:	94 f0       	brlt	.+36     	; 0x48a8 <nrk_register_driver+0x2c>
    {
        nrk_drivers[_nrk_driver_count].dev_id=dev_index;
    4884:	54 e0       	ldi	r21, 0x04	; 4
    4886:	45 02       	muls	r20, r21
    4888:	90 01       	movw	r18, r0
    488a:	11 24       	eor	r1, r1
    488c:	f9 01       	movw	r30, r18
    488e:	eb 50       	subi	r30, 0x0B	; 11
    4890:	fa 4f       	sbci	r31, 0xFA	; 250
    4892:	60 83       	st	Z, r22
        nrk_drivers[_nrk_driver_count].devicemanager=(void*)devicemanager;
    4894:	f9 01       	movw	r30, r18
    4896:	e9 50       	subi	r30, 0x09	; 9
    4898:	fa 4f       	sbci	r31, 0xFA	; 250
    489a:	91 83       	std	Z+1, r25	; 0x01
    489c:	80 83       	st	Z, r24
        _nrk_driver_count++;
    489e:	4f 5f       	subi	r20, 0xFF	; 255
    48a0:	40 93 f4 05 	sts	0x05F4, r20
        return NRK_OK;
    48a4:	81 e0       	ldi	r24, 0x01	; 1
    48a6:	08 95       	ret
    }
    else
        return NRK_ERROR;
    48a8:	8f ef       	ldi	r24, 0xFF	; 255
}
    48aa:	08 95       	ret

000048ac <nrk_open>:


int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    48ac:	0f 93       	push	r16
    48ae:	1f 93       	push	r17
    48b0:	cf 93       	push	r28
    48b2:	df 93       	push	r29
    48b4:	06 2f       	mov	r16, r22
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    48b6:	40 91 f4 05 	lds	r20, 0x05F4
    48ba:	55 27       	eor	r21, r21
    48bc:	47 fd       	sbrc	r20, 7
    48be:	50 95       	com	r21
    48c0:	10 e0       	ldi	r17, 0x00	; 0
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    48c2:	e8 2f       	mov	r30, r24
    48c4:	f0 e0       	ldi	r31, 0x00	; 0

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    48c6:	21 2f       	mov	r18, r17
    48c8:	30 e0       	ldi	r19, 0x00	; 0
    48ca:	24 17       	cp	r18, r20
    48cc:	35 07       	cpc	r19, r21
    48ce:	8c f5       	brge	.+98     	; 0x4932 <nrk_open+0x86>
    {
        if(nrk_drivers[cnt].dev_id==dev_index)
    48d0:	e9 01       	movw	r28, r18
    48d2:	cc 0f       	add	r28, r28
    48d4:	dd 1f       	adc	r29, r29
    48d6:	cc 0f       	add	r28, r28
    48d8:	dd 1f       	adc	r29, r29
    48da:	de 01       	movw	r26, r28
    48dc:	ab 50       	subi	r26, 0x0B	; 11
    48de:	ba 4f       	sbci	r27, 0xFA	; 250
    48e0:	8c 91       	ld	r24, X
    48e2:	99 27       	eor	r25, r25
    48e4:	87 fd       	sbrc	r24, 7
    48e6:	90 95       	com	r25
    48e8:	8e 17       	cp	r24, r30
    48ea:	9f 07       	cpc	r25, r31
    48ec:	01 f5       	brne	.+64     	; 0x492e <nrk_open+0x82>
        {
            if(nrk_driver_init[cnt]==WAS_NOT_OPEN)
    48ee:	f9 01       	movw	r30, r18
    48f0:	e7 50       	subi	r30, 0x07	; 7
    48f2:	fa 4f       	sbci	r31, 0xFA	; 250
    48f4:	80 81       	ld	r24, Z
    48f6:	81 11       	cpse	r24, r1
    48f8:	0e c0       	rjmp	.+28     	; 0x4916 <nrk_open+0x6a>
            {
                // Only call init the first time driver is opened
                nrk_driver_init[cnt]=WAS_OPEN;
    48fa:	81 e0       	ldi	r24, 0x01	; 1
    48fc:	80 83       	st	Z, r24
                nrk_drivers[cnt].devicemanager(INIT,opt,NULL,0);
    48fe:	fe 01       	movw	r30, r28
    4900:	e9 50       	subi	r30, 0x09	; 9
    4902:	fa 4f       	sbci	r31, 0xFA	; 250
    4904:	01 90       	ld	r0, Z+
    4906:	f0 81       	ld	r31, Z
    4908:	e0 2d       	mov	r30, r0
    490a:	20 e0       	ldi	r18, 0x00	; 0
    490c:	40 e0       	ldi	r20, 0x00	; 0
    490e:	50 e0       	ldi	r21, 0x00	; 0
    4910:	60 2f       	mov	r22, r16
    4912:	80 e0       	ldi	r24, 0x00	; 0
    4914:	09 95       	icall
            }
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
    4916:	c9 50       	subi	r28, 0x09	; 9
    4918:	da 4f       	sbci	r29, 0xFA	; 250
    491a:	e8 81       	ld	r30, Y
    491c:	f9 81       	ldd	r31, Y+1	; 0x01
    491e:	20 e0       	ldi	r18, 0x00	; 0
    4920:	40 e0       	ldi	r20, 0x00	; 0
    4922:	50 e0       	ldi	r21, 0x00	; 0
    4924:	60 2f       	mov	r22, r16
    4926:	81 e0       	ldi	r24, 0x01	; 1
    4928:	09 95       	icall
            return cnt;
    492a:	81 2f       	mov	r24, r17
    492c:	03 c0       	rjmp	.+6      	; 0x4934 <nrk_open+0x88>

int8_t nrk_open(uint8_t dev_index,uint8_t opt)
{
    uint8_t cnt;

    for(cnt=0; cnt<_nrk_driver_count; cnt++)
    492e:	1f 5f       	subi	r17, 0xFF	; 255
    4930:	ca cf       	rjmp	.-108    	; 0x48c6 <nrk_open+0x1a>
            nrk_drivers[cnt].devicemanager(OPEN,opt,NULL,0);		// pdiener: Why can I open devices more than once???
            return cnt;
        }
    }

    return NRK_ERROR;
    4932:	8f ef       	ldi	r24, 0xFF	; 255
}
    4934:	df 91       	pop	r29
    4936:	cf 91       	pop	r28
    4938:	1f 91       	pop	r17
    493a:	0f 91       	pop	r16
    493c:	08 95       	ret

0000493e <nrk_close>:

int8_t nrk_close(uint8_t dev_fd)
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    493e:	e8 2f       	mov	r30, r24
    4940:	f0 e0       	ldi	r31, 0x00	; 0
    4942:	80 91 f4 05 	lds	r24, 0x05F4
    4946:	99 27       	eor	r25, r25
    4948:	87 fd       	sbrc	r24, 7
    494a:	90 95       	com	r25
    494c:	8e 17       	cp	r24, r30
    494e:	9f 07       	cpc	r25, r31
    4950:	7c f0       	brlt	.+30     	; 0x4970 <nrk_close+0x32>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    error=nrk_drivers[dev_fd].devicemanager(CLOSE,0,NULL,0);
    4952:	ee 0f       	add	r30, r30
    4954:	ff 1f       	adc	r31, r31
    4956:	ee 0f       	add	r30, r30
    4958:	ff 1f       	adc	r31, r31
    495a:	e9 50       	subi	r30, 0x09	; 9
    495c:	fa 4f       	sbci	r31, 0xFA	; 250
    495e:	01 90       	ld	r0, Z+
    4960:	f0 81       	ld	r31, Z
    4962:	e0 2d       	mov	r30, r0
    4964:	20 e0       	ldi	r18, 0x00	; 0
    4966:	40 e0       	ldi	r20, 0x00	; 0
    4968:	50 e0       	ldi	r21, 0x00	; 0
    496a:	60 e0       	ldi	r22, 0x00	; 0
    496c:	82 e0       	ldi	r24, 0x02	; 2
    496e:	09 94       	ijmp
{
    uint8_t error;

    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    4970:	81 e0       	ldi	r24, 0x01	; 1
    4972:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_nrk_errno_set>
// Do we need to do init on a second reopen?
//if(!error)
//	driver_record_init[dev_fd]=0;

    return error;
}
    4976:	8f ef       	ldi	r24, 0xFF	; 255
    4978:	08 95       	ret

0000497a <nrk_write>:


int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    497a:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    497c:	e8 2f       	mov	r30, r24
    497e:	f0 e0       	ldi	r31, 0x00	; 0
    4980:	80 91 f4 05 	lds	r24, 0x05F4
    4984:	99 27       	eor	r25, r25
    4986:	87 fd       	sbrc	r24, 7
    4988:	90 95       	com	r25
    498a:	8e 17       	cp	r24, r30
    498c:	9f 07       	cpc	r25, r31
    498e:	6c f0       	brlt	.+26     	; 0x49aa <nrk_write+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);
    4990:	ee 0f       	add	r30, r30
    4992:	ff 1f       	adc	r31, r31
    4994:	ee 0f       	add	r30, r30
    4996:	ff 1f       	adc	r31, r31
    4998:	e9 50       	subi	r30, 0x09	; 9
    499a:	fa 4f       	sbci	r31, 0xFA	; 250
    499c:	01 90       	ld	r0, Z+
    499e:	f0 81       	ld	r31, Z
    49a0:	e0 2d       	mov	r30, r0
    49a2:	ab 01       	movw	r20, r22
    49a4:	60 e0       	ldi	r22, 0x00	; 0
    49a6:	86 e0       	ldi	r24, 0x06	; 6
    49a8:	09 94       	ijmp

int8_t nrk_write(uint8_t dev_fd,uint8_t *buffer, uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    49aa:	81 e0       	ldi	r24, 0x01	; 1
    49ac:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(WRITE,0,buffer,size);

}
    49b0:	8f ef       	ldi	r24, 0xFF	; 255
    49b2:	08 95       	ret

000049b4 <nrk_read>:

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    49b4:	24 2f       	mov	r18, r20
    if(dev_fd>_nrk_driver_count)
    49b6:	e8 2f       	mov	r30, r24
    49b8:	f0 e0       	ldi	r31, 0x00	; 0
    49ba:	80 91 f4 05 	lds	r24, 0x05F4
    49be:	99 27       	eor	r25, r25
    49c0:	87 fd       	sbrc	r24, 7
    49c2:	90 95       	com	r25
    49c4:	8e 17       	cp	r24, r30
    49c6:	9f 07       	cpc	r25, r31
    49c8:	6c f0       	brlt	.+26     	; 0x49e4 <nrk_read+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);
    49ca:	ee 0f       	add	r30, r30
    49cc:	ff 1f       	adc	r31, r31
    49ce:	ee 0f       	add	r30, r30
    49d0:	ff 1f       	adc	r31, r31
    49d2:	e9 50       	subi	r30, 0x09	; 9
    49d4:	fa 4f       	sbci	r31, 0xFA	; 250
    49d6:	01 90       	ld	r0, Z+
    49d8:	f0 81       	ld	r31, Z
    49da:	e0 2d       	mov	r30, r0
    49dc:	ab 01       	movw	r20, r22
    49de:	60 e0       	ldi	r22, 0x00	; 0
    49e0:	85 e0       	ldi	r24, 0x05	; 5
    49e2:	09 94       	ijmp

int8_t nrk_read(uint8_t dev_fd,uint8_t *buffer,uint8_t size)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    49e4:	81 e0       	ldi	r24, 0x01	; 1
    49e6:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(READ,0,buffer,size);

}
    49ea:	8f ef       	ldi	r24, 0xFF	; 255
    49ec:	08 95       	ret

000049ee <nrk_set_status>:
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    49ee:	24 2f       	mov	r18, r20
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    49f0:	e8 2f       	mov	r30, r24
    49f2:	f0 e0       	ldi	r31, 0x00	; 0
    49f4:	80 91 f4 05 	lds	r24, 0x05F4
    49f8:	99 27       	eor	r25, r25
    49fa:	87 fd       	sbrc	r24, 7
    49fc:	90 95       	com	r25
    49fe:	8e 17       	cp	r24, r30
    4a00:	9f 07       	cpc	r25, r31
    4a02:	6c f0       	brlt	.+26     	; 0x4a1e <nrk_set_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
    4a04:	ee 0f       	add	r30, r30
    4a06:	ff 1f       	adc	r31, r31
    4a08:	ee 0f       	add	r30, r30
    4a0a:	ff 1f       	adc	r31, r31
    4a0c:	e9 50       	subi	r30, 0x09	; 9
    4a0e:	fa 4f       	sbci	r31, 0xFA	; 250
    4a10:	01 90       	ld	r0, Z+
    4a12:	f0 81       	ld	r31, Z
    4a14:	e0 2d       	mov	r30, r0
    4a16:	40 e0       	ldi	r20, 0x00	; 0
    4a18:	50 e0       	ldi	r21, 0x00	; 0
    4a1a:	84 e0       	ldi	r24, 0x04	; 4
    4a1c:	09 94       	ijmp
/*if key is 0 then assumed to create a frequency setting*/
int8_t nrk_set_status(uint8_t dev_fd,uint8_t key,uint8_t value)
{
    if(dev_fd<0 || dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    4a1e:	81 e0       	ldi	r24, 0x01	; 1
    4a20:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_nrk_errno_set>
        return NRK_ERROR;
    }
    return nrk_drivers[dev_fd].devicemanager(SET_STATUS,key,NULL,value);
}
    4a24:	8f ef       	ldi	r24, 0xFF	; 255
    4a26:	08 95       	ret

00004a28 <nrk_get_status>:

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    4a28:	e8 2f       	mov	r30, r24
    4a2a:	f0 e0       	ldi	r31, 0x00	; 0
    4a2c:	80 91 f4 05 	lds	r24, 0x05F4
    4a30:	99 27       	eor	r25, r25
    4a32:	87 fd       	sbrc	r24, 7
    4a34:	90 95       	com	r25
    4a36:	8e 17       	cp	r24, r30
    4a38:	9f 07       	cpc	r25, r31
    4a3a:	74 f0       	brlt	.+28     	; 0x4a58 <nrk_get_status+0x30>
    {
        _nrk_errno_set(1);  // invalid device
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
    4a3c:	ee 0f       	add	r30, r30
    4a3e:	ff 1f       	adc	r31, r31
    4a40:	ee 0f       	add	r30, r30
    4a42:	ff 1f       	adc	r31, r31
    4a44:	e9 50       	subi	r30, 0x09	; 9
    4a46:	fa 4f       	sbci	r31, 0xFA	; 250
    4a48:	01 90       	ld	r0, Z+
    4a4a:	f0 81       	ld	r31, Z
    4a4c:	e0 2d       	mov	r30, r0
    4a4e:	20 e0       	ldi	r18, 0x00	; 0
    4a50:	40 e0       	ldi	r20, 0x00	; 0
    4a52:	50 e0       	ldi	r21, 0x00	; 0
    4a54:	83 e0       	ldi	r24, 0x03	; 3
    4a56:	09 94       	ijmp

int8_t nrk_get_status(uint8_t dev_fd,uint8_t key)
{
    if(dev_fd>_nrk_driver_count)
    {
        _nrk_errno_set(1);  // invalid device
    4a58:	81 e0       	ldi	r24, 0x01	; 1
    4a5a:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <_nrk_errno_set>
        return NRK_ERROR;
    }

    return nrk_drivers[dev_fd].devicemanager(GET_STATUS,key,NULL,0);
}
    4a5e:	8f ef       	ldi	r24, 0xFF	; 255
    4a60:	08 95       	ret

00004a62 <nrk_spin_wait_us>:
	...
        NOP();
        NOP();
        NOP();
        NOP();
        NOP();
    } while (--timeout);
    4a7a:	01 97       	sbiw	r24, 0x01	; 1
    4a7c:	00 97       	sbiw	r24, 0x00	; 0
    4a7e:	89 f7       	brne	.-30     	; 0x4a62 <nrk_spin_wait_us>

}
    4a80:	08 95       	ret

00004a82 <_nrk_precision_os_timer_stop>:
  _nrk_time_trigger=0;
}

void _nrk_precision_os_timer_stop()
{
  TCCR5B=0; // no clock
    4a82:	10 92 21 01 	sts	0x0121, r1
    4a86:	08 95       	ret

00004a88 <_nrk_precision_os_timer_start>:

void _nrk_precision_os_timer_start()
{
  // Set timer 5 to count up to the number of timer 5 ticks per OS tick and then reset to 0
  // Whenever you read it, this should indicate the offset into the OS tick
  TCCR5B=BM(WGM52) | BM(CS50);  // clk I/O no prescale, CTC match on OCR5A
    4a88:	89 e0       	ldi	r24, 0x09	; 9
    4a8a:	80 93 21 01 	sts	0x0121, r24
  OCR5A=PRECISION_TICKS_PER_TICK;  // Reset to 0 each tick...
    4a8e:	8d e8       	ldi	r24, 0x8D	; 141
    4a90:	9c e3       	ldi	r25, 0x3C	; 60
    4a92:	90 93 29 01 	sts	0x0129, r25
    4a96:	80 93 28 01 	sts	0x0128, r24
    4a9a:	08 95       	ret

00004a9c <_nrk_precision_os_timer_reset>:
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    4a9c:	10 92 25 01 	sts	0x0125, r1
    4aa0:	10 92 24 01 	sts	0x0124, r1
    4aa4:	08 95       	ret

00004aa6 <_nrk_precision_os_timer_get>:
}

inline uint16_t _nrk_precision_os_timer_get()
{
    4aa6:	cf 93       	push	r28
    4aa8:	df 93       	push	r29
    4aaa:	00 d0       	rcall	.+0      	; 0x4aac <_nrk_precision_os_timer_get+0x6>
    4aac:	cd b7       	in	r28, 0x3d	; 61
    4aae:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  tmp=TCNT5;
    4ab0:	80 91 24 01 	lds	r24, 0x0124
    4ab4:	90 91 25 01 	lds	r25, 0x0125
    4ab8:	9a 83       	std	Y+2, r25	; 0x02
    4aba:	89 83       	std	Y+1, r24	; 0x01
  
  return tmp;
    4abc:	89 81       	ldd	r24, Y+1	; 0x01
    4abe:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4ac0:	0f 90       	pop	r0
    4ac2:	0f 90       	pop	r0
    4ac4:	df 91       	pop	r29
    4ac6:	cf 91       	pop	r28
    4ac8:	08 95       	ret

00004aca <_nrk_high_speed_timer_stop>:

void _nrk_high_speed_timer_stop()
{
  TCCR1B=0;  // no clock 
    4aca:	10 92 81 00 	sts	0x0081, r1
    4ace:	08 95       	ret

00004ad0 <_nrk_high_speed_timer_start>:
}

void _nrk_high_speed_timer_start()
{
  TCCR1B=BM(CS10);  // clk I/O no prescaler 
    4ad0:	81 e0       	ldi	r24, 0x01	; 1
    4ad2:	80 93 81 00 	sts	0x0081, r24
    4ad6:	08 95       	ret

00004ad8 <_nrk_high_speed_timer_reset>:

void _nrk_high_speed_timer_reset()
{
//  nrk_int_disable();
  //SFIOR |= BM(PSR321);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4ad8:	83 b5       	in	r24, 0x23	; 35
    4ada:	81 60       	ori	r24, 0x01	; 1
    4adc:	83 bd       	out	0x23, r24	; 35
  TCNT1=0;
    4ade:	10 92 85 00 	sts	0x0085, r1
    4ae2:	10 92 84 00 	sts	0x0084, r1
    4ae6:	08 95       	ret

00004ae8 <_nrk_high_speed_timer_get>:
ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
}

inline uint16_t _nrk_high_speed_timer_get()
{
    4ae8:	cf 93       	push	r28
    4aea:	df 93       	push	r29
    4aec:	00 d0       	rcall	.+0      	; 0x4aee <_nrk_high_speed_timer_get+0x6>
    4aee:	cd b7       	in	r28, 0x3d	; 61
    4af0:	de b7       	in	r29, 0x3e	; 62
volatile uint16_t tmp;
  //nrk_int_disable();
  tmp=TCNT1;
    4af2:	80 91 84 00 	lds	r24, 0x0084
    4af6:	90 91 85 00 	lds	r25, 0x0085
    4afa:	9a 83       	std	Y+2, r25	; 0x02
    4afc:	89 83       	std	Y+1, r24	; 0x01
  //nrk_int_enable();
  return tmp;
    4afe:	89 81       	ldd	r24, Y+1	; 0x01
    4b00:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4b02:	0f 90       	pop	r0
    4b04:	0f 90       	pop	r0
    4b06:	df 91       	pop	r29
    4b08:	cf 91       	pop	r28
    4b0a:	08 95       	ret

00004b0c <nrk_high_speed_timer_wait>:
  This function blocks for n ticks of the high speed timer after the
  start number of ticks.  It will handle the overflow that can occur.
  Do not use this for delays longer than 8ms!
*/
void nrk_high_speed_timer_wait( uint16_t start, uint16_t ticks )
{
    4b0c:	cf 92       	push	r12
    4b0e:	df 92       	push	r13
    4b10:	ef 92       	push	r14
    4b12:	ff 92       	push	r15
    4b14:	cf 93       	push	r28
    4b16:	df 93       	push	r29
uint32_t tmp;

// Adjust for 16MHz clock
// Copy into tmp to avoid overflow problem
tmp=start*2;
    4b18:	ec 01       	movw	r28, r24
    4b1a:	cc 0f       	add	r28, r28
    4b1c:	dd 1f       	adc	r29, r29
if(tmp>65400) start=0;
    4b1e:	c9 37       	cpi	r28, 0x79	; 121
    4b20:	8f ef       	ldi	r24, 0xFF	; 255
    4b22:	d8 07       	cpc	r29, r24
    4b24:	10 f0       	brcs	.+4      	; 0x4b2a <nrk_high_speed_timer_wait+0x1e>
    4b26:	c0 e0       	ldi	r28, 0x00	; 0
    4b28:	d0 e0       	ldi	r29, 0x00	; 0
else start=tmp;
tmp=(uint32_t)start+(uint32_t)ticks;
    4b2a:	6b 01       	movw	r12, r22
    4b2c:	e1 2c       	mov	r14, r1
    4b2e:	f1 2c       	mov	r15, r1
    4b30:	cc 0e       	add	r12, r28
    4b32:	dd 1e       	adc	r13, r29
    4b34:	e1 1c       	adc	r14, r1
    4b36:	f1 1c       	adc	r15, r1
if(tmp>65536) 
    4b38:	81 e0       	ldi	r24, 0x01	; 1
    4b3a:	c8 16       	cp	r12, r24
    4b3c:	d1 04       	cpc	r13, r1
    4b3e:	e8 06       	cpc	r14, r24
    4b40:	f1 04       	cpc	r15, r1
    4b42:	40 f0       	brcs	.+16     	; 0x4b54 <nrk_high_speed_timer_wait+0x48>
	{
	tmp-=65536;
    4b44:	81 e0       	ldi	r24, 0x01	; 1
    4b46:	e8 1a       	sub	r14, r24
    4b48:	f1 08       	sbc	r15, r1
	do{}while(_nrk_high_speed_timer_get()>start);
    4b4a:	0e 94 74 25 	call	0x4ae8	; 0x4ae8 <_nrk_high_speed_timer_get>
    4b4e:	c8 17       	cp	r28, r24
    4b50:	d9 07       	cpc	r29, r25
    4b52:	d8 f3       	brcs	.-10     	; 0x4b4a <nrk_high_speed_timer_wait+0x3e>
	}

ticks=tmp;
do{}while(_nrk_high_speed_timer_get()<ticks);
    4b54:	0e 94 74 25 	call	0x4ae8	; 0x4ae8 <_nrk_high_speed_timer_get>
    4b58:	8c 15       	cp	r24, r12
    4b5a:	9d 05       	cpc	r25, r13
    4b5c:	d8 f3       	brcs	.-10     	; 0x4b54 <nrk_high_speed_timer_wait+0x48>
}
    4b5e:	df 91       	pop	r29
    4b60:	cf 91       	pop	r28
    4b62:	ff 90       	pop	r15
    4b64:	ef 90       	pop	r14
    4b66:	df 90       	pop	r13
    4b68:	cf 90       	pop	r12
    4b6a:	08 95       	ret

00004b6c <_nrk_os_timer_stop>:
  return tmp;
}

inline void _nrk_os_timer_stop()
{
  TCCR2B=0;  // stop timer 
    4b6c:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 &=  ~BM(OCIE2A) ;
    4b70:	e0 e7       	ldi	r30, 0x70	; 112
    4b72:	f0 e0       	ldi	r31, 0x00	; 0
    4b74:	80 81       	ld	r24, Z
    4b76:	8d 7f       	andi	r24, 0xFD	; 253
    4b78:	80 83       	st	Z, r24
  //TIMSK2 &=  ~BM(OCIE2B) ;
  TIMSK2 &=  ~BM(TOIE2) ;
    4b7a:	80 81       	ld	r24, Z
    4b7c:	8e 7f       	andi	r24, 0xFE	; 254
    4b7e:	80 83       	st	Z, r24
    4b80:	08 95       	ret

00004b82 <_nrk_os_timer_set>:
}

inline void _nrk_os_timer_set(uint8_t v)
{
TCNT2=v;
    4b82:	80 93 b2 00 	sts	0x00B2, r24
    4b86:	08 95       	ret

00004b88 <_nrk_os_timer_start>:
   
inline void _nrk_os_timer_start()
{
  //GTCCR |= BM(PSRASY);              // reset prescaler
  //TCNT2 = 0;                  // reset counter
  TIMSK2 |=   BM(OCIE2A)| BM(TOIE2);// | BM(OCIE2B);//| BM(TICIE1);    // Enable interrupt
    4b88:	e0 e7       	ldi	r30, 0x70	; 112
    4b8a:	f0 e0       	ldi	r31, 0x00	; 0
    4b8c:	80 81       	ld	r24, Z
    4b8e:	83 60       	ori	r24, 0x03	; 3
    4b90:	80 83       	st	Z, r24
  TCCR2B = BM(CS21) | BM(CS20); //|     // reset counter on interrupt, set divider to 128
    4b92:	83 e0       	ldi	r24, 0x03	; 3
    4b94:	80 93 b1 00 	sts	0x00B1, r24
    4b98:	08 95       	ret

00004b9a <_nrk_os_timer_reset>:
}

inline void _nrk_os_timer_reset()
{

    GTCCR |= BM(PSRASY);              // reset prescaler
    4b9a:	83 b5       	in	r24, 0x23	; 35
    4b9c:	82 60       	ori	r24, 0x02	; 2
    4b9e:	83 bd       	out	0x23, r24	; 35
    TCNT2 = 0;                  // reset counter
    4ba0:	10 92 b2 00 	sts	0x00B2, r1
    _nrk_time_trigger=0;
    4ba4:	10 92 a5 03 	sts	0x03A5, r1
    _nrk_prev_timer_val=0;
    4ba8:	10 92 50 04 	sts	0x0450, r1
    4bac:	08 95       	ret

00004bae <_nrk_setup_timer>:
    } while (--timeout);

}


void _nrk_setup_timer() {
    4bae:	cf 93       	push	r28
    4bb0:	df 93       	push	r29
  _nrk_prev_timer_val=254;
    4bb2:	8e ef       	ldi	r24, 0xFE	; 254
    4bb4:	80 93 50 04 	sts	0x0450, r24
 
// Timer 0 Setup as Asynchronous timer running from 32Khz Clock
  ASSR = BM(AS2);
    4bb8:	80 e2       	ldi	r24, 0x20	; 32
    4bba:	80 93 b6 00 	sts	0x00B6, r24
  OCR2A = _nrk_prev_timer_val;
    4bbe:	80 91 50 04 	lds	r24, 0x0450
    4bc2:	80 93 b3 00 	sts	0x00B3, r24
  //OCR2B = 2;
  TIFR2 =   BM(OCF2A) | BM(TOV2); //| BM(OCF2B2) ;       // Clear interrupt flag
    4bc6:	83 e0       	ldi	r24, 0x03	; 3
    4bc8:	87 bb       	out	0x17, r24	; 23
  TCCR2A = BM(WGM21);
    4bca:	92 e0       	ldi	r25, 0x02	; 2
    4bcc:	90 93 b0 00 	sts	0x00B0, r25
  TCCR2B = BM(CS21) | BM(CS20); //|      // reset counter on interrupt, set divider to 128
    4bd0:	80 93 b1 00 	sts	0x00B1, r24
  GTCCR |= BM(PSRASY);              // reset prescaler
    4bd4:	93 b5       	in	r25, 0x23	; 35
    4bd6:	92 60       	ori	r25, 0x02	; 2
    4bd8:	93 bd       	out	0x23, r25	; 35
   // Clear interrupt flag
  TIFR2 =   BM(OCF2A) | BM(TOV2);    
    4bda:	87 bb       	out	0x17, r24	; 23
  // reset counter on interrupt, set divider to 128
  TCCR0A = BM(WGM01) | BM(CS01) | BM(CS00); 
    4bdc:	84 bd       	out	0x24, r24	; 36
  // reset prescaler
  //GTCCR |= TSM;              
  GTCCR |= BM(PSRASY);              // reset prescaler
    4bde:	83 b5       	in	r24, 0x23	; 35
    4be0:	82 60       	ori	r24, 0x02	; 2
    4be2:	83 bd       	out	0x23, r24	; 35

// Timer 1 High Precision Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR1A=0;  
    4be4:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=BM(CS10);  // clk I/O no prescale
    4be8:	81 e0       	ldi	r24, 0x01	; 1
    4bea:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0;  // 16 bit
    4bee:	10 92 85 00 	sts	0x0085, r1
    4bf2:	10 92 84 00 	sts	0x0084, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4bf6:	83 b5       	in	r24, 0x23	; 35
    4bf8:	82 60       	ori	r24, 0x02	; 2
    4bfa:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4bfc:	83 b5       	in	r24, 0x23	; 35
    4bfe:	81 60       	ori	r24, 0x01	; 1
    4c00:	83 bd       	out	0x23, r24	; 35

// Timer 5 High Precision Time Sync Timer
// No interrupt, prescaler 1, Normal Operation
  TCCR5A=0;
    4c02:	10 92 20 01 	sts	0x0120, r1
  //TIFR5=0; // Clear interrupt flags
  //TIMSK5=BM(TOIE5); // Overflow interrupt enable
  TCNT5=0;  // 16 bit
    4c06:	c4 e2       	ldi	r28, 0x24	; 36
    4c08:	d1 e0       	ldi	r29, 0x01	; 1
    4c0a:	19 82       	std	Y+1, r1	; 0x01
    4c0c:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
    4c0e:	83 b5       	in	r24, 0x23	; 35
    4c10:	82 60       	ori	r24, 0x02	; 2
    4c12:	83 bd       	out	0x23, r24	; 35
  GTCCR |= BM(PSRSYNC);              // reset prescaler
    4c14:	83 b5       	in	r24, 0x23	; 35
    4c16:	81 60       	ori	r24, 0x01	; 1
    4c18:	83 bd       	out	0x23, r24	; 35

  _nrk_os_timer_reset();
    4c1a:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <_nrk_os_timer_reset>
}

void _nrk_precision_os_timer_reset()
{
  //GTCCR |= BM(PSRSYNC);              // reset prescaler
  TCNT5=0;  // 16 bit
    4c1e:	19 82       	std	Y+1, r1	; 0x01
    4c20:	18 82       	st	Y, r1
  GTCCR |= BM(PSRASY);              // reset prescaler
  GTCCR |= BM(PSRSYNC);              // reset prescaler

  _nrk_os_timer_reset();
  _nrk_precision_os_timer_reset();
  _nrk_os_timer_start();
    4c22:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <_nrk_os_timer_start>
  _nrk_precision_os_timer_start();
    4c26:	0e 94 44 25 	call	0x4a88	; 0x4a88 <_nrk_precision_os_timer_start>
  _nrk_time_trigger=0;
    4c2a:	10 92 a5 03 	sts	0x03A5, r1
}
    4c2e:	df 91       	pop	r29
    4c30:	cf 91       	pop	r28
    4c32:	08 95       	ret

00004c34 <_nrk_get_next_wakeup>:
}


uint8_t _nrk_get_next_wakeup()
{
	return (uint8_t)(OCR2A+1);
    4c34:	80 91 b3 00 	lds	r24, 0x00B3
}
    4c38:	8f 5f       	subi	r24, 0xFF	; 255
    4c3a:	08 95       	ret

00004c3c <_nrk_set_next_wakeup>:

void _nrk_set_next_wakeup(uint8_t nw)
{
   OCR2A = nw-1;
    4c3c:	81 50       	subi	r24, 0x01	; 1
    4c3e:	80 93 b3 00 	sts	0x00B3, r24
    4c42:	08 95       	ret

00004c44 <nrk_timer_int_stop>:
}

int8_t nrk_timer_int_stop(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4c44:	81 11       	cpse	r24, r1
    4c46:	02 c0       	rjmp	.+4      	; 0x4c4c <nrk_timer_int_stop+0x8>
	{
	TIMSK3 = 0;
    4c48:	10 92 71 00 	sts	0x0071, r1
	}
return NRK_ERROR;
}
    4c4c:	8f ef       	ldi	r24, 0xFF	; 255
    4c4e:	08 95       	ret

00004c50 <nrk_timer_int_reset>:

int8_t nrk_timer_int_reset(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4c50:	81 11       	cpse	r24, r1
    4c52:	06 c0       	rjmp	.+12     	; 0x4c60 <nrk_timer_int_reset+0x10>
	{
	TCNT3=0;
    4c54:	10 92 95 00 	sts	0x0095, r1
    4c58:	10 92 94 00 	sts	0x0094, r1
	return NRK_OK;
    4c5c:	81 e0       	ldi	r24, 0x01	; 1
    4c5e:	08 95       	ret
	}
return NRK_ERROR;
    4c60:	8f ef       	ldi	r24, 0xFF	; 255
}
    4c62:	08 95       	ret

00004c64 <nrk_timer_int_read>:

uint16_t nrk_timer_int_read(uint8_t timer )
{
if(timer==NRK_APP_TIMER_0)
    4c64:	81 11       	cpse	r24, r1
    4c66:	05 c0       	rjmp	.+10     	; 0x4c72 <nrk_timer_int_read+0xe>
	{
	return TCNT3;
    4c68:	80 91 94 00 	lds	r24, 0x0094
    4c6c:	90 91 95 00 	lds	r25, 0x0095
    4c70:	08 95       	ret
	}
return 0;
    4c72:	80 e0       	ldi	r24, 0x00	; 0
    4c74:	90 e0       	ldi	r25, 0x00	; 0

}
    4c76:	08 95       	ret

00004c78 <nrk_timer_int_start>:

int8_t  nrk_timer_int_start(uint8_t timer)
{
if(timer==NRK_APP_TIMER_0)
    4c78:	81 11       	cpse	r24, r1
    4c7a:	05 c0       	rjmp	.+10     	; 0x4c86 <nrk_timer_int_start+0xe>
	{
		TIMSK3 = BM(OCIE3A);
    4c7c:	82 e0       	ldi	r24, 0x02	; 2
    4c7e:	80 93 71 00 	sts	0x0071, r24
	return NRK_OK;
    4c82:	81 e0       	ldi	r24, 0x01	; 1
    4c84:	08 95       	ret
	}
return NRK_ERROR;
    4c86:	8f ef       	ldi	r24, 0xFF	; 255
}
    4c88:	08 95       	ret

00004c8a <nrk_timer_int_configure>:

int8_t  nrk_timer_int_configure(uint8_t timer, uint16_t prescaler, uint16_t compare_value, void *callback_func)
{
if(timer==NRK_APP_TIMER_0)
    4c8a:	81 11       	cpse	r24, r1
    4c8c:	35 c0       	rjmp	.+106    	; 0x4cf8 <nrk_timer_int_configure+0x6e>
	{
	if(prescaler>0 && prescaler<6 ) app_timer0_prescale=prescaler;
    4c8e:	cb 01       	movw	r24, r22
    4c90:	01 97       	sbiw	r24, 0x01	; 1
    4c92:	05 97       	sbiw	r24, 0x05	; 5
    4c94:	10 f4       	brcc	.+4      	; 0x4c9a <nrk_timer_int_configure+0x10>
    4c96:	60 93 4f 04 	sts	0x044F, r22
	TCCR3A = 0;  
    4c9a:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = BM(WGM32);  // Automatic restart on compare, count up
    4c9e:	88 e0       	ldi	r24, 0x08	; 8
    4ca0:	80 93 91 00 	sts	0x0091, r24
        OCR3AH = (compare_value >> 8) & 0xFF;	
    4ca4:	50 93 99 00 	sts	0x0099, r21
  	OCR3AL = (compare_value & 0xFF );
    4ca8:	40 93 98 00 	sts	0x0098, r20
	app_timer0_callback=callback_func;
    4cac:	30 93 a3 03 	sts	0x03A3, r19
    4cb0:	20 93 a2 03 	sts	0x03A2, r18
	if(app_timer0_prescale==1) TCCR3B |= BM(CS30);  
    4cb4:	80 91 4f 04 	lds	r24, 0x044F
    4cb8:	81 30       	cpi	r24, 0x01	; 1
    4cba:	21 f4       	brne	.+8      	; 0x4cc4 <nrk_timer_int_configure+0x3a>
    4cbc:	80 91 91 00 	lds	r24, 0x0091
    4cc0:	81 60       	ori	r24, 0x01	; 1
    4cc2:	11 c0       	rjmp	.+34     	; 0x4ce6 <nrk_timer_int_configure+0x5c>
	// Divide by 1
	else if(app_timer0_prescale==2) TCCR3B |= BM(CS31); 
    4cc4:	82 30       	cpi	r24, 0x02	; 2
    4cc6:	21 f4       	brne	.+8      	; 0x4cd0 <nrk_timer_int_configure+0x46>
    4cc8:	80 91 91 00 	lds	r24, 0x0091
    4ccc:	82 60       	ori	r24, 0x02	; 2
    4cce:	0b c0       	rjmp	.+22     	; 0x4ce6 <nrk_timer_int_configure+0x5c>
	// Divide by 8
	else if(app_timer0_prescale==3) TCCR3B |= BM(CS31) | BM(CS30);  
    4cd0:	83 30       	cpi	r24, 0x03	; 3
    4cd2:	21 f4       	brne	.+8      	; 0x4cdc <nrk_timer_int_configure+0x52>
    4cd4:	80 91 91 00 	lds	r24, 0x0091
    4cd8:	83 60       	ori	r24, 0x03	; 3
    4cda:	05 c0       	rjmp	.+10     	; 0x4ce6 <nrk_timer_int_configure+0x5c>
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
    4cdc:	84 30       	cpi	r24, 0x04	; 4
    4cde:	31 f4       	brne	.+12     	; 0x4cec <nrk_timer_int_configure+0x62>
    4ce0:	80 91 91 00 	lds	r24, 0x0091
    4ce4:	84 60       	ori	r24, 0x04	; 4
    4ce6:	80 93 91 00 	sts	0x0091, r24
    4cea:	08 c0       	rjmp	.+16     	; 0x4cfc <nrk_timer_int_configure+0x72>
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
    4cec:	85 30       	cpi	r24, 0x05	; 5
    4cee:	31 f4       	brne	.+12     	; 0x4cfc <nrk_timer_int_configure+0x72>
    4cf0:	80 91 91 00 	lds	r24, 0x0091
    4cf4:	85 60       	ori	r24, 0x05	; 5
    4cf6:	f7 cf       	rjmp	.-18     	; 0x4ce6 <nrk_timer_int_configure+0x5c>
	// Divide by 1024
	return NRK_OK;
	}

return NRK_ERROR;
    4cf8:	8f ef       	ldi	r24, 0xFF	; 255
    4cfa:	08 95       	ret
	// Divide by 64
	else if(app_timer0_prescale==4) TCCR3B |= BM(CS32) ;  
	// Divide by 256 
	else if(app_timer0_prescale==5) TCCR3B |= BM(CS32) | BM(CS30);  
	// Divide by 1024
	return NRK_OK;
    4cfc:	81 e0       	ldi	r24, 0x01	; 1
	}

return NRK_ERROR;
}
    4cfe:	08 95       	ret

00004d00 <_nrk_os_timer_get>:


inline uint8_t _nrk_os_timer_get()
{
  return (volatile uint8_t)TCNT2;
    4d00:	80 91 b2 00 	lds	r24, 0x00B2
}
    4d04:	08 95       	ret

00004d06 <__vector_default>:

//--------------------------------------------------------------------------------------
//  Default ISR 
//--------------------------------------------------------------------------------------
SIGNAL(__vector_default) {
    4d06:	1f 92       	push	r1
    4d08:	0f 92       	push	r0
    4d0a:	0f b6       	in	r0, 0x3f	; 63
    4d0c:	0f 92       	push	r0
    4d0e:	11 24       	eor	r1, r1
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4d10:	60 e0       	ldi	r22, 0x00	; 0
    4d12:	8a e0       	ldi	r24, 0x0A	; 10
    4d14:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <nrk_kernel_error_add>
    4d18:	ff cf       	rjmp	.-2      	; 0x4d18 <__vector_default+0x12>

00004d1a <__vector_13>:

// This is the SUSPEND for the OS timer Tick
void TIMER2_COMPA_vect( void ) __attribute__ ( ( signal,naked ));
void TIMER2_COMPA_vect(void) {

asm volatile (
    4d1a:	0f 92       	push	r0
    4d1c:	0f b6       	in	r0, 0x3f	; 63
    4d1e:	0f 92       	push	r0
    4d20:	1f 92       	push	r1
    4d22:	2f 92       	push	r2
    4d24:	3f 92       	push	r3
    4d26:	4f 92       	push	r4
    4d28:	5f 92       	push	r5
    4d2a:	6f 92       	push	r6
    4d2c:	7f 92       	push	r7
    4d2e:	8f 92       	push	r8
    4d30:	9f 92       	push	r9
    4d32:	af 92       	push	r10
    4d34:	bf 92       	push	r11
    4d36:	cf 92       	push	r12
    4d38:	df 92       	push	r13
    4d3a:	ef 92       	push	r14
    4d3c:	ff 92       	push	r15
    4d3e:	0f 93       	push	r16
    4d40:	1f 93       	push	r17
    4d42:	2f 93       	push	r18
    4d44:	3f 93       	push	r19
    4d46:	4f 93       	push	r20
    4d48:	5f 93       	push	r21
    4d4a:	6f 93       	push	r22
    4d4c:	7f 93       	push	r23
    4d4e:	8f 93       	push	r24
    4d50:	9f 93       	push	r25
    4d52:	af 93       	push	r26
    4d54:	bf 93       	push	r27
    4d56:	cf 93       	push	r28
    4d58:	df 93       	push	r29
    4d5a:	ef 93       	push	r30
    4d5c:	ff 93       	push	r31
    4d5e:	a0 91 e1 05 	lds	r26, 0x05E1
    4d62:	b0 91 e2 05 	lds	r27, 0x05E2
    4d66:	0d b6       	in	r0, 0x3d	; 61
    4d68:	0d 92       	st	X+, r0
    4d6a:	0e b6       	in	r0, 0x3e	; 62
    4d6c:	0d 92       	st	X+, r0
    4d6e:	1f 92       	push	r1
    4d70:	a0 91 4d 04 	lds	r26, 0x044D
    4d74:	b0 91 4e 04 	lds	r27, 0x044E
    4d78:	1e 90       	ld	r1, -X
    4d7a:	be bf       	out	0x3e, r27	; 62
    4d7c:	ad bf       	out	0x3d, r26	; 61
    4d7e:	08 95       	ret

00004d80 <__vector_32>:
);

}


SIGNAL(TIMER3_COMPA_vect) {
    4d80:	1f 92       	push	r1
    4d82:	0f 92       	push	r0
    4d84:	0f b6       	in	r0, 0x3f	; 63
    4d86:	0f 92       	push	r0
    4d88:	11 24       	eor	r1, r1
    4d8a:	0b b6       	in	r0, 0x3b	; 59
    4d8c:	0f 92       	push	r0
    4d8e:	2f 93       	push	r18
    4d90:	3f 93       	push	r19
    4d92:	4f 93       	push	r20
    4d94:	5f 93       	push	r21
    4d96:	6f 93       	push	r22
    4d98:	7f 93       	push	r23
    4d9a:	8f 93       	push	r24
    4d9c:	9f 93       	push	r25
    4d9e:	af 93       	push	r26
    4da0:	bf 93       	push	r27
    4da2:	ef 93       	push	r30
    4da4:	ff 93       	push	r31
	if(app_timer0_callback!=NULL) app_timer0_callback();
    4da6:	e0 91 a2 03 	lds	r30, 0x03A2
    4daa:	f0 91 a3 03 	lds	r31, 0x03A3
    4dae:	30 97       	sbiw	r30, 0x00	; 0
    4db0:	11 f0       	breq	.+4      	; 0x4db6 <__vector_32+0x36>
    4db2:	09 95       	icall
    4db4:	04 c0       	rjmp	.+8      	; 0x4dbe <__vector_32+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    4db6:	60 e0       	ldi	r22, 0x00	; 0
    4db8:	8a e0       	ldi	r24, 0x0A	; 10
    4dba:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <nrk_kernel_error_add>
	return;  	
}
    4dbe:	ff 91       	pop	r31
    4dc0:	ef 91       	pop	r30
    4dc2:	bf 91       	pop	r27
    4dc4:	af 91       	pop	r26
    4dc6:	9f 91       	pop	r25
    4dc8:	8f 91       	pop	r24
    4dca:	7f 91       	pop	r23
    4dcc:	6f 91       	pop	r22
    4dce:	5f 91       	pop	r21
    4dd0:	4f 91       	pop	r20
    4dd2:	3f 91       	pop	r19
    4dd4:	2f 91       	pop	r18
    4dd6:	0f 90       	pop	r0
    4dd8:	0b be       	out	0x3b, r0	; 59
    4dda:	0f 90       	pop	r0
    4ddc:	0f be       	out	0x3f, r0	; 63
    4dde:	0f 90       	pop	r0
    4de0:	1f 90       	pop	r1
    4de2:	18 95       	reti

00004de4 <SIG_OUTPUT_COMPARE1A>:

//--------------------------------------------------------------------------------------
//  TIMER 1 COMPARE ISR
//--------------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE1A) {
    4de4:	1f 92       	push	r1
    4de6:	0f 92       	push	r0
    4de8:	0f b6       	in	r0, 0x3f	; 63
    4dea:	0f 92       	push	r0
    4dec:	11 24       	eor	r1, r1

	return;  	
} 
    4dee:	0f 90       	pop	r0
    4df0:	0f be       	out	0x3f, r0	; 63
    4df2:	0f 90       	pop	r0
    4df4:	1f 90       	pop	r1
    4df6:	18 95       	reti

00004df8 <_nrk_startup_error>:
// Use the timer settings that are normally 0 on reset to detect
// if the OS has reboot by accident


// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
    4df8:	04 b6       	in	r0, 0x34	; 52
    4dfa:	03 fc       	sbrc	r0, 3
    4dfc:	02 c0       	rjmp	.+4      	; 0x4e02 <_nrk_startup_error+0xa>
#include <nrk_error.h>

uint8_t _nrk_startup_error()
{
uint8_t error;
error=0;
    4dfe:	80 e0       	ldi	r24, 0x00	; 0
    4e00:	01 c0       	rjmp	.+2      	; 0x4e04 <_nrk_startup_error+0xc>

// Check Watchdog timer
if( (MCUSR & (1<<WDRF)) != 0 )
	{
	// don't clear wdt
	error|=0x10;
    4e02:	80 e1       	ldi	r24, 0x10	; 16
	}


// Check Brown Out 
if( (MCUSR & (1<<BORF)) != 0 )
    4e04:	04 b6       	in	r0, 0x34	; 52
    4e06:	02 fe       	sbrs	r0, 2
    4e08:	06 c0       	rjmp	.+12     	; 0x4e16 <_nrk_startup_error+0x1e>
	{
	MCUSR &= ~(1<<BORF);	
    4e0a:	94 b7       	in	r25, 0x34	; 52
    4e0c:	9b 7f       	andi	r25, 0xFB	; 251
    4e0e:	94 bf       	out	0x34, r25	; 52
	// Only add brownout if it isn't the first bootup
	if( (MCUSR & (1<<PORF)) == 0 )
    4e10:	04 b6       	in	r0, 0x34	; 52
    4e12:	00 fe       	sbrs	r0, 0
		error|=0x04;
    4e14:	84 60       	ori	r24, 0x04	; 4
	}

// Check External Reset 
if( (MCUSR & (1<<EXTRF)) != 0 )
    4e16:	04 b6       	in	r0, 0x34	; 52
    4e18:	01 fe       	sbrs	r0, 1
    4e1a:	05 c0       	rjmp	.+10     	; 0x4e26 <_nrk_startup_error+0x2e>
	{
	MCUSR &= ~(1<<EXTRF);	
    4e1c:	94 b7       	in	r25, 0x34	; 52
    4e1e:	9d 7f       	andi	r25, 0xFD	; 253
    4e20:	94 bf       	out	0x34, r25	; 52
	error|=0x02;
    4e22:	82 60       	ori	r24, 0x02	; 2
    4e24:	08 95       	ret
	}

// If any of the above errors went off, then the next errors will
// incorrectly be set!  So make sure to bail early!
if(error!=0) return error;
    4e26:	81 11       	cpse	r24, r1
    4e28:	0c c0       	rjmp	.+24     	; 0x4e42 <_nrk_startup_error+0x4a>

// Check if normal power up state is set and then clear it
if( (MCUSR & (1<<PORF)) != 0 )
    4e2a:	04 b6       	in	r0, 0x34	; 52
    4e2c:	00 fe       	sbrs	r0, 0
    4e2e:	04 c0       	rjmp	.+8      	; 0x4e38 <_nrk_startup_error+0x40>
	{
	MCUSR &= ~(1<<PORF);
    4e30:	94 b7       	in	r25, 0x34	; 52
    4e32:	9e 7f       	andi	r25, 0xFE	; 254
    4e34:	94 bf       	out	0x34, r25	; 52
    4e36:	01 c0       	rjmp	.+2      	; 0x4e3a <_nrk_startup_error+0x42>
	}
	else {
	error|=0x01;
    4e38:	81 e0       	ldi	r24, 0x01	; 1
	}

// check uart state 
if((volatile uint8_t)TCCR2A!=0) error|=0x01;
    4e3a:	90 91 b0 00 	lds	r25, 0x00B0
    4e3e:	91 11       	cpse	r25, r1
    4e40:	81 e0       	ldi	r24, 0x01	; 1

return error;
}
    4e42:	08 95       	ret

00004e44 <nrk_ext_int_enable>:
#include <nrk_cfg.h>


int8_t  nrk_ext_int_enable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK |= BM(INT0); return NRK_OK; }
    4e44:	81 11       	cpse	r24, r1
    4e46:	02 c0       	rjmp	.+4      	; 0x4e4c <nrk_ext_int_enable+0x8>
    4e48:	e8 9a       	sbi	0x1d, 0	; 29
    4e4a:	39 c0       	rjmp	.+114    	; 0x4ebe <nrk_ext_int_enable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK |= BM(INT1); return NRK_OK; }
    4e4c:	81 30       	cpi	r24, 0x01	; 1
    4e4e:	11 f4       	brne	.+4      	; 0x4e54 <nrk_ext_int_enable+0x10>
    4e50:	e9 9a       	sbi	0x1d, 1	; 29
    4e52:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK |= BM(INT2); return NRK_OK; }
    4e54:	82 30       	cpi	r24, 0x02	; 2
    4e56:	11 f4       	brne	.+4      	; 0x4e5c <nrk_ext_int_enable+0x18>
    4e58:	ea 9a       	sbi	0x1d, 2	; 29
    4e5a:	31 c0       	rjmp	.+98     	; 0x4ebe <nrk_ext_int_enable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 |= BM(PCINT0); return NRK_OK; }
    4e5c:	83 30       	cpi	r24, 0x03	; 3
    4e5e:	21 f4       	brne	.+8      	; 0x4e68 <nrk_ext_int_enable+0x24>
    4e60:	80 91 6b 00 	lds	r24, 0x006B
    4e64:	81 60       	ori	r24, 0x01	; 1
    4e66:	29 c0       	rjmp	.+82     	; 0x4eba <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 |= BM(PCINT1); return NRK_OK; }
    4e68:	84 30       	cpi	r24, 0x04	; 4
    4e6a:	21 f4       	brne	.+8      	; 0x4e74 <nrk_ext_int_enable+0x30>
    4e6c:	80 91 6b 00 	lds	r24, 0x006B
    4e70:	82 60       	ori	r24, 0x02	; 2
    4e72:	23 c0       	rjmp	.+70     	; 0x4eba <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 |= BM(PCINT2); return NRK_OK; }
    4e74:	85 30       	cpi	r24, 0x05	; 5
    4e76:	21 f4       	brne	.+8      	; 0x4e80 <nrk_ext_int_enable+0x3c>
    4e78:	80 91 6b 00 	lds	r24, 0x006B
    4e7c:	84 60       	ori	r24, 0x04	; 4
    4e7e:	1d c0       	rjmp	.+58     	; 0x4eba <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 |= BM(PCINT3); return NRK_OK; }
    4e80:	86 30       	cpi	r24, 0x06	; 6
    4e82:	21 f4       	brne	.+8      	; 0x4e8c <nrk_ext_int_enable+0x48>
    4e84:	80 91 6b 00 	lds	r24, 0x006B
    4e88:	88 60       	ori	r24, 0x08	; 8
    4e8a:	17 c0       	rjmp	.+46     	; 0x4eba <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 |= BM(PCINT4); return NRK_OK; }
    4e8c:	87 30       	cpi	r24, 0x07	; 7
    4e8e:	21 f4       	brne	.+8      	; 0x4e98 <nrk_ext_int_enable+0x54>
    4e90:	80 91 6b 00 	lds	r24, 0x006B
    4e94:	80 61       	ori	r24, 0x10	; 16
    4e96:	11 c0       	rjmp	.+34     	; 0x4eba <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 |= BM(PCINT5); return NRK_OK; }
    4e98:	88 30       	cpi	r24, 0x08	; 8
    4e9a:	21 f4       	brne	.+8      	; 0x4ea4 <nrk_ext_int_enable+0x60>
    4e9c:	80 91 6b 00 	lds	r24, 0x006B
    4ea0:	80 62       	ori	r24, 0x20	; 32
    4ea2:	0b c0       	rjmp	.+22     	; 0x4eba <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 |= BM(PCINT6); return NRK_OK; }
    4ea4:	89 30       	cpi	r24, 0x09	; 9
    4ea6:	21 f4       	brne	.+8      	; 0x4eb0 <nrk_ext_int_enable+0x6c>
    4ea8:	80 91 6b 00 	lds	r24, 0x006B
    4eac:	80 64       	ori	r24, 0x40	; 64
    4eae:	05 c0       	rjmp	.+10     	; 0x4eba <nrk_ext_int_enable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 |= BM(PCINT7); return NRK_OK; }
    4eb0:	8a 30       	cpi	r24, 0x0A	; 10
    4eb2:	39 f4       	brne	.+14     	; 0x4ec2 <nrk_ext_int_enable+0x7e>
    4eb4:	80 91 6b 00 	lds	r24, 0x006B
    4eb8:	80 68       	ori	r24, 0x80	; 128
    4eba:	80 93 6b 00 	sts	0x006B, r24
    4ebe:	81 e0       	ldi	r24, 0x01	; 1
    4ec0:	08 95       	ret
return NRK_ERROR;
    4ec2:	8f ef       	ldi	r24, 0xFF	; 255
}
    4ec4:	08 95       	ret

00004ec6 <nrk_ext_int_disable>:

int8_t  nrk_ext_int_disable(uint8_t pin )
{
if(pin==NRK_EXT_INT_0) { EIMSK &= ~BM(INT0); return NRK_OK; }
    4ec6:	81 11       	cpse	r24, r1
    4ec8:	02 c0       	rjmp	.+4      	; 0x4ece <nrk_ext_int_disable+0x8>
    4eca:	e8 98       	cbi	0x1d, 0	; 29
    4ecc:	39 c0       	rjmp	.+114    	; 0x4f40 <nrk_ext_int_disable+0x7a>
if(pin==NRK_EXT_INT_1) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4ece:	81 30       	cpi	r24, 0x01	; 1
    4ed0:	11 f4       	brne	.+4      	; 0x4ed6 <nrk_ext_int_disable+0x10>
    4ed2:	e9 98       	cbi	0x1d, 1	; 29
    4ed4:	08 95       	ret
if(pin==NRK_EXT_INT_2) { EIMSK &= ~BM(INT1); return NRK_OK; }
    4ed6:	82 30       	cpi	r24, 0x02	; 2
    4ed8:	11 f4       	brne	.+4      	; 0x4ede <nrk_ext_int_disable+0x18>
    4eda:	e9 98       	cbi	0x1d, 1	; 29
    4edc:	31 c0       	rjmp	.+98     	; 0x4f40 <nrk_ext_int_disable+0x7a>
if(pin==NRK_PC_INT_0 ) { PCMSK0 &= ~BM(PCINT0); return NRK_OK; }
    4ede:	83 30       	cpi	r24, 0x03	; 3
    4ee0:	21 f4       	brne	.+8      	; 0x4eea <nrk_ext_int_disable+0x24>
    4ee2:	80 91 6b 00 	lds	r24, 0x006B
    4ee6:	8e 7f       	andi	r24, 0xFE	; 254
    4ee8:	29 c0       	rjmp	.+82     	; 0x4f3c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_1 ) { PCMSK0 &= ~BM(PCINT1); return NRK_OK; }
    4eea:	84 30       	cpi	r24, 0x04	; 4
    4eec:	21 f4       	brne	.+8      	; 0x4ef6 <nrk_ext_int_disable+0x30>
    4eee:	80 91 6b 00 	lds	r24, 0x006B
    4ef2:	8d 7f       	andi	r24, 0xFD	; 253
    4ef4:	23 c0       	rjmp	.+70     	; 0x4f3c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_2 ) { PCMSK0 &= ~BM(PCINT2); return NRK_OK; }
    4ef6:	85 30       	cpi	r24, 0x05	; 5
    4ef8:	21 f4       	brne	.+8      	; 0x4f02 <nrk_ext_int_disable+0x3c>
    4efa:	80 91 6b 00 	lds	r24, 0x006B
    4efe:	8b 7f       	andi	r24, 0xFB	; 251
    4f00:	1d c0       	rjmp	.+58     	; 0x4f3c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_3 ) { PCMSK0 &= ~BM(PCINT3); return NRK_OK; }
    4f02:	86 30       	cpi	r24, 0x06	; 6
    4f04:	21 f4       	brne	.+8      	; 0x4f0e <nrk_ext_int_disable+0x48>
    4f06:	80 91 6b 00 	lds	r24, 0x006B
    4f0a:	87 7f       	andi	r24, 0xF7	; 247
    4f0c:	17 c0       	rjmp	.+46     	; 0x4f3c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_4 ) { PCMSK0 &= ~BM(PCINT4); return NRK_OK; }
    4f0e:	87 30       	cpi	r24, 0x07	; 7
    4f10:	21 f4       	brne	.+8      	; 0x4f1a <nrk_ext_int_disable+0x54>
    4f12:	80 91 6b 00 	lds	r24, 0x006B
    4f16:	8f 7e       	andi	r24, 0xEF	; 239
    4f18:	11 c0       	rjmp	.+34     	; 0x4f3c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_5 ) { PCMSK0 &= ~BM(PCINT5); return NRK_OK; }
    4f1a:	88 30       	cpi	r24, 0x08	; 8
    4f1c:	21 f4       	brne	.+8      	; 0x4f26 <nrk_ext_int_disable+0x60>
    4f1e:	80 91 6b 00 	lds	r24, 0x006B
    4f22:	8f 7d       	andi	r24, 0xDF	; 223
    4f24:	0b c0       	rjmp	.+22     	; 0x4f3c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_6 ) { PCMSK0 &= ~BM(PCINT6); return NRK_OK; }
    4f26:	89 30       	cpi	r24, 0x09	; 9
    4f28:	21 f4       	brne	.+8      	; 0x4f32 <nrk_ext_int_disable+0x6c>
    4f2a:	80 91 6b 00 	lds	r24, 0x006B
    4f2e:	8f 7b       	andi	r24, 0xBF	; 191
    4f30:	05 c0       	rjmp	.+10     	; 0x4f3c <nrk_ext_int_disable+0x76>
if(pin==NRK_PC_INT_7 ) { PCMSK0 &= ~BM(PCINT7); return NRK_OK; }
    4f32:	8a 30       	cpi	r24, 0x0A	; 10
    4f34:	39 f4       	brne	.+14     	; 0x4f44 <nrk_ext_int_disable+0x7e>
    4f36:	80 91 6b 00 	lds	r24, 0x006B
    4f3a:	8f 77       	andi	r24, 0x7F	; 127
    4f3c:	80 93 6b 00 	sts	0x006B, r24
    4f40:	81 e0       	ldi	r24, 0x01	; 1
    4f42:	08 95       	ret
return NRK_ERROR;
    4f44:	8f ef       	ldi	r24, 0xFF	; 255
}
    4f46:	08 95       	ret

00004f48 <nrk_ext_int_configure>:



int8_t  nrk_ext_int_configure(uint8_t pin, uint8_t mode, void *callback_func)
{
if(pin==NRK_EXT_INT_0)
    4f48:	81 11       	cpse	r24, r1
    4f4a:	26 c0       	rjmp	.+76     	; 0x4f98 <nrk_ext_int_configure+0x50>
	{
	ext_int0_callback=callback_func;
    4f4c:	50 93 fd 05 	sts	0x05FD, r21
    4f50:	40 93 fc 05 	sts	0x05FC, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC01) | BM(ISC00));
    4f54:	61 11       	cpse	r22, r1
    4f56:	04 c0       	rjmp	.+8      	; 0x4f60 <nrk_ext_int_configure+0x18>
    4f58:	80 91 69 00 	lds	r24, 0x0069
    4f5c:	8c 7f       	andi	r24, 0xFC	; 252
    4f5e:	3d c0       	rjmp	.+122    	; 0x4fda <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4f60:	61 30       	cpi	r22, 0x01	; 1
    4f62:	49 f4       	brne	.+18     	; 0x4f76 <nrk_ext_int_configure+0x2e>
		{ EICRA &= (~BM(ISC01)); EICRA |= BM(ISC00); }
    4f64:	80 91 69 00 	lds	r24, 0x0069
    4f68:	8d 7f       	andi	r24, 0xFD	; 253
    4f6a:	80 93 69 00 	sts	0x0069, r24
    4f6e:	80 91 69 00 	lds	r24, 0x0069
    4f72:	81 60       	ori	r24, 0x01	; 1
    4f74:	32 c0       	rjmp	.+100    	; 0x4fda <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4f76:	62 30       	cpi	r22, 0x02	; 2
    4f78:	49 f4       	brne	.+18     	; 0x4f8c <nrk_ext_int_configure+0x44>
		{ EICRA |= BM(ISC01); EICRA &= (~BM(ISC00)); }
    4f7a:	80 91 69 00 	lds	r24, 0x0069
    4f7e:	82 60       	ori	r24, 0x02	; 2
    4f80:	80 93 69 00 	sts	0x0069, r24
    4f84:	80 91 69 00 	lds	r24, 0x0069
    4f88:	8e 7f       	andi	r24, 0xFE	; 254
    4f8a:	27 c0       	rjmp	.+78     	; 0x4fda <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC01) | BM(ISC00);
    4f8c:	63 30       	cpi	r22, 0x03	; 3
    4f8e:	39 f5       	brne	.+78     	; 0x4fde <nrk_ext_int_configure+0x96>
    4f90:	80 91 69 00 	lds	r24, 0x0069
    4f94:	83 60       	ori	r24, 0x03	; 3
    4f96:	21 c0       	rjmp	.+66     	; 0x4fda <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_1)
    4f98:	81 30       	cpi	r24, 0x01	; 1
    4f9a:	49 f5       	brne	.+82     	; 0x4fee <nrk_ext_int_configure+0xa6>
	{
	ext_int1_callback=callback_func;
    4f9c:	50 93 fb 05 	sts	0x05FB, r21
    4fa0:	40 93 fa 05 	sts	0x05FA, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
    4fa4:	61 11       	cpse	r22, r1
    4fa6:	04 c0       	rjmp	.+8      	; 0x4fb0 <nrk_ext_int_configure+0x68>
    4fa8:	80 91 69 00 	lds	r24, 0x0069
    4fac:	83 7f       	andi	r24, 0xF3	; 243
    4fae:	15 c0       	rjmp	.+42     	; 0x4fda <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    4fb0:	61 30       	cpi	r22, 0x01	; 1
    4fb2:	49 f4       	brne	.+18     	; 0x4fc6 <nrk_ext_int_configure+0x7e>
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
    4fb4:	80 91 69 00 	lds	r24, 0x0069
    4fb8:	87 7f       	andi	r24, 0xF7	; 247
    4fba:	80 93 69 00 	sts	0x0069, r24
    4fbe:	80 91 69 00 	lds	r24, 0x0069
    4fc2:	84 60       	ori	r24, 0x04	; 4
    4fc4:	0a c0       	rjmp	.+20     	; 0x4fda <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    4fc6:	62 30       	cpi	r22, 0x02	; 2
    4fc8:	61 f4       	brne	.+24     	; 0x4fe2 <nrk_ext_int_configure+0x9a>
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
    4fca:	80 91 69 00 	lds	r24, 0x0069
    4fce:	88 60       	ori	r24, 0x08	; 8
    4fd0:	80 93 69 00 	sts	0x0069, r24
    4fd4:	80 91 69 00 	lds	r24, 0x0069
    4fd8:	8b 7f       	andi	r24, 0xFB	; 251
    4fda:	80 93 69 00 	sts	0x0069, r24
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
	return NRK_OK;
    4fde:	81 e0       	ldi	r24, 0x01	; 1
    4fe0:	08 95       	ret
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC11) | BM(ISC10));
	if(mode==NRK_LEVEL_TRIGGER) 
		{ EICRA &= (~BM(ISC11)); EICRA |= BM(ISC10); }
	if(mode==NRK_FALLING_EDGE) 
		{ EICRA |= BM(ISC11); EICRA &= (~BM(ISC10)); }
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC11) | BM(ISC10);
    4fe2:	63 30       	cpi	r22, 0x03	; 3
    4fe4:	e1 f7       	brne	.-8      	; 0x4fde <nrk_ext_int_configure+0x96>
    4fe6:	80 91 69 00 	lds	r24, 0x0069
    4fea:	8c 60       	ori	r24, 0x0C	; 12
    4fec:	f6 cf       	rjmp	.-20     	; 0x4fda <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}
if(pin==NRK_EXT_INT_2)
    4fee:	82 30       	cpi	r24, 0x02	; 2
    4ff0:	31 f5       	brne	.+76     	; 0x503e <nrk_ext_int_configure+0xf6>
	{
	ext_int2_callback=callback_func;
    4ff2:	50 93 ff 05 	sts	0x05FF, r21
    4ff6:	40 93 fe 05 	sts	0x05FE, r20
	if(mode==NRK_LOW_TRIGGER) EICRA &= ~(BM(ISC21) | BM(ISC20));
    4ffa:	61 11       	cpse	r22, r1
    4ffc:	04 c0       	rjmp	.+8      	; 0x5006 <nrk_ext_int_configure+0xbe>
    4ffe:	80 91 69 00 	lds	r24, 0x0069
    5002:	8f 7c       	andi	r24, 0xCF	; 207
    5004:	ea cf       	rjmp	.-44     	; 0x4fda <nrk_ext_int_configure+0x92>
	if(mode==NRK_LEVEL_TRIGGER) 
    5006:	61 30       	cpi	r22, 0x01	; 1
    5008:	49 f4       	brne	.+18     	; 0x501c <nrk_ext_int_configure+0xd4>
		{ EICRA &= (~BM(ISC21)); EICRA |= BM(ISC20); }
    500a:	80 91 69 00 	lds	r24, 0x0069
    500e:	8f 7d       	andi	r24, 0xDF	; 223
    5010:	80 93 69 00 	sts	0x0069, r24
    5014:	80 91 69 00 	lds	r24, 0x0069
    5018:	80 61       	ori	r24, 0x10	; 16
    501a:	df cf       	rjmp	.-66     	; 0x4fda <nrk_ext_int_configure+0x92>
	if(mode==NRK_FALLING_EDGE) 
    501c:	62 30       	cpi	r22, 0x02	; 2
    501e:	49 f4       	brne	.+18     	; 0x5032 <nrk_ext_int_configure+0xea>
		{ EICRA |= BM(ISC21); EICRA &= (~BM(ISC20)); }
    5020:	80 91 69 00 	lds	r24, 0x0069
    5024:	80 62       	ori	r24, 0x20	; 32
    5026:	80 93 69 00 	sts	0x0069, r24
    502a:	80 91 69 00 	lds	r24, 0x0069
    502e:	8f 7e       	andi	r24, 0xEF	; 239
    5030:	d4 cf       	rjmp	.-88     	; 0x4fda <nrk_ext_int_configure+0x92>
	if(mode==NRK_RISING_EDGE) EICRA |= BM(ISC21) | BM(ISC20);
    5032:	63 30       	cpi	r22, 0x03	; 3
    5034:	a1 f6       	brne	.-88     	; 0x4fde <nrk_ext_int_configure+0x96>
    5036:	80 91 69 00 	lds	r24, 0x0069
    503a:	80 63       	ori	r24, 0x30	; 48
    503c:	ce cf       	rjmp	.-100    	; 0x4fda <nrk_ext_int_configure+0x92>
	return NRK_OK;
	}



if(pin==NRK_PC_INT_0 || pin==NRK_PC_INT_1 || pin==NRK_PC_INT_2 || pin==NRK_PC_INT_3 || pin==NRK_PC_INT_4 || pin==NRK_PC_INT_5 || pin==NRK_PC_INT_6 || pin==NRK_PC_INT_7){
    503e:	83 50       	subi	r24, 0x03	; 3
    5040:	88 30       	cpi	r24, 0x08	; 8
    5042:	50 f4       	brcc	.+20     	; 0x5058 <nrk_ext_int_configure+0x110>
	PCICR |= BM(PCIE0);	
    5044:	80 91 68 00 	lds	r24, 0x0068
    5048:	81 60       	ori	r24, 0x01	; 1
    504a:	80 93 68 00 	sts	0x0068, r24
	pc_int0_callback=callback_func;
    504e:	50 93 01 06 	sts	0x0601, r21
    5052:	40 93 00 06 	sts	0x0600, r20
    5056:	c3 cf       	rjmp	.-122    	; 0x4fde <nrk_ext_int_configure+0x96>
	return NRK_OK;
	}
return NRK_ERROR;
    5058:	8f ef       	ldi	r24, 0xFF	; 255
}
    505a:	08 95       	ret

0000505c <__vector_9>:

#ifndef NRK_DISABLE_EXT_INT
SIGNAL(PCINT0_vect) {
    505c:	1f 92       	push	r1
    505e:	0f 92       	push	r0
    5060:	0f b6       	in	r0, 0x3f	; 63
    5062:	0f 92       	push	r0
    5064:	11 24       	eor	r1, r1
    5066:	0b b6       	in	r0, 0x3b	; 59
    5068:	0f 92       	push	r0
    506a:	2f 93       	push	r18
    506c:	3f 93       	push	r19
    506e:	4f 93       	push	r20
    5070:	5f 93       	push	r21
    5072:	6f 93       	push	r22
    5074:	7f 93       	push	r23
    5076:	8f 93       	push	r24
    5078:	9f 93       	push	r25
    507a:	af 93       	push	r26
    507c:	bf 93       	push	r27
    507e:	ef 93       	push	r30
    5080:	ff 93       	push	r31
	if(pc_int0_callback!=NULL) pc_int0_callback();
    5082:	e0 91 00 06 	lds	r30, 0x0600
    5086:	f0 91 01 06 	lds	r31, 0x0601
    508a:	30 97       	sbiw	r30, 0x00	; 0
    508c:	11 f0       	breq	.+4      	; 0x5092 <__vector_9+0x36>
    508e:	09 95       	icall
    5090:	04 c0       	rjmp	.+8      	; 0x509a <__vector_9+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    5092:	60 e0       	ldi	r22, 0x00	; 0
    5094:	8a e0       	ldi	r24, 0x0A	; 10
    5096:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <nrk_kernel_error_add>
	return;  	
}
    509a:	ff 91       	pop	r31
    509c:	ef 91       	pop	r30
    509e:	bf 91       	pop	r27
    50a0:	af 91       	pop	r26
    50a2:	9f 91       	pop	r25
    50a4:	8f 91       	pop	r24
    50a6:	7f 91       	pop	r23
    50a8:	6f 91       	pop	r22
    50aa:	5f 91       	pop	r21
    50ac:	4f 91       	pop	r20
    50ae:	3f 91       	pop	r19
    50b0:	2f 91       	pop	r18
    50b2:	0f 90       	pop	r0
    50b4:	0b be       	out	0x3b, r0	; 59
    50b6:	0f 90       	pop	r0
    50b8:	0f be       	out	0x3f, r0	; 63
    50ba:	0f 90       	pop	r0
    50bc:	1f 90       	pop	r1
    50be:	18 95       	reti

000050c0 <__vector_1>:


SIGNAL(INT0_vect) {
    50c0:	1f 92       	push	r1
    50c2:	0f 92       	push	r0
    50c4:	0f b6       	in	r0, 0x3f	; 63
    50c6:	0f 92       	push	r0
    50c8:	11 24       	eor	r1, r1
    50ca:	0b b6       	in	r0, 0x3b	; 59
    50cc:	0f 92       	push	r0
    50ce:	2f 93       	push	r18
    50d0:	3f 93       	push	r19
    50d2:	4f 93       	push	r20
    50d4:	5f 93       	push	r21
    50d6:	6f 93       	push	r22
    50d8:	7f 93       	push	r23
    50da:	8f 93       	push	r24
    50dc:	9f 93       	push	r25
    50de:	af 93       	push	r26
    50e0:	bf 93       	push	r27
    50e2:	ef 93       	push	r30
    50e4:	ff 93       	push	r31
	if(ext_int0_callback!=NULL) ext_int0_callback();
    50e6:	e0 91 fc 05 	lds	r30, 0x05FC
    50ea:	f0 91 fd 05 	lds	r31, 0x05FD
    50ee:	30 97       	sbiw	r30, 0x00	; 0
    50f0:	11 f0       	breq	.+4      	; 0x50f6 <__vector_1+0x36>
    50f2:	09 95       	icall
    50f4:	04 c0       	rjmp	.+8      	; 0x50fe <__vector_1+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    50f6:	60 e0       	ldi	r22, 0x00	; 0
    50f8:	8a e0       	ldi	r24, 0x0A	; 10
    50fa:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <nrk_kernel_error_add>
	return;  	
}
    50fe:	ff 91       	pop	r31
    5100:	ef 91       	pop	r30
    5102:	bf 91       	pop	r27
    5104:	af 91       	pop	r26
    5106:	9f 91       	pop	r25
    5108:	8f 91       	pop	r24
    510a:	7f 91       	pop	r23
    510c:	6f 91       	pop	r22
    510e:	5f 91       	pop	r21
    5110:	4f 91       	pop	r20
    5112:	3f 91       	pop	r19
    5114:	2f 91       	pop	r18
    5116:	0f 90       	pop	r0
    5118:	0b be       	out	0x3b, r0	; 59
    511a:	0f 90       	pop	r0
    511c:	0f be       	out	0x3f, r0	; 63
    511e:	0f 90       	pop	r0
    5120:	1f 90       	pop	r1
    5122:	18 95       	reti

00005124 <__vector_2>:

SIGNAL(INT1_vect) {
    5124:	1f 92       	push	r1
    5126:	0f 92       	push	r0
    5128:	0f b6       	in	r0, 0x3f	; 63
    512a:	0f 92       	push	r0
    512c:	11 24       	eor	r1, r1
    512e:	0b b6       	in	r0, 0x3b	; 59
    5130:	0f 92       	push	r0
    5132:	2f 93       	push	r18
    5134:	3f 93       	push	r19
    5136:	4f 93       	push	r20
    5138:	5f 93       	push	r21
    513a:	6f 93       	push	r22
    513c:	7f 93       	push	r23
    513e:	8f 93       	push	r24
    5140:	9f 93       	push	r25
    5142:	af 93       	push	r26
    5144:	bf 93       	push	r27
    5146:	ef 93       	push	r30
    5148:	ff 93       	push	r31
	if(ext_int1_callback!=NULL) ext_int1_callback();
    514a:	e0 91 fa 05 	lds	r30, 0x05FA
    514e:	f0 91 fb 05 	lds	r31, 0x05FB
    5152:	30 97       	sbiw	r30, 0x00	; 0
    5154:	11 f0       	breq	.+4      	; 0x515a <__vector_2+0x36>
    5156:	09 95       	icall
    5158:	04 c0       	rjmp	.+8      	; 0x5162 <__vector_2+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    515a:	60 e0       	ldi	r22, 0x00	; 0
    515c:	8a e0       	ldi	r24, 0x0A	; 10
    515e:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <nrk_kernel_error_add>
	return;  	
}
    5162:	ff 91       	pop	r31
    5164:	ef 91       	pop	r30
    5166:	bf 91       	pop	r27
    5168:	af 91       	pop	r26
    516a:	9f 91       	pop	r25
    516c:	8f 91       	pop	r24
    516e:	7f 91       	pop	r23
    5170:	6f 91       	pop	r22
    5172:	5f 91       	pop	r21
    5174:	4f 91       	pop	r20
    5176:	3f 91       	pop	r19
    5178:	2f 91       	pop	r18
    517a:	0f 90       	pop	r0
    517c:	0b be       	out	0x3b, r0	; 59
    517e:	0f 90       	pop	r0
    5180:	0f be       	out	0x3f, r0	; 63
    5182:	0f 90       	pop	r0
    5184:	1f 90       	pop	r1
    5186:	18 95       	reti

00005188 <__vector_3>:

SIGNAL(INT2_vect) {
    5188:	1f 92       	push	r1
    518a:	0f 92       	push	r0
    518c:	0f b6       	in	r0, 0x3f	; 63
    518e:	0f 92       	push	r0
    5190:	11 24       	eor	r1, r1
    5192:	0b b6       	in	r0, 0x3b	; 59
    5194:	0f 92       	push	r0
    5196:	2f 93       	push	r18
    5198:	3f 93       	push	r19
    519a:	4f 93       	push	r20
    519c:	5f 93       	push	r21
    519e:	6f 93       	push	r22
    51a0:	7f 93       	push	r23
    51a2:	8f 93       	push	r24
    51a4:	9f 93       	push	r25
    51a6:	af 93       	push	r26
    51a8:	bf 93       	push	r27
    51aa:	ef 93       	push	r30
    51ac:	ff 93       	push	r31
	if(ext_int2_callback!=NULL) ext_int2_callback();
    51ae:	e0 91 fe 05 	lds	r30, 0x05FE
    51b2:	f0 91 ff 05 	lds	r31, 0x05FF
    51b6:	30 97       	sbiw	r30, 0x00	; 0
    51b8:	11 f0       	breq	.+4      	; 0x51be <__vector_3+0x36>
    51ba:	09 95       	icall
    51bc:	04 c0       	rjmp	.+8      	; 0x51c6 <__vector_3+0x3e>
	else
	nrk_kernel_error_add(NRK_SEG_FAULT,0);
    51be:	60 e0       	ldi	r22, 0x00	; 0
    51c0:	8a e0       	ldi	r24, 0x0A	; 10
    51c2:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <nrk_kernel_error_add>
	return;  	
}
    51c6:	ff 91       	pop	r31
    51c8:	ef 91       	pop	r30
    51ca:	bf 91       	pop	r27
    51cc:	af 91       	pop	r26
    51ce:	9f 91       	pop	r25
    51d0:	8f 91       	pop	r24
    51d2:	7f 91       	pop	r23
    51d4:	6f 91       	pop	r22
    51d6:	5f 91       	pop	r21
    51d8:	4f 91       	pop	r20
    51da:	3f 91       	pop	r19
    51dc:	2f 91       	pop	r18
    51de:	0f 90       	pop	r0
    51e0:	0b be       	out	0x3b, r0	; 59
    51e2:	0f 90       	pop	r0
    51e4:	0f be       	out	0x3f, r0	; 63
    51e6:	0f 90       	pop	r0
    51e8:	1f 90       	pop	r1
    51ea:	18 95       	reti

000051ec <nrk_watchdog_disable>:
#include <nrk.h>
#include <avr/wdt.h>

void nrk_watchdog_disable()
{
nrk_int_disable();
    51ec:	0e 94 47 13 	call	0x268e	; 0x268e <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    51f0:	a8 95       	wdr

void nrk_watchdog_disable()
{
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    51f2:	84 b7       	in	r24, 0x34	; 52
    51f4:	87 7f       	andi	r24, 0xF7	; 247
    51f6:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    51f8:	e0 e6       	ldi	r30, 0x60	; 96
    51fa:	f0 e0       	ldi	r31, 0x00	; 0
    51fc:	80 81       	ld	r24, Z
    51fe:	88 61       	ori	r24, 0x18	; 24
    5200:	80 83       	st	Z, r24
WDTCSR = 0;
    5202:	10 82       	st	Z, r1
nrk_int_enable();
    5204:	0c 94 49 13 	jmp	0x2692	; 0x2692 <nrk_int_enable>

00005208 <nrk_watchdog_enable>:

void nrk_watchdog_enable()
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
    5208:	0e 94 47 13 	call	0x268e	; 0x268e <nrk_int_disable>
return NRK_ERROR;
}

inline void nrk_watchdog_reset()
{
wdt_reset();
    520c:	a8 95       	wdr
{
// Enable watchdog with 1024K cycle timeout
// No Interrupt Trigger
nrk_int_disable();
nrk_watchdog_reset();
MCUSR &= ~(1<<WDRF);
    520e:	84 b7       	in	r24, 0x34	; 52
    5210:	87 7f       	andi	r24, 0xF7	; 247
    5212:	84 bf       	out	0x34, r24	; 52
WDTCSR |= (1<<WDCE) | (1<<WDE);
    5214:	e0 e6       	ldi	r30, 0x60	; 96
    5216:	f0 e0       	ldi	r31, 0x00	; 0
    5218:	80 81       	ld	r24, Z
    521a:	88 61       	ori	r24, 0x18	; 24
    521c:	80 83       	st	Z, r24
WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
    521e:	8d e0       	ldi	r24, 0x0D	; 13
    5220:	80 83       	st	Z, r24
nrk_int_enable();
    5222:	0c 94 49 13 	jmp	0x2692	; 0x2692 <nrk_int_enable>

00005226 <nrk_watchdog_check>:
}

int8_t nrk_watchdog_check()
{

if((MCUSR & (1<<WDRF))==0) return NRK_OK;
    5226:	04 b6       	in	r0, 0x34	; 52
    5228:	03 fc       	sbrc	r0, 3
    522a:	02 c0       	rjmp	.+4      	; 0x5230 <nrk_watchdog_check+0xa>
    522c:	81 e0       	ldi	r24, 0x01	; 1
    522e:	08 95       	ret
return NRK_ERROR;
    5230:	8f ef       	ldi	r24, 0xFF	; 255
}
    5232:	08 95       	ret

00005234 <nrk_watchdog_reset>:

inline void nrk_watchdog_reset()
{
wdt_reset();
    5234:	a8 95       	wdr
    5236:	08 95       	ret

00005238 <nrk_battery_save>:
*********************************************************************************************************
*/


void nrk_battery_save()
{
    5238:	08 95       	ret

0000523a <nrk_sleep>:

void nrk_sleep()
{
    //PRR0 = 0xff;
    //PRR1 = 0xff;
    set_sleep_mode (SLEEP_MODE_PWR_SAVE);
    523a:	83 b7       	in	r24, 0x33	; 51
    523c:	81 7f       	andi	r24, 0xF1	; 241
    523e:	86 60       	ori	r24, 0x06	; 6
    5240:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5242:	83 b7       	in	r24, 0x33	; 51
    5244:	81 60       	ori	r24, 0x01	; 1
    5246:	83 bf       	out	0x33, r24	; 51
    5248:	88 95       	sleep
    524a:	83 b7       	in	r24, 0x33	; 51
    524c:	8e 7f       	andi	r24, 0xFE	; 254
    524e:	83 bf       	out	0x33, r24	; 51
    5250:	08 95       	ret

00005252 <nrk_idle>:
}

void nrk_idle()
{

    set_sleep_mode( SLEEP_MODE_IDLE);
    5252:	83 b7       	in	r24, 0x33	; 51
    5254:	81 7f       	andi	r24, 0xF1	; 241
    5256:	83 bf       	out	0x33, r24	; 51
    sleep_mode ();
    5258:	83 b7       	in	r24, 0x33	; 51
    525a:	81 60       	ori	r24, 0x01	; 1
    525c:	83 bf       	out	0x33, r24	; 51
    525e:	88 95       	sleep
    5260:	83 b7       	in	r24, 0x33	; 51
    5262:	8e 7f       	andi	r24, 0xFE	; 254
    5264:	83 bf       	out	0x33, r24	; 51
    5266:	08 95       	ret

00005268 <nrk_task_set_entry_function>:

}

void nrk_task_set_entry_function( nrk_task_type *task, void *func )
{
task->task=func;
    5268:	fc 01       	movw	r30, r24
    526a:	76 83       	std	Z+6, r23	; 0x06
    526c:	65 83       	std	Z+5, r22	; 0x05
    526e:	08 95       	ret

00005270 <nrk_task_set_stk>:
}

void nrk_task_set_stk( nrk_task_type *task, NRK_STK stk_base[], uint16_t stk_size )
{
    5270:	ef 92       	push	r14
    5272:	ff 92       	push	r15
    5274:	0f 93       	push	r16
    5276:	1f 93       	push	r17
    5278:	cf 93       	push	r28
    527a:	df 93       	push	r29
    527c:	ec 01       	movw	r28, r24
    527e:	8b 01       	movw	r16, r22
    5280:	7a 01       	movw	r14, r20

if(stk_size<32) nrk_error_add(NRK_STACK_TOO_SMALL);
    5282:	40 32       	cpi	r20, 0x20	; 32
    5284:	51 05       	cpc	r21, r1
    5286:	18 f4       	brcc	.+6      	; 0x528e <nrk_task_set_stk+0x1e>
    5288:	81 e1       	ldi	r24, 0x11	; 17
    528a:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <nrk_error_add>
task->Ptos = (void *) &stk_base[stk_size-1];
    528e:	a7 01       	movw	r20, r14
    5290:	41 50       	subi	r20, 0x01	; 1
    5292:	51 09       	sbc	r21, r1
    5294:	40 0f       	add	r20, r16
    5296:	51 1f       	adc	r21, r17
    5298:	5a 83       	std	Y+2, r21	; 0x02
    529a:	49 83       	std	Y+1, r20	; 0x01
task->Pbos = (void *) &stk_base[0];
    529c:	1c 83       	std	Y+4, r17	; 0x04
    529e:	0b 83       	std	Y+3, r16	; 0x03

}
    52a0:	df 91       	pop	r29
    52a2:	cf 91       	pop	r28
    52a4:	1f 91       	pop	r17
    52a6:	0f 91       	pop	r16
    52a8:	ff 90       	pop	r15
    52aa:	ef 90       	pop	r14
    52ac:	08 95       	ret

000052ae <nrk_task_stk_init>:
    uint16_t *stk ;  // 2 bytes
    uint8_t *stkc; // 1 byte

    stk    = (unsigned int *)pbos;          /* Load stack pointer */ 
    stkc = (unsigned char*)stk;
    *stkc = STK_CANARY_VAL;  // Flag for Stack Overflow    
    52ae:	25 e5       	ldi	r18, 0x55	; 85
    52b0:	fa 01       	movw	r30, r20
    52b2:	20 83       	st	Z, r18
    *(--stk) = 0x4344;   // C D    	
    *(--stk) = 0x4142;   // A B
*/
    --stk;
    stkc = (unsigned char*)stk;	
    *stkc++ = (unsigned char)((unsigned int)(task)/ 256);
    52b4:	fb 01       	movw	r30, r22
    52b6:	32 97       	sbiw	r30, 0x02	; 2
    52b8:	90 83       	st	Z, r25
    *stkc = (unsigned char)((unsigned int)(task)%256);
    52ba:	fb 01       	movw	r30, r22
    52bc:	31 97       	sbiw	r30, 0x01	; 1
    52be:	80 83       	st	Z, r24
	
    *(--stk) = 0;
    52c0:	fb 01       	movw	r30, r22
    52c2:	34 97       	sbiw	r30, 0x04	; 4
    52c4:	11 82       	std	Z+1, r1	; 0x01
    52c6:	10 82       	st	Z, r1
    *(--stk) = 0;       
    52c8:	fb 01       	movw	r30, r22
    52ca:	36 97       	sbiw	r30, 0x06	; 6
    52cc:	11 82       	std	Z+1, r1	; 0x01
    52ce:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    52d0:	fb 01       	movw	r30, r22
    52d2:	38 97       	sbiw	r30, 0x08	; 8
    52d4:	11 82       	std	Z+1, r1	; 0x01
    52d6:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    52d8:	fb 01       	movw	r30, r22
    52da:	3a 97       	sbiw	r30, 0x0a	; 10
    52dc:	11 82       	std	Z+1, r1	; 0x01
    52de:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    52e0:	fb 01       	movw	r30, r22
    52e2:	3c 97       	sbiw	r30, 0x0c	; 12
    52e4:	11 82       	std	Z+1, r1	; 0x01
    52e6:	10 82       	st	Z, r1
    *(--stk) = 0;                         
    52e8:	fb 01       	movw	r30, r22
    52ea:	3e 97       	sbiw	r30, 0x0e	; 14
    52ec:	11 82       	std	Z+1, r1	; 0x01
    52ee:	10 82       	st	Z, r1
    *(--stk) = 0;                        
    52f0:	fb 01       	movw	r30, r22
    52f2:	70 97       	sbiw	r30, 0x10	; 16
    52f4:	11 82       	std	Z+1, r1	; 0x01
    52f6:	10 82       	st	Z, r1
    *(--stk) = 0; 
    52f8:	fb 01       	movw	r30, r22
    52fa:	72 97       	sbiw	r30, 0x12	; 18
    52fc:	11 82       	std	Z+1, r1	; 0x01
    52fe:	10 82       	st	Z, r1

    *(--stk) = 0; 
    5300:	fb 01       	movw	r30, r22
    5302:	74 97       	sbiw	r30, 0x14	; 20
    5304:	11 82       	std	Z+1, r1	; 0x01
    5306:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5308:	fb 01       	movw	r30, r22
    530a:	76 97       	sbiw	r30, 0x16	; 22
    530c:	11 82       	std	Z+1, r1	; 0x01
    530e:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5310:	fb 01       	movw	r30, r22
    5312:	78 97       	sbiw	r30, 0x18	; 24
    5314:	11 82       	std	Z+1, r1	; 0x01
    5316:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5318:	fb 01       	movw	r30, r22
    531a:	7a 97       	sbiw	r30, 0x1a	; 26
    531c:	11 82       	std	Z+1, r1	; 0x01
    531e:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5320:	fb 01       	movw	r30, r22
    5322:	7c 97       	sbiw	r30, 0x1c	; 28
    5324:	11 82       	std	Z+1, r1	; 0x01
    5326:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5328:	fb 01       	movw	r30, r22
    532a:	7e 97       	sbiw	r30, 0x1e	; 30
    532c:	11 82       	std	Z+1, r1	; 0x01
    532e:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5330:	fb 01       	movw	r30, r22
    5332:	b0 97       	sbiw	r30, 0x20	; 32
    5334:	11 82       	std	Z+1, r1	; 0x01
    5336:	10 82       	st	Z, r1
    *(--stk) = 0; 
    5338:	fb 01       	movw	r30, r22
    533a:	b2 97       	sbiw	r30, 0x22	; 34
    533c:	11 82       	std	Z+1, r1	; 0x01
    533e:	10 82       	st	Z, r1
    *(--stk) = 0;
    5340:	cb 01       	movw	r24, r22
    5342:	84 97       	sbiw	r24, 0x24	; 36
    5344:	fc 01       	movw	r30, r24
    5346:	11 82       	std	Z+1, r1	; 0x01
    5348:	10 82       	st	Z, r1


    return ((void *)stk);
}
    534a:	08 95       	ret

0000534c <nrk_stack_pointer_init>:
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
        nrk_kernel_stk[0]=STK_CANARY_VAL;
        nrk_kernel_stk_ptr = &nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
    #else
        stkc = (unsigned char *)(NRK_KERNEL_STK_TOP-NRK_KERNEL_STACKSIZE);
        *stkc = STK_CANARY_VAL;
    534c:	85 e5       	ldi	r24, 0x55	; 85
    534e:	80 93 7e 41 	sts	0x417E, r24
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
        nrk_kernel_stk_ptr = (unsigned char *)NRK_KERNEL_STK_TOP;
    5352:	ee ef       	ldi	r30, 0xFE	; 254
    5354:	f1 e4       	ldi	r31, 0x41	; 65
    5356:	f0 93 4e 04 	sts	0x044E, r31
    535a:	e0 93 4d 04 	sts	0x044D, r30
    #endif
    *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    535e:	85 ef       	ldi	r24, 0xF5	; 245
    5360:	94 e1       	ldi	r25, 0x14	; 20
    5362:	90 83       	st	Z, r25
    *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5364:	80 93 ff 41 	sts	0x41FF, r24
    5368:	08 95       	ret

0000536a <nrk_stack_pointer_restore>:
#ifdef KERNEL_STK_ARRAY
        stkc = (uint16_t*)&nrk_kernel_stk[NRK_KERNEL_STACKSIZE-1];
#else
        stkc = (unsigned char *)NRK_KERNEL_STK_TOP;
#endif
        *stkc++ = (uint16_t)((uint16_t)_nrk_timer_tick>>8);
    536a:	85 ef       	ldi	r24, 0xF5	; 245
    536c:	94 e1       	ldi	r25, 0x14	; 20
    536e:	90 93 fe 41 	sts	0x41FE, r25
        *stkc = (uint16_t)((uint16_t)_nrk_timer_tick&0xFF);
    5372:	80 93 ff 41 	sts	0x41FF, r24
    5376:	08 95       	ret

00005378 <nrk_target_start>:

/* start the target running */
void nrk_target_start(void)
{

  _nrk_setup_timer();
    5378:	0e 94 d7 25 	call	0x4bae	; 0x4bae <_nrk_setup_timer>
  nrk_int_enable();  
    537c:	0c 94 49 13 	jmp	0x2692	; 0x2692 <nrk_int_enable>

00005380 <nrk_start_high_ready_task>:
    5380:	a0 91 d2 05 	lds	r26, 0x05D2
    5384:	b0 91 d3 05 	lds	r27, 0x05D3
    5388:	cd 91       	ld	r28, X+
    538a:	cd bf       	out	0x3d, r28	; 61
    538c:	dd 91       	ld	r29, X+
    538e:	de bf       	out	0x3e, r29	; 62
    5390:	ff 91       	pop	r31
    5392:	ef 91       	pop	r30
    5394:	df 91       	pop	r29
    5396:	cf 91       	pop	r28
    5398:	bf 91       	pop	r27
    539a:	af 91       	pop	r26
    539c:	9f 91       	pop	r25
    539e:	8f 91       	pop	r24
    53a0:	7f 91       	pop	r23
    53a2:	6f 91       	pop	r22
    53a4:	5f 91       	pop	r21
    53a6:	4f 91       	pop	r20
    53a8:	3f 91       	pop	r19
    53aa:	2f 91       	pop	r18
    53ac:	1f 91       	pop	r17
    53ae:	0f 91       	pop	r16
    53b0:	ff 90       	pop	r15
    53b2:	ef 90       	pop	r14
    53b4:	df 90       	pop	r13
    53b6:	cf 90       	pop	r12
    53b8:	bf 90       	pop	r11
    53ba:	af 90       	pop	r10
    53bc:	9f 90       	pop	r9
    53be:	8f 90       	pop	r8
    53c0:	7f 90       	pop	r7
    53c2:	6f 90       	pop	r6
    53c4:	5f 90       	pop	r5
    53c6:	4f 90       	pop	r4
    53c8:	3f 90       	pop	r3
    53ca:	2f 90       	pop	r2
    53cc:	1f 90       	pop	r1
    53ce:	0f 90       	pop	r0
    53d0:	0f be       	out	0x3f, r0	; 63
    53d2:	0f 90       	pop	r0
    53d4:	18 95       	reti

000053d6 <main>:
    53d6:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <nrk_setup_ports>
    53da:	80 e1       	ldi	r24, 0x10	; 16
    53dc:	90 e0       	ldi	r25, 0x00	; 0
    53de:	0e 94 82 12 	call	0x2504	; 0x2504 <nrk_setup_uart>
    53e2:	83 eb       	ldi	r24, 0xB3	; 179
    53e4:	92 e0       	ldi	r25, 0x02	; 2
    53e6:	0e 94 df 2c 	call	0x59be	; 0x59be <puts>
    53ea:	0e 94 4e 13 	call	0x269c	; 0x269c <nrk_init>
    53ee:	20 e0       	ldi	r18, 0x00	; 0
    53f0:	30 e0       	ldi	r19, 0x00	; 0
    53f2:	a9 01       	movw	r20, r18
    53f4:	60 e0       	ldi	r22, 0x00	; 0
    53f6:	70 e0       	ldi	r23, 0x00	; 0
    53f8:	cb 01       	movw	r24, r22
    53fa:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <nrk_time_set>
    53fe:	0e 94 93 03 	call	0x726	; 0x726 <nrk_register_drivers>
    5402:	0e 94 40 03 	call	0x680	; 0x680 <nrk_create_taskset>
    5406:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <nrk_start>
    540a:	80 e0       	ldi	r24, 0x00	; 0
    540c:	90 e0       	ldi	r25, 0x00	; 0
    540e:	08 95       	ret

00005410 <vfprintf>:
    5410:	6f 92       	push	r6
    5412:	7f 92       	push	r7
    5414:	9f 92       	push	r9
    5416:	af 92       	push	r10
    5418:	bf 92       	push	r11
    541a:	cf 92       	push	r12
    541c:	df 92       	push	r13
    541e:	ef 92       	push	r14
    5420:	ff 92       	push	r15
    5422:	0f 93       	push	r16
    5424:	1f 93       	push	r17
    5426:	cf 93       	push	r28
    5428:	df 93       	push	r29
    542a:	cd b7       	in	r28, 0x3d	; 61
    542c:	de b7       	in	r29, 0x3e	; 62
    542e:	2c 97       	sbiw	r28, 0x0c	; 12
    5430:	0f b6       	in	r0, 0x3f	; 63
    5432:	f8 94       	cli
    5434:	de bf       	out	0x3e, r29	; 62
    5436:	0f be       	out	0x3f, r0	; 63
    5438:	cd bf       	out	0x3d, r28	; 61
    543a:	8c 01       	movw	r16, r24
    543c:	7b 01       	movw	r14, r22
    543e:	3a 01       	movw	r6, r20
    5440:	fc 01       	movw	r30, r24
    5442:	17 82       	std	Z+7, r1	; 0x07
    5444:	16 82       	std	Z+6, r1	; 0x06
    5446:	83 81       	ldd	r24, Z+3	; 0x03
    5448:	81 ff       	sbrs	r24, 1
    544a:	19 c1       	rjmp	.+562    	; 0x567e <vfprintf+0x26e>
    544c:	ce 01       	movw	r24, r28
    544e:	01 96       	adiw	r24, 0x01	; 1
    5450:	5c 01       	movw	r10, r24
    5452:	f8 01       	movw	r30, r16
    5454:	d3 80       	ldd	r13, Z+3	; 0x03
    5456:	f7 01       	movw	r30, r14
    5458:	d3 fc       	sbrc	r13, 3
    545a:	25 91       	lpm	r18, Z+
    545c:	d3 fe       	sbrs	r13, 3
    545e:	21 91       	ld	r18, Z+
    5460:	7f 01       	movw	r14, r30
    5462:	22 23       	and	r18, r18
    5464:	09 f4       	brne	.+2      	; 0x5468 <vfprintf+0x58>
    5466:	07 c1       	rjmp	.+526    	; 0x5676 <vfprintf+0x266>
    5468:	25 32       	cpi	r18, 0x25	; 37
    546a:	49 f4       	brne	.+18     	; 0x547e <vfprintf+0x6e>
    546c:	d3 fc       	sbrc	r13, 3
    546e:	25 91       	lpm	r18, Z+
    5470:	d3 fe       	sbrs	r13, 3
    5472:	21 91       	ld	r18, Z+
    5474:	7f 01       	movw	r14, r30
    5476:	25 32       	cpi	r18, 0x25	; 37
    5478:	11 f0       	breq	.+4      	; 0x547e <vfprintf+0x6e>
    547a:	91 2c       	mov	r9, r1
    547c:	1b c0       	rjmp	.+54     	; 0x54b4 <vfprintf+0xa4>
    547e:	b8 01       	movw	r22, r16
    5480:	82 2f       	mov	r24, r18
    5482:	90 e0       	ldi	r25, 0x00	; 0
    5484:	0e 94 95 2c 	call	0x592a	; 0x592a <fputc>
    5488:	63 01       	movw	r12, r6
    548a:	36 01       	movw	r6, r12
    548c:	e2 cf       	rjmp	.-60     	; 0x5452 <vfprintf+0x42>
    548e:	22 23       	and	r18, r18
    5490:	09 f4       	brne	.+2      	; 0x5494 <vfprintf+0x84>
    5492:	f1 c0       	rjmp	.+482    	; 0x5676 <vfprintf+0x266>
    5494:	62 2f       	mov	r22, r18
    5496:	70 e0       	ldi	r23, 0x00	; 0
    5498:	80 e4       	ldi	r24, 0x40	; 64
    549a:	94 e0       	ldi	r25, 0x04	; 4
    549c:	2c 87       	std	Y+12, r18	; 0x0c
    549e:	0e 94 36 2c 	call	0x586c	; 0x586c <strchr_P>
    54a2:	2c 85       	ldd	r18, Y+12	; 0x0c
    54a4:	89 2b       	or	r24, r25
    54a6:	49 f0       	breq	.+18     	; 0x54ba <vfprintf+0xaa>
    54a8:	f7 01       	movw	r30, r14
    54aa:	d3 fc       	sbrc	r13, 3
    54ac:	25 91       	lpm	r18, Z+
    54ae:	d3 fe       	sbrs	r13, 3
    54b0:	21 91       	ld	r18, Z+
    54b2:	7f 01       	movw	r14, r30
    54b4:	97 fe       	sbrs	r9, 7
    54b6:	eb cf       	rjmp	.-42     	; 0x548e <vfprintf+0x7e>
    54b8:	0c c0       	rjmp	.+24     	; 0x54d2 <vfprintf+0xc2>
    54ba:	23 32       	cpi	r18, 0x23	; 35
    54bc:	21 f4       	brne	.+8      	; 0x54c6 <vfprintf+0xb6>
    54be:	f9 2d       	mov	r31, r9
    54c0:	f0 61       	ori	r31, 0x10	; 16
    54c2:	9f 2e       	mov	r9, r31
    54c4:	f1 cf       	rjmp	.-30     	; 0x54a8 <vfprintf+0x98>
    54c6:	2c 36       	cpi	r18, 0x6C	; 108
    54c8:	39 f4       	brne	.+14     	; 0x54d8 <vfprintf+0xc8>
    54ca:	29 2d       	mov	r18, r9
    54cc:	20 68       	ori	r18, 0x80	; 128
    54ce:	92 2e       	mov	r9, r18
    54d0:	eb cf       	rjmp	.-42     	; 0x54a8 <vfprintf+0x98>
    54d2:	22 23       	and	r18, r18
    54d4:	09 f4       	brne	.+2      	; 0x54d8 <vfprintf+0xc8>
    54d6:	cf c0       	rjmp	.+414    	; 0x5676 <vfprintf+0x266>
    54d8:	62 2f       	mov	r22, r18
    54da:	70 e0       	ldi	r23, 0x00	; 0
    54dc:	89 e3       	ldi	r24, 0x39	; 57
    54de:	94 e0       	ldi	r25, 0x04	; 4
    54e0:	2c 87       	std	Y+12, r18	; 0x0c
    54e2:	0e 94 36 2c 	call	0x586c	; 0x586c <strchr_P>
    54e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    54e8:	89 2b       	or	r24, r25
    54ea:	41 f0       	breq	.+16     	; 0x54fc <vfprintf+0xec>
    54ec:	63 01       	movw	r12, r6
    54ee:	f4 e0       	ldi	r31, 0x04	; 4
    54f0:	cf 0e       	add	r12, r31
    54f2:	d1 1c       	adc	r13, r1
    54f4:	b8 01       	movw	r22, r16
    54f6:	8f e3       	ldi	r24, 0x3F	; 63
    54f8:	90 e0       	ldi	r25, 0x00	; 0
    54fa:	12 c0       	rjmp	.+36     	; 0x5520 <vfprintf+0x110>
    54fc:	23 36       	cpi	r18, 0x63	; 99
    54fe:	41 f0       	breq	.+16     	; 0x5510 <vfprintf+0x100>
    5500:	23 37       	cpi	r18, 0x73	; 115
    5502:	89 f0       	breq	.+34     	; 0x5526 <vfprintf+0x116>
    5504:	23 35       	cpi	r18, 0x53	; 83
    5506:	21 f5       	brne	.+72     	; 0x5550 <vfprintf+0x140>
    5508:	f9 2d       	mov	r31, r9
    550a:	f1 60       	ori	r31, 0x01	; 1
    550c:	9f 2e       	mov	r9, r31
    550e:	0b c0       	rjmp	.+22     	; 0x5526 <vfprintf+0x116>
    5510:	63 01       	movw	r12, r6
    5512:	22 e0       	ldi	r18, 0x02	; 2
    5514:	c2 0e       	add	r12, r18
    5516:	d1 1c       	adc	r13, r1
    5518:	b8 01       	movw	r22, r16
    551a:	f3 01       	movw	r30, r6
    551c:	80 81       	ld	r24, Z
    551e:	91 81       	ldd	r25, Z+1	; 0x01
    5520:	0e 94 95 2c 	call	0x592a	; 0x592a <fputc>
    5524:	b2 cf       	rjmp	.-156    	; 0x548a <vfprintf+0x7a>
    5526:	63 01       	movw	r12, r6
    5528:	22 e0       	ldi	r18, 0x02	; 2
    552a:	c2 0e       	add	r12, r18
    552c:	d1 1c       	adc	r13, r1
    552e:	f3 01       	movw	r30, r6
    5530:	60 80       	ld	r6, Z
    5532:	71 80       	ldd	r7, Z+1	; 0x01
    5534:	f3 01       	movw	r30, r6
    5536:	90 fc       	sbrc	r9, 0
    5538:	85 91       	lpm	r24, Z+
    553a:	90 fe       	sbrs	r9, 0
    553c:	81 91       	ld	r24, Z+
    553e:	3f 01       	movw	r6, r30
    5540:	88 23       	and	r24, r24
    5542:	09 f4       	brne	.+2      	; 0x5546 <vfprintf+0x136>
    5544:	a2 cf       	rjmp	.-188    	; 0x548a <vfprintf+0x7a>
    5546:	b8 01       	movw	r22, r16
    5548:	90 e0       	ldi	r25, 0x00	; 0
    554a:	0e 94 95 2c 	call	0x592a	; 0x592a <fputc>
    554e:	f2 cf       	rjmp	.-28     	; 0x5534 <vfprintf+0x124>
    5550:	24 36       	cpi	r18, 0x64	; 100
    5552:	11 f0       	breq	.+4      	; 0x5558 <vfprintf+0x148>
    5554:	29 36       	cpi	r18, 0x69	; 105
    5556:	39 f5       	brne	.+78     	; 0x55a6 <vfprintf+0x196>
    5558:	63 01       	movw	r12, r6
    555a:	97 fe       	sbrs	r9, 7
    555c:	09 c0       	rjmp	.+18     	; 0x5570 <vfprintf+0x160>
    555e:	f4 e0       	ldi	r31, 0x04	; 4
    5560:	cf 0e       	add	r12, r31
    5562:	d1 1c       	adc	r13, r1
    5564:	f3 01       	movw	r30, r6
    5566:	60 81       	ld	r22, Z
    5568:	71 81       	ldd	r23, Z+1	; 0x01
    556a:	82 81       	ldd	r24, Z+2	; 0x02
    556c:	93 81       	ldd	r25, Z+3	; 0x03
    556e:	0a c0       	rjmp	.+20     	; 0x5584 <vfprintf+0x174>
    5570:	f2 e0       	ldi	r31, 0x02	; 2
    5572:	cf 0e       	add	r12, r31
    5574:	d1 1c       	adc	r13, r1
    5576:	f3 01       	movw	r30, r6
    5578:	60 81       	ld	r22, Z
    557a:	71 81       	ldd	r23, Z+1	; 0x01
    557c:	88 27       	eor	r24, r24
    557e:	77 fd       	sbrc	r23, 7
    5580:	80 95       	com	r24
    5582:	98 2f       	mov	r25, r24
    5584:	f9 2d       	mov	r31, r9
    5586:	ff 7e       	andi	r31, 0xEF	; 239
    5588:	9f 2e       	mov	r9, r31
    558a:	97 ff       	sbrs	r25, 7
    558c:	09 c0       	rjmp	.+18     	; 0x55a0 <vfprintf+0x190>
    558e:	90 95       	com	r25
    5590:	80 95       	com	r24
    5592:	70 95       	com	r23
    5594:	61 95       	neg	r22
    5596:	7f 4f       	sbci	r23, 0xFF	; 255
    5598:	8f 4f       	sbci	r24, 0xFF	; 255
    559a:	9f 4f       	sbci	r25, 0xFF	; 255
    559c:	f0 64       	ori	r31, 0x40	; 64
    559e:	9f 2e       	mov	r9, r31
    55a0:	2a e0       	ldi	r18, 0x0A	; 10
    55a2:	30 e0       	ldi	r19, 0x00	; 0
    55a4:	38 c0       	rjmp	.+112    	; 0x5616 <vfprintf+0x206>
    55a6:	20 37       	cpi	r18, 0x70	; 112
    55a8:	a1 f0       	breq	.+40     	; 0x55d2 <vfprintf+0x1c2>
    55aa:	40 f4       	brcc	.+16     	; 0x55bc <vfprintf+0x1ac>
    55ac:	28 35       	cpi	r18, 0x58	; 88
    55ae:	d1 f0       	breq	.+52     	; 0x55e4 <vfprintf+0x1d4>
    55b0:	2f 36       	cpi	r18, 0x6F	; 111
    55b2:	09 f0       	breq	.+2      	; 0x55b6 <vfprintf+0x1a6>
    55b4:	60 c0       	rjmp	.+192    	; 0x5676 <vfprintf+0x266>
    55b6:	28 e0       	ldi	r18, 0x08	; 8
    55b8:	30 e0       	ldi	r19, 0x00	; 0
    55ba:	19 c0       	rjmp	.+50     	; 0x55ee <vfprintf+0x1de>
    55bc:	25 37       	cpi	r18, 0x75	; 117
    55be:	19 f0       	breq	.+6      	; 0x55c6 <vfprintf+0x1b6>
    55c0:	28 37       	cpi	r18, 0x78	; 120
    55c2:	51 f0       	breq	.+20     	; 0x55d8 <vfprintf+0x1c8>
    55c4:	58 c0       	rjmp	.+176    	; 0x5676 <vfprintf+0x266>
    55c6:	29 2d       	mov	r18, r9
    55c8:	2f 7e       	andi	r18, 0xEF	; 239
    55ca:	92 2e       	mov	r9, r18
    55cc:	2a e0       	ldi	r18, 0x0A	; 10
    55ce:	30 e0       	ldi	r19, 0x00	; 0
    55d0:	0e c0       	rjmp	.+28     	; 0x55ee <vfprintf+0x1de>
    55d2:	89 2d       	mov	r24, r9
    55d4:	80 61       	ori	r24, 0x10	; 16
    55d6:	98 2e       	mov	r9, r24
    55d8:	99 2d       	mov	r25, r9
    55da:	94 62       	ori	r25, 0x24	; 36
    55dc:	99 2e       	mov	r9, r25
    55de:	20 e1       	ldi	r18, 0x10	; 16
    55e0:	30 e0       	ldi	r19, 0x00	; 0
    55e2:	05 c0       	rjmp	.+10     	; 0x55ee <vfprintf+0x1de>
    55e4:	e9 2d       	mov	r30, r9
    55e6:	e4 60       	ori	r30, 0x04	; 4
    55e8:	9e 2e       	mov	r9, r30
    55ea:	20 e1       	ldi	r18, 0x10	; 16
    55ec:	32 e0       	ldi	r19, 0x02	; 2
    55ee:	63 01       	movw	r12, r6
    55f0:	97 fe       	sbrs	r9, 7
    55f2:	09 c0       	rjmp	.+18     	; 0x5606 <vfprintf+0x1f6>
    55f4:	f4 e0       	ldi	r31, 0x04	; 4
    55f6:	cf 0e       	add	r12, r31
    55f8:	d1 1c       	adc	r13, r1
    55fa:	f3 01       	movw	r30, r6
    55fc:	60 81       	ld	r22, Z
    55fe:	71 81       	ldd	r23, Z+1	; 0x01
    5600:	82 81       	ldd	r24, Z+2	; 0x02
    5602:	93 81       	ldd	r25, Z+3	; 0x03
    5604:	08 c0       	rjmp	.+16     	; 0x5616 <vfprintf+0x206>
    5606:	f2 e0       	ldi	r31, 0x02	; 2
    5608:	cf 0e       	add	r12, r31
    560a:	d1 1c       	adc	r13, r1
    560c:	f3 01       	movw	r30, r6
    560e:	60 81       	ld	r22, Z
    5610:	71 81       	ldd	r23, Z+1	; 0x01
    5612:	80 e0       	ldi	r24, 0x00	; 0
    5614:	90 e0       	ldi	r25, 0x00	; 0
    5616:	a5 01       	movw	r20, r10
    5618:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <__ultoa_invert>
    561c:	78 2e       	mov	r7, r24
    561e:	7a 18       	sub	r7, r10
    5620:	96 fe       	sbrs	r9, 6
    5622:	05 c0       	rjmp	.+10     	; 0x562e <vfprintf+0x21e>
    5624:	b8 01       	movw	r22, r16
    5626:	8d e2       	ldi	r24, 0x2D	; 45
    5628:	90 e0       	ldi	r25, 0x00	; 0
    562a:	0e 94 95 2c 	call	0x592a	; 0x592a <fputc>
    562e:	94 fe       	sbrs	r9, 4
    5630:	16 c0       	rjmp	.+44     	; 0x565e <vfprintf+0x24e>
    5632:	fe 01       	movw	r30, r28
    5634:	e7 0d       	add	r30, r7
    5636:	f1 1d       	adc	r31, r1
    5638:	80 81       	ld	r24, Z
    563a:	80 33       	cpi	r24, 0x30	; 48
    563c:	81 f0       	breq	.+32     	; 0x565e <vfprintf+0x24e>
    563e:	b8 01       	movw	r22, r16
    5640:	80 e3       	ldi	r24, 0x30	; 48
    5642:	90 e0       	ldi	r25, 0x00	; 0
    5644:	0e 94 95 2c 	call	0x592a	; 0x592a <fputc>
    5648:	92 fe       	sbrs	r9, 2
    564a:	09 c0       	rjmp	.+18     	; 0x565e <vfprintf+0x24e>
    564c:	29 2d       	mov	r18, r9
    564e:	20 72       	andi	r18, 0x20	; 32
    5650:	82 2f       	mov	r24, r18
    5652:	90 e0       	ldi	r25, 0x00	; 0
    5654:	b8 01       	movw	r22, r16
    5656:	88 5a       	subi	r24, 0xA8	; 168
    5658:	9f 4f       	sbci	r25, 0xFF	; 255
    565a:	0e 94 95 2c 	call	0x592a	; 0x592a <fputc>
    565e:	7a 94       	dec	r7
    5660:	f5 01       	movw	r30, r10
    5662:	e7 0d       	add	r30, r7
    5664:	f1 1d       	adc	r31, r1
    5666:	80 81       	ld	r24, Z
    5668:	b8 01       	movw	r22, r16
    566a:	90 e0       	ldi	r25, 0x00	; 0
    566c:	0e 94 95 2c 	call	0x592a	; 0x592a <fputc>
    5670:	71 10       	cpse	r7, r1
    5672:	f5 cf       	rjmp	.-22     	; 0x565e <vfprintf+0x24e>
    5674:	0a cf       	rjmp	.-492    	; 0x548a <vfprintf+0x7a>
    5676:	f8 01       	movw	r30, r16
    5678:	86 81       	ldd	r24, Z+6	; 0x06
    567a:	97 81       	ldd	r25, Z+7	; 0x07
    567c:	02 c0       	rjmp	.+4      	; 0x5682 <vfprintf+0x272>
    567e:	8f ef       	ldi	r24, 0xFF	; 255
    5680:	9f ef       	ldi	r25, 0xFF	; 255
    5682:	2c 96       	adiw	r28, 0x0c	; 12
    5684:	0f b6       	in	r0, 0x3f	; 63
    5686:	f8 94       	cli
    5688:	de bf       	out	0x3e, r29	; 62
    568a:	0f be       	out	0x3f, r0	; 63
    568c:	cd bf       	out	0x3d, r28	; 61
    568e:	df 91       	pop	r29
    5690:	cf 91       	pop	r28
    5692:	1f 91       	pop	r17
    5694:	0f 91       	pop	r16
    5696:	ff 90       	pop	r15
    5698:	ef 90       	pop	r14
    569a:	df 90       	pop	r13
    569c:	cf 90       	pop	r12
    569e:	bf 90       	pop	r11
    56a0:	af 90       	pop	r10
    56a2:	9f 90       	pop	r9
    56a4:	7f 90       	pop	r7
    56a6:	6f 90       	pop	r6
    56a8:	08 95       	ret

000056aa <__muluhisi3>:
    56aa:	0e 94 27 2c 	call	0x584e	; 0x584e <__umulhisi3>
    56ae:	a5 9f       	mul	r26, r21
    56b0:	90 0d       	add	r25, r0
    56b2:	b4 9f       	mul	r27, r20
    56b4:	90 0d       	add	r25, r0
    56b6:	a4 9f       	mul	r26, r20
    56b8:	80 0d       	add	r24, r0
    56ba:	91 1d       	adc	r25, r1
    56bc:	11 24       	eor	r1, r1
    56be:	08 95       	ret

000056c0 <__mulshisi3>:
    56c0:	b7 ff       	sbrs	r27, 7
    56c2:	0c 94 55 2b 	jmp	0x56aa	; 0x56aa <__muluhisi3>

000056c6 <__mulohisi3>:
    56c6:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__muluhisi3>
    56ca:	82 1b       	sub	r24, r18
    56cc:	93 0b       	sbc	r25, r19
    56ce:	08 95       	ret

000056d0 <__mulsi3>:
    56d0:	db 01       	movw	r26, r22
    56d2:	8f 93       	push	r24
    56d4:	9f 93       	push	r25
    56d6:	0e 94 55 2b 	call	0x56aa	; 0x56aa <__muluhisi3>
    56da:	bf 91       	pop	r27
    56dc:	af 91       	pop	r26
    56de:	a2 9f       	mul	r26, r18
    56e0:	80 0d       	add	r24, r0
    56e2:	91 1d       	adc	r25, r1
    56e4:	a3 9f       	mul	r26, r19
    56e6:	90 0d       	add	r25, r0
    56e8:	b2 9f       	mul	r27, r18
    56ea:	90 0d       	add	r25, r0
    56ec:	11 24       	eor	r1, r1
    56ee:	08 95       	ret

000056f0 <__udivmodsi4>:
    56f0:	a1 e2       	ldi	r26, 0x21	; 33
    56f2:	1a 2e       	mov	r1, r26
    56f4:	aa 1b       	sub	r26, r26
    56f6:	bb 1b       	sub	r27, r27
    56f8:	fd 01       	movw	r30, r26
    56fa:	0d c0       	rjmp	.+26     	; 0x5716 <__udivmodsi4_ep>

000056fc <__udivmodsi4_loop>:
    56fc:	aa 1f       	adc	r26, r26
    56fe:	bb 1f       	adc	r27, r27
    5700:	ee 1f       	adc	r30, r30
    5702:	ff 1f       	adc	r31, r31
    5704:	a2 17       	cp	r26, r18
    5706:	b3 07       	cpc	r27, r19
    5708:	e4 07       	cpc	r30, r20
    570a:	f5 07       	cpc	r31, r21
    570c:	20 f0       	brcs	.+8      	; 0x5716 <__udivmodsi4_ep>
    570e:	a2 1b       	sub	r26, r18
    5710:	b3 0b       	sbc	r27, r19
    5712:	e4 0b       	sbc	r30, r20
    5714:	f5 0b       	sbc	r31, r21

00005716 <__udivmodsi4_ep>:
    5716:	66 1f       	adc	r22, r22
    5718:	77 1f       	adc	r23, r23
    571a:	88 1f       	adc	r24, r24
    571c:	99 1f       	adc	r25, r25
    571e:	1a 94       	dec	r1
    5720:	69 f7       	brne	.-38     	; 0x56fc <__udivmodsi4_loop>
    5722:	60 95       	com	r22
    5724:	70 95       	com	r23
    5726:	80 95       	com	r24
    5728:	90 95       	com	r25
    572a:	9b 01       	movw	r18, r22
    572c:	ac 01       	movw	r20, r24
    572e:	bd 01       	movw	r22, r26
    5730:	cf 01       	movw	r24, r30
    5732:	08 95       	ret

00005734 <__divmodsi4>:
    5734:	05 2e       	mov	r0, r21
    5736:	97 fb       	bst	r25, 7
    5738:	1e f4       	brtc	.+6      	; 0x5740 <__divmodsi4+0xc>
    573a:	00 94       	com	r0
    573c:	0e 94 10 2c 	call	0x5820	; 0x5820 <__negsi2>
    5740:	57 fd       	sbrc	r21, 7
    5742:	07 d0       	rcall	.+14     	; 0x5752 <__divmodsi4_neg2>
    5744:	0e 94 78 2b 	call	0x56f0	; 0x56f0 <__udivmodsi4>
    5748:	07 fc       	sbrc	r0, 7
    574a:	03 d0       	rcall	.+6      	; 0x5752 <__divmodsi4_neg2>
    574c:	4e f4       	brtc	.+18     	; 0x5760 <__divmodsi4_exit>
    574e:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__negsi2>

00005752 <__divmodsi4_neg2>:
    5752:	50 95       	com	r21
    5754:	40 95       	com	r20
    5756:	30 95       	com	r19
    5758:	21 95       	neg	r18
    575a:	3f 4f       	sbci	r19, 0xFF	; 255
    575c:	4f 4f       	sbci	r20, 0xFF	; 255
    575e:	5f 4f       	sbci	r21, 0xFF	; 255

00005760 <__divmodsi4_exit>:
    5760:	08 95       	ret

00005762 <__umoddi3>:
    5762:	68 94       	set
    5764:	01 c0       	rjmp	.+2      	; 0x5768 <__udivdi3_umoddi3>

00005766 <__udivdi3>:
    5766:	e8 94       	clt

00005768 <__udivdi3_umoddi3>:
    5768:	8f 92       	push	r8
    576a:	9f 92       	push	r9
    576c:	cf 93       	push	r28
    576e:	df 93       	push	r29
    5770:	0e 94 bf 2b 	call	0x577e	; 0x577e <__udivmod64>
    5774:	df 91       	pop	r29
    5776:	cf 91       	pop	r28
    5778:	9f 90       	pop	r9
    577a:	8f 90       	pop	r8
    577c:	08 95       	ret

0000577e <__udivmod64>:
    577e:	88 24       	eor	r8, r8
    5780:	99 24       	eor	r9, r9
    5782:	f4 01       	movw	r30, r8
    5784:	e4 01       	movw	r28, r8
    5786:	b0 e4       	ldi	r27, 0x40	; 64
    5788:	9f 93       	push	r25
    578a:	aa 27       	eor	r26, r26
    578c:	9a 15       	cp	r25, r10
    578e:	8b 04       	cpc	r8, r11
    5790:	9c 04       	cpc	r9, r12
    5792:	ed 05       	cpc	r30, r13
    5794:	fe 05       	cpc	r31, r14
    5796:	cf 05       	cpc	r28, r15
    5798:	d0 07       	cpc	r29, r16
    579a:	a1 07       	cpc	r26, r17
    579c:	98 f4       	brcc	.+38     	; 0x57c4 <__udivmod64+0x46>
    579e:	ad 2f       	mov	r26, r29
    57a0:	dc 2f       	mov	r29, r28
    57a2:	cf 2f       	mov	r28, r31
    57a4:	fe 2f       	mov	r31, r30
    57a6:	e9 2d       	mov	r30, r9
    57a8:	98 2c       	mov	r9, r8
    57aa:	89 2e       	mov	r8, r25
    57ac:	98 2f       	mov	r25, r24
    57ae:	87 2f       	mov	r24, r23
    57b0:	76 2f       	mov	r23, r22
    57b2:	65 2f       	mov	r22, r21
    57b4:	54 2f       	mov	r21, r20
    57b6:	43 2f       	mov	r20, r19
    57b8:	32 2f       	mov	r19, r18
    57ba:	22 27       	eor	r18, r18
    57bc:	b8 50       	subi	r27, 0x08	; 8
    57be:	31 f7       	brne	.-52     	; 0x578c <__udivmod64+0xe>
    57c0:	bf 91       	pop	r27
    57c2:	27 c0       	rjmp	.+78     	; 0x5812 <__udivmod64+0x94>
    57c4:	1b 2e       	mov	r1, r27
    57c6:	bf 91       	pop	r27
    57c8:	bb 27       	eor	r27, r27
    57ca:	22 0f       	add	r18, r18
    57cc:	33 1f       	adc	r19, r19
    57ce:	44 1f       	adc	r20, r20
    57d0:	55 1f       	adc	r21, r21
    57d2:	66 1f       	adc	r22, r22
    57d4:	77 1f       	adc	r23, r23
    57d6:	88 1f       	adc	r24, r24
    57d8:	99 1f       	adc	r25, r25
    57da:	88 1c       	adc	r8, r8
    57dc:	99 1c       	adc	r9, r9
    57de:	ee 1f       	adc	r30, r30
    57e0:	ff 1f       	adc	r31, r31
    57e2:	cc 1f       	adc	r28, r28
    57e4:	dd 1f       	adc	r29, r29
    57e6:	aa 1f       	adc	r26, r26
    57e8:	bb 1f       	adc	r27, r27
    57ea:	8a 14       	cp	r8, r10
    57ec:	9b 04       	cpc	r9, r11
    57ee:	ec 05       	cpc	r30, r12
    57f0:	fd 05       	cpc	r31, r13
    57f2:	ce 05       	cpc	r28, r14
    57f4:	df 05       	cpc	r29, r15
    57f6:	a0 07       	cpc	r26, r16
    57f8:	b1 07       	cpc	r27, r17
    57fa:	48 f0       	brcs	.+18     	; 0x580e <__udivmod64+0x90>
    57fc:	8a 18       	sub	r8, r10
    57fe:	9b 08       	sbc	r9, r11
    5800:	ec 09       	sbc	r30, r12
    5802:	fd 09       	sbc	r31, r13
    5804:	ce 09       	sbc	r28, r14
    5806:	df 09       	sbc	r29, r15
    5808:	a0 0b       	sbc	r26, r16
    580a:	b1 0b       	sbc	r27, r17
    580c:	21 60       	ori	r18, 0x01	; 1
    580e:	1a 94       	dec	r1
    5810:	e1 f6       	brne	.-72     	; 0x57ca <__udivmod64+0x4c>
    5812:	2e f4       	brtc	.+10     	; 0x581e <__udivmod64+0xa0>
    5814:	94 01       	movw	r18, r8
    5816:	af 01       	movw	r20, r30
    5818:	be 01       	movw	r22, r28
    581a:	cd 01       	movw	r24, r26
    581c:	00 0c       	add	r0, r0
    581e:	08 95       	ret

00005820 <__negsi2>:
    5820:	90 95       	com	r25
    5822:	80 95       	com	r24
    5824:	70 95       	com	r23
    5826:	61 95       	neg	r22
    5828:	7f 4f       	sbci	r23, 0xFF	; 255
    582a:	8f 4f       	sbci	r24, 0xFF	; 255
    582c:	9f 4f       	sbci	r25, 0xFF	; 255
    582e:	08 95       	ret

00005830 <__tablejump2__>:
    5830:	ee 0f       	add	r30, r30
    5832:	ff 1f       	adc	r31, r31

00005834 <__tablejump__>:
    5834:	05 90       	lpm	r0, Z+
    5836:	f4 91       	lpm	r31, Z
    5838:	e0 2d       	mov	r30, r0
    583a:	09 94       	ijmp

0000583c <__adddi3>:
    583c:	2a 0d       	add	r18, r10
    583e:	3b 1d       	adc	r19, r11
    5840:	4c 1d       	adc	r20, r12
    5842:	5d 1d       	adc	r21, r13
    5844:	6e 1d       	adc	r22, r14
    5846:	7f 1d       	adc	r23, r15
    5848:	80 1f       	adc	r24, r16
    584a:	91 1f       	adc	r25, r17
    584c:	08 95       	ret

0000584e <__umulhisi3>:
    584e:	a2 9f       	mul	r26, r18
    5850:	b0 01       	movw	r22, r0
    5852:	b3 9f       	mul	r27, r19
    5854:	c0 01       	movw	r24, r0
    5856:	a3 9f       	mul	r26, r19
    5858:	70 0d       	add	r23, r0
    585a:	81 1d       	adc	r24, r1
    585c:	11 24       	eor	r1, r1
    585e:	91 1d       	adc	r25, r1
    5860:	b2 9f       	mul	r27, r18
    5862:	70 0d       	add	r23, r0
    5864:	81 1d       	adc	r24, r1
    5866:	11 24       	eor	r1, r1
    5868:	91 1d       	adc	r25, r1
    586a:	08 95       	ret

0000586c <strchr_P>:
    586c:	fc 01       	movw	r30, r24
    586e:	05 90       	lpm	r0, Z+
    5870:	06 16       	cp	r0, r22
    5872:	21 f0       	breq	.+8      	; 0x587c <strchr_P+0x10>
    5874:	00 20       	and	r0, r0
    5876:	d9 f7       	brne	.-10     	; 0x586e <strchr_P+0x2>
    5878:	c0 01       	movw	r24, r0
    587a:	08 95       	ret
    587c:	31 97       	sbiw	r30, 0x01	; 1
    587e:	cf 01       	movw	r24, r30
    5880:	08 95       	ret

00005882 <memcpy>:
    5882:	fb 01       	movw	r30, r22
    5884:	dc 01       	movw	r26, r24
    5886:	02 c0       	rjmp	.+4      	; 0x588c <memcpy+0xa>
    5888:	01 90       	ld	r0, Z+
    588a:	0d 92       	st	X+, r0
    588c:	41 50       	subi	r20, 0x01	; 1
    588e:	50 40       	sbci	r21, 0x00	; 0
    5890:	d8 f7       	brcc	.-10     	; 0x5888 <memcpy+0x6>
    5892:	08 95       	ret

00005894 <fdevopen>:
    5894:	0f 93       	push	r16
    5896:	1f 93       	push	r17
    5898:	cf 93       	push	r28
    589a:	df 93       	push	r29
    589c:	ec 01       	movw	r28, r24
    589e:	8b 01       	movw	r16, r22
    58a0:	00 97       	sbiw	r24, 0x00	; 0
    58a2:	31 f4       	brne	.+12     	; 0x58b0 <fdevopen+0x1c>
    58a4:	61 15       	cp	r22, r1
    58a6:	71 05       	cpc	r23, r1
    58a8:	19 f4       	brne	.+6      	; 0x58b0 <fdevopen+0x1c>
    58aa:	80 e0       	ldi	r24, 0x00	; 0
    58ac:	90 e0       	ldi	r25, 0x00	; 0
    58ae:	38 c0       	rjmp	.+112    	; 0x5920 <fdevopen+0x8c>
    58b0:	6e e0       	ldi	r22, 0x0E	; 14
    58b2:	70 e0       	ldi	r23, 0x00	; 0
    58b4:	81 e0       	ldi	r24, 0x01	; 1
    58b6:	90 e0       	ldi	r25, 0x00	; 0
    58b8:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <calloc>
    58bc:	fc 01       	movw	r30, r24
    58be:	00 97       	sbiw	r24, 0x00	; 0
    58c0:	a1 f3       	breq	.-24     	; 0x58aa <fdevopen+0x16>
    58c2:	80 e8       	ldi	r24, 0x80	; 128
    58c4:	83 83       	std	Z+3, r24	; 0x03
    58c6:	01 15       	cp	r16, r1
    58c8:	11 05       	cpc	r17, r1
    58ca:	71 f0       	breq	.+28     	; 0x58e8 <fdevopen+0x54>
    58cc:	13 87       	std	Z+11, r17	; 0x0b
    58ce:	02 87       	std	Z+10, r16	; 0x0a
    58d0:	81 e8       	ldi	r24, 0x81	; 129
    58d2:	83 83       	std	Z+3, r24	; 0x03
    58d4:	80 91 02 06 	lds	r24, 0x0602
    58d8:	90 91 03 06 	lds	r25, 0x0603
    58dc:	89 2b       	or	r24, r25
    58de:	21 f4       	brne	.+8      	; 0x58e8 <fdevopen+0x54>
    58e0:	f0 93 03 06 	sts	0x0603, r31
    58e4:	e0 93 02 06 	sts	0x0602, r30
    58e8:	20 97       	sbiw	r28, 0x00	; 0
    58ea:	c9 f0       	breq	.+50     	; 0x591e <fdevopen+0x8a>
    58ec:	d1 87       	std	Z+9, r29	; 0x09
    58ee:	c0 87       	std	Z+8, r28	; 0x08
    58f0:	83 81       	ldd	r24, Z+3	; 0x03
    58f2:	82 60       	ori	r24, 0x02	; 2
    58f4:	83 83       	std	Z+3, r24	; 0x03
    58f6:	80 91 04 06 	lds	r24, 0x0604
    58fa:	90 91 05 06 	lds	r25, 0x0605
    58fe:	89 2b       	or	r24, r25
    5900:	71 f4       	brne	.+28     	; 0x591e <fdevopen+0x8a>
    5902:	f0 93 05 06 	sts	0x0605, r31
    5906:	e0 93 04 06 	sts	0x0604, r30
    590a:	80 91 06 06 	lds	r24, 0x0606
    590e:	90 91 07 06 	lds	r25, 0x0607
    5912:	89 2b       	or	r24, r25
    5914:	21 f4       	brne	.+8      	; 0x591e <fdevopen+0x8a>
    5916:	f0 93 07 06 	sts	0x0607, r31
    591a:	e0 93 06 06 	sts	0x0606, r30
    591e:	cf 01       	movw	r24, r30
    5920:	df 91       	pop	r29
    5922:	cf 91       	pop	r28
    5924:	1f 91       	pop	r17
    5926:	0f 91       	pop	r16
    5928:	08 95       	ret

0000592a <fputc>:
    592a:	0f 93       	push	r16
    592c:	1f 93       	push	r17
    592e:	cf 93       	push	r28
    5930:	df 93       	push	r29
    5932:	18 2f       	mov	r17, r24
    5934:	09 2f       	mov	r16, r25
    5936:	eb 01       	movw	r28, r22
    5938:	8b 81       	ldd	r24, Y+3	; 0x03
    593a:	81 fd       	sbrc	r24, 1
    593c:	03 c0       	rjmp	.+6      	; 0x5944 <fputc+0x1a>
    593e:	8f ef       	ldi	r24, 0xFF	; 255
    5940:	9f ef       	ldi	r25, 0xFF	; 255
    5942:	20 c0       	rjmp	.+64     	; 0x5984 <fputc+0x5a>
    5944:	82 ff       	sbrs	r24, 2
    5946:	10 c0       	rjmp	.+32     	; 0x5968 <fputc+0x3e>
    5948:	4e 81       	ldd	r20, Y+6	; 0x06
    594a:	5f 81       	ldd	r21, Y+7	; 0x07
    594c:	2c 81       	ldd	r18, Y+4	; 0x04
    594e:	3d 81       	ldd	r19, Y+5	; 0x05
    5950:	42 17       	cp	r20, r18
    5952:	53 07       	cpc	r21, r19
    5954:	7c f4       	brge	.+30     	; 0x5974 <fputc+0x4a>
    5956:	e8 81       	ld	r30, Y
    5958:	f9 81       	ldd	r31, Y+1	; 0x01
    595a:	9f 01       	movw	r18, r30
    595c:	2f 5f       	subi	r18, 0xFF	; 255
    595e:	3f 4f       	sbci	r19, 0xFF	; 255
    5960:	39 83       	std	Y+1, r19	; 0x01
    5962:	28 83       	st	Y, r18
    5964:	10 83       	st	Z, r17
    5966:	06 c0       	rjmp	.+12     	; 0x5974 <fputc+0x4a>
    5968:	e8 85       	ldd	r30, Y+8	; 0x08
    596a:	f9 85       	ldd	r31, Y+9	; 0x09
    596c:	81 2f       	mov	r24, r17
    596e:	09 95       	icall
    5970:	89 2b       	or	r24, r25
    5972:	29 f7       	brne	.-54     	; 0x593e <fputc+0x14>
    5974:	2e 81       	ldd	r18, Y+6	; 0x06
    5976:	3f 81       	ldd	r19, Y+7	; 0x07
    5978:	2f 5f       	subi	r18, 0xFF	; 255
    597a:	3f 4f       	sbci	r19, 0xFF	; 255
    597c:	3f 83       	std	Y+7, r19	; 0x07
    597e:	2e 83       	std	Y+6, r18	; 0x06
    5980:	81 2f       	mov	r24, r17
    5982:	90 2f       	mov	r25, r16
    5984:	df 91       	pop	r29
    5986:	cf 91       	pop	r28
    5988:	1f 91       	pop	r17
    598a:	0f 91       	pop	r16
    598c:	08 95       	ret

0000598e <printf>:
    598e:	cf 93       	push	r28
    5990:	df 93       	push	r29
    5992:	cd b7       	in	r28, 0x3d	; 61
    5994:	de b7       	in	r29, 0x3e	; 62
    5996:	fe 01       	movw	r30, r28
    5998:	35 96       	adiw	r30, 0x05	; 5
    599a:	61 91       	ld	r22, Z+
    599c:	71 91       	ld	r23, Z+
    599e:	af 01       	movw	r20, r30
    59a0:	80 91 04 06 	lds	r24, 0x0604
    59a4:	90 91 05 06 	lds	r25, 0x0605
    59a8:	0e 94 08 2a 	call	0x5410	; 0x5410 <vfprintf>
    59ac:	df 91       	pop	r29
    59ae:	cf 91       	pop	r28
    59b0:	08 95       	ret

000059b2 <putchar>:
    59b2:	60 91 04 06 	lds	r22, 0x0604
    59b6:	70 91 05 06 	lds	r23, 0x0605
    59ba:	0c 94 95 2c 	jmp	0x592a	; 0x592a <fputc>

000059be <puts>:
    59be:	0f 93       	push	r16
    59c0:	1f 93       	push	r17
    59c2:	cf 93       	push	r28
    59c4:	df 93       	push	r29
    59c6:	e0 91 04 06 	lds	r30, 0x0604
    59ca:	f0 91 05 06 	lds	r31, 0x0605
    59ce:	23 81       	ldd	r18, Z+3	; 0x03
    59d0:	21 ff       	sbrs	r18, 1
    59d2:	1b c0       	rjmp	.+54     	; 0x5a0a <puts+0x4c>
    59d4:	ec 01       	movw	r28, r24
    59d6:	00 e0       	ldi	r16, 0x00	; 0
    59d8:	10 e0       	ldi	r17, 0x00	; 0
    59da:	89 91       	ld	r24, Y+
    59dc:	60 91 04 06 	lds	r22, 0x0604
    59e0:	70 91 05 06 	lds	r23, 0x0605
    59e4:	db 01       	movw	r26, r22
    59e6:	18 96       	adiw	r26, 0x08	; 8
    59e8:	ed 91       	ld	r30, X+
    59ea:	fc 91       	ld	r31, X
    59ec:	19 97       	sbiw	r26, 0x09	; 9
    59ee:	88 23       	and	r24, r24
    59f0:	31 f0       	breq	.+12     	; 0x59fe <puts+0x40>
    59f2:	09 95       	icall
    59f4:	89 2b       	or	r24, r25
    59f6:	89 f3       	breq	.-30     	; 0x59da <puts+0x1c>
    59f8:	0f ef       	ldi	r16, 0xFF	; 255
    59fa:	1f ef       	ldi	r17, 0xFF	; 255
    59fc:	ee cf       	rjmp	.-36     	; 0x59da <puts+0x1c>
    59fe:	8a e0       	ldi	r24, 0x0A	; 10
    5a00:	09 95       	icall
    5a02:	89 2b       	or	r24, r25
    5a04:	11 f4       	brne	.+4      	; 0x5a0a <puts+0x4c>
    5a06:	c8 01       	movw	r24, r16
    5a08:	02 c0       	rjmp	.+4      	; 0x5a0e <puts+0x50>
    5a0a:	8f ef       	ldi	r24, 0xFF	; 255
    5a0c:	9f ef       	ldi	r25, 0xFF	; 255
    5a0e:	df 91       	pop	r29
    5a10:	cf 91       	pop	r28
    5a12:	1f 91       	pop	r17
    5a14:	0f 91       	pop	r16
    5a16:	08 95       	ret

00005a18 <sprintf>:
    5a18:	0f 93       	push	r16
    5a1a:	1f 93       	push	r17
    5a1c:	cf 93       	push	r28
    5a1e:	df 93       	push	r29
    5a20:	cd b7       	in	r28, 0x3d	; 61
    5a22:	de b7       	in	r29, 0x3e	; 62
    5a24:	2e 97       	sbiw	r28, 0x0e	; 14
    5a26:	0f b6       	in	r0, 0x3f	; 63
    5a28:	f8 94       	cli
    5a2a:	de bf       	out	0x3e, r29	; 62
    5a2c:	0f be       	out	0x3f, r0	; 63
    5a2e:	cd bf       	out	0x3d, r28	; 61
    5a30:	0d 89       	ldd	r16, Y+21	; 0x15
    5a32:	1e 89       	ldd	r17, Y+22	; 0x16
    5a34:	86 e0       	ldi	r24, 0x06	; 6
    5a36:	8c 83       	std	Y+4, r24	; 0x04
    5a38:	1a 83       	std	Y+2, r17	; 0x02
    5a3a:	09 83       	std	Y+1, r16	; 0x01
    5a3c:	8f ef       	ldi	r24, 0xFF	; 255
    5a3e:	9f e7       	ldi	r25, 0x7F	; 127
    5a40:	9e 83       	std	Y+6, r25	; 0x06
    5a42:	8d 83       	std	Y+5, r24	; 0x05
    5a44:	ae 01       	movw	r20, r28
    5a46:	47 5e       	subi	r20, 0xE7	; 231
    5a48:	5f 4f       	sbci	r21, 0xFF	; 255
    5a4a:	6f 89       	ldd	r22, Y+23	; 0x17
    5a4c:	78 8d       	ldd	r23, Y+24	; 0x18
    5a4e:	ce 01       	movw	r24, r28
    5a50:	01 96       	adiw	r24, 0x01	; 1
    5a52:	0e 94 08 2a 	call	0x5410	; 0x5410 <vfprintf>
    5a56:	ef 81       	ldd	r30, Y+7	; 0x07
    5a58:	f8 85       	ldd	r31, Y+8	; 0x08
    5a5a:	e0 0f       	add	r30, r16
    5a5c:	f1 1f       	adc	r31, r17
    5a5e:	10 82       	st	Z, r1
    5a60:	2e 96       	adiw	r28, 0x0e	; 14
    5a62:	0f b6       	in	r0, 0x3f	; 63
    5a64:	f8 94       	cli
    5a66:	de bf       	out	0x3e, r29	; 62
    5a68:	0f be       	out	0x3f, r0	; 63
    5a6a:	cd bf       	out	0x3d, r28	; 61
    5a6c:	df 91       	pop	r29
    5a6e:	cf 91       	pop	r28
    5a70:	1f 91       	pop	r17
    5a72:	0f 91       	pop	r16
    5a74:	08 95       	ret

00005a76 <__ultoa_invert>:
    5a76:	fa 01       	movw	r30, r20
    5a78:	aa 27       	eor	r26, r26
    5a7a:	28 30       	cpi	r18, 0x08	; 8
    5a7c:	51 f1       	breq	.+84     	; 0x5ad2 <__ultoa_invert+0x5c>
    5a7e:	20 31       	cpi	r18, 0x10	; 16
    5a80:	81 f1       	breq	.+96     	; 0x5ae2 <__ultoa_invert+0x6c>
    5a82:	e8 94       	clt
    5a84:	6f 93       	push	r22
    5a86:	6e 7f       	andi	r22, 0xFE	; 254
    5a88:	6e 5f       	subi	r22, 0xFE	; 254
    5a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a8c:	8f 4f       	sbci	r24, 0xFF	; 255
    5a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a90:	af 4f       	sbci	r26, 0xFF	; 255
    5a92:	b1 e0       	ldi	r27, 0x01	; 1
    5a94:	3e d0       	rcall	.+124    	; 0x5b12 <__ultoa_invert+0x9c>
    5a96:	b4 e0       	ldi	r27, 0x04	; 4
    5a98:	3c d0       	rcall	.+120    	; 0x5b12 <__ultoa_invert+0x9c>
    5a9a:	67 0f       	add	r22, r23
    5a9c:	78 1f       	adc	r23, r24
    5a9e:	89 1f       	adc	r24, r25
    5aa0:	9a 1f       	adc	r25, r26
    5aa2:	a1 1d       	adc	r26, r1
    5aa4:	68 0f       	add	r22, r24
    5aa6:	79 1f       	adc	r23, r25
    5aa8:	8a 1f       	adc	r24, r26
    5aaa:	91 1d       	adc	r25, r1
    5aac:	a1 1d       	adc	r26, r1
    5aae:	6a 0f       	add	r22, r26
    5ab0:	71 1d       	adc	r23, r1
    5ab2:	81 1d       	adc	r24, r1
    5ab4:	91 1d       	adc	r25, r1
    5ab6:	a1 1d       	adc	r26, r1
    5ab8:	20 d0       	rcall	.+64     	; 0x5afa <__ultoa_invert+0x84>
    5aba:	09 f4       	brne	.+2      	; 0x5abe <__ultoa_invert+0x48>
    5abc:	68 94       	set
    5abe:	3f 91       	pop	r19
    5ac0:	2a e0       	ldi	r18, 0x0A	; 10
    5ac2:	26 9f       	mul	r18, r22
    5ac4:	11 24       	eor	r1, r1
    5ac6:	30 19       	sub	r19, r0
    5ac8:	30 5d       	subi	r19, 0xD0	; 208
    5aca:	31 93       	st	Z+, r19
    5acc:	de f6       	brtc	.-74     	; 0x5a84 <__ultoa_invert+0xe>
    5ace:	cf 01       	movw	r24, r30
    5ad0:	08 95       	ret
    5ad2:	46 2f       	mov	r20, r22
    5ad4:	47 70       	andi	r20, 0x07	; 7
    5ad6:	40 5d       	subi	r20, 0xD0	; 208
    5ad8:	41 93       	st	Z+, r20
    5ada:	b3 e0       	ldi	r27, 0x03	; 3
    5adc:	0f d0       	rcall	.+30     	; 0x5afc <__ultoa_invert+0x86>
    5ade:	c9 f7       	brne	.-14     	; 0x5ad2 <__ultoa_invert+0x5c>
    5ae0:	f6 cf       	rjmp	.-20     	; 0x5ace <__ultoa_invert+0x58>
    5ae2:	46 2f       	mov	r20, r22
    5ae4:	4f 70       	andi	r20, 0x0F	; 15
    5ae6:	40 5d       	subi	r20, 0xD0	; 208
    5ae8:	4a 33       	cpi	r20, 0x3A	; 58
    5aea:	18 f0       	brcs	.+6      	; 0x5af2 <__ultoa_invert+0x7c>
    5aec:	49 5d       	subi	r20, 0xD9	; 217
    5aee:	31 fd       	sbrc	r19, 1
    5af0:	40 52       	subi	r20, 0x20	; 32
    5af2:	41 93       	st	Z+, r20
    5af4:	02 d0       	rcall	.+4      	; 0x5afa <__ultoa_invert+0x84>
    5af6:	a9 f7       	brne	.-22     	; 0x5ae2 <__ultoa_invert+0x6c>
    5af8:	ea cf       	rjmp	.-44     	; 0x5ace <__ultoa_invert+0x58>
    5afa:	b4 e0       	ldi	r27, 0x04	; 4
    5afc:	a6 95       	lsr	r26
    5afe:	97 95       	ror	r25
    5b00:	87 95       	ror	r24
    5b02:	77 95       	ror	r23
    5b04:	67 95       	ror	r22
    5b06:	ba 95       	dec	r27
    5b08:	c9 f7       	brne	.-14     	; 0x5afc <__ultoa_invert+0x86>
    5b0a:	00 97       	sbiw	r24, 0x00	; 0
    5b0c:	61 05       	cpc	r22, r1
    5b0e:	71 05       	cpc	r23, r1
    5b10:	08 95       	ret
    5b12:	9b 01       	movw	r18, r22
    5b14:	ac 01       	movw	r20, r24
    5b16:	0a 2e       	mov	r0, r26
    5b18:	06 94       	lsr	r0
    5b1a:	57 95       	ror	r21
    5b1c:	47 95       	ror	r20
    5b1e:	37 95       	ror	r19
    5b20:	27 95       	ror	r18
    5b22:	ba 95       	dec	r27
    5b24:	c9 f7       	brne	.-14     	; 0x5b18 <__ultoa_invert+0xa2>
    5b26:	62 0f       	add	r22, r18
    5b28:	73 1f       	adc	r23, r19
    5b2a:	84 1f       	adc	r24, r20
    5b2c:	95 1f       	adc	r25, r21
    5b2e:	a0 1d       	adc	r26, r0
    5b30:	08 95       	ret

00005b32 <__eerd_byte_m128rfa1>:
    5b32:	f9 99       	sbic	0x1f, 1	; 31
    5b34:	fe cf       	rjmp	.-4      	; 0x5b32 <__eerd_byte_m128rfa1>
    5b36:	92 bd       	out	0x22, r25	; 34
    5b38:	81 bd       	out	0x21, r24	; 33
    5b3a:	f8 9a       	sbi	0x1f, 0	; 31
    5b3c:	99 27       	eor	r25, r25
    5b3e:	80 b5       	in	r24, 0x20	; 32
    5b40:	08 95       	ret

00005b42 <__eewr_byte_m128rfa1>:
    5b42:	26 2f       	mov	r18, r22

00005b44 <__eewr_r18_m128rfa1>:
    5b44:	f9 99       	sbic	0x1f, 1	; 31
    5b46:	fe cf       	rjmp	.-4      	; 0x5b44 <__eewr_r18_m128rfa1>
    5b48:	1f ba       	out	0x1f, r1	; 31
    5b4a:	92 bd       	out	0x22, r25	; 34
    5b4c:	81 bd       	out	0x21, r24	; 33
    5b4e:	20 bd       	out	0x20, r18	; 32
    5b50:	0f b6       	in	r0, 0x3f	; 63
    5b52:	f8 94       	cli
    5b54:	fa 9a       	sbi	0x1f, 2	; 31
    5b56:	f9 9a       	sbi	0x1f, 1	; 31
    5b58:	0f be       	out	0x3f, r0	; 63
    5b5a:	01 96       	adiw	r24, 0x01	; 1
    5b5c:	08 95       	ret

00005b5e <calloc>:
    5b5e:	0f 93       	push	r16
    5b60:	1f 93       	push	r17
    5b62:	cf 93       	push	r28
    5b64:	df 93       	push	r29
    5b66:	86 9f       	mul	r24, r22
    5b68:	80 01       	movw	r16, r0
    5b6a:	87 9f       	mul	r24, r23
    5b6c:	10 0d       	add	r17, r0
    5b6e:	96 9f       	mul	r25, r22
    5b70:	10 0d       	add	r17, r0
    5b72:	11 24       	eor	r1, r1
    5b74:	c8 01       	movw	r24, r16
    5b76:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <malloc>
    5b7a:	ec 01       	movw	r28, r24
    5b7c:	00 97       	sbiw	r24, 0x00	; 0
    5b7e:	29 f0       	breq	.+10     	; 0x5b8a <calloc+0x2c>
    5b80:	a8 01       	movw	r20, r16
    5b82:	60 e0       	ldi	r22, 0x00	; 0
    5b84:	70 e0       	ldi	r23, 0x00	; 0
    5b86:	0e 94 f2 2e 	call	0x5de4	; 0x5de4 <memset>
    5b8a:	ce 01       	movw	r24, r28
    5b8c:	df 91       	pop	r29
    5b8e:	cf 91       	pop	r28
    5b90:	1f 91       	pop	r17
    5b92:	0f 91       	pop	r16
    5b94:	08 95       	ret

00005b96 <malloc>:
    5b96:	cf 93       	push	r28
    5b98:	df 93       	push	r29
    5b9a:	82 30       	cpi	r24, 0x02	; 2
    5b9c:	91 05       	cpc	r25, r1
    5b9e:	10 f4       	brcc	.+4      	; 0x5ba4 <malloc+0xe>
    5ba0:	82 e0       	ldi	r24, 0x02	; 2
    5ba2:	90 e0       	ldi	r25, 0x00	; 0
    5ba4:	e0 91 0a 06 	lds	r30, 0x060A
    5ba8:	f0 91 0b 06 	lds	r31, 0x060B
    5bac:	20 e0       	ldi	r18, 0x00	; 0
    5bae:	30 e0       	ldi	r19, 0x00	; 0
    5bb0:	a0 e0       	ldi	r26, 0x00	; 0
    5bb2:	b0 e0       	ldi	r27, 0x00	; 0
    5bb4:	30 97       	sbiw	r30, 0x00	; 0
    5bb6:	39 f1       	breq	.+78     	; 0x5c06 <malloc+0x70>
    5bb8:	40 81       	ld	r20, Z
    5bba:	51 81       	ldd	r21, Z+1	; 0x01
    5bbc:	48 17       	cp	r20, r24
    5bbe:	59 07       	cpc	r21, r25
    5bc0:	b8 f0       	brcs	.+46     	; 0x5bf0 <malloc+0x5a>
    5bc2:	48 17       	cp	r20, r24
    5bc4:	59 07       	cpc	r21, r25
    5bc6:	71 f4       	brne	.+28     	; 0x5be4 <malloc+0x4e>
    5bc8:	82 81       	ldd	r24, Z+2	; 0x02
    5bca:	93 81       	ldd	r25, Z+3	; 0x03
    5bcc:	10 97       	sbiw	r26, 0x00	; 0
    5bce:	29 f0       	breq	.+10     	; 0x5bda <malloc+0x44>
    5bd0:	13 96       	adiw	r26, 0x03	; 3
    5bd2:	9c 93       	st	X, r25
    5bd4:	8e 93       	st	-X, r24
    5bd6:	12 97       	sbiw	r26, 0x02	; 2
    5bd8:	2c c0       	rjmp	.+88     	; 0x5c32 <malloc+0x9c>
    5bda:	90 93 0b 06 	sts	0x060B, r25
    5bde:	80 93 0a 06 	sts	0x060A, r24
    5be2:	27 c0       	rjmp	.+78     	; 0x5c32 <malloc+0x9c>
    5be4:	21 15       	cp	r18, r1
    5be6:	31 05       	cpc	r19, r1
    5be8:	31 f0       	breq	.+12     	; 0x5bf6 <malloc+0x60>
    5bea:	42 17       	cp	r20, r18
    5bec:	53 07       	cpc	r21, r19
    5bee:	18 f0       	brcs	.+6      	; 0x5bf6 <malloc+0x60>
    5bf0:	a9 01       	movw	r20, r18
    5bf2:	db 01       	movw	r26, r22
    5bf4:	01 c0       	rjmp	.+2      	; 0x5bf8 <malloc+0x62>
    5bf6:	ef 01       	movw	r28, r30
    5bf8:	9a 01       	movw	r18, r20
    5bfa:	bd 01       	movw	r22, r26
    5bfc:	df 01       	movw	r26, r30
    5bfe:	02 80       	ldd	r0, Z+2	; 0x02
    5c00:	f3 81       	ldd	r31, Z+3	; 0x03
    5c02:	e0 2d       	mov	r30, r0
    5c04:	d7 cf       	rjmp	.-82     	; 0x5bb4 <malloc+0x1e>
    5c06:	21 15       	cp	r18, r1
    5c08:	31 05       	cpc	r19, r1
    5c0a:	f9 f0       	breq	.+62     	; 0x5c4a <malloc+0xb4>
    5c0c:	28 1b       	sub	r18, r24
    5c0e:	39 0b       	sbc	r19, r25
    5c10:	24 30       	cpi	r18, 0x04	; 4
    5c12:	31 05       	cpc	r19, r1
    5c14:	80 f4       	brcc	.+32     	; 0x5c36 <malloc+0xa0>
    5c16:	8a 81       	ldd	r24, Y+2	; 0x02
    5c18:	9b 81       	ldd	r25, Y+3	; 0x03
    5c1a:	61 15       	cp	r22, r1
    5c1c:	71 05       	cpc	r23, r1
    5c1e:	21 f0       	breq	.+8      	; 0x5c28 <malloc+0x92>
    5c20:	fb 01       	movw	r30, r22
    5c22:	93 83       	std	Z+3, r25	; 0x03
    5c24:	82 83       	std	Z+2, r24	; 0x02
    5c26:	04 c0       	rjmp	.+8      	; 0x5c30 <malloc+0x9a>
    5c28:	90 93 0b 06 	sts	0x060B, r25
    5c2c:	80 93 0a 06 	sts	0x060A, r24
    5c30:	fe 01       	movw	r30, r28
    5c32:	32 96       	adiw	r30, 0x02	; 2
    5c34:	44 c0       	rjmp	.+136    	; 0x5cbe <malloc+0x128>
    5c36:	fe 01       	movw	r30, r28
    5c38:	e2 0f       	add	r30, r18
    5c3a:	f3 1f       	adc	r31, r19
    5c3c:	81 93       	st	Z+, r24
    5c3e:	91 93       	st	Z+, r25
    5c40:	22 50       	subi	r18, 0x02	; 2
    5c42:	31 09       	sbc	r19, r1
    5c44:	39 83       	std	Y+1, r19	; 0x01
    5c46:	28 83       	st	Y, r18
    5c48:	3a c0       	rjmp	.+116    	; 0x5cbe <malloc+0x128>
    5c4a:	20 91 08 06 	lds	r18, 0x0608
    5c4e:	30 91 09 06 	lds	r19, 0x0609
    5c52:	23 2b       	or	r18, r19
    5c54:	41 f4       	brne	.+16     	; 0x5c66 <malloc+0xd0>
    5c56:	20 91 02 02 	lds	r18, 0x0202
    5c5a:	30 91 03 02 	lds	r19, 0x0203
    5c5e:	30 93 09 06 	sts	0x0609, r19
    5c62:	20 93 08 06 	sts	0x0608, r18
    5c66:	20 91 00 02 	lds	r18, 0x0200
    5c6a:	30 91 01 02 	lds	r19, 0x0201
    5c6e:	21 15       	cp	r18, r1
    5c70:	31 05       	cpc	r19, r1
    5c72:	41 f4       	brne	.+16     	; 0x5c84 <malloc+0xee>
    5c74:	2d b7       	in	r18, 0x3d	; 61
    5c76:	3e b7       	in	r19, 0x3e	; 62
    5c78:	40 91 04 02 	lds	r20, 0x0204
    5c7c:	50 91 05 02 	lds	r21, 0x0205
    5c80:	24 1b       	sub	r18, r20
    5c82:	35 0b       	sbc	r19, r21
    5c84:	e0 91 08 06 	lds	r30, 0x0608
    5c88:	f0 91 09 06 	lds	r31, 0x0609
    5c8c:	e2 17       	cp	r30, r18
    5c8e:	f3 07       	cpc	r31, r19
    5c90:	a0 f4       	brcc	.+40     	; 0x5cba <malloc+0x124>
    5c92:	2e 1b       	sub	r18, r30
    5c94:	3f 0b       	sbc	r19, r31
    5c96:	28 17       	cp	r18, r24
    5c98:	39 07       	cpc	r19, r25
    5c9a:	78 f0       	brcs	.+30     	; 0x5cba <malloc+0x124>
    5c9c:	ac 01       	movw	r20, r24
    5c9e:	4e 5f       	subi	r20, 0xFE	; 254
    5ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    5ca2:	24 17       	cp	r18, r20
    5ca4:	35 07       	cpc	r19, r21
    5ca6:	48 f0       	brcs	.+18     	; 0x5cba <malloc+0x124>
    5ca8:	4e 0f       	add	r20, r30
    5caa:	5f 1f       	adc	r21, r31
    5cac:	50 93 09 06 	sts	0x0609, r21
    5cb0:	40 93 08 06 	sts	0x0608, r20
    5cb4:	81 93       	st	Z+, r24
    5cb6:	91 93       	st	Z+, r25
    5cb8:	02 c0       	rjmp	.+4      	; 0x5cbe <malloc+0x128>
    5cba:	e0 e0       	ldi	r30, 0x00	; 0
    5cbc:	f0 e0       	ldi	r31, 0x00	; 0
    5cbe:	cf 01       	movw	r24, r30
    5cc0:	df 91       	pop	r29
    5cc2:	cf 91       	pop	r28
    5cc4:	08 95       	ret

00005cc6 <free>:
    5cc6:	cf 93       	push	r28
    5cc8:	df 93       	push	r29
    5cca:	00 97       	sbiw	r24, 0x00	; 0
    5ccc:	09 f4       	brne	.+2      	; 0x5cd0 <free+0xa>
    5cce:	87 c0       	rjmp	.+270    	; 0x5dde <free+0x118>
    5cd0:	fc 01       	movw	r30, r24
    5cd2:	32 97       	sbiw	r30, 0x02	; 2
    5cd4:	13 82       	std	Z+3, r1	; 0x03
    5cd6:	12 82       	std	Z+2, r1	; 0x02
    5cd8:	c0 91 0a 06 	lds	r28, 0x060A
    5cdc:	d0 91 0b 06 	lds	r29, 0x060B
    5ce0:	20 97       	sbiw	r28, 0x00	; 0
    5ce2:	81 f4       	brne	.+32     	; 0x5d04 <free+0x3e>
    5ce4:	20 81       	ld	r18, Z
    5ce6:	31 81       	ldd	r19, Z+1	; 0x01
    5ce8:	28 0f       	add	r18, r24
    5cea:	39 1f       	adc	r19, r25
    5cec:	80 91 08 06 	lds	r24, 0x0608
    5cf0:	90 91 09 06 	lds	r25, 0x0609
    5cf4:	82 17       	cp	r24, r18
    5cf6:	93 07       	cpc	r25, r19
    5cf8:	79 f5       	brne	.+94     	; 0x5d58 <free+0x92>
    5cfa:	f0 93 09 06 	sts	0x0609, r31
    5cfe:	e0 93 08 06 	sts	0x0608, r30
    5d02:	6d c0       	rjmp	.+218    	; 0x5dde <free+0x118>
    5d04:	de 01       	movw	r26, r28
    5d06:	20 e0       	ldi	r18, 0x00	; 0
    5d08:	30 e0       	ldi	r19, 0x00	; 0
    5d0a:	ae 17       	cp	r26, r30
    5d0c:	bf 07       	cpc	r27, r31
    5d0e:	50 f4       	brcc	.+20     	; 0x5d24 <free+0x5e>
    5d10:	12 96       	adiw	r26, 0x02	; 2
    5d12:	4d 91       	ld	r20, X+
    5d14:	5c 91       	ld	r21, X
    5d16:	13 97       	sbiw	r26, 0x03	; 3
    5d18:	9d 01       	movw	r18, r26
    5d1a:	41 15       	cp	r20, r1
    5d1c:	51 05       	cpc	r21, r1
    5d1e:	09 f1       	breq	.+66     	; 0x5d62 <free+0x9c>
    5d20:	da 01       	movw	r26, r20
    5d22:	f3 cf       	rjmp	.-26     	; 0x5d0a <free+0x44>
    5d24:	b3 83       	std	Z+3, r27	; 0x03
    5d26:	a2 83       	std	Z+2, r26	; 0x02
    5d28:	40 81       	ld	r20, Z
    5d2a:	51 81       	ldd	r21, Z+1	; 0x01
    5d2c:	84 0f       	add	r24, r20
    5d2e:	95 1f       	adc	r25, r21
    5d30:	8a 17       	cp	r24, r26
    5d32:	9b 07       	cpc	r25, r27
    5d34:	71 f4       	brne	.+28     	; 0x5d52 <free+0x8c>
    5d36:	8d 91       	ld	r24, X+
    5d38:	9c 91       	ld	r25, X
    5d3a:	11 97       	sbiw	r26, 0x01	; 1
    5d3c:	84 0f       	add	r24, r20
    5d3e:	95 1f       	adc	r25, r21
    5d40:	02 96       	adiw	r24, 0x02	; 2
    5d42:	91 83       	std	Z+1, r25	; 0x01
    5d44:	80 83       	st	Z, r24
    5d46:	12 96       	adiw	r26, 0x02	; 2
    5d48:	8d 91       	ld	r24, X+
    5d4a:	9c 91       	ld	r25, X
    5d4c:	13 97       	sbiw	r26, 0x03	; 3
    5d4e:	93 83       	std	Z+3, r25	; 0x03
    5d50:	82 83       	std	Z+2, r24	; 0x02
    5d52:	21 15       	cp	r18, r1
    5d54:	31 05       	cpc	r19, r1
    5d56:	29 f4       	brne	.+10     	; 0x5d62 <free+0x9c>
    5d58:	f0 93 0b 06 	sts	0x060B, r31
    5d5c:	e0 93 0a 06 	sts	0x060A, r30
    5d60:	3e c0       	rjmp	.+124    	; 0x5dde <free+0x118>
    5d62:	d9 01       	movw	r26, r18
    5d64:	13 96       	adiw	r26, 0x03	; 3
    5d66:	fc 93       	st	X, r31
    5d68:	ee 93       	st	-X, r30
    5d6a:	12 97       	sbiw	r26, 0x02	; 2
    5d6c:	4d 91       	ld	r20, X+
    5d6e:	5d 91       	ld	r21, X+
    5d70:	a4 0f       	add	r26, r20
    5d72:	b5 1f       	adc	r27, r21
    5d74:	ea 17       	cp	r30, r26
    5d76:	fb 07       	cpc	r31, r27
    5d78:	79 f4       	brne	.+30     	; 0x5d98 <free+0xd2>
    5d7a:	80 81       	ld	r24, Z
    5d7c:	91 81       	ldd	r25, Z+1	; 0x01
    5d7e:	84 0f       	add	r24, r20
    5d80:	95 1f       	adc	r25, r21
    5d82:	02 96       	adiw	r24, 0x02	; 2
    5d84:	d9 01       	movw	r26, r18
    5d86:	11 96       	adiw	r26, 0x01	; 1
    5d88:	9c 93       	st	X, r25
    5d8a:	8e 93       	st	-X, r24
    5d8c:	82 81       	ldd	r24, Z+2	; 0x02
    5d8e:	93 81       	ldd	r25, Z+3	; 0x03
    5d90:	13 96       	adiw	r26, 0x03	; 3
    5d92:	9c 93       	st	X, r25
    5d94:	8e 93       	st	-X, r24
    5d96:	12 97       	sbiw	r26, 0x02	; 2
    5d98:	e0 e0       	ldi	r30, 0x00	; 0
    5d9a:	f0 e0       	ldi	r31, 0x00	; 0
    5d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    5d9e:	9b 81       	ldd	r25, Y+3	; 0x03
    5da0:	00 97       	sbiw	r24, 0x00	; 0
    5da2:	19 f0       	breq	.+6      	; 0x5daa <free+0xe4>
    5da4:	fe 01       	movw	r30, r28
    5da6:	ec 01       	movw	r28, r24
    5da8:	f9 cf       	rjmp	.-14     	; 0x5d9c <free+0xd6>
    5daa:	ce 01       	movw	r24, r28
    5dac:	02 96       	adiw	r24, 0x02	; 2
    5dae:	28 81       	ld	r18, Y
    5db0:	39 81       	ldd	r19, Y+1	; 0x01
    5db2:	82 0f       	add	r24, r18
    5db4:	93 1f       	adc	r25, r19
    5db6:	20 91 08 06 	lds	r18, 0x0608
    5dba:	30 91 09 06 	lds	r19, 0x0609
    5dbe:	28 17       	cp	r18, r24
    5dc0:	39 07       	cpc	r19, r25
    5dc2:	69 f4       	brne	.+26     	; 0x5dde <free+0x118>
    5dc4:	30 97       	sbiw	r30, 0x00	; 0
    5dc6:	29 f4       	brne	.+10     	; 0x5dd2 <free+0x10c>
    5dc8:	10 92 0b 06 	sts	0x060B, r1
    5dcc:	10 92 0a 06 	sts	0x060A, r1
    5dd0:	02 c0       	rjmp	.+4      	; 0x5dd6 <free+0x110>
    5dd2:	13 82       	std	Z+3, r1	; 0x03
    5dd4:	12 82       	std	Z+2, r1	; 0x02
    5dd6:	d0 93 09 06 	sts	0x0609, r29
    5dda:	c0 93 08 06 	sts	0x0608, r28
    5dde:	df 91       	pop	r29
    5de0:	cf 91       	pop	r28
    5de2:	08 95       	ret

00005de4 <memset>:
    5de4:	dc 01       	movw	r26, r24
    5de6:	01 c0       	rjmp	.+2      	; 0x5dea <memset+0x6>
    5de8:	6d 93       	st	X+, r22
    5dea:	41 50       	subi	r20, 0x01	; 1
    5dec:	50 40       	sbci	r21, 0x00	; 0
    5dee:	e0 f7       	brcc	.-8      	; 0x5de8 <memset+0x4>
    5df0:	08 95       	ret

00005df2 <_exit>:
    5df2:	f8 94       	cli

00005df4 <__stop_program>:
    5df4:	ff cf       	rjmp	.-2      	; 0x5df4 <__stop_program>
