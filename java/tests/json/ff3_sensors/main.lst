   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 323               		.section	.rodata.str1.1,"aMS",@progbits,1
 324               	.LC0:
 325 0000 4D79 206E 		.string	"My node's address is %d\r\n"
 325      6F64 6527 
 325      7320 6164 
 325      6472 6573 
 325      7320 6973 
 326               	.LC1:
 327 001a 7B22 6D61 		.string	"{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n"
 327      6322 3A25 
 327      643B 226C 
 327      6967 6874 
 327      223A 2564 
 328               		.text
 330               	.global	Task1
 332               	Task1:
 333               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *  Contributing Authors (specific to this file):
  23:main.c        **** *  Zane Starr
  24:main.c        **** *******************************************************************************/
  25:main.c        **** 
  26:main.c        **** 
  27:main.c        **** #include <nrk.h>
  28:main.c        **** #include <include.h>
  29:main.c        **** #include <ulib.h>
  30:main.c        **** #include <stdio.h>
  31:main.c        **** #include <avr/sleep.h>
  32:main.c        **** #include <hal.h>
  33:main.c        **** #include <nrk_error.h>
  34:main.c        **** #include <nrk_timer.h>
  35:main.c        **** #include <nrk_driver_list.h>
  36:main.c        **** #include <nrk_driver.h>
  37:main.c        **** #include <ff_basic_sensor.h>
  38:main.c        **** 
  39:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  40:main.c        **** nrk_task_type TaskOne;
  41:main.c        **** void Task1(void);
  42:main.c        **** 
  43:main.c        **** 
  44:main.c        **** void nrk_create_taskset();
  45:main.c        **** void nrk_register_drivers();
  46:main.c        **** uint8_t kill_stack(uint8_t val);
  47:main.c        **** 
  48:main.c        **** int
  49:main.c        **** main ()
  50:main.c        **** {
  51:main.c        ****   uint8_t t;
  52:main.c        ****   nrk_setup_ports();
  53:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  54:main.c        **** 
  55:main.c        **** 
  56:main.c        ****   printf( PSTR("starting...\r\n") );
  57:main.c        **** 
  58:main.c        ****   nrk_init();
  59:main.c        ****   nrk_time_set(0,0);
  60:main.c        **** 
  61:main.c        ****   nrk_register_drivers();
  62:main.c        ****   nrk_create_taskset ();
  63:main.c        ****   nrk_start();
  64:main.c        ****   
  65:main.c        ****   return 0;
  66:main.c        **** }
  67:main.c        **** 
  68:main.c        **** 
  69:main.c        **** void Task1()
  70:main.c        **** {
 335               	.LM0:
 336               	.LFBB1:
 337 0000 CF93      		push r28
 338 0002 DF93      		push r29
 339 0004 CDB7      		in r28,__SP_L__
 340 0006 DEB7      		in r29,__SP_H__
 341 0008 2A97      		sbiw r28,10
 342 000a 0FB6      		in __tmp_reg__,__SREG__
 343 000c F894      		cli
 344 000e DEBF      		out __SP_H__,r29
 345 0010 0FBE      		out __SREG__,__tmp_reg__
 346 0012 CDBF      		out __SP_L__,r28
 347               	/* prologue: function */
 348               	/* frame size = 10 */
 349               	/* stack size = 12 */
 350               	.L__stack_usage = 12
  71:main.c        **** uint16_t cnt;
  72:main.c        **** int8_t i,fd, val;
  73:main.c        **** uint16_t buf[5];
  74:main.c        **** uint64_t bbuf;
  75:main.c        **** 
  76:main.c        ****   printf( "My node's address is %d\r\n",NODE_ADDR );
 352               	.LM1:
 353 0014 1F92      		push __zero_reg__
 354 0016 1F92      		push __zero_reg__
 355 0018 80E0      		ldi r24,lo8(.LC0)
 356 001a 90E0      		ldi r25,hi8(.LC0)
 357 001c 9F93      		push r25
 358 001e 8F93      		push r24
 359 0020 0E94 0000 		call printf
  77:main.c        **** 
  78:main.c        ****   	// Open ADC device as read 
  79:main.c        ****   	fd=nrk_open(FIREFLY_3_SENSOR_BASIC,READ);
 361               	.LM2:
 362 0024 65E0      		ldi r22,lo8(5)
 363 0026 83E0      		ldi r24,lo8(3)
 364 0028 0E94 0000 		call nrk_open
 365 002c F82E      		mov r15,r24
  80:main.c        ****   	if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
 367               	.LM3:
 368 002e 0F90      		pop __tmp_reg__
 369 0030 0F90      		pop __tmp_reg__
 370 0032 0F90      		pop __tmp_reg__
 371 0034 0F90      		pop __tmp_reg__
 372 0036 8FEF      		ldi r24,lo8(-1)
 373 0038 F812      		cpse r15,r24
 374 003a 00C0      		rjmp .L2
 376               	.LM4:
 377 003c 80E0      		ldi r24,lo8(__c.3315)
 378 003e 90E0      		ldi r25,hi8(__c.3315)
 379 0040 0E94 0000 		call nrk_kprintf
 380               	.L2:
  81:main.c        **** 	cnt=0;
  82:main.c        **** 	while(1) {
  83:main.c        **** 		// Example of setting a sensor 
  84:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,LIGHT);
  85:main.c        **** 		val=nrk_read(fd,&buf[0],2);
  86:main.c        **** 		
  87:main.c        **** 		// temp
  88:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,TEMP);
  89:main.c        **** 		val=nrk_read(fd,&buf[1],2);
  90:main.c        **** 		
  91:main.c        **** 		// acc_x
  92:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,ACC_X);
  93:main.c        **** 		val=nrk_read(fd,&buf[2],2);
  94:main.c        **** 		
  95:main.c        **** 		// acc_y
  96:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,ACC_Y);
  97:main.c        **** 		val=nrk_read(fd,&buf[3],2);
  98:main.c        **** 		
  99:main.c        **** 		// acc_z
 100:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,ACC_Z);
 101:main.c        **** 		val=nrk_read(fd,&buf[4],2);
 102:main.c        **** 
 103:main.c        **** 		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
 382               	.LM5:
 383 0044 00E0      		ldi r16,lo8(.LC1)
 384 0046 10E0      		ldi r17,hi8(.LC1)
 104:main.c        **** 			NODE_ADDR, buf[0], buf[1], buf[2], buf[3], buf[4] );
 105:main.c        **** 	
 106:main.c        **** 		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
 386               	.LM6:
 387 0048 8AE0      		ldi r24,lo8(10)
 388 004a B82E      		mov r11,r24
 107:main.c        **** 			10, buf[0], buf[1], buf[2], buf[3], buf[4] );
 108:main.c        **** 		
 109:main.c        **** 		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
 390               	.LM7:
 391 004c 96E1      		ldi r25,lo8(22)
 392 004e C92E      		mov r12,r25
 110:main.c        **** 			22, buf[0], buf[1], buf[2], buf[3], buf[4] );
 111:main.c        **** 
 112:main.c        **** 		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
 394               	.LM8:
 395 0050 29E1      		ldi r18,lo8(25)
 396 0052 D22E      		mov r13,r18
 113:main.c        **** 			25, buf[0], buf[1], buf[2], buf[3], buf[4] );
 114:main.c        **** 	
 115:main.c        **** 		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
 398               	.LM9:
 399 0054 38E0      		ldi r19,lo8(8)
 400 0056 E32E      		mov r14,r19
 401               	.L3:
  84:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,LIGHT);
 403               	.LM10:
 404 0058 41E0      		ldi r20,lo8(1)
 405 005a 61E0      		ldi r22,lo8(1)
 406 005c 8F2D      		mov r24,r15
 407 005e 0E94 0000 		call nrk_set_status
  85:main.c        **** 		val=nrk_read(fd,&buf[0],2);
 409               	.LM11:
 410 0062 42E0      		ldi r20,lo8(2)
 411 0064 BE01      		movw r22,r28
 412 0066 6F5F      		subi r22,-1
 413 0068 7F4F      		sbci r23,-1
 414 006a 8F2D      		mov r24,r15
 415 006c 0E94 0000 		call nrk_read
  88:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,TEMP);
 417               	.LM12:
 418 0070 40E0      		ldi r20,0
 419 0072 61E0      		ldi r22,lo8(1)
 420 0074 8F2D      		mov r24,r15
 421 0076 0E94 0000 		call nrk_set_status
  89:main.c        **** 		val=nrk_read(fd,&buf[1],2);
 423               	.LM13:
 424 007a 42E0      		ldi r20,lo8(2)
 425 007c BE01      		movw r22,r28
 426 007e 6D5F      		subi r22,-3
 427 0080 7F4F      		sbci r23,-1
 428 0082 8F2D      		mov r24,r15
 429 0084 0E94 0000 		call nrk_read
  92:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,ACC_X);
 431               	.LM14:
 432 0088 44E0      		ldi r20,lo8(4)
 433 008a 61E0      		ldi r22,lo8(1)
 434 008c 8F2D      		mov r24,r15
 435 008e 0E94 0000 		call nrk_set_status
  93:main.c        **** 		val=nrk_read(fd,&buf[2],2);
 437               	.LM15:
 438 0092 42E0      		ldi r20,lo8(2)
 439 0094 BE01      		movw r22,r28
 440 0096 6B5F      		subi r22,-5
 441 0098 7F4F      		sbci r23,-1
 442 009a 8F2D      		mov r24,r15
 443 009c 0E94 0000 		call nrk_read
  96:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,ACC_Y);
 445               	.LM16:
 446 00a0 45E0      		ldi r20,lo8(5)
 447 00a2 61E0      		ldi r22,lo8(1)
 448 00a4 8F2D      		mov r24,r15
 449 00a6 0E94 0000 		call nrk_set_status
  97:main.c        **** 		val=nrk_read(fd,&buf[3],2);
 451               	.LM17:
 452 00aa 42E0      		ldi r20,lo8(2)
 453 00ac BE01      		movw r22,r28
 454 00ae 695F      		subi r22,-7
 455 00b0 7F4F      		sbci r23,-1
 456 00b2 8F2D      		mov r24,r15
 457 00b4 0E94 0000 		call nrk_read
 100:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,ACC_Z);
 459               	.LM18:
 460 00b8 46E0      		ldi r20,lo8(6)
 461 00ba 61E0      		ldi r22,lo8(1)
 462 00bc 8F2D      		mov r24,r15
 463 00be 0E94 0000 		call nrk_set_status
 101:main.c        **** 		val=nrk_read(fd,&buf[4],2);
 465               	.LM19:
 466 00c2 42E0      		ldi r20,lo8(2)
 467 00c4 BE01      		movw r22,r28
 468 00c6 675F      		subi r22,-9
 469 00c8 7F4F      		sbci r23,-1
 470 00ca 8F2D      		mov r24,r15
 471 00cc 0E94 0000 		call nrk_read
 103:main.c        **** 		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
 473               	.LM20:
 474 00d0 8A85      		ldd r24,Y+10
 475 00d2 8F93      		push r24
 476 00d4 8985      		ldd r24,Y+9
 477 00d6 8F93      		push r24
 478 00d8 8885      		ldd r24,Y+8
 479 00da 8F93      		push r24
 480 00dc 8F81      		ldd r24,Y+7
 481 00de 8F93      		push r24
 482 00e0 8E81      		ldd r24,Y+6
 483 00e2 8F93      		push r24
 484 00e4 8D81      		ldd r24,Y+5
 485 00e6 8F93      		push r24
 486 00e8 8C81      		ldd r24,Y+4
 487 00ea 8F93      		push r24
 488 00ec 8B81      		ldd r24,Y+3
 489 00ee 8F93      		push r24
 490 00f0 8A81      		ldd r24,Y+2
 491 00f2 8F93      		push r24
 492 00f4 8981      		ldd r24,Y+1
 493 00f6 8F93      		push r24
 494 00f8 1F92      		push __zero_reg__
 495 00fa 1F92      		push __zero_reg__
 496 00fc 1F93      		push r17
 497 00fe 0F93      		push r16
 498 0100 0E94 0000 		call printf
 106:main.c        **** 		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
 500               	.LM21:
 501 0104 8A85      		ldd r24,Y+10
 502 0106 8F93      		push r24
 503 0108 8985      		ldd r24,Y+9
 504 010a 8F93      		push r24
 505 010c 8885      		ldd r24,Y+8
 506 010e 8F93      		push r24
 507 0110 8F81      		ldd r24,Y+7
 508 0112 8F93      		push r24
 509 0114 8E81      		ldd r24,Y+6
 510 0116 8F93      		push r24
 511 0118 8D81      		ldd r24,Y+5
 512 011a 8F93      		push r24
 513 011c 8C81      		ldd r24,Y+4
 514 011e 8F93      		push r24
 515 0120 8B81      		ldd r24,Y+3
 516 0122 8F93      		push r24
 517 0124 8A81      		ldd r24,Y+2
 518 0126 8F93      		push r24
 519 0128 8981      		ldd r24,Y+1
 520 012a 8F93      		push r24
 521 012c 1F92      		push __zero_reg__
 522 012e BF92      		push r11
 523 0130 1F93      		push r17
 524 0132 0F93      		push r16
 525 0134 0E94 0000 		call printf
 109:main.c        **** 		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
 527               	.LM22:
 528 0138 8A85      		ldd r24,Y+10
 529 013a 8F93      		push r24
 530 013c 8985      		ldd r24,Y+9
 531 013e 8F93      		push r24
 532 0140 8885      		ldd r24,Y+8
 533 0142 8F93      		push r24
 534 0144 8F81      		ldd r24,Y+7
 535 0146 8F93      		push r24
 536 0148 8E81      		ldd r24,Y+6
 537 014a 8F93      		push r24
 538 014c 8D81      		ldd r24,Y+5
 539 014e 8F93      		push r24
 540 0150 8C81      		ldd r24,Y+4
 541 0152 8F93      		push r24
 542 0154 8B81      		ldd r24,Y+3
 543 0156 8F93      		push r24
 544 0158 8A81      		ldd r24,Y+2
 545 015a 8F93      		push r24
 546 015c 8981      		ldd r24,Y+1
 547 015e 8F93      		push r24
 548 0160 1F92      		push __zero_reg__
 549 0162 CF92      		push r12
 550 0164 1F93      		push r17
 551 0166 0F93      		push r16
 552 0168 0E94 0000 		call printf
 112:main.c        **** 		printf("{\"mac\":%d;\"light\":%d;\"temp\":%d;\"acc_x\":%d;\"acc_y\":%d;\"acc_z\":%d}\n", 
 554               	.LM23:
 555 016c 0FB6      		in __tmp_reg__,__SREG__
 556 016e F894      		cli
 557 0170 DEBF      		out __SP_H__,r29
 558 0172 0FBE      		out __SREG__,__tmp_reg__
 559 0174 CDBF      		out __SP_L__,r28
 560 0176 8A85      		ldd r24,Y+10
 561 0178 8F93      		push r24
 562 017a 8985      		ldd r24,Y+9
 563 017c 8F93      		push r24
 564 017e 8885      		ldd r24,Y+8
 565 0180 8F93      		push r24
 566 0182 8F81      		ldd r24,Y+7
 567 0184 8F93      		push r24
 568 0186 8E81      		ldd r24,Y+6
 569 0188 8F93      		push r24
 570 018a 8D81      		ldd r24,Y+5
 571 018c 8F93      		push r24
 572 018e 8C81      		ldd r24,Y+4
 573 0190 8F93      		push r24
 574 0192 8B81      		ldd r24,Y+3
 575 0194 8F93      		push r24
 576 0196 8A81      		ldd r24,Y+2
 577 0198 8F93      		push r24
 578 019a 8981      		ldd r24,Y+1
 579 019c 8F93      		push r24
 580 019e 1F92      		push __zero_reg__
 581 01a0 DF92      		push r13
 582 01a2 1F93      		push r17
 583 01a4 0F93      		push r16
 584 01a6 0E94 0000 		call printf
 586               	.LM24:
 587 01aa 8A85      		ldd r24,Y+10
 588 01ac 8F93      		push r24
 589 01ae 8985      		ldd r24,Y+9
 590 01b0 8F93      		push r24
 591 01b2 8885      		ldd r24,Y+8
 592 01b4 8F93      		push r24
 593 01b6 8F81      		ldd r24,Y+7
 594 01b8 8F93      		push r24
 595 01ba 8E81      		ldd r24,Y+6
 596 01bc 8F93      		push r24
 597 01be 8D81      		ldd r24,Y+5
 598 01c0 8F93      		push r24
 599 01c2 8C81      		ldd r24,Y+4
 600 01c4 8F93      		push r24
 601 01c6 8B81      		ldd r24,Y+3
 602 01c8 8F93      		push r24
 603 01ca 8A81      		ldd r24,Y+2
 604 01cc 8F93      		push r24
 605 01ce 8981      		ldd r24,Y+1
 606 01d0 8F93      		push r24
 607 01d2 1F92      		push __zero_reg__
 608 01d4 EF92      		push r14
 609 01d6 1F93      		push r17
 610 01d8 0F93      		push r16
 611 01da 0E94 0000 		call printf
 116:main.c        **** 			8, buf[0], buf[1], buf[2], buf[3], buf[4] );
 117:main.c        **** 	
 118:main.c        **** 
 119:main.c        **** 		nrk_wait_until_next_period();
 613               	.LM25:
 614 01de 0E94 0000 		call nrk_wait_until_next_period
 615 01e2 0FB6      		in __tmp_reg__,__SREG__
 616 01e4 F894      		cli
 617 01e6 DEBF      		out __SP_H__,r29
 618 01e8 0FBE      		out __SREG__,__tmp_reg__
 619 01ea CDBF      		out __SP_L__,r28
 620 01ec 00C0      		rjmp .L3
 626               	.Lscope1:
 628               		.stabd	78,0,0
 630               	.global	nrk_create_taskset
 632               	nrk_create_taskset:
 633               		.stabd	46,0,0
 120:main.c        **** 		cnt++;
 121:main.c        **** 	}
 122:main.c        **** }
 123:main.c        **** 
 124:main.c        **** 
 125:main.c        **** void
 126:main.c        **** nrk_create_taskset()
 127:main.c        **** {
 635               	.LM26:
 636               	.LFBB2:
 637               	/* prologue: function */
 638               	/* frame size = 0 */
 639               	/* stack size = 0 */
 640               	.L__stack_usage = 0
 128:main.c        ****   TaskOne.task = Task1;
 642               	.LM27:
 643 01ee 80E0      		ldi r24,lo8(gs(Task1))
 644 01f0 90E0      		ldi r25,hi8(gs(Task1))
 645 01f2 9093 0000 		sts TaskOne+5+1,r25
 646 01f6 8093 0000 		sts TaskOne+5,r24
 129:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 648               	.LM28:
 649 01fa 40E8      		ldi r20,lo8(-128)
 650 01fc 50E0      		ldi r21,0
 651 01fe 60E0      		ldi r22,lo8(Stack1)
 652 0200 70E0      		ldi r23,hi8(Stack1)
 653 0202 80E0      		ldi r24,lo8(TaskOne)
 654 0204 90E0      		ldi r25,hi8(TaskOne)
 655 0206 0E94 0000 		call nrk_task_set_stk
 130:main.c        ****   TaskOne.prio = 1;
 657               	.LM29:
 658 020a 81E0      		ldi r24,lo8(1)
 659 020c 8093 0000 		sts TaskOne+8,r24
 131:main.c        ****   TaskOne.FirstActivation = TRUE;
 661               	.LM30:
 662 0210 8093 0000 		sts TaskOne+7,r24
 132:main.c        ****   TaskOne.Type = BASIC_TASK;
 664               	.LM31:
 665 0214 8093 0000 		sts TaskOne+9,r24
 133:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 667               	.LM32:
 668 0218 8093 0000 		sts TaskOne+10,r24
 134:main.c        ****   TaskOne.period.secs = 0;
 670               	.LM33:
 671 021c 1092 0000 		sts TaskOne+11,__zero_reg__
 672 0220 1092 0000 		sts TaskOne+11+1,__zero_reg__
 673 0224 1092 0000 		sts TaskOne+11+2,__zero_reg__
 674 0228 1092 0000 		sts TaskOne+11+3,__zero_reg__
 135:main.c        ****   TaskOne.period.nano_secs = 2000*NANOS_PER_MS; //*NANOS_PER_MS;
 676               	.LM34:
 677 022c 80E0      		ldi r24,0
 678 022e 94E9      		ldi r25,lo8(-108)
 679 0230 A5E3      		ldi r26,lo8(53)
 680 0232 B7E7      		ldi r27,lo8(119)
 681 0234 8093 0000 		sts TaskOne+15,r24
 682 0238 9093 0000 		sts TaskOne+15+1,r25
 683 023c A093 0000 		sts TaskOne+15+2,r26
 684 0240 B093 0000 		sts TaskOne+15+3,r27
 136:main.c        ****   TaskOne.cpu_reserve.secs = 0;
 686               	.LM35:
 687 0244 1092 0000 		sts TaskOne+19,__zero_reg__
 688 0248 1092 0000 		sts TaskOne+19+1,__zero_reg__
 689 024c 1092 0000 		sts TaskOne+19+2,__zero_reg__
 690 0250 1092 0000 		sts TaskOne+19+3,__zero_reg__
 137:main.c        ****   TaskOne.cpu_reserve.nano_secs =  200*NANOS_PER_MS;
 692               	.LM36:
 693 0254 80E0      		ldi r24,0
 694 0256 92EC      		ldi r25,lo8(-62)
 695 0258 ABEE      		ldi r26,lo8(-21)
 696 025a BBE0      		ldi r27,lo8(11)
 697 025c 8093 0000 		sts TaskOne+23,r24
 698 0260 9093 0000 		sts TaskOne+23+1,r25
 699 0264 A093 0000 		sts TaskOne+23+2,r26
 700 0268 B093 0000 		sts TaskOne+23+3,r27
 138:main.c        ****   TaskOne.offset.secs = 0;
 702               	.LM37:
 703 026c 1092 0000 		sts TaskOne+27,__zero_reg__
 704 0270 1092 0000 		sts TaskOne+27+1,__zero_reg__
 705 0274 1092 0000 		sts TaskOne+27+2,__zero_reg__
 706 0278 1092 0000 		sts TaskOne+27+3,__zero_reg__
 139:main.c        ****   TaskOne.offset.nano_secs= 0;
 708               	.LM38:
 709 027c 1092 0000 		sts TaskOne+31,__zero_reg__
 710 0280 1092 0000 		sts TaskOne+31+1,__zero_reg__
 711 0284 1092 0000 		sts TaskOne+31+2,__zero_reg__
 712 0288 1092 0000 		sts TaskOne+31+3,__zero_reg__
 140:main.c        ****   nrk_activate_task (&TaskOne);
 714               	.LM39:
 715 028c 80E0      		ldi r24,lo8(TaskOne)
 716 028e 90E0      		ldi r25,hi8(TaskOne)
 717 0290 0C94 0000 		jmp nrk_activate_task
 719               	.Lscope2:
 721               		.stabd	78,0,0
 723               	.global	nrk_register_drivers
 725               	nrk_register_drivers:
 726               		.stabd	46,0,0
 141:main.c        **** 
 142:main.c        **** }
 143:main.c        **** 
 144:main.c        **** void nrk_register_drivers()
 145:main.c        **** {
 728               	.LM40:
 729               	.LFBB3:
 730               	/* prologue: function */
 731               	/* frame size = 0 */
 732               	/* stack size = 0 */
 733               	.L__stack_usage = 0
 146:main.c        **** int8_t val;
 147:main.c        **** 
 148:main.c        **** // Register the Basic FireFly Sensor device driver
 149:main.c        **** // Make sure to add: 
 150:main.c        **** //     #define NRK_MAX_DRIVER_CNT  
 151:main.c        **** //     in nrk_cfg.h
 152:main.c        **** // Make sure to add: 
 153:main.c        **** //     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
 154:main.c        **** //     in makefile
 155:main.c        **** val=nrk_register_driver( &dev_manager_ff3_sensors,FIREFLY_3_SENSOR_BASIC);
 735               	.LM41:
 736 0294 63E0      		ldi r22,lo8(3)
 737 0296 80E0      		ldi r24,lo8(gs(dev_manager_ff3_sensors))
 738 0298 90E0      		ldi r25,hi8(gs(dev_manager_ff3_sensors))
 739 029a 0E94 0000 		call nrk_register_driver
 156:main.c        **** if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
 741               	.LM42:
 742 029e 8F3F      		cpi r24,lo8(-1)
 743 02a0 01F4      		brne .L6
 745               	.LM43:
 746 02a2 80E0      		ldi r24,lo8(__c.3323)
 747 02a4 90E0      		ldi r25,hi8(__c.3323)
 748 02a6 0C94 0000 		jmp nrk_kprintf
 749               	.L6:
 750 02aa 0895      		ret
 752               	.Lscope3:
 754               		.stabd	78,0,0
 755               		.section	.rodata.str1.1
 756               	.LC2:
 757 005c 7374 6172 		.string	"starting...\r"
 757      7469 6E67 
 757      2E2E 2E0D 
 757      00
 758               		.section	.text.startup,"ax",@progbits
 760               	.global	main
 762               	main:
 763               		.stabd	46,0,0
  50:main.c        **** {
 765               	.LM44:
 766               	.LFBB4:
 767               	/* prologue: function */
 768               	/* frame size = 0 */
 769               	/* stack size = 0 */
 770               	.L__stack_usage = 0
  52:main.c        ****   nrk_setup_ports();
 772               	.LM45:
 773 0000 0E94 0000 		call nrk_setup_ports
  53:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 775               	.LM46:
 776 0004 80E1      		ldi r24,lo8(16)
 777 0006 90E0      		ldi r25,0
 778 0008 0E94 0000 		call nrk_setup_uart
  56:main.c        ****   printf( PSTR("starting...\r\n") );
 780               	.LM47:
 781 000c 80E0      		ldi r24,lo8(.LC2)
 782 000e 90E0      		ldi r25,hi8(.LC2)
 783 0010 0E94 0000 		call puts
  58:main.c        ****   nrk_init();
 785               	.LM48:
 786 0014 0E94 0000 		call nrk_init
  59:main.c        ****   nrk_time_set(0,0);
 788               	.LM49:
 789 0018 20E0      		ldi r18,0
 790 001a 30E0      		ldi r19,0
 791 001c A901      		movw r20,r18
 792 001e 60E0      		ldi r22,0
 793 0020 70E0      		ldi r23,0
 794 0022 CB01      		movw r24,r22
 795 0024 0E94 0000 		call nrk_time_set
  61:main.c        ****   nrk_register_drivers();
 797               	.LM50:
 798 0028 0E94 0000 		call nrk_register_drivers
  62:main.c        ****   nrk_create_taskset ();
 800               	.LM51:
 801 002c 0E94 0000 		call nrk_create_taskset
  63:main.c        ****   nrk_start();
 803               	.LM52:
 804 0030 0E94 0000 		call nrk_start
  66:main.c        **** }
 806               	.LM53:
 807 0034 80E0      		ldi r24,0
 808 0036 90E0      		ldi r25,0
 809 0038 0895      		ret
 811               	.Lscope4:
 813               		.stabd	78,0,0
 814               		.section	.progmem.data,"a",@progbits
 817               	__c.3323:
 818 0000 4661 696C 		.string	"Failed to load my ADC driver\r\n"
 818      6564 2074 
 818      6F20 6C6F 
 818      6164 206D 
 818      7920 4144 
 821               	__c.3315:
 822 001f 4661 696C 		.string	"Failed to open sensor driver\r\n"
 822      6564 2074 
 822      6F20 6F70 
 822      656E 2073 
 822      656E 736F 
 823               		.comm	TaskOne,35,1
 824               		.comm	Stack1,128,1
 825               		.comm	app_timer0_prescale,1,1
 826               		.comm	app_timer0_callback,2,1
 827               		.comm	_nrk_time_trigger,1,1
 828               		.comm	_nrk_prev_timer_val,1,1
 829               		.comm	error_num,1,1
 830               		.comm	error_task,1,1
 831               		.comm	nrk_kernel_stk_ptr,2,1
 832               		.comm	nrk_idle_task_stk,128,1
 833               		.comm	_nrk_signal_list,4,1
 845               		.text
 847               	.Letext0:
 848               		.ident	"GCC: (GNU) 4.8.2"
 849               	.global __do_copy_data
 850               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccQnQnDj.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccQnQnDj.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccQnQnDj.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccQnQnDj.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccQnQnDj.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccQnQnDj.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccQnQnDj.s:332    .text:0000000000000000 Task1
     /tmp/ccQnQnDj.s:821    .progmem.data:000000000000001f __c.3315
     /tmp/ccQnQnDj.s:632    .text:00000000000001ee nrk_create_taskset
                            *COM*:0000000000000023 TaskOne
                            *COM*:0000000000000080 Stack1
     /tmp/ccQnQnDj.s:725    .text:0000000000000294 nrk_register_drivers
     /tmp/ccQnQnDj.s:817    .progmem.data:0000000000000000 __c.3323
     /tmp/ccQnQnDj.s:762    .text.startup:0000000000000000 main
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
printf
nrk_open
nrk_kprintf
nrk_set_status
nrk_read
nrk_wait_until_next_period
nrk_task_set_stk
nrk_activate_task
dev_manager_ff3_sensors
nrk_register_driver
nrk_setup_ports
nrk_setup_uart
puts
nrk_init
nrk_time_set
nrk_start
__do_copy_data
__do_clear_bss
